{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/tasks/cancelable-task.cc",
  "imports": [
    "src/tasks/cancelable-task.h",
    "src/execution/isolate.h"
  ],
  "classes": [
    {
      "name": "Cancelable",
      "properties": [
        "parent_",
        "id_"
      ],
      "methods": [
        {
          "name": "~Cancelable",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Removes the task from its parent's task list if it's finished or running.  Avoids calling a terminated manager by checking the task's status."
        }
      ]
    },
    {
      "name": "CancelableTaskManager",
      "properties": [
        "task_id_counter_",
        "canceled_",
        "mutex_",
        "cancelable_tasks_",
        "cancelable_tasks_barrier_"
      ],
      "methods": [
        {
          "name": "CancelableTaskManager",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor. Initializes task_id_counter_ to kInvalidTaskId and canceled_ to false."
        },
        {
          "name": "~CancelableTaskManager",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Checks that CancelAndWait has been called before destruction to ensure all tasks are canceled or finished."
        },
        {
          "name": "Register",
          "parameters": [
            "Cancelable* task"
          ],
          "return_type": "CancelableTaskManager::Id",
          "logic": "Registers a Cancelable task. If the manager is canceled, the task is immediately canceled. Assigns a unique ID to the task and adds it to the managed tasks."
        },
        {
          "name": "RemoveFinishedTask",
          "parameters": [
            "CancelableTaskManager::Id id"
          ],
          "return_type": "void",
          "logic": "Removes a finished task from the managed tasks map.  Notifies the cancelable_tasks_barrier_ to allow CancelAndWait to proceed."
        },
        {
          "name": "TryAbort",
          "parameters": [
            "CancelableTaskManager::Id id"
          ],
          "return_type": "TryAbortResult",
          "logic": "Attempts to abort a specific task. If the task can be canceled, it's removed and notified. Returns kTaskAborted, kTaskRunning, or kTaskRemoved based on the outcome."
        },
        {
          "name": "CancelAndWait",
          "parameters": [],
          "return_type": "void",
          "logic": "Cancels all registered tasks and waits for any running tasks to finish. Uses a loop to handle tasks that might register new tasks during cancellation.  Utilizes a mutex and condition variable to synchronize with running tasks."
        },
        {
          "name": "TryAbortAll",
          "parameters": [],
          "return_type": "TryAbortResult",
          "logic": "Attempts to cancel all registered tasks. Returns kTaskAborted if all tasks are cancelled, kTaskRunning otherwise."
        }
      ]
    },
    {
      "name": "CancelableTask",
      "properties": [],
      "methods": [
        {
          "name": "CancelableTask",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor.  Takes an Isolate, retrieves the CancelableTaskManager from it, and then calls the other constructor."
        },
        {
          "name": "CancelableTask",
          "parameters": [
            "CancelableTaskManager* manager"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor. Takes a CancelableTaskManager."
        }
      ]
    },
    {
      "name": "CancelableIdleTask",
      "properties": [],
      "methods": [
        {
          "name": "CancelableIdleTask",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor.  Takes an Isolate, retrieves the CancelableTaskManager from it, and then calls the other constructor."
        },
        {
          "name": "CancelableIdleTask",
          "parameters": [
            "CancelableTaskManager* manager"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor. Takes a CancelableTaskManager."
        }
      ]
    }
  ],
  "functions": []
}