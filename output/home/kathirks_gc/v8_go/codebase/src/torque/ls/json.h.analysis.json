{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/ls/json.h",
  "imports": [
    "<map>",
    "<memory>",
    "<string>",
    "<vector>",
    "src/base/logging.h"
  ],
  "classes": [
    {
      "name": "JsonValue",
      "properties": [
        "tag",
        "number_",
        "flag_",
        "string_",
        "object_",
        "array_"
      ],
      "methods": [
        {
          "name": "JsonValue",
          "parameters": [],
          "return_type": "JsonValue",
          "logic": "Default constructor.  Allows for default initialization of JsonValue objects."
        },
        {
          "name": "JsonValue",
          "parameters": [
            "const JsonValue& other"
          ],
          "return_type": "JsonValue",
          "logic": "Deleted copy constructor to prevent copying JsonValue objects."
        },
        {
          "name": "operator=",
          "parameters": [
            "const JsonValue& other"
          ],
          "return_type": "JsonValue&",
          "logic": "Deleted copy assignment operator to prevent copying JsonValue objects."
        },
        {
          "name": "JsonValue",
          "parameters": [
            "JsonValue&& other"
          ],
          "return_type": "JsonValue",
          "logic": "Move constructor for JsonValue objects."
        },
        {
          "name": "operator=",
          "parameters": [
            "JsonValue&& other"
          ],
          "return_type": "JsonValue&",
          "logic": "Move assignment operator for JsonValue objects."
        },
        {
          "name": "From",
          "parameters": [
            "double number"
          ],
          "return_type": "JsonValue",
          "logic": "Creates a JsonValue from a double."
        },
        {
          "name": "From",
          "parameters": [
            "JsonObject object"
          ],
          "return_type": "JsonValue",
          "logic": "Creates a JsonValue from a JsonObject."
        },
        {
          "name": "From",
          "parameters": [
            "bool b"
          ],
          "return_type": "JsonValue",
          "logic": "Creates a JsonValue from a boolean."
        },
        {
          "name": "From",
          "parameters": [
            "const std::string& string"
          ],
          "return_type": "JsonValue",
          "logic": "Creates a JsonValue from a string."
        },
        {
          "name": "From",
          "parameters": [
            "JsonArray array"
          ],
          "return_type": "JsonValue",
          "logic": "Creates a JsonValue from a JsonArray."
        },
        {
          "name": "JsonNull",
          "parameters": [],
          "return_type": "JsonValue",
          "logic": "Creates a JsonValue representing null."
        },
        {
          "name": "IsNumber",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the JsonValue is a number."
        },
        {
          "name": "ToNumber",
          "parameters": [],
          "return_type": "double",
          "logic": "Returns the number value of the JsonValue.  Checks if the value is indeed a number using CHECK macro."
        },
        {
          "name": "IsBool",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the JsonValue is a boolean."
        },
        {
          "name": "ToBool",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the boolean value of the JsonValue.  Checks if the value is indeed a boolean using CHECK macro."
        },
        {
          "name": "IsString",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the JsonValue is a string."
        },
        {
          "name": "ToString",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the string value of the JsonValue.  Checks if the value is indeed a string using CHECK macro."
        },
        {
          "name": "IsObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the JsonValue is an object."
        },
        {
          "name": "ToObject",
          "parameters": [],
          "return_type": "const JsonObject&",
          "logic": "Returns the object value of the JsonValue.  Checks if the value is indeed an object using CHECK macro. Returns a const reference."
        },
        {
          "name": "ToObject",
          "parameters": [],
          "return_type": "JsonObject&",
          "logic": "Returns the object value of the JsonValue.  Checks if the value is indeed an object using CHECK macro. Returns a non-const reference."
        },
        {
          "name": "IsArray",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the JsonValue is an array."
        },
        {
          "name": "ToArray",
          "parameters": [],
          "return_type": "const JsonArray&",
          "logic": "Returns the array value of the JsonValue.  Checks if the value is indeed an array using CHECK macro. Returns a const reference."
        },
        {
          "name": "ToArray",
          "parameters": [],
          "return_type": "JsonArray&",
          "logic": "Returns the array value of the JsonValue.  Checks if the value is indeed an array using CHECK macro. Returns a non-const reference."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "SerializeToString",
      "parameters": [
        "const JsonValue& value"
      ],
      "return_type": "std::string",
      "logic": "Serializes a JsonValue to a string.  The implementation is not in this header file."
    }
  ]
}