{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/ls/message-handler.cc",
  "imports": [
    "<algorithm>",
    "src/torque/ls/message-handler.h",
    "src/torque/ls/globals.h",
    "src/torque/ls/json-parser.h",
    "src/torque/ls/message-pipe.h",
    "src/torque/ls/message.h",
    "src/torque/server-data.h",
    "src/torque/source-positions.h",
    "src/torque/torque-compiler.h"
  ],
  "classes": [
    {
      "name": "DiagnosticCollector",
      "properties": [
        "notifications_",
        "suppress_lint_messages_"
      ],
      "methods": [
        {
          "name": "AddTorqueMessage",
          "parameters": [
            "const TorqueMessage& message"
          ],
          "return_type": "void",
          "logic": "Adds a TorqueMessage to the appropriate diagnostics notification based on its SourceId. It filters lint messages if there are errors and populates the diagnostic with severity, message, source, and range."
        },
        {
          "name": "notifications",
          "parameters": [],
          "return_type": "std::map<SourceId, PublishDiagnosticsNotification>&",
          "logic": "Returns a reference to the internal notifications map."
        },
        {
          "name": "GetOrCreateNotificationForSource",
          "parameters": [
            "SourceId id"
          ],
          "return_type": "PublishDiagnosticsNotification&",
          "logic": "Retrieves or creates a PublishDiagnosticsNotification for a given SourceId. If it doesn't exist, a new notification is created and its URI is set to the absolute path of the source file."
        },
        {
          "name": "ShouldAddMessageOfKind",
          "parameters": [
            "TorqueMessage::Kind kind"
          ],
          "return_type": "bool",
          "logic": "Determines whether a message of a certain kind should be added to the diagnostics. It suppresses lint messages after an error is encountered."
        },
        {
          "name": "PopulateRangeFromSourcePosition",
          "parameters": [
            "Range range",
            "const SourcePosition& position"
          ],
          "return_type": "void",
          "logic": "Populates the Range object with start and end line/column numbers from a SourcePosition."
        },
        {
          "name": "ServerityFor",
          "parameters": [
            "TorqueMessage::Kind kind"
          ],
          "return_type": "Diagnostic::DiagnosticSeverity",
          "logic": "Returns the appropriate DiagnosticSeverity enum value based on the TorqueMessage kind (error or lint)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ReadMessage",
      "parameters": [],
      "return_type": "JsonValue",
      "logic": "Reads a message from standard input, expecting a 'Content-Length' header followed by the JSON content. Parses the JSON content and returns the resulting JsonValue."
    },
    {
      "name": "WriteMessage",
      "parameters": [
        "JsonValue message"
      ],
      "return_type": "void",
      "logic": "Serializes a JsonValue to a string, writes a 'Content-Length' header to standard output, followed by the serialized content."
    },
    {
      "name": "ResetCompilationErrorDiagnostics",
      "parameters": [
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Publishes empty diagnostics notifications for all files in DiagnosticsFiles::Get(), effectively clearing any previous diagnostics. Resets DiagnosticsFiles::Get() after clearing."
    },
    {
      "name": "SendCompilationDiagnostics",
      "parameters": [
        "const TorqueCompilerResult& result",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Iterates through the messages in the TorqueCompilerResult, adds them to a DiagnosticCollector, and then sends a diagnostics notification for each source file containing diagnostics. It also records the source files for which notifications are sent."
    },
    {
      "name": "CompilationFinished",
      "parameters": [
        "TorqueCompilerResult result",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Updates the global LanguageServerData and SourceFileMap with the data from the TorqueCompilerResult. Calls SendCompilationDiagnostics to send the compiler diagnostics to the client."
    },
    {
      "name": "RecompileTorque",
      "parameters": [
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Compiles Torque files using the TorqueCompiler, with specific options enabled for language server data collection and assertion statements. Calls CompilationFinished to handle the compilation result and send diagnostics."
    },
    {
      "name": "RecompileTorqueWithDiagnostics",
      "parameters": [
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Resets existing compilation error diagnostics and then recompiles the Torque code."
    },
    {
      "name": "HandleInitializeRequest",
      "parameters": [
        "InitializeRequest request",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles the 'initialize' request by constructing an InitializeResponse with capabilities like text document synchronization, definition provider, and document symbol provider, then sends the response back to the client."
    },
    {
      "name": "HandleInitializedNotification",
      "parameters": [
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles the 'initialized' notification by sending a registration request to the client, registering for workspace file change events, specifically for .tq files."
    },
    {
      "name": "HandleTorqueFileListNotification",
      "parameters": [
        "TorqueFileListNotification notification",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles the 'torque/fileList' notification, which contains the list of Torque files to compile. Updates the global TorqueFileList with the provided files and recompiles Torque. Assumes a list of file URIs."
    },
    {
      "name": "HandleGotoDefinitionRequest",
      "parameters": [
        "GotoDefinitionRequest request",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles the 'textDocument/definition' request. Determines the source position, tries to find the definition for that position using the LanguageServerData and sends back the location of definition or null if not found."
    },
    {
      "name": "HandleChangeWatchedFilesNotification",
      "parameters": [
        "DidChangeWatchedFilesNotification notification",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles the 'workspace/didChangeWatchedFiles' notification. Recompiles Torque in response to file system changes."
    },
    {
      "name": "HandleDocumentSymbolRequest",
      "parameters": [
        "DocumentSymbolRequest request",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles the 'textDocument/documentSymbol' request. It retrieves document symbols for a given source id and sends a DocumentSymbolResponse back to the client."
    },
    {
      "name": "HandleMessage",
      "parameters": [
        "JsonValue raw_message",
        "MessageWriter writer"
      ],
      "return_type": "void",
      "logic": "Handles an incoming JSON message, dispatching it to the appropriate handler function based on the 'method' field. Logs errors if the method is unknown."
    }
  ]
}