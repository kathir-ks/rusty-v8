{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/cfg.h",
  "imports": [
    "<list>",
    "<memory>",
    "<optional>",
    "<unordered_map>",
    "<vector>",
    "src/torque/ast.h",
    "src/torque/instructions.h",
    "src/torque/source-positions.h",
    "src/torque/types.h"
  ],
  "classes": [
    {
      "name": "Block",
      "properties": [
        "cfg_",
        "instructions_",
        "input_types_",
        "input_definitions_",
        "id_",
        "is_deferred_"
      ],
      "methods": [
        {
          "name": "Block",
          "parameters": [
            "ControlFlowGraph* cfg",
            "size_t id",
            "std::optional<Stack<const Type*>> input_types",
            "bool is_deferred"
          ],
          "return_type": "void",
          "logic": "Constructor for the Block class. Initializes the block with a pointer to the control flow graph, a unique id, optional input types, and a deferred flag."
        },
        {
          "name": "Add",
          "parameters": [
            "Instruction instruction"
          ],
          "return_type": "void",
          "logic": "Adds an instruction to the block's list of instructions. Checks if the block is complete before adding."
        },
        {
          "name": "HasInputTypes",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the block has input types defined."
        },
        {
          "name": "InputTypes",
          "parameters": [],
          "return_type": "const Stack<const Type*>&",
          "logic": "Returns a reference to the block's input types."
        },
        {
          "name": "SetInputTypes",
          "parameters": [
            "const Stack<const Type*>& input_types"
          ],
          "return_type": "void",
          "logic": "Sets the input types for the block."
        },
        {
          "name": "Retype",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through each instruction in the block and calls TypeInstruction to update the types in the current stack."
        },
        {
          "name": "instructions",
          "parameters": [],
          "return_type": "std::vector<Instruction>&",
          "logic": "Returns a reference to the block's instructions (mutable)."
        },
        {
          "name": "instructions",
          "parameters": [],
          "return_type": "const std::vector<Instruction>&",
          "logic": "Returns a const reference to the block's instructions (immutable)."
        },
        {
          "name": "IsComplete",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the block is complete, which means it has at least one instruction and the last instruction is a block terminator."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the block's unique identifier."
        },
        {
          "name": "IsDeferred",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the block is a deferred block."
        },
        {
          "name": "MergeInputDefinitions",
          "parameters": [
            "const Stack<DefinitionLocation>& input_definitions",
            "Worklist<Block*>* worklist"
          ],
          "return_type": "void",
          "logic": "Merges the input definitions with the existing definitions, creating phi nodes where necessary. Adds the block to the worklist if the definitions change."
        },
        {
          "name": "HasInputDefinitions",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the block has input definitions."
        },
        {
          "name": "InputDefinitions",
          "parameters": [],
          "return_type": "const Stack<DefinitionLocation>&",
          "logic": "Returns a reference to the block's input definitions."
        },
        {
          "name": "IsDead",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the block is dead.  A block is dead if it doesn't have any input definitions."
        }
      ]
    },
    {
      "name": "ControlFlowGraph",
      "properties": [
        "blocks_",
        "start_",
        "placed_blocks_",
        "end_",
        "return_type_",
        "next_block_id_"
      ],
      "methods": [
        {
          "name": "ControlFlowGraph",
          "parameters": [
            "Stack<const Type*> input_types"
          ],
          "return_type": "void",
          "logic": "Constructor for the ControlFlowGraph class.  Creates a start block with the given input types."
        },
        {
          "name": "NewBlock",
          "parameters": [
            "std::optional<Stack<const Type*>> input_types",
            "bool is_deferred"
          ],
          "return_type": "Block*",
          "logic": "Creates a new block in the CFG and returns a pointer to it."
        },
        {
          "name": "PlaceBlock",
          "parameters": [
            "Block* block"
          ],
          "return_type": "void",
          "logic": "Adds a block to the list of placed blocks."
        },
        {
          "name": "UnplaceBlockIf",
          "parameters": [
            "UnaryPredicate&& predicate"
          ],
          "return_type": "void",
          "logic": "Removes blocks from the placed blocks vector that satisfy the given predicate."
        },
        {
          "name": "start",
          "parameters": [],
          "return_type": "Block*",
          "logic": "Returns the start block of the CFG."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "std::optional<Block*>",
          "logic": "Returns the end block of the CFG (optional)."
        },
        {
          "name": "set_end",
          "parameters": [
            "Block* end"
          ],
          "return_type": "void",
          "logic": "Sets the end block of the CFG."
        },
        {
          "name": "SetReturnType",
          "parameters": [
            "TypeVector t"
          ],
          "return_type": "void",
          "logic": "Sets the return type of the CFG. Reports an error if the return type is already set and different from the new type."
        },
        {
          "name": "blocks",
          "parameters": [],
          "return_type": "const std::vector<Block*>&",
          "logic": "Returns a constant reference to the vector of placed blocks."
        },
        {
          "name": "NumberOfBlockIds",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of block ids generated."
        },
        {
          "name": "ParameterCount",
          "parameters": [],
          "return_type": "std::size_t",
          "logic": "Returns the number of parameters expected for the function represented by the CFG, determined by the input types of the start block."
        }
      ]
    },
    {
      "name": "CfgAssembler",
      "properties": [
        "current_stack_",
        "cfg_",
        "current_block_"
      ],
      "methods": [
        {
          "name": "CfgAssembler",
          "parameters": [
            "Stack<const Type*> input_types"
          ],
          "return_type": "void",
          "logic": "Constructor for the CfgAssembler class. Initializes the current stack and creates a new CFG."
        },
        {
          "name": "Result",
          "parameters": [],
          "return_type": "const ControlFlowGraph&",
          "logic": "Finishes building the CFG, performs optimizations, computes input definitions, and returns the result."
        },
        {
          "name": "NewBlock",
          "parameters": [
            "std::optional<Stack<const Type*>> input_types",
            "bool is_deferred"
          ],
          "return_type": "Block*",
          "logic": "Creates a new block in the CFG using the cfg_ object."
        },
        {
          "name": "CurrentBlockIsComplete",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current block is complete."
        },
        {
          "name": "CfgIsComplete",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all blocks in the CFG are complete, or if the block is the end block."
        },
        {
          "name": "Emit",
          "parameters": [
            "Instruction instruction"
          ],
          "return_type": "void",
          "logic": "Emits an instruction to the current block, typing the instruction against the current stack."
        },
        {
          "name": "CurrentStack",
          "parameters": [],
          "return_type": "const Stack<const Type*>&",
          "logic": "Returns a reference to the current stack."
        },
        {
          "name": "TopRange",
          "parameters": [
            "size_t slot_count"
          ],
          "return_type": "StackRange",
          "logic": "Returns a StackRange representing the top slots of the current stack."
        },
        {
          "name": "Bind",
          "parameters": [
            "Block* block"
          ],
          "return_type": "void",
          "logic": "Binds a given block to the current assembler."
        },
        {
          "name": "Goto",
          "parameters": [
            "Block* block"
          ],
          "return_type": "void",
          "logic": "Changes the current block to the given block."
        },
        {
          "name": "Goto",
          "parameters": [
            "Block* block",
            "size_t preserved_slots"
          ],
          "return_type": "StackRange",
          "logic": "Moves to given block while preserving specified number of top slots."
        },
        {
          "name": "Branch",
          "parameters": [
            "Block* if_true",
            "Block* if_false"
          ],
          "return_type": "void",
          "logic": "Creates a conditional branch based on the top of the stack."
        },
        {
          "name": "DeleteRange",
          "parameters": [
            "StackRange range"
          ],
          "return_type": "void",
          "logic": "Deletes the specified range of slots from the current stack."
        },
        {
          "name": "DropTo",
          "parameters": [
            "BottomOffset new_level"
          ],
          "return_type": "void",
          "logic": "Removes elements from the stack until the stack top is at new_level."
        },
        {
          "name": "Peek",
          "parameters": [
            "StackRange range",
            "std::optional<const Type*> type"
          ],
          "return_type": "StackRange",
          "logic": "Peeks at a range on the stack and optionally checks its type."
        },
        {
          "name": "Poke",
          "parameters": [
            "StackRange destination",
            "StackRange origin",
            "std::optional<const Type*> type"
          ],
          "return_type": "void",
          "logic": "Copies values from origin range to destination range on the stack. Performs type checks if specified."
        },
        {
          "name": "Print",
          "parameters": [
            "std::string s"
          ],
          "return_type": "void",
          "logic": "Prints a string."
        },
        {
          "name": "AssertionFailure",
          "parameters": [
            "std::string message"
          ],
          "return_type": "void",
          "logic": "Raises an assertion failure with given message."
        },
        {
          "name": "Unreachable",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the current point as unreachable."
        },
        {
          "name": "DebugBreak",
          "parameters": [],
          "return_type": "void",
          "logic": "Inserts a breakpoint for debugging purposes."
        },
        {
          "name": "PrintCurrentStack",
          "parameters": [
            "std::ostream& s"
          ],
          "return_type": "void",
          "logic": "Prints current stack to the provided output stream."
        },
        {
          "name": "OptimizeCfg",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs optimizations on the CFG."
        },
        {
          "name": "ComputeInputDefinitions",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes input definitions for each block."
        }
      ]
    },
    {
      "name": "CfgAssemblerScopedTemporaryBlock",
      "properties": [
        "assembler_",
        "saved_stack_",
        "saved_block_"
      ],
      "methods": [
        {
          "name": "CfgAssemblerScopedTemporaryBlock",
          "parameters": [
            "CfgAssembler* assembler",
            "Block* block"
          ],
          "return_type": "void",
          "logic": "Constructor for a scoped block. Saves the current block and stack of the assembler, and switches to a temporary block. Places the new block."
        },
        {
          "name": "~CfgAssemblerScopedTemporaryBlock",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the scoped block. Restores the original block and stack of the assembler."
        }
      ]
    }
  ],
  "functions": []
}