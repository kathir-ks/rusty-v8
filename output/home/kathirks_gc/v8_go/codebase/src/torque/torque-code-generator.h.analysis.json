{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/torque-code-generator.h",
  "imports": [
    "<iostream>",
    "src/torque/cfg.h",
    "src/torque/declarable.h"
  ],
  "classes": [
    {
      "name": "TorqueCodeGenerator",
      "properties": [
        "cfg_",
        "out_",
        "out_decls_",
        "fresh_id_",
        "previous_position_",
        "location_map_"
      ],
      "methods": [
        {
          "name": "TorqueCodeGenerator",
          "parameters": [
            "const ControlFlowGraph& cfg",
            "std::ostream& out"
          ],
          "return_type": "void",
          "logic": "Constructor for the TorqueCodeGenerator class. Initializes the cfg_, out_, out_decls_, fresh_id_, and previous_position_ members. It takes a ControlFlowGraph and an ostream as input."
        },
        {
          "name": "DefinitionToVariable",
          "parameters": [
            "const DefinitionLocation& location"
          ],
          "return_type": "std::string",
          "logic": "Converts a DefinitionLocation to a unique variable name.  Handles different location types (Phi, Parameter, Instruction) and ensures each location has a unique name. Uses a location map to store previously generated names."
        },
        {
          "name": "SetDefinitionVariable",
          "parameters": [
            "const DefinitionLocation& definition",
            "const std::string& str"
          ],
          "return_type": "void",
          "logic": "Sets a variable name for a given DefinitionLocation.  Inserts the definition and its string representation into the location map.  Throws an error if the definition already exists in the map."
        },
        {
          "name": "out",
          "parameters": [],
          "return_type": "std::ostream&",
          "logic": "Returns a reference to the primary output stream."
        },
        {
          "name": "decls",
          "parameters": [],
          "return_type": "std::ostream&",
          "logic": "Returns a reference to the declarations output stream."
        },
        {
          "name": "IsEmptyInstruction",
          "parameters": [
            "const Instruction& instruction"
          ],
          "return_type": "static bool",
          "logic": "Static method to determine if an instruction is empty (implementation not provided in header file)."
        },
        {
          "name": "EmitSourcePosition",
          "parameters": [
            "SourcePosition pos",
            "bool always_emit"
          ],
          "return_type": "virtual void",
          "logic": "Abstract method that emits source position information to the output stream. The actual implementation depends on the specific backend."
        },
        {
          "name": "FreshNodeName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Generates a unique name for a node in the graph using an incrementing ID."
        },
        {
          "name": "FreshCatchName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Generates a unique name for a catch block, using an incrementing ID."
        },
        {
          "name": "FreshLabelName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Generates a unique name for a label, using an incrementing ID."
        },
        {
          "name": "BlockName",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "std::string",
          "logic": "Generates a name for a block based on its ID."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const Instruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits an instruction to the output stream. It is responsible for handling generic instructions. It calls the overloaded EmitInstruction method based on the instruction type."
        },
        {
          "name": "EmitIRAnnotation",
          "parameters": [
            "const T& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits an IR annotation comment to the output, including the instruction and the size of the stack."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const T& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "virtual void",
          "logic": "Abstract method that emits a specific instruction to the output stream. The implementation depends on the instruction type and the target backend. This is declared for all backend-dependent instructions via a macro."
        }
      ]
    }
  ],
  "functions": []
}