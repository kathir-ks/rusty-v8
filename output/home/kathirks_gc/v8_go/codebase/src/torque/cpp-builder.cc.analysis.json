{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/cpp-builder.cc",
  "imports": [
    "src/torque/cpp-builder.h"
  ],
  "classes": [
    {
      "name": "Function",
      "properties": [
        "description_",
        "pos_",
        "return_type_",
        "name_",
        "parameters_",
        "default_value",
        "owning_class_"
      ],
      "methods": [
        {
          "name": "PrintDeclarationHeader",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the declaration header of a function, including comments, position, export/inline/static/constexpr qualifiers, return type, name, and parameters. Handles class template parameters if the function belongs to a class."
        },
        {
          "name": "PrintDeclaration",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the function declaration (header + semicolon). It determines the appropriate indentation level."
        },
        {
          "name": "PrintDefinition",
          "parameters": [
            "std::ostream& stream",
            "const std::function<void(std::ostream&)>& builder",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the function definition (header + body + closing brace).  Uses the provided builder function to construct the function body."
        },
        {
          "name": "PrintInlineDefinition",
          "parameters": [
            "std::ostream& stream",
            "const std::function<void(std::ostream&)>& builder",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints an inline function definition (header + body + closing brace) where the definition is in the header file. Uses the provided builder function to construct the function body."
        },
        {
          "name": "PrintBeginDefinition",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the beginning of the function definition, including the function header and opening brace. Includes scope resolution (class name) if the function is a method of a class.  Handles class template parameters if applicable."
        },
        {
          "name": "PrintEndDefinition",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the closing brace and a newline, completing the function definition."
        }
      ]
    },
    {
      "name": "File",
      "properties": [
        "namespaces_"
      ],
      "methods": [
        {
          "name": "BeginIncludeGuard",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "void",
          "logic": "Starts an include guard with the given name."
        },
        {
          "name": "EndIncludeGuard",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "void",
          "logic": "Ends an include guard with the given name."
        },
        {
          "name": "BeginNamespace",
          "parameters": [
            "std::string name"
          ],
          "return_type": "void",
          "logic": "Starts a namespace with the given name.  Handles nested namespaces via a stack."
        },
        {
          "name": "BeginNamespace",
          "parameters": [
            "std::string name0",
            "std::string name1"
          ],
          "return_type": "void",
          "logic": "Starts two nested namespaces."
        },
        {
          "name": "EndNamespace",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "void",
          "logic": "Ends a namespace with the given name. Ensures the namespaces are closed in the correct order."
        },
        {
          "name": "EndNamespace",
          "parameters": [
            "const std::string& name0",
            "const std::string& name1"
          ],
          "return_type": "void",
          "logic": "Ends two nested namespaces."
        }
      ]
    }
  ],
  "functions": []
}