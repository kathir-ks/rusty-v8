{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/earley-parser.h",
  "imports": [
    "<map>",
    "<memory>",
    "<optional>",
    "<vector>",
    "src/base/contextual.h",
    "src/torque/source-positions.h",
    "src/torque/utils.h"
  ],
  "classes": [
    {
      "name": "ParseResultHolderBase",
      "properties": [
        "type_id_"
      ],
      "methods": [
        {
          "name": "~ParseResultHolderBase",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for base class."
        },
        {
          "name": "Cast",
          "parameters": [],
          "return_type": "T&",
          "logic": "Template method to cast the ParseResultHolderBase to a derived type T and return a reference to the underlying value."
        },
        {
          "name": "Cast",
          "parameters": [],
          "return_type": "const T&",
          "logic": "Template method to cast the ParseResultHolderBase to a derived type T and return a const reference to the underlying value."
        },
        {
          "name": "ParseResultHolderBase",
          "parameters": [
            "TypeId type_id"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes the type_id_ member."
        }
      ]
    },
    {
      "name": "ParseResultHolder",
      "properties": [
        "id",
        "value_"
      ],
      "methods": [
        {
          "name": "ParseResultHolder",
          "parameters": [
            "T value"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes the value_ member using move semantics."
        }
      ]
    },
    {
      "name": "ParseResult",
      "properties": [
        "value_"
      ],
      "methods": [
        {
          "name": "ParseResult",
          "parameters": [
            "T x"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes the value_ member with a ParseResultHolder of type T."
        },
        {
          "name": "Cast",
          "parameters": [],
          "return_type": "const T&",
          "logic": "Casts the held value to type T and returns a const reference."
        },
        {
          "name": "Cast",
          "parameters": [],
          "return_type": "T&",
          "logic": "Casts the held value to type T and returns a reference."
        },
        {
          "name": "Cast",
          "parameters": [],
          "return_type": "T&&",
          "logic": "Casts the held value to type T and returns an rvalue reference."
        }
      ]
    },
    {
      "name": "MatchedInput",
      "properties": [
        "begin",
        "end",
        "pos"
      ],
      "methods": [
        {
          "name": "MatchedInput",
          "parameters": [
            "InputPosition begin",
            "InputPosition end",
            "SourcePosition pos"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes begin, end and pos."
        },
        {
          "name": "ToString",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the matched input as a std::string."
        }
      ]
    },
    {
      "name": "ParseResultIterator",
      "properties": [
        "results_",
        "i_",
        "matched_input_"
      ],
      "methods": [
        {
          "name": "ParseResultIterator",
          "parameters": [
            "std::vector<ParseResult> results",
            "MatchedInput matched_input"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes results_ and matched_input_."
        },
        {
          "name": "Next",
          "parameters": [],
          "return_type": "ParseResult",
          "logic": "Returns the next ParseResult in the results_ vector."
        },
        {
          "name": "NextAs",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the next ParseResult in the results_ vector cast to type T."
        },
        {
          "name": "HasNext",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if there are more ParseResults in the results_ vector."
        },
        {
          "name": "matched_input",
          "parameters": [],
          "return_type": "const MatchedInput&",
          "logic": "Returns a const reference to the matched_input_."
        }
      ]
    },
    {
      "name": "Rule",
      "properties": [
        "left_hand_side_",
        "right_hand_side_",
        "action_"
      ],
      "methods": [
        {
          "name": "Rule",
          "parameters": [
            "std::vector<Symbol*> right_hand_side",
            "Action action"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes right_hand_side_ and action_."
        },
        {
          "name": "left",
          "parameters": [],
          "return_type": "Symbol*",
          "logic": "Returns the left-hand side symbol of the rule."
        },
        {
          "name": "right",
          "parameters": [],
          "return_type": "const std::vector<Symbol*>&",
          "logic": "Returns the right-hand side symbols of the rule."
        },
        {
          "name": "SetLeftHandSide",
          "parameters": [
            "Symbol* left_hand_side"
          ],
          "return_type": "void",
          "logic": "Sets the left-hand side symbol of the rule."
        },
        {
          "name": "RunAction",
          "parameters": [
            "const Item* completed_item",
            "const LexerResult& tokens"
          ],
          "return_type": "std::optional<ParseResult>",
          "logic": "Runs the action associated with the rule, if present."
        }
      ]
    },
    {
      "name": "Symbol",
      "properties": [
        "rules_"
      ],
      "methods": [
        {
          "name": "Symbol",
          "parameters": [],
          "return_type": "",
          "logic": "Default constructor."
        },
        {
          "name": "Symbol",
          "parameters": [
            "std::initializer_list<Rule> rules"
          ],
          "return_type": "",
          "logic": "Constructor that initializes the symbol with a list of rules."
        },
        {
          "name": "operator=",
          "parameters": [
            "std::initializer_list<Rule> rules"
          ],
          "return_type": "Symbol&",
          "logic": "Assigns a list of rules to the symbol."
        },
        {
          "name": "IsTerminal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the symbol is a terminal symbol (i.e., has no rules)."
        },
        {
          "name": "rule",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Rule*",
          "logic": "Returns the rule at the given index."
        },
        {
          "name": "rule_number",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of rules associated with the symbol."
        },
        {
          "name": "AddRule",
          "parameters": [
            "const Rule& rule"
          ],
          "return_type": "void",
          "logic": "Adds a rule to the symbol's list of rules."
        },
        {
          "name": "RunAction",
          "parameters": [
            "const Item* item",
            "const LexerResult& tokens"
          ],
          "return_type": "std::optional<ParseResult>",
          "logic": "Runs the action associated with the symbol for the given item."
        }
      ]
    },
    {
      "name": "Item",
      "properties": [
        "rule_",
        "mark_",
        "start_",
        "pos_",
        "prev_",
        "child_"
      ],
      "methods": [
        {
          "name": "Item",
          "parameters": [
            "const Rule* rule",
            "size_t mark",
            "size_t start",
            "size_t pos"
          ],
          "return_type": "",
          "logic": "Constructor that initializes the item with the given rule, mark, start, and pos."
        },
        {
          "name": "IsComplete",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the item is complete (i.e., the mark is at the end of the rule)."
        },
        {
          "name": "NextSymbol",
          "parameters": [],
          "return_type": "Symbol*",
          "logic": "Returns the symbol that is expected next for the item to advance."
        },
        {
          "name": "Advance",
          "parameters": [
            "size_t new_pos",
            "const Item* child"
          ],
          "return_type": "Item",
          "logic": "Creates a new item by advancing the mark by one."
        },
        {
          "name": "Children",
          "parameters": [],
          "return_type": "std::vector<const Item*>",
          "logic": "Collects the child items representing the AST of this item."
        },
        {
          "name": "SplitByChildren",
          "parameters": [
            "const LexerResult& tokens"
          ],
          "return_type": "std::string",
          "logic": "Splits the matched input based on children."
        },
        {
          "name": "CheckAmbiguity",
          "parameters": [
            "const Item& other",
            "const LexerResult& tokens"
          ],
          "return_type": "void",
          "logic": "Checks if another item results in the same AST."
        },
        {
          "name": "GetMatchedInput",
          "parameters": [
            "const LexerResult& tokens"
          ],
          "return_type": "MatchedInput",
          "logic": "Gets the matched input range for this item from the lexer tokens."
        },
        {
          "name": "operator==",
          "parameters": [
            "const Item& other"
          ],
          "return_type": "bool",
          "logic": "Compares the equality of two Item objects based on the rule, mark, start and pos."
        },
        {
          "name": "rule",
          "parameters": [],
          "return_type": "const Rule*",
          "logic": "Returns the rule associated with the item."
        },
        {
          "name": "left",
          "parameters": [],
          "return_type": "Symbol*",
          "logic": "Returns the left-hand side symbol of the rule associated with the item."
        },
        {
          "name": "right",
          "parameters": [],
          "return_type": "const std::vector<Symbol*>&",
          "logic": "Returns the right-hand side symbols of the rule associated with the item."
        },
        {
          "name": "pos",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the position of the item."
        },
        {
          "name": "start",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the start position of the item."
        }
      ]
    },
    {
      "name": "Lexer",
      "properties": [
        "match_whitespace_",
        "patterns_",
        "keywords_"
      ],
      "methods": [
        {
          "name": "SetWhitespace",
          "parameters": [
            "PatternFunction whitespace"
          ],
          "return_type": "void",
          "logic": "Sets the whitespace matching function."
        },
        {
          "name": "Pattern",
          "parameters": [
            "PatternFunction pattern"
          ],
          "return_type": "Symbol*",
          "logic": "Associates a pattern matching function with a symbol."
        },
        {
          "name": "Token",
          "parameters": [
            "const std::string& keyword"
          ],
          "return_type": "Symbol*",
          "logic": "Associates a keyword with a symbol."
        },
        {
          "name": "RunLexer",
          "parameters": [
            "const std::string& input"
          ],
          "return_type": "LexerResult",
          "logic": "Runs the lexer on the input string and returns the result."
        },
        {
          "name": "MatchToken",
          "parameters": [
            "InputPosition* pos",
            "InputPosition end"
          ],
          "return_type": "Symbol*",
          "logic": "Matches a token at the given position."
        }
      ]
    },
    {
      "name": "Grammar",
      "properties": [
        "lexer_",
        "generated_symbols_",
        "start_"
      ],
      "methods": [
        {
          "name": "Grammar",
          "parameters": [
            "Symbol* start"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes start_."
        },
        {
          "name": "Parse",
          "parameters": [
            "const std::string& input"
          ],
          "return_type": "std::optional<ParseResult>",
          "logic": "Parses the input string and returns the result."
        },
        {
          "name": "Token",
          "parameters": [
            "const std::string& s"
          ],
          "return_type": "Symbol*",
          "logic": "Returns the symbol associated with the given keyword from the lexer."
        },
        {
          "name": "Pattern",
          "parameters": [
            "PatternFunction pattern"
          ],
          "return_type": "Symbol*",
          "logic": "Returns the symbol associated with the given pattern from the lexer."
        },
        {
          "name": "SetWhitespace",
          "parameters": [
            "PatternFunction ws"
          ],
          "return_type": "void",
          "logic": "Sets the whitespace matching function in the lexer."
        },
        {
          "name": "NewSymbol",
          "parameters": [
            "std::initializer_list<Rule> rules"
          ],
          "return_type": "Symbol*",
          "logic": "Creates a new symbol and stores it in the current grammar."
        },
        {
          "name": "MatchChar",
          "parameters": [
            "int (*char_class)(int)",
            "InputPosition* pos"
          ],
          "return_type": "static bool",
          "logic": "Matches a character based on an int-based character class function."
        },
        {
          "name": "MatchChar",
          "parameters": [
            "bool (*char_class)(char)",
            "InputPosition* pos"
          ],
          "return_type": "static bool",
          "logic": "Matches a character based on a bool-based character class function."
        },
        {
          "name": "MatchAnyChar",
          "parameters": [
            "InputPosition* pos"
          ],
          "return_type": "static bool",
          "logic": "Matches any character."
        },
        {
          "name": "MatchString",
          "parameters": [
            "const char* s",
            "InputPosition* pos"
          ],
          "return_type": "static bool",
          "logic": "Matches a string."
        },
        {
          "name": "YieldMatchedInput",
          "parameters": [
            "ParseResultIterator* child_results"
          ],
          "return_type": "static std::optional<ParseResult>",
          "logic": "Yields the matched input as a ParseResult."
        },
        {
          "name": "Sequence",
          "parameters": [
            "std::vector<Symbol*> symbols"
          ],
          "return_type": "Symbol*",
          "logic": "Creates a new symbol to parse the given sequence of symbols."
        },
        {
          "name": "YieldIntegralConstant",
          "parameters": [
            "ParseResultIterator* child_results"
          ],
          "return_type": "static std::optional<ParseResult>",
          "logic": "Yields an integral constant value as a ParseResult."
        },
        {
          "name": "YieldDefaultValue",
          "parameters": [
            "ParseResultIterator* child_results"
          ],
          "return_type": "static std::optional<ParseResult>",
          "logic": "Yields a default-constructed value as a ParseResult."
        },
        {
          "name": "CastParseResult",
          "parameters": [
            "ParseResultIterator* child_results"
          ],
          "return_type": "static std::optional<ParseResult>",
          "logic": "Casts a parse result from one type to another."
        },
        {
          "name": "TryOrDefault",
          "parameters": [
            "Symbol* s"
          ],
          "return_type": "Symbol*",
          "logic": "Tries to parse {s} and return the result cast to type {T}. Otherwise returns a default-constructed {T}."
        },
        {
          "name": "MakeSingletonVector",
          "parameters": [
            "ParseResultIterator* child_results"
          ],
          "return_type": "static std::optional<ParseResult>",
          "logic": "Makes a singleton vector from the parse result."
        },
        {
          "name": "MakeExtendedVector",
          "parameters": [
            "ParseResultIterator* child_results"
          ],
          "return_type": "static std::optional<ParseResult>",
          "logic": "Extends a vector with a new element from the parse result."
        },
        {
          "name": "NonemptyList",
          "parameters": [
            "Symbol* element",
            "std::optional<Symbol*> separator"
          ],
          "return_type": "Symbol*",
          "logic": "Creates a symbol for a non-empty list of elements."
        },
        {
          "name": "List",
          "parameters": [
            "Symbol* element",
            "std::optional<Symbol*> separator"
          ],
          "return_type": "Symbol*",
          "logic": "Creates a symbol for an optional list of elements."
        },
        {
          "name": "Optional",
          "parameters": [
            "Symbol* x"
          ],
          "return_type": "Symbol*",
          "logic": "Creates a symbol for an optional parse of x."
        },
        {
          "name": "CheckIf",
          "parameters": [
            "Symbol* x"
          ],
          "return_type": "Symbol*",
          "logic": "Creates a symbol that yields true if x can be parsed, false otherwise."
        },
        {
          "name": "lexer",
          "parameters": [],
          "return_type": "Lexer&",
          "logic": "Returns a reference to the lexer."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DefaultAction",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Default action that returns the first child result, if available."
    },
    {
      "name": "AsSingletonVector",
      "parameters": [],
      "return_type": "Action",
      "logic": "Template function that returns an Action which creates a singleton vector from the result of another action."
    },
    {
      "name": "hash_value",
      "parameters": [
        "const Item& i"
      ],
      "return_type": "size_t",
      "logic": "Computes the hash value of an Item object."
    },
    {
      "name": "RunEarleyAlgorithm",
      "parameters": [
        "Symbol* start",
        "const LexerResult& tokens",
        "std::unordered_set<Item, base::hash<Item>>* processed"
      ],
      "return_type": "const Item*",
      "logic": "Runs the Earley parsing algorithm."
    },
    {
      "name": "ParseTokens",
      "parameters": [
        "Symbol* start",
        "const LexerResult& tokens"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Parses the tokens using the Earley algorithm."
    }
  ]
}