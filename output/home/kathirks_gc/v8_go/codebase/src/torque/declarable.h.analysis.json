{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/declarable.h",
  "imports": [
    "<cassert>",
    "<optional>",
    "<string>",
    "<unordered_map>",
    "src/base/hashing.h",
    "src/base/logging.h",
    "src/torque/ast.h",
    "src/torque/types.h",
    "src/torque/utils.h"
  ],
  "classes": [
    {
      "name": "QualifiedName",
      "properties": [
        "namespace_qualification",
        "name"
      ],
      "methods": [
        {
          "name": "QualifiedName",
          "parameters": [
            "namespace_qualification",
            "name"
          ],
          "return_type": "QualifiedName",
          "logic": "Constructor that initializes the qualified name with a namespace qualification and a name."
        },
        {
          "name": "QualifiedName",
          "parameters": [
            "name"
          ],
          "return_type": "QualifiedName",
          "logic": "Constructor that initializes the qualified name with just a name, assuming no namespace qualification."
        },
        {
          "name": "Parse",
          "parameters": [
            "qualified_name"
          ],
          "return_type": "QualifiedName",
          "logic": "Parses a string into a qualified name (static method, implementation not shown)."
        },
        {
          "name": "HasNamespaceQualification",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the qualified name has a namespace qualification."
        },
        {
          "name": "DropFirstNamespaceQualification",
          "parameters": [],
          "return_type": "QualifiedName",
          "logic": "Creates a new QualifiedName with the first element in `namespace_qualification` removed."
        },
        {
          "name": "operator<<",
          "parameters": [
            "os",
            "name"
          ],
          "return_type": "std::ostream&",
          "logic": "Overloads the output stream operator for printing a QualifiedName (friend function, implementation not shown)."
        }
      ]
    },
    {
      "name": "Declarable",
      "properties": [
        "kind_",
        "parent_scope_",
        "position_",
        "identifier_position_",
        "is_user_defined_"
      ],
      "methods": [
        {
          "name": "~Declarable",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual destructor."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "Kind",
          "logic": "Returns the kind of the declarable."
        },
        {
          "name": "IsNamespace",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a namespace."
        },
        {
          "name": "IsMacro",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a macro (Torque or Extern)."
        },
        {
          "name": "IsTorqueMacro",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a Torque macro."
        },
        {
          "name": "IsMethod",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a method."
        },
        {
          "name": "IsExternMacro",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is an extern macro."
        },
        {
          "name": "IsIntrinsic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is an intrinsic."
        },
        {
          "name": "IsBuiltin",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a builtin."
        },
        {
          "name": "IsRuntimeFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a runtime function."
        },
        {
          "name": "IsGenericCallable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a generic callable."
        },
        {
          "name": "IsGenericType",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a generic type."
        },
        {
          "name": "IsTypeAlias",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a type alias."
        },
        {
          "name": "IsExternConstant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is an external constant."
        },
        {
          "name": "IsNamespaceConstant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a namespace constant."
        },
        {
          "name": "IsValue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a value (ExternConstant or NamespaceConstant)."
        },
        {
          "name": "IsScope",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is a scope (Namespace or Callable)."
        },
        {
          "name": "IsCallable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the declarable is callable (Macro, Builtin, RuntimeFunction or Intrinsic)."
        },
        {
          "name": "type_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns a string representation of the type name."
        },
        {
          "name": "ParentScope",
          "parameters": [],
          "return_type": "Scope*",
          "logic": "Returns the parent scope of the declarable."
        },
        {
          "name": "Position",
          "parameters": [],
          "return_type": "SourcePosition",
          "logic": "Returns the source position of the entire declarable."
        },
        {
          "name": "SetPosition",
          "parameters": [
            "position"
          ],
          "return_type": "void",
          "logic": "Sets the source position of the entire declarable."
        },
        {
          "name": "IdentifierPosition",
          "parameters": [],
          "return_type": "SourcePosition",
          "logic": "Returns the source position of the identifier of the declarable."
        },
        {
          "name": "SetIdentifierPosition",
          "parameters": [
            "position"
          ],
          "return_type": "void",
          "logic": "Sets the source position of the identifier of the declarable."
        },
        {
          "name": "IsUserDefined",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the declarable is user-defined."
        },
        {
          "name": "SetIsUserDefined",
          "parameters": [
            "is_user_defined"
          ],
          "return_type": "void",
          "logic": "Sets whether the declarable is user-defined."
        }
      ]
    },
    {
      "name": "SpecializationRequester",
      "properties": [
        "position",
        "scope",
        "name"
      ],
      "methods": [
        {
          "name": "None",
          "parameters": [],
          "return_type": "SpecializationRequester",
          "logic": "Returns a SpecializationRequester representing 'none'."
        },
        {
          "name": "IsNone",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the requester represents 'none'."
        },
        {
          "name": "SpecializationRequester",
          "parameters": [
            "position",
            "scope",
            "name"
          ],
          "return_type": "SpecializationRequester",
          "logic": "Constructor for SpecializationRequester"
        }
      ]
    },
    {
      "name": "Scope",
      "properties": [
        "declarations_",
        "requester_"
      ],
      "methods": [
        {
          "name": "LookupShallow",
          "parameters": [
            "name"
          ],
          "return_type": "std::vector<Declarable*>",
          "logic": "Looks up a declarable within the current scope, without traversing up to parent scopes. Resolves namespace prefixes."
        },
        {
          "name": "Lookup",
          "parameters": [
            "name"
          ],
          "return_type": "std::vector<Declarable*>",
          "logic": "Looks up a declarable within the scope and its parent scopes recursively. (implementation not shown)"
        },
        {
          "name": "AddDeclarable",
          "parameters": [
            "name",
            "declarable"
          ],
          "return_type": "T*",
          "logic": "Adds a declarable to the scope."
        },
        {
          "name": "GetSpecializationRequester",
          "parameters": [],
          "return_type": "const SpecializationRequester&",
          "logic": "Returns the SpecializationRequester for the scope."
        },
        {
          "name": "SetSpecializationRequester",
          "parameters": [
            "requester"
          ],
          "return_type": "void",
          "logic": "Sets the SpecializationRequester for the scope."
        }
      ]
    },
    {
      "name": "Namespace",
      "properties": [
        "name_"
      ],
      "methods": [
        {
          "name": "Namespace",
          "parameters": [
            "name"
          ],
          "return_type": "Namespace",
          "logic": "Constructor for Namespace"
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the name of the namespace."
        },
        {
          "name": "IsDefaultNamespace",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the namespace is the default namespace. (implementation not shown)"
        },
        {
          "name": "IsTestNamespace",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the namespace is the test namespace. (implementation not shown)"
        }
      ]
    },
    {
      "name": "Value",
      "properties": [
        "type_",
        "name_",
        "value_"
      ],
      "methods": [
        {
          "name": "name",
          "parameters": [],
          "return_type": "const Identifier*",
          "logic": "Returns the name of the value."
        },
        {
          "name": "IsConst",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true as this class always represents const values"
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "VisitResult",
          "logic": "Returns the value."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "const Type*",
          "logic": "Returns the type of the value."
        },
        {
          "name": "set_value",
          "parameters": [
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the value."
        }
      ]
    },
    {
      "name": "NamespaceConstant",
      "properties": [
        "external_name_",
        "body_"
      ],
      "methods": [
        {
          "name": "external_name",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the external name of the constant."
        },
        {
          "name": "body",
          "parameters": [],
          "return_type": "Expression*",
          "logic": "Returns the body of the constant."
        }
      ]
    },
    {
      "name": "ExternConstant",
      "properties": [],
      "methods": []
    },
    {
      "name": "Callable",
      "properties": [
        "external_name_",
        "readable_name_",
        "signature_",
        "returns_",
        "body_"
      ],
      "methods": [
        {
          "name": "ExternalName",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the external name of the callable."
        },
        {
          "name": "ReadableName",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the readable name of the callable."
        },
        {
          "name": "signature",
          "parameters": [],
          "return_type": "const Signature&",
          "logic": "Returns the signature of the callable."
        },
        {
          "name": "IsTransitioning",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the callable is transitioning."
        },
        {
          "name": "parameter_names",
          "parameters": [],
          "return_type": "const NameVector&",
          "logic": "Returns the parameter names of the callable."
        },
        {
          "name": "HasReturnValue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the callable has a return value."
        },
        {
          "name": "IncrementReturns",
          "parameters": [],
          "return_type": "void",
          "logic": "Increments the return counter."
        },
        {
          "name": "HasReturns",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the callable has returns."
        },
        {
          "name": "body",
          "parameters": [],
          "return_type": "std::optional<Statement*>",
          "logic": "Returns the body of the callable."
        },
        {
          "name": "IsExternal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the callable is external (no body)."
        },
        {
          "name": "ShouldBeInlined",
          "parameters": [
            "output_type"
          ],
          "return_type": "virtual bool",
          "logic": "Determines whether the callable should be inlined."
        },
        {
          "name": "ShouldGenerateExternalCode",
          "parameters": [
            "output_type"
          ],
          "return_type": "bool",
          "logic": "Determines if external code should be generated for the callable"
        },
        {
          "name": "CCName",
          "parameters": [],
          "return_type": "virtual std::string",
          "logic": "Returns the name to use in runtime C++ code."
        },
        {
          "name": "CCDebugName",
          "parameters": [],
          "return_type": "virtual std::string",
          "logic": "Returns the name to use in debug C++ code."
        }
      ]
    },
    {
      "name": "Macro",
      "properties": [
        "used_"
      ],
      "methods": [
        {
          "name": "ShouldBeInlined",
          "parameters": [
            "output_type"
          ],
          "return_type": "bool",
          "logic": "Determines whether the macro should be inlined."
        },
        {
          "name": "SetUsed",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the macro to be used."
        },
        {
          "name": "IsUsed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the macro is used."
        }
      ]
    },
    {
      "name": "ExternMacro",
      "properties": [
        "external_assembler_name_"
      ],
      "methods": [
        {
          "name": "external_assembler_name",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the external assembler name."
        },
        {
          "name": "CCName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the C++ name including shims"
        },
        {
          "name": "CCDebugName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the C++ name including shims, for debugging."
        }
      ]
    },
    {
      "name": "TorqueMacro",
      "properties": [
        "exported_to_csa_"
      ],
      "methods": [
        {
          "name": "IsExportedToCSA",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the macro is exported to CSA."
        },
        {
          "name": "CCName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the C++ name of the torque macro"
        },
        {
          "name": "CCDebugName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the C++ name of the torque macro, for debugging."
        }
      ]
    },
    {
      "name": "Method",
      "properties": [
        "aggregate_type_"
      ],
      "methods": [
        {
          "name": "ShouldBeInlined",
          "parameters": [
            "output_type"
          ],
          "return_type": "bool",
          "logic": "Determines if the method should be inlined, based on its type parameters and whether the base ShouldBeInlined returns true"
        },
        {
          "name": "aggregate_type",
          "parameters": [],
          "return_type": "AggregateType*",
          "logic": "Returns the aggregate type of the method."
        }
      ]
    },
    {
      "name": "Builtin",
      "properties": [
        "kind_",
        "flags_",
        "use_counter_name_"
      ],
      "methods": [
        {
          "name": "kind",
          "parameters": [],
          "return_type": "Kind",
          "logic": "Returns the kind of the builtin."
        },
        {
          "name": "flags",
          "parameters": [],
          "return_type": "Flags",
          "logic": "Returns the flags of the builtin."
        },
        {
          "name": "use_counter_name",
          "parameters": [],
          "return_type": "std::optional<std::string>",
          "logic": "Returns the use counter name of the builtin."
        },
        {
          "name": "IsStub",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the builtin is a stub."
        },
        {
          "name": "IsVarArgsJavaScript",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the builtin is a varargs JavaScript builtin."
        },
        {
          "name": "IsFixedArgsJavaScript",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the builtin is a fixed args JavaScript builtin."
        },
        {
          "name": "IsJavaScript",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the builtin is a JavaScript builtin (varargs or fixed args)."
        },
        {
          "name": "HasCustomInterfaceDescriptor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the builtin has a custom interface descriptor."
        }
      ]
    },
    {
      "name": "RuntimeFunction",
      "properties": [],
      "methods": []
    },
    {
      "name": "Intrinsic",
      "properties": [],
      "methods": []
    },
    {
      "name": "TypeConstraint",
      "properties": [
        "upper_bound"
      ],
      "methods": [
        {
          "name": "IsViolated",
          "parameters": [
            "const Type*"
          ],
          "return_type": "std::optional<std::string>",
          "logic": "Checks if a type violates the constraint.  Returns error message, if it exists."
        },
        {
          "name": "Unconstrained",
          "parameters": [],
          "return_type": "TypeConstraint",
          "logic": "Returns an unconstrained TypeConstraint."
        },
        {
          "name": "SubtypeConstraint",
          "parameters": [
            "const Type*"
          ],
          "return_type": "TypeConstraint",
          "logic": "Returns a TypeConstraint that represents a subtype constraint with an upper bound."
        }
      ]
    },
    {
      "name": "GenericDeclarable",
      "properties": [
        "name_",
        "generic_declaration_",
        "specializations_",
        "constraints_"
      ],
      "methods": [
        {
          "name": "AddSpecialization",
          "parameters": [
            "const TypeVector&",
            "SpecializationType"
          ],
          "return_type": "void",
          "logic": "Adds a specialization to the generic declarable."
        },
        {
          "name": "GetSpecialization",
          "parameters": [
            "const TypeVector&"
          ],
          "return_type": "std::optional<SpecializationType>",
          "logic": "Gets a specialization from the generic declarable."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the beginning of the specializations."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the end of the specializations."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the name of the generic declarable."
        },
        {
          "name": "declaration",
          "parameters": [],
          "return_type": "auto",
          "logic": "Returns the declaration of the generic declarable."
        },
        {
          "name": "generic_parameters",
          "parameters": [],
          "return_type": "const GenericParameters&",
          "logic": "Returns the generic parameters."
        },
        {
          "name": "Constraints",
          "parameters": [],
          "return_type": "const std::vector<TypeConstraint>&",
          "logic": "Returns the constrains for this type."
        }
      ]
    },
    {
      "name": "GenericCallable",
      "properties": [],
      "methods": [
        {
          "name": "CallableBody",
          "parameters": [],
          "return_type": "std::optional<Statement*>",
          "logic": "Get the body of callable"
        },
        {
          "name": "InferSpecializationTypes",
          "parameters": [
            "const TypeVector&",
            "const std::vector<std::optional<const Type*> >&"
          ],
          "return_type": "TypeArgumentInference",
          "logic": "Infers the specialization types"
        }
      ]
    },
    {
      "name": "GenericType",
      "properties": [],
      "methods": []
    },
    {
      "name": "TypeAlias",
      "properties": [
        "being_resolved_",
        "delayed_",
        "type_",
        "redeclaration_",
        "declaration_position_"
      ],
      "methods": [
        {
          "name": "type",
          "parameters": [],
          "return_type": "const Type*",
          "logic": "Returns the type that is aliased."
        },
        {
          "name": "Resolve",
          "parameters": [],
          "return_type": "const Type*",
          "logic": "Resolves the type alias to its underlying type."
        },
        {
          "name": "IsRedeclaration",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type alias is a redeclaration."
        },
        {
          "name": "GetDeclarationPosition",
          "parameters": [],
          "return_type": "SourcePosition",
          "logic": "Returns the source position where this was declared."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FindConstraintViolation",
      "parameters": [
        "const std::vector<const Type*>&",
        "const std::vector<TypeConstraint>&"
      ],
      "return_type": "std::optional<std::string>",
      "logic": "Finds a constraint violation, if any."
    },
    {
      "name": "ComputeConstraints",
      "parameters": [
        "Scope*",
        "const GenericParameters&"
      ],
      "return_type": "std::vector<TypeConstraint>",
      "logic": "Computes the constraints for the generic parameters."
    },
    {
      "name": "CurrentNamespace",
      "parameters": [],
      "return_type": "Namespace*",
      "logic": "Returns the current namespace based on the current scope."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const Callable&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for printing a Callable. (implementation not shown)"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const Builtin&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for printing a Builtin. (implementation not shown)"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const RuntimeFunction&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for printing a RuntimeFunction. (implementation not shown)"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const GenericCallable&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for printing a GenericCallable. (implementation not shown)"
    }
  ]
}