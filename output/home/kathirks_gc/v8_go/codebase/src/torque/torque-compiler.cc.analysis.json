{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/torque-compiler.cc",
  "imports": [
    "src/torque/torque-compiler.h",
    "<fstream>",
    "<optional>",
    "src/torque/declarable.h",
    "src/torque/declaration-visitor.h",
    "src/torque/global-context.h",
    "src/torque/implementation-visitor.h",
    "src/torque/torque-parser.h",
    "src/torque/type-oracle.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "ReadFile",
      "parameters": [
        "const std::string& path"
      ],
      "return_type": "std::optional<std::string>",
      "logic": "Reads the content of a file specified by the given path and returns it as a string. Returns nullopt if the file cannot be opened."
    },
    {
      "name": "ReadAndParseTorqueFile",
      "parameters": [
        "const std::string& path"
      ],
      "return_type": "void",
      "logic": "Reads a Torque file from the given path or URI, parses its content, and adds it to the current AST. Handles file not found errors."
    },
    {
      "name": "CompileCurrentAst",
      "parameters": [
        "TorqueCompilerOptions options"
      ],
      "return_type": "void",
      "logic": "Compiles the current AST using the given compiler options. This includes predeclaration, resolution, declaration processing, type finalization, and generation of various output files using an ImplementationVisitor."
    },
    {
      "name": "CompileTorque",
      "parameters": [
        "const std::string& source",
        "TorqueCompilerOptions options"
      ],
      "return_type": "TorqueCompilerResult",
      "logic": "Compiles Torque code from a string source. Sets up the necessary scopes, parses the source, compiles the AST, and returns the compilation result containing source file map, language server data, and messages."
    },
    {
      "name": "CompileTorque",
      "parameters": [
        "const std::vector<std::string>& files",
        "TorqueCompilerOptions options"
      ],
      "return_type": "TorqueCompilerResult",
      "logic": "Compiles Torque code from a list of file paths. Sets up the necessary scopes, reads and parses each file, compiles the AST, and returns the compilation result."
    },
    {
      "name": "CompileTorqueForKythe",
      "parameters": [
        "std::vector<TorqueCompilationUnit> units",
        "TorqueCompilerOptions options",
        "KytheConsumer* consumer"
      ],
      "return_type": "TorqueCompilerResult",
      "logic": "Compiles Torque code from a list of compilation units, which are data structures containing file paths and content. It sets up the Kythe consumer, parses the code from the compilation units, compiles the resulting AST, and returns the compilation result. The `KytheConsumer` is used to emit data for Kythe's indexing system."
    }
  ]
}