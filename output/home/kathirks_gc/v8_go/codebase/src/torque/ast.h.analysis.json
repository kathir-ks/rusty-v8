{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/ast.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/torque/ast.h\",\n  \"imports\": [\n    \"<algorithm>\",\n    \"<iostream>\",\n    \"<map>\",\n    \"<memory>\",\n    \"<optional>\",\n    \"<set>\",\n    \"<string>\",\n    \"<vector>\",\n    \"src/numbers/integer-literal.h\",\n    \"src/torque/constants.h\",\n    \"src/torque/source-positions.h\",\n    \"src/torque/utils.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"AstNode\",\n      \"properties\": [\n        \"kind\",\n        \"pos\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AstNode\",\n          \"parameters\": [\n            \"Kind kind\",\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AstNode, initializes kind and position.\"\n        },\n        {\n          \"name\": \"~AstNode\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor for AstNode (default implementation).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AstNodeClassCheck\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"IsInstanceOf\",\n          \"parameters\": [\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Template function that checks if an AstNode is an instance of a given class T.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Expression\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Expression\",\n          \"parameters\": [\n            \"Kind kind\",\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for Expression, calls AstNode constructor.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Virtual function to visit all sub-expressions of the expression.  Currently a placeholder.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LocationExpression\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"LocationExpression\",\n          \"parameters\": [\n            \"Kind kind\",\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for LocationExpression, calls Expression constructor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TypeExpression\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"TypeExpression\",\n          \"parameters\": [\n            \"Kind kind\",\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TypeExpression, calls AstNode constructor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Declaration\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Declaration\",\n          \"parameters\": [\n            \"Kind kind\",\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for Declaration, calls AstNode constructor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Statement\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Statement\",\n          \"parameters\": [\n            \"Kind kind\",\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for Statement, calls AstNode constructor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NamespaceDeclaration\",\n      \"properties\": [\n        \"declarations\",\n        \"name\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NamespaceDeclaration\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::string name\",\n            \"std::vector<Declaration*> declarations\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for NamespaceDeclaration, initializes declarations and name.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EnumDescription\",\n      \"properties\": [\n        \"pos\",\n        \"name\",\n        \"constexpr_generates\",\n        \"is_open\",\n        \"entries\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"EnumDescription\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::string name\",\n            \"std::string constexpr_generates\",\n            \"bool is_open\",\n            \"std::vector<Entry> entries\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for EnumDescription, initializes position, name, constexpr_generates, is_open and entries.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Ast\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"declarations\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<Declaration*>&\",\n          \"logic\": \"Returns a reference to the vector of declarations.\"\n        },\n        {\n          \"name\": \"declarations\",\n          \"parameters\": [],\n          \"return_type\": \"const std::vector<Declaration*>&\",\n          \"logic\": \"Returns a const reference to the vector of declarations.\"\n        },\n        {\n          \"name\": \"AddNode\",\n          \"parameters\": [\n            \"std::unique_ptr<T> node\"\n          ],\n          \"return_type\": \"T*\",\n          \"logic\": \"Adds a node to the list of nodes and returns a raw pointer to it.\"\n        },\n        {\n          \"name\": \"DeclareImportForCurrentFile\",\n          \"parameters\": [\n            \"SourceId import_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Declares an import for the current file.\"\n        },\n        {\n          \"name\": \"AddEnumDescription\",\n          \"parameters\": [\n            \"EnumDescription description\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds an enum description to the list of enum descriptions.\"\n        },\n        {\n          \"name\": \"EnumDescriptions\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<EnumDescription>&\",\n          \"logic\": \"Returns a reference to the vector of enum descriptions.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Identifier\",\n      \"properties\": [\n        \"value\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Identifier\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::string identifier\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for Identifier, initializes value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IdentifierPtrValueEq\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"operator()\",\n          \"parameters\": [\n            \"const Identifier* a\",\n            \"const Identifier* b\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two Identifiers by their value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IdentifierExpression\",\n      \"properties\": [\n        \"namespace_qualification\",\n        \"name\",\n        \"generic_arguments\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IdentifierExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::vector<std::string> namespace_qualification\",\n            \"Identifier* name\",\n            \"std::vector<TypeExpression*> args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IdentifierExpression with namespace qualification.\"\n        },\n        {\n          \"name\": \"IdentifierExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Identifier* name\",\n            \"std::vector<TypeExpression*> args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IdentifierExpression without namespace qualification.\"\n        },\n        {\n          \"name\": \"IsThis\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this identifier represents the \\\"this\\\" parameter.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits this expression via the callback.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IntrinsicCallExpression\",\n      \"properties\": [\n        \"name\",\n        \"generic_arguments\",\n        \"arguments\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IntrinsicCallExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Identifier* name\",\n            \"std::vector<TypeExpression*> generic_arguments\",\n            \"std::vector<Expression*> arguments\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IntrinsicCallExpression, initializes name, generic_arguments, and arguments.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits all arguments and then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallMethodExpression\",\n      \"properties\": [\n        \"target\",\n        \"method\",\n        \"arguments\",\n        \"labels\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallMethodExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* target\",\n            \"IdentifierExpression* method\",\n            \"std::vector<Expression*> arguments\",\n            \"std::vector<Identifier*> labels\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for CallMethodExpression, initializes target, method, arguments and labels.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the target, method, all arguments, and then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallExpression\",\n      \"properties\": [\n        \"callee\",\n        \"arguments\",\n        \"labels\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"IdentifierExpression* callee\",\n            \"std::vector<Expression*> arguments\",\n            \"std::vector<Identifier*> labels\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for CallExpression, initializes callee, arguments, and labels.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the callee, all arguments, and then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StructExpression\",\n      \"properties\": [\n        \"type\",\n        \"initializers\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StructExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"TypeExpression* type\",\n            \"std::vector<NameAndExpression> initializers\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for StructExpression, initializes type and initializers.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits all initializers and then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LogicalOrExpression\",\n      \"properties\": [\n        \"left\",\n        \"right\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LogicalOrExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* left\",\n            \"Expression* right\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for LogicalOrExpression, initializes left and right expressions.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the left and right expressions, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LogicalAndExpression\",\n      \"properties\": [\n        \"left\",\n        \"right\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LogicalAndExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* left\",\n            \"Expression* right\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for LogicalAndExpression, initializes left and right expressions.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the left and right expressions, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SpreadExpression\",\n      \"properties\": [\n        \"spreadee\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SpreadExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* spreadee\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for SpreadExpression, initializes the spreadee expression.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the spreadee expression, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConditionalExpression\",\n      \"properties\": [\n        \"condition\",\n        \"if_true\",\n        \"if_false\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ConditionalExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* condition\",\n            \"Expression* if_true\",\n            \"Expression* if_false\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ConditionalExpression, initializes the condition, if_true, and if_false expressions.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the condition, if_true, and if_false expressions, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StringLiteralExpression\",\n      \"properties\": [\n        \"literal\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StringLiteralExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::string literal\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for StringLiteralExpression, initializes the literal string.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IntegerLiteralExpression\",\n      \"properties\": [\n        \"value\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IntegerLiteralExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"IntegerLiteral value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IntegerLiteralExpression, initializes the IntegerLiteral value.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FloatingPointLiteralExpression\",\n      \"properties\": [\n        \"value\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FloatingPointLiteralExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"double value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for FloatingPointLiteralExpression, initializes the floating-point value.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ElementAccessExpression\",\n      \"properties\": [\n        \"array\",\n        \"index\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ElementAccessExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* array\",\n            \"Expression* index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ElementAccessExpression, initializes the array and index expressions.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the array and index expressions, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FieldAccessExpression\",\n      \"properties\": [\n        \"object\",\n        \"field\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FieldAccessExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* object\",\n            \"Identifier* field\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for FieldAccessExpression, initializes the object and field identifier.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the object expression, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DereferenceExpression\",\n      \"properties\": [\n        \"reference\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DereferenceExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* reference\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for DereferenceExpression, initializes the reference expression.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the reference expression, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AssignmentExpression\",\n      \"properties\": [\n        \"location\",\n        \"op\",\n        \"value\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AssignmentExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* location\",\n            \"Expression* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AssignmentExpression, initializes the location and value expressions.\"\n        },\n        {\n          \"name\": \"AssignmentExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* location\",\n            \"std::optional<std::string> op\",\n            \"Expression* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AssignmentExpression with optional operator, initializes the location, operator, and value expressions.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the location and value expressions, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IncrementDecrementExpression\",\n      \"properties\": [\n        \"location\",\n        \"op\",\n        \"postfix\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IncrementDecrementExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* location\",\n            \"IncrementDecrementOperator op\",\n            \"bool postfix\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IncrementDecrementExpression, initializes the location expression, operator, and postfix flag.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the location expression, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AssumeTypeImpossibleExpression\",\n      \"properties\": [\n        \"excluded_type\",\n        \"expression\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AssumeTypeImpossibleExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"TypeExpression* excluded_type\",\n            \"Expression* expression\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AssumeTypeImpossibleExpression, initializes the excluded_type and expression.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits the expression, then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NewExpression\",\n      \"properties\": [\n        \"type\",\n        \"initializers\",\n        \"pretenured\",\n        \"clear_padding\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NewExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"TypeExpression* type\",\n            \"std::vector<NameAndExpression> initializers\",\n            \"bool pretenured\",\n            \"bool clear_padding\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for NewExpression, initializes the type, initializers, pretenured and clear_padding.\"\n        },\n        {\n          \"name\": \"VisitAllSubExpressions\",\n          \"parameters\": [\n            \"VisitCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits all initializers and then this expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ParameterList\",\n      \"properties\": [\n        \"names\",\n        \"types\",\n        \"implicit_kind\",\n        \"implicit_kind_pos\",\n        \"implicit_count\",\n        \"has_varargs\",\n        \"arguments_variable\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Empty\",\n          \"parameters\": [],\n          \"return_type\": \"ParameterList\",\n          \"logic\": \"Returns an empty ParameterList.\"\n        },\n        {\n          \"name\": \"GetImplicitTypes\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<TypeExpression*>\",\n          \"logic\": \"Returns a vector containing the implicit types.\"\n        },\n        {\n          \"name\": \"GetExplicitTypes\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<TypeExpression*>\",\n          \"logic\": \"Returns a vector containing the explicit types.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BasicTypeExpression\",\n      \"properties\": [\n        \"namespace_qualification\",\n        \"is_constexpr\",\n        \"name\",\n        \"generic_arguments\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BasicTypeExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::vector<std::string> namespace_qualification\",\n            \"Identifier* name\",\n            \"std::vector<TypeExpression*> generic_arguments\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for BasicTypeExpression with namespace qualification.\"\n        },\n        {\n          \"name\": \"BasicTypeExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Identifier* name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for BasicTypeExpression without namespace qualification.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FunctionTypeExpression\",\n      \"properties\": [\n        \"parameters\",\n        \"return_type\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FunctionTypeExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::vector<TypeExpression*> parameters\",\n            \"TypeExpression* return_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for FunctionTypeExpression, initializes parameters and return_type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PrecomputedTypeExpression\",\n      \"properties\": [\n        \"type\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PrecomputedTypeExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"const Type* type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for PrecomputedTypeExpression, initializes the type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"UnionTypeExpression\",\n      \"properties\": [\n        \"a\",\n        \"b\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"UnionTypeExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"TypeExpression* a\",\n            \"TypeExpression* b\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for UnionTypeExpression, initializes a and b TypeExpression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExpressionStatement\",\n      \"properties\": [\n        \"expression\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ExpressionStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* expression\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ExpressionStatement, initializes expression.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IfStatement\",\n      \"properties\": [\n        \"condition\",\n        \"is_constexpr\",\n        \"if_true\",\n        \"if_false\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IfStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"bool is_constexpr\",\n            \"Expression* condition\",\n            \"Statement* if_true\",\n            \"std::optional<Statement*> if_false\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IfStatement, initializes condition, is_constexpr, if_true, and if_false.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WhileStatement\",\n      \"properties\": [\n        \"condition\",\n        \"body\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WhileStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* condition\",\n            \"Statement* body\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for WhileStatement, initializes condition and body.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ReturnStatement\",\n      \"properties\": [\n        \"value\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ReturnStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::optional<Expression*> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ReturnStatement, initializes value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DebugStatement\",\n      \"properties\": [\n        \"kind\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DebugStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Kind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for DebugStatement, initializes kind.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AssertStatement\",\n      \"properties\": [\n        \"kind\",\n        \"expression\",\n        \"source\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AssertStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"AssertKind kind\",\n            \"Expression* expression\",\n            \"std::string source\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AssertStatement, initializes kind, expression, and source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TailCallStatement\",\n      \"properties\": [\n        \"call\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TailCallStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"CallExpression* call\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TailCallStatement, initializes call.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"VarDeclarationStatement\",\n      \"properties\": [\n        \"const_qualified\",\n        \"name\",\n        \"type\",\n        \"initializer\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"VarDeclarationStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"bool const_qualified\",\n            \"Identifier* name\",\n            \"std::optional<TypeExpression*> type\",\n            \"std::optional<Expression*> initializer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for VarDeclarationStatement, initializes const_qualified, name, type, and initializer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BreakStatement\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"BreakStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for BreakStatement.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ContinueStatement\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ContinueStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ContinueStatement.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GotoStatement\",\n      \"properties\": [\n        \"label\",\n        \"arguments\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GotoStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Identifier* label\",\n            \"const std::vector<Expression*>& arguments\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for GotoStatement, initializes label and arguments.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ForLoopStatement\",\n      \"properties\": [\n        \"var_declaration\",\n        \"test\",\n        \"action\",\n        \"body\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ForLoopStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"std::optional<Statement*> declaration\",\n            \"std::optional<Expression*> test\",\n            \"std::optional<Statement*> action\",\n            \"Statement* body\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ForLoopStatement, initializes declaration, test, action, and body.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TryHandler\",\n      \"properties\": [\n        \"handler_kind\",\n        \"label\",\n        \"parameters\",\n        \"body\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TryHandler\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"HandlerKind handler_kind\",\n            \"Identifier* label\",\n            \"const ParameterList& parameters\",\n            \"Statement* body\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TryHandler, initializes handler_kind, label, parameters, and body.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StatementExpression\",\n      \"properties\": [\n        \"statement\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StatementExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Statement* statement\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for StatementExpression, initializes statement.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TryLabelExpression\",\n      \"properties\": [\n        \"try_expression\",\n        \"label_block\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TryLabelExpression\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"Expression* try_expression\",\n            \"TryHandler* label_block\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TryLabelExpression, initializes try_expression and label_block.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BlockStatement\",\n      \"properties\": [\n        \"deferred\",\n        \"statements\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BlockStatement\",\n          \"parameters\": [\n            \"SourcePosition pos\",\n            \"bool deferred\",\n            \"std"
}