{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/declarations.cc",
  "imports": [
    "src/torque/declarations.h",
    "<optional>",
    "src/torque/declarable.h",
    "src/torque/global-context.h",
    "src/torque/server-data.h",
    "src/torque/type-oracle.h"
  ],
  "classes": [
    {
      "name": "Declarations",
      "properties": [],
      "methods": [
        {
          "name": "LookupGlobalScope",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "std::vector<Declarable*>",
          "logic": "Looks up a name in the global scope of declarations. Returns a vector of Declarable pointers."
        },
        {
          "name": "LookupTypeAlias",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "const TypeAlias*",
          "logic": "Looks up a type alias by its qualified name. Ensures the result is unique and returns a pointer to the TypeAlias object."
        },
        {
          "name": "LookupType",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "const Type*",
          "logic": "Looks up a type by its qualified name by first looking up the type alias and then retrieves the underlying type."
        },
        {
          "name": "LookupType",
          "parameters": [
            "const Identifier* name"
          ],
          "return_type": "const Type*",
          "logic": "Looks up a type by identifier, adds a definition to language server data, and retrieves the underlying type."
        },
        {
          "name": "TryLookupType",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "std::optional<const Type*>",
          "logic": "Tries to look up a type by its qualified name. Returns a std::optional containing a pointer to the Type object if found, otherwise std::nullopt."
        },
        {
          "name": "LookupGlobalType",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "const Type*",
          "logic": "Looks up a type by its qualified name in the global scope. Ensures the result is unique and returns a pointer to the Type object."
        },
        {
          "name": "FindSomeInternalBuiltinWithType",
          "parameters": [
            "const BuiltinPointerType* type"
          ],
          "return_type": "Builtin*",
          "logic": "Finds a built-in with the given type signature. Returns nullptr if not found."
        },
        {
          "name": "LookupValue",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "Value*",
          "logic": "Looks up a value by its qualified name. Ensures the result is unique and returns a pointer to the Value object."
        },
        {
          "name": "TryLookupMacro",
          "parameters": [
            "const std::string& name",
            "const TypeVector& types"
          ],
          "return_type": "Macro*",
          "logic": "Tries to look up a macro by its name and argument types. Returns a pointer to the Macro object if found, otherwise nullptr."
        },
        {
          "name": "TryLookupBuiltin",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "std::optional<Builtin*>",
          "logic": "Tries to look up a built-in by its qualified name. Returns a std::optional containing a pointer to the Builtin object if found, otherwise std::nullopt."
        },
        {
          "name": "LookupGeneric",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "std::vector<GenericCallable*>",
          "logic": "Looks up all generic callables with the given name and returns them in a vector."
        },
        {
          "name": "LookupUniqueGeneric",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "GenericCallable*",
          "logic": "Looks up a single, unique generic callable by its qualified name."
        },
        {
          "name": "LookupUniqueGenericType",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "GenericType*",
          "logic": "Looks up a single, unique generic type by its qualified name."
        },
        {
          "name": "LookupGlobalUniqueGenericType",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "GenericType*",
          "logic": "Looks up a single, unique generic type by its name in the global scope."
        },
        {
          "name": "TryLookupGenericType",
          "parameters": [
            "const QualifiedName& name"
          ],
          "return_type": "std::optional<GenericType*>",
          "logic": "Tries to look up a single, unique generic type by its qualified name."
        },
        {
          "name": "DeclareNamespace",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "Namespace*",
          "logic": "Declares a namespace with the given name."
        },
        {
          "name": "DeclareType",
          "parameters": [
            "const Identifier* name",
            "const Type* type"
          ],
          "return_type": "TypeAlias*",
          "logic": "Declares a type alias with the given name and type."
        },
        {
          "name": "PredeclareTypeAlias",
          "parameters": [
            "const Identifier* name",
            "TypeDeclaration* type",
            "bool redeclaration"
          ],
          "return_type": "TypeAlias*",
          "logic": "Pre-declares a type alias."
        },
        {
          "name": "CreateTorqueMacro",
          "parameters": [
            "std::string external_name",
            "std::string readable_name",
            "bool exported_to_csa",
            "Signature signature",
            "std::optional<Statement*> body",
            "bool is_user_defined"
          ],
          "return_type": "TorqueMacro*",
          "logic": "Creates a Torque macro with given details."
        },
        {
          "name": "CreateExternMacro",
          "parameters": [
            "std::string name",
            "std::string external_assembler_name",
            "Signature signature"
          ],
          "return_type": "ExternMacro*",
          "logic": "Creates an extern macro with given details."
        },
        {
          "name": "DeclareMacro",
          "parameters": [
            "const std::string& name",
            "bool accessible_from_csa",
            "std::optional<std::string> external_assembler_name",
            "const Signature& signature",
            "std::optional<Statement*> body",
            "std::optional<std::string> op",
            "bool is_user_defined"
          ],
          "return_type": "Macro*",
          "logic": "Declares a macro with the given name and signature."
        },
        {
          "name": "CreateMethod",
          "parameters": [
            "AggregateType* container_type",
            "const std::string& name",
            "Signature signature",
            "Statement* body"
          ],
          "return_type": "Method*",
          "logic": "Creates a method inside the container type."
        },
        {
          "name": "CreateIntrinsic",
          "parameters": [
            "const std::string& name",
            "const Signature& signature"
          ],
          "return_type": "Intrinsic*",
          "logic": "Creates an intrinsic function."
        },
        {
          "name": "DeclareIntrinsic",
          "parameters": [
            "const std::string& name",
            "const Signature& signature"
          ],
          "return_type": "Intrinsic*",
          "logic": "Declares an intrinsic function."
        },
        {
          "name": "CreateBuiltin",
          "parameters": [
            "std::string external_name",
            "std::string readable_name",
            "Builtin::Kind kind",
            "Builtin::Flags flags",
            "Signature signature",
            "std::optional<std::string> use_counter_name",
            "std::optional<Statement*> body"
          ],
          "return_type": "Builtin*",
          "logic": "Creates a builtin with given details."
        },
        {
          "name": "DeclareRuntimeFunction",
          "parameters": [
            "const std::string& name",
            "const Signature& signature"
          ],
          "return_type": "RuntimeFunction*",
          "logic": "Declares a runtime function with the given name and signature."
        },
        {
          "name": "DeclareExternConstant",
          "parameters": [
            "Identifier* name",
            "const Type* type",
            "std::string value"
          ],
          "return_type": "ExternConstant*",
          "logic": "Declares an external constant with the given name, type, and value."
        },
        {
          "name": "DeclareNamespaceConstant",
          "parameters": [
            "Identifier* name",
            "const Type* type",
            "Expression* body"
          ],
          "return_type": "NamespaceConstant*",
          "logic": "Declares a namespace constant with the given name, type, and body."
        },
        {
          "name": "DeclareGenericCallable",
          "parameters": [
            "const std::string& name",
            "GenericCallableDeclaration* ast_node"
          ],
          "return_type": "GenericCallable*",
          "logic": "Declares a generic callable with the given name and AST node."
        },
        {
          "name": "DeclareGenericType",
          "parameters": [
            "const std::string& name",
            "GenericTypeDeclaration* ast_node"
          ],
          "return_type": "GenericType*",
          "logic": "Declares a generic type with the given name and AST node."
        },
        {
          "name": "GetGeneratedCallableName",
          "parameters": [
            "const std::string& name",
            "const TypeVector& specialized_types"
          ],
          "return_type": "std::string",
          "logic": "Generates a name for a callable based on the input types."
        },
        {
          "name": "DeclareOperator",
          "parameters": [
            "const std::string& name",
            "Macro* m"
          ],
          "return_type": "Macro*",
          "logic": "Declares an operator, adding it to the global namespace."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "EnsureNonempty",
      "parameters": [
        "std::vector<T> list",
        "const std::string& name",
        "const char* kind"
      ],
      "return_type": "std::vector<T>",
      "logic": "Ensures that a list of declarations is not empty, reporting an error if it is."
    },
    {
      "name": "EnsureUnique",
      "parameters": [
        "const std::vector<T>& list",
        "const Name& name",
        "const char* kind"
      ],
      "return_type": "T",
      "logic": "Ensures that a list of declarations contains exactly one element, reporting an error if it's empty or contains more than one element."
    },
    {
      "name": "CheckAlreadyDeclared",
      "parameters": [
        "const std::string& name",
        "const char* new_type"
      ],
      "return_type": "void",
      "logic": "Checks if a declaration with the given name already exists, reporting an error if it does."
    }
  ]
}