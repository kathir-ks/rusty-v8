{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/type-visitor.h",
  "imports": [
    "<optional>",
    "src/torque/ast.h",
    "src/torque/types.h"
  ],
  "classes": [
    {
      "name": "TypeVisitor",
      "properties": [],
      "methods": [
        {
          "name": "ComputeTypeVector",
          "parameters": [
            "const std::vector<TypeExpression*>& v"
          ],
          "return_type": "TypeVector",
          "logic": "Computes a TypeVector from a vector of TypeExpression pointers by calling ComputeType on each element."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "TypeExpression* type_expression"
          ],
          "return_type": "const Type*",
          "logic": "Computes the Type from a TypeExpression."
        },
        {
          "name": "VisitClassFieldsAndMethods",
          "parameters": [
            "ClassType* class_type",
            "const ClassDeclaration* class_declaration"
          ],
          "return_type": "void",
          "logic": "Visits and processes the fields and methods of a ClassType based on its ClassDeclaration."
        },
        {
          "name": "VisitStructMethods",
          "parameters": [
            "StructType* struct_type",
            "const StructDeclaration* struct_declaration"
          ],
          "return_type": "void",
          "logic": "Visits and processes the methods of a StructType based on its StructDeclaration."
        },
        {
          "name": "MakeSignature",
          "parameters": [
            "const CallableDeclaration* declaration"
          ],
          "return_type": "Signature",
          "logic": "Creates a Signature object from a CallableDeclaration."
        },
        {
          "name": "ComputeTypeForStructExpression",
          "parameters": [
            "TypeExpression* type_expression",
            "const std::vector<const Type*>& term_argument_types"
          ],
          "return_type": "const Type*",
          "logic": "Computes the Type for a struct expression. Can return StructType or BitFieldStructType."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "TypeDeclaration* decl",
            "MaybeSpecializationKey specialized_from",
            "Scope* specialization_requester"
          ],
          "return_type": "const Type*",
          "logic": "Computes the type for a TypeDeclaration, potentially considering specialization."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "AbstractTypeDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const AbstractType*",
          "logic": "Computes the type for an AbstractTypeDeclaration, potentially considering specialization."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "TypeAliasDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const Type*",
          "logic": "Computes the type for a TypeAliasDeclaration, potentially considering specialization."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "BitFieldStructDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const BitFieldStructType*",
          "logic": "Computes the type for a BitFieldStructDeclaration, potentially considering specialization."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "StructDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const StructType*",
          "logic": "Computes the type for a StructDeclaration, potentially considering specialization."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "ClassDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const ClassType*",
          "logic": "Computes the type for a ClassDeclaration, potentially considering specialization."
        }
      ]
    }
  ],
  "functions": []
}