{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/type-visitor.cc",
  "imports": [
    "src/torque/type-visitor.h",
    "<optional>",
    "src/common/globals.h",
    "src/torque/declarable.h",
    "src/torque/global-context.h",
    "src/torque/kythe-data.h",
    "src/torque/server-data.h",
    "src/torque/type-inference.h",
    "src/torque/type-oracle.h"
  ],
  "classes": [
    {
      "name": "TypeVisitor",
      "properties": [],
      "methods": [
        {
          "name": "ComputeType",
          "parameters": [
            "TypeDeclaration* decl",
            "MaybeSpecializationKey specialized_from",
            "Scope* specialization_requester"
          ],
          "return_type": "const Type*",
          "logic": "Computes the type for a given type declaration. Handles generic type instantiations and sets up the appropriate scope.  Dispatches to the correct ComputeType overload based on the AstNode::Kind of the declaration."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "TypeAliasDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const Type*",
          "logic": "Computes the type for a type alias declaration. It computes the underlying type and adds the alias name to it."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "AbstractTypeDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const AbstractType*",
          "logic": "Computes the type for an abstract type declaration. It determines the parent type (if any), handles constexpr and transient flags, and retrieves or creates an AbstractType from the TypeOracle."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "BitFieldStructDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const BitFieldStructType*",
          "logic": "Computes the type for a bitfield struct declaration. Checks that parent type is an unsigned integer and that the number of bits is valid. Registers the bitfield fields in the struct."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "StructDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const StructType*",
          "logic": "Computes the type for a struct declaration. Creates a StructType, registers its fields with their types and offsets. Tracks the computed offsets for fields. Handles alignment issues."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "ClassDeclaration* decl",
            "MaybeSpecializationKey specialized_from"
          ],
          "return_type": "const ClassType*",
          "logic": "Computes the type for a class declaration. Determines the super type, handles flags like extern, export, abstract, and generate unique map. Creates or retrieves a ClassType from the TypeOracle."
        },
        {
          "name": "ComputeType",
          "parameters": [
            "TypeExpression* type_expression"
          ],
          "return_type": "const Type*",
          "logic": "Computes the type for a type expression. Handles BasicTypeExpression, UnionTypeExpression, and FunctionTypeExpression.  Looks up type aliases or generic types and retrieves them from the TypeOracle. Adds Kythe data if available."
        },
        {
          "name": "MakeSignature",
          "parameters": [
            "const CallableDeclaration* declaration"
          ],
          "return_type": "Signature",
          "logic": "Creates a Signature object for a callable declaration (e.g., macro, function).  Computes the types of parameters and labels, and gathers information about variable arguments and implicit parameters. "
        },
        {
          "name": "VisitClassFieldsAndMethods",
          "parameters": [
            "ClassType* class_type",
            "const ClassDeclaration* class_declaration"
          ],
          "return_type": "void",
          "logic": "Visits the fields and methods of a class declaration. Registers the fields in the ClassType, computes offsets, validates types, and generates accessors.  Also handles methods for the class."
        },
        {
          "name": "VisitStructMethods",
          "parameters": [
            "StructType* struct_type",
            "const StructDeclaration* struct_declaration"
          ],
          "return_type": "void",
          "logic": "Declares the methods for a struct type."
        },
        {
          "name": "ComputeTypeForStructExpression",
          "parameters": [
            "TypeExpression* type_expression",
            "const std::vector<const Type*>& term_argument_types"
          ],
          "return_type": "const Type*",
          "logic": "Computes the type for a struct expression, specifically when the struct is used with term arguments. Infers type arguments for generic structs based on the types of the term arguments.  Handles type argument inference and returns the corresponding StructType instance."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ComputeGeneratesType",
      "parameters": [
        "std::optional<std::string> opt_gen",
        "bool enforce_tnode_type"
      ],
      "return_type": "std::string",
      "logic": "Computes the 'generates' type string. If `enforce_tnode_type` is true, it unwraps the TNode type name.  Returns an empty string if `opt_gen` is empty."
    },
    {
      "name": "DeclareMethods",
      "parameters": [
        "AggregateType* container_type",
        "const std::vector<Declaration*>& methods"
      ],
      "return_type": "void",
      "logic": "Declares the methods for a container type (e.g., class or struct). Creates a Method object for each method declaration, sets its signature, and adds it to the container type's declaration."
    }
  ]
}