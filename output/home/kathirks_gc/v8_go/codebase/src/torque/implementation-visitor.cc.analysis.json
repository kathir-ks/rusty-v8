{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/implementation-visitor.cc",
  "imports": [
    "#include \"src/torque/implementation-visitor.h\"",
    "#include <algorithm>",
    "#include <iomanip>",
    "#include <optional>",
    "#include <string>",
    "#include \"src/common/globals.h\"",
    "#include \"src/numbers/integer-literal-inl.h\"",
    "#include \"src/torque/cc-generator.h\"",
    "#include \"src/torque/cfg.h\"",
    "#include \"src/torque/constants.h\"",
    "#include \"src/torque/cpp-builder.h\"",
    "#include \"src/torque/csa-generator.h\"",
    "#include \"src/torque/declaration-visitor.h\"",
    "#include \"src/torque/global-context.h\"",
    "#include \"src/torque/kythe-data.h\"",
    "#include \"src/torque/parameter-difference.h\"",
    "#include \"src/torque/server-data.h\"",
    "#include \"src/torque/source-positions.h\"",
    "#include \"src/torque/type-inference.h\"",
    "#include \"src/torque/type-visitor.h\"",
    "#include \"src/torque/types.h\"",
    "#include \"src/torque/utils.h\""
  ],
  "classes": [
    {
      "name": "ImplementationVisitor::MacroInliningScope",
      "properties": [
        "visitor_",
        "macro_"
      ],
      "methods": [
        {
          "name": "MacroInliningScope",
          "parameters": [
            "ImplementationVisitor* visitor",
            "const Macro* macro"
          ],
          "return_type": "void",
          "logic": "Constructor. Inserts the macro into the inlining_macros_ set to detect recursion. Reports an error if recursion is detected."
        },
        {
          "name": "~MacroInliningScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Erases the macro from the inlining_macros_ set."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "VisitResult ImplementationVisitor::Visit(Expression* expr)",
      "parameters": [
        "Expression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Dispatches to the appropriate Visit method based on the expression's kind."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(Statement* stmt)",
      "parameters": [
        "Statement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Dispatches to the appropriate Visit method based on the statement's kind. Also manages stack scopes."
    },
    {
      "name": "void ImplementationVisitor::BeginGeneratedFiles()",
      "parameters": [],
      "return_type": "void",
      "logic": "Outputs the beginning of the CSA .cc and .h files and the class definition .cc file, including necessary includes and namespace declarations. It also handles a BuiltinIncludesMarker to be replaced later."
    },
    {
      "name": "void ImplementationVisitor::EndGeneratedFiles()",
      "parameters": [],
      "return_type": "void",
      "logic": "Outputs the ending of the CSA .cc and .h files and the class definition .cc file, including ending namespace declarations and include guards."
    },
    {
      "name": "void ImplementationVisitor::BeginDebugMacrosFile()",
      "parameters": [],
      "return_type": "void",
      "logic": "Outputs the beginning of the debug macros .cc and .h files including necessary includes and namespace declarations."
    },
    {
      "name": "void ImplementationVisitor::EndDebugMacrosFile()",
      "parameters": [],
      "return_type": "void",
      "logic": "Outputs the ending of the debug macros .cc and .h files including ending namespace declarations and include guards."
    },
    {
      "name": "void ImplementationVisitor::Visit(NamespaceConstant* decl)",
      "parameters": [
        "NamespaceConstant* decl"
      ],
      "return_type": "void",
      "logic": "Generates the C++ code for a namespace constant, including declaration in the header and definition in the .cc file using the CSA."
    },
    {
      "name": "void ImplementationVisitor::Visit(TypeAlias* alias)",
      "parameters": [
        "TypeAlias* alias"
      ],
      "return_type": "void",
      "logic": "Handles the processing of TypeAlias declarations, including extern class handling."
    },
    {
      "name": "VisitResult ImplementationVisitor::InlineMacro(Macro* macro, std::optional<LocationReference> this_reference, const std::vector<VisitResult>& arguments, const std::vector<Block*> label_blocks)",
      "parameters": [
        "Macro* macro",
        "std::optional<LocationReference> this_reference",
        "const std::vector<VisitResult>& arguments",
        "const std::vector<Block*> label_blocks"
      ],
      "return_type": "VisitResult",
      "logic": "Inlines a macro by visiting its body and handling parameters, labels, and return values. Handles recursive macro calls by detecting them and reporting an error."
    },
    {
      "name": "void ImplementationVisitor::VisitMacroCommon(Macro* macro)",
      "parameters": [
        "Macro* macro"
      ],
      "return_type": "void",
      "logic": "Generates the C++ definition for a macro, including parameter handling and generation of CSA or CC code."
    },
    {
      "name": "void ImplementationVisitor::Visit(TorqueMacro* macro)",
      "parameters": [
        "TorqueMacro* macro"
      ],
      "return_type": "void",
      "logic": "Handles the processing of TorqueMacro declarations, generating code using VisitMacroCommon."
    },
    {
      "name": "void ImplementationVisitor::Visit(Method* method)",
      "parameters": [
        "Method* method"
      ],
      "return_type": "void",
      "logic": "Handles the processing of Method declarations, generating code using VisitMacroCommon."
    },
    {
      "name": "void ImplementationVisitor::Visit(Builtin* builtin)",
      "parameters": [
        "Builtin* builtin"
      ],
      "return_type": "void",
      "logic": "Generates the C++ code for a builtin, including declaration and definition in the .cc file using the CSA."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(VarDeclarationStatement* stmt)",
      "parameters": [
        "VarDeclarationStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles variable declaration statement. In particular, emits code that initializes local variables."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(VarDeclarationStatement* stmt, BlockBindings<LocalValue>* block_bindings)",
      "parameters": [
        "VarDeclarationStatement* stmt",
        "BlockBindings<LocalValue>* block_bindings"
      ],
      "return_type": "const Type*",
      "logic": "Helper function that performs the bulk of the work when visiting a var declaration. Used when nested code blocks are involved."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(TailCallStatement* stmt)",
      "parameters": [
        "TailCallStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles tail call statement."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(ConditionalExpression* expr)",
      "parameters": [
        "ConditionalExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles conditional expressions by generating code for both branches and merging the results."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(LogicalOrExpression* expr)",
      "parameters": [
        "LogicalOrExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles logical OR expressions by generating code for short-circuiting behavior."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(LogicalAndExpression* expr)",
      "parameters": [
        "LogicalAndExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles logical AND expressions by generating code for short-circuiting behavior."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(IncrementDecrementExpression* expr)",
      "parameters": [
        "IncrementDecrementExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles increment and decrement expressions, updating the location and returning the original or updated value."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(AssignmentExpression* expr)",
      "parameters": [
        "AssignmentExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles assignment expressions, updating the location with the new value."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(FloatingPointLiteralExpression* expr)",
      "parameters": [
        "FloatingPointLiteralExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles floating point literal expressions."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(IntegerLiteralExpression* expr)",
      "parameters": [
        "IntegerLiteralExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles integer literal expressions."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(AssumeTypeImpossibleExpression* expr)",
      "parameters": [
        "AssumeTypeImpossibleExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles expressions where a certain type is assumed impossible."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(StringLiteralExpression* expr)",
      "parameters": [
        "StringLiteralExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles string literal expressions."
    },
    {
      "name": "VisitResult ImplementationVisitor::GetBuiltinCode(Builtin* builtin)",
      "parameters": [
        "Builtin* builtin"
      ],
      "return_type": "VisitResult",
      "logic": "Returns CSA code for the provided internal built-in method."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(LocationExpression* expr)",
      "parameters": [
        "LocationExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles location expressions by fetching the value from the location."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(FieldAccessExpression* expr)",
      "parameters": [
        "FieldAccessExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles field access expressions by fetching the value from the field."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(GotoStatement* stmt)",
      "parameters": [
        "GotoStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles goto statements, jumping to the specified label."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(IfStatement* stmt)",
      "parameters": [
        "IfStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles if statements, generating code for both branches."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(WhileStatement* stmt)",
      "parameters": [
        "WhileStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles while statements, generating code for the loop body and condition."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(BlockStatement* block)",
      "parameters": [
        "BlockStatement* block"
      ],
      "return_type": "const Type*",
      "logic": "Handles block statements, visiting each statement in the block."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(DebugStatement* stmt)",
      "parameters": [
        "DebugStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles debug statements such as unreachable code or debug breaks."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(AssertStatement* stmt)",
      "parameters": [
        "AssertStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles assert statements, generating code that aborts if the assertion fails."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(ExpressionStatement* stmt)",
      "parameters": [
        "ExpressionStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles expression statements by visiting the expression."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(ReturnStatement* stmt)",
      "parameters": [
        "ReturnStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles return statements, generating code to return from the function or macro."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(TryLabelExpression* expr)",
      "parameters": [
        "TryLabelExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles try-label expressions, implementing try/catch-like behavior."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(StatementExpression* expr)",
      "parameters": [
        "StatementExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles statement expressions, visiting the statement and returning a void VisitResult."
    },
    {
      "name": "InitializerResults ImplementationVisitor::VisitInitializerResults(const ClassType* class_type, const std::vector<NameAndExpression>& initializers)",
      "parameters": [
        "const ClassType* class_type",
        "const std::vector<NameAndExpression>& initializers"
      ],
      "return_type": "InitializerResults",
      "logic": "Visits and collects the results of class initializers, handling spread operators and error checking."
    },
    {
      "name": "LocationReference ImplementationVisitor::GenerateFieldReference(VisitResult object, const Field& field, const ClassType* class_type, bool treat_optional_as_indexed)",
      "parameters": [
        "VisitResult object",
        "const Field& field",
        "const ClassType* class_type",
        "bool treat_optional_as_indexed"
      ],
      "return_type": "LocationReference",
      "logic": "Generates a LocationReference for a field within a class, handling indexed and non-indexed fields, and generating appropriate macros."
    },
    {
      "name": "LocationReference ImplementationVisitor::GenerateFieldReferenceForInit(VisitResult object, const Field& field, const LayoutForInitialization& layout)",
      "parameters": [
        "VisitResult object",
        "const Field& field",
        "const LayoutForInitialization& layout"
      ],
      "return_type": "LocationReference",
      "logic": "Generates a field reference during class initialization, reusing precomputed layout data."
    },
    {
      "name": "void ImplementationVisitor::InitializeClass(const ClassType* class_type, VisitResult allocate_result, const InitializerResults& initializer_results, const LayoutForInitialization& layout)",
      "parameters": [
        "const ClassType* class_type",
        "VisitResult allocate_result",
        "const InitializerResults& initializer_results",
        "const LayoutForInitialization& layout"
      ],
      "return_type": "void",
      "logic": "Initializes the fields of a class, including inherited fields, using the provided initializer values and memory layout."
    },
    {
      "name": "VisitResult ImplementationVisitor::GenerateArrayLength(Expression* array_length, Namespace* nspace, const std::map<std::string, LocalValue>& bindings)",
      "parameters": [
        "Expression* array_length",
        "Namespace* nspace",
        "const std::map<std::string, LocalValue>& bindings"
      ],
      "return_type": "VisitResult",
      "logic": "Generates the code that compute the array length for a field, using an expression provided for length."
    },
    {
      "name": "VisitResult ImplementationVisitor::GenerateArrayLength(VisitResult object, const Field& field)",
      "parameters": [
        "VisitResult object",
        "const Field& field"
      ],
      "return_type": "VisitResult",
      "logic": "Generates array length expressions."
    },
    {
      "name": "VisitResult ImplementationVisitor::GenerateArrayLength(const ClassType* class_type, const InitializerResults& initializer_results, const Field& field)",
      "parameters": [
        "const ClassType* class_type",
        "const InitializerResults& initializer_results",
        "const Field& field"
      ],
      "return_type": "VisitResult",
      "logic": "Generates array length expressions using initializer results."
    },
    {
      "name": "LayoutForInitialization ImplementationVisitor::GenerateLayoutForInitialization(const ClassType* class_type, const InitializerResults& initializer_results)",
      "parameters": [
        "const ClassType* class_type",
        "const InitializerResults& initializer_results"
      ],
      "return_type": "LayoutForInitialization",
      "logic": "Calculates and generates the memory layout (offsets and sizes) for initializing a class."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(NewExpression* expr)",
      "parameters": [
        "NewExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles 'new' expressions to allocate class instances, initialize fields, and perform necessary type conversions."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(BreakStatement* stmt)",
      "parameters": [
        "BreakStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles break statement which jumps to the exit point of the loop."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(ContinueStatement* stmt)",
      "parameters": [
        "ContinueStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles continue statement which jumps to the next iteration start point of the loop."
    },
    {
      "name": "const Type* ImplementationVisitor::Visit(ForLoopStatement* stmt)",
      "parameters": [
        "ForLoopStatement* stmt"
      ],
      "return_type": "const Type*",
      "logic": "Handles for loops which generates code for body, header and action."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(SpreadExpression* expr)",
      "parameters": [
        "SpreadExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Handles Spread operator which will be used in the class filed intilization expression."
    },
    {
      "name": "void ImplementationVisitor::GenerateImplementation(const std::string& dir)",
      "parameters": [
        "const std::string& dir"
      ],
      "return_type": "void",
      "logic": "Writes generated source code to designated directory."
    },
    {
      "name": "cpp::Function ImplementationVisitor::GenerateMacroFunctionDeclaration(Macro* macro)",
      "parameters": [
        "Macro* macro"
      ],
      "return_type": "cpp::Function",
      "logic": "Generates macro function declaration."
    },
    {
      "name": "cpp::Function ImplementationVisitor::GenerateFunction(cpp::Class* owner, const std::string& name, const Signature& signature, const NameVector& parameter_names, bool pass_code_assembler_state, std::vector<std::string>* generated_parameter_names)",
      "parameters": [
        "cpp::Class* owner",
        "const std::string& name",
        "const Signature& signature",
        "const NameVector& parameter_names",
        "bool pass_code_assembler_state",
        "std::vector<std::string>* generated_parameter_names"
      ],
      "return_type": "cpp::Function",
      "logic": "Generates function for target code."
    },
    {
      "name": "bool ImplementationVisitor::TestLookupCallable(const QualifiedName& name, const TypeVector& parameter_types)",
      "parameters": [
        "const QualifiedName& name",
        "const TypeVector& parameter_types"
      ],
      "return_type": "bool",
      "logic": "Tests whether there exists callable with argument type parameter_types."
    },
    {
      "name": "TypeArgumentInference ImplementationVisitor::InferSpecializationTypes(GenericCallable* generic, const TypeVector& explicit_specialization_types, const TypeVector& explicit_arguments)",
      "parameters": [
        "GenericCallable* generic",
        "const TypeVector& explicit_specialization_types",
        "const TypeVector& explicit_arguments"
      ],
      "return_type": "TypeArgumentInference",
      "logic": "Helper function for inferring specialization types."
    },
    {
      "name": "Block* ImplementationVisitor::LookupSimpleLabel(const std::string& name)",
      "parameters": [
        "const std::string& name"
      ],
      "return_type": "Block*",
      "logic": "Looks up a label by name, and returns the block the label maps to, erroring if the label expects arguments."
    },
    {
      "name": "const Type* ImplementationVisitor::GetCommonType(const Type* left, const Type* right)",
      "parameters": [
        "const Type* left",
        "const Type* right"
      ],
      "return_type": "const Type*",
      "logic": "Finds the common type between two types."
    },
    {
      "name": "VisitResult ImplementationVisitor::GenerateCopy(const VisitResult& to_copy)",
      "parameters": [
        "const VisitResult& to_copy"
      ],
      "return_type": "VisitResult",
      "logic": "Generates a copy of the visit result."
    },
    {
      "name": "VisitResult ImplementationVisitor::Visit(StructExpression* expr)",
      "parameters": [
        "StructExpression* expr"
      ],
      "return_type": "VisitResult",
      "logic": "Generates code to initialize and return a struct."
    },
    {
      "name": "VisitResult ImplementationVisitor::GenerateSetBitField(const Type* bitfield_struct_type, const BitField& bitfield, VisitResult bitfield_struct, VisitResult value, bool starts_as_zero)",
      "parameters": [
        "const Type* bitfield_struct_type",
        "const BitField& bitfield",
        "VisitResult bitfield_struct",
        "VisitResult value",
        "bool starts_as_zero"
      ],
      "return_type": "VisitResult",
      "logic": "Generates code to set the bits of a bitfield."
    },
    {
      "name": "LocationReference ImplementationVisitor::GetLocationReference(Expression* location)",
      "parameters": [
        "Expression* location"
      ],
      "return_type": "LocationReference",
      "logic": "Helper function for getting location reference from expression."
    },
    {
      "name": "LocationReference ImplementationVisitor::GetLocationReference(FieldAccessExpression* expr)",
      "parameters": [
        "FieldAccessExpression* expr"
      ],
      "return_type": "LocationReference",
      "logic": "Helper function for getting location reference from field expression."
    },
    {
      "name": "LocationReference ImplementationVisitor::GenerateFieldAccess(LocationReference reference, const std::string& fieldname, bool ignore_stuct_field_constness, std::optional<SourcePosition> pos)",
      "parameters": [
        "LocationReference reference",
        "const std::string& fieldname",
        "bool ignore_stuct_field_constness",
        "std::optional<SourcePosition> pos"
      ],
      "return_type": "LocationReference",
      "logic": "Generates a reference or access for a given field name."
    },
    {
      "name": "LocationReference ImplementationVisitor::GetLocationReference(ElementAccessExpression* expr)",
      "parameters": [
        "ElementAccessExpression* expr"
      ],
      "return_type": "LocationReference",
      "logic": "Helper function for getting location reference from element access expression."
    },
    {
      "name": "LocationReference ImplementationVisitor::GenerateReferenceToItemInHeapSlice(LocationReference slice, VisitResult index)",
      "parameters": [
        "LocationReference slice",
        "VisitResult index"
      ],
      "return_type": "LocationReference",
      "logic": "Generates code that points to the item index in heap."
    },
    {
      "name": "LocationReference ImplementationVisitor::GetLocationReference(IdentifierExpression* expr)",
      "parameters": [
        "IdentifierExpression* expr"
      ],
      "return_type": "LocationReference",
      "logic": "Helper function for getting location reference from identifier expression."
    }
  ]
}