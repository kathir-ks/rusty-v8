{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/cppheap-pointer-table-inl.h",
  "imports": [
    "src/sandbox/compactible-external-entity-table-inl.h",
    "src/sandbox/cppheap-pointer-table.h"
  ],
  "classes": [
    {
      "name": "CppHeapPointerTableEntry",
      "properties": [
        "payload_"
      ],
      "methods": [
        {
          "name": "MakePointerEntry",
          "parameters": [
            "Address value",
            "CppHeapPointerTag tag",
            "bool mark_as_alive"
          ],
          "return_type": "void",
          "logic": "Creates a new entry representing a pointer, setting the value and tag. It also handles the mark bit which is related to garbage collection, optionally setting it based on the `mark_as_alive` flag."
        },
        {
          "name": "GetPointer",
          "parameters": [
            "CppHeapPointerTagRange tag_range"
          ],
          "return_type": "Address",
          "logic": "Retrieves the pointer address from the entry, removing the tag. Checks that the entry does in fact contain a pointer."
        },
        {
          "name": "SetPointer",
          "parameters": [
            "Address value",
            "CppHeapPointerTag tag"
          ],
          "return_type": "void",
          "logic": "Sets a new pointer value and tag for the entry. Checks if the entry already contains a valid pointer."
        },
        {
          "name": "HasPointer",
          "parameters": [
            "CppHeapPointerTagRange tag_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the entry contains a pointer with the specified tag in a given range."
        },
        {
          "name": "MakeZappedEntry",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the entry as zapped, indicating it's no longer valid.  It sets the pointer to null and uses the `kZappedEntryTag`."
        },
        {
          "name": "MakeFreelistEntry",
          "parameters": [
            "uint32_t next_entry_index"
          ],
          "return_type": "void",
          "logic": "Creates a freelist entry, used to link free entries in the table for later reuse. `next_entry_index` points to the next free entry in the list."
        },
        {
          "name": "GetNextFreelistEntryIndex",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Retrieves the index of the next free entry from a freelist entry."
        },
        {
          "name": "Mark",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the mark bit of the entry's payload, indicating that the object pointed to is still alive during garbage collection."
        },
        {
          "name": "MakeEvacuationEntry",
          "parameters": [
            "Address handle_location"
          ],
          "return_type": "void",
          "logic": "Creates an evacuation entry, which is used during garbage collection when the object needs to be moved to a new location.  The `handle_location` stores the new address to which the pointer is moved."
        },
        {
          "name": "HasEvacuationEntry",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the entry is an evacuation entry."
        },
        {
          "name": "Evacuate",
          "parameters": [
            "CppHeapPointerTableEntry& dest"
          ],
          "return_type": "void",
          "logic": "Copies the contents of this entry to a destination entry (`dest`) during garbage collection evacuation, and then marks this entry as zapped."
        }
      ]
    },
    {
      "name": "CppHeapPointerTable",
      "properties": [],
      "methods": [
        {
          "name": "Get",
          "parameters": [
            "CppHeapPointerHandle handle",
            "CppHeapPointerTagRange tag_range"
          ],
          "return_type": "Address",
          "logic": "Retrieves the address associated with a given handle from the pointer table. It uses the handle to find the correct entry and gets the pointer from it."
        },
        {
          "name": "Set",
          "parameters": [
            "CppHeapPointerHandle handle",
            "Address value",
            "CppHeapPointerTag tag"
          ],
          "return_type": "void",
          "logic": "Sets the address associated with a given handle in the pointer table."
        },
        {
          "name": "AllocateAndInitializeEntry",
          "parameters": [
            "Space* space",
            "Address initial_value",
            "CppHeapPointerTag tag"
          ],
          "return_type": "CppHeapPointerHandle",
          "logic": "Allocates a new entry in the table, initializes it with the given value and tag, and returns the handle to the new entry."
        },
        {
          "name": "Mark",
          "parameters": [
            "Space* space",
            "CppHeapPointerHandle handle",
            "Address handle_location"
          ],
          "return_type": "void",
          "logic": "Marks an entry in the table as alive during garbage collection.  It also handles creating an evacuation entry if compaction is in progress."
        },
        {
          "name": "IsValidHandle",
          "parameters": [
            "CppHeapPointerHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks if a given handle is a valid handle, primarily by checking if the index part of the handle is correctly aligned."
        },
        {
          "name": "HandleToIndex",
          "parameters": [
            "CppHeapPointerHandle handle"
          ],
          "return_type": "uint32_t",
          "logic": "Converts a handle to an index into the pointer table."
        },
        {
          "name": "IndexToHandle",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "CppHeapPointerHandle",
          "logic": "Converts an index into a handle for the pointer table."
        },
        {
          "name": "Contains",
          "parameters": [
            "Space* space",
            "CppHeapPointerHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks if the given handle corresponds to an entry within the current space."
        }
      ]
    }
  ],
  "functions": []
}