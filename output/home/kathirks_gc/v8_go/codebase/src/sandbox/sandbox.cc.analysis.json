{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/sandbox.cc",
  "imports": [
    "src/sandbox/sandbox.h",
    "include/v8-internal.h",
    "src/base/bits.h",
    "src/base/bounded-page-allocator.h",
    "src/base/cpu.h",
    "src/base/emulated-virtual-address-subspace.h",
    "src/base/lazy-instance.h",
    "src/base/sys-info.h",
    "src/base/utils/random-number-generator.h",
    "src/base/virtual-address-space-page-allocator.h",
    "src/base/virtual-address-space.h",
    "src/flags/flags.h",
    "src/sandbox/hardware-support.h",
    "src/sandbox/sandboxed-pointer.h",
    "src/utils/allocation.h"
  ],
  "classes": [
    {
      "name": "Sandbox",
      "properties": [
        "first_four_gb_of_address_space_are_reserved_",
        "current_",
        "default_sandbox_",
        "base_",
        "end_",
        "size_",
        "reservation_base_",
        "reservation_size_",
        "address_space_",
        "sandbox_page_allocator_",
        "constants_",
        "initialized_",
        "trap_handler_initialized_"
      ],
      "methods": [
        {
          "name": "current_non_inlined",
          "parameters": [],
          "return_type": "Sandbox*",
          "logic": "Returns the current thread-local sandbox."
        },
        {
          "name": "set_current_non_inlined",
          "parameters": [
            "Sandbox* sandbox"
          ],
          "return_type": "void",
          "logic": "Sets the current thread-local sandbox."
        },
        {
          "name": "Initialize",
          "parameters": [
            "v8::VirtualAddressSpace* vas"
          ],
          "return_type": "void",
          "logic": "Initializes the sandbox by allocating and reserving virtual address space, choosing between full or partial reservation, and registering the trap handler if enabled. Falls back to smaller partial reservations if initial allocations fail."
        },
        {
          "name": "Initialize",
          "parameters": [
            "v8::VirtualAddressSpace* vas",
            "size_t size",
            "bool use_guard_regions"
          ],
          "return_type": "bool",
          "logic": "Initializes the sandbox with a specified size and optional guard regions. Allocates a virtual address subspace, reserves memory, and sets up guard pages."
        },
        {
          "name": "InitializeAsPartiallyReservedSandbox",
          "parameters": [
            "v8::VirtualAddressSpace* vas",
            "size_t size",
            "size_t size_to_reserve"
          ],
          "return_type": "bool",
          "logic": "Initializes the sandbox with partial memory reservation. It attempts to allocate a larger virtual address space but only reserves a portion of it. Used when full reservation is not possible."
        },
        {
          "name": "FinishInitialization",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs final initialization steps after address space allocation, such as reserving the last page in the sandbox as a guard region and initializing constants."
        },
        {
          "name": "InitializeConstants",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes constant values, such as the empty backing store buffer, placing them at the end of the sandbox."
        },
        {
          "name": "TearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases the sandbox resources by freeing the allocated virtual address space, unregistering the trap handler, and resetting internal state."
        },
        {
          "name": "InitializeDefaultOncePerProcess",
          "parameters": [
            "v8::VirtualAddressSpace* vas"
          ],
          "return_type": "void",
          "logic": "Initializes the default sandbox instance once per process using a leaky object.  Sets the current sandbox for the thread if multiple cages are enabled."
        },
        {
          "name": "TearDownDefault",
          "parameters": [],
          "return_type": "void",
          "logic": "Tears down the default sandbox by calling the TearDown method and setting the current sandbox to null if multiple cages are enabled."
        },
        {
          "name": "New",
          "parameters": [
            "v8::VirtualAddressSpace* vas"
          ],
          "return_type": "Sandbox*",
          "logic": "Creates a new sandbox instance. Requires multiple pointer compression cages to be enabled at build-time."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DetermineAddressSpaceLimit",
      "parameters": [],
      "return_type": "Address",
      "logic": "Determines the approximate size of the virtual address space available to the process, considering hardware and software limits. Returns a power of two value representing the limit."
    }
  ]
}