{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/external-pointer.h",
  "imports": [
    "src/common/globals.h",
    "src/sandbox/isolate.h"
  ],
  "classes": [
    {
      "name": "ExternalPointerMember",
      "properties": [
        "storage_"
      ],
      "methods": [
        {
          "name": "ExternalPointerMember",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "Init",
          "parameters": [
            "Address host_address",
            "IsolateForSandbox isolate",
            "Address value"
          ],
          "return_type": "void",
          "logic": "Initializes the external pointer member, potentially writing to the external pointer table based on sandbox status (implementation not visible in header)."
        },
        {
          "name": "load",
          "parameters": [
            "const IsolateForSandbox isolate"
          ],
          "return_type": "Address",
          "logic": "Loads the address from the external pointer, potentially fetching it from the external pointer table based on sandbox status (implementation not visible in header)."
        },
        {
          "name": "store",
          "parameters": [
            "IsolateForSandbox isolate",
            "Address value"
          ],
          "return_type": "void",
          "logic": "Stores the address to the external pointer, potentially updating the external pointer table based on sandbox status (implementation not visible in header)."
        },
        {
          "name": "load_encoded",
          "parameters": [],
          "return_type": "ExternalPointer_t",
          "logic": "Loads the encoded external pointer value (implementation not visible in header)."
        },
        {
          "name": "store_encoded",
          "parameters": [
            "ExternalPointer_t value"
          ],
          "return_type": "void",
          "logic": "Stores the encoded external pointer value (implementation not visible in header)."
        },
        {
          "name": "storage_address",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the underlying storage."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "InitExternalPointerField",
      "parameters": [
        "Address host_address",
        "Address field_address",
        "IsolateForSandbox isolate",
        "Address value"
      ],
      "return_type": "void",
      "logic": "Creates and initializes an entry in the external pointer table and writes the handle for that entry to the field. (implementation not visible in header)"
    },
    {
      "name": "ReadExternalPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForSandbox isolate"
      ],
      "return_type": "Address",
      "logic": "Reads the ExternalPointerHandle from the field and loads the corresponding external pointer from the external pointer table if the sandbox is enabled; otherwise, loads the external pointer from the field. (implementation not visible in header)"
    },
    {
      "name": "WriteExternalPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForSandbox isolate",
        "Address value"
      ],
      "return_type": "void",
      "logic": "Reads the ExternalPointerHandle from the field and stores the external pointer to the corresponding entry in the external pointer table if the sandbox is enabled; otherwise, stores the external pointer to the field. (implementation not visible in header)"
    }
  ]
}