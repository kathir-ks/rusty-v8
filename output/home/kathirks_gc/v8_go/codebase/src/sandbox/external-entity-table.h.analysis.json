{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/external-entity-table.h",
  "imports": [
    "<set>",
    "include/v8-platform.h",
    "include/v8config.h",
    "src/base/atomicops.h",
    "src/base/memory.h",
    "src/base/platform/mutex.h",
    "src/common/code-memory-access.h",
    "src/common/globals.h",
    "src/common/segmented-table.h"
  ],
  "classes": [
    {
      "name": "ExternalEntityTable",
      "properties": [
        "Base",
        "FreelistHead",
        "Segment",
        "WriteIterator",
        "kSegmentSize",
        "kEntriesPerSegment",
        "kEntrySize",
        "kEntryAllocationIsForbiddenMarker",
        "kSupportsCompaction",
        "kInternalReadOnlySegmentOffset",
        "kInternalNullEntryIndex",
        "kEndOfInternalReadOnlySegment"
      ],
      "methods": [
        {
          "name": "AllocateEntry",
          "parameters": [
            "Space* space"
          ],
          "return_type": "uint32_t",
          "logic": "Allocates a new entry in the given space and returns its index. If no free entries exist, it extends the space by allocating a new segment."
        },
        {
          "name": "TryAllocateEntry",
          "parameters": [
            "Space* space"
          ],
          "return_type": "std::optional<uint32_t>",
          "logic": "Attempts to allocate an entry in the given space and returns its index if successful. Returns std::nullopt if there is no space left."
        },
        {
          "name": "AllocateEntryBelow",
          "parameters": [
            "Space* space",
            "uint32_t threshold_index"
          ],
          "return_type": "uint32_t",
          "logic": "Attempts to allocate an entry in the given space below the specified index. Returns 0 if no free entry is available below the threshold.  Does not allocate a new segment."
        },
        {
          "name": "TryAllocateEntryFromFreelist",
          "parameters": [
            "Space* space",
            "FreelistHead freelist"
          ],
          "return_type": "bool",
          "logic": "Tries to allocate the first entry of the freelist using a compare-and-swap operation."
        },
        {
          "name": "TryExtend",
          "parameters": [
            "Space* space"
          ],
          "return_type": "std::optional<FreelistHead>",
          "logic": "Tries to allocate a new segment and add it to the given space, refilling the freelist with the new segment's entries. Returns std::nullopt if it fails."
        },
        {
          "name": "GenericSweep",
          "parameters": [
            "Space* space"
          ],
          "return_type": "uint32_t",
          "logic": "Sweeps the given space, freeing unmarked entries to the freelist and unmarking live entries. Returns the number of live entries after sweeping. Requires that the Entry type has `IsMarked()` and `Unmark()` methods."
        },
        {
          "name": "GenericSweep",
          "parameters": [
            "Space* space",
            "Callback marked"
          ],
          "return_type": "uint32_t",
          "logic": "Sweeps the given space, freeing unmarked entries to the freelist and unmarking live entries. Invokes a callback `marked` for every live entry. Requires that the Entry type has `IsMarked()` and `Unmark()` methods."
        },
        {
          "name": "IterateEntriesIn",
          "parameters": [
            "Space* space",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Iterates over all entries in the given space and invokes the callback function for each entry, passing the entry's index as an argument."
        },
        {
          "name": "Initialize",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the table by reserving the backing memory, allocating an initial segment, and populating the freelist."
        },
        {
          "name": "TearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Deallocates all memory associated with this table."
        },
        {
          "name": "InitializeSpace",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Initializes the given space for use with this table."
        },
        {
          "name": "TearDownSpace",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Deallocates all segments owned by the given space."
        },
        {
          "name": "AttachSpaceToReadOnlySegment",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Attaches the given space to the internal read-only segment."
        },
        {
          "name": "DetachSpaceFromReadOnlySegment",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Detaches the given space from the internal read-only segment."
        },
        {
          "name": "UnsealReadOnlySegment",
          "parameters": [],
          "return_type": "void",
          "logic": "Changes the first segment's permissions from read-only to read-write (unsealing)."
        },
        {
          "name": "SealReadOnlySegment",
          "parameters": [],
          "return_type": "void",
          "logic": "Changes the first segment's permissions from read-write to read-only (sealing)."
        }
      ]
    },
    {
      "name": "ExternalEntityTable::Space",
      "properties": [
        "owning_table_",
        "freelist_head_",
        "segments_",
        "is_internal_read_only_space_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "freelist_length",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Determines the number of entries currently on the freelist. The returned value should only be treated as an approximation."
        },
        {
          "name": "num_segments",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the current number of segments currently associated with this space."
        },
        {
          "name": "is_empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether this space is currently empty."
        },
        {
          "name": "capacity",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the current capacity of this space. The capacity of a space is the total number of entries it can contain."
        },
        {
          "name": "Contains",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "bool",
          "logic": "Returns true if this space contains the entry with the given index."
        },
        {
          "name": "is_internal_read_only_space",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether this space is attached to a table's internal read-only segment."
        },
        {
          "name": "BelongsTo",
          "parameters": [
            "const void* table"
          ],
          "return_type": "bool",
          "logic": "Check whether this space belongs to the given external entity table."
        },
        {
          "name": "NumSegmentsForTesting",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Similar to `num_segments()` but also locks the mutex."
        },
        {
          "name": "~Space",
          "parameters": [],
          "return_type": "void",
          "logic": "Space destructor."
        }
      ]
    },
    {
      "name": "ExternalEntityTable::SpaceWithBlackAllocationSupport",
      "properties": [
        "allocate_black_"
      ],
      "methods": [
        {
          "name": "allocate_black",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether black allocation is enabled for this space."
        },
        {
          "name": "set_allocate_black",
          "parameters": [
            "bool allocate_black"
          ],
          "return_type": "void",
          "logic": "Sets whether black allocation is enabled for this space."
        }
      ]
    },
    {
      "name": "ExternalEntityTable::UnsealReadOnlySegmentScope",
      "properties": [
        "table_"
      ],
      "methods": [
        {
          "name": "UnsealReadOnlySegmentScope",
          "parameters": [
            "ExternalEntityTable<Entry, size>* table"
          ],
          "return_type": null,
          "logic": "Constructor: unseals the read-only segment of the table."
        },
        {
          "name": "~UnsealReadOnlySegmentScope",
          "parameters": [],
          "return_type": null,
          "logic": "Destructor: seals the read-only segment of the table."
        }
      ]
    }
  ],
  "functions": []
}