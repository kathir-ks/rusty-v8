{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/hardware-support.cc",
  "imports": [
    "src/sandbox/hardware-support.h",
    "src/base/platform/memory-protection-key.h"
  ],
  "classes": [
    {
      "name": "SandboxHardwareSupport",
      "properties": [
        "pkey_"
      ],
      "methods": [
        {
          "name": "TryEnable",
          "parameters": [
            "Address addr",
            "size_t size"
          ],
          "return_type": "bool",
          "logic": "If hardware sandbox support is enabled, attempts to set memory protection for the given address range to no access using the allocated protection key. Returns true if successful, false otherwise. If hardware sandbox support is not enabled, always returns false."
        },
        {
          "name": "InitializeBeforeThreadCreation",
          "parameters": [],
          "return_type": "void",
          "logic": "If hardware sandbox support is enabled, allocates a memory protection key. If hardware sandbox support is not enabled, this function does nothing."
        },
        {
          "name": "SetDefaultPermissionsForSignalHandler",
          "parameters": [],
          "return_type": "void",
          "logic": "If hardware sandbox support is enabled, sets the permissions for the allocated memory protection key to no restrictions. This allows signal handlers to access memory that might otherwise be protected by the sandbox. If hardware sandbox support is not enabled, this function does nothing."
        },
        {
          "name": "NotifyReadOnlyPageCreated",
          "parameters": [
            "Address addr",
            "size_t size",
            "PageAllocator::Permission perm"
          ],
          "return_type": "void",
          "logic": "If hardware sandbox support is enabled, resets the memory protection key of a read-only page to the default protection key. This allows safe reads from read-only data. If hardware sandbox support is not enabled, this function does nothing."
        },
        {
          "name": "MaybeBlockAccess",
          "parameters": [],
          "return_type": "BlockAccessScope",
          "logic": "Returns a BlockAccessScope object, which is used to temporarily block access to memory protected by the hardware sandbox."
        }
      ]
    },
    {
      "name": "SandboxHardwareSupport::BlockAccessScope",
      "properties": [
        "pkey_"
      ],
      "methods": [
        {
          "name": "BlockAccessScope",
          "parameters": [
            "int pkey"
          ],
          "return_type": "void",
          "logic": "Constructor. If hardware sandbox support is enabled, it sets the permissions for the given protection key to disable access, effectively blocking access to memory protected by that key."
        },
        {
          "name": "~BlockAccessScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. If hardware sandbox support is enabled, it sets the permissions for the given protection key to no restrictions, re-enabling access to memory protected by that key."
        }
      ]
    }
  ],
  "functions": []
}