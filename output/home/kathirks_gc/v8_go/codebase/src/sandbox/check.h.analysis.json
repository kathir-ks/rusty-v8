{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/check.h",
  "imports": [
    "src/sandbox/hardware-support.h"
  ],
  "classes": [],
  "functions": [],
  "macros": [
    {
      "name": "BLOCK_SANDBOX_ACCESS_IN_DEBUG_MODE",
      "logic": "In debug mode and when sandbox hardware support is enabled, potentially blocks access to sandbox memory to detect racy accesses due to potential attacker interference.  When not in debug or sandbox hardware support isn't enabled, expands to nothing."
    },
    {
      "name": "SBXCHECK",
      "parameters": [
        "condition"
      ],
      "logic": "When the sandbox is enabled, it behaves like a CHECK, ensuring the 'condition' is true.  In debug mode, it potentially blocks access to sandbox memory before the check. When the sandbox is disabled, it behaves like a DCHECK."
    },
    {
      "name": "SBXCHECK_WRAPPED",
      "parameters": [
        "CONDITION",
        "lhs",
        "rhs"
      ],
      "logic": "A wrapper macro for various check types. When the sandbox is enabled, it potentially blocks access to sandbox memory, and uses `CHECK_##CONDITION` to evaluate the condition between `lhs` and `rhs`. When the sandbox is disabled, it delegates to `DCHECK_##CONDITION`."
    },
    {
      "name": "SBXCHECK_EQ",
      "parameters": [
        "lhs",
        "rhs"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(EQ, lhs, rhs), performing an equality check when the sandbox is enabled, and a DCHECK_EQ when disabled."
    },
    {
      "name": "SBXCHECK_NE",
      "parameters": [
        "lhs",
        "rhs"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(NE, lhs, rhs), performing a non-equality check when the sandbox is enabled, and a DCHECK_NE when disabled."
    },
    {
      "name": "SBXCHECK_GT",
      "parameters": [
        "lhs",
        "rhs"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(GT, lhs, rhs), performing a greater-than check when the sandbox is enabled, and a DCHECK_GT when disabled."
    },
    {
      "name": "SBXCHECK_GE",
      "parameters": [
        "lhs",
        "rhs"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(GE, lhs, rhs), performing a greater-than-or-equal check when the sandbox is enabled, and a DCHECK_GE when disabled."
    },
    {
      "name": "SBXCHECK_LT",
      "parameters": [
        "lhs",
        "rhs"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(LT, lhs, rhs), performing a less-than check when the sandbox is enabled, and a DCHECK_LT when disabled."
    },
    {
      "name": "SBXCHECK_LE",
      "parameters": [
        "lhs",
        "rhs"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(LE, lhs, rhs), performing a less-than-or-equal check when the sandbox is enabled, and a DCHECK_LE when disabled."
    },
    {
      "name": "SBXCHECK_BOUNDS",
      "parameters": [
        "index",
        "limit"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(BOUNDS, index, limit), performing a bounds check when the sandbox is enabled, and a DCHECK_BOUNDS when disabled."
    },
    {
      "name": "SBXCHECK_IMPLIES",
      "parameters": [
        "when",
        "then"
      ],
      "logic": "Expands to SBXCHECK_WRAPPED(IMPLIES, when, then), checking that `when` implies `then` when the sandbox is enabled, using CHECK_IMPLIES, and DCHECK_IMPLIES otherwise."
    }
  ]
}