{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/cppheap-pointer-inl.h",
  "imports": [
    "src/sandbox/cppheap-pointer.h",
    "include/v8-internal.h",
    "src/base/atomic-utils.h",
    "src/objects/slots-inl.h",
    "src/sandbox/cppheap-pointer-table-inl.h",
    "src/sandbox/isolate.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "ReadCppHeapPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForPointerCompression isolate"
      ],
      "return_type": "Address",
      "logic": "Reads a C++ heap pointer field from memory.  If pointer compression is enabled, it reads a handle from the slot, looks up the actual address in the CppHeapPointerTable using the provided isolate, and returns that address. Otherwise, it directly loads the address from the slot."
    },
    {
      "name": "ReadCppHeapPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForPointerCompression isolate",
        "CppHeapPointerTagRange tag_range"
      ],
      "return_type": "Address",
      "logic": "Reads a C++ heap pointer field from memory, similar to the other ReadCppHeapPointerField overload, but also takes a tag range.  If pointer compression is enabled, it reads a handle from the slot, looks up the actual address in the CppHeapPointerTable using the provided isolate and tag range, and returns that address. Otherwise, it directly loads the address from the slot."
    },
    {
      "name": "WriteLazilyInitializedCppHeapPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForPointerCompression isolate",
        "Address value"
      ],
      "return_type": "void",
      "logic": "Writes a C++ heap pointer to a field, lazily initializing it if it hasn't been written to before. If pointer compression is enabled, it first checks if a handle already exists in the slot. If not, it allocates a new handle and initializes it in the CppHeapPointerTable with the given value and tag, storing the new handle in the slot. If a handle already exists, it updates the corresponding entry in the table. Otherwise, it directly stores the address and tag into the slot."
    },
    {
      "name": "WriteLazilyInitializedCppHeapPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForPointerCompression isolate",
        "Address value",
        "CppHeapPointerTag tag"
      ],
      "return_type": "void",
      "logic": "Writes a C++ heap pointer to a field, lazily initializing it if it hasn't been written to before. If pointer compression is enabled, it first checks if a handle already exists in the slot. If not, it allocates a new handle and initializes it in the CppHeapPointerTable with the given value and tag, storing the new handle in the slot. If a handle already exists, it updates the corresponding entry in the table. Otherwise, it directly stores the address, tag into the slot."
    }
  ]
}