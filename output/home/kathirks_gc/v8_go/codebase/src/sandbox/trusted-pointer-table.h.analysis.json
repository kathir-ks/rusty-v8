{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/trusted-pointer-table.h",
  "imports": [
    "include/v8config.h",
    "src/base/atomicops.h",
    "src/base/memory.h",
    "src/common/globals.h",
    "src/sandbox/external-entity-table.h",
    "src/sandbox/indirect-pointer-tag.h",
    "src/sandbox/tagged-payload.h"
  ],
  "classes": [
    {
      "name": "TrustedPointerTableEntry",
      "properties": [
        "std::atomic<Payload> payload_"
      ],
      "methods": [
        {
          "name": "MakeTrustedPointerEntry",
          "parameters": [
            "Address pointer",
            "IndirectPointerTag tag",
            "bool mark_as_alive"
          ],
          "return_type": "void",
          "logic": "Makes the entry a regular entry, containing an absolute pointer to a TrustedObject."
        },
        {
          "name": "MakeFreelistEntry",
          "parameters": [
            "uint32_t next_entry_index"
          ],
          "return_type": "void",
          "logic": "Makes the entry a freelist entry, containing the index of the next entry on the freelist."
        },
        {
          "name": "MakeZappedEntry",
          "parameters": [],
          "return_type": "void",
          "logic": "Makes the entry a zapped entry, containing an invalid pointer."
        },
        {
          "name": "GetPointer",
          "parameters": [
            "IndirectPointerTag tag"
          ],
          "return_type": "Address",
          "logic": "Retrieves the pointer stored in this entry. Returns an inaccessible pointer if the entry is not tagged with the given tag or if it's a freelist entry."
        },
        {
          "name": "SetPointer",
          "parameters": [
            "Address pointer",
            "IndirectPointerTag tag"
          ],
          "return_type": "void",
          "logic": "Stores the given pointer in this entry while preserving the marking state. Entry must not be a freelist entry."
        },
        {
          "name": "HasPointer",
          "parameters": [
            "IndirectPointerTag tag"
          ],
          "return_type": "bool",
          "logic": "Returns true if this entry contains a pointer with the given tag."
        },
        {
          "name": "OverwriteTag",
          "parameters": [
            "IndirectPointerTag tag"
          ],
          "return_type": "void",
          "logic": "Overwrites the existing type tag. Use with caution."
        },
        {
          "name": "IsFreelistEntry",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this entry is a freelist entry."
        },
        {
          "name": "GetNextFreelistEntryIndex",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Gets the index of the next entry on the freelist. The result is only valid if this is a freelist entry, but may be called regardless for performance."
        },
        {
          "name": "Mark",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks this entry as alive during garbage collection."
        },
        {
          "name": "Unmark",
          "parameters": [],
          "return_type": "void",
          "logic": "Unmarks this entry during sweeping."
        },
        {
          "name": "IsMarked",
          "parameters": [],
          "return_type": "bool",
          "logic": "Tests whether this entry is currently marked as alive."
        }
      ]
    },
    {
      "name": "TrustedPointerTable",
      "properties": [],
      "methods": [
        {
          "name": "Get",
          "parameters": [
            "TrustedPointerHandle handle",
            "IndirectPointerTag tag"
          ],
          "return_type": "Address",
          "logic": "Retrieves the content of the entry referenced by the given handle."
        },
        {
          "name": "GetMaybeUnpublished",
          "parameters": [
            "TrustedPointerHandle handle",
            "IndirectPointerTag tag"
          ],
          "return_type": "Address",
          "logic": "Allows kUnpublishedIndirectPointerTag in addition to the specified {tag}."
        },
        {
          "name": "Set",
          "parameters": [
            "TrustedPointerHandle handle",
            "Address pointer",
            "IndirectPointerTag tag"
          ],
          "return_type": "void",
          "logic": "Sets the content of the entry referenced by the given handle."
        },
        {
          "name": "AllocateAndInitializeEntry",
          "parameters": [
            "Space* space",
            "Address pointer",
            "IndirectPointerTag tag",
            "TrustedPointerPublishingScope* scope"
          ],
          "return_type": "TrustedPointerHandle",
          "logic": "Allocates a new entry in the table and initialize it."
        },
        {
          "name": "Mark",
          "parameters": [
            "Space* space",
            "TrustedPointerHandle handle"
          ],
          "return_type": "void",
          "logic": "Marks the specified entry as alive."
        },
        {
          "name": "Sweep",
          "parameters": [
            "Space* space",
            "Counters* counters"
          ],
          "return_type": "uint32_t",
          "logic": "Frees all unmarked entries in the given space and returns the number of live entries after sweeping."
        },
        {
          "name": "Zap",
          "parameters": [
            "TrustedPointerHandle handle"
          ],
          "return_type": "void",
          "logic": "Zaps the content of the entry referenced by the given handle, making accesses return an invalid pointer."
        },
        {
          "name": "IsUnpublished",
          "parameters": [
            "TrustedPointerHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks whether the given entry currently has the \"unpublished\" tag."
        },
        {
          "name": "IterateActiveEntriesIn",
          "parameters": [
            "Space* space",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Iterates over all active entries in the given space, invoking the callback function for each."
        },
        {
          "name": "base_address",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the base address of this table, for use in JIT compilers."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "HandleToIndex",
      "parameters": [
        "TrustedPointerHandle handle"
      ],
      "return_type": "uint32_t",
      "logic": "Converts a TrustedPointerHandle to an index."
    },
    {
      "name": "IndexToHandle",
      "parameters": [
        "uint32_t index"
      ],
      "return_type": "TrustedPointerHandle",
      "logic": "Converts an index to a TrustedPointerHandle."
    },
    {
      "name": "Validate",
      "parameters": [
        "Address pointer",
        "IndirectPointerTag tag"
      ],
      "return_type": "void",
      "logic": "Validates the given pointer and tag before storing it into this table."
    }
  ]
}