{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/js-dispatch-table.cc",
  "imports": [
    "src/sandbox/js-dispatch-table.h",
    "src/common/code-memory-access-inl.h",
    "src/execution/isolate.h",
    "src/logging/counters.h",
    "src/objects/code-inl.h",
    "src/sandbox/js-dispatch-table-inl.h"
  ],
  "classes": [
    {
      "name": "JSDispatchEntry",
      "properties": [
        "entrypoint_",
        "encoded_word_"
      ],
      "methods": [
        {
          "name": "CheckFieldOffsets",
          "parameters": [],
          "return_type": "void",
          "logic": "This function uses static asserts to ensure the offsets of the fields within the `JSDispatchEntry` struct are as expected. It verifies the offsets of `entrypoint_`, `encoded_word_`, and `parameter_count_` depending on the target architecture and endianness. It also ensures that the parameter count mask and size are as expected."
        }
      ]
    },
    {
      "name": "JSDispatchTable",
      "properties": [],
      "methods": [
        {
          "name": "PreAllocateEntries",
          "parameters": [
            "Space* space",
            "int count",
            "bool ensure_static_handles"
          ],
          "return_type": "JSDispatchHandle",
          "logic": "Pre-allocates a number of `JSDispatchEntry` instances in the provided `Space`. It ensures that the allocated entries are consecutive and optionally verifies if they match expected static handles if static handles are enabled. Returns the handle of the first allocated entry."
        },
        {
          "name": "PreAllocatedEntryNeedsInitialization",
          "parameters": [
            "Space* space",
            "JSDispatchHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks if a pre-allocated `JSDispatchEntry` needs initialization by determining if it's currently a freelist entry."
        },
        {
          "name": "InitializePreAllocatedEntry",
          "parameters": [
            "Space* space",
            "JSDispatchHandle handle",
            "Tagged<Code> code",
            "uint16_t parameter_count"
          ],
          "return_type": "void",
          "logic": "Initializes a pre-allocated `JSDispatchEntry` with the provided code, entrypoint (derived from code), parameter count and metadata."
        },
        {
          "name": "IsMarked",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks if the `JSDispatchEntry` is marked using the `IsMarked()` method. Only available in debug builds."
        },
        {
          "name": "PrintEntry",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "void",
          "logic": "Prints the details of a `JSDispatchEntry` for debugging purposes, including its code, parameter count, and entrypoint address."
        },
        {
          "name": "PrintCurrentTieringRequest",
          "parameters": [
            "JSDispatchHandle handle",
            "Isolate* isolate",
            "std::ostream& os"
          ],
          "return_type": "void",
          "logic": "Prints the currently requested tiering level for the given dispatch handle to the provided output stream. Iterates through the built-in tiering requests and prints the name of the first one that's requested."
        }
      ]
    }
  ],
  "functions": []
}