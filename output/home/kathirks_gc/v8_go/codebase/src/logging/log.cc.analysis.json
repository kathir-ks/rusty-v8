{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/logging/log.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/logging/log.cc\",\n  \"imports\": [\n    \"src/logging/log.h\",\n    \"<atomic>\",\n    \"<cstdarg>\",\n    \"<memory>\",\n    \"<sstream>\",\n    \"include/v8-locker.h\",\n    \"src/api/api-inl.h\",\n    \"src/base/hashing.h\",\n    \"src/base/platform/mutex.h\",\n    \"src/base/platform/platform.h\",\n    \"src/base/platform/wrappers.h\",\n    \"src/builtins/profile-data-reader.h\",\n    \"src/codegen/bailout-reason.h\",\n    \"src/codegen/compiler.h\",\n    \"src/codegen/macro-assembler.h\",\n    \"src/codegen/source-position-table.h\",\n    \"src/common/assert-scope.h\",\n    \"src/deoptimizer/deoptimizer.h\",\n    \"src/diagnostics/perf-jit.h\",\n    \"src/execution/isolate.h\",\n    \"src/execution/v8threads.h\",\n    \"src/execution/vm-state-inl.h\",\n    \"src/execution/vm-state.h\",\n    \"src/handles/global-handles.h\",\n    \"src/heap/combined-heap.h\",\n    \"src/heap/heap-inl.h\",\n    \"src/heap/heap-layout-inl.h\",\n    \"src/init/bootstrapper.h\",\n    \"src/interpreter/bytecodes.h\",\n    \"src/interpreter/interpreter.h\",\n    \"src/libsampler/sampler.h\",\n    \"src/logging/code-events.h\",\n    \"src/logging/counters.h\",\n    \"src/logging/log-file.h\",\n    \"src/logging/log-inl.h\",\n    \"src/objects/api-callbacks.h\",\n    \"src/objects/code-kind.h\",\n    \"src/objects/code.h\",\n    \"src/profiler/tick-sample.h\",\n    \"src/snapshot/embedded/embedded-data.h\",\n    \"src/strings/string-stream.h\",\n    \"src/strings/unicode-inl.h\",\n    \"src/tracing/tracing-category-observer.h\",\n    \"src/utils/memcopy.h\",\n    \"src/utils/version.h\",\n    \"src/diagnostics/gdb-jit.h\",\n    \"src/wasm/wasm-code-manager.h\",\n    \"src/wasm/wasm-engine.h\",\n    \"src/wasm/wasm-import-wrapper-cache.h\",\n    \"src/wasm/wasm-objects-inl.h\",\n    \"src/diagnostics/etw-jit-win.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CodeEventLogger::NameBuffer\",\n      \"properties\": [\n        \"static const size_t kUtf8BufferSize = 4096\",\n        \"static const size_t kUtf16BufferSize = kUtf8BufferSize\",\n        \"size_t utf8_pos_\",\n        \"char utf8_buffer_[kUtf8BufferSize]\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NameBuffer\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Resets the buffer.\"\n        },\n        {\n          \"name\": \"Reset\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the buffer position to 0.\"\n        },\n        {\n          \"name\": \"Init\",\n          \"parameters\": [\n            \"CodeTag tag\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the buffer with the code tag name.\"\n        },\n        {\n          \"name\": \"AppendName\",\n          \"parameters\": [\n            \"Tagged<Name> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a name (String or Symbol) to the buffer.\"\n        },\n        {\n          \"name\": \"AppendString\",\n          \"parameters\": [\n            \"Tagged<String> str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a string to the buffer.\"\n        },\n        {\n          \"name\": \"AppendBytes\",\n          \"parameters\": [\n            \"const char* bytes\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends bytes to the buffer, limiting the size to the available buffer space.\"\n        },\n        {\n          \"name\": \"AppendBytes\",\n          \"parameters\": [\n            \"const char* bytes\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends bytes to the buffer (using strlen to determine size).\"\n        },\n        {\n          \"name\": \"AppendByte\",\n          \"parameters\": [\n            \"char c\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a single byte to the buffer.\"\n        },\n        {\n          \"name\": \"AppendInt\",\n          \"parameters\": [\n            \"int n\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends an integer to the buffer.\"\n        },\n        {\n          \"name\": \"AppendHex\",\n          \"parameters\": [\n            \"uint32_t n\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a hexadecimal representation of an integer to the buffer.\"\n        },\n        {\n          \"name\": \"get\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns a pointer to the beginning of the buffer.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the current size of the buffer content.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CodeEventLogger\",\n      \"properties\": [\n        \"Isolate* isolate_\",\n        \"std::unique_ptr<NameBuffer> name_buffer_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CodeEventLogger\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the isolate and name buffer.\"\n        },\n        {\n          \"name\": \"~CodeEventLogger\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor. Default destructor.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"const char* comment\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with a comment.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<Name> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with a name.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<Name> script_name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with shared function info and script name.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<Name> script_name\",\n            \"int line\",\n            \"int column\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with shared function info, script name, line, and column.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"const wasm::WasmCode* code\",\n            \"wasm::WasmName name\",\n            \"const char* source_url\",\n            \"int code_offset\",\n            \"int script_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a WebAssembly code creation event (only if V8_ENABLE_WEBASSEMBLY is defined).\"\n        },\n        {\n          \"name\": \"RegExpCodeCreateEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<String> source\",\n            \"RegExpFlags flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a RegExp code creation event.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LinuxPerfBasicLogger\",\n      \"properties\": [\n        \"static const char kFilenameFormatString[]\",\n        \"static const int kFilenameBufferPadding\",\n        \"static FILE* perf_output_handle_\",\n        \"static uint64_t reference_count_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LinuxPerfBasicLogger\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Opens the perf JIT map file for logging.\"\n        },\n        {\n          \"name\": \"~LinuxPerfBasicLogger\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor. Closes the perf JIT map file if it was the last logger.\"\n        },\n        {\n          \"name\": \"CodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<InstructionStream> from\",\n            \"Tagged<InstructionStream> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation as CodeMoveEvent is not implemented for linux perf.\"\n        },\n        {\n          \"name\": \"BytecodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> from\",\n            \"Tagged<BytecodeArray> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation as BytecodeMoveEvent is not implemented for linux perf.\"\n        },\n        {\n          \"name\": \"CodeDisableOptEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation as CodeDisableOptEvent is not implemented for linux perf.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExternalLogEventListener\",\n      \"properties\": [\n        \"bool is_listening_\",\n        \"Isolate* isolate_\",\n        \"CodeEventHandler* code_event_handler_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ExternalLogEventListener\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the listener with an isolate.\"\n        },\n        {\n          \"name\": \"~ExternalLogEventListener\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor. Stops listening if the listener is active.\"\n        },\n        {\n          \"name\": \"LogExistingCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs all existing code objects.\"\n        },\n        {\n          \"name\": \"StartListening\",\n          \"parameters\": [\n            \"CodeEventHandler* code_event_handler\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts listening for code events and logs existing code.\"\n        },\n        {\n          \"name\": \"StopListening\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops listening for code events.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"const char* comment\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a code creation event.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<Name> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a code creation event with a name.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<Name> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a code creation event with shared function info and a name.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<Name> source\",\n            \"int line\",\n            \"int column\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a code creation event with shared function info, script name, line and column.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"const wasm::WasmCode* code\",\n            \"wasm::WasmName name\",\n            \"const char* source_url\",\n            \"int code_offset\",\n            \"int script_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a WebAssembly code creation event (only if V8_ENABLE_WEBASSEMBLY is defined).\"\n        },\n        {\n          \"name\": \"RegExpCodeCreateEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<String> source\",\n            \"RegExpFlags flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a RegExp code creation event.\"\n        },\n        {\n          \"name\": \"CodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<InstructionStream> from\",\n            \"Tagged<InstructionStream> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a code move event.\"\n        },\n        {\n          \"name\": \"BytecodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> from\",\n            \"Tagged<BytecodeArray> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles a bytecode move event.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LowLevelLogger\",\n      \"properties\": [\n        \"static const char kLogExt[]\",\n        \"FILE* ll_output_handle_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LowLevelLogger\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* name\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Opens the low-level log file.\"\n        },\n        {\n          \"name\": \"~LowLevelLogger\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor. Closes the low-level log file.\"\n        },\n        {\n          \"name\": \"CodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<InstructionStream> from\",\n            \"Tagged<InstructionStream> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code move event.\"\n        },\n        {\n          \"name\": \"BytecodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> from\",\n            \"Tagged<BytecodeArray> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a bytecode move event.\"\n        },\n                {\n          \"name\": \"CodeDisableOptEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation as CodeDisableOptEvent is not implemented for low level logging.\"\n        },\n        {\n          \"name\": \"SnapshotPositionEvent\",\n          \"parameters\": [\n            \"Tagged<HeapObject> obj\",\n            \"int pos\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a snapshot position event.\"\n        },\n        {\n          \"name\": \"CodeMovingGCEvent\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code moving GC event.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JitLogger\",\n      \"properties\": [\n        \"JitCodeEventHandler code_event_handler_\",\n        \"base::Mutex logger_mutex_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"JitLogger\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"JitCodeEventHandler code_event_handler\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the jit logger with an isolate and event handler.\"\n        },\n        {\n          \"name\": \"CodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<InstructionStream> from\",\n            \"Tagged<InstructionStream> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code move event to the external handler.\"\n        },\n        {\n          \"name\": \"BytecodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> from\",\n            \"Tagged<BytecodeArray> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a bytecode move event to the external handler.\"\n        },\n                {\n          \"name\": \"CodeDisableOptEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation as CodeDisableOptEvent is not implemented for Jit Logger.\"\n        },\n        {\n          \"name\": \"AddCodeLinePosInfoEvent\",\n          \"parameters\": [\n            \"void* jit_handler_data\",\n            \"int pc_offset\",\n            \"int position\",\n            \"JitCodeEvent::PositionType position_type\",\n            \"JitCodeEvent::CodeType code_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a code line position information event.\"\n        },\n        {\n          \"name\": \"StartCodePosInfoEvent\",\n          \"parameters\": [\n            \"JitCodeEvent::CodeType code_type\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Starts a code position info event.\"\n        },\n        {\n          \"name\": \"EndCodePosInfoEvent\",\n          \"parameters\": [\n            \"Address start_address\",\n            \"void* jit_handler_data\",\n            \"JitCodeEvent::CodeType code_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Ends the code position info event.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SamplingThread\",\n      \"properties\": [\n        \"static const int kSamplingThreadStackSize = 64 * KB\",\n        \"sampler::Sampler* sampler_\",\n        \"const int interval_microseconds_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SamplingThread\",\n          \"parameters\": [\n            \"sampler::Sampler* sampler\",\n            \"int interval_microseconds\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the sampling thread.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs the sampling thread.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Profiler\",\n      \"properties\": [\n        \"Isolate* isolate_\",\n        \"static const int kBufferSize = 128\",\n        \"TickSample buffer_[kBufferSize]\",\n        \"int head_\",\n        \"base::Atomic32 tail_\",\n        \"base::Atomic32 overflow_\",\n        \"base::Semaphore buffer_semaphore_\",\n        \"base::Atomic32 running_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Profiler\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the profiler thread.\"\n        },\n        {\n          \"name\": \"Engage\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts the profiler thread and registers for ticks.\"\n        },\n        {\n          \"name\": \"Disengage\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops the profiler thread and unregisters for ticks.\"\n        },\n        {\n          \"name\": \"Insert\",\n          \"parameters\": [\n            \"TickSample* sample\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Inserts a profiling sample into the buffer.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs the profiler thread.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Ticker\",\n      \"properties\": [\n        \"Profiler* profiler_ = nullptr\",\n        \"std::unique_ptr<SamplingThread> sampling_thread_\",\n        \"Isolate::PerIsolateThreadData* perThreadData_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Ticker\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int interval_microseconds\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the ticker.\"\n        },\n        {\n          \"name\": \"~Ticker\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor. Stops sampling thread and profiler.\"\n        },\n        {\n          \"name\": \"SetProfiler\",\n          \"parameters\": [\n            \"Profiler* profiler\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the profiler and starts the sampling thread.\"\n        },\n        {\n          \"name\": \"ClearProfiler\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the profiler and stops the sampling thread.\"\n        },\n        {\n          \"name\": \"SampleStack\",\n          \"parameters\": [\n            \"const v8::RegisterState& state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Samples the stack and inserts a tick sample into the profiler, if a profiler is present.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"V8FileLogger\",\n      \"properties\": [\n        \"Isolate* isolate_\",\n        \"bool is_logging_\",\n        \"bool is_initialized_\",\n        \"LogFile* log_file_\",\n        \"Timer timer_\",\n        \"ExistingCodeLogger existing_code_logger_\",\n        \"std::unique_ptr<LinuxPerfBasicLogger> perf_basic_logger_\",\n        \"std::unique_ptr<LinuxPerfJitLogger> perf_jit_logger_\",\n        \"std::unique_ptr<LowLevelLogger> ll_logger_\",\n        \"std::unique_ptr<JitLogger> jit_logger_\",\n        \"std::unique_ptr<Profiler> profiler_\",\n        \"std::unique_ptr<Ticker> ticker_\",\n        \"std::unordered_set<int> logged_source_code_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"V8FileLogger\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor. Initializes the V8 file logger.\"\n        },\n        {\n          \"name\": \"~V8FileLogger\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor. Default destructor.\"\n        },\n        {\n          \"name\": \"ProfilerBeginEvent\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs the beginning of a profiler event.\"\n        },\n        {\n          \"name\": \"StringEvent\",\n          \"parameters\": [\n            \"const char* name\",\n            \"const char* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a string event.\"\n        },\n        {\n          \"name\": \"UncheckedStringEvent\",\n          \"parameters\": [\n            \"const char* name\",\n            \"const char* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a string event without checking logging flag.\"\n        },\n        {\n          \"name\": \"IntPtrTEvent\",\n          \"parameters\": [\n            \"const char* name\",\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs an intptr_t event.\"\n        },\n        {\n          \"name\": \"SharedLibraryEvent\",\n          \"parameters\": [\n            \"const std::string& library_path\",\n            \"uintptr_t start\",\n            \"uintptr_t end\",\n            \"intptr_t aslr_slide\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a shared library event.\"\n        },\n        {\n          \"name\": \"SharedLibraryEnd\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs the end of shared library events.\"\n        },\n        {\n          \"name\": \"CurrentTimeEvent\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs the current time.\"\n        },\n        {\n          \"name\": \"TimerEvent\",\n          \"parameters\": [\n            \"v8::LogEventStatus se\",\n            \"const char* name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a timer event.\"\n        },\n        {\n          \"name\": \"is_logging\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Check if logging is active and CPU profiler is inactive.\"\n        },\n        {\n          \"name\": \"NewEvent\",\n          \"parameters\": [\n            \"const char* name\",\n            \"void* object\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a new event.\"\n        },\n        {\n          \"name\": \"DeleteEvent\",\n          \"parameters\": [\n            \"const char* name\",\n            \"void* object\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a delete event.\"\n        },\n        {\n          \"name\": \"LogSourceCodeInformation\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs source code information associated with a code object.\"\n        },\n        {\n          \"name\": \"LogCodeDisassemble\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs the disassembly of a code object.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"const char* name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<Name> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with a name.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<Name> script_name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with shared function info and a script name.\"\n        },\n        {\n          \"name\": \"FeedbackVectorEvent\",\n          \"parameters\": [\n            \"Tagged<FeedbackVector> vector\",\n            \"Tagged<AbstractCode> code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a feedback vector event.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<Name> script_name\",\n            \"int line\",\n            \"int column\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code creation event with shared function info, script name, line, and column.\"\n        },\n        {\n          \"name\": \"CodeCreateEvent\",\n          \"parameters\": [\n            \"CodeTag tag\",\n            \"const wasm::WasmCode* code\",\n            \"wasm::WasmName name\",\n            \"const char* source_url\",\n            \"int code_offset\",\n            \"int script_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a WebAssembly code creation event (only if V8_ENABLE_WEBASSEMBLY is defined).\"\n        },\n        {\n          \"name\": \"CallbackEventInternal\",\n          \"parameters\": [\n            \"const char* prefix\",\n            \"DirectHandle<Name> name\",\n            \"Address entry_point\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs internal callback event.\"\n        },\n        {\n          \"name\": \"CallbackEvent\",\n          \"parameters\": [\n            \"DirectHandle<Name> name\",\n            \"Address entry_point\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a callback event.\"\n        },\n        {\n          \"name\": \"GetterCallbackEvent\",\n          \"parameters\": [\n            \"DirectHandle<Name> name\",\n            \"Address entry_point\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a getter callback event.\"\n        },\n        {\n          \"name\": \"SetterCallbackEvent\",\n          \"parameters\": [\n            \"DirectHandle<Name> name\",\n            \"Address entry_point\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a setter callback event.\"\n        },\n        {\n          \"name\": \"RegExpCodeCreateEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<String> source\",\n            \"RegExpFlags flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a RegExp code creation event.\"\n        },\n        {\n          \"name\": \"CodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<InstructionStream> from\",\n            \"Tagged<InstructionStream> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code move event.\"\n        },\n        {\n          \"name\": \"BytecodeMoveEvent\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> from\",\n            \"Tagged<BytecodeArray> to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a bytecode move event.\"\n        },\n        {\n          \"name\": \"SharedFunctionInfoMoveEvent\",\n          \"parameters\": [\n            \"Address from\",\n            \"Address to\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a shared function info move event.\"\n        },\n        {\n          \"name\": \"CodeMovingGCEvent\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code moving GC event.\"\n        },\n        {\n          \"name\": \"CodeDisableOptEvent\",\n          \"parameters\": [\n            \"DirectHandle<AbstractCode> code\",\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs an event when code is disabled for optimization.\"\n        },\n        {\n          \"name\": \"ProcessDeoptEvent\",\n          \"parameters\": [\n            \"DirectHandle<Code> code\",\n            \"SourcePosition position\",\n            \"const char* kind\",\n            \"const char* reason\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a deoptimization event with detailed info.\"\n        },\n        {\n          \"name\": \"CodeDeoptEvent\",\n          \"parameters\": [\n            \"DirectHandle<Code> code\",\n            \"DeoptimizeKind kind\",\n            \"Address pc\",\n            \"int fp_to_sp_delta\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs a code deoptimization event.\"\n        },\n        {\n          \"name\": \"CodeDependencyChangeEvent\",\n          \"parameters\": [\n            \"DirectHandle<Code> code\",\n            \"DirectHandle<SharedFunctionInfo> sfi\",\n            \"const char* reason\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs an event indicating a code dependency change.\"\n        },\n        {\n          \"name\": \"CodeLinePosInfoRecordEvent\",\n          \"parameters\": [\n            \"Address code_start\",\n            \"Tagged<TrustedByteArray>"
}