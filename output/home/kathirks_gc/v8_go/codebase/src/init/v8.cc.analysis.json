{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/init/v8.cc",
  "imports": [
    "src/init/v8.h",
    "<fstream>",
    "include/cppgc/platform.h",
    "include/v8-sandbox.h",
    "src/api/api.h",
    "src/base/atomicops.h",
    "src/base/once.h",
    "src/base/platform/platform.h",
    "src/codegen/cpu-features.h",
    "src/codegen/interface-descriptors.h",
    "src/common/code-memory-access.h",
    "src/debug/debug.h",
    "src/deoptimizer/deoptimizer.h",
    "src/execution/frames.h",
    "src/execution/isolate.h",
    "src/execution/simulator.h",
    "src/flags/flags.h",
    "src/init/bootstrapper.h",
    "src/libsampler/sampler.h",
    "src/objects/elements.h",
    "src/objects/objects-inl.h",
    "src/profiler/heap-profiler.h",
    "src/sandbox/hardware-support.h",
    "src/sandbox/sandbox.h",
    "src/sandbox/testing.h",
    "src/snapshot/snapshot.h",
    "src/tracing/code-data-source.h",
    "src/tracing/tracing-category-observer.h",
    "src/wasm/wasm-engine.h",
    "src/diagnostics/etw-jit-win.h"
  ],
  "classes": [
    {
      "name": "V8",
      "properties": [
        "platform_",
        "kNoOOMDetails",
        "kHeapOOM"
      ],
      "methods": [
        {
          "name": "InitializePlatform",
          "parameters": [
            "v8::Platform* platform"
          ],
          "return_type": "void",
          "logic": "Initializes the V8 platform. Sets the platform pointer, sets the stack trace printer, sets up tracing category observer, initializes CppHeap and advances the startup state."
        },
        {
          "name": "InitializePlatformForTesting",
          "parameters": [
            "v8::Platform* platform"
          ],
          "return_type": "void",
          "logic": "Initializes the V8 platform for testing, checking if a platform has already been initialized."
        },
        {
          "name": "Initialize",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes V8 internals. Enforces flag implications, initializes the flag list, freezes flags, handles tracing, initializes OS, sets random seeds, prints flag values, initializes thread isolation, initializes the sandbox (if enabled), initializes isolate groups, the isolate, the simulator (if used), cpu features, element accessors, the bootstrapper, call descriptors, the WASM engine (if enabled) and the external reference table, then advances the startup state."
        },
        {
          "name": "Dispose",
          "parameters": [],
          "return_type": "void",
          "logic": "Disposes of V8 internals, tearing down WASM engine (if enabled), the simulator (if used), call descriptors, element accessors, unregistering extensions, releasing flag allocations, tearing down isolate groups and advances the startup state."
        },
        {
          "name": "DisposePlatform",
          "parameters": [],
          "return_type": "void",
          "logic": "Disposes of the V8 platform. Unregisters ETW (if enabled), tears down tracing category observer, resets the stack trace printer, tears down the sandbox (if enabled), resets the platform pointer and advances the startup state."
        },
        {
          "name": "GetCurrentPlatform",
          "parameters": [],
          "return_type": "v8::Platform*",
          "logic": "Returns the current V8 platform."
        },
        {
          "name": "SetPlatformForTesting",
          "parameters": [
            "v8::Platform* platform"
          ],
          "return_type": "void",
          "logic": "Sets the platform pointer for testing purposes."
        },
        {
          "name": "SetSnapshotBlob",
          "parameters": [
            "StartupData* snapshot_blob"
          ],
          "return_type": "void",
          "logic": "Sets the snapshot blob used for initializing V8."
        }
      ]
    },
    {
      "name": "Platform",
      "properties": [],
      "methods": [
        {
          "name": "SystemClockTimeMillis",
          "parameters": [],
          "return_type": "double",
          "logic": "Returns the current system time in milliseconds."
        }
      ]
    },
    {
      "name": "ThreadIsolatedAllocator",
      "properties": [],
      "methods": [
        {
          "name": "SetDefaultPermissionsForSignalHandler",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the default permissions for the signal handler related to JIT write protection."
        }
      ]
    },
    {
      "name": "SandboxHardwareSupport",
      "properties": [],
      "methods": [
        {
          "name": "InitializeBeforeThreadCreation",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the sandbox hardware support before thread creation."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "AdvanceStartupState",
      "parameters": [
        "V8StartupState expected_next_state"
      ],
      "return_type": "void",
      "logic": "Advances the global V8 startup state, ensuring correct initialization order."
    }
  ]
}