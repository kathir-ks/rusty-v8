{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/init/bootstrapper.h",
  "imports": [
    "include/v8-context.h",
    "include/v8-local-handle.h",
    "include/v8-snapshot.h",
    "src/heap/factory.h",
    "src/objects/fixed-array.h",
    "src/objects/shared-function-info.h",
    "src/objects/visitors.h",
    "src/snapshot/serializer-deserializer.h"
  ],
  "classes": [
    {
      "name": "SourceCodeCache",
      "properties": [
        "type_",
        "cache_"
      ],
      "methods": [
        {
          "name": "SourceCodeCache",
          "parameters": [
            "Script::Type type"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the SourceCodeCache with a given script type."
        },
        {
          "name": "Initialize",
          "parameters": [
            "Isolate* isolate",
            "bool create_heap_objects"
          ],
          "return_type": "void",
          "logic": "Initializes the SourceCodeCache, potentially creating heap objects depending on the flag."
        },
        {
          "name": "Iterate",
          "parameters": [
            "RootVisitor* v"
          ],
          "return_type": "void",
          "logic": "Iterates through the SourceCodeCache, visiting the roots using the provided visitor."
        },
        {
          "name": "Lookup",
          "parameters": [
            "Isolate* isolate",
            "base::Vector<const char> name",
            "DirectHandle<SharedFunctionInfo>* handle"
          ],
          "return_type": "bool",
          "logic": "Looks up a SharedFunctionInfo in the cache by its name. Returns true if found, false otherwise."
        },
        {
          "name": "Add",
          "parameters": [
            "Isolate* isolate",
            "base::Vector<const char> name",
            "DirectHandle<SharedFunctionInfo> shared"
          ],
          "return_type": "void",
          "logic": "Adds a new SharedFunctionInfo to the cache, associated with its name."
        }
      ]
    },
    {
      "name": "Bootstrapper",
      "properties": [
        "isolate_",
        "nesting_",
        "extensions_cache_"
      ],
      "methods": [
        {
          "name": "InitializeOncePerProcess",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the bootstrapper once per process (static method)."
        },
        {
          "name": "Initialize",
          "parameters": [
            "bool create_heap_objects"
          ],
          "return_type": "void",
          "logic": "Initializes the bootstrapper for a specific isolate. Requires Heap::SetUp to be called first."
        },
        {
          "name": "TearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Cleans up any resources held by the bootstrapper."
        },
        {
          "name": "CreateEnvironment",
          "parameters": [
            "MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy",
            "v8::Local<v8::ObjectTemplate> global_object_template",
            "v8::ExtensionConfiguration* extensions",
            "size_t context_snapshot_index",
            "DeserializeEmbedderFieldsCallback embedder_fields_deserializer",
            "v8::MicrotaskQueue* microtask_queue"
          ],
          "return_type": "DirectHandle<NativeContext>",
          "logic": "Creates a JavaScript Global Context with an initial object graph. Returns the environment handle."
        },
        {
          "name": "CreateEnvironmentForTesting",
          "parameters": [],
          "return_type": "DirectHandle<NativeContext>",
          "logic": "Creates a context for testing deserialization."
        },
        {
          "name": "NewRemoteContext",
          "parameters": [
            "MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy",
            "v8::Local<v8::ObjectTemplate> global_object_template"
          ],
          "return_type": "DirectHandle<JSGlobalProxy>",
          "logic": "Creates and returns a new remote context."
        },
        {
          "name": "Iterate",
          "parameters": [
            "RootVisitor* v"
          ],
          "return_type": "void",
          "logic": "Traverses the pointers held by the bootstrapper for garbage collection."
        },
        {
          "name": "IsActive",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether bootstrapping is currently active based on the nesting counter."
        },
        {
          "name": "ArchiveSpacePerThread",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the amount of space needed to archive the bootstrapper state per thread."
        },
        {
          "name": "ArchiveState",
          "parameters": [
            "char* to"
          ],
          "return_type": "char*",
          "logic": "Archives the bootstrapper state into the given buffer."
        },
        {
          "name": "RestoreState",
          "parameters": [
            "char* from"
          ],
          "return_type": "char*",
          "logic": "Restores the bootstrapper state from the given buffer."
        },
        {
          "name": "FreeThreadResources",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees any thread-local resources used by the bootstrapper."
        },
        {
          "name": "InstallExtensions",
          "parameters": [
            "DirectHandle<NativeContext> native_context",
            "v8::ExtensionConfiguration* extensions"
          ],
          "return_type": "bool",
          "logic": "Installs the given extensions into the specified native context."
        },
        {
          "name": "extensions_cache",
          "parameters": [],
          "return_type": "SourceCodeCache*",
          "logic": "Returns a pointer to the extension cache."
        }
      ]
    },
    {
      "name": "BootstrapperActive",
      "properties": [
        "bootstrapper_"
      ],
      "methods": [
        {
          "name": "BootstrapperActive",
          "parameters": [
            "Bootstrapper* bootstrapper"
          ],
          "return_type": "void",
          "logic": "Constructor. Increments the nesting counter of the associated bootstrapper."
        },
        {
          "name": "~BootstrapperActive",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Decrements the nesting counter of the associated bootstrapper."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "SimpleInstallFunction",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<JSObject> base",
        "const char* name",
        "Builtin call",
        "int len",
        "AdaptArguments adapt",
        "PropertyAttributes attrs"
      ],
      "return_type": "Handle<JSFunction>",
      "logic": "Installs a simple function (builtin) on an object."
    },
    {
      "name": "InstallError",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<JSObject> global",
        "DirectHandle<String> name",
        "int context_index",
        "Builtin error_constructor",
        "int error_function_length"
      ],
      "return_type": "void",
      "logic": "Installs an error constructor (e.g., TypeError, RangeError) on the global object."
    }
  ]
}