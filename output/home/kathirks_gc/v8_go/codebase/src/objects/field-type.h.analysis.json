{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/objects/field-type.h",
  "imports": [
    "src/handles/handles.h",
    "src/objects/casting.h",
    "src/objects/tagged.h"
  ],
  "classes": [
    {
      "name": "FieldType",
      "properties": [
        "kFieldTypesCanBeClearedOnGC"
      ],
      "methods": [
        {
          "name": "None",
          "parameters": [],
          "return_type": "Tagged<FieldType>",
          "logic": "Returns a Tagged<FieldType> representing the None field type."
        },
        {
          "name": "Any",
          "parameters": [],
          "return_type": "Tagged<FieldType>",
          "logic": "Returns a Tagged<FieldType> representing the Any field type."
        },
        {
          "name": "None",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "DirectHandle<FieldType>",
          "logic": "Returns a DirectHandle<FieldType> representing the None field type."
        },
        {
          "name": "Any",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "DirectHandle<FieldType>",
          "logic": "Returns a DirectHandle<FieldType> representing the Any field type."
        },
        {
          "name": "Class",
          "parameters": [
            "Tagged<Map> map"
          ],
          "return_type": "Tagged<FieldType>",
          "logic": "Returns a Tagged<FieldType> representing a class field type based on a Tagged<Map>."
        },
        {
          "name": "Class",
          "parameters": [
            "DirectHandle<Map> map",
            "Isolate* isolate"
          ],
          "return_type": "DirectHandle<FieldType>",
          "logic": "Returns a DirectHandle<FieldType> representing a class field type based on a DirectHandle<Map>."
        },
        {
          "name": "NowContains",
          "parameters": [
            "Tagged<FieldType> type",
            "Tagged<Object> value"
          ],
          "return_type": "bool",
          "logic": "Checks if the given FieldType 'type' now contains the given Tagged<Object> 'value'."
        },
        {
          "name": "NowContains",
          "parameters": [
            "Tagged<FieldType> type",
            "DirectHandle<Object> value"
          ],
          "return_type": "bool",
          "logic": "Checks if the given FieldType 'type' now contains the given DirectHandle<Object> 'value'."
        },
        {
          "name": "AsClass",
          "parameters": [
            "Tagged<FieldType> type"
          ],
          "return_type": "Tagged<Map>",
          "logic": "Returns the Tagged<Map> associated with the given Tagged<FieldType> if it represents a class."
        },
        {
          "name": "AsClass",
          "parameters": [
            "DirectHandle<FieldType> type"
          ],
          "return_type": "DirectHandle<Map>",
          "logic": "Returns the DirectHandle<Map> associated with the given DirectHandle<FieldType> if it represents a class."
        },
        {
          "name": "NowStable",
          "parameters": [
            "Tagged<FieldType> type"
          ],
          "return_type": "bool",
          "logic": "Checks if the given FieldType 'type' is now stable."
        },
        {
          "name": "NowIs",
          "parameters": [
            "Tagged<FieldType> type",
            "Tagged<FieldType> other"
          ],
          "return_type": "bool",
          "logic": "Checks if the given FieldType 'type' is now of the type 'other'."
        },
        {
          "name": "NowIs",
          "parameters": [
            "Tagged<FieldType> type",
            "DirectHandle<FieldType> other"
          ],
          "return_type": "bool",
          "logic": "Checks if the given FieldType 'type' is now of the type 'other'."
        },
        {
          "name": "Equals",
          "parameters": [
            "Tagged<FieldType> type",
            "Tagged<FieldType> other"
          ],
          "return_type": "bool",
          "logic": "Checks if the given FieldType 'type' is equal to the FieldType 'other'."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "Tagged<FieldType> type",
            "std::ostream& os"
          ],
          "return_type": "void",
          "logic": "Prints the given FieldType 'type' to the provided output stream 'os'."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsClass",
      "parameters": [
        "Tagged<FieldType> obj"
      ],
      "return_type": "bool",
      "logic": "Checks if the given FieldType is a Class."
    },
    {
      "name": "IsNone",
      "parameters": [
        "Tagged<FieldType> obj"
      ],
      "return_type": "bool",
      "logic": "Checks if the given FieldType is None."
    },
    {
      "name": "IsAny",
      "parameters": [
        "Tagged<FieldType> obj"
      ],
      "return_type": "bool",
      "logic": "Checks if the given FieldType is Any."
    }
  ]
}