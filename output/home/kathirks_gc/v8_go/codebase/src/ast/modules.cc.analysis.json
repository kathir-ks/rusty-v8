{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/modules.cc",
  "imports": [
    "src/ast/modules.h",
    "src/ast/ast-value-factory.h",
    "src/ast/scopes.h",
    "src/common/globals.h",
    "src/heap/local-factory-inl.h",
    "src/objects/module-inl.h",
    "src/objects/objects-inl.h",
    "src/parsing/pending-compilation-error-handler.h"
  ],
  "classes": [
    {
      "name": "SourceTextModuleDescriptor",
      "properties": [],
      "methods": [
        {
          "name": "AddImport",
          "parameters": [
            "const AstRawString* import_name",
            "const AstRawString* local_name",
            "const AstRawString* specifier",
            "const ModuleImportPhase import_phase",
            "const ImportAttributes* import_attributes",
            "const Scanner::Location loc",
            "const Scanner::Location specifier_loc",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds a regular import entry to the module descriptor, associating an imported name with a local name and a module request."
        },
        {
          "name": "AddStarImport",
          "parameters": [
            "const AstRawString* local_name",
            "const AstRawString* specifier",
            "const ImportAttributes* import_attributes",
            "const Scanner::Location loc",
            "const Scanner::Location specifier_loc",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds a star import entry (e.g., `import * as local from 'specifier'`) to the module descriptor."
        },
        {
          "name": "AddEmptyImport",
          "parameters": [
            "const AstRawString* specifier",
            "const ImportAttributes* import_attributes",
            "const Scanner::Location specifier_loc",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds an empty import (e.g., `import 'specifier'`) to the module descriptor."
        },
        {
          "name": "AddExport",
          "parameters": [
            "const AstRawString* local_name",
            "const AstRawString* export_name",
            "Scanner::Location loc",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds a regular export entry to the module descriptor."
        },
        {
          "name": "AddExport",
          "parameters": [
            "const AstRawString* import_name",
            "const AstRawString* export_name",
            "const AstRawString* specifier",
            "const ImportAttributes* import_attributes",
            "const Scanner::Location loc",
            "const Scanner::Location specifier_loc",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds a special export (re-export) to the module descriptor. Delegates to an existing import."
        },
        {
          "name": "AddStarExport",
          "parameters": [
            "const AstRawString* specifier",
            "const ImportAttributes* import_attributes",
            "const Scanner::Location loc",
            "const Scanner::Location specifier_loc",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds a star export (e.g., `export * from 'specifier'`) to the module descriptor."
        },
        {
          "name": "SerializeRegularExports",
          "parameters": [
            "IsolateT* isolate",
            "Zone* zone"
          ],
          "return_type": "DirectHandle<FixedArray>",
          "logic": "Serializes the regular exports in a format suitable for runtime consumption, grouping exports by the local name being exported."
        },
        {
          "name": "MakeIndirectExportsExplicit",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Transforms indirect exports into explicit exports by resolving local names to their corresponding import entries."
        },
        {
          "name": "GetCellIndexKind",
          "parameters": [
            "int cell_index"
          ],
          "return_type": "SourceTextModuleDescriptor::CellIndexKind",
          "logic": "Determines the type of a module cell index (export, import, or invalid) based on its value."
        },
        {
          "name": "AssignCellIndices",
          "parameters": [],
          "return_type": "void",
          "logic": "Assigns unique cell indices to regular exports and imports. Export indices are positive, import indices are negative."
        },
        {
          "name": "FindDuplicateExport",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "const SourceTextModuleDescriptor::Entry*",
          "logic": "Finds and returns a duplicate export entry, or nullptr if no duplicates are found."
        },
        {
          "name": "Validate",
          "parameters": [
            "ModuleScope* module_scope",
            "PendingCompilationErrorHandler* error_handler",
            "Zone* zone"
          ],
          "return_type": "bool",
          "logic": "Validates the module descriptor, checking for duplicate exports and exports of non-existent local names.  Calls MakeIndirectExportsExplicit and AssignCellIndices. Reports errors using the error handler."
        }
      ]
    },
    {
      "name": "SourceTextModuleDescriptor::AstRawStringComparer",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const AstRawString* lhs",
            "const AstRawString* rhs"
          ],
          "return_type": "bool",
          "logic": "Compares two AstRawString pointers based on their string values, used for sorting or searching."
        }
      ]
    },
    {
      "name": "SourceTextModuleDescriptor::ModuleRequestComparer",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const AstModuleRequest* lhs",
            "const AstModuleRequest* rhs"
          ],
          "return_type": "bool",
          "logic": "Compares two AstModuleRequest pointers based on their specifier and import attributes. Used for sorting or searching."
        }
      ]
    },
    {
      "name": "SourceTextModuleDescriptor::AstModuleRequest",
      "properties": [],
      "methods": [
        {
          "name": "Serialize",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "DirectHandle<ModuleRequest>",
          "logic": "Serializes an AstModuleRequest into a ModuleRequest object that can be used at runtime. The import attributes are stored in a FixedArray."
        }
      ]
    },
    {
      "name": "SourceTextModuleDescriptor::Entry",
      "properties": [],
      "methods": [
        {
          "name": "Serialize",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "DirectHandle<SourceTextModuleInfoEntry>",
          "logic": "Serializes an Entry into a SourceTextModuleInfoEntry for runtime consumption. This represents a single import or export."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ToStringOrUndefined",
      "parameters": [
        "IsolateT* isolate",
        "const AstRawString* s"
      ],
      "return_type": "Handle<UnionOf<String, Undefined>>",
      "logic": "Converts an AstRawString to a String handle if it's not null, otherwise returns an undefined handle."
    },
    {
      "name": "BetterDuplicate",
      "parameters": [
        "const SourceTextModuleDescriptor::Entry* candidate",
        "ZoneMap<const AstRawString*, const SourceTextModuleDescriptor::Entry*>& export_names",
        "const SourceTextModuleDescriptor::Entry* current_duplicate"
      ],
      "return_type": "const SourceTextModuleDescriptor::Entry*",
      "logic": "Helper function to find the 'better' duplicate export in the presence of multiple duplicate exports. Returns the export with the earliest location. Manages export_names map."
    }
  ]
}