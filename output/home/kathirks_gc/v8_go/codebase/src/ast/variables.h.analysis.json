{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/variables.h",
  "imports": [
    "src/ast/ast-value-factory.h",
    "src/base/threaded-list.h",
    "src/common/globals.h",
    "src/zone/zone-containers.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "Variable",
      "properties": [
        "scope_",
        "name_",
        "local_if_not_shadowed_",
        "next_",
        "index_",
        "initializer_position_",
        "bit_field_",
        "hole_check_analysis_bit_field_"
      ],
      "methods": [
        {
          "name": "Variable",
          "parameters": [
            "Scope* scope",
            "const AstRawString* name",
            "VariableMode mode",
            "VariableKind kind",
            "InitializationFlag initialization_flag",
            "MaybeAssignedFlag maybe_assigned_flag",
            "IsStaticFlag is_static_flag"
          ],
          "return_type": "void",
          "logic": "Constructor for the Variable class. Initializes the variable with provided scope, name, mode, kind, initialization flag, and optional assigned flag and static flag.  It also contains assertions that ensure certain properties between variable mode and initialization flag."
        },
        {
          "name": "Variable",
          "parameters": [
            "Variable* other"
          ],
          "return_type": "void",
          "logic": "Copy constructor for the Variable class (declaration only)."
        },
        {
          "name": "scope",
          "parameters": [],
          "return_type": "Scope*",
          "logic": "Returns the scope associated with the variable."
        },
        {
          "name": "set_scope",
          "parameters": [
            "Scope* scope"
          ],
          "return_type": "void",
          "logic": "Sets the scope associated with the variable. Used for temporaries during parameter initializer desugaring."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "Handle<String>",
          "logic": "Returns the name of the variable as a Handle<String>."
        },
        {
          "name": "raw_name",
          "parameters": [],
          "return_type": "const AstRawString*",
          "logic": "Returns the name of the variable as an AstRawString pointer."
        },
        {
          "name": "mode",
          "parameters": [],
          "return_type": "VariableMode",
          "logic": "Returns the variable mode (e.g., var, let, const)."
        },
        {
          "name": "set_mode",
          "parameters": [
            "VariableMode mode"
          ],
          "return_type": "void",
          "logic": "Sets the variable mode."
        },
        {
          "name": "set_is_static_flag",
          "parameters": [
            "IsStaticFlag is_static_flag"
          ],
          "return_type": "void",
          "logic": "Sets the static flag."
        },
        {
          "name": "is_static_flag",
          "parameters": [],
          "return_type": "IsStaticFlag",
          "logic": "Returns the static flag."
        },
        {
          "name": "is_static",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is static."
        },
        {
          "name": "has_forced_context_allocation",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable requires forced context allocation."
        },
        {
          "name": "ForceContextAllocation",
          "parameters": [],
          "return_type": "void",
          "logic": "Forces context allocation for the variable."
        },
        {
          "name": "is_used",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is used."
        },
        {
          "name": "set_is_used",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the 'is used' flag for the variable."
        },
        {
          "name": "maybe_assigned",
          "parameters": [],
          "return_type": "MaybeAssignedFlag",
          "logic": "Returns the 'maybe assigned' flag."
        },
        {
          "name": "clear_maybe_assigned",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the 'maybe assigned' flag."
        },
        {
          "name": "SetMaybeAssigned",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the 'maybe assigned' flag, and propagates this to any shadowed variables if applicable. Handles cases where variable is shadowed by dynamically created variable (eval or with block)."
        },
        {
          "name": "requires_brand_check",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable requires a brand check (for private methods/accessors)."
        },
        {
          "name": "initializer_position",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the source position of the initializer."
        },
        {
          "name": "set_initializer_position",
          "parameters": [
            "int pos"
          ],
          "return_type": "void",
          "logic": "Sets the source position of the initializer."
        },
        {
          "name": "IsUnallocated",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is unallocated."
        },
        {
          "name": "IsParameter",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a parameter."
        },
        {
          "name": "IsStackLocal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a stack local."
        },
        {
          "name": "IsStackAllocated",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is stack allocated (parameter or local)."
        },
        {
          "name": "IsContextSlot",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a context slot."
        },
        {
          "name": "IsLookupSlot",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a lookup slot."
        },
        {
          "name": "IsGlobalObjectProperty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a global object property. (Declaration only)"
        },
        {
          "name": "IsReplGlobal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a 'let' or 'const' declared in the script scope of a REPL script. (Declaration only)"
        },
        {
          "name": "is_dynamic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is dynamic (declared using eval or with)."
        },
        {
          "name": "initialization_flag",
          "parameters": [],
          "return_type": "InitializationFlag",
          "logic": "Returns the initialization flag for the variable."
        },
        {
          "name": "binding_needs_init",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if the variable binding needs initialization based on its type, allocation, and whether hole checks are required."
        },
        {
          "name": "force_hole_initialization_flag_field",
          "parameters": [],
          "return_type": "ForceHoleInitializationFlag",
          "logic": "Returns the hole initialization flag field."
        },
        {
          "name": "IsHoleInitializationForced",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if hole initialization is forced for this variable."
        },
        {
          "name": "HasHoleCheckUseInSameClosureScope",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there's a hole check use in the same closure scope."
        },
        {
          "name": "ForceHoleInitialization",
          "parameters": [
            "ForceHoleInitializationFlag flag"
          ],
          "return_type": "void",
          "logic": "Forces hole initialization for the variable."
        },
        {
          "name": "ResetHoleCheckBitmapIndex",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the hole check bitmap index."
        },
        {
          "name": "RememberHoleCheckInBitmap",
          "parameters": [
            "HoleCheckBitmap& bitmap",
            "ZoneVector<Variable*>& list"
          ],
          "return_type": "void",
          "logic": "Remembers a hole check in the bitmap for eliding redundant TDZ checks."
        },
        {
          "name": "HasRememberedHoleCheck",
          "parameters": [
            "HoleCheckBitmap bitmap"
          ],
          "return_type": "bool",
          "logic": "Checks if a hole check has been remembered in the bitmap."
        },
        {
          "name": "throw_on_const_assignment",
          "parameters": [
            "LanguageMode language_mode"
          ],
          "return_type": "bool",
          "logic": "Determines whether an assignment to a const variable should throw an error."
        },
        {
          "name": "is_this",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable represents 'this'."
        },
        {
          "name": "is_sloppy_function_name",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a sloppy function name variable."
        },
        {
          "name": "is_parameter",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a parameter variable."
        },
        {
          "name": "is_sloppy_block_function",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a sloppy block function variable."
        },
        {
          "name": "local_if_not_shadowed",
          "parameters": [],
          "return_type": "Variable*",
          "logic": "Returns the locally bound variable if it's not shadowed."
        },
        {
          "name": "has_local_if_not_shadowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable has a locally bound variable that might be shadowed."
        },
        {
          "name": "set_local_if_not_shadowed",
          "parameters": [
            "Variable* local"
          ],
          "return_type": "void",
          "logic": "Sets the locally bound variable that might be shadowed."
        },
        {
          "name": "location",
          "parameters": [],
          "return_type": "VariableLocation",
          "logic": "Returns the location of the variable (e.g., stack, context)."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "VariableKind",
          "logic": "Returns the kind of the variable (e.g., var, let, const)."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the index of the variable."
        },
        {
          "name": "IsReceiver",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is a receiver (the 'this' parameter)."
        },
        {
          "name": "IsExport",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the variable is an exported module variable."
        },
        {
          "name": "AllocateTo",
          "parameters": [
            "VariableLocation location",
            "int index"
          ],
          "return_type": "void",
          "logic": "Allocates the variable to a specific location and index."
        },
        {
          "name": "MakeParameterNonSimple",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks a parameter as non-simple, changing its mode to kLet and requiring initialization."
        },
        {
          "name": "DefaultInitializationFlag",
          "parameters": [
            "VariableMode mode"
          ],
          "return_type": "InitializationFlag",
          "logic": "Returns the default initialization flag based on the variable mode."
        },
        {
          "name": "RewriteLocationForRepl",
          "parameters": [],
          "return_type": "void",
          "logic": "Rewrites the VariableLocation of repl script scope 'lets' to REPL_GLOBAL. (Declaration only)"
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "ForceHoleInitializationFlag",
      "values": [
        "kHoleInitializationNotForced",
        "kHasHoleCheckUseInDifferentClosureScope",
        "kHasHoleCheckUseInSameClosureScope",
        "kHasHoleCheckUseInUnknownScope"
      ]
    }
  ]
}