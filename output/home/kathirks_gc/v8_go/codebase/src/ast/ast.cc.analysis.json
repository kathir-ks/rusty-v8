{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/ast.cc",
  "imports": [
    "src/ast/ast.h",
    "<cmath>",
    "<vector>",
    "src/ast/prettyprinter.h",
    "src/ast/scopes.h",
    "src/base/hashmap.h",
    "src/base/logging.h",
    "src/base/numbers/double.h",
    "src/builtins/builtins-constructor.h",
    "src/builtins/builtins.h",
    "src/common/assert-scope.h",
    "src/heap/local-factory-inl.h",
    "src/numbers/conversions-inl.h",
    "src/objects/contexts.h",
    "src/objects/elements-kind.h",
    "src/objects/elements.h",
    "src/objects/fixed-array.h",
    "src/objects/literal-objects-inl.h",
    "src/objects/literal-objects.h",
    "src/objects/map.h",
    "src/objects/objects-inl.h",
    "src/objects/property-details.h",
    "src/objects/property.h",
    "src/strings/string-stream.h",
    "src/zone/zone-list-inl.h"
  ],
  "classes": [
    {
      "name": "AstNode",
      "properties": [],
      "methods": [
        {
          "name": "Print",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Prints the AST node using AstPrinter (only in DEBUG mode)."
        },
        {
          "name": "AsIterationStatement",
          "parameters": [],
          "return_type": "IterationStatement*",
          "logic": "Casts the node to an IterationStatement if it is one, otherwise returns nullptr."
        },
        {
          "name": "AsMaterializedLiteral",
          "parameters": [],
          "return_type": "MaterializedLiteral*",
          "logic": "Casts the node to a MaterializedLiteral if it is one, otherwise returns nullptr."
        }
      ]
    },
    {
      "name": "Expression",
      "properties": [],
      "methods": [
        {
          "name": "IsSmiLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a Smi literal."
        },
        {
          "name": "IsNumberLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a Number literal."
        },
        {
          "name": "IsStringLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a String literal."
        },
        {
          "name": "IsConsStringLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a ConsString literal."
        },
        {
          "name": "IsPropertyName",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a property name."
        },
        {
          "name": "IsNullLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a Null literal."
        },
        {
          "name": "IsBooleanLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a Boolean literal."
        },
        {
          "name": "IsTheHoleLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a TheHole literal."
        },
        {
          "name": "IsCompileTimeValue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a literal or a simple materialized literal."
        },
        {
          "name": "IsUndefinedLiteral",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is an Undefined literal."
        },
        {
          "name": "IsLiteralButNotNullOrUndefined",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a literal, but not null or undefined."
        },
        {
          "name": "ToBooleanIsTrue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression evaluates to true in a boolean context."
        },
        {
          "name": "ToBooleanIsFalse",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression evaluates to false in a boolean context."
        },
        {
          "name": "IsPrivateName",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a private name."
        },
        {
          "name": "IsValidReferenceExpression",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a valid reference expression (property or variable proxy)."
        },
        {
          "name": "IsAnonymousFunctionDefinition",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is an anonymous function definition (FunctionLiteral or ClassLiteral)."
        },
        {
          "name": "IsConciseMethodDefinition",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is a concise method definition."
        },
        {
          "name": "IsAccessorFunctionDefinition",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the expression is an accessor function definition."
        }
      ]
    },
    {
      "name": "VariableProxy",
      "properties": [
        "raw_name_",
        "next_unresolved_",
        "bit_field_"
      ],
      "methods": [
        {
          "name": "VariableProxy",
          "parameters": [
            "Variable* var",
            "int start_position"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for VariableProxy, binding to a Variable."
        },
        {
          "name": "VariableProxy",
          "parameters": [
            "const VariableProxy* copy_from"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Copy constructor for VariableProxy."
        },
        {
          "name": "BindTo",
          "parameters": [
            "Variable* var"
          ],
          "return_type": "void",
          "logic": "Binds the VariableProxy to a Variable."
        }
      ]
    },
    {
      "name": "Assignment",
      "properties": [
        "target_",
        "value_"
      ],
      "methods": [
        {
          "name": "Assignment",
          "parameters": [
            "NodeType node_type",
            "Token::Value op",
            "Expression* target",
            "Expression* value",
            "int pos"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for Assignment node."
        }
      ]
    },
    {
      "name": "FunctionLiteral",
      "properties": [
        "raw_inferred_name_",
        "shared_function_info_"
      ],
      "methods": [
        {
          "name": "set_raw_inferred_name",
          "parameters": [
            "AstConsString* raw_inferred_name"
          ],
          "return_type": "void",
          "logic": "Sets the raw inferred name of the function literal."
        },
        {
          "name": "GetInferredName",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Handle<String>",
          "logic": "Gets the inferred name of the function literal, either from the raw inferred name or the shared function info."
        },
        {
          "name": "set_shared_function_info",
          "parameters": [
            "Handle<SharedFunctionInfo> shared_function_info"
          ],
          "return_type": "void",
          "logic": "Sets the shared function info for the function literal."
        },
        {
          "name": "ShouldEagerCompile",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if the function literal should be eagerly compiled based on its scope."
        },
        {
          "name": "SetShouldEagerCompile",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the flag to eagerly compile the function literal."
        },
        {
          "name": "AllowsLazyCompilation",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if lazy compilation is allowed."
        },
        {
          "name": "start_position",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the start position of the scope."
        },
        {
          "name": "end_position",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the end position of the scope."
        },
        {
          "name": "language_mode",
          "parameters": [],
          "return_type": "LanguageMode",
          "logic": "Returns the language mode of the scope."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "FunctionKind",
          "logic": "Returns the function kind of the scope."
        },
        {
          "name": "GetDebugName",
          "parameters": [],
          "return_type": "std::unique_ptr<char[]>",
          "logic": "Gets the debug name of the function, prioritizing the raw name, inferred name, or shared function info name."
        },
        {
          "name": "private_name_lookup_skips_outer_class",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether private name lookup skips outer class."
        },
        {
          "name": "class_scope_has_private_brand",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether class scope has private brand."
        },
        {
          "name": "set_class_scope_has_private_brand",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets whether the class scope has a private brand."
        }
      ]
    },
    {
      "name": "ObjectLiteralProperty",
      "properties": [
        "kind_",
        "emit_store_"
      ],
      "methods": [
        {
          "name": "ObjectLiteralProperty",
          "parameters": [
            "Expression* key",
            "Expression* value",
            "Kind kind",
            "bool is_computed_name"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for ObjectLiteralProperty, taking the property kind as an argument."
        },
        {
          "name": "ObjectLiteralProperty",
          "parameters": [
            "AstValueFactory* ast_value_factory",
            "Expression* key",
            "Expression* value",
            "bool is_computed_name"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for ObjectLiteralProperty. Determines the property kind based on the key and value."
        }
      ]
    },
    {
      "name": "LiteralProperty",
      "properties": [],
      "methods": [
        {
          "name": "NeedsSetFunctionName",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the function name needs to be set."
        }
      ]
    },
    {
      "name": "ClassLiteralProperty",
      "properties": [
        "kind_",
        "is_static_",
        "is_private_",
        "private_or_computed_name_proxy_",
        "auto_accessor_info_"
      ],
      "methods": [
        {
          "name": "ClassLiteralProperty",
          "parameters": [
            "Expression* key",
            "Expression* value",
            "Kind kind",
            "bool is_static",
            "bool is_computed_name",
            "bool is_private"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for ClassLiteralProperty."
        },
        {
          "name": "ClassLiteralProperty",
          "parameters": [
            "Expression* key",
            "Expression* value",
            "AutoAccessorInfo* info",
            "bool is_static",
            "bool is_computed_name",
            "bool is_private"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for ClassLiteralProperty for AUTO_ACCESSOR properties."
        }
      ]
    },
    {
      "name": "ObjectLiteral::Property",
      "properties": [
        "emit_store_"
      ],
      "methods": [
        {
          "name": "IsCompileTimeValue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the object literal property's value is a compile-time value."
        },
        {
          "name": "set_emit_store",
          "parameters": [
            "bool emit_store"
          ],
          "return_type": "void",
          "logic": "Sets whether to emit a store for this property."
        },
        {
          "name": "emit_store",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether to emit a store for this property."
        }
      ]
    },
    {
      "name": "ObjectLiteral",
      "properties": [],
      "methods": [
        {
          "name": "CalculateEmitStore",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Calculates which properties in an object literal need a store emitted for them."
        }
      ]
    },
    {
      "name": "ObjectLiteralBoilerplateBuilder",
      "properties": [],
      "methods": [
        {
          "name": "ComputeFlags",
          "parameters": [
            "bool disable_mementos"
          ],
          "return_type": "int",
          "logic": "Computes the flags for the object literal boilerplate."
        },
        {
          "name": "InitFlagsForPendingNullPrototype",
          "parameters": [
            "int i"
          ],
          "return_type": "void",
          "logic": "Initializes the flags for null prototype after computed property names."
        },
        {
          "name": "EncodeLiteralType",
          "parameters": [],
          "return_type": "int",
          "logic": "Encodes the literal type."
        },
        {
          "name": "InitDepthAndFlags",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the depth and flags for the object literal boilerplate."
        },
        {
          "name": "BuildBoilerplateDescription",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "void",
          "logic": "Builds the description for the object literal boilerplate."
        },
        {
          "name": "IsFastCloningSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether fast cloning is supported for this object literal boilerplate."
        }
      ]
    },
    {
      "name": "LiteralBoilerplateBuilder",
      "properties": [],
      "methods": [
        {
          "name": "GetBoilerplateValue",
          "parameters": [
            "Expression* expression",
            "IsolateT* isolate"
          ],
          "return_type": "DirectHandle<Object>",
          "logic": "Gets the boilerplate value for a given expression. Returns the uninitialized value if not a compile-time constant."
        }
      ]
    },
    {
      "name": "ArrayLiteralBoilerplateBuilder",
      "properties": [],
      "methods": [
        {
          "name": "InitDepthAndFlags",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the depth and flags for the array literal boilerplate."
        },
        {
          "name": "BuildBoilerplateDescription",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "void",
          "logic": "Builds the description for the array literal boilerplate."
        },
        {
          "name": "IsFastCloningSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks whether fast cloning is supported."
        }
      ]
    },
    {
      "name": "MaterializedLiteral",
      "properties": [],
      "methods": [
        {
          "name": "IsSimple",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the materialized literal is simple (either array or object)."
        },
        {
          "name": "InitDepthAndFlags",
          "parameters": [
            "MaterializedLiteral* expr"
          ],
          "return_type": "void",
          "logic": "Initializes the depth and flags of MaterializedLiteral"
        },
        {
          "name": "NeedsInitialAllocationSite",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the MaterializedLiteral requires initial allocation site."
        }
      ]
    },
    {
      "name": "LiteralBoilerplateBuilder",
      "properties": [],
      "methods": [
        {
          "name": "BuildConstants",
          "parameters": [
            "IsolateT* isolate",
            "MaterializedLiteral* expr"
          ],
          "return_type": "void",
          "logic": "Builds the constants associated with a materialized literal (ArrayLiteral, ObjectLiteral, RegExpLiteral)."
        }
      ]
    },
    {
      "name": "GetTemplateObject",
      "properties": [],
      "methods": [
        {
          "name": "GetOrBuildDescription",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "Handle<TemplateObjectDescription>",
          "logic": "Gets or builds the template object description (used for tagged template literals)."
        }
      ]
    },
    {
      "name": "BinaryOperation",
      "properties": [],
      "methods": [
        {
          "name": "IsSmiLiteralOperation",
          "parameters": [
            "Expression** subexpr",
            "Tagged<Smi>* literal"
          ],
          "return_type": "bool",
          "logic": "Checks if it's a commutative operation with a SMI literal (e.g. x + 1)."
        }
      ]
    },
    {
      "name": "CompareOperation",
      "properties": [],
      "methods": [
        {
          "name": "IsLiteralStrictCompareBoolean",
          "parameters": [
            "Expression** expr",
            "Literal** literal"
          ],
          "return_type": "bool",
          "logic": "Check if it's strict equal boolean and save literal and other expression"
        },
        {
          "name": "IsLiteralCompareUndefined",
          "parameters": [
            "Expression** expr"
          ],
          "return_type": "bool",
          "logic": "Checks if it's comparison to undefined"
        },
        {
          "name": "IsLiteralCompareNull",
          "parameters": [
            "Expression** expr"
          ],
          "return_type": "bool",
          "logic": "Checks if it's comparison to null"
        },
        {
          "name": "IsLiteralCompareEqualVariable",
          "parameters": [
            "Expression** expr",
            "Literal** literal"
          ],
          "return_type": "bool",
          "logic": "Checks if it's equality comparison to variable and a string"
        }
      ]
    },
    {
      "name": "CallBase",
      "properties": [],
      "methods": [
        {
          "name": "ComputeSpreadPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes the spread position (kHasFinalSpread or kHasNonFinalSpread) in the arguments list."
        }
      ]
    },
    {
      "name": "Call",
      "properties": [],
      "methods": [
        {
          "name": "GetCallType",
          "parameters": [],
          "return_type": "Call::CallType",
          "logic": "Determines the type of call (GLOBAL_CALL, WITH_CALL, OTHER_CALL, SUPER_CALL, PRIVATE_CALL, PRIVATE_OPTIONAL_CHAIN_CALL, NAMED_SUPER_PROPERTY_CALL, KEYED_SUPER_PROPERTY_CALL, NAMED_PROPERTY_CALL, KEYED_PROPERTY_CALL, NAMED_OPTIONAL_CHAIN_PROPERTY_CALL, KEYED_OPTIONAL_CHAIN_PROPERTY_CALL)."
        }
      ]
    },
    {
      "name": "CaseClause",
      "properties": [
        "label_",
        "statements_"
      ],
      "methods": [
        {
          "name": "CaseClause",
          "parameters": [
            "Zone* zone",
            "Expression* label",
            "const ScopedPtrList<Statement>& statements"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for CaseClause."
        }
      ]
    },
    {
      "name": "Literal",
      "properties": [],
      "methods": [
        {
          "name": "IsPropertyName",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if literal is a property name, which is string, but not an array index."
        },
        {
          "name": "ToUint32",
          "parameters": [
            "uint32_t* value"
          ],
          "return_type": "bool",
          "logic": "Converts the literal to a uint32_t value (if possible, and within range)."
        },
        {
          "name": "AsArrayIndex",
          "parameters": [
            "uint32_t* value"
          ],
          "return_type": "bool",
          "logic": "Checks if the literal can be represented as an array index (uint32)."
        },
        {
          "name": "BuildValue",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "DirectHandle<Object>",
          "logic": "Builds the heap object representation of the literal's value."
        },
        {
          "name": "ToBooleanIsTrue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the literal's value is truthy."
        },
        {
          "name": "Hash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Computes a hash value for the literal."
        },
        {
          "name": "Match",
          "parameters": [
            "void* a",
            "void* b"
          ],
          "return_type": "bool",
          "logic": "Compares two literals for equality.  Used for hashtables."
        }
      ]
    },
    {
      "name": "AstNodeFactory",
      "properties": [],
      "methods": [
        {
          "name": "NewNumberLiteral",
          "parameters": [
            "double number",
            "int pos"
          ],
          "return_type": "Literal*",
          "logic": "Creates a new number literal, using Smi if possible."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsCommutativeOperationWithSmiLiteral",
      "parameters": [
        "Token::Value op"
      ],
      "return_type": "bool",
      "logic": "Checks if the operation is commutative with SMI literal."
    },
    {
      "name": "MatchSmiLiteralOperation",
      "parameters": [
        "Expression* left",
        "Expression* right",
        "Expression** expr",
        "Tagged<Smi>* literal"
      ],
      "return_type": "bool",
      "logic": "Matches x + 1, saving the Smi literal and other expression"
    },
    {
      "name": "IsVoidOfLiteral",
      "parameters": [
        "Expression* expr"
      ],
      "return_type": "bool",
      "logic": "Checks if the provided expression is a void operation with a literal as the expression."
    },
    {
      "name": "MatchLiteralStrictCompareBoolean",
      "parameters": [
        "Expression* left",
        "Token::Value op",
        "Expression* right",
        "Expression** expr",
        "Literal** literal"
      ],
      "return_type": "bool",
      "logic": "Check for literal strict compare boolean and save the literal and other expression"
    },
    {
      "name": "MatchLiteralCompareUndefined",
      "parameters": [
        "Expression* left",
        "Token::Value op",
        "Expression* right",
        "Expression** expr"
      ],
      "return_type": "bool",
      "logic": "Matches void <literal> or undefined against <expression> using an equality operator, storing the expression."
    },
    {
      "name": "MatchLiteralCompareNull",
      "parameters": [
        "Expression* left",
        "Token::Value op",
        "Expression* right",
        "Expression** expr"
      ],
      "return_type": "bool",
      "logic": "Matches null against <expression> using an equality operator, storing the expression."
    },
    {
      "name": "MatchLiteralCompareEqualVariable",
      "parameters": [
        "Expression* left",
        "Token::Value op",
        "Expression* right",
        "Expression** expr",
        "Literal** literal"
      ],
      "return_type": "bool",
      "logic": "Matches  comparison  variable against <string> using an equality operator, storing the variable and literal."
    }
  ]
}