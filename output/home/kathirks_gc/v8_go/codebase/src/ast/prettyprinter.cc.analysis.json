{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/prettyprinter.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/ast/prettyprinter.cc\",\n  \"imports\": [\n    \"src/ast/prettyprinter.h\",\n    \"<stdarg.h>\",\n    \"src/ast/ast-value-factory.h\",\n    \"src/ast/scopes.h\",\n    \"src/base/strings.h\",\n    \"src/base/vector.h\",\n    \"src/common/globals.h\",\n    \"src/objects/objects-inl.h\",\n    \"src/regexp/regexp-flags.h\",\n    \"src/strings/string-builder-inl.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CallPrinter\",\n      \"properties\": [\n        \"isolate_\",\n        \"position_\",\n        \"num_prints_\",\n        \"found_\",\n        \"done_\",\n        \"is_call_error_\",\n        \"is_iterator_error_\",\n        \"is_async_iterator_error_\",\n        \"destructuring_prop_\",\n        \"destructuring_assignment_\",\n        \"is_user_js_\",\n        \"error_in_spread_args_\",\n        \"spread_arg_\",\n        \"function_kind_\",\n        \"builder_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallPrinter\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"bool is_user_js\",\n            \"SpreadErrorInArgsHint error_in_spread_args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the CallPrinter class. Initializes various state variables, including the string builder, flags for error conditions (call, iterator, async iterator), and parameters related to destructuring assignments and user-defined javascript.\"\n        },\n        {\n          \"name\": \"~CallPrinter\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor for the CallPrinter class. Uses default destructor.\"\n        },\n        {\n          \"name\": \"GetErrorHint\",\n          \"parameters\": [],\n          \"return_type\": \"ErrorHint\",\n          \"logic\": \"Returns an error hint based on the current error flags (is_call_error_, is_iterator_error_, is_async_iterator_error_). The hint indicates the type of error encountered during the printing process.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"FunctionLiteral* program\",\n            \"int position\"\n          ],\n          \"return_type\": \"DirectHandle<String>\",\n          \"logic\": \"Prints the AST of the given FunctionLiteral, stopping at the specified position. It uses the Find method to traverse the AST and the builder_ to construct the output string.\"\n        },\n        {\n          \"name\": \"Find\",\n          \"parameters\": [\n            \"AstNode* node\",\n            \"bool print\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Recursively traverses the AST. If the target position (position_) has been found, it either prints the node (if print is true) or prints a placeholder message '(intermediate value)'.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"char c\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a single character to the string builder if the target position has been found and the printing process is not done.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"const char* str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a C-style string to the string builder if the target position has been found and the printing process is not done.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"DirectHandle<String> str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a String to the string builder if the target position has been found and the printing process is not done.\"\n        },\n        {\n          \"name\": \"VisitBlock\",\n          \"parameters\": [\n            \"Block* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Block node and calls FindStatements to process its statements.\"\n        },\n        {\n          \"name\": \"VisitVariableDeclaration\",\n          \"parameters\": [\n            \"VariableDeclaration* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a VariableDeclaration node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitFunctionDeclaration\",\n          \"parameters\": [\n            \"FunctionDeclaration* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a FunctionDeclaration node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitExpressionStatement\",\n          \"parameters\": [\n            \"ExpressionStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an ExpressionStatement node and calls Find on its expression.\"\n        },\n        {\n          \"name\": \"VisitEmptyStatement\",\n          \"parameters\": [\n            \"EmptyStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an EmptyStatement node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitSloppyBlockFunctionStatement\",\n          \"parameters\": [\n            \"SloppyBlockFunctionStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a SloppyBlockFunctionStatement node and calls Find on its statement.\"\n        },\n        {\n          \"name\": \"VisitIfStatement\",\n          \"parameters\": [\n            \"IfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an IfStatement node and calls Find on its condition, then statement, and optionally else statement.\"\n        },\n        {\n          \"name\": \"VisitContinueStatement\",\n          \"parameters\": [\n            \"ContinueStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ContinueStatement node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitBreakStatement\",\n          \"parameters\": [\n            \"BreakStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a BreakStatement node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitReturnStatement\",\n          \"parameters\": [\n            \"ReturnStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ReturnStatement node and calls Find on its expression.\"\n        },\n        {\n          \"name\": \"VisitWithStatement\",\n          \"parameters\": [\n            \"WithStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a WithStatement node and calls Find on its expression and statement.\"\n        },\n        {\n          \"name\": \"VisitSwitchStatement\",\n          \"parameters\": [\n            \"SwitchStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a SwitchStatement node. Calls Find on the tag and each case clause's label (if not default) and statements.\"\n        },\n        {\n          \"name\": \"VisitDoWhileStatement\",\n          \"parameters\": [\n            \"DoWhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a DoWhileStatement node and calls Find on its body and cond.\"\n        },\n        {\n          \"name\": \"VisitWhileStatement\",\n          \"parameters\": [\n            \"WhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a WhileStatement node and calls Find on its cond and body.\"\n        },\n        {\n          \"name\": \"VisitForStatement\",\n          \"parameters\": [\n            \"ForStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ForStatement node and calls Find on its init, cond, next, and body.\"\n        },\n        {\n          \"name\": \"VisitForInStatement\",\n          \"parameters\": [\n            \"ForInStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ForInStatement node and calls Find on its each, subject, and body.\"\n        },\n        {\n          \"name\": \"VisitForOfStatement\",\n          \"parameters\": [\n            \"ForOfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ForOfStatement node. Calls Find on its 'each' and 'subject' nodes. Sets error flags if the 'subject' position matches the target position. Then it calls Find on the 'body'.\"\n        },\n        {\n          \"name\": \"VisitTryCatchStatement\",\n          \"parameters\": [\n            \"TryCatchStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a TryCatchStatement node and calls Find on its try block and catch block.\"\n        },\n        {\n          \"name\": \"VisitTryFinallyStatement\",\n          \"parameters\": [\n            \"TryFinallyStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a TryFinallyStatement node and calls Find on its try block and finally block.\"\n        },\n        {\n          \"name\": \"VisitDebuggerStatement\",\n          \"parameters\": [\n            \"DebuggerStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a DebuggerStatement node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitFunctionLiteral\",\n          \"parameters\": [\n            \"FunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a FunctionLiteral node and calls FindStatements on its body. Preserves and restores the function_kind_ during the traversal.\"\n        },\n        {\n          \"name\": \"VisitClassLiteral\",\n          \"parameters\": [\n            \"ClassLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ClassLiteral node. Calls Find on the 'extends' clause and the values of properties in public and private members.\"\n        },\n        {\n          \"name\": \"VisitInitializeClassMembersStatement\",\n          \"parameters\": [\n            \"InitializeClassMembersStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an InitializeClassMembersStatement node. Iterates through the fields and calls Find on each field's value.\"\n        },\n        {\n          \"name\": \"VisitInitializeClassStaticElementsStatement\",\n          \"parameters\": [\n            \"InitializeClassStaticElementsStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an InitializeClassStaticElementsStatement node. Iterates through the static elements, calling Find on each property's value if it's a property or calling Find on the static block if it's a static block.\"\n        },\n        {\n          \"name\": \"VisitAutoAccessorGetterBody\",\n          \"parameters\": [\n            \"AutoAccessorGetterBody* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an AutoAccessorGetterBody node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitAutoAccessorSetterBody\",\n          \"parameters\": [\n            \"AutoAccessorSetterBody* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an AutoAccessorSetterBody node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitNativeFunctionLiteral\",\n          \"parameters\": [\n            \"NativeFunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a NativeFunctionLiteral node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitConditionalChain\",\n          \"parameters\": [\n            \"ConditionalChain* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ConditionalChain node. Iterates through the conditions and 'then' expressions. Calls Find on each of them, and finally on the 'else' expression.\"\n        },\n        {\n          \"name\": \"VisitConditional\",\n          \"parameters\": [\n            \"Conditional* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Conditional node and calls Find on its condition, then expression, and else expression.\"\n        },\n        {\n          \"name\": \"VisitLiteral\",\n          \"parameters\": [\n            \"Literal* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Literal node and prints its value.\"\n        },\n        {\n          \"name\": \"VisitRegExpLiteral\",\n          \"parameters\": [\n            \"RegExpLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a RegExpLiteral node and prints its pattern and flags.\"\n        },\n        {\n          \"name\": \"VisitObjectLiteral\",\n          \"parameters\": [\n            \"ObjectLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an ObjectLiteral node and calls Find on each property's value.\"\n        },\n        {\n          \"name\": \"VisitArrayLiteral\",\n          \"parameters\": [\n            \"ArrayLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an ArrayLiteral node. Iterates through the values, handling spreads, and calls Find on each value.\"\n        },\n        {\n          \"name\": \"VisitVariableProxy\",\n          \"parameters\": [\n            \"VariableProxy* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a VariableProxy node and prints its name. Prints a generic placeholder for minified code.\"\n        },\n        {\n          \"name\": \"VisitAssignment\",\n          \"parameters\": [\n            \"Assignment* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an Assignment node. Determines if the target is an object literal (for destructuring). Calls Find on the target and value. Handles destructuring assignment special cases.\"\n        },\n        {\n          \"name\": \"VisitCompoundAssignment\",\n          \"parameters\": [\n            \"CompoundAssignment* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a CompoundAssignment node by calling VisitAssignment.\"\n        },\n        {\n          \"name\": \"VisitYield\",\n          \"parameters\": [\n            \"Yield* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Yield node and calls Find on its expression.\"\n        },\n        {\n          \"name\": \"VisitYieldStar\",\n          \"parameters\": [\n            \"YieldStar* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a YieldStar node and calls Find on its expression. Sets error flags if the 'expression' position matches the target position.\"\n        },\n        {\n          \"name\": \"VisitAwait\",\n          \"parameters\": [\n            \"Await* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an Await node and calls Find on its expression.\"\n        },\n        {\n          \"name\": \"VisitThrow\",\n          \"parameters\": [\n            \"Throw* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Throw node and calls Find on its exception.\"\n        },\n        {\n          \"name\": \"VisitOptionalChain\",\n          \"parameters\": [\n            \"OptionalChain* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an OptionalChain node and calls Find on its expression.\"\n        },\n        {\n          \"name\": \"VisitProperty\",\n          \"parameters\": [\n            \"Property* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Property node and prints its object and key (if literal), or its object and key expression otherwise.\"\n        },\n        {\n          \"name\": \"VisitCall\",\n          \"parameters\": [\n            \"Call* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Call node. Determines if this is a call causing an error. Calls Find on expression and arguments.\"\n        },\n        {\n          \"name\": \"VisitCallNew\",\n          \"parameters\": [\n            \"CallNew* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a CallNew node (constructor call). Similar to VisitCall.\"\n        },\n        {\n          \"name\": \"VisitCallRuntime\",\n          \"parameters\": [\n            \"CallRuntime* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a CallRuntime node and calls FindArguments on its arguments.\"\n        },\n        {\n          \"name\": \"VisitSuperCallForwardArgs\",\n          \"parameters\": [\n            \"SuperCallForwardArgs* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a SuperCallForwardArgs node and prints that the arguments are forwarded.\"\n        },\n        {\n          \"name\": \"VisitUnaryOperation\",\n          \"parameters\": [\n            \"UnaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a UnaryOperation node and prints the operator and expression.\"\n        },\n        {\n          \"name\": \"VisitCountOperation\",\n          \"parameters\": [\n            \"CountOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a CountOperation node and prints the operator and expression (prefix or postfix).\"\n        },\n        {\n          \"name\": \"VisitBinaryOperation\",\n          \"parameters\": [\n            \"BinaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a BinaryOperation node and prints the left expression, operator, and right expression.\"\n        },\n        {\n          \"name\": \"VisitNaryOperation\",\n          \"parameters\": [\n            \"NaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a NaryOperation node and prints the first and subsequent expressions with the operator.\"\n        },\n        {\n          \"name\": \"VisitCompareOperation\",\n          \"parameters\": [\n            \"CompareOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a CompareOperation node and prints the left expression, operator, and right expression.\"\n        },\n        {\n          \"name\": \"VisitSpread\",\n          \"parameters\": [\n            \"Spread* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a Spread node and prints the expression within the spread.\"\n        },\n        {\n          \"name\": \"VisitEmptyParentheses\",\n          \"parameters\": [\n            \"EmptyParentheses* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an EmptyParentheses node.  This should be unreachable.\"\n        },\n        {\n          \"name\": \"VisitGetTemplateObject\",\n          \"parameters\": [\n            \"GetTemplateObject* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a GetTemplateObject node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitTemplateLiteral\",\n          \"parameters\": [\n            \"TemplateLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a TemplateLiteral node and calls Find on each substitution.\"\n        },\n        {\n          \"name\": \"VisitImportCallExpression\",\n          \"parameters\": [\n            \"ImportCallExpression* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an ImportCallExpression node and prints `import()` along with its specifier and import options, if present.\"\n        },\n        {\n          \"name\": \"VisitThisExpression\",\n          \"parameters\": [\n            \"ThisExpression* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a ThisExpression node and prints 'this'.\"\n        },\n        {\n          \"name\": \"VisitSuperPropertyReference\",\n          \"parameters\": [\n            \"SuperPropertyReference* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a SuperPropertyReference node. Does nothing.\"\n        },\n        {\n          \"name\": \"VisitSuperCallReference\",\n          \"parameters\": [\n            \"SuperCallReference* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a SuperCallReference node and prints 'super'.\"\n        },\n        {\n          \"name\": \"FindStatements\",\n          \"parameters\": [\n            \"const ZonePtrList<Statement>* statements\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through a list of statements and calls Find on each statement.\"\n        },\n        {\n          \"name\": \"FindArguments\",\n          \"parameters\": [\n            \"const ZonePtrList<Expression>* arguments\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through a list of arguments and calls Find on each argument.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"DirectHandle<Object> value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a literal value (string, null, true, false, undefined, number, symbol), handling quoting as needed.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"const AstRawString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a literal AstRawString value, handling quoting as needed.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AstPrinter\",\n      \"properties\": [\n        \"output_\",\n        \"size_\",\n        \"pos_\",\n        \"indent_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Initializes the printer, visits the node, and returns the output buffer containing the printed representation of the AST.\"\n        },\n        {\n          \"name\": \"Init\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the output buffer for the printer.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"const char* format\",\n            \"...\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a formatted string to the output buffer, reallocating if necessary.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"Literal* literal\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the value of a literal.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"const AstRawString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the value of an AstRawString.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"const AstConsString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the value of an AstConsString by concatenating its raw string components.\"\n        },\n        {\n          \"name\": \"AstPrinter\",\n          \"parameters\": [\n            \"uintptr_t stack_limit\"\n          ],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Constructor.  Initializes the AstPrinter with a given stack limit.\"\n        },\n        {\n          \"name\": \"~AstPrinter\",\n          \"parameters\": [],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Destructor. Deallocates the output buffer.\"\n        },\n        {\n          \"name\": \"PrintIndented\",\n          \"parameters\": [\n            \"const char* txt\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the given text with indentation.\"\n        },\n        {\n          \"name\": \"PrintLiteralIndented\",\n          \"parameters\": [\n            \"const char* info\",\n            \"Literal* literal\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the information string followed by a literal's value, with indentation.\"\n        },\n        {\n          \"name\": \"PrintLiteralIndented\",\n          \"parameters\": [\n            \"const char* info\",\n            \"const AstRawString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the information string followed by an AstRawString, with indentation.\"\n        },\n        {\n          \"name\": \"PrintLiteralIndented\",\n          \"parameters\": [\n            \"const char* info\",\n            \"const AstConsString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the information string followed by an AstConsString, with indentation.\"\n        },\n        {\n          \"name\": \"PrintLiteralWithModeIndented\",\n          \"parameters\": [\n            \"const char* info\",\n            \"Variable* var\",\n            \"const AstRawString* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a variable's information, mode and value with indentation. Also handles the case where var is a nullptr.\"\n        },\n        {\n          \"name\": \"PrintIndentedVisit\",\n          \"parameters\": [\n            \"const char* s\",\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the given string with indentation, then recursively visits the given AST node.\"\n        },\n        {\n          \"name\": \"PrintProgram\",\n          \"parameters\": [\n            \"FunctionLiteral* program\"\n          ],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Prints a program (FunctionLiteral) with indentation and detail.\"\n        },\n        {\n          \"name\": \"PrintOut\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Static method. Creates and initializes an AstPrinter instance to print the given AstNode.\"\n        },\n        {\n          \"name\": \"PrintDeclarations\",\n          \"parameters\": [\n            \"Declaration::List* declarations\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a list of declarations.\"\n        },\n        {\n          \"name\": \"PrintParameters\",\n          \"parameters\": [\n            \"DeclarationScope* scope\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints parameters.\"\n        },\n        {\n          \"name\": \"PrintStatements\",\n          \"parameters\": [\n            \"const ZonePtrList<Statement>* statements\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a list of statements.\"\n        },\n        {\n          \"name\": \"PrintArguments\",\n          \"parameters\": [\n            \"const ZonePtrList<Expression>* arguments\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a list of arguments.\"\n        },\n        {\n          \"name\": \"VisitBlock\",\n          \"parameters\": [\n            \"Block* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a Block node.\"\n        },\n        {\n          \"name\": \"VisitVariableDeclaration\",\n          \"parameters\": [\n            \"VariableDeclaration* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a VariableDeclaration node.\"\n        },\n        {\n          \"name\": \"VisitFunctionDeclaration\",\n          \"parameters\": [\n            \"FunctionDeclaration* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a FunctionDeclaration node.\"\n        },\n        {\n          \"name\": \"VisitExpressionStatement\",\n          \"parameters\": [\n            \"ExpressionStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for an ExpressionStatement node.\"\n        },\n        {\n          \"name\": \"VisitEmptyStatement\",\n          \"parameters\": [\n            \"EmptyStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for an EmptyStatement node.\"\n        },\n        {\n          \"name\": \"VisitSloppyBlockFunctionStatement\",\n          \"parameters\": [\n            \"SloppyBlockFunctionStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a SloppyBlockFunctionStatement node.\"\n        },\n        {\n          \"name\": \"VisitIfStatement\",\n          \"parameters\": [\n            \"IfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for an IfStatement node.\"\n        },\n        {\n          \"name\": \"VisitContinueStatement\",\n          \"parameters\": [\n            \"ContinueStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a ContinueStatement node.\"\n        },\n        {\n          \"name\": \"VisitBreakStatement\",\n          \"parameters\": [\n            \"BreakStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a BreakStatement node.\"\n        },\n        {\n          \"name\": \"VisitReturnStatement\",\n          \"parameters\": [\n            \"ReturnStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a ReturnStatement node.\"\n        },\n        {\n          \"name\": \"VisitWithStatement\",\n          \"parameters\": [\n            \"WithStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a WithStatement node.\"\n        },\n        {\n          \"name\": \"VisitSwitchStatement\",\n          \"parameters\": [\n            \"SwitchStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a SwitchStatement node.\"\n        },\n        {\n          \"name\": \"VisitDoWhileStatement\",\n          \"parameters\": [\n            \"DoWhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a DoWhileStatement node.\"\n        },\n        {\n          \"name\": \"VisitWhileStatement\",\n          \"parameters\": [\n            \"WhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a WhileStatement node.\"\n        },\n        {\n          \"name\": \"VisitForStatement\",\n          \"parameters\": [\n            \"ForStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a ForStatement node.\"\n        },\n        {\n          \"name\": \"VisitForInStatement\",\n          \"parameters\": [\n            \"ForInStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a ForInStatement node.\"\n        },\n        {\n          \"name\": \"VisitForOfStatement\",\n          \"parameters\": [\n            \"ForOfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a ForOfStatement node.\"\n        },\n        {\n          \"name\": \"VisitTryCatchStatement\",\n          \"parameters\": [\n            \"TryCatchStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a TryCatchStatement node.\"\n        },\n        {\n          \"name\": \"VisitTryFinallyStatement\",\n          \"parameters\": [\n            \"TryFinallyStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a TryFinallyStatement node.\"\n        },\n        {\n          \"name\": \"VisitDebuggerStatement\",\n          \"parameters\": [\n            \"DebuggerStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a DebuggerStatement node.\"\n        },\n        {\n          \"name\": \"VisitFunctionLiteral\",\n          \"parameters\": [\n            \"FunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a FunctionLiteral node.\"\n        },\n        {\n          \"name\": \"VisitClassLiteral\",\n          \"parameters\": [\n            \"ClassLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a ClassLiteral node.\"\n        },\n        {\n          \"name\": \"VisitInitializeClassMembersStatement\",\n          \"parameters\": [\n            \"InitializeClassMembersStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a InitializeClassMembersStatement node.\"\n        },\n        {\n          \"name\": \"VisitInitializeClassStaticElementsStatement\",\n          \"parameters\": [\n            \"InitializeClassStaticElementsStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a InitializeClassStaticElementsStatement node.\"\n        },\n        {\n          \"name\": \"VisitAutoAccessorGetterBody\",\n          \"parameters\": [\n            \"AutoAccessorGetterBody* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a AutoAccessorGetterBody node.\"\n        },\n        {\n          \"name\": \"VisitAutoAccessorSetterBody\",\n          \"parameters\": [\n            \"AutoAccessorSetterBody* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for a AutoAccessorSetterBody node.\"\n        },\n        {\n          \"name\": \"PrintClassProperty\",\n          \"parameters\": [\n            \"ClassLiteral::Property* property\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Helper method to print a ClassLiteral Property.\"\n        },\n        {\n          \"name\": \"PrintClassProperties\",\n          \"parameters\": [\n            \"const ZonePtrList<ClassLiteral::Property>* properties\"\n          ],\n          \"return_type\": \"void\",\n"
}