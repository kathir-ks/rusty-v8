{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/ast-value-factory.cc",
  "imports": [
    "src/ast/ast-value-factory.h",
    "src/base/hashmap-entry.h",
    "src/base/logging.h",
    "src/common/globals.h",
    "src/heap/factory-inl.h",
    "src/heap/local-factory-inl.h",
    "src/objects/string-inl.h",
    "src/roots/roots.h",
    "src/strings/string-hasher.h",
    "src/utils/utils-inl.h"
  ],
  "classes": [
    {
      "name": "OneByteStringStream",
      "properties": [
        "literal_bytes_",
        "pos_"
      ],
      "methods": [
        {
          "name": "OneByteStringStream",
          "parameters": [
            "base::Vector<const uint8_t> lb"
          ],
          "return_type": null,
          "logic": "Constructor that initializes the stream with a vector of one-byte characters."
        },
        {
          "name": "HasMore",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are more characters in the stream."
        },
        {
          "name": "GetNext",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Gets the next character from the stream and increments the position."
        }
      ]
    },
    {
      "name": "AstRawString",
      "properties": [
        "has_string_",
        "literal_bytes_",
        "raw_hash_field_"
      ],
      "methods": [
        {
          "name": "Internalize",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "void",
          "logic": "Converts the AstRawString to a String object in the isolate's heap and stores it in the AstRawString."
        },
        {
          "name": "AsArrayIndex",
          "parameters": [
            "uint32_t* index"
          ],
          "return_type": "bool",
          "logic": "Tries to convert the AstRawString to an array index and returns true if successful, otherwise returns false. Stores the index in the provided pointer."
        },
        {
          "name": "IsIntegerIndex",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the AstRawString represents an integer index."
        },
        {
          "name": "IsOneByteEqualTo",
          "parameters": [
            "const char* data"
          ],
          "return_type": "bool",
          "logic": "Checks if the AstRawString (if one-byte) is equal to the given C-style string."
        },
        {
          "name": "FirstCharacter",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Returns the first character of the AstRawString as a uint16_t."
        },
        {
          "name": "Equal",
          "parameters": [
            "const AstRawString* lhs",
            "const AstRawString* rhs"
          ],
          "return_type": "bool",
          "logic": "Compares two AstRawStrings for equality based on their content."
        },
        {
          "name": "Compare",
          "parameters": [
            "const AstRawString* lhs",
            "const AstRawString* rhs"
          ],
          "return_type": "int",
          "logic": "Compares two AstRawStrings lexicographically based on their content."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the AstRawString's content to stdout (only if OBJECT_PRINT is defined)."
        }
      ]
    },
    {
      "name": "AstConsString",
      "properties": [
        "string_",
        "segment_"
      ],
      "methods": [
        {
          "name": "Allocate",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "Handle<String>",
          "logic": "Allocates a ConsString object in the isolate's heap by concatenating the raw strings in the AstConsString."
        },
        {
          "name": "AllocateFlat",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "Handle<String>",
          "logic": "Allocates a flat (non-ConsString) string in the isolate's heap by concatenating the raw strings in the AstConsString."
        },
        {
          "name": "ToRawStrings",
          "parameters": [],
          "return_type": "std::forward_list<const AstRawString*>",
          "logic": "Returns a list of the AstRawString segments which make up the AstConsString."
        }
      ]
    },
    {
      "name": "AstStringConstants",
      "properties": [
        "zone_",
        "string_table_",
        "hash_seed_",
        "empty_string_",
        "single_character_string_"
      ],
      "methods": [
        {
          "name": "AstStringConstants",
          "parameters": [
            "Isolate* isolate",
            "uint64_t hash_seed"
          ],
          "return_type": null,
          "logic": "Constructor. Pre-populates the constant string table with commonly used strings."
        }
      ]
    },
    {
      "name": "AstValueFactory",
      "properties": [
        "string_constants_",
        "strings_",
        "hash_seed_",
        "ast_raw_string_zone_",
        "single_parse_zone_",
        "string_table_"
      ],
      "methods": [
        {
          "name": "GetOneByteStringInternal",
          "parameters": [
            "base::Vector<const uint8_t> literal"
          ],
          "return_type": "const AstRawString*",
          "logic": "Retrieves a one-byte AstRawString from the string table. If not found, creates a new one."
        },
        {
          "name": "GetTwoByteStringInternal",
          "parameters": [
            "base::Vector<const uint16_t> literal"
          ],
          "return_type": "const AstRawString*",
          "logic": "Retrieves a two-byte AstRawString from the string table. If not found, creates a new one."
        },
        {
          "name": "GetString",
          "parameters": [
            "Tagged<String> literal",
            "const SharedStringAccessGuardIfNeeded& access_guard"
          ],
          "return_type": "const AstRawString*",
          "logic": "Retrieves an AstRawString from the string table based on a String object. Chooses between one-byte and two-byte based on string content."
        },
        {
          "name": "NewConsString",
          "parameters": [],
          "return_type": "AstConsString*",
          "logic": "Creates a new empty AstConsString."
        },
        {
          "name": "NewConsString",
          "parameters": [
            "const AstRawString* str"
          ],
          "return_type": "AstConsString*",
          "logic": "Creates a new AstConsString with initial string segment."
        },
        {
          "name": "NewConsString",
          "parameters": [
            "const AstRawString* str1",
            "const AstRawString* str2"
          ],
          "return_type": "AstConsString*",
          "logic": "Creates a new AstConsString with two string segments."
        },
        {
          "name": "Internalize",
          "parameters": [
            "IsolateT* isolate"
          ],
          "return_type": "void",
          "logic": "Internalizes all AstRawStrings created by the factory, converting them to String objects in the isolate's heap."
        },
        {
          "name": "GetString",
          "parameters": [
            "uint32_t raw_hash_field",
            "bool is_one_byte",
            "base::Vector<const uint8_t> literal_bytes"
          ],
          "return_type": "const AstRawString*",
          "logic": "Retrieves an AstRawString from the string table based on its hash, encoding, and literal bytes. If not found, creates a new one."
        }
      ]
    }
  ],
  "functions": []
}