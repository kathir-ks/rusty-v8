{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/zone-allocator.h",
  "imports": [
    "<limits>",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "ZoneAllocator",
      "properties": [
        "zone_"
      ],
      "methods": [
        {
          "name": "ZoneAllocator",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor which should not be called. Exists for Windows DLL linking purposes."
        },
        {
          "name": "ZoneAllocator",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that takes a Zone pointer and initializes the zone_. It also checks if the zone supports compression if the template type is a compressed pointer."
        },
        {
          "name": "ZoneAllocator",
          "parameters": [
            "const ZoneAllocator<U>& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor that takes another ZoneAllocator and initializes the zone_ with the zone of the other allocator. It also checks if the zone supports compression if the template type is a compressed pointer."
        },
        {
          "name": "allocate",
          "parameters": [
            "size_t length"
          ],
          "return_type": "T*",
          "logic": "Allocates an array of type T with the given length using the associated Zone's AllocateArray method."
        },
        {
          "name": "deallocate",
          "parameters": [
            "T* p",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Deallocates an array of type T with the given length using the associated Zone's DeleteArray method."
        },
        {
          "name": "operator==",
          "parameters": [
            "ZoneAllocator const& other"
          ],
          "return_type": "bool",
          "logic": "Equality operator that compares the zone_ pointers of two ZoneAllocator instances."
        },
        {
          "name": "operator!=",
          "parameters": [
            "ZoneAllocator const& other"
          ],
          "return_type": "bool",
          "logic": "Inequality operator that compares the zone_ pointers of two ZoneAllocator instances."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone pointer associated with this allocator."
        }
      ]
    },
    {
      "name": "RecyclingZoneAllocator",
      "properties": [
        "free_list_"
      ],
      "methods": [
        {
          "name": "RecyclingZoneAllocator",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that takes a Zone pointer, initializes the base class ZoneAllocator, and initializes the free_list_ to nullptr."
        },
        {
          "name": "RecyclingZoneAllocator",
          "parameters": [
            "const RecyclingZoneAllocator<U>& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor that takes another RecyclingZoneAllocator, initializes the base class, and initializes the free_list_ to nullptr."
        },
        {
          "name": "allocate",
          "parameters": [
            "size_t n"
          ],
          "return_type": "T*",
          "logic": "Allocates an array of type T with the given size. First checks if there's a free block available in free_list_. If not, it falls back to the base class allocation."
        },
        {
          "name": "deallocate",
          "parameters": [
            "T* p",
            "size_t n"
          ],
          "return_type": "void",
          "logic": "Deallocates an array of type T with the given size. If the size is large enough, it adds the block to the free_list_ for reuse. The newly freed block is added to the front of the free_list if it is larger or equal than previous head, to keep only having to check the head when allocating."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [],
  "typedefs": [
    {
      "name": "ZoneBoolAllocator",
      "type": "ZoneAllocator<bool>"
    },
    {
      "name": "ZoneIntAllocator",
      "type": "ZoneAllocator<int>"
    }
  ]
}