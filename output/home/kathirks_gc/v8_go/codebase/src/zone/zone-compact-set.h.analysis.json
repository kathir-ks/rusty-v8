{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/zone-compact-set.h",
  "imports": [
    "<algorithm>",
    "<initializer_list>",
    "<type_traits>",
    "src/base/compiler-specific.h",
    "src/base/pointer-with-payload.h",
    "src/common/assert-scope.h",
    "src/handles/handles.h",
    "src/zone/zone-containers.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "ZoneCompactSetTraits",
      "properties": [],
      "methods": []
    },
    {
      "name": "ZoneCompactSetTraits<Handle<T>>",
      "properties": [
        "handle_type",
        "data_type"
      ],
      "methods": [
        {
          "name": "HandleToPointer",
          "parameters": [
            "handle_type handle"
          ],
          "return_type": "data_type*",
          "logic": "Converts a Handle to a raw pointer (Address) by accessing the handle's address and reinterpreting it."
        },
        {
          "name": "PointerToHandle",
          "parameters": [
            "data_type* ptr"
          ],
          "return_type": "handle_type",
          "logic": "Converts a raw pointer (Address) to a Handle."
        }
      ]
    },
    {
      "name": "ZoneCompactSet",
      "properties": [
        "data_"
      ],
      "methods": [
        {
          "name": "ZoneCompactSet",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor. Initializes the set as empty."
        },
        {
          "name": "ZoneCompactSet",
          "parameters": [
            "T handle"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the set with a single element (handle)."
        },
        {
          "name": "ZoneCompactSet",
          "parameters": [
            "std::initializer_list<T> handles",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the set with a list of handles from an initializer_list."
        },
        {
          "name": "ZoneCompactSet",
          "parameters": [
            "const ZoneCompactSet& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor. Trivial copy since data_ is Copy-on-Write. V8_NOEXCEPT is used to specify that the copy constructor does not throw exceptions."
        },
        {
          "name": "operator=",
          "parameters": [
            "const ZoneCompactSet& other"
          ],
          "return_type": "ZoneCompactSet&",
          "logic": "Copy assignment operator. Trivial copy since data_ is Copy-on-Write.  V8_NOEXCEPT is used to specify that the copy assignment operator does not throw exceptions."
        },
        {
          "name": "ZoneCompactSet",
          "parameters": [
            "ZoneCompactSet&& other"
          ],
          "return_type": "void",
          "logic": "Move constructor. Trivial copy since data_ is Copy-on-Write. V8_NOEXCEPT is used to specify that the move constructor does not throw exceptions."
        },
        {
          "name": "operator=",
          "parameters": [
            "ZoneCompactSet&& other"
          ],
          "return_type": "ZoneCompactSet&",
          "logic": "Move assignment operator. Trivial copy since data_ is Copy-on-Write. V8_NOEXCEPT is used to specify that the move assignment operator does not throw exceptions."
        },
        {
          "name": "ZoneCompactSet",
          "parameters": [
            "It first",
            "It last",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the set with a range of handles. If the range is empty, the set is empty. If the range has one element, the set contains only that element. If the range has two or more elements, the set is initialized as a sorted list."
        },
        {
          "name": "Clone",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "ZoneCompactSet<T>",
          "logic": "Creates a new copy of the set in the provided zone."
        },
        {
          "name": "is_empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the set is empty."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of elements in the set."
        },
        {
          "name": "at",
          "parameters": [
            "size_t i"
          ],
          "return_type": "T",
          "logic": "Returns the element at the specified index."
        },
        {
          "name": "operator[]",
          "parameters": [
            "size_t i"
          ],
          "return_type": "T",
          "logic": "Returns the element at the specified index. (Same as at())."
        },
        {
          "name": "insert",
          "parameters": [
            "T handle",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Inserts a handle into the set. If the set is empty, the set becomes a singleton. If the set is a singleton, it's converted into a list of two elements. If the set is a list, it's copied, and the new element is inserted in sorted order."
        },
        {
          "name": "Union",
          "parameters": [
            "ZoneCompactSet<T> const& other",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds all elements of another set into this set."
        },
        {
          "name": "contains",
          "parameters": [
            "ZoneCompactSet<T> const& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this set contains all elements of the other set."
        },
        {
          "name": "contains",
          "parameters": [
            "T handle"
          ],
          "return_type": "bool",
          "logic": "Checks if the set contains the given handle."
        },
        {
          "name": "remove",
          "parameters": [
            "T handle",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Removes a handle from the set. If the set is a singleton and contains the handle, the set becomes empty. If the set is a list, it's copied, and the element is removed."
        },
        {
          "name": "clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes all elements from the set, making it empty."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns an iterator to the beginning of the set."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns an iterator to the end of the set."
        }
      ]
    },
    {
      "name": "ZoneCompactSet<T>::const_iterator",
      "properties": [
        "set_",
        "current_"
      ],
      "methods": [
        {
          "name": "const_iterator",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "const_iterator&",
          "logic": "Copy assignment operator."
        },
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "reference",
          "logic": "Dereference operator. Returns the element at the current position."
        },
        {
          "name": "operator==",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "bool",
          "logic": "Equality operator. Checks if two iterators point to the same element in the same set."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "bool",
          "logic": "Inequality operator."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "const_iterator&",
          "logic": "Prefix increment operator. Moves the iterator to the next element."
        },
        {
          "name": "operator++",
          "parameters": [
            "int"
          ],
          "return_type": "const_iterator",
          "logic": "Postfix increment operator."
        },
        {
          "name": "operator-",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "difference_type",
          "logic": "Returns the difference between two iterators."
        },
        {
          "name": "const_iterator",
          "parameters": [
            "const ZoneCompactSet<T>* set",
            "size_t current"
          ],
          "return_type": "void",
          "logic": "Constructor."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator==",
      "parameters": [
        "ZoneCompactSet<T> const& lhs",
        "ZoneCompactSet<T> const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two ZoneCompactSets are equal."
    },
    {
      "name": "operator!=",
      "parameters": [
        "ZoneCompactSet<T> const& lhs",
        "ZoneCompactSet<T> const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two ZoneCompactSets are not equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "ZoneCompactSet<T> const& set"
      ],
      "return_type": "uintptr_t",
      "logic": "Calculates a hash value for a ZoneCompactSet."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "ZoneCompactSet<T> set"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator to print the contents of a ZoneCompactSet."
    }
  ]
}