{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ic/stub-cache.cc",
  "imports": [
    "src/ic/stub-cache.h",
    "src/ast/ast.h",
    "src/base/bits.h",
    "src/heap/heap-inl.h",
    "src/ic/ic-inl.h",
    "src/logging/counters.h",
    "src/objects/tagged-value-inl.h"
  ],
  "classes": [
    {
      "name": "StubCache",
      "properties": [
        "isolate_"
      ],
      "methods": [
        {
          "name": "StubCache",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the StubCache class.  Initializes the isolate_ member and asserts that a nullptr isn't considered a handler."
        },
        {
          "name": "Initialize",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the stub cache, clearing both the primary and secondary tables.  Checks that the table sizes are powers of 2."
        },
        {
          "name": "PrimaryOffset",
          "parameters": [
            "Tagged<Name> name",
            "Tagged<Map> map"
          ],
          "return_type": "int",
          "logic": "Calculates the primary table offset based on the name and map. Uses the raw hash of the name and combines it with the map pointer to generate a hash key."
        },
        {
          "name": "SecondaryOffset",
          "parameters": [
            "Tagged<Name> name",
            "Tagged<Map> old_map"
          ],
          "return_type": "int",
          "logic": "Calculates the secondary table offset based on the name and old map. Uses the name and map pointer to generate a hash key different from the primary offset."
        },
        {
          "name": "PrimaryOffsetForTesting",
          "parameters": [
            "Tagged<Name> name",
            "Tagged<Map> map"
          ],
          "return_type": "int",
          "logic": "Wrapper around PrimaryOffset for testing purposes."
        },
        {
          "name": "SecondaryOffsetForTesting",
          "parameters": [
            "Tagged<Name> name",
            "Tagged<Map> map"
          ],
          "return_type": "int",
          "logic": "Wrapper around SecondaryOffset for testing purposes."
        },
        {
          "name": "Set",
          "parameters": [
            "Tagged<Name> name",
            "Tagged<Map> map",
            "Tagged<MaybeObject> handler"
          ],
          "return_type": "void",
          "logic": "Sets a handler in the stub cache for a given name and map.  If the primary entry is occupied, it moves that entry to the secondary cache. Then updates the primary cache."
        },
        {
          "name": "Get",
          "parameters": [
            "Tagged<Name> name",
            "Tagged<Map> map"
          ],
          "return_type": "Tagged<MaybeObject>",
          "logic": "Retrieves a handler from the stub cache for a given name and map. Checks the primary and secondary caches. Returns nullptr if not found."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the stub cache by setting all entries in both the primary and secondary tables to empty values."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CommonStubCacheChecks",
      "parameters": [
        "StubCache* stub_cache",
        "Tagged<Name> name",
        "Tagged<Map> map",
        "Tagged<MaybeObject> handler"
      ],
      "return_type": "bool",
      "logic": "Performs debug checks for the stub cache entries. Checks that name and handler do not move on scavenge, and that name is a unique name."
    }
  ]
}