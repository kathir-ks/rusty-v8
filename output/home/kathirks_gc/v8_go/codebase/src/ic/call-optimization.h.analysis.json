{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ic/call-optimization.h",
  "imports": [
    "<optional>",
    "src/api/api-arguments.h",
    "src/objects/objects.h"
  ],
  "classes": [
    {
      "name": "CallOptimization",
      "properties": [
        "constant_function_",
        "expected_receiver_type_",
        "api_call_info_",
        "is_simple_api_call_",
        "accept_any_receiver_"
      ],
      "methods": [
        {
          "name": "CallOptimization",
          "parameters": [
            "IsolateT* isolate",
            "Handle<Object> function"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the CallOptimization class.  Initializes the optimization information based on the given function."
        },
        {
          "name": "GetAccessorContext",
          "parameters": [
            "Tagged<Map> holder_map"
          ],
          "return_type": "std::optional<Tagged<NativeContext>>",
          "logic": "Gets the accessor context for a given holder map. Returns an empty optional if the holder is a remote object or has a null constructor."
        },
        {
          "name": "IsCrossContextLazyAccessorPair",
          "parameters": [
            "Tagged<NativeContext> native_context",
            "Tagged<Map> holder_map"
          ],
          "return_type": "bool",
          "logic": "Checks if the accessor context for a given holder doesn't match the given native context, or if the holder is a remote object."
        },
        {
          "name": "is_constant_call",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is a constant call, meaning it can be inlined or optimized based on a constant function."
        },
        {
          "name": "accept_any_receiver",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call can accept any receiver object."
        },
        {
          "name": "requires_signature_check",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call requires a signature check to ensure the receiver type is correct."
        },
        {
          "name": "constant_function",
          "parameters": [],
          "return_type": "DirectHandle<JSFunction>",
          "logic": "Returns the constant function if the call is a constant call.  It asserts that it's actually a constant call using DCHECK."
        },
        {
          "name": "is_simple_api_call",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is a simple API call (i.e. a call to a function defined through the V8 API)."
        },
        {
          "name": "expected_receiver_type",
          "parameters": [],
          "return_type": "DirectHandle<FunctionTemplateInfo>",
          "logic": "Returns the expected receiver type for a simple API call. It asserts that it's actually a simple API call using DCHECK."
        },
        {
          "name": "api_call_info",
          "parameters": [],
          "return_type": "DirectHandle<FunctionTemplateInfo>",
          "logic": "Returns the API call information for a simple API call. It asserts that it's actually a simple API call using DCHECK."
        },
        {
          "name": "LookupHolderOfExpectedType",
          "parameters": [
            "IsolateT* isolate",
            "DirectHandle<Map> receiver_map",
            "HolderLookup* holder_lookup"
          ],
          "return_type": "Handle<JSObject>",
          "logic": "Looks up the holder object of the expected type for a given receiver map."
        },
        {
          "name": "IsCompatibleReceiverMap",
          "parameters": [
            "DirectHandle<JSObject> api_holder",
            "Handle<JSObject> holder",
            "HolderLookup"
          ],
          "return_type": "bool",
          "logic": "Checks if the API holder is compatible with the provided holder."
        },
        {
          "name": "Initialize",
          "parameters": [
            "IsolateT* isolate",
            "Handle<JSFunction> function"
          ],
          "return_type": "void",
          "logic": "Initializes the CallOptimization object based on a JSFunction."
        },
        {
          "name": "Initialize",
          "parameters": [
            "IsolateT* isolate",
            "Handle<FunctionTemplateInfo> function_template_info"
          ],
          "return_type": "void",
          "logic": "Initializes the CallOptimization object based on a FunctionTemplateInfo."
        },
        {
          "name": "AnalyzePossibleApiFunction",
          "parameters": [
            "IsolateT* isolate",
            "DirectHandle<JSFunction> function"
          ],
          "return_type": "void",
          "logic": "Analyzes whether the given function can be called using the fast API call built-in."
        }
      ]
    }
  ],
  "functions": []
}