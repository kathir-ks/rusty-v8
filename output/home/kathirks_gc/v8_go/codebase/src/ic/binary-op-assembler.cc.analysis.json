{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ic/binary-op-assembler.cc",
  "imports": [
    "src/ic/binary-op-assembler.h",
    "src/common/globals.h",
    "src/execution/protectors.h",
    "src/flags/flags.h",
    "src/objects/property-cell.h",
    "src/codegen/define-code-stub-assembler-macros.inc",
    "src/codegen/undef-code-stub-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "BinaryOpAssembler",
      "properties": [],
      "methods": [
        {
          "name": "Generate_AddWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> lhs",
            "TNode<Object> rhs",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the addition operation with feedback. Handles Smi, HeapNumber, string concatenation and BigInt addition. Updates type feedback based on the operands' types and the operation's result. Includes fast paths for Smi addition and floating-point addition."
        },
        {
          "name": "Generate_BinaryOperationWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> lhs",
            "TNode<Object> rhs",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "const SmiOperation& smiOperation",
            "const FloatOperation& floatOperation",
            "Operation op",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a generic binary operation with feedback. Dispatches to specialized Smi and Float operations based on the operand types. Handles number and BigInt operations, including support for BigInt64 operations. Updates type feedback according to operand types and the operation."
        },
        {
          "name": "Generate_SubtractWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> lhs",
            "TNode<Object> rhs",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the subtraction operation with feedback. Defines Smi and Float operation lambdas and calls `Generate_BinaryOperationWithFeedback`."
        },
        {
          "name": "Generate_MultiplyWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> lhs",
            "TNode<Object> rhs",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the multiplication operation with feedback. Defines Smi and Float operation lambdas and calls `Generate_BinaryOperationWithFeedback`."
        },
        {
          "name": "Generate_DivideWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> dividend",
            "TNode<Object> divisor",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the division operation with feedback. Defines Smi and Float operation lambdas and calls `Generate_BinaryOperationWithFeedback`."
        },
        {
          "name": "Generate_ModulusWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> dividend",
            "TNode<Object> divisor",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the modulus operation with feedback. Defines Smi and Float operation lambdas and calls `Generate_BinaryOperationWithFeedback`."
        },
        {
          "name": "Generate_ExponentiateWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> base",
            "TNode<Object> exponent",
            "TNode<UintPtrT> slot_id",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the exponentiation operation with feedback. Defines Smi and Float operation lambdas and calls `Generate_BinaryOperationWithFeedback`."
        },
        {
          "name": "Generate_BitwiseBinaryOpWithOptionalFeedback",
          "parameters": [
            "Operation bitwise_op",
            "TNode<Object> left",
            "TNode<Object> right",
            "const LazyNode<Context>& context",
            "TNode<UintPtrT>* slot",
            "const LazyNode<HeapObject>* maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for bitwise binary operations with feedback. Handles Smi, Number and BigInt operands. Performs bitwise AND, OR, XOR operations. Updates feedback based on the operand types and operation result. Includes error handling for mixed BigInt and Number types."
        },
        {
          "name": "Generate_BitwiseBinaryOpWithSmiOperandAndOptionalFeedback",
          "parameters": [
            "Operation bitwise_op",
            "TNode<Object> left",
            "TNode<Object> right",
            "const LazyNode<Context>& context",
            "TNode<UintPtrT>* slot",
            "const LazyNode<HeapObject>* maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a bitwise binary operation where the right-hand side is known to be a Smi. Handles Smi and Number types. Checks for BigInt type errors."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsBigInt64OpSupported",
      "parameters": [
        "BinaryOpAssembler* assembler",
        "Operation op"
      ],
      "return_type": "bool",
      "logic": "Determines if a BigInt64 operation is supported based on the architecture and the operation type. Returns true if the architecture is 64-bit and the operation is not exponentiation or a shift operation."
    }
  ]
}