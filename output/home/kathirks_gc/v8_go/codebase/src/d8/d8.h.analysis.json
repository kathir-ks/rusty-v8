{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/d8/d8.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/d8/d8.h\",\n  \"imports\": [\n    \"<iterator>\",\n    \"<map>\",\n    \"<memory>\",\n    \"<optional>\",\n    \"<queue>\",\n    \"<string>\",\n    \"<unordered_map>\",\n    \"<unordered_set>\",\n    \"<vector>\",\n    \"include/v8-array-buffer.h\",\n    \"include/v8-isolate.h\",\n    \"include/v8-script.h\",\n    \"include/v8-value-serializer.h\",\n    \"src/base/once.h\",\n    \"src/base/platform/time.h\",\n    \"src/base/platform/wrappers.h\",\n    \"src/d8/async-hooks-wrapper.h\",\n    \"src/handles/global-handles.h\",\n    \"src/heap/parked-scope.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Counter\",\n      \"properties\": [\n        \"count_\",\n        \"sample_total_\",\n        \"is_histogram_\",\n        \"name_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Bind\",\n          \"parameters\": [\n            \"const char* name\",\n            \"bool histogram\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Binds the counter to a given name and specifies if it's a histogram.\"\n        },\n        {\n          \"name\": \"ptr\",\n          \"parameters\": [],\n          \"return_type\": \"int*\",\n          \"logic\": \"Returns a pointer to the atomic count_ variable (casted to an int*).\"\n        },\n        {\n          \"name\": \"count\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the current value of the counter.\"\n        },\n        {\n          \"name\": \"sample_total\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the total sum of samples added to the counter (if it's a histogram).\"\n        },\n        {\n          \"name\": \"is_histogram\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether this counter is used as a histogram.\"\n        },\n        {\n          \"name\": \"AddSample\",\n          \"parameters\": [\n            \"int32_t sample\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a sample to the counter's total (used for histograms).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CounterCollection\",\n      \"properties\": [\n        \"magic_number_\",\n        \"max_counters_\",\n        \"max_name_size_\",\n        \"counters_in_use_\",\n        \"counters_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CounterCollection\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for the CounterCollection. Initializes member variables.\"\n        },\n        {\n          \"name\": \"GetNextCounter\",\n          \"parameters\": [],\n          \"return_type\": \"Counter*\",\n          \"logic\": \"Returns the next available counter in the collection.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SourceGroup\",\n      \"properties\": [\n        \"next_semaphore_\",\n        \"done_semaphore_\",\n        \"thread_\",\n        \"argv_\",\n        \"begin_offset_\",\n        \"end_offset_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SourceGroup\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for SourceGroup. Initializes all properties to default values.\"\n        },\n        {\n          \"name\": \"~SourceGroup\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor for SourceGroup.\"\n        },\n        {\n          \"name\": \"Begin\",\n          \"parameters\": [\n            \"char** argv\",\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the command-line arguments and starting offset for execution.\"\n        },\n        {\n          \"name\": \"End\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the ending offset for execution.\"\n        },\n        {\n          \"name\": \"Execute\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Executes the source code within the specified isolate. Returns true on success, false on uncaught exception.\"\n        },\n        {\n          \"name\": \"StartExecuteInThread\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts the execution of the SourceGroup in a separate thread.\"\n        },\n        {\n          \"name\": \"WaitForThread\",\n          \"parameters\": [\n            \"const i::ParkedScope& parked\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Waits for the thread to finish execution.\"\n        },\n        {\n          \"name\": \"JoinThread\",\n          \"parameters\": [\n            \"const i::ParkedScope& parked\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Joins the worker thread.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SourceGroup::IsolateThread\",\n      \"properties\": [\n        \"group_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IsolateThread\",\n          \"parameters\": [\n            \"SourceGroup* group\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for IsolateThread. Takes a SourceGroup pointer as input.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Overrides the Run method of base::Thread. Executes the code within the assigned SourceGroup in the thread.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SerializationData\",\n      \"properties\": [\n        \"data_\",\n        \"size_\",\n        \"backing_stores_\",\n        \"sab_backing_stores_\",\n        \"compiled_wasm_modules_\",\n        \"shared_value_conveyor_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SerializationData\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Default constructor for SerializationData.\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns a pointer to the underlying data buffer.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the size of the serialized data.\"\n        },\n        {\n          \"name\": \"backing_stores\",\n          \"parameters\": [],\n          \"return_type\": \"const std::vector<std::shared_ptr<v8::BackingStore>>&\",\n          \"logic\": \"Returns a const reference to the vector of backing stores.\"\n        },\n        {\n          \"name\": \"sab_backing_stores\",\n          \"parameters\": [],\n          \"return_type\": \"const std::vector<std::shared_ptr<v8::BackingStore>>&\",\n          \"logic\": \"Returns a const reference to the vector of shared array buffer backing stores.\"\n        },\n        {\n          \"name\": \"compiled_wasm_modules\",\n          \"parameters\": [],\n          \"return_type\": \"const std::vector<CompiledWasmModule>&\",\n          \"logic\": \"Returns a const reference to the vector of compiled wasm modules.\"\n        },\n        {\n          \"name\": \"shared_value_conveyor\",\n          \"parameters\": [],\n          \"return_type\": \"const std::optional<v8::SharedValueConveyor>&\",\n          \"logic\": \"Returns a const reference to the optional shared value conveyor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SerializationDataQueue\",\n      \"properties\": [\n        \"mutex_\",\n        \"data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Enqueue\",\n          \"parameters\": [\n            \"std::unique_ptr<SerializationData> data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Enqueues a SerializationData object into the queue.\"\n        },\n        {\n          \"name\": \"Dequeue\",\n          \"parameters\": [\n            \"std::unique_ptr<SerializationData>* data\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Dequeues a SerializationData object from the queue. Returns true if successful, false otherwise.\"\n        },\n        {\n          \"name\": \"IsEmpty\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the queue is empty.\"\n        },\n        {\n          \"name\": \"Clear\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the queue, releasing all contained SerializationData objects.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Worker\",\n      \"properties\": [\n        \"out_semaphore_\",\n        \"out_queue_\",\n        \"thread_\",\n        \"script_\",\n        \"flush_denormals_\",\n        \"state_\",\n        \"is_joined_\",\n        \"started_semaphore_\",\n        \"task_runner_\",\n        \"task_manager_\",\n        \"worker_mutex_\",\n        \"isolate_\",\n        \"parent_isolate_\",\n        \"context_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Worker\",\n          \"parameters\": [\n            \"Isolate* parent_isolate\",\n            \"const char* script\",\n            \"bool flush_denormals\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for the Worker class. Initializes the worker with the given script and settings.\"\n        },\n        {\n          \"name\": \"~Worker\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor for Worker.\"\n        },\n        {\n          \"name\": \"PostMessage\",\n          \"parameters\": [\n            \"std::unique_ptr<SerializationData> data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Posts a message to the worker's message queue.\"\n        },\n        {\n          \"name\": \"GetMessage\",\n          \"parameters\": [\n            \"Isolate* requester\"\n          ],\n          \"return_type\": \"std::unique_ptr<SerializationData>\",\n          \"logic\": \"Retrieves a message from the worker's outgoing queue. Blocks until a message is available.\"\n        },\n        {\n          \"name\": \"TryGetMessage\",\n          \"parameters\": [],\n          \"return_type\": \"std::unique_ptr<SerializationData>\",\n          \"logic\": \"Retrieves a message from the worker's outgoing queue. Does not block. Returns nullptr if no message is available.\"\n        },\n        {\n          \"name\": \"Terminate\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Terminates the worker's event loop.\"\n        },\n        {\n          \"name\": \"TerminateAndWaitForThread\",\n          \"parameters\": [\n            \"const i::ParkedScope& parked\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Terminates the worker thread and waits for it to finish.\"\n        },\n        {\n          \"name\": \"StartWorkerThread\",\n          \"parameters\": [\n            \"Isolate* requester\",\n            \"std::shared_ptr<Worker> worker\",\n            \"base::Thread::Priority priority\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Starts a worker thread.\"\n        },\n        {\n          \"name\": \"EnterTerminatedState\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Enters State::kTerminated for the Worker and resets the task runner.\"\n        },\n        {\n          \"name\": \"IsTerminated\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the worker is terminated.\"\n        },\n        {\n          \"name\": \"GetCurrentWorker\",\n          \"parameters\": [],\n          \"return_type\": \"Worker*\",\n          \"logic\": \"Returns the Worker instance for the current thread.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Worker::WorkerThread\",\n      \"properties\": [\n        \"worker_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WorkerThread\",\n          \"parameters\": [\n            \"std::shared_ptr<Worker> worker\",\n            \"base::Thread::Priority priority\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for the WorkerThread class.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Overrides the Run method of base::Thread. Executes the code within the assigned Worker in the thread.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PerIsolateData\",\n      \"properties\": [\n        \"isolate_\",\n        \"realm_count_\",\n        \"realm_current_\",\n        \"realm_switch_\",\n        \"realms_\",\n        \"realm_shared_\",\n        \"ignore_unhandled_promises_\",\n        \"unhandled_promises_\",\n        \"async_hooks_wrapper_\",\n        \"import_data_\",\n        \"test_api_object_ctor_\",\n        \"dom_node_ctor_\",\n        \"registered_workers_\",\n        \"worker_message_callbacks_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PerIsolateData\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for PerIsolateData.  Initializes data associated with a specific isolate.\"\n        },\n        {\n          \"name\": \"~PerIsolateData\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor for PerIsolateData.\"\n        },\n        {\n          \"name\": \"Get\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"PerIsolateData*\",\n          \"logic\": \"Returns the PerIsolateData associated with the given isolate.\"\n        },\n        {\n          \"name\": \"GetAsyncHooks\",\n          \"parameters\": [],\n          \"return_type\": \"AsyncHooks*\",\n          \"logic\": \"Returns the AsyncHooks instance.\"\n        },\n        {\n          \"name\": \"RemoveUnhandledPromise\",\n          \"parameters\": [\n            \"Local<Promise> promise\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes a promise from the list of unhandled promises.\"\n        },\n        {\n          \"name\": \"AddUnhandledPromise\",\n          \"parameters\": [\n            \"Local<Promise> promise\",\n            \"Local<Message> message\",\n            \"Local<Value> exception\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a promise to the list of unhandled promises.\"\n        },\n        {\n          \"name\": \"HandleUnhandledPromiseRejections\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Handles unhandled promise rejections.\"\n        },\n        {\n          \"name\": \"AddDynamicImportData\",\n          \"parameters\": [\n            \"DynamicImportData*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds dynamic import data to a set for later deletion.\"\n        },\n        {\n          \"name\": \"DeleteDynamicImportData\",\n          \"parameters\": [\n            \"DynamicImportData*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes dynamic import data from the set.\"\n        },\n        {\n          \"name\": \"GetTestApiObjectCtor\",\n          \"parameters\": [],\n          \"return_type\": \"Local<FunctionTemplate> const\",\n          \"logic\": \"Gets the test API object constructor.\"\n        },\n        {\n          \"name\": \"SetTestApiObjectCtor\",\n          \"parameters\": [\n            \"Local<FunctionTemplate> ctor\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the test API object constructor.\"\n        },\n        {\n          \"name\": \"GetDomNodeCtor\",\n          \"parameters\": [],\n          \"return_type\": \"Local<FunctionTemplate> const\",\n          \"logic\": \"Gets the DOM node constructor.\"\n        },\n        {\n          \"name\": \"SetDomNodeCtor\",\n          \"parameters\": [\n            \"Local<FunctionTemplate> ctor\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the DOM node constructor.\"\n        },\n        {\n          \"name\": \"HasRunningSubscribedWorkers\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if there are running subscribed workers.\"\n        },\n        {\n          \"name\": \"RegisterWorker\",\n          \"parameters\": [\n            \"std::shared_ptr<Worker> worker\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers a worker with the PerIsolateData.\"\n        },\n        {\n          \"name\": \"SubscribeWorkerOnMessage\",\n          \"parameters\": [\n            \"const std::shared_ptr<Worker>& worker\",\n            \"Local<Context> context\",\n            \"Local<Function> callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Subscribes a worker to receive messages.\"\n        },\n        {\n          \"name\": \"GetWorkerOnMessage\",\n          \"parameters\": [\n            \"const std::shared_ptr<Worker>& worker\"\n          ],\n          \"return_type\": \"std::pair<Local<Context>, Local<Function>>\",\n          \"logic\": \"Gets a worker's on message callback.\"\n        },\n        {\n          \"name\": \"UnregisterWorker\",\n          \"parameters\": [\n            \"const std::shared_ptr<Worker>& worker\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Unregisters a worker.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PerIsolateData::RealmScope\",\n      \"properties\": [\n        \"data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"RealmScope\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const Global<Context>& context\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for RealmScope. Sets the current context to a new realm.\"\n        },\n        {\n          \"name\": \"~RealmScope\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor for RealmScope. Restores the previous context.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PerIsolateData::ExplicitRealmScope\",\n      \"properties\": [\n        \"data_\",\n        \"realm_\",\n        \"index_\",\n        \"previous_index_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ExplicitRealmScope\",\n          \"parameters\": [\n            \"PerIsolateData* data\",\n            \"int index\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for ExplicitRealmScope. Enters a specific realm given its index.\"\n        },\n        {\n          \"name\": \"~ExplicitRealmScope\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor for ExplicitRealmScope. Exits the specific realm and restores previous realm index.\"\n        },\n        {\n          \"name\": \"context\",\n          \"parameters\": [],\n          \"return_type\": \"Local<Context> const\",\n          \"logic\": \"Returns a reference to current realm.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ShellOptions\",\n      \"properties\": [\n        \"d8_path\",\n        \"fuzzilli_coverage_statistics\",\n        \"fuzzilli_enable_builtins_coverage\",\n        \"send_idle_notification\",\n        \"invoke_weak_callbacks\",\n        \"omit_quit\",\n        \"wait_for_background_tasks\",\n        \"simulate_errors\",\n        \"stress_runs\",\n        \"interactive_shell\",\n        \"test_shell\",\n        \"expected_to_throw\",\n        \"no_fail\",\n        \"dump_counters\",\n        \"dump_counters_nvp\",\n        \"dump_system_memory_stats\",\n        \"ignore_unhandled_promises\",\n        \"mock_arraybuffer_allocator\",\n        \"mock_arraybuffer_allocator_limit\",\n        \"multi_mapped_mock_allocator\",\n        \"enable_inspector\",\n        \"num_isolates\",\n        \"compile_options\",\n        \"code_cache_options\",\n        \"streaming_compile\",\n        \"isolate_sources\",\n        \"icu_data_file\",\n        \"icu_locale\",\n        \"snapshot_blob\",\n        \"trace_enabled\",\n        \"trace_path\",\n        \"trace_config\",\n        \"lcov_file\",\n        \"scope_linux_perf_to_mark_measure\",\n        \"perf_ctl_fd\",\n        \"perf_ack_fd\",\n        \"disable_in_process_stack_traces\",\n        \"read_from_tcp_port\",\n        \"enable_os_system\",\n        \"quiet_load\",\n        \"apply_priority\",\n        \"thread_pool_size\",\n        \"stress_delay_tasks\",\n        \"arguments\",\n        \"include_arguments\",\n        \"cpu_profiler\",\n        \"cpu_profiler_print\",\n        \"fuzzy_module_file_extensions\",\n        \"enable_system_instrumentation\",\n        \"enable_etw_stack_walking\",\n        \"stress_deserialize\",\n        \"compile_only\",\n        \"repeat_compile\",\n        \"wasm_trap_handler\",\n        \"expose_fast_api\",\n        \"flush_denormals\",\n        \"max_serializer_memory\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"~ShellOptions\",\n          \"parameters\": [],\n          \"return_type\": \"\",\n          \"logic\": \"Destructor for ShellOptions. Releases memory allocated for isolate_sources.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Shell\",\n      \"properties\": [\n        \"options\",\n        \"array_buffer_allocator\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ExecuteString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<String> source\",\n            \"Local<String> name\",\n            \"ReportExceptions report_exceptions\",\n            \"Global<Value>* out_result\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Executes the given string within the V8 isolate.\"\n        },\n        {\n          \"name\": \"ExecuteModule\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* file_name\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Executes the module in the given file.\"\n        },\n        {\n          \"name\": \"LoadJSON\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* file_name\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Loads the given JSON file into V8.\"\n        },\n        {\n          \"name\": \"ReportException\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<Message> message\",\n            \"Local<Value> exception\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reports a JavaScript exception to the console.\"\n        },\n        {\n          \"name\": \"ReportException\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const TryCatch& try_catch\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reports an exception caught by a TryCatch block.\"\n        },\n        {\n          \"name\": \"ReadFile\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* name\",\n            \"bool should_throw\"\n          ],\n          \"return_type\": \"MaybeLocal<String>\",\n          \"logic\": \"Reads the contents of a file into a string.\"\n        },\n        {\n          \"name\": \"ReadFileData\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* name\",\n            \"bool should_throw\"\n          ],\n          \"return_type\": \"std::unique_ptr<base::OS::MemoryMappedFile>\",\n          \"logic\": \"Reads file into memory mapped file\"\n        },\n        {\n          \"name\": \"WasmLoadSourceMapCallback\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* name\"\n          ],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Callback to provide source maps for WebAssembly modules.\"\n        },\n        {\n          \"name\": \"CreateEvaluationContext\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"MaybeLocal<Context>\",\n          \"logic\": \"Creates a context for evaluating JavaScript code.\"\n        },\n        {\n          \"name\": \"RunMain\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"bool last_run\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Runs the main function of the shell.\"\n        },\n        {\n          \"name\": \"Main\",\n          \"parameters\": [\n            \"int argc\",\n            \"char* argv[]\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"The main entry point of the d8 shell.\"\n        },\n        {\n          \"name\": \"Exit\",\n          \"parameters\": [\n            \"int exit_code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Exits the shell with the given exit code.\"\n        },\n        {\n          \"name\": \"OnExit\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"bool dispose\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles cleanup tasks when the V8 isolate is exiting.\"\n        },\n        {\n          \"name\": \"CollectGarbage\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Explicitly calls the garbage collector.\"\n        },\n        {\n          \"name\": \"EmptyMessageQueues\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Empties the message queues for the V8 isolate.\"\n        },\n        {\n          \"name\": \"CompleteMessageLoop\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Completes the message loop for the V8 isolate.\"\n        },\n        {\n          \"name\": \"FinishExecuting\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const Global<Context>& context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Finishes execution in an isolate.\"\n        },\n        {\n          \"name\": \"HandleUnhandledPromiseRejections\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Handles unhandled promise rejections in a specific isolate.\"\n        },\n        {\n          \"name\": \"SerializeValue\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<Value> value\",\n            \"Local<Value> transfer\"\n          ],\n          \"return_type\": \"std::unique_ptr<SerializationData>\",\n          \"logic\": \"Serializes a V8 value into a buffer.\"\n        },\n        {\n          \"name\": \"DeserializeValue\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"std::unique_ptr<SerializationData> data\"\n          ],\n          \"return_type\": \"MaybeLocal<Value>\",\n          \"logic\": \"Deserializes a V8 value from a buffer.\"\n        },\n        {\n          \"name\": \"LookupCounter\",\n          \"parameters\": [\n            \"const char* name\"\n          ],\n          \"return_type\": \"int*\",\n          \"logic\": \"Looks up a counter by name.\"\n        },\n        {\n          \"name\": \"CreateHistogram\",\n          \"parameters\": [\n            \"const char* name\",\n            \"int min\",\n            \"int max\",\n            \"size_t buckets\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Creates a histogram.\"\n        },\n        {\n          \"name\": \"AddHistogramSample\",\n          \"parameters\": [\n            \"void* histogram\",\n            \"int sample\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a sample to a histogram.\"\n        },\n        {\n          \"name\": \"MapCounters\",\n          \"parameters\": [\n            \"v8::Isolate* isolate\",\n            \"const char* name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Maps the counters file for an isolate.\"\n        },\n        {\n          \"name\": \"GetTimestamp\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns a high-resolution timestamp.\"\n        },\n        {\n          \"name\": \"GetTracingTimestampFromPerformanceTimestamp\",\n          \"parameters\": [\n            \"double performance_timestamp\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Converts a performance timestamp into a tracing timestamp.\"\n        },\n        {\n          \"name\": \"PerformanceNow\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.now().\"\n        },\n        {\n          \"name\": \"PerformanceMark\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.mark().\"\n        },\n        {\n          \"name\": \"PerformanceMeasure\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.measure().\"\n        },\n        {\n          \"name\": \"PerformanceMeasureMemory\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.measureMemory().\"\n        },\n        {\n          \"name\": \"RealmCurrent\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns index of current realm.\"\n        },\n        {\n          \"name\": \"RealmOwner\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns index of realm to which the value belongs.\"\n        },\n        {\n          \"name\": \"RealmGlobal\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns global object of a realm.\"\n        },\n        {\n          \"name\": \"RealmCreate\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates a new realm.\"\n        },\n        {\n          \"name\": \"RealmNavigate\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Navigates an existing realm.\"\n        },\n        {\n          \"name\": \"RealmCreateAllowCrossRealmAccess\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates a realm that allows for cross realm access.\"\n        },\n        {\n          \"name\": \"RealmDetachGlobal\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Detaches global object from realm.\"\n        },\n        {\n          \"name\": \"RealmDispose\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Disposes of the realm.\"\n        },\n        {\n          \"name\": \"RealmSwitch\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Switches to realm at the given index.\"\n        },\n        {\n          \"name\": \"RealmEval\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Eval code inside Realm at the given index.\"\n        },\n        {\n          \"name\": \"RealmSharedGet\",\n          \"parameters\": [\n            \"Local<Name> property\",\n            \"const PropertyCallbackInfo<Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Getter for the realm shared property.\"\n        },\n        {\n          \"name\": \"RealmSharedSet\",\n          \"parameters\": [\n            \"Local<Name> property\",\n            \"Local<Value> value\",\n            \"const PropertyCallbackInfo<void>& info\"\n          ],\n          \"return_type\": \"void"
}