{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/asmjs/asm-parser.cc",
  "imports": [
    "src/asmjs/asm-parser.h",
    "math.h",
    "string.h",
    "algorithm",
    "optional",
    "src/asmjs/asm-js.h",
    "src/asmjs/asm-types.h",
    "src/base/overflowing-math.h",
    "src/flags/flags.h",
    "src/numbers/conversions-inl.h",
    "src/parsing/scanner.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-opcodes.h"
  ],
  "classes": [
    {
      "name": "AsmJsParser::TemporaryVariableScope",
      "properties": [
        "parser_",
        "local_depth_"
      ],
      "methods": [
        {
          "name": "TemporaryVariableScope",
          "parameters": [
            "AsmJsParser* parser"
          ],
          "return_type": "void",
          "logic": "Constructor that increments the parser's temporary variable depth and remembers the starting depth.  Used to manage temporary variable allocation within a function."
        },
        {
          "name": "~TemporaryVariableScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that decrements the parser's temporary variable depth. Ensures temporary variable usage is properly scoped."
        },
        {
          "name": "get",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the index of a temporary variable based on the current local depth within the function."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "AsmJsParser::AsmJsParser",
      "parameters": [
        "Zone* zone",
        "uintptr_t stack_limit",
        "Utf16CharacterStream* stream"
      ],
      "return_type": "void",
      "logic": "Constructor for the AsmJsParser class. Initializes the scanner, module builder, stack limit, and standard library types.  Adds an initial memory segment to the module."
    },
    {
      "name": "AsmJsParser::InitializeStdlibTypes",
      "parameters": [],
      "return_type": "void",
      "logic": "Initializes the AsmType objects representing standard library functions and their signatures used during asm.js validation. This includes Math.min/max, Math.abs, Math.ceil/floor/sqrt, and fround."
    },
    {
      "name": "AsmJsParser::ConvertSignature",
      "parameters": [
        "AsmType* return_type",
        "const ZoneVector<AsmType*>& params"
      ],
      "return_type": "FunctionSig*",
      "logic": "Converts AsmType-based function signature into a Wasm FunctionSig object, mapping AsmType to corresponding Wasm ValueType representations (kWasmF64, kWasmF32, kWasmI32)."
    },
    {
      "name": "AsmJsParser::Run",
      "parameters": [],
      "return_type": "bool",
      "logic": "Runs the module validation process. Returns true if the validation is successful, false otherwise."
    },
    {
      "name": "AsmJsParser::GetVarInfo",
      "parameters": [
        "AsmJsScanner::token_t token"
      ],
      "return_type": "wasm::AsmJsParser::VarInfo*",
      "logic": "Retrieves or creates VarInfo for a given token.  Manages the storage of global and local variable information (kind, type, index) in vectors. Expands the vectors if necessary."
    },
    {
      "name": "AsmJsParser::VarIndex",
      "parameters": [
        "VarInfo* info"
      ],
      "return_type": "uint32_t",
      "logic": "Returns the index of a global variable, taking into account global imports."
    },
    {
      "name": "AsmJsParser::AddGlobalImport",
      "parameters": [
        "base::Vector<const char> name",
        "AsmType* type",
        "ValueType vtype",
        "bool mutable_variable",
        "VarInfo* info"
      ],
      "return_type": "void",
      "logic": "Declares a global variable representing an imported value. Adds the global to the module and records the initialization of this global from the import."
    },
    {
      "name": "AsmJsParser::DeclareGlobal",
      "parameters": [
        "VarInfo* info",
        "bool mutable_variable",
        "AsmType* type",
        "ValueType vtype",
        "WasmInitExpr init"
      ],
      "return_type": "void",
      "logic": "Declares a global variable in the Wasm module, assigning its type, mutability, and initial value."
    },
    {
      "name": "AsmJsParser::DeclareStdlibFunc",
      "parameters": [
        "VarInfo* info",
        "VarKind kind",
        "AsmType* type"
      ],
      "return_type": "void",
      "logic": "Declares a standard library function, assigning its kind and type within the VarInfo. Sets the index to 0 as it's not directly used."
    },
    {
      "name": "AsmJsParser::TempVariable",
      "parameters": [
        "int index"
      ],
      "return_type": "uint32_t",
      "logic": "Allocates a temporary local variable index within the function. If the requested index is beyond the currently used temporary locals, it expands the range of used locals."
    },
    {
      "name": "AsmJsParser::CopyCurrentIdentifierString",
      "parameters": [],
      "return_type": "base::Vector<const char>",
      "logic": "Copies the current identifier string from the scanner into a zone-allocated vector."
    },
    {
      "name": "AsmJsParser::SkipSemicolon",
      "parameters": [],
      "return_type": "void",
      "logic": "Consumes a semicolon if present, otherwise checks if the semicolon is implied by newline or closing brace.  Reports an error if the semicolon is explicitly expected but missing."
    },
    {
      "name": "AsmJsParser::Begin",
      "parameters": [
        "AsmJsScanner::token_t label"
      ],
      "return_type": "void",
      "logic": "Starts a new block in the current function.  Emits a kExprBlock opcode."
    },
    {
      "name": "AsmJsParser::Loop",
      "parameters": [
        "AsmJsScanner::token_t label"
      ],
      "return_type": "void",
      "logic": "Starts a new loop block in the current function. Emits a kExprLoop opcode."
    },
    {
      "name": "AsmJsParser::End",
      "parameters": [],
      "return_type": "void",
      "logic": "Ends the current block in the current function. Emits a kExprEnd opcode."
    },
    {
      "name": "AsmJsParser::BareBegin",
      "parameters": [
        "BlockKind kind",
        "AsmJsScanner::token_t label"
      ],
      "return_type": "void",
      "logic": "Pushes a new BlockInfo onto the block stack.  This is the raw begin without any code emission."
    },
    {
      "name": "AsmJsParser::BareEnd",
      "parameters": [],
      "return_type": "void",
      "logic": "Pops the top BlockInfo from the block stack.  This is the raw end without any code emission."
    },
    {
      "name": "AsmJsParser::FindContinueLabelDepth",
      "parameters": [
        "AsmJsScanner::token_t label"
      ],
      "return_type": "int",
      "logic": "Finds the depth of a continue target in the block stack based on the provided label (or innermost loop if no label)."
    },
    {
      "name": "AsmJsParser::FindBreakLabelDepth",
      "parameters": [
        "AsmJsScanner::token_t label"
      ],
      "return_type": "int",
      "logic": "Finds the depth of a break target in the block stack based on the provided label (or innermost block if no label)."
    },
    {
      "name": "AsmJsParser::ValidateModule",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the top-level structure of the asm.js module, including parameters, variables, functions, function tables, and exports. Constructs the module's start function to initialize imported globals."
    },
    {
      "name": "AsmJsParser::ValidateModuleParameters",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the parameters of the asm.js module, including stdlib, foreign, and heap names. Checks for duplicate names."
    },
    {
      "name": "AsmJsParser::ValidateModuleVars",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the global variables defined in the asm.js module. Handles 'var' and 'const' declarations."
    },
    {
      "name": "AsmJsParser::ValidateModuleVar",
      "parameters": [
        "bool mutable_variable"
      ],
      "return_type": "void",
      "logic": "Validates a single global variable declaration, determining its type and initial value (numeric literal, new stdlib type, reference to another global, import)."
    },
    {
      "name": "AsmJsParser::ValidateModuleVarFromGlobal",
      "parameters": [
        "VarInfo* info",
        "bool mutable_variable"
      ],
      "return_type": "void",
      "logic": "Validates a module variable initialized from another global variable. Handles both regular and fround globals."
    },
    {
      "name": "AsmJsParser::ValidateModuleVarImport",
      "parameters": [
        "VarInfo* info",
        "bool mutable_variable"
      ],
      "return_type": "void",
      "logic": "Validates a module variable that is an imported value from the 'foreign' namespace. Handles foreign doubles, integers and function imports."
    },
    {
      "name": "AsmJsParser::ValidateModuleVarNewStdlib",
      "parameters": [
        "VarInfo* info"
      ],
      "return_type": "void",
      "logic": "Validates a module variable that is initialized using 'new stdlib.ArrayBufferView(heap)'. Determines the array buffer type (e.g., Int8Array, Float64Array)."
    },
    {
      "name": "AsmJsParser::ValidateModuleVarStdlib",
      "parameters": [
        "VarInfo* info"
      ],
      "return_type": "void",
      "logic": "Validates a module variable that is initialized using stdlib members (e.g., Math constants, Math functions). Determines the correct constant or function to use from stdlib."
    },
    {
      "name": "AsmJsParser::ValidateExport",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the 'return' statement that defines the exported functions from the asm.js module.  Adds the exported function(s) to the module builder."
    },
    {
      "name": "AsmJsParser::ValidateFunctionTable",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the definition of a function table. Checks the table name, elements and verifies that the size of the functions inside matches with what is declared.  Only creates the table entry if the function table has been defined before."
    },
    {
      "name": "AsmJsParser::ValidateFunction",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the declaration and definition of a function, including parameters, local variables, and statements within the function body. Creates the corresponding Wasm function in the module builder."
    },
    {
      "name": "AsmJsParser::ValidateFunctionParams",
      "parameters": [
        "ZoneVector<AsmType*>* params"
      ],
      "return_type": "void",
      "logic": "Validates the parameters of a function, including their names, type annotations, and types (int, double, float)."
    },
    {
      "name": "AsmJsParser::ValidateFunctionLocals",
      "parameters": [
        "size_t param_count",
        "ZoneVector<ValueType>* locals"
      ],
      "return_type": "void",
      "logic": "Validates the local variable declarations within a function. Determines the variable type (double, integer), initial value, and emits wasm code to initialize it."
    },
    {
      "name": "AsmJsParser::ValidateStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a single statement within a function, which can be a block, expression, if, return, loop, break, continue, or switch statement."
    },
    {
      "name": "AsmJsParser::Block",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a block statement enclosed in curly braces. Supports breaking to labelled blocks."
    },
    {
      "name": "AsmJsParser::ExpressionStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates an expression statement. Calls ValidateExpression and drops the result if the expression is not void."
    },
    {
      "name": "AsmJsParser::EmptyStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates an empty statement (just a semicolon)."
    },
    {
      "name": "AsmJsParser::IfStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates an if statement, including the condition, the 'then' block, and the optional 'else' block."
    },
    {
      "name": "AsmJsParser::ReturnStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a return statement, including the return value type. Checks if a return value is expected based on function signature."
    },
    {
      "name": "AsmJsParser::IterationStatement",
      "parameters": [],
      "return_type": "bool",
      "logic": "Determines which type of iteration statement it is (while, do, or for)."
    },
    {
      "name": "AsmJsParser::WhileStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a while loop, including the condition and the loop body."
    },
    {
      "name": "AsmJsParser::DoStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a do-while loop, including the loop body and the condition."
    },
    {
      "name": "AsmJsParser::ForStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a for loop, including the initialization, condition, increment, and loop body."
    },
    {
      "name": "AsmJsParser::BreakStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a break statement, ensuring it targets a valid block or loop."
    },
    {
      "name": "AsmJsParser::ContinueStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a continue statement, ensuring it targets a valid loop."
    },
    {
      "name": "AsmJsParser::LabelledStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a labelled statement, associating a label with a statement."
    },
    {
      "name": "AsmJsParser::SwitchStatement",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a switch statement, including the test expression, cases, and default case."
    },
    {
      "name": "AsmJsParser::ValidateCase",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates a case in a switch statement, including the value and statements within the case."
    },
    {
      "name": "AsmJsParser::ValidateDefault",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates the default case in a switch statement."
    },
    {
      "name": "AsmJsParser::ValidateExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Validates a general expression."
    },
    {
      "name": "AsmJsParser::Expression",
      "parameters": [
        "AsmType* expected"
      ],
      "return_type": "AsmType*",
      "logic": "Parses a comma-separated sequence of AssignmentExpressions."
    },
    {
      "name": "AsmJsParser::NumericLiteral",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for numeric literals (doubles and integers)."
    },
    {
      "name": "AsmJsParser::Identifier",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code to fetch local or global identifiers."
    },
    {
      "name": "AsmJsParser::CallExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for a call expression. This can be to functions, heap access or numeric literals"
    },
    {
      "name": "AsmJsParser::MemberExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code to fetch a member from the heap."
    },
    {
      "name": "AsmJsParser::AssignmentExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for Assignment expression."
    },
    {
      "name": "AsmJsParser::UnaryExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for unary expression such as negation, addition, not and bitwise not."
    },
    {
      "name": "AsmJsParser::MultiplicativeExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with multiplicative operators such as multiplication, division and remainder."
    },
    {
      "name": "AsmJsParser::AdditiveExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with Additive operators + and -."
    },
    {
      "name": "AsmJsParser::ShiftExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with shift operators like <<, >> and >>>."
    },
    {
      "name": "AsmJsParser::RelationalExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with Relational operators such as <, <=, > and >=."
    },
    {
      "name": "AsmJsParser::EqualityExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with equality operators such as ==, !="
    },
    {
      "name": "AsmJsParser::BitwiseANDExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with bitwise and operator."
    },
    {
      "name": "AsmJsParser::BitwiseXORExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with bitwise xor operator."
    },
    {
      "name": "AsmJsParser::BitwiseORExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for expression with bitwise or operator."
    },
    {
      "name": "AsmJsParser::ConditionalExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for conditional operator i.e. ternary operators."
    },
    {
      "name": "AsmJsParser::ParenthesizedExpression",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Parses and emits code for parenthesized expressions."
    },
    {
      "name": "AsmJsParser::ValidateCall",
      "parameters": [],
      "return_type": "AsmType*",
      "logic": "Validates and emits code for function calls. Determines function type and if coercion required is any."
    },
    {
      "name": "AsmJsParser::PeekCall",
      "parameters": [],
      "return_type": "bool",
      "logic": "Helper function to check whether the current token is a potential call."
    },
    {
      "name": "AsmJsParser::ValidateHeapAccess",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates and emits code for heap access."
    },
    {
      "name": "AsmJsParser::ValidateFloatCoercion",
      "parameters": [],
      "return_type": "void",
      "logic": "Validates and emits code for float coercion."
    },
    {
      "name": "AsmJsParser::ScanToClosingParenthesis",
      "parameters": [],
      "return_type": "void",
      "logic": "Helper function to scan until the closing parenthesis"
    },
    {
      "name": "AsmJsParser::GatherCases",
      "parameters": [
        "ZoneVector<int32_t>* cases"
      ],
      "return_type": "void",
      "logic": "Gather the case of a switch statement."
    }
  ]
}