{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/asmjs/asm-parser.h",
  "imports": [
    "<memory>",
    "src/asmjs/asm-scanner.h",
    "src/asmjs/asm-types.h",
    "src/base/enum-set.h",
    "src/base/vector.h",
    "src/wasm/wasm-module-builder.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "AsmJsParser",
      "properties": [
        "zone_",
        "scanner_",
        "module_builder_",
        "current_function_builder_",
        "return_type_",
        "stack_limit_",
        "stdlib_uses_",
        "global_var_info_",
        "local_var_info_",
        "num_globals_",
        "cached_valuetype_vectors_",
        "cached_asm_type_p_vectors_",
        "cached_token_t_vectors_",
        "cached_int_vectors_",
        "function_temp_locals_offset_",
        "function_temp_locals_used_",
        "function_temp_locals_depth_",
        "failed_",
        "failure_message_",
        "failure_location_",
        "stdlib_name_",
        "foreign_name_",
        "heap_name_",
        "inside_heap_assignment_",
        "heap_access_type_",
        "block_stack_",
        "stdlib_dq2d_",
        "stdlib_dqdq2d_",
        "stdlib_i2s_",
        "stdlib_ii2s_",
        "stdlib_minmax_",
        "stdlib_abs_",
        "stdlib_ceil_like_",
        "stdlib_fround_",
        "call_coercion_",
        "call_coercion_position_",
        "call_coercion_deferred_",
        "call_coercion_deferred_position_",
        "heap_access_shift_position_",
        "heap_access_shift_value_",
        "pending_label_",
        "global_imports_"
      ],
      "methods": [
        {
          "name": "AsmJsParser",
          "parameters": [
            "Zone* zone",
            "uintptr_t stack_limit",
            "Utf16CharacterStream* stream"
          ],
          "return_type": "explicit AsmJsParser",
          "logic": "Constructor for the AsmJsParser. Initializes the scanner, module builder, and other member variables."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "bool",
          "logic": "Main entry point to parse the asm.js code. Returns true if parsing was successful, false otherwise."
        },
        {
          "name": "failure_message",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the error message if parsing failed."
        },
        {
          "name": "failure_location",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the location (index) where parsing failed."
        },
        {
          "name": "module_builder",
          "parameters": [],
          "return_type": "WasmModuleBuilder*",
          "logic": "Returns a pointer to the WasmModuleBuilder, which is used to build the WASM module."
        },
        {
          "name": "stdlib_uses",
          "parameters": [],
          "return_type": "const StdlibSet*",
          "logic": "Returns a pointer to the StdlibSet, indicating which standard library functions are used in the asm.js module."
        },
        {
          "name": "GetVarInfo",
          "parameters": [
            "AsmJsScanner::token_t token"
          ],
          "return_type": "VarInfo*",
          "logic": "Retrieves the VarInfo structure corresponding to a given token.  This is used to look up information about variables during parsing."
        },
        {
          "name": "VarIndex",
          "parameters": [
            "VarInfo* info"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the index of the variable in either the global or local variable array."
        },
        {
          "name": "DeclareGlobal",
          "parameters": [
            "VarInfo* info",
            "bool mutable_variable",
            "AsmType* type",
            "ValueType vtype",
            "WasmInitExpr init"
          ],
          "return_type": "void",
          "logic": "Declares a global variable in the WasmModuleBuilder."
        },
        {
          "name": "DeclareStdlibFunc",
          "parameters": [
            "VarInfo* info",
            "VarKind kind",
            "AsmType* type"
          ],
          "return_type": "void",
          "logic": "Declares a standard library function."
        },
        {
          "name": "AddGlobalImport",
          "parameters": [
            "base::Vector<const char> name",
            "AsmType* type",
            "ValueType vtype",
            "bool mutable_variable",
            "VarInfo* info"
          ],
          "return_type": "void",
          "logic": "Adds a global import to the list of global imports."
        },
        {
          "name": "TempVariable",
          "parameters": [
            "int index"
          ],
          "return_type": "uint32_t",
          "logic": "Allocates a temporary local variable."
        },
        {
          "name": "CopyCurrentIdentifierString",
          "parameters": [],
          "return_type": "base::Vector<const char>",
          "logic": "Copies the current identifier string from the scanner to a vector in the zone."
        },
        {
          "name": "BareBegin",
          "parameters": [
            "BlockKind kind",
            "AsmJsScanner::token_t label"
          ],
          "return_type": "void",
          "logic": "Pushes a new entry onto the block stack, tracking block information."
        },
        {
          "name": "BareEnd",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the top entry off the block stack."
        },
        {
          "name": "FindContinueLabelDepth",
          "parameters": [
            "AsmJsScanner::token_t label"
          ],
          "return_type": "int",
          "logic": "Finds the depth of a 'continue' label within the block stack."
        },
        {
          "name": "FindBreakLabelDepth",
          "parameters": [
            "AsmJsScanner::token_t label"
          ],
          "return_type": "int",
          "logic": "Finds the depth of a 'break' label within the block stack."
        },
        {
          "name": "Begin",
          "parameters": [
            "AsmJsScanner::token_t label"
          ],
          "return_type": "void",
          "logic": "Begins a new block in the WASM module and adds it to the block stack."
        },
        {
          "name": "Loop",
          "parameters": [
            "AsmJsScanner::token_t label"
          ],
          "return_type": "void",
          "logic": "Begins a new loop in the WASM module and adds it to the block stack."
        },
        {
          "name": "End",
          "parameters": [],
          "return_type": "void",
          "logic": "Ends the current block in the WASM module and removes it from the block stack."
        },
        {
          "name": "InitializeStdlibTypes",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes AsmType objects for standard library functions (Math functions, etc.)."
        },
        {
          "name": "ConvertSignature",
          "parameters": [
            "AsmType* return_type",
            "const ZoneVector<AsmType*>& params"
          ],
          "return_type": "FunctionSig*",
          "logic": "Converts AsmType parameters and return type into a FunctionSig object."
        },
        {
          "name": "ValidateModule",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates the overall structure of the asm.js module."
        },
        {
          "name": "ValidateModuleParameters",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates the parameters of the module function."
        },
        {
          "name": "ValidateModuleVars",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates the variables declared at the module level."
        },
        {
          "name": "ValidateModuleVar",
          "parameters": [
            "bool mutable_variable"
          ],
          "return_type": "void",
          "logic": "Validates a single module-level variable."
        },
        {
          "name": "ValidateModuleVarImport",
          "parameters": [
            "VarInfo* info",
            "bool mutable_variable"
          ],
          "return_type": "void",
          "logic": "Validates a module-level variable that is imported."
        },
        {
          "name": "ValidateModuleVarStdlib",
          "parameters": [
            "VarInfo* info"
          ],
          "return_type": "void",
          "logic": "Validates a module-level variable related to the standard library."
        },
        {
          "name": "ValidateModuleVarNewStdlib",
          "parameters": [
            "VarInfo* info"
          ],
          "return_type": "void",
          "logic": "Validates a newly created standard library variable within the module."
        },
        {
          "name": "ValidateModuleVarFromGlobal",
          "parameters": [
            "VarInfo* info",
            "bool mutable_variable"
          ],
          "return_type": "void",
          "logic": "Validates a module variable initialized from a global scope, checking its mutability."
        },
        {
          "name": "ValidateExport",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates the exported functions and variables from the module."
        },
        {
          "name": "ValidateFunctionTable",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates the function table used by the module."
        },
        {
          "name": "ValidateFunction",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates a single function within the module."
        },
        {
          "name": "ValidateFunctionParams",
          "parameters": [
            "ZoneVector<AsmType*>* params"
          ],
          "return_type": "void",
          "logic": "Validates the parameters of a function."
        },
        {
          "name": "ValidateFunctionLocals",
          "parameters": [
            "size_t param_count",
            "ZoneVector<ValueType>* locals"
          ],
          "return_type": "void",
          "logic": "Validates the local variables of a function."
        },
        {
          "name": "ValidateStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates a statement based on asm.js rules."
        },
        {
          "name": "Block",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a block of statements."
        },
        {
          "name": "ExpressionStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates an expression statement."
        },
        {
          "name": "EmptyStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates an empty statement."
        },
        {
          "name": "IfStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates an if statement."
        },
        {
          "name": "ReturnStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a return statement."
        },
        {
          "name": "IterationStatement",
          "parameters": [],
          "return_type": "bool",
          "logic": "Parses and validates an iteration statement (while, do, for)."
        },
        {
          "name": "WhileStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a while statement."
        },
        {
          "name": "DoStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a do-while statement."
        },
        {
          "name": "ForStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a for statement."
        },
        {
          "name": "BreakStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a break statement."
        },
        {
          "name": "ContinueStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a continue statement."
        },
        {
          "name": "LabelledStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a labelled statement."
        },
        {
          "name": "SwitchStatement",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses and validates a switch statement."
        },
        {
          "name": "ValidateCase",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates a single case within a switch statement."
        },
        {
          "name": "ValidateDefault",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates the default case within a switch statement."
        },
        {
          "name": "ValidateExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Validates an expression and returns its AsmType."
        },
        {
          "name": "Expression",
          "parameters": [
            "AsmType* expect"
          ],
          "return_type": "AsmType*",
          "logic": "Parses an expression of the expected type."
        },
        {
          "name": "NumericLiteral",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a numeric literal and returns its AsmType."
        },
        {
          "name": "Identifier",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses an identifier and returns its AsmType."
        },
        {
          "name": "CallExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a call expression and returns its AsmType."
        },
        {
          "name": "MemberExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a member expression (e.g., object.property) and returns its AsmType."
        },
        {
          "name": "AssignmentExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses an assignment expression and returns its AsmType."
        },
        {
          "name": "UnaryExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a unary expression and returns its AsmType."
        },
        {
          "name": "MultiplicativeExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a multiplicative expression (*, /, %) and returns its AsmType."
        },
        {
          "name": "AdditiveExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses an additive expression (+, -) and returns its AsmType."
        },
        {
          "name": "ShiftExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a shift expression (<<, >>, >>>) and returns its AsmType."
        },
        {
          "name": "RelationalExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a relational expression (<, >, <=, >=) and returns its AsmType."
        },
        {
          "name": "EqualityExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses an equality expression (==, !=) and returns its AsmType."
        },
        {
          "name": "BitwiseANDExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a bitwise AND expression (&) and returns its AsmType."
        },
        {
          "name": "BitwiseXORExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a bitwise XOR expression (^) and returns its AsmType."
        },
        {
          "name": "BitwiseORExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a bitwise OR expression (|) and returns its AsmType."
        },
        {
          "name": "ConditionalExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a conditional expression (?:) and returns its AsmType."
        },
        {
          "name": "ParenthesizedExpression",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Parses a parenthesized expression and returns its AsmType."
        },
        {
          "name": "ValidateCall",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Validates a call and returns its AsmType."
        },
        {
          "name": "PeekCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Helper function to peek if the current token represents a call."
        },
        {
          "name": "ValidateHeapAccess",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates a heap access expression."
        },
        {
          "name": "ValidateFloatCoercion",
          "parameters": [],
          "return_type": "void",
          "logic": "Validates a floating-point coercion operation."
        },
        {
          "name": "SkipSemicolon",
          "parameters": [],
          "return_type": "void",
          "logic": "Skips over a semicolon token in the input stream."
        },
        {
          "name": "ScanToClosingParenthesis",
          "parameters": [],
          "return_type": "void",
          "logic": "Scans ahead until the next closing parenthesis is reached."
        },
        {
          "name": "GatherCases",
          "parameters": [
            "ZoneVector<int32_t>* cases"
          ],
          "return_type": "void",
          "logic": "Gathers all case labels from the current switch statement."
        },
        {
          "name": "Peek",
          "parameters": [
            "AsmJsScanner::token_t token"
          ],
          "return_type": "bool",
          "logic": "Checks if the current scanner token matches the given token."
        },
        {
          "name": "PeekForZero",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current scanner token is an unsigned integer with value 0."
        },
        {
          "name": "Check",
          "parameters": [
            "AsmJsScanner::token_t token"
          ],
          "return_type": "bool",
          "logic": "Checks if the current scanner token matches the given token, and consumes it if it does."
        },
        {
          "name": "CheckForZero",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current scanner token is an unsigned integer with value 0, and consumes it if it does."
        },
        {
          "name": "CheckForDouble",
          "parameters": [
            "double* value"
          ],
          "return_type": "bool",
          "logic": "Checks if the current scanner token is a double, and consumes it if it does."
        },
        {
          "name": "CheckForUnsigned",
          "parameters": [
            "uint32_t* value"
          ],
          "return_type": "bool",
          "logic": "Checks if the current scanner token is an unsigned integer, and consumes it if it does."
        },
        {
          "name": "CheckForUnsignedBelow",
          "parameters": [
            "uint32_t limit",
            "uint32_t* value"
          ],
          "return_type": "bool",
          "logic": "Checks if the current scanner token is an unsigned integer below the given limit, and consumes it if it does."
        },
        {
          "name": "Consume",
          "parameters": [],
          "return_type": "AsmJsScanner::token_t",
          "logic": "Consumes the current scanner token and returns it."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone used by the parser."
        }
      ]
    },
    {
      "name": "AsmJsParser::FunctionImportInfo",
      "properties": [
        "function_name",
        "cache"
      ],
      "methods": [
        {
          "name": "FunctionImportInfo",
          "parameters": [
            "base::Vector<const char> name",
            "Zone* zone"
          ],
          "return_type": "FunctionImportInfo",
          "logic": "Constructor for FunctionImportInfo.  Stores the name of the function and initializes the cache."
        }
      ]
    },
    {
      "name": "AsmJsParser::VarInfo",
      "properties": [
        "type",
        "function_builder",
        "import",
        "mask",
        "index",
        "kind",
        "mutable_variable",
        "function_defined"
      ],
      "methods": []
    },
    {
      "name": "AsmJsParser::GlobalImport",
      "properties": [
        "import_name",
        "value_type",
        "var_info"
      ],
      "methods": []
    },
    {
      "name": "AsmJsParser::BlockInfo",
      "properties": [
        "kind",
        "label"
      ],
      "methods": []
    },
    {
      "name": "AsmJsParser::TemporaryVariableScope",
      "properties": [],
      "methods": []
    },
    {
      "name": "AsmJsParser::CachedVectors",
      "properties": [
        "reusable_vectors_"
      ],
      "methods": [
        {
          "name": "CachedVectors",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "explicit CachedVectors",
          "logic": "Constructor for CachedVectors. Initializes the reusable vectors."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone used by this object."
        },
        {
          "name": "fill",
          "parameters": [
            "ZoneVector<T>* vec"
          ],
          "return_type": "inline void",
          "logic": "Fills the given vector with a reusable vector if available."
        },
        {
          "name": "reuse",
          "parameters": [
            "ZoneVector<T>* vec"
          ],
          "return_type": "inline void",
          "logic": "Reuses the given vector by adding it to the reusable vectors."
        }
      ]
    },
    {
      "name": "AsmJsParser::CachedVector",
      "properties": [
        "cache_"
      ],
      "methods": [
        {
          "name": "CachedVector",
          "parameters": [
            "CachedVectors<T>* cache"
          ],
          "return_type": "explicit CachedVector",
          "logic": "Constructor for CachedVector. Calls the fill method of the cache to initialize the vector."
        },
        {
          "name": "~CachedVector",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for CachedVector. Calls the reuse method of the cache to store the vector for reuse."
        }
      ]
    }
  ],
  "functions": []
}