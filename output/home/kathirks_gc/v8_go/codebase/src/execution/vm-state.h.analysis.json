{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/vm-state.h",
  "imports": [
    "include/v8-unwinder.h",
    "src/common/globals.h",
    "src/logging/counters-scopes.h",
    "v8-internal.h"
  ],
  "classes": [
    {
      "name": "VMState",
      "properties": [
        "isolate_",
        "previous_tag_"
      ],
      "methods": [
        {
          "name": "VMState",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor. Enters a VM state by pushing a StateTag onto the logger's stack.  It takes an Isolate pointer and implicitly pushes the specified StateTag onto a stack-like structure managed within the Isolate. Isolates are isolated execution contexts in V8."
        },
        {
          "name": "~VMState",
          "parameters": [],
          "return_type": "N/A (Destructor)",
          "logic": "Destructor. Leaves the current VM state by popping the StateTag from the logger's stack. It implicitly pops the StateTag that was pushed in the constructor, signaling the end of the VM state."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate pointer associated with this VMState object."
        }
      ]
    },
    {
      "name": "ExternalCallbackScope",
      "properties": [
        "callback_",
        "callback_info_",
        "previous_scope_",
        "vm_state_",
        "exception_context_",
        "pause_timed_histogram_scope_",
        "js_stack_comparable_address_"
      ],
      "methods": [
        {
          "name": "ExternalCallbackScope",
          "parameters": [
            "Isolate* isolate",
            "Address callback",
            "v8::ExceptionContext exception_context",
            "const void* callback_info"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor. Creates a scope for an external callback, typically a C++ function called from JavaScript. It sets up the necessary state for the callback to execute, including tracking exception context and callback information and also manages the VMState."
        },
        {
          "name": "~ExternalCallbackScope",
          "parameters": [],
          "return_type": "N/A (Destructor)",
          "logic": "Destructor. Cleans up the scope for an external callback.  It might restore the previous VM state and perform other cleanup tasks."
        },
        {
          "name": "callback",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the external callback function."
        },
        {
          "name": "callback_entrypoint_address",
          "parameters": [],
          "return_type": "Address*",
          "logic": "Returns the address of the entrypoint of the callback. If function descriptors are used, it returns the address stored in the function descriptor; otherwise, it returns the address of the callback itself."
        },
        {
          "name": "previous",
          "parameters": [],
          "return_type": "ExternalCallbackScope*",
          "logic": "Returns a pointer to the previous ExternalCallbackScope in the stack, allowing for nested callbacks."
        },
        {
          "name": "JSStackComparableAddress",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns an address that can be used for comparing JavaScript stack frames. This address might be adjusted based on the architecture and security settings."
        },
        {
          "name": "exception_context",
          "parameters": [],
          "return_type": "v8::ExceptionContext",
          "logic": "Returns the exception context associated with the external callback."
        },
        {
          "name": "callback_info",
          "parameters": [],
          "return_type": "const void*",
          "logic": "Returns a pointer to the callback information.  This information might contain details about the callback, such as the function callback info or property callback info."
        }
      ]
    }
  ],
  "functions": []
}