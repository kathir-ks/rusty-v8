{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/vm-state-inl.h",
  "imports": [
    "src/execution/isolate-inl.h",
    "src/execution/simulator.h",
    "src/execution/vm-state.h",
    "src/logging/log.h",
    "src/tracing/trace-event.h"
  ],
  "classes": [
    {
      "name": "VMState",
      "properties": [
        "isolate_",
        "previous_tag_"
      ],
      "methods": [
        {
          "name": "VMState",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor. Stores the current VM state in `previous_tag_`, sets the new current VM state of the `isolate_` to the template parameter `Tag`."
        },
        {
          "name": "~VMState",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Restores the previous VM state in `isolate_` using the stored `previous_tag_`."
        }
      ]
    },
    {
      "name": "ExternalCallbackScope",
      "properties": [
        "callback_",
        "callback_info_",
        "previous_scope_",
        "vm_state_",
        "exception_context_",
        "pause_timed_histogram_scope_",
        "js_stack_comparable_address_"
      ],
      "methods": [
        {
          "name": "ExternalCallbackScope",
          "parameters": [
            "Isolate* isolate",
            "Address callback",
            "v8::ExceptionContext exception_context",
            "const void* callback_info"
          ],
          "return_type": "void",
          "logic": "Constructor. Sets up the scope for an external callback. Stores callback information, manages nested callback scopes, sets VM state, starts a timed histogram scope for execution, and ensures correctness of context tracking."
        },
        {
          "name": "~ExternalCallbackScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Restores the previous external callback scope, clears the topmost script having context, ends the runtime call stats trace event, and unregisters the JS stack comparable address if applicable."
        },
        {
          "name": "JSStackComparableAddress",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns an address that can be used for comparing JS stacks. Uses `js_stack_comparable_address_` if USE_SIMULATOR, V8_USE_ADDRESS_SANITIZER, or V8_USE_SAFE_STACK is defined; otherwise, returns the address of the current object."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "StateToString",
      "parameters": [
        "StateTag state"
      ],
      "return_type": "const char*",
      "logic": "Converts a `StateTag` enum value to a string representation for debugging and logging purposes."
    }
  ]
}