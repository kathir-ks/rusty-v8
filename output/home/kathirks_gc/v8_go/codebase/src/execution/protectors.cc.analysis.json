{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/protectors.cc",
  "imports": [
    "src/execution/protectors.h",
    "src/execution/isolate-inl.h",
    "src/execution/protectors-inl.h",
    "src/handles/handles-inl.h",
    "src/objects/contexts.h",
    "src/objects/property-cell.h",
    "src/objects/smi.h",
    "src/tracing/trace-event.h",
    "src/utils/utils.h"
  ],
  "classes": [
    {
      "name": "Protectors",
      "properties": [],
      "methods": [
        {
          "name": "Invalidate##name",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Invalidates a protector cell associated with the given isolate. It checks if the cell's value is a Smi, if the protector is intact, and if tracing is enabled, logs the invalidation.  Then it increments a usage counter indicating the invalidation, invalidates the protector cell, and performs a final check that the protector is no longer intact. The `##name` is a preprocessor token that changes for each protector."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "TraceProtectorInvalidation",
      "parameters": [
        "const char* protector_name"
      ],
      "return_type": "void",
      "logic": "Traces the invalidation of a protector cell. It logs the invalidation to the console (if PrintF is enabled) and emits a trace event with the name of the protector."
    },
    {
      "name": "IsDefined",
      "parameters": [
        "v8::Isolate::UseCounterFeature"
      ],
      "return_type": "bool",
      "logic": "A constexpr function that always returns true. It is used in a static assert to ensure that there is a use counter defined for each protector.  It exists to make the static assert more readable and explicitly state the intent."
    }
  ]
}