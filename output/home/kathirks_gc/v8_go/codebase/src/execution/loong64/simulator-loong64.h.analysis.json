{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/loong64/simulator-loong64.h",
  "imports": [
    "src/common/globals.h",
    "src/base/hashmap.h",
    "src/base/strings.h",
    "src/codegen/assembler.h",
    "src/codegen/loong64/constants-loong64.h",
    "src/execution/simulator-base.h",
    "src/utils/allocation.h"
  ],
  "classes": [
    {
      "name": "CachePage",
      "properties": [
        "data_[kPageSize]",
        "validity_map_[kValidityMapSize]"
      ],
      "methods": [
        {
          "name": "CachePage",
          "parameters": [],
          "return_type": "CachePage",
          "logic": "Constructor. Initializes the validity map to LINE_INVALID, marking all cache lines as invalid."
        },
        {
          "name": "ValidityByte",
          "parameters": [
            "int offset"
          ],
          "return_type": "char*",
          "logic": "Returns a pointer to the validity byte for the given offset."
        },
        {
          "name": "CachedData",
          "parameters": [
            "int offset"
          ],
          "return_type": "char*",
          "logic": "Returns a pointer to the cached data for the given offset."
        }
      ]
    },
    {
      "name": "SimInstructionBase",
      "properties": [
        "operand_",
        "instr_",
        "type_"
      ],
      "methods": [
        {
          "name": "InstructionType",
          "parameters": [],
          "return_type": "Type",
          "logic": "Returns the instruction type."
        },
        {
          "name": "instr",
          "parameters": [],
          "return_type": "Instruction*",
          "logic": "Returns the instruction pointer."
        },
        {
          "name": "operand",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the operand of the instruction."
        },
        {
          "name": "SimInstructionBase",
          "parameters": [],
          "return_type": "SimInstructionBase",
          "logic": "Default constructor. Initializes operand_ to -1, instr_ to nullptr, and type_ to kUnsupported."
        },
        {
          "name": "SimInstructionBase",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "SimInstructionBase",
          "logic": "Constructor. Takes an Instruction pointer as a parameter."
        }
      ]
    },
    {
      "name": "SimInstruction",
      "properties": [],
      "methods": [
        {
          "name": "SimInstruction",
          "parameters": [],
          "return_type": "SimInstruction",
          "logic": "Default constructor."
        },
        {
          "name": "SimInstruction",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "SimInstruction",
          "logic": "Constructor. Assigns the given instruction to the SimInstruction object."
        },
        {
          "name": "operator=",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "SimInstruction&",
          "logic": "Assignment operator. Reinterprets the instruction as an int32_t operand, stores the instruction pointer, sets the instruction type, and returns a reference to the SimInstruction object."
        }
      ]
    },
    {
      "name": "Simulator",
      "properties": [
        "registers_[kNumSimuRegisters]",
        "FPUregisters_[kNumFPURegisters]",
        "CFregisters_[kNumCFRegisters]",
        "FCSR_",
        "stack_",
        "stack_limit_",
        "pc_modified_",
        "icount_",
        "break_count_",
        "trace_buf_",
        "last_debugger_input_",
        "isolate_",
        "break_pc_",
        "break_instr_",
        "watched_stops_[kMaxStopCode + 1]",
        "local_monitor_",
        "global_monitor_thread_"
      ],
      "methods": [
        {
          "name": "Simulator",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Simulator",
          "logic": "Constructor for the Simulator class. Initializes the simulator state."
        },
        {
          "name": "~Simulator",
          "parameters": [],
          "return_type": "Simulator",
          "logic": "Destructor for the Simulator class."
        },
        {
          "name": "current",
          "parameters": [
            "v8::internal::Isolate* isolate"
          ],
          "return_type": "Simulator*",
          "logic": "Returns the currently executing Simulator instance for the given isolate."
        },
        {
          "name": "ceil",
          "parameters": [
            "float value"
          ],
          "return_type": "float",
          "logic": "Calls the standard ceil function."
        },
        {
          "name": "floor",
          "parameters": [
            "float value"
          ],
          "return_type": "float",
          "logic": "Calls the standard floor function."
        },
        {
          "name": "trunc",
          "parameters": [
            "float value"
          ],
          "return_type": "float",
          "logic": "Calls the standard trunc function."
        },
        {
          "name": "ceil",
          "parameters": [
            "double value"
          ],
          "return_type": "double",
          "logic": "Calls the standard ceil function."
        },
        {
          "name": "floor",
          "parameters": [
            "double value"
          ],
          "return_type": "double",
          "logic": "Calls the standard floor function."
        },
        {
          "name": "trunc",
          "parameters": [
            "double value"
          ],
          "return_type": "double",
          "logic": "Calls the standard trunc function."
        },
        {
          "name": "set_register",
          "parameters": [
            "int reg",
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified register."
        },
        {
          "name": "set_register_word",
          "parameters": [
            "int reg",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the word value of the specified register."
        },
        {
          "name": "set_dw_register",
          "parameters": [
            "int dreg",
            "const int* dbl"
          ],
          "return_type": "void",
          "logic": "Sets the double-word value of the specified register."
        },
        {
          "name": "get_register",
          "parameters": [
            "int reg"
          ],
          "return_type": "int64_t",
          "logic": "Gets the value of the specified register."
        },
        {
          "name": "get_double_from_register_pair",
          "parameters": [
            "int reg"
          ],
          "return_type": "double",
          "logic": "Gets a double value from the specified register pair."
        },
        {
          "name": "set_fpu_register",
          "parameters": [
            "int fpureg",
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified FPU register."
        },
        {
          "name": "set_fpu_register_word",
          "parameters": [
            "int fpureg",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the word value of the specified FPU register."
        },
        {
          "name": "set_fpu_register_hi_word",
          "parameters": [
            "int fpureg",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the high word value of the specified FPU register."
        },
        {
          "name": "set_fpu_register_float",
          "parameters": [
            "int fpureg",
            "float value"
          ],
          "return_type": "void",
          "logic": "Sets the float value of the specified FPU register."
        },
        {
          "name": "set_fpu_register_double",
          "parameters": [
            "int fpureg",
            "double value"
          ],
          "return_type": "void",
          "logic": "Sets the double value of the specified FPU register."
        },
        {
          "name": "set_fpu_register_invalid_result64",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "void",
          "logic": "Sets the specified FPU register with invalid result from float operation."
        },
        {
          "name": "set_fpu_register_invalid_result",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "void",
          "logic": "Sets the specified FPU register with invalid result from float operation."
        },
        {
          "name": "set_fpu_register_word_invalid_result",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "void",
          "logic": "Sets the specified FPU register's word with invalid result from float operation."
        },
        {
          "name": "set_fpu_register_invalid_result64",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "void",
          "logic": "Sets the specified FPU register with invalid result from double operation."
        },
        {
          "name": "set_fpu_register_invalid_result",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "void",
          "logic": "Sets the specified FPU register with invalid result from double operation."
        },
        {
          "name": "set_fpu_register_word_invalid_result",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "void",
          "logic": "Sets the specified FPU register's word with invalid result from double operation."
        },
        {
          "name": "get_fpu_register",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int64_t",
          "logic": "Gets the value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_word",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the word value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_signed_word",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the signed word value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_hi_word",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the high word value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_float",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "float",
          "logic": "Gets the float value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_double",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "double",
          "logic": "Gets the double value of the specified FPU register."
        },
        {
          "name": "set_cf_register",
          "parameters": [
            "int cfreg",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified condition flag register."
        },
        {
          "name": "get_cf_register",
          "parameters": [
            "int cfreg"
          ],
          "return_type": "bool",
          "logic": "Gets the value of the specified condition flag register."
        },
        {
          "name": "set_fcsr_rounding_mode",
          "parameters": [
            "FPURoundingMode mode"
          ],
          "return_type": "void",
          "logic": "Sets the FPU control and status register rounding mode."
        },
        {
          "name": "get_fcsr_rounding_mode",
          "parameters": [],
          "return_type": "unsigned int",
          "logic": "Gets the FPU control and status register rounding mode."
        },
        {
          "name": "set_fcsr_bit",
          "parameters": [
            "uint32_t cc",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets a bit in the FCSR."
        },
        {
          "name": "test_fcsr_bit",
          "parameters": [
            "uint32_t cc"
          ],
          "return_type": "bool",
          "logic": "Tests a bit in the FCSR."
        },
        {
          "name": "set_fcsr_round_error",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "bool",
          "logic": "Set FPU control and status register for round error."
        },
        {
          "name": "set_fcsr_round64_error",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "bool",
          "logic": "Set FPU control and status register for round 64 error."
        },
        {
          "name": "set_fcsr_round_error",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "bool",
          "logic": "Set FPU control and status register for round error."
        },
        {
          "name": "set_fcsr_round64_error",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "bool",
          "logic": "Set FPU control and status register for round 64 error."
        },
        {
          "name": "round_according_to_fcsr",
          "parameters": [
            "double toRound",
            "double* rounded",
            "int32_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a double value according to the FCSR settings."
        },
        {
          "name": "round64_according_to_fcsr",
          "parameters": [
            "double toRound",
            "double* rounded",
            "int64_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a double value to 64-bit according to the FCSR settings."
        },
        {
          "name": "round_according_to_fcsr",
          "parameters": [
            "float toRound",
            "float* rounded",
            "int32_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a float value according to the FCSR settings."
        },
        {
          "name": "round64_according_to_fcsr",
          "parameters": [
            "float toRound",
            "float* rounded",
            "int64_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a float value to 64-bit according to the FCSR settings."
        },
        {
          "name": "set_pc",
          "parameters": [
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Sets the Program Counter (PC) to the given value."
        },
        {
          "name": "get_pc",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Gets the Program Counter (PC) value."
        },
        {
          "name": "get_sp",
          "parameters": [],
          "return_type": "Address",
          "logic": "Gets the Stack Pointer (SP) value."
        },
        {
          "name": "StackLimit",
          "parameters": [
            "uintptr_t c_limit"
          ],
          "return_type": "uintptr_t",
          "logic": "Returns the stack limit with an additional safety margin."
        },
        {
          "name": "GetCentralStackView",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Return central stack view, without additional safety margins."
        },
        {
          "name": "Execute",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes LOONG64 instructions until the PC reaches end_sim_pc."
        },
        {
          "name": "Call",
          "parameters": [
            "Address entry",
            "Args... args"
          ],
          "return_type": "Return",
          "logic": "Calls a function at the given entry point with the given arguments."
        },
        {
          "name": "CallFP",
          "parameters": [
            "Address entry",
            "double d0",
            "double d1"
          ],
          "return_type": "double",
          "logic": "Alternative: call a 2-argument double function."
        },
        {
          "name": "PushAddress",
          "parameters": [
            "uintptr_t address"
          ],
          "return_type": "uintptr_t",
          "logic": "Pushes an address onto the JS stack."
        },
        {
          "name": "PopAddress",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Pops an address from the JS stack."
        },
        {
          "name": "set_last_debugger_input",
          "parameters": [
            "char* input"
          ],
          "return_type": "void",
          "logic": "Sets the last debugger input."
        },
        {
          "name": "last_debugger_input",
          "parameters": [],
          "return_type": "char*",
          "logic": "Returns the last debugger input."
        },
        {
          "name": "SetRedirectInstruction",
          "parameters": [
            "Instruction* instruction"
          ],
          "return_type": "void",
          "logic": "Sets the redirect instruction."
        },
        {
          "name": "ICacheMatch",
          "parameters": [
            "void* one",
            "void* two"
          ],
          "return_type": "bool",
          "logic": "Checks if two addresses match in the ICache."
        },
        {
          "name": "FlushICache",
          "parameters": [
            "base::CustomMatcherHashMap* i_cache",
            "void* start",
            "size_t size"
          ],
          "return_type": "void",
          "logic": "Flushes the ICache for the given address range."
        },
        {
          "name": "has_bad_pc",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if pc register contains one of the 'special_values' defined below (bad_ra, end_sim_pc)."
        },
        {
          "name": "ProbeMemory",
          "parameters": [
            "uintptr_t address",
            "uintptr_t access_size"
          ],
          "return_type": "bool",
          "logic": "Probes if an address range can be read."
        }
      ]
    },
    {
      "name": "Simulator::CallArgument",
      "properties": [
        "bits_",
        "type_"
      ],
      "methods": [
        {
          "name": "CallArgument",
          "parameters": [
            "T argument"
          ],
          "return_type": "CallArgument",
          "logic": "Constructor for general type arguments."
        },
        {
          "name": "CallArgument",
          "parameters": [
            "double argument"
          ],
          "return_type": "CallArgument",
          "logic": "Constructor for double type arguments."
        },
        {
          "name": "CallArgument",
          "parameters": [
            "float argument"
          ],
          "return_type": "CallArgument",
          "logic": "Constructor for float type arguments. Currently unimplemented."
        },
        {
          "name": "End",
          "parameters": [],
          "return_type": "CallArgument",
          "logic": "Returns a CallArgument indicating the end of the argument list."
        },
        {
          "name": "bits",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Returns the argument bits."
        },
        {
          "name": "IsEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this is the end of the argument list."
        },
        {
          "name": "IsGP",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this is a general-purpose argument."
        },
        {
          "name": "IsFP",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this is a floating-point argument."
        }
      ]
    },
    {
      "name": "Simulator::LocalMonitor",
      "properties": [
        "access_state_",
        "tagged_addr_",
        "size_"
      ],
      "methods": [
        {
          "name": "LocalMonitor",
          "parameters": [],
          "return_type": "LocalMonitor",
          "logic": "Constructor for LocalMonitor"
        },
        {
          "name": "NotifyLoad",
          "parameters": [],
          "return_type": "void",
          "logic": "Notify local monitor a load operation has occurred"
        },
        {
          "name": "NotifyLoadLinked",
          "parameters": [
            "uintptr_t addr",
            "TransactionSize size"
          ],
          "return_type": "void",
          "logic": "Notify local monitor a Load Linked operation has occurred"
        },
        {
          "name": "NotifyStore",
          "parameters": [],
          "return_type": "void",
          "logic": "Notify local monitor a store operation has occurred"
        },
        {
          "name": "NotifyStoreConditional",
          "parameters": [
            "uintptr_t addr",
            "TransactionSize size"
          ],
          "return_type": "bool",
          "logic": "Notify local monitor a Store Conditional operation has occurred"
        }
      ]
    },
    {
      "name": "Simulator::GlobalMonitor::LinkedAddress",
      "properties": [
        "access_state_",
        "tagged_addr_",
        "next_",
        "prev_",
        "failure_counter_"
      ],
      "methods": [
        {
          "name": "LinkedAddress",
          "parameters": [],
          "return_type": "LinkedAddress",
          "logic": "Constructor for the LinkedAddress class."
        }
      ]
    },
    {
      "name": "Simulator::GlobalMonitor",
      "properties": [
        "mutex",
        "head_"
      ],
      "methods": [
        {
          "name": "Get",
          "parameters": [],
          "return_type": "GlobalMonitor*",
          "logic": "Get GlobalMonitor Singleton"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Compare",
      "parameters": [
        "const T& a",
        "const T& b"
      ],
      "return_type": "int",
      "logic": "Compares two values of the same type. Returns 0 if equal, -1 if a < b, and 1 if a > b."
    },
    {
      "name": "Nabs",
      "parameters": [
        "T a"
      ],
      "return_type": "T",
      "logic": "Returns the negative absolute value of its argument. Only works for signed types."
    }
  ]
}