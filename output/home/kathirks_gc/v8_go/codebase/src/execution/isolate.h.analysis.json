{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/isolate.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/isolate.h\",\n  \"imports\": [\n    \"<atomic>\",\n    \"<cstddef>\",\n    \"<functional>\",\n    \"<list>\",\n    \"<memory>\",\n    \"<optional>\",\n    \"<queue>\",\n    \"<unordered_map>\",\n    \"<vector>\",\n    \"include/v8-context.h\",\n    \"include/v8-internal.h\",\n    \"include/v8-isolate.h\",\n    \"include/v8-metrics.h\",\n    \"include/v8-snapshot.h\",\n    \"src/base/macros.h\",\n    \"src/base/platform/mutex.h\",\n    \"src/base/platform/platform-posix.h\",\n    \"src/builtins/builtins.h\",\n    \"src/common/globals.h\",\n    \"src/common/thread-local-storage.h\",\n    \"src/debug/interface-types.h\",\n    \"src/execution/execution.h\",\n    \"src/execution/futex-emulation.h\",\n    \"src/execution/isolate-data.h\",\n    \"src/execution/messages.h\",\n    \"src/execution/mutex-guard-if-off-thread.h\",\n    \"src/execution/stack-guard.h\",\n    \"src/handles/handles.h\",\n    \"src/handles/traced-handles.h\",\n    \"src/heap/factory.h\",\n    \"src/heap/heap.h\",\n    \"src/heap/read-only-heap.h\",\n    \"src/init/isolate-group.h\",\n    \"src/objects/code.h\",\n    \"src/objects/contexts.h\",\n    \"src/objects/debug-objects.h\",\n    \"src/objects/js-objects.h\",\n    \"src/objects/tagged.h\",\n    \"src/runtime/runtime.h\",\n    \"src/sandbox/code-pointer-table.h\",\n    \"src/sandbox/external-pointer-table.h\",\n    \"src/sandbox/trusted-pointer-table.h\",\n    \"src/utils/allocation.h\",\n    \"src/runtime/runtime-utils.h\",\n    \"src/wasm/stacks.h\",\n    \"unicode/uversion.h\",\n    \"src/execution/encoded-c-signature.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Isolate::PerIsolateThreadData\",\n      \"properties\": [\n        \"isolate_\",\n        \"thread_id_\",\n        \"stack_limit_\",\n        \"thread_state_\",\n        \"simulator_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PerIsolateThreadData\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ThreadId thread_id\"\n          ],\n          \"return_type\": \"constructor\",\n          \"logic\": \"Initializes a PerIsolateThreadData object with the given isolate and thread ID.\"\n        },\n        {\n          \"name\": \"~PerIsolateThreadData\",\n          \"parameters\": [],\n          \"return_type\": \"destructor\",\n          \"logic\": \"Destroys a PerIsolateThreadData object.\"\n        },\n        {\n          \"name\": \"isolate\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the isolate associated with this thread data.\"\n        },\n        {\n          \"name\": \"thread_id\",\n          \"parameters\": [],\n          \"return_type\": \"ThreadId\",\n          \"logic\": \"Returns the thread ID associated with this thread data.\"\n        },\n        {\n          \"name\": \"stack_limit\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Returns the stack limit for this thread.\"\n        },\n        {\n          \"name\": \"thread_state\",\n          \"parameters\": [],\n          \"return_type\": \"ThreadState*\",\n          \"logic\": \"Returns the thread state for this thread.\"\n        },\n        {\n          \"name\": \"simulator\",\n          \"parameters\": [],\n          \"return_type\": \"Simulator*\",\n          \"logic\": \"Returns the simulator for this thread. (Only in simulator mode)\"\n        },\n        {\n          \"name\": \"Matches\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ThreadId thread_id\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given isolate and thread ID match this thread data.\"\n        },\n        {\n          \"name\": \"set_stack_limit\",\n          \"parameters\": [\n            \"uintptr_t v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets stack_limit_ property\"\n        },\n                {\n          \"name\": \"set_thread_state\",\n          \"parameters\": [\n            \"ThreadState* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets thread_state_ property\"\n        },\n                {\n          \"name\": \"set_simulator\",\n          \"parameters\": [\n            \"Simulator* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets simulator_ property\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Isolate::PromiseHandler\",\n      \"properties\": [\n        \"function_info\",\n        \"async\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"HiddenFactory\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"Isolate\",\n      \"properties\": [\n        \"isolate_data_\",\n        \"is_shared_space_isolate_\",\n        \"isolate_group_\",\n        \"heap_\",\n        \"read_only_heap_\",\n        \"string_table_\",\n        \"string_forwarding_table_\",\n        \"id_\",\n        \"entry_stack_\",\n        \"stack_trace_nesting_level_\",\n        \"was_locker_ever_used_\",\n        \"incomplete_message_\",\n        \"isolate_addresses_\",\n        \"bootstrapper_\",\n        \"tiering_manager_\",\n        \"compilation_cache_\",\n        \"async_counters_\",\n        \"break_access_\",\n        \"feedback_vector_access_\",\n        \"internalized_string_access_\",\n        \"full_transition_array_access_\",\n        \"shared_function_info_access_\",\n        \"map_updater_access_\",\n        \"boilerplate_migration_access_\",\n        \"v8_file_logger_\",\n        \"load_stub_cache_\",\n        \"store_stub_cache_\",\n        \"define_own_stub_cache_\",\n        \"current_deoptimizer_\",\n        \"deoptimizer_lazy_throw_\",\n        \"materialized_object_store_\",\n        \"capture_stack_trace_for_uncaught_exceptions_\",\n        \"stack_trace_for_uncaught_exceptions_frame_limit_\",\n        \"stack_trace_for_uncaught_exceptions_options_\",\n        \"descriptor_lookup_cache_\",\n        \"handle_scope_implementer_\",\n        \"unicode_cache_\",\n        \"allocator_\",\n        \"inner_pointer_to_code_cache_\",\n        \"global_handles_\",\n        \"traced_handles_\",\n        \"eternal_handles_\",\n        \"thread_manager_\",\n        \"bigint_processor_\",\n        \"runtime_state_\",\n        \"builtins_\",\n        \"setup_delegate_\",\n        \"jsregexp_uncanonicalize_\",\n        \"jsregexp_canonrange_\",\n        \"regexp_macro_assembler_canonicalize_\",\n        \"regexp_stack_\",\n        \"regexp_indices_\",\n        \"active_dynamic_regexp_result_vectors_\",\n        \"date_cache_\",\n        \"default_locale_\",\n        \"persistent_handles_list_\",\n        \"baseline_batch_compiler_\",\n        \"maglev_concurrent_dispatcher_\",\n        \"optimizing_compile_dispatcher_\",\n        \"turbo_stats_\",\n        \"maglev_stats_\",\n        \"code_tracer_\",\n        \"stress_deopt_count_\",\n        \"force_slow_path_\",\n        \"jitless_\",\n        \"stack_size_\",\n        \"random_number_generator_\",\n        \"fuzzer_rng_\",\n        \"next_optimization_id_\",\n        \"next_module_async_evaluation_ordinal_\",\n        \"call_completed_callbacks_\",\n        \"before_call_entered_callbacks_\",\n        \"promise_reject_callback_\",\n        \"prepare_stack_trace_callback_\",\n        \"add_crash_key_callback_\",\n        \"etw_tracing_enabled_\",\n        \"etw_in_rundown_\",\n        \"etw_trace_interpreted_frames_\",\n        \"is_loading_\",\n        \"code_coverage_mode_\",\n        \"priority_\",\n        \"battery_saver_mode_enabled_\",\n        \"memory_saver_mode_enabled_\",\n        \"allow_atomics_wait_\",\n        \"flush_denormals_\",\n        \"managed_ptr_destructors_\",\n        \"elements_deletion_counter_\",\n        \"wasm_stacks_\",\n        \"detachable_contexts_\",\n        \"startup_object_cache_\",\n        \"shared_heap_object_cache_\",\n        \"builtins_constants_table_builder_\",\n        \"is_short_builtin_calls_enabled_\",\n        \"array_buffer_allocator_\",\n        \"array_buffer_allocator_shared_\",\n        \"array_buffer_max_size_\",\n        \"futex_wait_list_node_\",\n        \"cancelable_task_manager_\",\n        \"ast_string_constants_\",\n        \"interpreter_\",\n        \"compiler_cache_\",\n        \"compiler_zone_\",\n        \"lazy_compile_dispatcher_\",\n        \"host_import_module_dynamically_callback_\",\n        \"host_import_module_with_phase_dynamically_callback_\",\n        \"host_initialize_import_meta_object_callback_\",\n        \"host_create_shadow_realm_context_callback_\",\n        \"embedded_file_writer_\",\n        \"externally_compiled_filenames_\",\n        \"detailed_source_positions_for_profiling_\",\n        \"locals_blocklist_cache_\",\n        \"enable_ro_allocation_for_snapshot_\",\n        \"context_id_to_context_\",\n        \"exception_propagation_callback_\",\n        \"wasm_execution_timer_\",\n        \"owns_shareable_data_\",\n        \"shared_space_isolate_\",\n        \"shared_struct_type_registry_\",\n        \"global_safepoint_\",\n        \"log_object_relocation_\",\n        \"promise_hook_flags_\",\n        \"promise_hook_\",\n        \"code_pointer_tables_\",\n        \"shared_external_pointer_space_\",\n        \"shared_trusted_pointer_space_\",\n        \"simulator_data_\",\n        \"main_thread_local_isolate_\",\n        \"is_frozen_\",\n        \"code_pages_\",\n        \"console_delegate_\",\n        \"async_event_delegate_\",\n        \"node_observer_\",\n        \"metrics_recorder_\",\n        \"num_cpu_profilers_\",\n        \"formatting_stack_trace_\",\n        \"disable_bytecode_flushing_\",\n        \"last_console_context_id_\",\n        \"inspector_\",\n        \"embedder_wrapper_type_index_\",\n        \"embedder_wrapper_object_index_\",\n        \"javascript_execution_assert_\",\n        \"javascript_execution_throws_\",\n        \"javascript_execution_dump_\",\n        \"javascript_execution_counter_\",\n        \"deoptimization_assert_\",\n        \"compilation_assert_\",\n        \"no_exception_assert_\",\n        \"wasm_switch_to_the_central_stack_counter_\",\n        \"exception_behavior_\",\n        \"oom_behavior_\",\n        \"event_logger_\",\n        \"modify_code_gen_callback_\",\n        \"allow_wasm_code_gen_callback_\",\n        \"wasm_module_callback_\",\n        \"wasm_instance_callback_\",\n        \"sharedarraybuffer_constructor_enabled_callback_\",\n        \"wasm_streaming_callback_\",\n        \"wasm_async_resolve_promise_callback_\",\n        \"wasm_load_source_map_callback_\",\n        \"wasm_imported_strings_enabled_callback_\",\n        \"compile_hints_magic_enabled_callback_\",\n        \"wasm_jspi_enabled_callback_\",\n        \"is_js_api_wrapper_native_error_callback_\",\n        \"relocatable_top_\",\n        \"string_stream_debug_object_cache_\",\n        \"string_stream_current_security_token_\",\n        \"api_external_references_\",\n        \"external_reference_map_\",\n        \"root_index_map_\",\n        \"default_microtask_queue_\",\n        \"code_tracer_\",\n        \"promise_reject_callback_\",\n        \"snapshot_blob_\",\n        \"code_and_metadata_size_\",\n        \"bytecode_and_metadata_size_\",\n        \"external_script_source_size_\",\n        \"num_cpu_profilers_\",\n        \"formatting_stack_trace_\",\n        \"disable_bytecode_flushing_\",\n        \"last_console_context_id_\",\n        \"embedder_wrapper_type_index_\",\n        \"embedder_wrapper_object_index_\",\n        \"javascript_execution_assert_\",\n        \"javascript_execution_throws_\",\n        \"javascript_execution_dump_\",\n        \"javascript_execution_counter_\",\n        \"deoptimization_assert_\",\n        \"compilation_assert_\",\n        \"no_exception_assert_\",\n        \"wasm_switch_to_the_central_stack_counter_\",\n        \"cage_base_\",\n        \"code_cage_base_\",\n        \"initialized_from_snapshot_\",\n        \"has_fatal_error_\",\n        \"wasm_revec_verifier_for_test_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"New\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Creates a new Isolate object.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"IsolateGroup* isolate_group\"\n          ],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Creates a new Isolate object belonging to the specified IsolateGroup.\"\n        },\n        {\n          \"name\": \"Delete\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes an Isolate object.\"\n        },\n        {\n          \"name\": \"SetUpFromReadOnlyArtifacts\",\n          \"parameters\": [\n            \"ReadOnlyArtifacts* artifacts\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets up the isolate from the read-only artifacts.\"\n        },\n        {\n          \"name\": \"set_read_only_heap\",\n          \"parameters\": [\n            \"ReadOnlyHeap* ro_heap\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the read-only heap for this isolate.\"\n        },\n        {\n          \"name\": \"page_allocator\",\n          \"parameters\": [],\n          \"return_type\": \"v8::PageAllocator*\",\n          \"logic\": \"Returns the page allocator used for V8 heap pages.\"\n        },\n        {\n          \"name\": \"CurrentPerIsolateThreadData\",\n          \"parameters\": [],\n          \"return_type\": \"PerIsolateThreadData*\",\n          \"logic\": \"Returns the PerIsolateThreadData for the current thread.\"\n        },\n        {\n          \"name\": \"TryGetCurrent\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Attempts to get the isolate for the current thread.\"\n        },\n        {\n          \"name\": \"Current\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the current Isolate.\"\n        },\n        {\n          \"name\": \"SetCurrent\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current isolate.\"\n        },\n        {\n          \"name\": \"IsCurrent\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this Isolate is the current Isolate for the current thread.\"\n        },\n        {\n          \"name\": \"InitializeLoggingAndCounters\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes logging and counters for this Isolate.\"\n        },\n        {\n          \"name\": \"InitializeCounters\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Initializes the counters.  Returns false if already initialized.\"\n        },\n        {\n          \"name\": \"InitWithoutSnapshot\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Initializes the Isolate without using a snapshot.\"\n        },\n        {\n          \"name\": \"InitWithSnapshot\",\n          \"parameters\": [\n            \"SnapshotData* startup_snapshot_data\",\n            \"SnapshotData* read_only_snapshot_data\",\n            \"SnapshotData* shared_heap_snapshot_data\",\n            \"bool can_rehash\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Initializes the Isolate with a snapshot.\"\n        },\n        {\n          \"name\": \"IsInUse\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the Isolate is currently in use by any thread.\"\n        },\n        {\n          \"name\": \"ReleaseSharedPtrs\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Releases shared pointers held by the isolate.\"\n        },\n        {\n          \"name\": \"ClearSerializerData\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the serializer data associated with the isolate.\"\n        },\n        {\n          \"name\": \"UpdateLogObjectRelocation\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates the log object relocation.\"\n        },\n        {\n          \"name\": \"Enter\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Marks the current thread as running in this Isolate.\"\n        },\n        {\n          \"name\": \"Exit\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Marks the current thread as no longer running in this Isolate.\"\n        },\n        {\n          \"name\": \"FindOrAllocatePerThreadDataForThisThread\",\n          \"parameters\": [],\n          \"return_type\": \"PerIsolateThreadData*\",\n          \"logic\": \"Finds or allocates PerIsolateThreadData for the current thread.\"\n        },\n        {\n          \"name\": \"FindPerThreadDataForThisThread\",\n          \"parameters\": [],\n          \"return_type\": \"PerIsolateThreadData*\",\n          \"logic\": \"Finds PerIsolateThreadData for the current thread or returns nullptr.\"\n        },\n        {\n          \"name\": \"FindPerThreadDataForThread\",\n          \"parameters\": [\n            \"ThreadId thread_id\"\n          ],\n          \"return_type\": \"PerIsolateThreadData*\",\n          \"logic\": \"Finds PerIsolateThreadData for the given thread ID, or returns nullptr.\"\n        },\n        {\n          \"name\": \"DiscardPerThreadDataForThisThread\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Discards the PerIsolateThreadData for this thread. If one does not exist, no-op.\"\n        },\n        {\n          \"name\": \"break_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::RecursiveMutex*\",\n          \"logic\": \"Returns the mutex for serializing access to break control structures.\"\n        },\n        {\n          \"name\": \"feedback_vector_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::Mutex*\",\n          \"logic\": \"Returns the mutex for thread-safe concurrent reads of FeedbackVectors.\"\n        },\n        {\n          \"name\": \"internalized_string_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::Mutex*\",\n          \"logic\": \"Returns the mutex for thread-safe concurrent reads of InternalizedStrings.\"\n        },\n        {\n          \"name\": \"full_transition_array_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::Mutex*\",\n          \"logic\": \"Returns the mutex for thread-safe concurrent reads of TransitionArrays of kind kFullTransitionArray.\"\n        },\n        {\n          \"name\": \"shared_function_info_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::Mutex*\",\n          \"logic\": \"Returns the mutex for thread-safe concurrent reads of SharedFunctionInfos.\"\n        },\n        {\n          \"name\": \"map_updater_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::Mutex*\",\n          \"logic\": \"Returns the mutex for map update operations.\"\n        },\n        {\n          \"name\": \"boilerplate_migration_access\",\n          \"parameters\": [],\n          \"return_type\": \"base::Mutex*\",\n          \"logic\": \"Returns the mutex for JSObject boilerplate migrations.\"\n        },\n        {\n          \"name\": \"read_only_artifacts\",\n          \"parameters\": [],\n          \"return_type\": \"ReadOnlyArtifacts*\",\n          \"logic\": \"Returns the read-only artifacts associated with the isolate.\"\n        },\n        {\n          \"name\": \"string_table\",\n          \"parameters\": [],\n          \"return_type\": \"StringTable*\",\n          \"logic\": \"Returns the isolate's string table.\"\n        },\n        {\n          \"name\": \"string_forwarding_table\",\n          \"parameters\": [],\n          \"return_type\": \"StringForwardingTable*\",\n          \"logic\": \"Returns the isolate's string forwarding table.\"\n        },\n        {\n          \"name\": \"shared_struct_type_registry\",\n          \"parameters\": [],\n          \"return_type\": \"SharedStructTypeRegistry*\",\n          \"logic\": \"Returns the shared struct type registry.\"\n        },\n        {\n          \"name\": \"get_address_from_id\",\n          \"parameters\": [\n            \"IsolateAddressId id\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the address associated with the given IsolateAddressId.\"\n        },\n        {\n          \"name\": \"context\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Context>\",\n          \"logic\": \"Returns the current context.\"\n        },\n        {\n          \"name\": \"set_context\",\n          \"parameters\": [\n            \"Tagged<Context> context\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current context.\"\n        },\n        {\n          \"name\": \"context_address\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Context>*\",\n          \"logic\": \"Returns the address of the current context.\"\n        },\n        {\n          \"name\": \"topmost_script_having_context\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Context>\",\n          \"logic\": \"Returns the topmost script-having execution context, if known.\"\n        },\n        {\n          \"name\": \"set_topmost_script_having_context\",\n          \"parameters\": [\n            \"Tagged<Context> context\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the topmost script-having execution context.\"\n        },\n        {\n          \"name\": \"clear_topmost_script_having_context\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the topmost script-having execution context.\"\n        },\n        {\n          \"name\": \"topmost_script_having_context_address\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Context>*\",\n          \"logic\": \"Returns the address of the topmost script-having execution context.\"\n        },\n        {\n          \"name\": \"set_thread_id\",\n          \"parameters\": [\n            \"ThreadId id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets current thread id\"\n        },\n                {\n          \"name\": \"thread_id\",\n          \"parameters\": [],\n          \"return_type\": \"ThreadId\",\n          \"logic\": \"Gets current thread id\"\n        },\n        {\n          \"name\": \"InstallConditionalFeatures\",\n          \"parameters\": [\n            \"DirectHandle<NativeContext> context\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Installs conditional features into the context.\"\n        },\n        {\n          \"name\": \"WasmInitJSPIFeature\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"WebAssembly specific JSPI feature initialisation.\"\n        },\n        {\n          \"name\": \"IsSharedArrayBufferConstructorEnabled\",\n          \"parameters\": [\n            \"DirectHandle<NativeContext> context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if the SharedArrayBuffer constructor is enabled in the context.\"\n        },\n        {\n          \"name\": \"IsWasmStringRefEnabled\",\n          \"parameters\": [\n            \"DirectHandle<NativeContext> context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks whether Wasm string references are enabled in the given context.\"\n        },\n        {\n          \"name\": \"IsWasmImportedStringsEnabled\",\n          \"parameters\": [\n            \"DirectHandle<NativeContext> context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if Wasm imported strings are enabled for the given context.\"\n        },\n        {\n          \"name\": \"IsWasmJSPIRequested\",\n          \"parameters\": [\n            \"DirectHandle<NativeContext> context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if JSPI flag has been requested.\"\n        },\n        {\n          \"name\": \"IsWasmJSPIEnabled\",\n          \"parameters\": [\n            \"DirectHandle<NativeContext> context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if JSPI has been enabled successfully.\"\n        },\n        {\n          \"name\": \"IsCompileHintsMagicEnabled\",\n          \"parameters\": [\n            \"Handle<NativeContext> context\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if CompileHintsMagic is enabled\"\n        },\n                {\n          \"name\": \"has_exception\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if an exception is set\"\n        },\n        {\n          \"name\": \"set_exception\",\n          \"parameters\": [\n            \"Tagged<Object> exception_obj\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the exception\"\n        },\n                {\n          \"name\": \"clear_exception\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clear thrown exception.\"\n        },\n        {\n          \"name\": \"clear_internal_exception\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the internal exception.\"\n        },\n        {\n          \"name\": \"has_pending_message\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if pending message is set\"\n        },\n        {\n          \"name\": \"set_pending_message\",\n          \"parameters\": [\n            \"Tagged<Object> message_obj\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the pending message\"\n        },\n                {\n          \"name\": \"clear_pending_message\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the pending message\"\n        },\n        {\n          \"name\": \"VerifyBuiltinsResult\",\n          \"parameters\": [\n            \"Tagged<Object> result\"\n          ],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Verifies that the result of a builtin call is valid (DEBUG mode only).\"\n        },\n        {\n          \"name\": \"VerifyBuiltinsResult\",\n          \"parameters\": [\n            \"ObjectPair pair\"\n          ],\n          \"return_type\": \"ObjectPair\",\n          \"logic\": \"Verifies that the result of a builtin call is valid (DEBUG mode only).\"\n        },\n        {\n          \"name\": \"TopExceptionHandlerType\",\n          \"parameters\": [\n            \"Tagged<Object> exception\"\n          ],\n          \"return_type\": \"ExceptionHandlerType\",\n          \"logic\": \"Determine the type of the top exception handler.\"\n        },\n        {\n          \"name\": \"is_catchable_by_javascript\",\n          \"parameters\": [\n            \"Tagged<Object> exception\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the given exception is catchable by javascript.\"\n        },\n        {\n          \"name\": \"is_catchable_by_wasm\",\n          \"parameters\": [\n            \"Tagged<Object> exception\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the given exception is catchable by Wasm.\"\n        },\n                {\n          \"name\": \"is_execution_terminating\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Check if exception is terminating execution\"\n        },\n        {\n          \"name\": \"c_entry_fp\",\n          \"parameters\": [\n            \"ThreadLocalTop* thread\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Accessor for accessing c_entry_fp from ThreadLocalTop\"\n        },\n        {\n          \"name\": \"handler\",\n          \"parameters\": [\n            \"ThreadLocalTop* thread\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Accessor for accessing handler from ThreadLocalTop\"\n        },\n                {\n          \"name\": \"c_function\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the c_function value from the current ThreadLocalTop.\"\n        },\n        {\n          \"name\": \"RegisterDeserializerStarted\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Increment active deserializers count\"\n        },\n        {\n          \"name\": \"RegisterDeserializerFinished\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decrement active deserializers count\"\n        },\n        {\n          \"name\": \"has_active_deserializer\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Check if there are active deserializers count\"\n        },\n        {\n          \"name\": \"js_entry_sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the js_entry_sp value from the current ThreadLocalTop.\"\n        },\n        {\n          \"name\": \"GetCodePages\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<MemoryRange>*\",\n          \"logic\": \"Returns the code pages.\"\n        },\n        {\n          \"name\": \"SetCodePages\",\n          \"parameters\": [\n            \"std::vector<MemoryRange>* new_code_pages\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the code pages.\"\n        },\n        {\n          \"name\": \"global_object\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<JSGlobalObject>\",\n          \"logic\": \"Returns the global object of the current context.\"\n        },\n        {\n          \"name\": \"global_proxy\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<JSGlobalProxy>\",\n          \"logic\": \"Returns the global proxy object of the current context.\"\n        },\n        {\n          \"name\": \"ArchiveSpacePerThread\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the size of ThreadLocalTop, which is needed for per thread archiving\"\n        },\n        {\n          \"name\": \"FreeThreadResources\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees thread-local resources\"\n        },\n        {\n          \"name\": \"WalkCallStackAndPromiseTree\",\n          \"parameters\": [\n            \"MaybeDirectHandle<JSPromise> rejected_promise\",\n            \"const std::function<void(PromiseHandler)>& callback\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Walks the call stack and promise tree and calls a callback on every function an exception is likely to hit. Used in catch prediction.\"\n        },\n        {\n          \"name\": \"ExceptionScope\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"constructor\",\n          \"logic\": \"Exception scope constructor\"\n        },\n                {\n          \"name\": \"~ExceptionScope\",\n          \"parameters\": [],\n          \"return_type\": \"destructor\",\n          \"logic\": \"Exception scope destructor\"\n        },\n        {\n          \"name\": \"SetCaptureStackTraceForUncaughtExceptions\",\n          \"parameters\": [\n            \"bool capture\",\n            \"int frame_limit\",\n            \"StackTrace::StackTraceOptions options\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the capture stack trace flag for uncaught exceptions.\"\n        },\n        {\n          \"name\": \"get_capture_stack_trace_for_uncaught_exceptions\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if capture stack trace for uncaught exceptions is enabled.\"\n        },\n        {\n          \"name\": \"SetAbortOnUncaughtExceptionCallback\",\n          \"parameters\": [\n            \"v8::Isolate::AbortOnUncaughtExceptionCallback callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the abort on uncaught exception callback.\"\n        },\n        {\n          \"name\": \"PrintCurrentStackTrace\",\n          \"parameters\": [\n            \"std::ostream& out\",\n            \"PrintCurrentStackTraceFilterCallback should_include_frame_callback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the current stack trace to the given output stream.\"\n        },\n        {\n          \"name\": \"PrintStack\",\n          \"parameters\": [\n            \"StringStream* accumulator"
}