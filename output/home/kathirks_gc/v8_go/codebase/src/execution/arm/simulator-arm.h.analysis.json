{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/arm/simulator-arm.h",
  "imports": [
    "src/common/globals.h",
    "src/base/hashmap.h",
    "src/base/lazy-instance.h",
    "src/base/platform/mutex.h",
    "src/codegen/arm/constants-arm.h",
    "src/execution/simulator-base.h",
    "src/utils/allocation.h",
    "src/utils/boxed-float.h"
  ],
  "classes": [
    {
      "name": "CachePage",
      "properties": [
        "LINE_VALID",
        "LINE_INVALID",
        "kPageShift",
        "kPageSize",
        "kPageMask",
        "kLineShift",
        "kLineLength",
        "kLineMask",
        "data_[kPageSize]",
        "kValidityMapSize",
        "validity_map_[kValidityMapSize]"
      ],
      "methods": [
        {
          "name": "CachePage",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor that initializes the validity map to LINE_INVALID, marking all cache lines as invalid."
        },
        {
          "name": "ValidityByte",
          "parameters": [
            "int offset"
          ],
          "return_type": "char*",
          "logic": "Returns a pointer to the validity byte for the given offset."
        },
        {
          "name": "CachedData",
          "parameters": [
            "int offset"
          ],
          "return_type": "char*",
          "logic": "Returns a pointer to the cached data at the given offset."
        }
      ]
    },
    {
      "name": "Simulator",
      "properties": [
        "no_reg",
        "r0",
        "r1",
        "r2",
        "r3",
        "r4",
        "r5",
        "r6",
        "r7",
        "r8",
        "r9",
        "r10",
        "r11",
        "r12",
        "r13",
        "r14",
        "r15",
        "num_registers",
        "fp",
        "ip",
        "sp",
        "lr",
        "pc",
        "s0",
        "s1",
        "s2",
        "s3",
        "s4",
        "s5",
        "s6",
        "s7",
        "s8",
        "s9",
        "s10",
        "s11",
        "s12",
        "s13",
        "s14",
        "s15",
        "s16",
        "s17",
        "s18",
        "s19",
        "s20",
        "s21",
        "s22",
        "s23",
        "s24",
        "s25",
        "s26",
        "s27",
        "s28",
        "s29",
        "s30",
        "s31",
        "num_s_registers",
        "d0",
        "d1",
        "d2",
        "d3",
        "d4",
        "d5",
        "d6",
        "d7",
        "d8",
        "d9",
        "d10",
        "d11",
        "d12",
        "d13",
        "d14",
        "d15",
        "d16",
        "d17",
        "d18",
        "d19",
        "d20",
        "d21",
        "d22",
        "d23",
        "d24",
        "d25",
        "d26",
        "d27",
        "d28",
        "d29",
        "d30",
        "d31",
        "num_d_registers",
        "q0",
        "q1",
        "q2",
        "q3",
        "q4",
        "q5",
        "q6",
        "q7",
        "q8",
        "q9",
        "q10",
        "q11",
        "q12",
        "q13",
        "q14",
        "q15",
        "num_q_registers",
        "instruction_tracing_",
        "stack_",
        "kAllocatedStackSize",
        "kStackMargin",
        "kAdditionalStackMargin",
        "kUsableStackSize",
        "pc_modified_",
        "icount_",
        "last_debugger_input_",
        "break_pc_",
        "break_instr_",
        "isolate_",
        "kNumOfWatchedStops",
        "kStopDisabledBit",
        "watched_stops_[kNumOfWatchedStops]",
        "local_monitor_",
        "global_monitor_processor_",
        "global_monitor_"
      ],
      "methods": [
        {
          "name": "Simulator",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "explicit",
          "logic": "Constructor for the ARM simulator, taking an Isolate pointer."
        },
        {
          "name": "~Simulator",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the ARM simulator."
        },
        {
          "name": "current",
          "parameters": [
            "v8::internal::Isolate* isolate"
          ],
          "return_type": "static Simulator*",
          "logic": "Returns the currently executing Simulator instance for the given Isolate.  Potentially one for each native thread."
        },
        {
          "name": "set_register",
          "parameters": [
            "int reg",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified general-purpose register."
        },
        {
          "name": "get_register",
          "parameters": [
            "int reg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the value of the specified general-purpose register."
        },
        {
          "name": "get_double_from_register_pair",
          "parameters": [
            "int reg"
          ],
          "return_type": "double",
          "logic": "Gets a double value from a register pair."
        },
        {
          "name": "set_register_pair_from_double",
          "parameters": [
            "int reg",
            "double* value"
          ],
          "return_type": "void",
          "logic": "Sets a register pair from a double value."
        },
        {
          "name": "set_dw_register",
          "parameters": [
            "int dreg",
            "const int* dbl"
          ],
          "return_type": "void",
          "logic": "Sets a double word register."
        },
        {
          "name": "get_d_register",
          "parameters": [
            "int dreg",
            "uint64_t* value"
          ],
          "return_type": "void",
          "logic": "Gets the value of a VFP D register."
        },
        {
          "name": "set_d_register",
          "parameters": [
            "int dreg",
            "const uint64_t* value"
          ],
          "return_type": "void",
          "logic": "Sets the value of a VFP D register."
        },
        {
          "name": "get_d_register",
          "parameters": [
            "int dreg",
            "uint32_t* value"
          ],
          "return_type": "void",
          "logic": "Gets the value of a VFP D register as 32-bit unsigned int."
        },
        {
          "name": "set_d_register",
          "parameters": [
            "int dreg",
            "const uint32_t* value"
          ],
          "return_type": "void",
          "logic": "Sets the value of a VFP D register as 32-bit unsigned int."
        },
        {
          "name": "get_neon_register",
          "parameters": [
            "int reg",
            "T (&value)[SIZE / sizeof(T)]"
          ],
          "return_type": "void",
          "logic": "Gets the value of a NEON register."
        },
        {
          "name": "set_neon_register",
          "parameters": [
            "int reg",
            "const T (&value)[SIZE / sizeof(T)]"
          ],
          "return_type": "void",
          "logic": "Sets the value of a NEON register."
        },
        {
          "name": "set_s_register",
          "parameters": [
            "int reg",
            "unsigned int value"
          ],
          "return_type": "void",
          "logic": "Sets the value of an S register (single-precision floating-point)."
        },
        {
          "name": "get_s_register",
          "parameters": [
            "int reg"
          ],
          "return_type": "unsigned int",
          "logic": "Gets the value of an S register (single-precision floating-point)."
        },
        {
          "name": "set_d_register_from_double",
          "parameters": [
            "int dreg",
            "const Float64 dbl"
          ],
          "return_type": "void",
          "logic": "Sets the value of a D register from a Float64 value."
        },
        {
          "name": "set_d_register_from_double",
          "parameters": [
            "int dreg",
            "const double dbl"
          ],
          "return_type": "void",
          "logic": "Sets the value of a D register from a double value."
        },
        {
          "name": "get_double_from_d_register",
          "parameters": [
            "int dreg"
          ],
          "return_type": "Float64",
          "logic": "Gets a Float64 value from a D register."
        },
        {
          "name": "set_s_register_from_float",
          "parameters": [
            "int sreg",
            "const Float32 flt"
          ],
          "return_type": "void",
          "logic": "Sets the value of an S register from a Float32 value."
        },
        {
          "name": "set_s_register_from_float",
          "parameters": [
            "int sreg",
            "const float flt"
          ],
          "return_type": "void",
          "logic": "Sets the value of an S register from a float value."
        },
        {
          "name": "get_float_from_s_register",
          "parameters": [
            "int sreg"
          ],
          "return_type": "Float32",
          "logic": "Gets a Float32 value from an S register."
        },
        {
          "name": "set_s_register_from_sinteger",
          "parameters": [
            "int sreg",
            "const int sint"
          ],
          "return_type": "void",
          "logic": "Sets the value of an S register from a signed integer."
        },
        {
          "name": "get_sinteger_from_s_register",
          "parameters": [
            "int sreg"
          ],
          "return_type": "int",
          "logic": "Gets a signed integer from an S register."
        },
        {
          "name": "set_pc",
          "parameters": [
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the Program Counter (PC) to a specific value."
        },
        {
          "name": "get_pc",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Gets the value of the Program Counter (PC)."
        },
        {
          "name": "get_sp",
          "parameters": [],
          "return_type": "Address",
          "logic": "Gets the Stack Pointer (SP)."
        },
        {
          "name": "StackLimit",
          "parameters": [
            "uintptr_t c_limit"
          ],
          "return_type": "uintptr_t",
          "logic": "Returns the stack limit, adding a safety margin to prevent overflows."
        },
        {
          "name": "StackBase",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the base address of the simulator stack."
        },
        {
          "name": "GetCentralStackView",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns the central stack view, without additional safety margins."
        },
        {
          "name": "IterateRegistersAndStack",
          "parameters": [
            "::heap::base::StackVisitor* visitor"
          ],
          "return_type": "void",
          "logic": "Iterates through the registers and stack, using the provided stack visitor."
        },
        {
          "name": "Execute",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes ARM instructions until the PC reaches end_sim_pc."
        },
        {
          "name": "Call",
          "parameters": [
            "Address entry",
            "Args... args"
          ],
          "return_type": "Return",
          "logic": "Calls a function at the specified entry point with variadic arguments."
        },
        {
          "name": "CallFP",
          "parameters": [
            "Address entry",
            "double d0",
            "double d1"
          ],
          "return_type": "Return",
          "logic": "Calls a function at the specified entry point with two double arguments."
        },
        {
          "name": "PushAddress",
          "parameters": [
            "uintptr_t address"
          ],
          "return_type": "uintptr_t",
          "logic": "Pushes an address onto the JS stack."
        },
        {
          "name": "PopAddress",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Pops an address from the JS stack."
        },
        {
          "name": "set_last_debugger_input",
          "parameters": [
            "ArrayUniquePtr<char> input"
          ],
          "return_type": "void",
          "logic": "Sets the last debugger input."
        },
        {
          "name": "last_debugger_input",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the last debugger input."
        },
        {
          "name": "SetRedirectInstruction",
          "parameters": [
            "Instruction* instruction"
          ],
          "return_type": "static void",
          "logic": "Sets a redirect instruction."
        },
        {
          "name": "ICacheMatch",
          "parameters": [
            "void* one",
            "void* two"
          ],
          "return_type": "static bool",
          "logic": "Checks if two ICache entries match."
        },
        {
          "name": "FlushICache",
          "parameters": [
            "base::CustomMatcherHashMap* i_cache",
            "void* start",
            "size_t size"
          ],
          "return_type": "static void",
          "logic": "Flushes the ICache for the specified region."
        },
        {
          "name": "has_bad_pc",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the PC register contains one of the special values (bad_lr, end_sim_pc)."
        },
        {
          "name": "use_eabi_hardfloat",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the EABI variant for double arguments is in use."
        },
        {
          "name": "InstructionTracingEnabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if instruction tracing is enabled."
        },
        {
          "name": "ToggleInstructionTracing",
          "parameters": [],
          "return_type": "void",
          "logic": "Toggles instruction tracing on or off."
        }
      ]
    },
    {
      "name": "Simulator::LocalMonitor",
      "properties": [
        "access_state_",
        "tagged_addr_",
        "size_"
      ],
      "methods": [
        {
          "name": "LocalMonitor",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the LocalMonitor. Initializes its state."
        },
        {
          "name": "NotifyLoad",
          "parameters": [
            "int32_t addr"
          ],
          "return_type": "void",
          "logic": "Notifies the monitor of a load operation."
        },
        {
          "name": "NotifyLoadExcl",
          "parameters": [
            "int32_t addr",
            "TransactionSize size"
          ],
          "return_type": "void",
          "logic": "Notifies the monitor of an exclusive load operation."
        },
        {
          "name": "NotifyStore",
          "parameters": [
            "int32_t addr"
          ],
          "return_type": "void",
          "logic": "Notifies the monitor of a store operation."
        },
        {
          "name": "NotifyStoreExcl",
          "parameters": [
            "int32_t addr",
            "TransactionSize size"
          ],
          "return_type": "bool",
          "logic": "Notifies the monitor of an exclusive store operation. Returns true if the store is allowed."
        }
      ]
    },
    {
      "name": "Simulator::GlobalMonitor",
      "properties": [
        "head_",
        "num_processors_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "NotifyLoadExcl_Locked",
          "parameters": [
            "int32_t addr",
            "Processor* processor"
          ],
          "return_type": "void",
          "logic": "Notifies the global monitor of an exclusive load operation, locked."
        },
        {
          "name": "NotifyStore_Locked",
          "parameters": [
            "int32_t addr",
            "Processor* processor"
          ],
          "return_type": "void",
          "logic": "Notifies the global monitor of a store operation, locked."
        },
        {
          "name": "NotifyStoreExcl_Locked",
          "parameters": [
            "int32_t addr",
            "Processor* processor"
          ],
          "return_type": "bool",
          "logic": "Notifies the global monitor of an exclusive store operation, locked.  Returns if the store is allowed."
        },
        {
          "name": "PrependProcessor",
          "parameters": [
            "Processor* processor"
          ],
          "return_type": "void",
          "logic": "Prepends a processor to the list of processors (called on simulator construction)."
        },
        {
          "name": "RemoveProcessor",
          "parameters": [
            "Processor* processor"
          ],
          "return_type": "void",
          "logic": "Removes a processor from the list of processors (called on simulator destruction)."
        },
        {
          "name": "Get",
          "parameters": [],
          "return_type": "static GlobalMonitor*",
          "logic": "Returns the singleton instance of the GlobalMonitor."
        }
      ]
    },
    {
      "name": "Simulator::GlobalMonitor::Processor",
      "properties": [
        "access_state_",
        "tagged_addr_",
        "next_",
        "prev_",
        "kMaxFailureCounter",
        "failure_counter_"
      ],
      "methods": [
        {
          "name": "Processor",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the Processor."
        }
      ]
    }
  ],
  "functions": []
}