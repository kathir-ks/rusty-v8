{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/encoded-c-signature.h",
  "imports": [
    "<stdint.h>"
  ],
  "classes": [
    {
      "name": "EncodedCSignature",
      "properties": [
        "bitfield_",
        "return_type_is_float64_",
        "parameter_count_"
      ],
      "methods": [
        {
          "name": "EncodedCSignature",
          "parameters": [],
          "return_type": "constructor",
          "logic": "Default constructor. Initializes the object with default values."
        },
        {
          "name": "EncodedCSignature",
          "parameters": [
            "uint32_t bitfield",
            "int parameter_count"
          ],
          "return_type": "constructor",
          "logic": "Constructor that initializes the object with a bitfield and a parameter count."
        },
        {
          "name": "EncodedCSignature",
          "parameters": [
            "int parameter_count"
          ],
          "return_type": "constructor",
          "logic": "Constructor that initializes the object with a parameter count and the bitfield to 0."
        },
        {
          "name": "EncodedCSignature",
          "parameters": [
            "const CFunctionInfo* signature"
          ],
          "return_type": "constructor",
          "logic": "Constructor that initializes the object based on a CFunctionInfo object (implementation is not provided in the header file)."
        },
        {
          "name": "IsFloat",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Checks if the bit at the given index in the bitfield is set, indicating if the parameter at that index should be read from an FP register."
        },
        {
          "name": "IsReturnFloat",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the return value should be read from an FP register using `IsFloat(kReturnIndex)`."
        },
        {
          "name": "IsReturnFloat64",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the return value is a float64 and should be read from an FP register.  RISCV64 specific."
        },
        {
          "name": "SetFloat",
          "parameters": [
            "int index"
          ],
          "return_type": "void",
          "logic": "Sets the bit at the given index in the bitfield, indicating that the parameter at that index should be read from an FP register."
        },
        {
          "name": "SetReturnFloat64",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the bit for the return index and sets `return_type_is_float64_` to true (RISCV64 only), indicating that the return value is a float64."
        },
        {
          "name": "SetReturnFloat32",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the bit for the return index and sets `return_type_is_float64_` to false (RISCV64 only), indicating that the return value is a float32."
        },
        {
          "name": "IsValid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the encoded signature is valid by comparing `parameter_count_` to `kInvalidParamCount`."
        },
        {
          "name": "ParameterCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of parameters represented by the signature."
        },
        {
          "name": "FPParameterCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of floating point parameters represented by the signature. Implementation not in header."
        },
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "const EncodedCSignature&",
          "logic": "Returns a static const reference to an invalid `EncodedCSignature` object."
        }
      ]
    }
  ],
  "functions": []
}