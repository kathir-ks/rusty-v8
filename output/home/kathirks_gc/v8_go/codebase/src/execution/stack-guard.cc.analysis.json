{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/stack-guard.cc",
  "imports": [
    "src/execution/stack-guard.h",
    "src/base/atomicops.h",
    "src/compiler-dispatcher/optimizing-compile-dispatcher.h",
    "src/execution/interrupts-scope.h",
    "src/execution/isolate.h",
    "src/execution/protectors-inl.h",
    "src/execution/simulator.h",
    "src/logging/counters.h",
    "src/objects/backing-store.h",
    "src/roots/roots-inl.h",
    "src/tracing/trace-event.h",
    "src/utils/memcopy.h",
    "src/baseline/baseline-batch-compiler.h",
    "src/maglev/maglev-concurrent-dispatcher.h",
    "src/wasm/wasm-engine.h"
  ],
  "classes": [
    {
      "name": "StackGuard",
      "properties": [
        "isolate_",
        "thread_local_"
      ],
      "methods": [
        {
          "name": "update_interrupt_requests_and_stack_limits",
          "parameters": [
            "const ExecutionAccess& lock"
          ],
          "return_type": "void",
          "logic": "Updates the interrupt requests and stack limits based on pending interrupts. Sets jslimit and climit to kInterruptLimit if there are pending interrupts, otherwise resets them to real_jslimit_ and real_climit_."
        },
        {
          "name": "SetStackLimit",
          "parameters": [
            "uintptr_t limit"
          ],
          "return_type": "void",
          "logic": "Sets the stack limit using an ExecutionAccess lock. Converts the limit to a JavaScript limit and calls SetStackLimitInternal."
        },
        {
          "name": "SetStackLimitInternal",
          "parameters": [
            "const ExecutionAccess& lock",
            "uintptr_t limit",
            "uintptr_t jslimit"
          ],
          "return_type": "void",
          "logic": "Sets the internal stack limits (jslimit and climit). Only updates the current limits if they are not already special (e.g., due to a pending interrupt)."
        },
        {
          "name": "SetStackLimitForStackSwitching",
          "parameters": [
            "uintptr_t limit"
          ],
          "return_type": "void",
          "logic": "Sets the stack limit specifically for stack switching, using a compare-and-swap operation to update the jslimit atomically. It updates real_jslimit_ without synchronization."
        },
        {
          "name": "AdjustStackLimitForSimulator",
          "parameters": [],
          "return_type": "void",
          "logic": "Adjusts the JavaScript stack limit based on the current C stack limit when running in the simulator. Only updates if the current jslimit matches the real_jslimit_."
        },
        {
          "name": "ResetStackLimitForSimulator",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the JavaScript stack limit to the real limit if it's not currently set to kInterruptLimit (i.e., not handling an interrupt)."
        },
        {
          "name": "PushInterruptsScope",
          "parameters": [
            "InterruptsScope* scope"
          ],
          "return_type": "void",
          "logic": "Pushes an InterruptsScope onto the stack of active interrupt scopes. Intercepts interrupts if necessary, updates limits, and adds the scope to the chain."
        },
        {
          "name": "PopInterruptsScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the top InterruptsScope from the stack. Restores intercepted interrupts or postpones existing interrupts if necessary, updates limits, and removes the scope from the chain."
        },
        {
          "name": "CheckInterrupt",
          "parameters": [
            "InterruptFlag flag"
          ],
          "return_type": "bool",
          "logic": "Checks if a specific interrupt flag is set."
        },
        {
          "name": "RequestInterrupt",
          "parameters": [
            "InterruptFlag flag"
          ],
          "return_type": "void",
          "logic": "Requests a specific interrupt by setting the corresponding flag. Checks if the interrupt is intercepted by an active InterruptsScope before setting it and updates interrupt requests and stack limits. Notifies futex_wait_list_node to wake up if the isolate is waiting in a futex."
        },
        {
          "name": "ClearInterrupt",
          "parameters": [
            "InterruptFlag flag"
          ],
          "return_type": "void",
          "logic": "Clears a specific interrupt flag from both active interrupts and intercepted interrupts of each InterruptsScope."
        },
        {
          "name": "HasTerminationRequest",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks for a termination request. If found, clears the TERMINATE_EXECUTION flag and returns true; otherwise, returns false."
        },
        {
          "name": "FetchAndClearInterrupts",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "int",
          "logic": "Fetches and clears interrupt flags based on the specified InterruptLevel. Handles TERMINATE_EXECUTION specially by only fetching and clearing that bit. Returns the fetched interrupt flags as an integer."
        },
        {
          "name": "ArchiveStackGuard",
          "parameters": [
            "char* to"
          ],
          "return_type": "char*",
          "logic": "Archives the StackGuard's thread-local data (ThreadLocal) by copying it to the provided memory location. Resets the current thread-local data and returns a pointer to the next available memory location."
        },
        {
          "name": "RestoreStackGuard",
          "parameters": [
            "char* from"
          ],
          "return_type": "char*",
          "logic": "Restores the StackGuard's thread-local data (ThreadLocal) from the provided memory location. Returns a pointer to the next memory location after the restored data."
        },
        {
          "name": "FreeThreadResources",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees thread-local resources. Sets stack_limit on the per-isolate thread data to real_climit()."
        },
        {
          "name": "InitThread",
          "parameters": [
            "const ExecutionAccess& lock"
          ],
          "return_type": "void",
          "logic": "Initializes the thread-local data for the StackGuard, including setting initial stack limits and creating per-isolate thread data."
        },
        {
          "name": "HandleInterrupts",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Handles pending interrupts based on the specified InterruptLevel. Fetches and clears interrupts, then processes each interrupt flag individually, invoking corresponding actions (e.g., garbage collection, termination, wasm code handling, install optimized functions, API callbacks). Increments the stack interrupts counter and returns ReadOnlyRoots(isolate_).undefined_value()."
        }
      ]
    },
    {
      "name": "StackGuard::ThreadLocal",
      "properties": [
        "real_jslimit_",
        "real_climit_",
        "interrupt_scopes_",
        "interrupt_flags_"
      ],
      "methods": [
        {
          "name": "Initialize",
          "parameters": [
            "Isolate* isolate",
            "const ExecutionAccess& lock"
          ],
          "return_type": "void",
          "logic": "Initializes the ThreadLocal data with the isolate and initial stack limits based on the stack size flag."
        }
      ]
    },
    {
      "name": "ShouldBeZeroOnReturnScope",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "TestAndClear",
      "parameters": [
        "int* bitfield",
        "int mask"
      ],
      "return_type": "bool",
      "logic": "Tests if a bit is set in the bitfield, and clears the bit. Returns true if it was originally set, false otherwise."
    }
  ]
}