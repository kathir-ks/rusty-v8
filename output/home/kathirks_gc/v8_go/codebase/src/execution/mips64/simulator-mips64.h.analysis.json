{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/mips64/simulator-mips64.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/mips64/simulator-mips64.h\",\n  \"imports\": [\n    \"src/common/globals.h\",\n    \"src/base/hashmap.h\",\n    \"src/base/strings.h\",\n    \"src/codegen/assembler.h\",\n    \"src/codegen/mips64/constants-mips64.h\",\n    \"src/execution/simulator-base.h\",\n    \"src/utils/allocation.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CachePage\",\n      \"properties\": [\n        \"data_[kPageSize]\",\n        \"validity_map_[kValidityMapSize]\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CachePage\",\n          \"parameters\": [],\n          \"return_type\": \"CachePage\",\n          \"logic\": \"Constructor: Initializes the validity map to LINE_INVALID, marking all cache lines as invalid.\"\n        },\n        {\n          \"name\": \"ValidityByte\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns a pointer to the validity byte corresponding to the given offset.\"\n        },\n        {\n          \"name\": \"CachedData\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns a pointer to the cached data corresponding to the given offset.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimInstructionBase\",\n      \"properties\": [\n        \"operand_\",\n        \"instr_\",\n        \"type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"InstructionType\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns the type of the instruction.\"\n        },\n        {\n          \"name\": \"instr\",\n          \"parameters\": [],\n          \"return_type\": \"Instruction*\",\n          \"logic\": \"Returns the raw instruction pointer.\"\n        },\n        {\n          \"name\": \"operand\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the operand of the instruction.\"\n        },\n        {\n          \"name\": \"SimInstructionBase\",\n          \"parameters\": [],\n          \"return_type\": \"SimInstructionBase\",\n          \"logic\": \"Constructor: Initializes operand_ to -1, instr_ to nullptr, and type_ to kUnsupported.\"\n        },\n        {\n          \"name\": \"SimInstructionBase\",\n          \"parameters\": [\"Instruction* instr\"],\n          \"return_type\": \"SimInstructionBase\",\n          \"logic\": \"Constructor: Takes instruction as an argument\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimInstruction\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"SimInstruction\",\n          \"parameters\": [],\n          \"return_type\": \"SimInstruction\",\n          \"logic\": \"Default constructor.\"\n        },\n        {\n          \"name\": \"SimInstruction\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"SimInstruction\",\n          \"logic\": \"Explicit constructor taking an Instruction pointer.\"\n        },\n        {\n          \"name\": \"operator=\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"SimInstruction&\",\n          \"logic\": \"Assignment operator: Assigns the value of an Instruction to the SimInstruction, sets operand_, instr_, and type_ appropriately.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simulator\",\n      \"properties\": [\n        \"registers_[kNumSimuRegisters]\",\n        \"FPUregisters_[kNumFPURegisters * 2]\",\n        \"FCSR_\",\n        \"MSACSR_\",\n        \"stack_\",\n        \"stack_limit_\",\n        \"pc_modified_\",\n        \"icount_\",\n        \"break_count_\",\n        \"trace_buf_\",\n        \"last_debugger_input_\",\n        \"isolate_\",\n        \"break_pc_\",\n        \"break_instr_\",\n        \"watched_stops_[kMaxStopCode + 1]\",\n        \"local_monitor_\",\n        \"global_monitor_thread_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Simulator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Constructor: Initializes the simulator with a given isolate.\"\n        },\n        {\n          \"name\": \"~Simulator\",\n          \"parameters\": [],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Destructor: Releases any resources held by the simulator.\"\n        },\n        {\n          \"name\": \"current\",\n          \"parameters\": [\n            \"v8::internal::Isolate* isolate\"\n          ],\n          \"return_type\": \"Simulator*\",\n          \"logic\": \"Returns the currently executing Simulator instance for a given isolate.\"\n        },\n        {\n          \"name\": \"set_register\",\n          \"parameters\": [\n            \"int reg\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a general-purpose register.\"\n        },\n        {\n          \"name\": \"set_register_word\",\n          \"parameters\": [\n            \"int reg\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a general-purpose register with a 32-bit value.\"\n        },\n        {\n          \"name\": \"set_dw_register\",\n          \"parameters\": [\n            \"int dreg\",\n            \"const int* dbl\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of two registers with a double value.\"\n        },\n        {\n          \"name\": \"get_register\",\n          \"parameters\": [\n            \"int reg\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the value of a general-purpose register.\"\n        },\n        {\n          \"name\": \"get_double_from_register_pair\",\n          \"parameters\": [\n            \"int reg\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the value of a double from a register pair.\"\n        },\n        {\n          \"name\": \"set_fpu_register\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register.\"\n        },\n        {\n          \"name\": \"set_fpu_register_word\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with a 32-bit value.\"\n        },\n        {\n          \"name\": \"set_fpu_register_hi_word\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the high word value of a floating-point register with a 32-bit value.\"\n        },\n        {\n          \"name\": \"set_fpu_register_float\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"float value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with a float.\"\n        },\n        {\n          \"name\": \"set_fpu_register_double\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"double value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with a double.\"\n        },\n        {\n          \"name\": \"set_fpu_register_invalid_result64\",\n          \"parameters\": [\n            \"float original\",\n            \"float rounded\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with an invalid result.\"\n        },\n        {\n          \"name\": \"set_fpu_register_invalid_result\",\n          \"parameters\": [\n            \"float original\",\n            \"float rounded\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with an invalid result.\"\n        },\n        {\n          \"name\": \"set_fpu_register_word_invalid_result\",\n          \"parameters\": [\n            \"float original\",\n            \"float rounded\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register word with an invalid result.\"\n        },\n        {\n          \"name\": \"set_fpu_register_invalid_result64\",\n          \"parameters\": [\n            \"double original\",\n            \"double rounded\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with an invalid result.\"\n        },\n        {\n          \"name\": \"set_fpu_register_invalid_result\",\n          \"parameters\": [\n            \"double original\",\n            \"double rounded\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register with an invalid result.\"\n        },\n        {\n          \"name\": \"set_fpu_register_word_invalid_result\",\n          \"parameters\": [\n            \"double original\",\n            \"double rounded\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a floating-point register word with an invalid result.\"\n        },\n        {\n          \"name\": \"get_fpu_register\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the value of a floating-point register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_word\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the value of a floating-point register as a 32-bit word.\"\n        },\n        {\n          \"name\": \"get_fpu_register_signed_word\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the signed value of a floating-point register as a 32-bit word.\"\n        },\n        {\n          \"name\": \"get_fpu_register_hi_word\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the value of the higher 32-bit word in a floating-point register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_float\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the value of a floating-point register as a float.\"\n        },\n        {\n          \"name\": \"get_fpu_register_double\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the value of a floating-point register as a double.\"\n        },\n        {\n          \"name\": \"get_msa_register\",\n          \"parameters\": [\n            \"int wreg\",\n            \"T* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Gets the value of an MSA register.\"\n        },\n        {\n          \"name\": \"set_msa_register\",\n          \"parameters\": [\n            \"int wreg\",\n            \"const T* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of an MSA register.\"\n        },\n        {\n          \"name\": \"set_fcsr_bit\",\n          \"parameters\": [\n            \"uint32_t cc\",\n            \"bool value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a bit in the Floating-Point Control and Status Register (FCSR).\"\n        },\n        {\n          \"name\": \"test_fcsr_bit\",\n          \"parameters\": [\n            \"uint32_t cc\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tests a bit in the Floating-Point Control and Status Register (FCSR).\"\n        },\n        {\n          \"name\": \"set_fcsr_round_error\",\n          \"parameters\": [\n            \"double original\",\n            \"double rounded\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets rounding error in FCSR for double precision.\"\n        },\n        {\n          \"name\": \"set_fcsr_round64_error\",\n          \"parameters\": [\n            \"double original\",\n            \"double rounded\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets rounding error in FCSR for double precision.\"\n        },\n                {\n          \"name\": \"set_fcsr_round_error\",\n          \"parameters\": [\n            \"float original\",\n            \"float rounded\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets rounding error in FCSR for float precision.\"\n        },\n        {\n          \"name\": \"set_fcsr_round64_error\",\n          \"parameters\": [\n            \"float original\",\n            \"float rounded\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets rounding error in FCSR for float precision.\"\n        },\n        {\n          \"name\": \"round_according_to_fcsr\",\n          \"parameters\": [\n            \"double toRound\",\n            \"double* rounded\",\n            \"int32_t* rounded_int\",\n            \"double fs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Rounds a double-precision floating-point number according to the FCSR rounding mode.\"\n        },\n        {\n          \"name\": \"round64_according_to_fcsr\",\n          \"parameters\": [\n            \"double toRound\",\n            \"double* rounded\",\n            \"int64_t* rounded_int\",\n            \"double fs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Rounds a double-precision floating-point number according to the FCSR rounding mode.\"\n        },\n        {\n          \"name\": \"round_according_to_fcsr\",\n          \"parameters\": [\n            \"float toRound\",\n            \"float* rounded\",\n            \"int32_t* rounded_int\",\n            \"float fs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Rounds a float floating-point number according to the FCSR rounding mode.\"\n        },\n        {\n          \"name\": \"round64_according_to_fcsr\",\n          \"parameters\": [\n            \"float toRound\",\n            \"float* rounded\",\n            \"int64_t* rounded_int\",\n            \"float fs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Rounds a float floating-point number according to the FCSR rounding mode.\"\n        },\n        {\n          \"name\": \"round_according_to_msacsr\",\n          \"parameters\": [\n            \"T_fp toRound\",\n            \"T_fp* rounded\",\n            \"T_int* rounded_int\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Rounds a floating-point number according to the MSACSR rounding mode.\"\n        },\n        {\n          \"name\": \"clear_fcsr_cause\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the cause bits in FCSR.\"\n        },\n        {\n          \"name\": \"set_fcsr_rounding_mode\",\n          \"parameters\": [\n            \"FPURoundingMode mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the rounding mode in FCSR.\"\n        },\n        {\n          \"name\": \"set_msacsr_rounding_mode\",\n          \"parameters\": [\n            \"FPURoundingMode mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the rounding mode in MSACSR.\"\n        },\n        {\n          \"name\": \"get_fcsr_rounding_mode\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned int\",\n          \"logic\": \"Gets the rounding mode from FCSR.\"\n        },\n        {\n          \"name\": \"get_msacsr_rounding_mode\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned int\",\n          \"logic\": \"Gets the rounding mode from MSACSR.\"\n        },\n        {\n          \"name\": \"set_pc\",\n          \"parameters\": [\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the program counter (PC) register.\"\n        },\n        {\n          \"name\": \"get_pc\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the value of the program counter (PC) register.\"\n        },\n        {\n          \"name\": \"get_sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the value of the stack pointer (SP) register.\"\n        },\n        {\n          \"name\": \"StackLimit\",\n          \"parameters\": [\n            \"uintptr_t c_limit\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Calculates the stack limit, taking into account a safety margin.\"\n        },\n        {\n          \"name\": \"GetCentralStackView\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Return central stack view, without additional safety margins.\"\n        },\n        {\n          \"name\": \"Execute\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes MIPS instructions until the PC reaches end_sim_pc.\"\n        },\n        {\n          \"name\": \"Call\",\n          \"parameters\": [\n            \"Address entry\",\n            \"Args... args\"\n          ],\n          \"return_type\": \"Return\",\n          \"logic\": \"Calls a function at the given entry address with the provided arguments. Simulates function calls.\"\n        },\n        {\n          \"name\": \"CallFP\",\n          \"parameters\": [\n            \"Address entry\",\n            \"double d0\",\n            \"double d1\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Calls a 2-argument double function.\"\n        },\n        {\n          \"name\": \"PushAddress\",\n          \"parameters\": [\n            \"uintptr_t address\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Pushes an address onto the JS stack.\"\n        },\n        {\n          \"name\": \"PopAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Pops an address from the JS stack.\"\n        },\n        {\n          \"name\": \"set_last_debugger_input\",\n          \"parameters\": [\n            \"char* input\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the last debugger input string.\"\n        },\n        {\n          \"name\": \"last_debugger_input\",\n          \"parameters\": [],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns the last debugger input string.\"\n        },\n        {\n          \"name\": \"SetRedirectInstruction\",\n          \"parameters\": [\n            \"Instruction* instruction\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a redirect instruction.\"\n        },\n        {\n          \"name\": \"ICacheMatch\",\n          \"parameters\": [\n            \"void* one\",\n            \"void* two\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if two instruction cache entries match.\"\n        },\n        {\n          \"name\": \"FlushICache\",\n          \"parameters\": [\n            \"base::CustomMatcherHashMap* i_cache\",\n            \"void* start\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Flushes the instruction cache for a given memory region.\"\n        },\n        {\n          \"name\": \"has_bad_pc\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if pc register contains one of the 'special_values' defined below (bad_ra, end_sim_pc).\"\n        },\n        {\n          \"name\": \"CallImpl\",\n          \"parameters\": [\n            \"Address entry\",\n            \"CallArgument* args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Implements the function call. Sets up registers and calls the function at the given entry point.\"\n        },\n        {\n          \"name\": \"CallAnyCTypeFunction\",\n          \"parameters\": [\n            \"Address target_address\",\n            \"const EncodedCSignature& signature\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Call a function with C type signature.\"\n        },\n        {\n          \"name\": \"Format\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"const char* format\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints an error message and stops execution.\"\n        },\n        {\n          \"name\": \"ReadBU\",\n          \"parameters\": [\"int64_t addr\"],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Reads a byte from memory as an unsigned integer.\"\n        },\n        {\n          \"name\": \"ReadB\",\n          \"parameters\": [\"int64_t addr\"],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Reads a byte from memory as a signed integer.\"\n        },\n        {\n          \"name\": \"WriteB\",\n          \"parameters\": [\"int64_t addr\", \"uint8_t value\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a byte to memory.\"\n        },\n        {\n          \"name\": \"WriteB\",\n          \"parameters\": [\"int64_t addr\", \"int8_t value\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a byte to memory.\"\n        },\n        {\n          \"name\": \"ReadHU\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\"],\n          \"return_type\": \"uint16_t\",\n          \"logic\": \"Reads a half-word from memory as an unsigned integer.\"\n        },\n        {\n          \"name\": \"ReadH\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\"],\n          \"return_type\": \"int16_t\",\n          \"logic\": \"Reads a half-word from memory as a signed integer.\"\n        },\n        {\n          \"name\": \"WriteH\",\n          \"parameters\": [\"int64_t addr\", \"uint16_t value\", \"Instruction* instr\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a half-word to memory.\"\n        },\n        {\n          \"name\": \"WriteH\",\n          \"parameters\": [\"int64_t addr\", \"int16_t value\", \"Instruction* instr\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a half-word to memory.\"\n        },\n        {\n          \"name\": \"ReadWU\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\"],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Reads a word from memory as an unsigned integer.\"\n        },\n        {\n          \"name\": \"ReadW\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\", \"TraceType t\"],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Reads a word from memory as a signed integer.\"\n        },\n        {\n          \"name\": \"WriteW\",\n          \"parameters\": [\"int64_t addr\", \"int32_t value\", \"Instruction* instr\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a word to memory.\"\n        },\n        {\n          \"name\": \"WriteConditionalW\",\n          \"parameters\": [\"int64_t addr\", \"int32_t value\", \"Instruction* instr\", \"int32_t rt_reg\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a word to memory conditionally, based on the register value.\"\n        },\n        {\n          \"name\": \"Read2W\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\"],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Reads a double-word from memory.\"\n        },\n        {\n          \"name\": \"Write2W\",\n          \"parameters\": [\"int64_t addr\", \"int64_t value\", \"Instruction* instr\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a double-word to memory.\"\n        },\n        {\n          \"name\": \"WriteConditional2W\",\n          \"parameters\": [\"int64_t addr\", \"int64_t value\", \"Instruction* instr\", \"int32_t rt_reg\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a double-word to memory conditionally, based on a register value.\"\n        },\n        {\n          \"name\": \"ReadD\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\"],\n          \"return_type\": \"double\",\n          \"logic\": \"Reads a double from memory.\"\n        },\n        {\n          \"name\": \"WriteD\",\n          \"parameters\": [\"int64_t addr\", \"double value\", \"Instruction* instr\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a double to memory.\"\n        },\n        {\n          \"name\": \"ReadMem\",\n          \"parameters\": [\"int64_t addr\", \"Instruction* instr\"],\n          \"return_type\": \"T\",\n          \"logic\": \"Reads memory of a given size\"\n        },\n        {\n          \"name\": \"WriteMem\",\n          \"parameters\": [\"int64_t addr\", \"T value\", \"Instruction* instr\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes to memory of a given size\"\n        },\n        {\n          \"name\": \"DieOrDebug\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Helper for debugging memory access.\"\n        },\n        {\n          \"name\": \"TraceRegWr\",\n          \"parameters\": [\"int64_t value\", \"TraceType t\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces register write.\"\n        },\n        {\n          \"name\": \"TraceMSARegWr\",\n          \"parameters\": [\"T* value\", \"TraceType t\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces MSA register write.\"\n        },\n        {\n          \"name\": \"TraceMSARegWr\",\n          \"parameters\": [\"T* value\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces MSA register write.\"\n        },\n        {\n          \"name\": \"TraceMemWr\",\n          \"parameters\": [\"int64_t addr\", \"int64_t value\", \"TraceType t\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory write.\"\n        },\n        {\n          \"name\": \"TraceMemRd\",\n          \"parameters\": [\"int64_t addr\", \"int64_t value\", \"TraceType t\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory read.\"\n        },\n                {\n          \"name\": \"TraceMemRd\",\n          \"parameters\": [\"int64_t addr\", \"T value\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory read.\"\n        },\n        {\n          \"name\": \"TraceMemWr\",\n          \"parameters\": [\"int64_t addr\", \"T value\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory write.\"\n        },\n        {\n          \"name\": \"GetDoubleHIW\",\n          \"parameters\": [\"double* addr\"],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Get Double Higher word.\"\n        },\n        {\n          \"name\": \"GetDoubleLOW\",\n          \"parameters\": [\"double* addr\"],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Get Double Lower word.\"\n        },\n        {\n          \"name\": \"SetDoubleHIW\",\n          \"parameters\": [\"double* addr\"],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Set Double Higher word.\"\n        },\n        {\n          \"name\": \"SetDoubleLOW\",\n          \"parameters\": [\"double* addr\"],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Set Double Lower word.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterCOP1\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register cop1.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterCOP1X\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register cop1x.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterSPECIAL\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register special.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterSPECIAL2\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register special2.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterSPECIAL3\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register special3.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterSRsType\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register SrsType.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterDRsType\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register DrsType.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterWRsType\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register WrsType.\"\n        },\n        {\n          \"name\": \"DecodeTypeRegisterLRsType\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes instructions of type register LrsType.\"\n        },\n        {\n          \"name\": \"DecodeMsaDataFormat\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Decodes the data format of MSA instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaI8\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeI8 instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaI5\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeI5 instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaI10\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeI10 instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaELM\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeELM instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaBIT\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeBIT instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaMI10\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeMI10 instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsa3R\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA Type3R instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsa3RF\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA Type3RF instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsaVec\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA TypeVec instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsa2R\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA Type2R instructions\"\n        },\n        {\n          \"name\": \"DecodeTypeMsa2RF\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes MSA Type2RF instructions\"\n        },\n        {\n          "
}