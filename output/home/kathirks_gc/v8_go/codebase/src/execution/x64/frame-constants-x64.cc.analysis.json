{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/x64/frame-constants-x64.cc",
  "imports": [
    "src/execution/x64/frame-constants-x64.h",
    "src/codegen/x64/assembler-x64-inl.h",
    "src/execution/frame-constants.h",
    "src/execution/frames.h"
  ],
  "classes": [
    {
      "name": "JavaScriptFrame",
      "properties": [],
      "methods": [
        {
          "name": "fp_register",
          "parameters": [],
          "return_type": "Register",
          "logic": "Returns the frame pointer register (rbp) for JavaScript frames on x64 architecture."
        },
        {
          "name": "context_register",
          "parameters": [],
          "return_type": "Register",
          "logic": "Returns the context register (rsi) for JavaScript frames on x64 architecture."
        },
        {
          "name": "constant_pool_pointer_register",
          "parameters": [],
          "return_type": "Register",
          "logic": "This method is unreachable on x64 architecture, indicating that a constant pool pointer register is not explicitly used for JavaScript frames."
        }
      ]
    },
    {
      "name": "UnoptimizedFrameConstants",
      "properties": [],
      "methods": [
        {
          "name": "RegisterStackSlotCount",
          "parameters": [
            "register_count"
          ],
          "return_type": "int",
          "logic": "Returns the number of stack slots required to save the registers in the unoptimized frame. In this case, it's the same as the number of registers."
        }
      ]
    },
    {
      "name": "BuiltinContinuationFrameConstants",
      "properties": [],
      "methods": [
        {
          "name": "PaddingSlotCount",
          "parameters": [
            "register_count"
          ],
          "return_type": "int",
          "logic": "Returns the number of padding slots required in the builtin continuation frame.  Always returns 0, indicating no padding slots are needed."
        }
      ]
    },
    {
      "name": "MaglevFrame",
      "properties": [],
      "methods": [
        {
          "name": "StackGuardFrameSize",
          "parameters": [
            "register_input_count"
          ],
          "return_type": "intptr_t",
          "logic": "Calculates the size of the stack guard frame for Maglev frames. It includes the standard frame size from fp plus one extra slot for the argument of StackGuardWithGap and the number of register inputs."
        }
      ]
    }
  ],
  "functions": []
}