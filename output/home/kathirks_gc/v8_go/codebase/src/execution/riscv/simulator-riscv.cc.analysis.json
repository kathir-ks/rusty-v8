{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/riscv/simulator-riscv.cc",
  "imports": [
    "src/execution/riscv/simulator-riscv.h",
    "<limits.h>",
    "<math.h>",
    "<stdarg.h>",
    "<stdlib.h>",
    "src/base/bits.h",
    "src/base/overflowing-math.h",
    "src/base/vector.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/constants-arch.h",
    "src/codegen/macro-assembler.h",
    "src/diagnostics/disasm.h",
    "src/heap/base/stack.h",
    "src/heap/combined-heap.h",
    "src/runtime/runtime-utils.h",
    "src/utils/ostreams.h",
    "src/utils/utils.h",
    "src/trap-handler/trap-handler-simulator.h"
  ],
  "classes": [
    {
      "name": "Simulator::GlobalMonitor",
      "properties": [],
      "methods": [
        {
          "name": "Get",
          "parameters": [],
          "return_type": "Simulator::GlobalMonitor*",
          "logic": "Lazy getter for a global monitor object. Likely used for synchronization or global state tracking in the simulator."
        }
      ]
    },
    {
      "name": "RiscvDebugger",
      "properties": [
        "sim_"
      ],
      "methods": [
        {
          "name": "RiscvDebugger",
          "parameters": [
            "Simulator* sim"
          ],
          "return_type": "void",
          "logic": "Constructor for the RiscvDebugger class. Initializes the sim_ pointer."
        },
        {
          "name": "Debug",
          "parameters": [],
          "return_type": "void",
          "logic": "The main debugging loop. Reads commands, executes instructions, and prints information based on user input.  Provides an interactive debugging environment."
        },
        {
          "name": "PrintRegs",
          "parameters": [
            "char name_prefix",
            "int start_index",
            "int end_index"
          ],
          "return_type": "void",
          "logic": "Prints a range of general-purpose registers with formatted output. Helper for PrintAllRegs."
        },
        {
          "name": "PrintAllRegs",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the values of all general-purpose registers with formatted output."
        },
        {
          "name": "PrintAllRegsIncludingFPU",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the values of all general-purpose registers and floating-point registers."
        },
        {
          "name": "GetRegisterValue",
          "parameters": [
            "int regnum"
          ],
          "return_type": "sreg_t",
          "logic": "Returns the value of a general-purpose register. Returns PC if regnum is kNumSimuRegisters."
        },
        {
          "name": "GetFPURegisterValue",
          "parameters": [
            "int regnum"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value of a floating-point register as int64_t. Returns PC if regnum is kNumFPURegisters."
        },
        {
          "name": "GetFPURegisterValueFloat",
          "parameters": [
            "int regnum"
          ],
          "return_type": "float",
          "logic": "Returns the value of a floating-point register as float. Returns PC if regnum is kNumFPURegisters."
        },
        {
          "name": "GetFPURegisterValueDouble",
          "parameters": [
            "int regnum"
          ],
          "return_type": "double",
          "logic": "Returns the value of a floating-point register as double. Returns PC if regnum is kNumFPURegisters."
        },
        {
          "name": "GetVRegisterValue",
          "parameters": [
            "int regnum"
          ],
          "return_type": "__int128_t",
          "logic": "Returns the value of a vector register.  Returns PC if regnum is kNumVRegisters."
        },
        {
          "name": "GetValue",
          "parameters": [
            "const char* desc",
            "sreg_t* value"
          ],
          "return_type": "bool",
          "logic": "Parses a register name or hexadecimal address string and stores the corresponding value in *value. Returns true on success, false on failure."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "HaveSameSign",
      "parameters": [
        "int64_t a",
        "int64_t b"
      ],
      "return_type": "bool",
      "logic": "Checks if two 64-bit integers have the same sign."
    },
    {
      "name": "get_fcsr_condition_bit",
      "parameters": [
        "uint32_t cc"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates the bit position within the FCSR (Floating-point Control and Status Register) corresponding to a condition code."
    },
    {
      "name": "get_ebreak_code",
      "parameters": [
        "Instruction* instr"
      ],
      "return_type": "int32_t",
      "logic": "Extracts the immediate value (code) from an ebreak instruction following a LUI instruction. Otherwise returns -1"
    },
    {
      "name": "get_round",
      "parameters": [
        "int vxrm",
        "uint64_t v",
        "uint8_t shift"
      ],
      "return_type": "uint8_t",
      "logic": "Calculate r used in rounding for shift operation. According to vxrm to decide the round strategy"
    },
    {
      "name": "signed_saturation",
      "parameters": [
        "Src v",
        "uint n"
      ],
      "return_type": "Dst",
      "logic": "Saturates a signed source value to a signed destination type, based on the bit width n."
    },
    {
      "name": "unsigned_saturation",
      "parameters": [
        "Src v",
        "uint n"
      ],
      "return_type": "Dst",
      "logic": "Saturates an unsigned source value to an unsigned destination type, based on the bit width n."
    }
  ]
}