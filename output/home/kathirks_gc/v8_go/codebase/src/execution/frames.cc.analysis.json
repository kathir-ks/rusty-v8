{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/frames.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/frames.cc\",\n  \"imports\": [\n    \"<cstdint>\",\n    \"<memory>\",\n    \"<optional>\",\n    \"<sstream>\",\n    \"src/api/api-arguments.h\",\n    \"src/api/api-natives.h\",\n    \"src/base/bits.h\",\n    \"src/codegen/interface-descriptors.h\",\n    \"src/codegen/linkage-location.h\",\n    \"src/codegen/macro-assembler.h\",\n    \"src/codegen/maglev-safepoint-table.h\",\n    \"src/codegen/register-configuration.h\",\n    \"src/codegen/safepoint-table.h\",\n    \"src/common/globals.h\",\n    \"src/deoptimizer/deoptimizer.h\",\n    \"src/execution/arguments.h\",\n    \"src/execution/frame-constants.h\",\n    \"src/execution/frames-inl.h\",\n    \"src/execution/vm-state-inl.h\",\n    \"src/ic/ic-stats.h\",\n    \"src/logging/counters.h\",\n    \"src/objects/casting-inl.h\",\n    \"src/objects/code.h\",\n    \"src/objects/instance-type-checker.h\",\n    \"src/objects/slots.h\",\n    \"src/objects/smi.h\",\n    \"src/objects/visitors.h\",\n    \"src/roots/roots.h\",\n    \"src/snapshot/embedded/embedded-data-inl.h\",\n    \"src/strings/string-stream.h\",\n    \"src/zone/zone-containers.h\",\n    \"src/debug/debug-wasm-objects.h\",\n    \"src/wasm/stacks.h\",\n    \"src/wasm/wasm-code-manager.h\",\n    \"src/wasm/wasm-engine.h\",\n    \"src/wasm/wasm-linkage.h\",\n    \"src/wasm/wasm-objects-inl.h\",\n    \"src/wasm/interpreter/wasm-interpreter-runtime.h\",\n    \"src/execution/frames.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"StackHandlerIterator\",\n      \"properties\": [\n        \"limit_\",\n        \"handler_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StackHandlerIterator\",\n          \"parameters\": [\n            \"const StackFrame* frame\",\n            \"StackHandler* handler\"\n          ],\n          \"return_type\": \"StackHandlerIterator\",\n          \"logic\": \"Initializes the iterator with the given frame and handler, ensuring the handler is within the frame's bounds.\"\n        },\n        {\n          \"name\": \"handler\",\n          \"parameters\": [],\n          \"return_type\": \"StackHandler*\",\n          \"logic\": \"Returns the current stack handler.\"\n        },\n        {\n          \"name\": \"done\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the iteration is complete (handler is null or beyond the frame's limit).\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves the iterator to the next stack handler.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrameIteratorBase\",\n      \"properties\": [\n        \"isolate_\",\n        \"frame_\",\n        \"handler_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StackFrameIteratorBase\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"StackFrameIteratorBase\",\n          \"logic\": \"Base constructor to initialize common elements.\"\n        },\n        {\n          \"name\": \"SetNewFrame\",\n          \"parameters\": [\n            \"StackFrame::Type type\",\n            \"StackFrame::State* state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates a new frame object based on the provided type and sets its state.\"\n        },\n        {\n          \"name\": \"SetNewFrame\",\n          \"parameters\": [\n            \"StackFrame::Type type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"SetNewFrame without state.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrameIterator\",\n      \"properties\": [\n        \"no_gc_\",\n        \"first_stack_only_\",\n        \"continuation_\",\n        \"wasm_stack_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"StackFrameIterator\",\n          \"logic\": \"Constructs the stack frame iterator with the isolate and thread-local top.\"\n        },\n        {\n          \"name\": \"StackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ThreadLocalTop* t\"\n          ],\n          \"return_type\": \"StackFrameIterator\",\n          \"logic\": \"Initializes the iterator with the specified isolate and thread-local top.\"\n        },\n        {\n          \"name\": \"StackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ThreadLocalTop* t\",\n            \"NoHandles\"\n          ],\n          \"return_type\": \"StackFrameIterator\",\n          \"logic\": \"Variant of the constructor that does not use handles.\"\n        },\n        {\n          \"name\": \"StackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ThreadLocalTop* t\",\n            \"FirstStackOnly\"\n          ],\n          \"return_type\": \"StackFrameIterator\",\n          \"logic\": \"Variant of the constructor that iterates only the first stack.\"\n        },\n        {\n          \"name\": \"StackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"wasm::StackMemory* stack\"\n          ],\n          \"return_type\": \"StackFrameIterator\",\n          \"logic\": \"Initializes the iterator to start from a WebAssembly stack.\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator to the next stack frame, unwinding stack handlers as needed.\"\n        },\n        {\n          \"name\": \"Reframe\",\n          \"parameters\": [],\n          \"return_type\": \"StackFrame*\",\n          \"logic\": \"Recalculates frame type given a new state.\"\n        },\n        {\n          \"name\": \"Reset\",\n          \"parameters\": [\n            \"ThreadLocalTop* top\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the iterator to the top of the stack using thread-local information.\"\n        },\n        {\n          \"name\": \"Reset\",\n          \"parameters\": [\n            \"ThreadLocalTop* top\",\n            \"wasm::StackMemory* stack\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the iterator to the beginning of a WebAssembly stack.\"\n        },\n        {\n          \"name\": \"continuation\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<WasmContinuationObject>\",\n          \"logic\": \"Returns the continuation object (for WebAssembly stack switching).\"\n        },\n        {\n          \"name\": \"set_continuation\",\n          \"parameters\": [\n            \"Tagged<WasmContinuationObject> continuation\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the continuation object (for WebAssembly stack switching).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TypedFrameWithJSLinkage\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates over the expressions and the program counter (PC) of the frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConstructFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates over the arguments and PC of a construct frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JavaScriptStackFrameIterator\",\n      \"properties\": [\n        \"iterator_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator to the next JavaScript stack frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DebuggableStackFrameIterator\",\n      \"properties\": [\n        \"iterator_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DebuggableStackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"DebuggableStackFrameIterator\",\n          \"logic\": \"Initializes iterator with an isolate, skipping invalid frames.\"\n        },\n        {\n          \"name\": \"DebuggableStackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"StackFrameId id\"\n          ],\n          \"return_type\": \"DebuggableStackFrameIterator\",\n          \"logic\": \"Initializes the iterator and advances to a specific frame ID.\"\n        },\n        {\n          \"name\": \"DebuggableStackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"StackFrameIterator::NoHandles\"\n          ],\n          \"return_type\": \"DebuggableStackFrameIterator\",\n          \"logic\": \"Initializes iterator with no handles, skipping invalid frames.\"\n        },\n        {\n          \"name\": \"DebuggableStackFrameIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"StackFrameId id\",\n            \"StackFrameIterator::NoHandles\"\n          ],\n          \"return_type\": \"DebuggableStackFrameIterator\",\n          \"logic\": \"Initializes the iterator with no handles, then advances to the given frame id.\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator to the next valid debuggable frame.\"\n        },\n        {\n          \"name\": \"FrameFunctionCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of functions within the current frame, primarily relevant for optimized JavaScript frames.\"\n        },\n        {\n          \"name\": \"GetTopValidFrame\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummary\",\n          \"logic\": \"Returns the top valid (debuggable) frame summary.\"\n        },\n        {\n          \"name\": \"IsValidFrame\",\n          \"parameters\": [\n            \"StackFrame* frame\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"static function - Checks if a given stack frame is valid for debugging.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrameIteratorForProfiler\",\n      \"properties\": [\n        \"low_bound_\",\n        \"high_bound_\",\n        \"top_frame_type_\",\n        \"external_callback_scope_\",\n        \"top_link_register_\",\n        \"wasm_stacks_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StackFrameIteratorForProfiler\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Address pc\",\n            \"Address fp\",\n            \"Address sp\",\n            \"Address lr\",\n            \"Address js_entry_sp\"\n          ],\n          \"return_type\": \"StackFrameIteratorForProfiler\",\n          \"logic\": \"Initializes the profiler iterator, validating stack boundaries and determining frame types.\"\n        },\n        {\n          \"name\": \"IsNoFrameBytecodeHandlerPc\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Address pc\",\n            \"Address fp\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if the pc is in a bytecode handler but frame is elided.\"\n        },\n        {\n          \"name\": \"IsValidTop\",\n          \"parameters\": [\n            \"ThreadLocalTop* top\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks the validity of the top of the stack.\"\n        },\n        {\n          \"name\": \"AdvanceOneFrame\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator by one frame, performing validity checks.\"\n        },\n        {\n          \"name\": \"IsValidState\",\n          \"parameters\": [\n            \"const StackFrame::State& state\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the stack frame state is valid.\"\n        },\n        {\n          \"name\": \"HasValidExitIfEntryFrame\",\n          \"parameters\": [\n            \"const StackFrame* frame\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if an entry frame has a valid exit frame.\"\n        },\n        {\n          \"name\": \"IsValidExitFrame\",\n          \"parameters\": [\n            \"Address fp\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if an address points to a valid exit frame.\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator to the next Javascript or Exit frame.\"\n        },\n        {\n          \"name\": \"ComputeStackFrameType\",\n          \"parameters\": [\n            \"StackFrame::State* state\"\n          ],\n          \"return_type\": \"StackFrame::Type\",\n          \"logic\": \"Computes stack frame type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrameIteratorForProfilerForTesting\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"StackFrameIteratorForProfilerForTesting\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Address pc\",\n            \"Address fp\",\n            \"Address sp\",\n            \"Address lr\",\n            \"Address js_entry_sp\"\n          ],\n          \"return_type\": \"StackFrameIteratorForProfilerForTesting\",\n          \"logic\": \"Constructor\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrame\",\n      \"properties\": [\n        \"return_address_location_resolver_\",\n        \"iterator_\",\n        \"state_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GcSafeLookupCode\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<GcSafeCode>\",\n          \"logic\": \"Looks up the code object associated with the current frame's program counter (PC) in a garbage-collection safe manner.\"\n        },\n        {\n          \"name\": \"GcSafeLookupCodeAndOffset\",\n          \"parameters\": [],\n          \"return_type\": \"std::pair<Tagged<GcSafeCode>, int>\",\n          \"logic\": \"Looks up the code object and the offset into it associated with the current frame's program counter (PC) in a garbage-collection safe manner.\"\n        },\n        {\n          \"name\": \"LookupCode\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Code>\",\n          \"logic\": \"Looks up the code object associated with the current frame's program counter (PC).\"\n        },\n        {\n          \"name\": \"LookupCodeAndOffset\",\n          \"parameters\": [],\n          \"return_type\": \"std::pair<Tagged<Code>, int>\",\n          \"logic\": \"Looks up the code object and the offset into it associated with the current frame's program counter (PC).\"\n        },\n        {\n          \"name\": \"IteratePc\",\n          \"parameters\": [\n            \"RootVisitor* v\",\n            \"Address* constant_pool_address\",\n            \"Tagged<GcSafeCode> holder\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates over the program counter, potentially relocating the InstructionStream if necessary.\"\n        },\n        {\n          \"name\": \"SetReturnAddressLocationResolver\",\n          \"parameters\": [\n            \"ReturnAddressLocationResolver resolver\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a custom resolver to be called when trying to resolve return address locations.\"\n        },\n        {\n          \"name\": \"GetCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"StackFrame::Type\",\n          \"logic\": \"Computes and returns the caller's stack frame state, including the type of the caller's frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CommonFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetCallerStackPointer\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the caller's stack pointer.\"\n        },\n        {\n          \"name\": \"ComputeCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the caller's stack frame state, including the frame pointer, stack pointer, and PC.\"\n        },\n        {\n          \"name\": \"Summarize\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummaries\",\n          \"logic\": \"Abstract method - provides a summary of the frame.\"\n        },\n        {\n          \"name\": \"GetExpressionAddress\",\n          \"parameters\": [\n            \"int n\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Computes expression address\"\n        },\n        {\n          \"name\": \"context\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Returns the context\"\n        },\n        {\n          \"name\": \"position\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Return source position.\"\n        },\n        {\n          \"name\": \"ComputeExpressionsCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Return number of stack allocated expressions.\"\n        },\n        {\n          \"name\": \"HasTaggedOutgoingParams\",\n          \"parameters\": [\n            \"Tagged<GcSafeCode> code_lookup\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Return true if tagged outgoing parameters are found.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NativeFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ComputeCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Compute Caller State\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EntryFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"unchecked_code\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<HeapObject>\",\n          \"logic\": \"Returns the JSEntry builtin code.\"\n        },\n        {\n          \"name\": \"ComputeCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Compute caller state.\"\n        },\n        {\n          \"name\": \"GetCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"StackFrame::Type\",\n          \"logic\": \"Retrieve exit frame for next caller state.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CWasmEntryFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"StackFrame::Type\",\n          \"logic\": \"Get caller state\"\n        },\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates - checks flag for jitless to see if it can call iterate.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExitFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ComputeCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the caller's state for an exit frame.\"\n        },\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates over the frame, visiting the PC.\"\n        },\n        {\n          \"name\": \"GetStateForFramePointer\",\n          \"parameters\": [\n            \"Address fp\",\n            \"State* state\"\n          ],\n          \"return_type\": \"StackFrame::Type\",\n          \"logic\": \"Returns the state for the given frame pointer.\"\n        },\n        {\n          \"name\": \"ComputeFrameType\",\n          \"parameters\": [\n            \"Address fp\"\n          ],\n          \"return_type\": \"StackFrame::Type\",\n          \"logic\": \"Distinguishes between different exit frame types\"\n        },\n        {\n          \"name\": \"ComputeStackPointer\",\n          \"parameters\": [\n            \"Address fp\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Computes the StackPointer from the frame pointer.\"\n        },\n        {\n          \"name\": \"FillState\",\n          \"parameters\": [\n            \"Address fp\",\n            \"Address sp\",\n            \"State* state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills the state of the frame with the given frame pointer and stack pointer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BuiltinExitFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Summarize\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummaries\",\n          \"logic\": \"Returns a summary of the BuiltinExitFrame, extracting receiver, function, and parameters.\"\n        },\n        {\n          \"name\": \"function\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<JSFunction>\",\n          \"logic\": \"Getter for associated Function.\"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Getter for the receiver.\"\n        },\n        {\n          \"name\": \"GetParameter\",\n          \"parameters\": [\n            \"int i\"\n          ],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Getter for the i'th parameter of the frame.\"\n        },\n        {\n          \"name\": \"ComputeParametersCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Compute the number of parameters in the frame.\"\n        },\n        {\n          \"name\": \"GetParameters\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<FixedArray>\",\n          \"logic\": \"Returns an array of the parameters.\"\n        },\n        {\n          \"name\": \"IsConstructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Return True if it's a Constructor.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"StringStream* accumulator\",\n            \"PrintMode mode\",\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Print information about the frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ApiCallbackExitFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetFunction\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<JSFunction>\",\n          \"logic\": \"Retrieves a JSFunction from the target slot, instantiating it from a FunctionTemplateInfo if needed.\"\n        },\n        {\n          \"name\": \"GetFunctionTemplateInfo\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<FunctionTemplateInfo>\",\n          \"logic\": \"Return the FunctionTemplateInfo from shared info.\"\n        },\n        {\n          \"name\": \"GetParameters\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<FixedArray>\",\n          \"logic\": \"Retrive parameters.\"\n        },\n        {\n          \"name\": \"Summarize\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummaries\",\n          \"logic\": \"Returns summary of ApiCallbackExitFrame.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"StringStream* accumulator\",\n            \"PrintMode mode\",\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Print out all Api call back info.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ApiAccessorExitFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Summarize\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummaries\",\n          \"logic\": \"Summarizes the API accessor exit frame, returning an empty FrameSummaries object as these frames aren't typically included in stack traces.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"StringStream* accumulator\",\n            \"PrintMode mode\",\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the API accessor exit frame information.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CommonFrameWithJSLinkage\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Summarize\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummaries\",\n          \"logic\": \"Returns the summary. \"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Return receiver.\"\n        },\n        {\n          \"name\": \"unchecked_code\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<HeapObject>\",\n          \"logic\": \"Unchecked Code.\"\n        },\n        {\n          \"name\": \"IsConstructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Return True or False if Construct Frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JavaScriptFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ComputeParametersCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Computes the number of parameters passed to the function in this frame.\"\n        },\n        {\n          \"name\": \"GetCallerStackPointer\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Getter CallerStack Pointer.\"\n        },\n        {\n          \"name\": \"GetFunctions\",\n          \"parameters\": [\n            \"std::vector<Tagged<SharedFunctionInfo>>* functions\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Retrieves functions in frames.\"\n        },\n        {\n          \"name\": \"GetFunctions\",\n          \"parameters\": [\n            \"std::vector<Handle<SharedFunctionInfo>>* functions\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Retrieves handles.\"\n        },\n        {\n          \"name\": \"GetActiveCodeAndOffset\",\n          \"parameters\": [],\n          \"return_type\": \"std::tuple<Tagged<AbstractCode>, int>\",\n          \"logic\": \"Get Abstrct Code.\"\n        },\n        {\n          \"name\": \"function\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<JSFunction>\",\n          \"logic\": \"Gets a pointer to associated javasript function.\"\n        },\n        {\n          \"name\": \"unchecked_function\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Gets the unchecked function.\"\n        },\n        {\n          \"name\": \"IsConstructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks to see if is a Constructor Frame.\"\n        },\n        {\n          \"name\": \"SetParameterValue\",\n          \"parameters\": [\n            \"int index\",\n            \"Tagged<Object> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Set index\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TurbofanStubWithContextFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"unchecked_code\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<HeapObject>\",\n          \"logic\": \"Return associated object.\"\n        },\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Called on Iteration.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TurbofanJSFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles iteration of frame.\"\n        },\n        {\n          \"name\": \"ComputeParametersCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of parameters in the frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StubFrame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Summarize\",\n          \"parameters\": [],\n          \"return_type\": \"FrameSummaries\",\n          \"logic\": \"Stub summarize, calls builtin code\"\n        },\n        {\n          \"name\": \"unchecked_code\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<HeapObject>\",\n          \"logic\": \"Returns a ptr to safe code\"\n        },\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterate\"\n        },\n        {\n          \"name\": \"LookupExceptionHandlerInTable\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Looks up the index of the exception handler in a handler table associated with a specific code object within the V8 JavaScript engine.\"\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"AddressOf\",\n      \"parameters\": [\n        \"const StackHandler* handler\"\n      ],\n      \"return_type\": \"Address\",\n      \"logic\": \"Returns the address of a StackHandler, accounting for ASan.\"\n    },\n    {\n      \"name\": \"GetStateForFastCCallCallerFP\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Address fp\",\n        \"Address pc\",\n        \"Address pc_address\",\n        \"StackFrame::State* state\"\n      ],\n      \"return_type\": \"StackFrame::Type\",\n      \"logic\": \"Determines the stack frame type for fast C calls and sets the appropriate state.\"\n    },\n    {\n      \"name\": \"IsInterpreterFramePc\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Address pc\",\n        \"StackFrame::State* state\"\n      ],\n      \"return_type\": \"std::optional<bool>\",\n      \"logic\": \"Checks if the given program counter (PC) is associated with an interpreter frame, and returns an optional boolean indicating the result.\"\n    },\n    {\n      \"name\": \"VisitSpillSlot\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"RootVisitor* v\",\n        \"FullObjectSlot spill_slot\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Visits a spill slot during garbage collection, handling pointer compression and weak references.\"\n    },\n    {\n      \"name\": \"VisitSpillSlots\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"RootVisitor* v\",\n        \"FullObjectSlot first_slot_offset\",\n        \"base::Vector<const uint8_t> tagged_slots\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Visits a range of spill slots during garbage collection, based on a bit vector of tagged slots.\"\n    },\n    {\n      \"name\": \"GetSafepointEntryFromCodeCache\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Address inner_pointer\",\n        \"InnerPointerToCodeCache::InnerPointerToCodeCacheEntry* entry\"\n      ],\n      \"return_type\": \"SafepointEntry\",\n      \"logic\": \"Finds the Safepoint Entry using a Codecache.\"\n    },\n    {\n      \"name\": \"GetMaglevSafepointEntryFromCodeCache\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Address inner_pointer\",\n        \"InnerPointerToCodeCache::InnerPointerToCodeCacheEntry* entry\"\n      ],\n      \"return_type\": \"MaglevSafepointEntry\",\n      \"logic\": \"Finds Maglev SafePointEntry.\"\n    },\n    {\n      \"name\": \"PrintIndex\",\n      \"parameters\": [\n        \"StringStream* accumulator\",\n        \"StackFrame::PrintMode mode\",\n        \"int index\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Prints the index of a stack frame based on the given print mode.\"\n    },\n    {\n      \"name\": \"StringForStackFrame"
}