{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/arm64/pointer-auth-arm64.cc",
  "imports": [
    "src/execution/arm64/simulator-arm64.h"
  ],
  "classes": [
    {
      "name": "Simulator",
      "properties": [
        "kPACKeyIB"
      ],
      "methods": [
        {
          "name": "ComputePAC",
          "parameters": [
            "data",
            "context",
            "key"
          ],
          "return_type": "uint64_t",
          "logic": "Computes a Pointer Authentication Code (PAC) using the QARMA algorithm. It takes data, context, and a key as input, performs several rounds of shuffling, substitution, and multiplication operations, and returns the resulting PAC value."
        },
        {
          "name": "CalculatePACMask",
          "parameters": [
            "ptr",
            "type",
            "ttbr"
          ],
          "return_type": "uint64_t",
          "logic": "Calculates a mask that isolates the PAC bits within a pointer. It uses the pointer, its type, and the Translation Table Base Register (TTBR) value to determine the location and size of the PAC field."
        },
        {
          "name": "AuthPAC",
          "parameters": [
            "ptr",
            "context",
            "key",
            "type"
          ],
          "return_type": "uint64_t",
          "logic": "Authenticates a pointer by computing its PAC and comparing it with the existing PAC in the pointer.  If they match, the original pointer is returned. If they don't match, an error code is inserted into the pointer if sim_abort_on_bad_auth is false, otherwise the program terminates."
        },
        {
          "name": "AddPAC",
          "parameters": [
            "ptr",
            "context",
            "key",
            "type"
          ],
          "return_type": "uint64_t",
          "logic": "Adds a Pointer Authentication Code (PAC) to a pointer. It computes the PAC using the provided data, context, and key, and then inserts the PAC into the pointer's PAC bits. It also handles cases where the pointer might have a zeroed or all ones PAC bitfield."
        },
        {
          "name": "StripPAC",
          "parameters": [
            "ptr",
            "type"
          ],
          "return_type": "uint64_t",
          "logic": "Removes (strips) the Pointer Authentication Code (PAC) from a pointer, effectively returning the original pointer value without the PAC bits. The PAC mask is calculated and applied to remove the PAC bits."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetNibble",
      "parameters": [
        "in_data",
        "position"
      ],
      "return_type": "uint64_t",
      "logic": "Extracts a 4-bit nibble from a 64-bit integer at a specified position."
    },
    {
      "name": "PACCellShuffle",
      "parameters": [
        "in_data"
      ],
      "return_type": "uint64_t",
      "logic": "Shuffles the nibbles (4-bit values) within a 64-bit integer according to a predefined permutation. This is likely part of the QARMA encryption algorithm."
    },
    {
      "name": "PACCellInvShuffle",
      "parameters": [
        "in_data"
      ],
      "return_type": "uint64_t",
      "logic": "Performs the inverse shuffling of nibbles within a 64-bit integer based on a predefined permutation, reversing the `PACCellShuffle` operation. This is part of the QARMA decryption process."
    },
    {
      "name": "RotCell",
      "parameters": [
        "in_cell",
        "amount"
      ],
      "return_type": "uint64_t",
      "logic": "Rotates a 4-bit 'cell' (nibble) by a specified amount (1, 2, or 3 bits).  Used in the QARMA algorithm."
    },
    {
      "name": "PACMult",
      "parameters": [
        "s_input"
      ],
      "return_type": "uint64_t",
      "logic": "Performs a multiplication-like operation on the input data, operating on 4-bit nibbles. It uses rotations and XOR operations to mix the nibbles, contributing to the QARMA algorithm's diffusion."
    },
    {
      "name": "PACSub",
      "parameters": [
        "t_input"
      ],
      "return_type": "uint64_t",
      "logic": "Performs a byte-substitution operation on the input data. Each 4-bit nibble is replaced by a corresponding value from a substitution table (S-box).  This is part of the QARMA encryption algorithm."
    },
    {
      "name": "PACInvSub",
      "parameters": [
        "t_input"
      ],
      "return_type": "uint64_t",
      "logic": "Performs the inverse byte-substitution, reversing the `PACSub` operation.  Each nibble is replaced using the inverse substitution table, as part of QARMA decryption."
    },
    {
      "name": "TweakCellInvRot",
      "parameters": [
        "in_cell"
      ],
      "return_type": "uint64_t",
      "logic": "Applies an inverse rotation and XOR operation on a 4-bit cell (nibble). This function is part of the tweak schedule used in QARMA."
    },
    {
      "name": "TweakInvShuffle",
      "parameters": [
        "in_data"
      ],
      "return_type": "uint64_t",
      "logic": "Performs an inverse shuffling operation on the tweak value. This is part of the tweak schedule which is used during decryption of the QARMA algorithm."
    },
    {
      "name": "TweakCellRot",
      "parameters": [
        "in_cell"
      ],
      "return_type": "uint64_t",
      "logic": "Applies a rotation and XOR operation on a 4-bit cell (nibble). This function is part of the tweak schedule used in QARMA."
    },
    {
      "name": "TweakShuffle",
      "parameters": [
        "in_data"
      ],
      "return_type": "uint64_t",
      "logic": "Performs a shuffling operation on the tweak value. This is part of the tweak schedule used during encryption of the QARMA algorithm."
    }
  ]
}