{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/unicode-decoder.cc",
  "imports": [
    "src/strings/unicode-decoder.h",
    "src/strings/unicode-inl.h",
    "src/utils/memcopy.h",
    "third_party/utf8-decoder/generalized-utf8-decoder.h"
  ],
  "classes": [
    {
      "name": "DecoderTraits<Utf8Decoder>",
      "properties": [],
      "methods": [
        {
          "name": "IsInvalidSurrogatePair",
          "parameters": [
            "uint32_t lead",
            "uint32_t trail"
          ],
          "return_type": "bool",
          "logic": "Checks if the given surrogate pair is invalid. For Utf8Decoder, surrogate pairs should not exist since it expects only Unicode scalar values."
        }
      ],
      "static_properties": [
        "kAllowIncompleteSequences = true",
        "DfaDecoder = Utf8DfaDecoder"
      ]
    },
    {
      "name": "DecoderTraits<Wtf8Decoder>",
      "properties": [],
      "methods": [
        {
          "name": "IsInvalidSurrogatePair",
          "parameters": [
            "uint32_t lead",
            "uint32_t trail"
          ],
          "return_type": "bool",
          "logic": "Checks if the given surrogate pair is invalid, allowing for WTF-8 decoding."
        }
      ],
      "static_properties": [
        "kAllowIncompleteSequences = false",
        "DfaDecoder = GeneralizedUtf8DfaDecoder"
      ]
    },
    {
      "name": "DecoderTraits<StrictUtf8Decoder>",
      "properties": [],
      "methods": [
        {
          "name": "IsInvalidSurrogatePair",
          "parameters": [
            "uint32_t lead",
            "uint32_t trail"
          ],
          "return_type": "bool",
          "logic": "Checks if the given surrogate pair is invalid. Surrogate pairs should not exist since it expects only Unicode scalar values."
        }
      ],
      "static_properties": [
        "kAllowIncompleteSequences = false",
        "DfaDecoder = Utf8DfaDecoder"
      ]
    },
    {
      "name": "Utf8DecoderBase<Decoder>",
      "properties": [
        "encoding_",
        "non_ascii_start_",
        "utf16_length_"
      ],
      "methods": [
        {
          "name": "Utf8DecoderBase",
          "parameters": [
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "void",
          "logic": "Constructor. Determines the encoding (ASCII, Latin1, UTF16, or Invalid) based on the input data and calculates the UTF-16 length. Uses a DFA to validate UTF-8 sequences and handles incomplete sequences according to the Decoder traits."
        },
        {
          "name": "Decode",
          "parameters": [
            "Char* out",
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "void",
          "logic": "Decodes the UTF-8 data into the output buffer.  Handles one-byte characters directly and uses a DFA to decode multi-byte UTF-8 sequences. Writes surrogate pairs if the character code exceeds the maximum non-surrogate code point, and writes the 'bad char' if an incomplete sequence is encountered"
        }
      ]
    }
  ],
  "functions": [],
  "template_instantiations": [
    {
      "name": "Utf8DecoderBase<Utf8Decoder>::Utf8DecoderBase",
      "parameters": [
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<Utf8Decoder>::Decode",
      "parameters": [
        "uint8_t* out",
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<Utf8Decoder>::Decode",
      "parameters": [
        "uint16_t* out",
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<Wtf8Decoder>::Utf8DecoderBase",
      "parameters": [
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<Wtf8Decoder>::Decode",
      "parameters": [
        "uint8_t* out",
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<Wtf8Decoder>::Decode",
      "parameters": [
        "uint16_t* out",
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<StrictUtf8Decoder>::Utf8DecoderBase",
      "parameters": [
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<StrictUtf8Decoder>::Decode",
      "parameters": [
        "uint8_t* out",
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    },
    {
      "name": "Utf8DecoderBase<StrictUtf8Decoder>::Decode",
      "parameters": [
        "uint16_t* out",
        "base::Vector<const uint8_t> data"
      ],
      "return_type": "void"
    }
  ]
}