{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/unicode-decoder.h",
  "imports": [
    "src/base/vector.h",
    "src/strings/unicode.h"
  ],
  "classes": [
    {
      "name": "Utf8DecoderBase",
      "properties": [
        "encoding_",
        "non_ascii_start_",
        "utf16_length_"
      ],
      "methods": [
        {
          "name": "is_invalid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the decoder is in an invalid state."
        },
        {
          "name": "is_ascii",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the encoding is ASCII."
        },
        {
          "name": "is_one_byte",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the encoding is one-byte (ASCII or Latin1)."
        },
        {
          "name": "utf16_length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the length of the UTF-16 representation of the decoded string."
        },
        {
          "name": "non_ascii_start",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the index of the first non-ASCII character in the input string."
        },
        {
          "name": "Decode",
          "parameters": [
            "Char* out",
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "void",
          "logic": "Decodes the UTF-8 data into a sequence of Char (either uint8_t or uint16_t) and stores it in 'out'."
        },
        {
          "name": "Utf8DecoderBase",
          "parameters": [
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "explicit Utf8DecoderBase",
          "logic": "Constructor for Utf8DecoderBase. Likely initializes encoding_, non_ascii_start_, and utf16_length_."
        }
      ]
    },
    {
      "name": "Utf8Decoder",
      "properties": [],
      "methods": [
        {
          "name": "Utf8Decoder",
          "parameters": [
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "explicit Utf8Decoder",
          "logic": "Constructor for Utf8Decoder. Calls the base class constructor."
        },
        {
          "name": "is_invalid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Always returns false, as this decoder replaces invalid sequences with U+FFFD."
        }
      ]
    },
    {
      "name": "Wtf8Decoder",
      "properties": [],
      "methods": [
        {
          "name": "Wtf8Decoder",
          "parameters": [
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "explicit Wtf8Decoder",
          "logic": "Constructor for Wtf8Decoder. Calls the base class constructor."
        },
        {
          "name": "is_invalid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the encoding is in an invalid state (due to invalid UTF-8 sequences or isolated surrogates)."
        }
      ]
    },
    {
      "name": "StrictUtf8Decoder",
      "properties": [],
      "methods": [
        {
          "name": "StrictUtf8Decoder",
          "parameters": [
            "base::Vector<const uint8_t> data"
          ],
          "return_type": "explicit StrictUtf8Decoder",
          "logic": "Constructor for StrictUtf8Decoder. Calls the base class constructor."
        },
        {
          "name": "is_invalid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the encoding is in an invalid state (due to invalid UTF-8 sequences)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "NonAsciiStart",
      "parameters": [
        "const uint8_t* chars",
        "uint32_t length"
      ],
      "return_type": "uint32_t",
      "logic": "Finds the starting index of the first non-ASCII character in a UTF-8 string. Uses aligned reads for efficiency and returns the index of the aligned word (multiple of kIntptrSize), rather than the specific byte if possible."
    }
  ]
}