{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/string-search.h",
  "imports": [
    "src/base/strings.h",
    "src/base/vector.h",
    "src/execution/isolate.h",
    "src/objects/string.h"
  ],
  "classes": [
    {
      "name": "StringSearchBase",
      "properties": [
        "kBMMaxShift",
        "kLatin1AlphabetSize",
        "kUC16AlphabetSize",
        "kBMMinPatternLength"
      ],
      "methods": [
        {
          "name": "IsOneByteString",
          "parameters": [
            "base::Vector<const uint8_t> string"
          ],
          "return_type": "bool",
          "logic": "Checks if a given vector of uint8_t is a one-byte string.  Always returns true in this specialization."
        },
        {
          "name": "IsOneByteString",
          "parameters": [
            "base::Vector<const base::uc16> string"
          ],
          "return_type": "bool",
          "logic": "Checks if a given vector of uc16 is a one-byte string using String::IsOneByte."
        }
      ]
    },
    {
      "name": "StringSearch",
      "properties": [
        "isolate_",
        "pattern_",
        "strategy_",
        "start_"
      ],
      "methods": [
        {
          "name": "StringSearch",
          "parameters": [
            "Isolate* isolate",
            "base::Vector<const PatternChar> pattern"
          ],
          "return_type": "StringSearch",
          "logic": "Constructor. Initializes the search strategy based on pattern length and character size. Chooses between FailSearch, SingleCharSearch, LinearSearch, and InitialSearch based on the length of the pattern and character types."
        },
        {
          "name": "Search",
          "parameters": [
            "base::Vector<const SubjectChar> subject",
            "int index"
          ],
          "return_type": "int",
          "logic": "Calls the appropriate search function based on the currently selected strategy."
        },
        {
          "name": "AlphabetSize",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the alphabet size used by the Boyer-Moore(-Horspool) algorithm based on the size of PatternChar (either kLatin1AlphabetSize or kUC16AlphabetSize)."
        },
        {
          "name": "FailSearch",
          "parameters": [
            "StringSearch<PatternChar, SubjectChar>*",
            "base::Vector<const SubjectChar>",
            "int"
          ],
          "return_type": "int",
          "logic": "A search strategy that always fails, returning -1."
        },
        {
          "name": "SingleCharSearch",
          "parameters": [
            "StringSearch<PatternChar, SubjectChar>* search",
            "base::Vector<const SubjectChar> subject",
            "int start_index"
          ],
          "return_type": "int",
          "logic": "Search strategy for single-character patterns. Uses FindFirstCharacter."
        },
        {
          "name": "LinearSearch",
          "parameters": [
            "StringSearch<PatternChar, SubjectChar>* search",
            "base::Vector<const SubjectChar> subject",
            "int start_index"
          ],
          "return_type": "int",
          "logic": "Linear search for short patterns. Uses FindFirstCharacter and CharCompare to find the pattern."
        },
        {
          "name": "InitialSearch",
          "parameters": [
            "StringSearch<PatternChar, SubjectChar>* search",
            "base::Vector<const SubjectChar> subject",
            "int start_index"
          ],
          "return_type": "int",
          "logic": "Linear search that may upgrade to BoyerMooreHorspoolSearch if the pattern isn't found quickly."
        },
        {
          "name": "BoyerMooreHorspoolSearch",
          "parameters": [
            "StringSearch<PatternChar, SubjectChar>* search",
            "base::Vector<const SubjectChar> subject",
            "int start_index"
          ],
          "return_type": "int",
          "logic": "Implementation of the Boyer-Moore-Horspool string search algorithm. May upgrade to BoyerMooreSearch."
        },
        {
          "name": "BoyerMooreSearch",
          "parameters": [
            "StringSearch<PatternChar, SubjectChar>* search",
            "base::Vector<const SubjectChar> subject",
            "int start_index"
          ],
          "return_type": "int",
          "logic": "Implementation of the Boyer-Moore string search algorithm."
        },
        {
          "name": "PopulateBoyerMooreHorspoolTable",
          "parameters": [],
          "return_type": "void",
          "logic": "Populates the bad character table for Boyer-Moore-Horspool search."
        },
        {
          "name": "PopulateBoyerMooreTable",
          "parameters": [],
          "return_type": "void",
          "logic": "Populates the good suffix table for Boyer-Moore search."
        },
        {
          "name": "exceedsOneByte",
          "parameters": [
            "uint8_t c"
          ],
          "return_type": "bool",
          "logic": "Checks if a uint8_t exceeds one byte (always false)."
        },
        {
          "name": "exceedsOneByte",
          "parameters": [
            "uint16_t c"
          ],
          "return_type": "bool",
          "logic": "Checks if a uint16_t exceeds one byte (greater than String::kMaxOneByteCharCodeU)."
        },
        {
          "name": "CharOccurrence",
          "parameters": [
            "int* bad_char_occurrence",
            "SubjectChar char_code"
          ],
          "return_type": "int",
          "logic": "Looks up character occurence information in the bad character table, taking into account char size and possible alphabet reduction."
        },
        {
          "name": "bad_char_table",
          "parameters": [],
          "return_type": "int*",
          "logic": "Returns the bad character shift table from the Isolate."
        },
        {
          "name": "good_suffix_shift_table",
          "parameters": [],
          "return_type": "int*",
          "logic": "Returns the good suffix shift table from the Isolate, offset by start_."
        },
        {
          "name": "suffix_table",
          "parameters": [],
          "return_type": "int*",
          "logic": "Returns the suffix table from the Isolate, offset by start_."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "AlignDown",
      "parameters": [
        "T value",
        "U alignment"
      ],
      "return_type": "T",
      "logic": "Aligns a value down to the nearest multiple of a given alignment."
    },
    {
      "name": "GetHighestValueByte",
      "parameters": [
        "base::uc16 character"
      ],
      "return_type": "uint8_t",
      "logic": "Gets the highest value byte from a uc16 character."
    },
    {
      "name": "GetHighestValueByte",
      "parameters": [
        "uint8_t character"
      ],
      "return_type": "uint8_t",
      "logic": "Gets the highest value byte from a uint8_t character. Returns the character itself."
    },
    {
      "name": "FindFirstCharacter",
      "parameters": [
        "base::Vector<const PatternChar> pattern",
        "base::Vector<const SubjectChar> subject",
        "int index"
      ],
      "return_type": "int",
      "logic": "Finds the first occurrence of a character in a string.  Uses memchr for efficiency, with a special case for searching for 0 characters in UC16 strings."
    },
    {
      "name": "CharCompare",
      "parameters": [
        "const PatternChar* pattern",
        "const SubjectChar* subject",
        "int length"
      ],
      "return_type": "bool",
      "logic": "Compares two character arrays for equality."
    },
    {
      "name": "SearchString",
      "parameters": [
        "Isolate* isolate",
        "base::Vector<const SubjectChar> subject",
        "base::Vector<const PatternChar> pattern",
        "int start_index"
      ],
      "return_type": "int",
      "logic": "Creates a StringSearch object and performs a single search."
    },
    {
      "name": "SearchStringRaw",
      "parameters": [
        "Isolate* isolate",
        "const SubjectChar* subject_ptr",
        "int subject_length",
        "const PatternChar* pattern_ptr",
        "int pattern_length",
        "int start_index"
      ],
      "return_type": "intptr_t",
      "logic": "A wrapper function around SearchString that wraps raw pointers to the subject and pattern as vectors."
    }
  ]
}