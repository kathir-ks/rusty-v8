{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/string-builder.h",
  "imports": [
    "src/common/assert-scope.h",
    "src/handles/handles.h",
    "src/objects/string.h"
  ],
  "classes": [
    {
      "name": "FixedArrayBuilder",
      "properties": [
        "array_",
        "length_",
        "has_non_smi_elements_"
      ],
      "methods": [
        {
          "name": "FixedArrayBuilder",
          "parameters": [
            "Isolate* isolate",
            "int initial_capacity"
          ],
          "return_type": "explicit",
          "logic": "Constructor. Initializes a FixedArrayBuilder with an initial capacity."
        },
        {
          "name": "FixedArrayBuilder",
          "parameters": [
            "DirectHandle<FixedArray> backing_store"
          ],
          "return_type": "explicit",
          "logic": "Constructor. Initializes a FixedArrayBuilder with a pre-existing backing store."
        },
        {
          "name": "Lazy",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "static FixedArrayBuilder",
          "logic": "Creates a FixedArrayBuilder that lazily allocates its backing store."
        },
        {
          "name": "HasCapacity",
          "parameters": [
            "int elements"
          ],
          "return_type": "bool",
          "logic": "Checks if the builder has capacity for the given number of elements."
        },
        {
          "name": "EnsureCapacity",
          "parameters": [
            "Isolate* isolate",
            "int elements"
          ],
          "return_type": "void",
          "logic": "Ensures the builder has capacity for the given number of elements, allocating more memory if needed."
        },
        {
          "name": "Add",
          "parameters": [
            "Tagged<Object> value"
          ],
          "return_type": "void",
          "logic": "Adds an object to the builder's array."
        },
        {
          "name": "Add",
          "parameters": [
            "Tagged<Smi> value"
          ],
          "return_type": "void",
          "logic": "Adds a Smi (small integer) to the builder's array."
        },
        {
          "name": "array",
          "parameters": [],
          "return_type": "DirectHandle<FixedArray>",
          "logic": "Returns the backing FixedArray as a DirectHandle."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current length of the builder's array."
        },
        {
          "name": "capacity",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current capacity of the builder's array."
        }
      ]
    },
    {
      "name": "ReplacementStringBuilder",
      "properties": [
        "heap_",
        "array_builder_",
        "subject_",
        "character_count_",
        "is_one_byte_"
      ],
      "methods": [
        {
          "name": "ReplacementStringBuilder",
          "parameters": [
            "Heap* heap",
            "DirectHandle<String> subject",
            "int estimated_part_count"
          ],
          "return_type": "",
          "logic": "Constructor. Initializes a ReplacementStringBuilder with a subject string and an estimated part count."
        },
        {
          "name": "AddSubjectSlice",
          "parameters": [
            "FixedArrayBuilder* builder",
            "int from",
            "int to"
          ],
          "return_type": "static inline void",
          "logic": "Adds a slice of the subject string to a FixedArrayBuilder. Static method intended for use with a pre-existing FixedArrayBuilder"
        },
        {
          "name": "AddSubjectSlice",
          "parameters": [
            "int from",
            "int to"
          ],
          "return_type": "inline void",
          "logic": "Adds a slice of the subject string to the builder's array."
        },
        {
          "name": "AddString",
          "parameters": [
            "DirectHandle<String> string"
          ],
          "return_type": "void",
          "logic": "Adds a string to the builder's array."
        },
        {
          "name": "ToString",
          "parameters": [],
          "return_type": "MaybeDirectHandle<String>",
          "logic": "Converts the builder's array into a string."
        },
        {
          "name": "IncrementCharacterCount",
          "parameters": [
            "uint32_t by"
          ],
          "return_type": "void",
          "logic": "Increments the character count, clamping at String::kMaxLength."
        }
      ]
    },
    {
      "name": "IncrementalStringBuilder",
      "properties": [
        "isolate_",
        "encoding_",
        "overflowed_",
        "part_length_",
        "current_index_",
        "accumulator_",
        "current_part_"
      ],
      "methods": [
        {
          "name": "IncrementalStringBuilder",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "explicit",
          "logic": "Constructor. Initializes an IncrementalStringBuilder for the given isolate."
        },
        {
          "name": "CurrentEncoding",
          "parameters": [],
          "return_type": "V8_INLINE String::Encoding",
          "logic": "Returns the current encoding of the string being built."
        },
        {
          "name": "Append",
          "parameters": [
            "SrcChar c"
          ],
          "return_type": "V8_INLINE void",
          "logic": "Appends a character to the string builder. Template method."
        },
        {
          "name": "AppendCharacter",
          "parameters": [
            "uint8_t c"
          ],
          "return_type": "V8_INLINE void",
          "logic": "Appends an 8-bit character to the string builder."
        },
        {
          "name": "AppendCStringLiteral",
          "parameters": [
            "const char (&literal)[N]"
          ],
          "return_type": "V8_INLINE void",
          "logic": "Appends a C-style string literal to the string builder. Template method."
        },
        {
          "name": "AppendCString",
          "parameters": [
            "const SrcChar* s"
          ],
          "return_type": "V8_INLINE void",
          "logic": "Appends a C-style string to the string builder. Template method."
        },
        {
          "name": "AppendString",
          "parameters": [
            "std::string_view str"
          ],
          "return_type": "V8_INLINE void",
          "logic": "Appends a std::string_view to the string builder."
        },
        {
          "name": "AppendInt",
          "parameters": [
            "int i"
          ],
          "return_type": "V8_INLINE void",
          "logic": "Appends an integer to the string builder."
        },
        {
          "name": "CurrentPartCanFit",
          "parameters": [
            "int length"
          ],
          "return_type": "V8_INLINE bool",
          "logic": "Checks if the current part of the string can fit the given length."
        },
        {
          "name": "EscapedLengthIfCurrentPartFits",
          "parameters": [
            "int length"
          ],
          "return_type": "V8_INLINE int",
          "logic": "Roughly estimates how long the escaped string will be if it fits in the current part. Useful for avoiding unnecessary part allocations."
        },
        {
          "name": "AppendString",
          "parameters": [
            "DirectHandle<String> string"
          ],
          "return_type": "void",
          "logic": "Appends a String to the string builder."
        },
        {
          "name": "Finish",
          "parameters": [],
          "return_type": "MaybeDirectHandle<String>",
          "logic": "Finishes the string building process and returns the resulting string."
        },
        {
          "name": "HasOverflowed",
          "parameters": [],
          "return_type": "V8_INLINE bool",
          "logic": "Returns true if the string builder has overflowed (exceeded maximum string length)."
        },
        {
          "name": "Length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current length of the string being built."
        },
        {
          "name": "ChangeEncoding",
          "parameters": [],
          "return_type": "V8_INLINE void",
          "logic": "Changes the encoding of the string to two-byte (if necessary)."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with this builder."
        }
      ]
    }
  ],
  "functions": []
}