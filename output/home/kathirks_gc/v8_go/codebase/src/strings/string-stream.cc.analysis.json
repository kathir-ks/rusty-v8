{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/string-stream.cc",
  "imports": [
    "src/strings/string-stream.h",
    "<memory>",
    "src/base/vector.h",
    "src/handles/handles-inl.h",
    "src/logging/log.h",
    "src/objects/js-array-inl.h",
    "src/objects/objects-inl.h",
    "src/objects/prototype.h"
  ],
  "classes": [
    {
      "name": "HeapStringAllocator",
      "properties": [
        "space_"
      ],
      "methods": [
        {
          "name": "allocate",
          "parameters": [
            "unsigned bytes"
          ],
          "return_type": "char*",
          "logic": "Allocates a char array of the specified size on the heap and returns a pointer to it. Stores the pointer in the space_ member."
        },
        {
          "name": "grow",
          "parameters": [
            "unsigned* bytes"
          ],
          "return_type": "char*",
          "logic": "Doubles the size of the allocated buffer if possible, copies the content, and returns the new buffer, if not possible, return the old buffer."
        }
      ]
    },
    {
      "name": "FixedStringAllocator",
      "properties": [
        "buffer_",
        "length_"
      ],
      "methods": [
        {
          "name": "allocate",
          "parameters": [
            "unsigned bytes"
          ],
          "return_type": "char*",
          "logic": "Returns a pointer to the internal buffer, assuming the requested size is not greater than the available length."
        },
        {
          "name": "grow",
          "parameters": [
            "unsigned* old"
          ],
          "return_type": "char*",
          "logic": "Records the original length of the buffer in old and returns a pointer to the internal buffer."
        }
      ]
    },
    {
      "name": "StringStream",
      "properties": [
        "buffer_",
        "length_",
        "capacity_",
        "allocator_",
        "object_print_mode_"
      ],
      "methods": [
        {
          "name": "Put",
          "parameters": [
            "char c"
          ],
          "return_type": "bool",
          "logic": "Appends a character to the internal buffer. If the buffer is full, it tries to grow it, and if it cannot grow, truncate and mark as full."
        },
        {
          "name": "Add",
          "parameters": [
            "base::Vector<const char> format",
            "base::Vector<FmtElm> elms"
          ],
          "return_type": "void",
          "logic": "Adds a formatted string to the internal buffer. Parses the format string and inserts elements from the 'elms' vector according to their type."
        },
        {
          "name": "PrintObject",
          "parameters": [
            "Tagged<Object> o"
          ],
          "return_type": "void",
          "logic": "Prints an object to the stream using ShortPrint.  If the object is verbose, tries to add to debug cache and prints a reference."
        },
        {
          "name": "ToCString",
          "parameters": [],
          "return_type": "std::unique_ptr<char[]>",
          "logic": "Creates a null-terminated C string from the internal buffer and returns it as a unique pointer."
        },
        {
          "name": "Log",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Logs the content of the internal buffer using the V8 logging system."
        },
        {
          "name": "OutputToFile",
          "parameters": [
            "FILE* out"
          ],
          "return_type": "void",
          "logic": "Outputs the content of the internal buffer to a file, breaking it into manageable chunks."
        },
        {
          "name": "ToString",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "DirectHandle<String>",
          "logic": "Creates a V8 string from the internal buffer and returns a handle to it."
        },
        {
          "name": "ClearMentionedObjectCache",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Clears the debug object cache associated with the isolate."
        },
        {
          "name": "IsMentionedObjectCacheClear",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if debug cache object is cleared."
        },
        {
          "name": "Put",
          "parameters": [
            "Tagged<String> str"
          ],
          "return_type": "bool",
          "logic": "Appends a V8 string to the internal buffer."
        },
        {
          "name": "Put",
          "parameters": [
            "Tagged<String> str",
            "int start",
            "int end"
          ],
          "return_type": "bool",
          "logic": "Appends a substring of a V8 string to the internal buffer."
        },
        {
          "name": "PrintName",
          "parameters": [
            "Tagged<Object> name"
          ],
          "return_type": "void",
          "logic": "Prints the name of an object to the stream."
        },
        {
          "name": "PrintUsingMap",
          "parameters": [
            "Isolate* isolate",
            "Tagged<JSObject> js_object"
          ],
          "return_type": "void",
          "logic": "Prints the properties of a JSObject to the stream, based on its map."
        },
        {
          "name": "PrintFixedArray",
          "parameters": [
            "Tagged<FixedArray> array",
            "unsigned int limit"
          ],
          "return_type": "void",
          "logic": "Prints the content of a FixedArray to the stream, up to a limit."
        },
        {
          "name": "PrintByteArray",
          "parameters": [
            "Tagged<ByteArray> byte_array"
          ],
          "return_type": "void",
          "logic": "Prints the content of a ByteArray to the stream."
        },
        {
          "name": "PrintMentionedObjectCache",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Prints the content of the debug object cache to the stream."
        },
        {
          "name": "PrintSecurityTokenIfChanged",
          "parameters": [
            "Isolate* isolate",
            "Tagged<JSFunction> fun"
          ],
          "return_type": "void",
          "logic": "Prints the security token of a JSFunction if it has changed."
        },
        {
          "name": "PrintFunction",
          "parameters": [
            "Isolate* isolate",
            "Tagged<JSFunction> fun",
            "Tagged<Object> receiver"
          ],
          "return_type": "void",
          "logic": "Prints function name information to the string stream. Calls PrintPrototype."
        },
        {
          "name": "PrintPrototype",
          "parameters": [
            "Isolate* isolate",
            "Tagged<JSFunction> fun",
            "Tagged<Object> receiver"
          ],
          "return_type": "void",
          "logic": "Prints prototype information for the function to the string stream."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsControlChar",
      "parameters": [
        "char c"
      ],
      "return_type": "bool",
      "logic": "Checks if a character is a control character used in formatting directives."
    }
  ]
}