{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/roots/roots.h",
  "imports": [
    "src/base/macros.h",
    "src/builtins/accessors.h",
    "src/common/globals.h",
    "src/handles/handles.h",
    "src/init/heap-symbols.h",
    "src/objects/objects-definitions.h",
    "src/objects/objects.h",
    "src/objects/slots.h",
    "src/objects/tagged.h"
  ],
  "classes": [
    {
      "name": "RootsTable",
      "properties": [
        "kEntriesCount",
        "roots_",
        "root_names_"
      ],
      "methods": [
        {
          "name": "IsRootHandleLocation",
          "parameters": [
            "Address* handle_location",
            "RootIndex* index"
          ],
          "return_type": "bool",
          "logic": "Checks if a given address is a root handle location and returns the corresponding RootIndex."
        },
        {
          "name": "IsRootHandle",
          "parameters": [
            "IndirectHandle<T> handle",
            "RootIndex* index"
          ],
          "return_type": "bool",
          "logic": "Checks if a given indirect handle is a root handle and returns the corresponding RootIndex."
        },
        {
          "name": "FindHeapNumber",
          "parameters": [
            "double value"
          ],
          "return_type": "IndirectHandle<HeapNumber>",
          "logic": "Returns the handle of a HeapNumber with the given value if one exists, or an empty handle otherwise."
        },
        {
          "name": "handle_at",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "IndirectHandle<Object>",
          "logic": "Returns the IndirectHandle<Object> at the given RootIndex."
        },
        {
          "name": "slot",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "FullObjectSlot",
          "logic": "Returns the FullObjectSlot at the given RootIndex."
        },
        {
          "name": "name",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "const char*",
          "logic": "Returns the name associated with the given RootIndex."
        },
        {
          "name": "offset_of",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "int",
          "logic": "Returns the offset of the given RootIndex in memory."
        },
        {
          "name": "IsImmortalImmovable",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "constexpr bool",
          "logic": "Determines if the root at a given index is considered immortal and immovable (never moved by the garbage collector)."
        },
        {
          "name": "IsReadOnly",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "constexpr bool",
          "logic": "Determines if the root at a given index is read-only."
        },
        {
          "name": "SingleCharacterStringIndex",
          "parameters": [
            "int c"
          ],
          "return_type": "constexpr RootIndex",
          "logic": "Converts a character code to the corresponding index in the single character string table."
        }
      ]
    },
    {
      "name": "ReadOnlyRoots",
      "properties": [
        "kEntriesCount",
        "read_only_roots_"
      ],
      "methods": [
        {
          "name": "one_pointer_filler_map_word",
          "parameters": [],
          "return_type": "MapWord",
          "logic": "Returns the packed map-word for one_pointer_filler_map."
        },
        {
          "name": "IsNameForProtector",
          "parameters": [
            "Tagged<HeapObject> object"
          ],
          "return_type": "bool",
          "logic": "Checks whether a given HeapObject is a Name for Protector."
        },
        {
          "name": "VerifyNameForProtectorsPages",
          "parameters": [],
          "return_type": "void",
          "logic": "Verify that the memory pages for the NameForProtector are correct"
        },
        {
          "name": "boolean_value",
          "parameters": [
            "bool value"
          ],
          "return_type": "Tagged<Boolean>",
          "logic": "Returns the Tagged<Boolean> representing the given boolean value (true or false)."
        },
        {
          "name": "address_at",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "Address",
          "logic": "Returns the address stored at the specified read-only root index."
        },
        {
          "name": "object_at",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Returns the object stored at the specified read-only root index."
        },
        {
          "name": "is_initialized",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "bool",
          "logic": "Checks if a root at a given index is initialized (primarily useful during snapshot creation)."
        },
        {
          "name": "Iterate",
          "parameters": [
            "RootVisitor* visitor"
          ],
          "return_type": "void",
          "logic": "Iterates over all read-only roots and calls the visitor's VisitRoot method for each one."
        },
        {
          "name": "InitFromStaticRootsTable",
          "parameters": [
            "Address cage_base"
          ],
          "return_type": "void",
          "logic": "Initializes the read-only roots from a static table, applying a cage base offset to the pointers."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetReadOnlyRoots",
      "parameters": [],
      "return_type": "ReadOnlyRoots",
      "logic": "Returns the global read-only roots table."
    }
  ]
}