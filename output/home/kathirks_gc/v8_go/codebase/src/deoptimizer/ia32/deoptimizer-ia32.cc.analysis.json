{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/deoptimizer/ia32/deoptimizer-ia32.cc",
  "imports": [
    "src/deoptimizer/deoptimizer.h"
  ],
  "classes": [
    {
      "name": "Deoptimizer",
      "properties": [
        "kEagerDeoptExitSize",
        "kLazyDeoptExitSize",
        "kAdaptShadowStackOffsetToSubtract"
      ],
      "methods": [
        {
          "name": "PatchToJump",
          "parameters": [
            "Address pc",
            "Address new_pc"
          ],
          "return_type": "void",
          "logic": "This function is intended to patch a jump instruction at address 'pc' to jump to 'new_pc'. However, it is marked as UNREACHABLE() on IA32."
        }
      ]
    },
    {
      "name": "RegisterValues",
      "properties": [
        "simd128_registers_"
      ],
      "methods": [
        {
          "name": "GetFloatRegister",
          "parameters": [
            "unsigned n"
          ],
          "return_type": "Float32",
          "logic": "Reads a Float32 value from the SIMD registers at index 'n' using unaligned memory access."
        },
        {
          "name": "GetDoubleRegister",
          "parameters": [
            "unsigned n"
          ],
          "return_type": "Float64",
          "logic": "Reads a Float64 value from the SIMD registers at index 'n' using unaligned memory access. It also checks if n is within the bounds of `simd128_registers_`."
        },
        {
          "name": "SetDoubleRegister",
          "parameters": [
            "unsigned n",
            "Float64 value"
          ],
          "return_type": "void",
          "logic": "Writes a Float64 value to the SIMD registers at index 'n' using unaligned memory access. It also checks if n is within the bounds of `simd128_registers_`."
        }
      ]
    },
    {
      "name": "FrameDescription",
      "properties": [
        "pc_"
      ],
      "methods": [
        {
          "name": "SetCallerPc",
          "parameters": [
            "unsigned offset",
            "intptr_t value"
          ],
          "return_type": "void",
          "logic": "Sets the caller's program counter in the frame description using SetFrameSlot."
        },
        {
          "name": "SetCallerFp",
          "parameters": [
            "unsigned offset",
            "intptr_t value"
          ],
          "return_type": "void",
          "logic": "Sets the caller's frame pointer in the frame description using SetFrameSlot."
        },
        {
          "name": "SetCallerConstantPool",
          "parameters": [
            "unsigned offset",
            "intptr_t value"
          ],
          "return_type": "void",
          "logic": "Indicates an attempt to set the caller's constant pool pointer. Marked as UNREACHABLE() because embedded constant pool support is not available on IA32."
        },
        {
          "name": "SetPc",
          "parameters": [
            "intptr_t pc"
          ],
          "return_type": "void",
          "logic": "Sets the program counter (PC) value in the frame description."
        }
      ]
    }
  ],
  "functions": [],
  "constants": [
    {
      "name": "Deoptimizer::kEagerDeoptExitSize",
      "value": 5
    },
    {
      "name": "Deoptimizer::kLazyDeoptExitSize",
      "value": 5
    },
    {
      "name": "Deoptimizer::kAdaptShadowStackOffsetToSubtract",
      "value": 0
    }
  ]
}