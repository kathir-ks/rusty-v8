{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/deoptimizer/translation-opcode.h",
  "imports": [
    "src/base/macros.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "TranslationOpcodeOperandCount",
      "parameters": [
        "TranslationOpcode o"
      ],
      "return_type": "int",
      "logic": "Returns the number of operands for a given TranslationOpcode. It uses a static array `counts` indexed by the enum value to look up the operand count. The `counts` array is initialized using the `TRANSLATION_OPCODE_LIST` macro."
    },
    {
      "name": "TranslationOpcodeIsBegin",
      "parameters": [
        "TranslationOpcode o"
      ],
      "return_type": "bool",
      "logic": "Checks if a given TranslationOpcode is a 'begin' opcode, specifically BEGIN_WITH_FEEDBACK or BEGIN_WITHOUT_FEEDBACK.  Used to identify opcodes marking the start of a block of code."
    },
    {
      "name": "IsTranslationFrameOpcode",
      "parameters": [
        "TranslationOpcode o"
      ],
      "return_type": "bool",
      "logic": "Determines whether a given TranslationOpcode represents a frame opcode. It checks if the opcode value is within the range of frame opcodes, leveraging the `kNumTranslationFrameOpcodes` constant as an upper bound.  Includes JS frame opcodes as well."
    },
    {
      "name": "IsTranslationJsFrameOpcode",
      "parameters": [
        "TranslationOpcode o"
      ],
      "return_type": "bool",
      "logic": "Determines whether a given TranslationOpcode represents a JS frame opcode. It checks if the opcode value is within the range of JS frame opcodes, leveraging the `kNumTranslationJsFrameOpcodes` constant as an upper bound."
    },
    {
      "name": "IsTranslationInterpreterFrameOpcode",
      "parameters": [
        "TranslationOpcode o"
      ],
      "return_type": "bool",
      "logic": "Checks if a given TranslationOpcode is an interpreted frame opcode, specifically INTERPRETED_FRAME_WITH_RETURN or INTERPRETED_FRAME_WITHOUT_RETURN."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& out",
        "TranslationOpcode opcode"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the stream insertion operator `<<` to allow printing of `TranslationOpcode` enum values to an output stream. It uses a switch statement and the `TRANSLATION_OPCODE_LIST` macro to provide human-readable names for each opcode."
    }
  ]
}