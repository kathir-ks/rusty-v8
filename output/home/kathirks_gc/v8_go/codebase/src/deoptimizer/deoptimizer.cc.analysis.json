{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/deoptimizer/deoptimizer.cc",
  "imports": [
    "src/deoptimizer/deoptimizer.h",
    "<optional>",
    "src/base/memory.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/register-configuration.h",
    "src/codegen/reloc-info.h",
    "src/debug/debug.h",
    "src/deoptimizer/deoptimized-frame-info.h",
    "src/deoptimizer/materialized-object-store.h",
    "src/deoptimizer/translated-state.h",
    "src/execution/frames-inl.h",
    "src/execution/isolate.h",
    "src/execution/pointer-authentication.h",
    "src/execution/v8threads.h",
    "src/handles/handles-inl.h",
    "src/heap/heap-inl.h",
    "src/logging/counters.h",
    "src/logging/log.h",
    "src/logging/runtime-call-stats-scope.h",
    "src/objects/deoptimization-data.h",
    "src/objects/js-function-inl.h",
    "src/objects/oddball.h",
    "src/snapshot/embedded/embedded-data.h",
    "src/utils/utils.h",
    "src/wasm/baseline/liftoff-compiler.h",
    "src/wasm/baseline/liftoff-varstate.h",
    "src/wasm/compilation-environment-inl.h",
    "src/wasm/function-compiler.h",
    "src/wasm/signature-hashing.h",
    "src/wasm/wasm-deopt-data.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-linkage.h"
  ],
  "classes": [
    {
      "name": "DeoptimizableCodeIterator",
      "properties": [
        "isolate_",
        "safepoint_scope_",
        "object_iterator_",
        "state_"
      ],
      "methods": [
        {
          "name": "DeoptimizableCodeIterator",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "",
          "logic": "Constructor for the DeoptimizableCodeIterator class. It initializes the iterator to iterate through code objects in the code space and code LO space of the isolate."
        },
        {
          "name": "Next",
          "parameters": [],
          "return_type": "Tagged<Code>",
          "logic": "Iterates through the code objects in the isolate's code spaces, returning the next code object that can be deoptimized. It skips code objects that cannot be deoptimized. Returns a null Tagged<Code> object when iteration is complete."
        }
      ]
    },
    {
      "name": "FrameWriter",
      "properties": [
        "deoptimizer_",
        "frame_",
        "trace_scope_",
        "top_offset_"
      ],
      "methods": [
        {
          "name": "FrameWriter",
          "parameters": [
            "Deoptimizer* deoptimizer",
            "FrameDescription* frame",
            "CodeTracer::Scope* trace_scope"
          ],
          "return_type": "",
          "logic": "Constructor for FrameWriter class. It takes a Deoptimizer instance, a FrameDescription object, and a CodeTracer::Scope as input and initializes the class members. Notably, it initializes top_offset_ with the frame size."
        },
        {
          "name": "PushRawValue",
          "parameters": [
            "intptr_t value",
            "const char* debug_hint"
          ],
          "return_type": "void",
          "logic": "Pushes a raw integer value onto the frame and prints debug output if tracing is enabled."
        },
        {
          "name": "PushRawObject",
          "parameters": [
            "Tagged<Object> obj",
            "const char* debug_hint"
          ],
          "return_type": "void",
          "logic": "Pushes a raw object onto the frame and prints debug output if tracing is enabled."
        },
        {
          "name": "PushBottommostCallerPc",
          "parameters": [
            "intptr_t pc"
          ],
          "return_type": "void",
          "logic": "Pushes the bottommost caller's program counter (PC) onto the frame and prints debug output. It's used when this is the very first frame being written."
        },
        {
          "name": "PushApprovedCallerPc",
          "parameters": [
            "intptr_t pc"
          ],
          "return_type": "void",
          "logic": "Pushes an approved (signed) caller's program counter (PC) onto the frame."
        },
        {
          "name": "PushCallerFp",
          "parameters": [
            "intptr_t fp"
          ],
          "return_type": "void",
          "logic": "Pushes the caller's frame pointer (FP) onto the frame and prints debug output if tracing is enabled."
        },
        {
          "name": "PushCallerConstantPool",
          "parameters": [
            "intptr_t cp"
          ],
          "return_type": "void",
          "logic": "Pushes the caller's constant pool pointer onto the frame and prints debug output if tracing is enabled."
        },
        {
          "name": "PushTranslatedValue",
          "parameters": [
            "const TranslatedFrame::iterator& iterator",
            "const char* debug_hint"
          ],
          "return_type": "void",
          "logic": "Pushes a translated value onto the frame, materializes it if required, and prints debug output if tracing is enabled."
        },
        {
          "name": "PushFeedbackVectorForMaterialization",
          "parameters": [
            "const TranslatedFrame::iterator& iterator"
          ],
          "return_type": "void",
          "logic": "Pushes a marker for the feedback vector onto the frame and queues the feedback vector for materialization. The arguments marker is temporarily pushed."
        },
        {
          "name": "PushStackJSArguments",
          "parameters": [
            "TranslatedFrame::iterator& iterator",
            "int parameters_count"
          ],
          "return_type": "void",
          "logic": "Pushes the JavaScript arguments from the translated frame onto the stack in reverse order. It receives an iterator and a count of parameters to push."
        },
        {
          "name": "top_offset",
          "parameters": [],
          "return_type": "unsigned",
          "logic": "Returns the current top offset."
        },
        {
          "name": "frame",
          "parameters": [],
          "return_type": "FrameDescription*",
          "logic": "Returns the FrameDescription object."
        }
      ]
    },
    {
      "name": "ActivationsFinder",
      "properties": [],
      "methods": [
        {
          "name": "ActivationsFinder",
          "parameters": [
            "Tagged<GcSafeCode> topmost_optimized_code",
            "bool safe_to_deopt_topmost_optimized_code"
          ],
          "return_type": "",
          "logic": "Constructor for the ActivationsFinder class. It initializes member variables used in the VisitThread method."
        },
        {
          "name": "VisitThread",
          "parameters": [
            "Isolate* isolate",
            "ThreadLocalTop* top"
          ],
          "return_type": "void",
          "logic": "Iterates through stack frames of a thread and replaces the program counter (PC) of codes marked for deoptimization with a trampoline to the deoptimizer call."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Deoptimizer::New",
      "parameters": [
        "Address raw_function",
        "DeoptimizeKind kind",
        "Address from",
        "int fp_to_sp_delta",
        "Isolate* isolate"
      ],
      "return_type": "Deoptimizer*",
      "logic": "Creates a new Deoptimizer object. It's called from generated code and initializes necessary fields, including the function, deoptimization kind, and stack frame information. It sets the current deoptimizer for the isolate."
    },
    {
      "name": "Deoptimizer::Grab",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "Deoptimizer*",
      "logic": "Retrieves the current Deoptimizer object from the isolate and prepares it for use by deleting frame descriptions."
    },
    {
      "name": "Deoptimizer::DeleteForWasm",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "size_t",
      "logic": "Deletes a Deoptimizer object specifically created for WebAssembly deoptimization. It prevents garbage collection during the deletion process. This is used to clean up memory."
    },
    {
      "name": "Deoptimizer::DebuggerInspectableFrame",
      "parameters": [
        "JavaScriptFrame* frame",
        "int jsframe_index",
        "Isolate* isolate"
      ],
      "return_type": "DeoptimizedFrameInfo*",
      "logic": "Creates a DeoptimizedFrameInfo object for a given JavaScript frame, which allows inspecting the frame during debugging."
    },
    {
      "name": "Deoptimizer::DeoptimizeMarkedCode",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Iterates through the stack frames and replaces the program counter (PC) for codes that are marked for deoptimization with a trampoline to the deoptimizer call."
    },
    {
      "name": "Deoptimizer::DeoptimizeAll",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Marks all deoptimizable code for deoptimization and then triggers the deoptimization process. This is used to deoptimize all code in all contexts."
    },
    {
      "name": "Deoptimizer::DeoptimizeFunction",
      "parameters": [
        "Tagged<JSFunction> function",
        "LazyDeoptimizeReason reason",
        "Tagged<Code> code"
      ],
      "return_type": "void",
      "logic": "Marks a specific function's code for deoptimization and unlinks any other functions that share that code. The code will not be shared across native contexts."
    },
    {
      "name": "Deoptimizer::DeoptimizeAllOptimizedCodeWithFunction",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<SharedFunctionInfo> function"
      ],
      "return_type": "void",
      "logic": "Marks all optimized code that inlines a given function for deoptimization and then triggers the deoptimization process."
    },
    {
      "name": "Deoptimizer::EnsureValidReturnAddress",
      "parameters": [
        "Isolate* isolate",
        "Address address"
      ],
      "return_type": "Address",
      "logic": "Ensures that a given return address is valid by checking against a list of known valid addresses, like builtins or wasm entry points. It returns the address if it's valid; otherwise, it aborts."
    },
    {
      "name": "Deoptimizer::ComputeOutputFrames",
      "parameters": [
        "Deoptimizer* deoptimizer"
      ],
      "return_type": "void",
      "logic": "Calls the internal `DoComputeOutputFrames` method to compute the output frames for deoptimization."
    },
    {
      "name": "Deoptimizer::MessageFor",
      "parameters": [
        "DeoptimizeKind kind"
      ],
      "return_type": "const char*",
      "logic": "Returns a descriptive message for a given DeoptimizeKind."
    },
    {
      "name": "LookupCatchHandler",
      "parameters": [
        "Isolate* isolate",
        "TranslatedFrame* translated_frame",
        "int* data_out"
      ],
      "return_type": "int",
      "logic": "Looks up a catch handler in the handler table of a bytecode array for a given bytecode offset in the translated frame. Returns the handler index or -1 if not found."
    },
    {
      "name": "Deoptimizer::TraceMarkForDeoptimization",
      "parameters": [
        "Isolate* isolate",
        "Tagged<Code> code",
        "LazyDeoptimizeReason reason"
      ],
      "return_type": "void",
      "logic": "Prints a trace message indicating that a piece of code is being marked for deoptimization."
    },
    {
      "name": "Deoptimizer::TraceEvictFromOptimizedCodeCache",
      "parameters": [
        "Isolate* isolate",
        "Tagged<SharedFunctionInfo> sfi",
        "const char* reason"
      ],
      "return_type": "void",
      "logic": "Prints a trace message indicating that optimized code is being evicted from the cache."
    },
    {
      "name": "Deoptimizer::TraceFoundActivation",
      "parameters": [
        "Isolate* isolate",
        "Tagged<JSFunction> function"
      ],
      "return_type": "void",
      "logic": "Prints a trace message indicating that an activation of a specific function has been found during deoptimization."
    },
    {
      "name": "Deoptimizer::TraceDeoptAll",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Prints a trace message indicating that all code is being deoptimized."
    },
    {
      "name": "CompileWithLiftoffAndGetDeoptInfo",
      "parameters": [
        "wasm::NativeModule* native_module",
        "int function_index",
        "BytecodeOffset deopt_point",
        "bool is_topmost"
      ],
      "return_type": "std::pair<wasm::WasmCode*,\n          std::unique_ptr<wasm::LiftoffFrameDescriptionForDeopt>>",
      "logic": "Compiles a WebAssembly function using Liftoff and retrieves the deoptimization information. This is used during WebAssembly deoptimization."
    },
    {
      "name": "Deoptimizer::DoComputeOutputFramesWasmImpl",
      "parameters": [],
      "return_type": "void",
      "logic": "Builds up the output frames for a wasm deopt"
    },
    {
      "name": "Deoptimizer::GetWasmStackSlotsCounts",
      "parameters": [
        "const wasm::FunctionSig* sig",
        "int* parameter_stack_slots",
        "int* return_stack_slots"
      ],
      "return_type": "void",
      "logic": "Calculates the number of stack slots required for parameters and return values in a WebAssembly function signature."
    },
    {
      "name": "DeoptimizedMaglevvedCodeEarly",
      "parameters": [
        "Isolate* isolate",
        "Tagged<JSFunction> function",
        "Tagged<Code> code"
      ],
      "return_type": "bool",
      "logic": "Determines whether a deoptimized Maglevved code should be re-optimized early."
    },
    {
      "name": "Deoptimizer::DoComputeOutputFrames",
      "parameters": [],
      "return_type": "void",
      "logic": "Computes the output frames for deoptimization. This involves translating the optimized frame to a series of unoptimized frames, setting up the stack, and materializing necessary objects."
    },
    {
      "name": "Deoptimizer::DeoptExitIsInsideOsrLoop",
      "parameters": [
        "Isolate* isolate",
        "Tagged<JSFunction> function",
        "BytecodeOffset deopt_exit_offset",
        "BytecodeOffset osr_offset"
      ],
      "return_type": "bool",
      "logic": "Checks if the deoptimization exit is inside an on-stack replacement (OSR) loop."
    },
    {
      "name": "DispatchBuiltinFor",
      "parameters": [
        "bool advance_bc",
        "bool is_restart_frame"
      ],
      "return_type": "Builtin",
      "logic": "Gets the dispatch builtin for unoptimized frames."
    },
    {
      "name": "Deoptimizer::DoComputeUnoptimizedFrame",
      "parameters": [
        "TranslatedFrame* translated_frame",
        "int frame_index",
        "bool goto_catch_handler"
      ],
      "return_type": "void",
      "logic": "Computes the output frame for an unoptimized JavaScript function. It sets up the stack frame, translates interpreter registers, and prepares for bytecode dispatch."
    },
    {
      "name": "Deoptimizer::DoComputeInlinedExtraArguments",
      "parameters": [
        "TranslatedFrame* translated_frame",
        "int frame_index"
      ],
      "return_type": "void",
      "logic": "Computes the frame for inlined extra arguments in a deoptimized frame."
    },
    {
      "name": "Deoptimizer::DoComputeConstructCreateStubFrame",
      "parameters": [
        "TranslatedFrame* translated_frame",
        "int frame_index"
      ],
      "return_type": "void",
      "logic": "Computes the frame for a constructor create stub in a deoptimized frame."
    },
    {
      "name": "Deoptimizer::DoComputeConstructInvokeStubFrame",
      "parameters": [
        "TranslatedFrame* translated_frame",
        "int frame_index"
      ],
      "return_type": "void",
      "logic": "Computes the frame for a constructor invoke stub in a deoptimized frame."
    },
    {
      "name": "Deoptimizer::DoComputeBuiltinContinuation",
      "parameters": [
        "TranslatedFrame* translated_frame",
        "int frame_index",
        "BuiltinContinuationMode mode"
      ],
      "return_type": "void",
      "logic": "Computes the frame for a builtin continuation in a deoptimized frame."
    }
  ]
}