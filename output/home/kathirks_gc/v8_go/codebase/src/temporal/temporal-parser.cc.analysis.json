{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/temporal/temporal-parser.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/temporal/temporal-parser.cc\",\n  \"imports\": [\n    \"src/temporal/temporal-parser.h\",\n    \"<optional>\",\n    \"src/base/bounds.h\",\n    \"src/objects/string-inl.h\",\n    \"src/strings/char-predicates-inl.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"TemporalParser\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ParseTemporalDateTimeString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a temporal date/time string using SatisfyTemporalDateTimeString and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTemporalYearMonthString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a temporal year/month string using SatisfyTemporalYearMonthString and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTemporalMonthDayString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a temporal month/day string using SatisfyTemporalMonthDayString and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTemporalTimeString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a temporal time string using SatisfyTemporalTimeString and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTemporalInstantString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a temporal instant string using SatisfyTemporalInstantString and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTemporalZonedDateTimeString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a temporal zoned date/time string using SatisfyTemporalZonedDateTimeString and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTimeZoneIdentifier\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a timezone identifier string using SatisfyTimeZoneIdentifier and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseCalendarName\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a calendar name string using SatisfyCalendarName and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTimeZoneNumericUTCOffset\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Result>\",\n          \"logic\": \"Parses a timezone numeric UTC offset string using SatisfyTimeZoneNumericUTCOffset and returns the result or std::nullopt if parsing fails.\"\n        },\n        {\n          \"name\": \"ParseTemporalDurationString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<String> iso_string\"\n          ],\n          \"return_type\": \"std::optional<ParsedISO8601Duration>\",\n          \"logic\": \"Parses a temporal duration string using SatisfyTemporalDurationString and returns the result or std::nullopt if parsing fails.\"\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"IsTZLeadingChar\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is a valid leading character for a Time Zone name.\"\n    },\n    {\n      \"name\": \"IsTZChar\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is a valid character for a Time Zone name.\"\n    },\n    {\n      \"name\": \"IsDecimalSeparator\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is a valid decimal separator ('.' or ',').\"\n    },\n    {\n      \"name\": \"IsDateTimeSeparator\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is a valid date/time separator (' ' or 't').\"\n    },\n    {\n      \"name\": \"IsAsciiSign\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is an ASCII sign ('-' or '+').\"\n    },\n    {\n      \"name\": \"IsSign\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is a sign (either ASCII or Unicode minus sign).\"\n    },\n    {\n      \"name\": \"IsTimeZoneUTCOffsetSign\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a character is a valid time zone UTC offset sign.\"\n    },\n    {\n      \"name\": \"CanonicalSign\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"base::uc32\",\n      \"logic\": \"Converts a Unicode minus sign to an ASCII minus sign.\"\n    },\n    {\n      \"name\": \"ToInt\",\n      \"parameters\": [\n        \"base::uc32 c\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Converts a character to its integer representation (assuming it's a digit).\"\n    },\n    {\n      \"name\": \"HasTwoDigits\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a string has at least two digits at a given starting position.\"\n    },\n    {\n      \"name\": \"ScanTwoDigitsExpectValue\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t expected\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans two digits and returns the length of the match (2) if the value matches the expected value.\"\n    },\n    {\n      \"name\": \"ScanTwoDigitsExpectRange\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t min\",\n        \"int32_t max\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans two digits and returns the length of the match (2) if the value is within the specified range.\"\n    },\n    {\n      \"name\": \"ScanTwoDigitsExpectZeroOrRange\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t min\",\n        \"int32_t max\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans two digits and returns the length of the match (2) if the value is 0 or within the specified range.\"\n    },\n    {\n      \"name\": \"ScanHour\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for an Hour production (00-23).\"\n    },\n    {\n      \"name\": \"ScanUnpaddedHour\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for an unpadded hour (0-23).\"\n    },\n    {\n      \"name\": \"ScanMinuteSecond\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a MinuteSecond production (00-59).\"\n    },\n    {\n      \"name\": \"ScanTimeHour\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanHour to parse TimeHour.\"\n    },\n    {\n      \"name\": \"ScanTimeMinute\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanMinuteSecond to parse TimeMinute.\"\n    },\n    {\n      \"name\": \"ScanTimeSecond\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeSecond production (00-60).\"\n    },\n    {\n      \"name\": \"ScanFractionalPart\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a FractionalPart production (one to nine digits).\"\n    },\n    {\n      \"name\": \"ScanTimeFractionalPart\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanFractionalPart to parse TimeFractionalPart.\"\n    },\n    {\n      \"name\": \"ScanFraction\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a Fraction production (DecimalSeparator FractionalPart).\"\n    },\n    {\n      \"name\": \"ScanTimeFraction\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeFraction production (DecimalSeparator TimeFractionalPart).\"\n    },\n    {\n      \"name\": \"ScanTimeFraction\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeFraction production (DecimalSeparator TimeFractionalPart) and stores the result in the ParsedISO8601Result struct.\"\n    },\n    {\n      \"name\": \"ScanTimeSpec\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeSpec production (various combinations of hour, minute, second, and fraction).\"\n    },\n    {\n      \"name\": \"ScanTimeSpecSeparator\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeSpecSeparator production (DateTimeSeparator TimeSpec).\"\n    },\n    {\n      \"name\": \"ScanDateExtendedYear\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateExtendedYear production (Sign Digit Digit Digit Digit Digit Digit).\"\n    },\n    {\n      \"name\": \"ScanDateFourDigitYear\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateFourDigitYear production (Digit Digit Digit Digit).\"\n    },\n    {\n      \"name\": \"ScanDateYear\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateYear production (either DateFourDigitYear or DateExtendedYear).\"\n    },\n    {\n      \"name\": \"ScanDateMonth\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateMonth production (01-12).\"\n    },\n    {\n      \"name\": \"ScanDateDay\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateDay production (01-31).\"\n    },\n    {\n      \"name\": \"ScanDate\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a Date production (DateYear - DateMonth - DateDay or DateYear DateMonth DateDay).\"\n    },\n    {\n      \"name\": \"ScanDateMonthWithThirtyOneDays\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateMonth that has 31 days.\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffsetHour\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanHour to parse TimeZoneUTCOffsetHour.\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffsetMinute\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanMinuteSecond to parse TimeZoneUTCOffsetMinute.\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffsetSecond\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanMinuteSecond to parse TimeZoneUTCOffsetSecond.\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffsetFractionalPart\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Forwards to ScanFractionalPart to parse TimeZoneUTCOffsetFractionalPart.\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffsetFraction\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneUTCOffsetFraction production (DecimalSeparator TimeZoneUTCOffsetFractionalPart).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneNumericUTCOffset\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneNumericUTCOffset production (various combinations of sign, hour, minute, second, and fraction).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffset\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneUTCOffset production (either TimeZoneNumericUTCOffset or UTCDesignator).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneIANANameComponent\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneIANANameComponent production (TZLeadingChar TZChar{0,13}).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneIANALegacyName\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for one of the predefined IANA legacy time zone names\"\n    },\n    {\n      \"name\": \"ScanEtcGMTASCIISignUnpaddedHour\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for 'Etc/GMT' followed by an ASCII sign and an unpadded hour\"\n    },\n    {\n      \"name\": \"ScanTimeZoneIANAName\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneIANAName production (Etc/GMT ASCIISign UnpaddedHour, TimeZoneIANANameTail, or TimeZoneIANALegacyName).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneUTCOffsetName\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneUTCOffsetName production (Sign Hour, Sign Hour : MinuteSecond, etc.).\"\n    },\n     {\n      \"name\": \"ScanEtcGMTAsciiSignHour\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans the string to see if the input matches `Etc/GMT` ASCIISign Hour\"\n    },\n   {\n      \"name\": \"ScanTimeZoneIdentifier\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans either TimeZoneIANAName or TimeZoneUTCOffsetName for a TimeZoneIdentifier production\"\n    },\n    {\n      \"name\": \"ScanTimeZoneBracketedAnnotation\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneBracketedAnnotation production ([ TimeZoneIdentifier ]).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneOffsetRequired\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZoneOffsetRequired production (TimeZoneUTCOffset [TimeZoneBracketedAnnotation]).\"\n    },\n    {\n      \"name\": \"ScanTimeZoneNameRequired\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for TimeZoneNameRequired production ([TimeZoneUTCOffset] TimeZoneBracketedAnnotation).\"\n    },\n    {\n      \"name\": \"ScanTimeZone\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TimeZone production (TimeZoneUTCOffset [TimeZoneBracketedAnnotation] or TimeZoneBracketedAnnotation).\"\n    },\n    {\n      \"name\": \"ScanValidMonthDay\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a valid month and day combination.\"\n    },\n    {\n      \"name\": \"ScanTimeSpecWithOptionalTimeZoneNotAmbiguous\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans TimeSpec [TimeZone] but not one of ValidMonthDay or DateSpecYearMonth\"\n    },\n    {\n      \"name\": \"ScanCalendarNameComponent\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a CalendarNameComponent production (CalChar {3,8}).\"\n    },\n    {\n      \"name\": \"ScanCalendarName\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a CalendarName production (CalendarNameTail).\"\n    },\n    {\n      \"name\": \"ScanCalendar\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a Calendar production ('[u-ca=' CalendarName ']').\"\n    },\n    {\n      \"name\": \"ScanCalendarTime_L1\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for CalendarTime_L1 production. TimeDesignator TimeSpec [TimeZone] [Calendar]\"\n    },\n    {\n      \"name\": \"ScanCalendarTime_L2\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for CalendarTime_L2 production. TimeSpecWithOptionalTimeZoneNotAmbiguous [Calendar]\"\n    },\n    {\n      \"name\": \"ScanDateTime\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateTime production (Date [TimeSpecSeparator][TimeZone]).\"\n    },\n    {\n      \"name\": \"ScanDateSpecYearMonth\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateSpecYearMonth production (DateYear ['-'] DateMonth).\"\n    },\n    {\n      \"name\": \"ScanDateSpecMonthDay\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a DateSpecMonthDay production ([TwoDash] DateMonth [-] DateDay).\"\n    },\n    {\n      \"name\": \"ScanCalendarDateTime\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for CalendarDateTime production DateTime [Calendar]\"\n    },\n    {\n      \"name\": \"ScanCalendarDateTimeTimeRequired\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans CalendarDateTimeTimeRequired: Date TimeSpecSeparator [TimeZone] [Calendar]\"\n    },\n    {\n      \"name\": \"ScanTemporalZonedDateTimeString\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for a TemporalZonedDateTimeString production: Date [TimeSpecSeparator] TimeZoneNameRequired [Calendar]\"\n    },\n    {\n      \"name\": \"ScanTemporalDateTimeString\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for TemporalDateTimeString using CalendarDateTime.\"\n    },\n    {\n      \"name\": \"ScanTemporalMonthDayString\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans either DateSpecMonthDay or CalendarDateTime for a TemporalMonthDayString.\"\n    },\n    {\n      \"name\": \"ScanTemporalInstantString\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"ParsedISO8601Result* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for TemporalInstantString production Date [TimeSpecSeparator] TimeZoneOffsetRequired [Calendar]\"\n    },\n    {\n      \"name\": \"ScanDigits\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* out\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for one or more digits and parses the result into a double\"\n    },\n    {\n      \"name\": \"ScanDurationYears\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration years, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationMonths\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration months, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationWeeks\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration weeks, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationDays\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration days, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationWholeHours\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration whole hours, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationWholeMinutes\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration whole minutes, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationWholeSeconds\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"double* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration whole seconds, forwards to ScanDigits\"\n    },\n    {\n      \"name\": \"ScanDurationHoursFraction\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans for duration hours fraction, forwards to ScanTimeFraction\"\n    },\n    {\n      \"name\": \"ScanDurationMinutesFraction\",\n      \"parameters\": [\n        \"base::Vector<Char> str\",\n        \"int32_t s\",\n        \"int32_t* r\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Scans"
}