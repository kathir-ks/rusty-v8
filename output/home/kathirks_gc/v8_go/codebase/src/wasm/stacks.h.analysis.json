{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/stacks.h",
  "imports": [
    "<optional>",
    "src/common/globals.h",
    "src/utils/allocation.h"
  ],
  "classes": [
    {
      "name": "JumpBuffer",
      "properties": [
        "sp",
        "fp",
        "pc",
        "stack_limit",
        "state",
        "caller (only if V8_ENABLE_SANDBOX)"
      ],
      "methods": []
    },
    {
      "name": "StackMemory",
      "properties": [
        "limit_",
        "size_",
        "owned_",
        "jmpbuf_",
        "id_",
        "index_",
        "stack_switch_info_",
        "first_segment_",
        "active_segment_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [],
          "return_type": "std::unique_ptr<StackMemory>",
          "logic": "Creates a new StackMemory object using a unique pointer."
        },
        {
          "name": "GetCentralStackView",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "StackMemory*",
          "logic": "Returns a pointer to the central stack memory view for the given isolate.  May be the simulator's stack if running on the simulator."
        },
        {
          "name": "~StackMemory",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for StackMemory, responsible for releasing allocated resources."
        },
        {
          "name": "jslimit",
          "parameters": [],
          "return_type": "void*",
          "logic": "Returns the JavaScript stack limit, which is an offset from the stack limit.  Uses the active segment if available."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the base address of the stack memory. Considers the active segment if segmented stacks are used and also accounts for simulator requirements."
        },
        {
          "name": "jmpbuf",
          "parameters": [],
          "return_type": "JumpBuffer*",
          "logic": "Returns a pointer to the JumpBuffer associated with this stack."
        },
        {
          "name": "Contains",
          "parameters": [
            "Address addr"
          ],
          "return_type": "bool",
          "logic": "Checks if the given address is within the bounds of this stack's memory region.  Handles both owned stacks and central stack view."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the ID of this stack."
        },
        {
          "name": "IsActive",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if this stack is currently active based on its JumpBuffer's state."
        },
        {
          "name": "set_index",
          "parameters": [
            "size_t index"
          ],
          "return_type": "void",
          "logic": "Sets the index of this stack in the isolate's stack vector."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the index of this stack in the isolate's stack vector."
        },
        {
          "name": "allocated_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates the total allocated size of the stack, accounting for all segments."
        },
        {
          "name": "FillWith",
          "parameters": [
            "uint8_t value"
          ],
          "return_type": "void",
          "logic": "Fills the stack memory with a given byte value. Iterates through all segments."
        },
        {
          "name": "old_fp",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the old frame pointer (fp) stored in the active segment."
        },
        {
          "name": "Grow",
          "parameters": [
            "Address current_fp"
          ],
          "return_type": "bool",
          "logic": "Grows the stack by allocating a new segment.  Takes current frame pointer as argument to perform checks."
        },
        {
          "name": "Shrink",
          "parameters": [],
          "return_type": "Address",
          "logic": "Shrinks the stack by deallocating the active segment."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the stack to its initial state."
        },
        {
          "name": "stack_switch_info",
          "parameters": [],
          "return_type": "const StackSwitchInfo&",
          "logic": "Returns a reference to the StackSwitchInfo struct, which stores information about stack switching events."
        },
        {
          "name": "set_stack_switch_info",
          "parameters": [
            "Address fp",
            "Address sp"
          ],
          "return_type": "void",
          "logic": "Sets the StackSwitchInfo struct with the provided frame pointer (fp) and stack pointer (sp)."
        },
        {
          "name": "clear_stack_switch_info",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the StackSwitchInfo struct by setting the source_fp to kNullAddress."
        }
      ]
    },
    {
      "name": "StackMemory::StackSegment",
      "properties": [
        "limit_",
        "size_",
        "next_segment_",
        "prev_segment_",
        "old_fp"
      ],
      "methods": [
        {
          "name": "base",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the base address of the stack segment."
        }
      ]
    },
    {
      "name": "StackPool",
      "properties": [
        "freelist_",
        "size_"
      ],
      "methods": [
        {
          "name": "GetOrAllocate",
          "parameters": [],
          "return_type": "std::unique_ptr<StackMemory>",
          "logic": "Gets a StackMemory object from the free list if available; otherwise, allocates a new one."
        },
        {
          "name": "Add",
          "parameters": [
            "std::unique_ptr<StackMemory> stack"
          ],
          "return_type": "void",
          "logic": "Adds a StackMemory object to the free list for reuse."
        },
        {
          "name": "ReleaseFinishedStacks",
          "parameters": [],
          "return_type": "void",
          "logic": "Decommits the stack memories in the freelist and clears the freelist."
        },
        {
          "name": "Size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the current size of the stack pool."
        }
      ]
    }
  ],
  "functions": []
}