{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/turboshaft-graph-interface.cc",
  "imports": [
    "src/wasm/turboshaft-graph-interface.h",
    "<optional>",
    "absl/container/btree_map.h",
    "include/v8-fast-api-calls.h",
    "src/base/logging.h",
    "src/builtins/builtins.h",
    "src/builtins/data-view-ops.h",
    "src/common/globals.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/builtin-call-descriptors.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/wasm-assembler-helpers.h",
    "src/compiler/wasm-compiler-definitions.h",
    "src/objects/object-list-macros.h",
    "src/objects/torque-defined-classes.h",
    "src/trap-handler/trap-handler.h",
    "src/wasm/compilation-environment.h",
    "src/wasm/function-body-decoder-impl.h",
    "src/wasm/function-compiler.h",
    "src/wasm/inlining-tree.h",
    "src/wasm/jump-table-assembler.h",
    "src/wasm/memory-tracing.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-objects.h",
    "src/wasm/wasm-opcodes-inl.h"
  ],
  "classes": [
    {
      "name": "BranchHintingStresser",
      "properties": [
        "cursor_"
      ],
      "methods": [
        {
          "name": "GetNextHint",
          "parameters": [],
          "return_type": "BranchHint",
          "logic": "Generates a branch hint based on the bits of the random seed to achieve a balance between randomness and simplicity for branch hinting."
        }
      ]
    },
    {
      "name": "BrTableAnalysis",
      "properties": [],
      "methods": [
        {
          "name": "LowerToBranches",
          "parameters": [
            "Decoder* decoder",
            "const BranchTableImmediate& imm"
          ],
          "return_type": "bool",
          "logic": "Determines whether a br_table should be lowered to a switch or a series of compare and branch instructions, optimizing for small or sparse tables."
        },
        {
          "name": "primary_target",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the most often occurring target or the default target of the br_table analysis."
        },
        {
          "name": "default_target",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the default target for the br_table, used when the index is out of range."
        },
        {
          "name": "other_targets",
          "parameters": [],
          "return_type": "const TargetMap&",
          "logic": "Returns the other targets in the br_table analysis, excluding the primary and default targets."
        },
        {
          "name": "primary_indices",
          "parameters": [],
          "return_type": "const CaseVector&",
          "logic": "Returns all the indices that target the primary target in the br_table."
        }
      ]
    },
    {
      "name": "TurboshaftGraphBuildingInterface",
      "properties": [
        "mode_",
        "block_phis_",
        "env_",
        "owned_instance_cache_",
        "instance_cache_",
        "assumptions_",
        "inlining_positions_",
        "ssa_env_",
        "func_index_",
        "shared_",
        "wire_bytes_",
        "return_phis_",
        "is_inlined_tail_call_",
        "parent_frame_state_",
        "real_parameters_",
        "return_block_",
        "return_catch_block_",
        "inlining_decisions_",
        "branch_hints_",
        "branch_hinting_mode_",
        "feedback_slot_"
      ],
      "methods": [
        {
          "name": "StartFunction",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Initializes the function building process, sets up the SSA environment, and prepares for inlining decisions."
        },
        {
          "name": "StartFunctionBody",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Starts the function body processing."
        },
        {
          "name": "FinishFunction",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Finishes the function building process, optimizes source positions, and optionally traces inlining."
        },
        {
          "name": "OnFirstError",
          "parameters": [
            "FullDecoder*"
          ],
          "return_type": "void",
          "logic": "Handles the first error encountered during decoding."
        },
        {
          "name": "NextInstruction",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode"
          ],
          "return_type": "void",
          "logic": "Sets the current origin for the next instruction."
        },
        {
          "name": "Block",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Handles a block control structure by creating a merge block."
        },
        {
          "name": "Loop",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Handles a loop control structure by creating a loop header, analyzing loop assignments, and creating pending loop phis."
        },
        {
          "name": "If",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& cond",
            "Control* if_block"
          ],
          "return_type": "void",
          "logic": "Handles an if control structure by creating true and false blocks and branching based on the condition."
        },
        {
          "name": "Else",
          "parameters": [
            "FullDecoder* decoder",
            "Control* if_block"
          ],
          "return_type": "void",
          "logic": "Handles the else part of an if-else control structure by setting up the control flow edge."
        },
        {
          "name": "BrOrRet",
          "parameters": [
            "FullDecoder* decoder",
            "uint32_t depth",
            "uint32_t drop_values"
          ],
          "return_type": "void",
          "logic": "Handles a branch or return instruction based on the depth."
        },
        {
          "name": "BrIf",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& cond",
            "uint32_t depth"
          ],
          "return_type": "void",
          "logic": "Handles a conditional branch instruction."
        },
        {
          "name": "BrTable",
          "parameters": [
            "FullDecoder* decoder",
            "const BranchTableImmediate& imm",
            "const Value& key"
          ],
          "return_type": "void",
          "logic": "Handles a branch table instruction, potentially lowering it to branches for optimization."
        },
        {
          "name": "FallThruTo",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Handles fallthrough to a block."
        },
        {
          "name": "PopControl",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Handles popping a control structure from the control stack, setting up merge blocks and phi nodes."
        },
        {
          "name": "DoReturn",
          "parameters": [
            "FullDecoder* decoder",
            "uint32_t drop_values"
          ],
          "return_type": "void",
          "logic": "Handles a return instruction, constructing the return values and returning from the function."
        },
        {
          "name": "UnOp",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode opcode",
            "const Value& value",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a unary operation."
        },
        {
          "name": "BinOp",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode opcode",
            "const Value& lhs",
            "const Value& rhs",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a binary operation."
        },
        {
          "name": "TraceInstruction",
          "parameters": [
            "FullDecoder* decoder",
            "uint32_t markid"
          ],
          "return_type": "void",
          "logic": "Placeholder for tracing instructions (TODO)."
        },
        {
          "name": "I32Const",
          "parameters": [
            "FullDecoder* decoder",
            "Value* result",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Handles an i32 constant."
        },
        {
          "name": "I64Const",
          "parameters": [
            "FullDecoder* decoder",
            "Value* result",
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Handles an i64 constant."
        },
        {
          "name": "F32Const",
          "parameters": [
            "FullDecoder* decoder",
            "Value* result",
            "float value"
          ],
          "return_type": "void",
          "logic": "Handles an f32 constant."
        },
        {
          "name": "F64Const",
          "parameters": [
            "FullDecoder* decoder",
            "Value* result",
            "double value"
          ],
          "return_type": "void",
          "logic": "Handles an f64 constant."
        },
        {
          "name": "S128Const",
          "parameters": [
            "FullDecoder* decoder",
            "const Simd128Immediate& imm",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a s128 constant."
        },
        {
          "name": "RefNull",
          "parameters": [
            "FullDecoder* decoder",
            "ValueType type",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a ref.null instruction."
        },
        {
          "name": "RefFunc",
          "parameters": [
            "FullDecoder* decoder",
            "uint32_t function_index",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a ref.func instruction."
        },
        {
          "name": "RefAsNonNull",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& arg",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a ref.as_non_null instruction."
        },
        {
          "name": "Drop",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Handles a drop instruction."
        },
        {
          "name": "LocalGet",
          "parameters": [
            "FullDecoder* decoder",
            "Value* result",
            "const IndexImmediate& imm"
          ],
          "return_type": "void",
          "logic": "Handles a local.get instruction."
        },
        {
          "name": "LocalSet",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& value",
            "const IndexImmediate& imm"
          ],
          "return_type": "void",
          "logic": "Handles a local.set instruction."
        },
        {
          "name": "LocalTee",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& value",
            "Value* result",
            "const IndexImmediate& imm"
          ],
          "return_type": "void",
          "logic": "Handles a local.tee instruction."
        },
        {
          "name": "GlobalGet",
          "parameters": [
            "FullDecoder* decoder",
            "Value* result",
            "const GlobalIndexImmediate& imm"
          ],
          "return_type": "void",
          "logic": "Handles a global.get instruction."
        },
        {
          "name": "GlobalSet",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& value",
            "const GlobalIndexImmediate& imm"
          ],
          "return_type": "void",
          "logic": "Handles a global.set instruction."
        },
        {
          "name": "Trap",
          "parameters": [
            "FullDecoder* decoder",
            "TrapReason reason"
          ],
          "return_type": "void",
          "logic": "Handles a trap instruction."
        },
        {
          "name": "AssertNullTypecheck",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& obj",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles an assert_null_typecheck instruction."
        },
        {
          "name": "AssertNotNullTypecheck",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& obj",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles an assert_not_null_typecheck instruction."
        },
        {
          "name": "NopForTestingUnsupportedInLiftoff",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "A nop operation for testing bailouts in Liftoff."
        },
        {
          "name": "Select",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& cond",
            "const Value& fval",
            "const Value& tval",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a select instruction."
        },
        {
          "name": "BuildChangeEndiannessStore",
          "parameters": [
            "OpIndex node",
            "MachineRepresentation mem_rep",
            "wasm::ValueType wasmtype"
          ],
          "return_type": "OpIndex",
          "logic": "Builds code to change the endianness of a value before storing it to memory."
        },
        {
          "name": "BuildChangeEndiannessLoad",
          "parameters": [
            "OpIndex node",
            "MachineType memtype",
            "wasm::ValueType wasmtype"
          ],
          "return_type": "OpIndex",
          "logic": "Builds code to change the endianness of a value after loading it from memory."
        },
        {
          "name": "LoadMem",
          "parameters": [
            "FullDecoder* decoder",
            "LoadType type",
            "const MemoryAccessImmediate& imm",
            "const Value& index",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a load memory instruction."
        },
        {
          "name": "LoadTransform",
          "parameters": [
            "FullDecoder* decoder",
            "LoadType type",
            "LoadTransformationKind transform",
            "const MemoryAccessImmediate& imm",
            "const Value& index",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a SIMD load transform instruction."
        },
        {
          "name": "LoadLane",
          "parameters": [
            "FullDecoder* decoder",
            "LoadType type",
            "const Value& value",
            "const Value& index",
            "const MemoryAccessImmediate& imm",
            "const uint8_t laneidx",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a SIMD load lane instruction."
        },
        {
          "name": "StoreMem",
          "parameters": [
            "FullDecoder* decoder",
            "StoreType type",
            "const MemoryAccessImmediate& imm",
            "const Value& index",
            "const Value& value"
          ],
          "return_type": "void",
          "logic": "Handles a store memory instruction."
        },
        {
          "name": "StoreLane",
          "parameters": [
            "FullDecoder* decoder",
            "StoreType type",
            "const MemoryAccessImmediate& imm",
            "const Value& index",
            "const Value& value",
            "const uint8_t laneidx"
          ],
          "return_type": "void",
          "logic": "Handles a SIMD store lane instruction."
        },
        {
          "name": "CurrentMemoryPages",
          "parameters": [
            "FullDecoder* decoder",
            "const MemoryIndexImmediate& imm",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a current_memory instruction."
        },
        {
          "name": "MemoryGrow",
          "parameters": [
            "FullDecoder* decoder",
            "const MemoryIndexImmediate& imm",
            "const Value& value",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles a memory.grow instruction."
        },
        {
          "name": "IsExternRefString",
          "parameters": [
            "const Value value"
          ],
          "return_type": "V<Word32>",
          "logic": "Checks if the given value is an externref string."
        },
        {
          "name": "ExternRefToString",
          "parameters": [
            "const Value value",
            "bool null_succeeds"
          ],
          "return_type": "V<String>",
          "logic": "Casts the value to a string."
        },
        {
          "name": "IsExplicitStringCast",
          "parameters": [
            "const Value value"
          ],
          "return_type": "bool",
          "logic": "Checks whether value is from an explicit string cast"
        },
        {
          "name": "GetStringIndexOf",
          "parameters": [
            "FullDecoder* decoder",
            "V<String> string",
            "V<String> search",
            "V<Word32> start"
          ],
          "return_type": "V<Word32>",
          "logic": "Gets the index of a substring in a string"
        },
        {
          "name": "CallStringToLowercase",
          "parameters": [
            "FullDecoder* decoder",
            "V<String> string"
          ],
          "return_type": "V<String>",
          "logic": "Calls the string to lowercase runtime function (ICU)."
        },
        {
          "name": "SetDataViewOpForErrorMessage",
          "parameters": [
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Sets the DataView operation type for use in error messages."
        },
        {
          "name": "ThrowDataViewTypeError",
          "parameters": [
            "FullDecoder* decoder",
            "V<Object> dataview",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Throws a DataView type error."
        },
        {
          "name": "ThrowDataViewOutOfBoundsError",
          "parameters": [
            "FullDecoder* decoder",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Throws a DataView out-of-bounds error."
        },
        {
          "name": "ThrowDataViewDetachedError",
          "parameters": [
            "FullDecoder* decoder",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Throws a DataView detached error."
        },
        {
          "name": "DataViewRangeCheck",
          "parameters": [
            "FullDecoder* decoder",
            "V<WordPtr> left",
            "V<WordPtr> right",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Performs a range check on a DataView."
        },
        {
          "name": "DataViewBoundsCheck",
          "parameters": [
            "FullDecoder* decoder",
            "V<WordPtr> left",
            "V<WordPtr> right",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Performs a bounds check on a DataView."
        },
        {
          "name": "DataViewDetachedBufferCheck",
          "parameters": [
            "FullDecoder* decoder",
            "V<Object> dataview",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Checks if the ArrayBuffer of a DataView is detached."
        },
        {
          "name": "GetDataViewByteLength",
          "parameters": [
            "FullDecoder* decoder",
            "V<Object> dataview",
            "DataViewOp op_type"
          ],
          "return_type": "V<WordPtr>",
          "logic": "Gets the byte length of a DataView."
        },
        {
          "name": "ChangeTaggedNumberToIntPtr",
          "parameters": [
            "V<Object> tagged"
          ],
          "return_type": "V<WordPtr>",
          "logic": "Converts a tagged number (Smi or HeapNumber) to an intptr."
        },
        {
          "name": "GetDataViewByteLength",
          "parameters": [
            "FullDecoder* decoder",
            "V<Object> dataview",
            "V<WordPtr> offset",
            "DataViewOp op_type"
          ],
          "return_type": "V<WordPtr>",
          "logic": "Gets the byte length of a DataView accounting for various ArrayBuffer types."
        },
        {
          "name": "GetDataViewDataPtr",
          "parameters": [
            "FullDecoder* decoder",
            "V<Object> dataview",
            "V<WordPtr> offset",
            "DataViewOp op_type"
          ],
          "return_type": "V<WordPtr>",
          "logic": "Gets the data pointer of a DataView."
        },
        {
          "name": "DataViewGetter",
          "parameters": [
            "FullDecoder* decoder",
            "const Value args[]",
            "DataViewOp op_type"
          ],
          "return_type": "OpIndex",
          "logic": "Implements a DataView getter operation."
        },
        {
          "name": "DataViewSetter",
          "parameters": [
            "FullDecoder* decoder",
            "const Value args[]",
            "DataViewOp op_type"
          ],
          "return_type": "void",
          "logic": "Implements a DataView setter operation."
        },
        {
          "name": "AnnotateAsString",
          "parameters": [
            "V<T> value",
            "wasm::ValueType type"
          ],
          "return_type": "V<T>",
          "logic": "Adds a wasm type annotation, replaces external types with string types if necessary."
        },
        {
          "name": "WellKnown_FastApi",
          "parameters": [
            "FullDecoder* decoder",
            "const CallFunctionImmediate& imm",
            "const Value args[]",
            "Value returns[]"
          ],
          "return_type": "void",
          "logic": "Handles a call to a well-known Fast API function."
        },
        {
          "name": "HandleWellKnownImport",
          "parameters": [
            "FullDecoder* decoder",
            "const CallFunctionImmediate& imm",
            "const Value args[]",
            "Value returns[]"
          ],
          "return_type": "bool",
          "logic": "Handles specific well-known imports, often related to strings or JS builtins."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetExternalArrayType",
      "parameters": [
        "DataViewOp op_type"
      ],
      "return_type": "ExternalArrayType",
      "logic": "Returns the external array type corresponding to the given DataView operation type."
    },
    {
      "name": "GetTypeSize",
      "parameters": [
        "DataViewOp op_type"
      ],
      "return_type": "size_t",
      "logic": "Returns the size in bytes of the data type for the given DataView operation."
    },
    {
      "name": "ReverseBytesSupported",
      "parameters": [
        "size_t size_in_bytes"
      ],
      "return_type": "bool",
      "logic": "Checks if reversing bytes is supported for a given size in bytes."
    },
    {
      "name": "WasmGraphBuilderBase::CallRuntime",
      "parameters": [
        "Zone* zone",
        "Runtime::FunctionId f",
        "std::initializer_list<const OpIndex> args",
        "V<Context> context"
      ],
      "return_type": "OpIndex",
      "logic": "Builds a call to a runtime function."
    },
    {
      "name": "WasmGraphBuilderBase::GetBuiltinPointerTarget",
      "parameters": [
        "Builtin builtin"
      ],
      "return_type": "OpIndex",
      "logic": "Gets the target pointer for a builtin call."
    },
    {
      "name": "WasmGraphBuilderBase::GetTargetForBuiltinCall",
      "parameters": [
        "Builtin builtin",
        "StubCallMode stub_mode"
      ],
      "return_type": "V<WordPtr>",
      "logic": "Gets the target for a builtin call based on the stub call mode."
    },
    {
      "name": "WasmGraphBuilderBase::BuildChangeInt64ToBigInt",
      "parameters": [
        "V<Word64> input",
        "StubCallMode stub_mode"
      ],
      "return_type": "V<BigInt>",
      "logic": "Builds a call to change an Int64 to a BigInt using a builtin."
    },
    {
      "name": "WasmGraphBuilderBase::BuildImportedFunctionTargetAndImplicitArg",
      "parameters": [
        "ConstOrV<Word32> func_index",
        "V<WasmTrustedInstanceData> trusted_instance_data"
      ],
      "return_type": "std::pair<V<Word32>, V<HeapObject>>",
      "logic": "Builds the target for an imported function call and its implicit argument."
    },
    {
      "name": "WasmGraphBuilderBase::BuildFunctionTargetAndImplicitArg",
      "parameters": [
        "V<WasmInternalFunction> internal_function"
      ],
      "return_type": "std::pair<V<Word32>, V<ExposedTrustedObject>>",
      "logic": "Builds the target for an internal function call and its implicit argument."
    },
    {
      "name": "WasmGraphBuilderBase::RepresentationFor",
      "parameters": [
        "ValueTypeBase type"
      ],
      "return_type": "RegisterRepresentation",
      "logic": "Determines the register representation for a given value type."
    },
    {
      "name": "WasmGraphBuilderBase::LoadTrustedDataFromInstanceObject",
      "parameters": [
        "V<HeapObject> instance_object"
      ],
      "return_type": "V<WasmTrustedInstanceData>",
      "logic": "Loads the trusted data from a WasmInstanceObject."
    },
    {
      "name": "WasmGraphBuilderBase::BuildModifyThreadInWasmFlagHelper",
      "parameters": [
        "Zone* zone",
        "OpIndex thread_in_wasm_flag_address",
        "bool new_value"
      ],
      "return_type": "void",
      "logic": "Modifies a thread in Wasm flag."
    },
    {
      "name": "WasmGraphBuilderBase::BuildModifyThreadInWasmFlag",
      "parameters": [
        "Zone* zone",
        "bool new_value"
      ],
      "return_type": "void",
      "logic": "Modifies a thread in Wasm flag."
    },
    {
      "name": "WasmGraphBuilderBase::CallC",
      "parameters": [
        "const MachineSignature* sig",
        "ExternalReference ref",
        "std::initializer_list<OpIndex> args"
      ],
      "return_type": "OpIndex",
      "logic": "Builds a call to a C function using an ExternalReference."
    },
    {
      "name": "WasmGraphBuilderBase::CallC",
      "parameters": [
        "const MachineSignature* sig",
        "OpIndex function",
        "std::initializer_list<OpIndex> args"
      ],
      "return_type": "OpIndex",
      "logic": "Builds a call to a C function."
    }
  ]
}