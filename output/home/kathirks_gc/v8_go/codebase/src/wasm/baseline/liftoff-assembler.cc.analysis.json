{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/liftoff-assembler.cc",
  "imports": [
    "src/wasm/baseline/liftoff-assembler.h",
    "<optional>",
    "<sstream>",
    "src/base/platform/memory.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/macro-assembler-inl.h",
    "src/compiler/linkage.h",
    "src/compiler/wasm-compiler.h",
    "src/utils/ostreams.h",
    "src/wasm/baseline/liftoff-assembler-inl.h",
    "src/wasm/baseline/liftoff-register.h",
    "src/wasm/baseline/parallel-move-inl.h",
    "src/wasm/object-access.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-opcodes.h"
  ],
  "classes": [
    {
      "name": "RegisterReuseMap",
      "properties": [
        "map_"
      ],
      "methods": [
        {
          "name": "Add",
          "parameters": [
            "LiftoffRegister src",
            "LiftoffRegister dst"
          ],
          "return_type": "void",
          "logic": "Adds a source-destination register mapping to the map. Checks for duplicates before adding."
        },
        {
          "name": "Lookup",
          "parameters": [
            "LiftoffRegister src"
          ],
          "return_type": "std::optional<LiftoffRegister>",
          "logic": "Looks up a destination register for a given source register in the map. Returns std::nullopt if not found."
        }
      ]
    },
    {
      "name": "LiftoffAssembler::CacheState",
      "properties": [
        "stack_state",
        "used_registers",
        "register_use_count",
        "cached_instance_data",
        "cached_mem_start",
        "cached_mem_index",
        "last_spilled_regs",
        "frozen"
      ],
      "methods": [
        {
          "name": "Steal",
          "parameters": [
            "CacheState& source"
          ],
          "return_type": "void",
          "logic": "Moves the content of 'source' to this object, effectively emptying 'source'."
        },
        {
          "name": "Split",
          "parameters": [
            "const CacheState& source"
          ],
          "return_type": "void",
          "logic": "Copies content of 'source' to this object."
        },
        {
          "name": "GetTaggedSlotsForOOLCode",
          "parameters": [
            "ZoneVector<int>* slots",
            "LiftoffRegList* spills",
            "SpillLocation spill_location"
          ],
          "return_type": "void",
          "logic": "Identifies and stores the indices of tagged (reference) stack slots for out-of-line (OOL) code, also which registers were spilled."
        },
        {
          "name": "DefineSafepoint",
          "parameters": [
            "SafepointTableBuilder::Safepoint& safepoint"
          ],
          "return_type": "void",
          "logic": "Defines tagged stack slots at safepoint for garbage collection."
        },
        {
          "name": "DefineSafepointWithCalleeSavedRegisters",
          "parameters": [
            "SafepointTableBuilder::Safepoint& safepoint"
          ],
          "return_type": "void",
          "logic": "Defines tagged stack slots and callee-saved registers at a safepoint for garbage collection."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "InitMergeRegion",
      "parameters": [
        "LiftoffAssembler::CacheState* target_state",
        "const VarState* source",
        "VarState* target",
        "uint32_t count",
        "MergeKeepStackSlots keep_stack_slots",
        "MergeAllowConstants allow_constants",
        "MergeAllowRegisters allow_registers",
        "ReuseRegisters reuse_registers",
        "LiftoffRegList used_regs",
        "int new_stack_offset",
        "ParallelMove& parallel_move"
      ],
      "return_type": "void",
      "logic": "Initializes a region of the target stack state by copying values from the source stack state.  Handles register allocation, stack slot assignment, and constant propagation while avoiding register collisions."
    },
    {
      "name": "LiftoffAssembler::MergeIntoNewState",
      "parameters": [
        "uint32_t num_locals",
        "uint32_t arity",
        "uint32_t stack_depth"
      ],
      "return_type": "LiftoffAssembler::CacheState",
      "logic": "Creates a new cache state by merging the current cache state's stack, locals, and merge region. It handles spilling values and avoid duplicate registers usage."
    },
    {
      "name": "GetSafepointIndexForStackSlot",
      "parameters": [
        "const VarState& slot"
      ],
      "return_type": "int",
      "logic": "Calculates the safepoint index for a given stack slot based on its offset."
    },
    {
      "name": "LiftoffAssembler::GetTotalFrameSlotCountForGC",
      "parameters": [],
      "return_type": "int",
      "logic": "Calculates the total number of frame slots for garbage collection, based on the maximum used spill offset."
    },
    {
      "name": "LiftoffAssembler::OolSpillCount",
      "parameters": [],
      "return_type": "int",
      "logic": "Returns the number of Out-of-Line spill slots."
    },
    {
      "name": "DefaultLiftoffOptions",
      "parameters": [],
      "return_type": "AssemblerOptions",
      "logic": "Creates and returns the default assembler options for Liftoff, marking it as a Wasm assembler."
    },
    {
      "name": "LiftoffAssembler::LoadToRegister_Slow",
      "parameters": [
        "VarState slot",
        "LiftoffRegList pinned"
      ],
      "return_type": "LiftoffRegister",
      "logic": "Loads a value from a stack slot into a free register. If no register is available, it will spill existing registers."
    },
    {
      "name": "LiftoffAssembler::LoadI64HalfIntoRegister",
      "parameters": [
        "VarState slot",
        "RegPairHalf half",
        "LiftoffRegList pinned"
      ],
      "return_type": "LiftoffRegister",
      "logic": "Loads either the high or low word of an i64 value from a stack slot or constant into a register."
    },
    {
      "name": "LiftoffAssembler::DropExceptionValueAtOffset",
      "parameters": [
        "int offset"
      ],
      "return_type": "void",
      "logic": "Drops an exception value at a specific offset in the stack and updates the stack state."
    },
    {
      "name": "LiftoffAssembler::SpillLoopArgs",
      "parameters": [
        "int num"
      ],
      "return_type": "void",
      "logic": "Spills the last 'num' arguments from the stack into memory."
    },
    {
      "name": "LiftoffAssembler::PrepareForBranch",
      "parameters": [
        "uint32_t arity",
        "LiftoffRegList pinned"
      ],
      "return_type": "void",
      "logic": "Prepares the stack and registers for a branch instruction by spilling registers and materializing constants, ensuring a clean state for merging at the target of the branch."
    },
    {
      "name": "SlotInterference",
      "parameters": [
        "const VarState& a",
        "const VarState& b"
      ],
      "return_type": "bool",
      "logic": "Detect stack slot interference between two stack slots."
    },
    {
      "name": "SlotInterference",
      "parameters": [
        "const VarState& a",
        "base::Vector<const VarState> v"
      ],
      "return_type": "bool",
      "logic": "Check for stack slot interference against a list of VarStates."
    },
    {
      "name": "LiftoffAssembler::MergeFullStackWith",
      "parameters": [
        "CacheState& target"
      ],
      "return_type": "void",
      "logic": "Merges the entire stack from the current cache state into a target cache state."
    },
    {
      "name": "LiftoffAssembler::MergeStackWith",
      "parameters": [
        "CacheState& target",
        "uint32_t arity",
        "JumpDirection jump_direction"
      ],
      "return_type": "void",
      "logic": "Merges a portion of the stack (arity elements) from the current cache state into a target cache state."
    },
    {
      "name": "LiftoffAssembler::Spill",
      "parameters": [
        "VarState* slot"
      ],
      "return_type": "void",
      "logic": "Spills the value in a given VarState to the stack."
    },
    {
      "name": "LiftoffAssembler::SpillLocals",
      "parameters": [],
      "return_type": "void",
      "logic": "Spills all local variables to the stack."
    },
    {
      "name": "LiftoffAssembler::SpillAllRegisters",
      "parameters": [],
      "return_type": "void",
      "logic": "Spills all registers currently in use to the stack, clearing the cache."
    },
    {
      "name": "LiftoffAssembler::ClearRegister",
      "parameters": [
        "Register reg",
        "std::initializer_list<Register*> possible_uses",
        "LiftoffRegList pinned"
      ],
      "return_type": "void",
      "logic": "Clears a given register, spilling it if necessary, and replacing its uses in the possible_uses list if required."
    },
    {
      "name": "PrepareStackTransfers",
      "parameters": [
        "const ValueKindSig* sig",
        "compiler::CallDescriptor* call_descriptor",
        "const VarState* slots",
        "LiftoffStackSlots* stack_slots",
        "ParallelMove* parallel_move",
        "LiftoffRegList* param_regs"
      ],
      "return_type": "void",
      "logic": "Helper function to transfer parameters into stack or registers as part of a call, based on call descriptor."
    },
    {
      "name": "LiftoffAssembler::PrepareBuiltinCall",
      "parameters": [
        "const ValueKindSig* sig",
        "compiler::CallDescriptor* call_descriptor",
        "std::initializer_list<VarState> params"
      ],
      "return_type": "void",
      "logic": "Prepares the stack and registers for a call to a builtin function. Spills registers and moves arguments to correct registers or stack slots."
    },
    {
      "name": "LiftoffAssembler::PrepareCall",
      "parameters": [
        "const ValueKindSig* sig",
        "compiler::CallDescriptor* call_descriptor",
        "Register* target",
        "Register target_instance_data"
      ],
      "return_type": "void",
      "logic": "Prepares the stack and registers for a standard function call, spill values, prepares the target and function parameters."
    },
    {
      "name": "AllReturnRegs",
      "parameters": [],
      "return_type": "LiftoffRegList",
      "logic": "Function to create the list of all GpReturnRegisters and FpReturnRegisters"
    },
    {
      "name": "LiftoffAssembler::FinishCall",
      "parameters": [
        "const ValueKindSig* sig",
        "compiler::CallDescriptor* call_descriptor"
      ],
      "return_type": "void",
      "logic": "Finishes a function call, moving the return value(s) from the registers to the stack."
    },
    {
      "name": "LiftoffAssembler::Move",
      "parameters": [
        "LiftoffRegister dst",
        "LiftoffRegister src",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Moves data between two Liftoff registers, handling 64-bit register pairs properly."
    },
    {
      "name": "LiftoffAssembler::ParallelRegisterMove",
      "parameters": [
        "base::Vector<const ParallelRegisterMoveTuple> tuples"
      ],
      "return_type": "void",
      "logic": "Performs a parallel move between multiple registers using ParallelMove."
    },
    {
      "name": "LiftoffAssembler::MoveToReturnLocations",
      "parameters": [
        "const FunctionSig* sig",
        "compiler::CallDescriptor* descriptor"
      ],
      "return_type": "void",
      "logic": "Moves the return value to designated return locations, potentially involving multiple return values."
    },
    {
      "name": "LiftoffAssembler::MoveToReturnLocationsMultiReturn",
      "parameters": [
        "const FunctionSig* sig",
        "compiler::CallDescriptor* descriptor"
      ],
      "return_type": "void",
      "logic": "Handles the movement of multiple return values to their specified locations, spilling to stack as needed."
    },
    {
      "name": "CompatibleStackSlotTypes",
      "parameters": [
        "ValueKind a",
        "ValueKind b"
      ],
      "return_type": "bool",
      "logic": "Check stack slot types for compatiblity, to see if an overwrite can occur."
    },
    {
      "name": "LiftoffAssembler::SpillOneRegister",
      "parameters": [
        "LiftoffRegList candidates"
      ],
      "return_type": "LiftoffRegister",
      "logic": "Spills one register amongst candidate registers."
    },
    {
      "name": "LiftoffAssembler::SpillAdjacentFpRegisters",
      "parameters": [
        "LiftoffRegList pinned"
      ],
      "return_type": "LiftoffRegister",
      "logic": "Spill one of two adjecent registers when necessary, if there's not enough space for FP pairs."
    },
    {
      "name": "LiftoffAssembler::SpillRegister",
      "parameters": [
        "LiftoffRegister reg"
      ],
      "return_type": "void",
      "logic": "Spills a given register to the stack if necessary, making it available."
    },
    {
      "name": "LiftoffAssembler::set_num_locals",
      "parameters": [
        "uint32_t num_locals"
      ],
      "return_type": "void",
      "logic": "Sets the number of local variables for the assembler, used for pre-allocation of space."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "LiftoffVarState slot"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for LiftoffVarState, providing a string representation."
    }
  ]
}