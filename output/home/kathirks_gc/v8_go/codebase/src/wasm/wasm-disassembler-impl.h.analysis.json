{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-disassembler-impl.h",
  "imports": [
    "src/wasm/function-body-decoder-impl.h",
    "src/wasm/names-provider.h",
    "src/wasm/wasm-opcodes.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "Indentation",
      "properties": [
        "current_",
        "delta_"
      ],
      "methods": [
        {
          "name": "Indentation",
          "parameters": [
            "int current",
            "int delta"
          ],
          "return_type": "Indentation",
          "logic": "Constructor for the Indentation class. Initializes the current indentation level and the indentation delta."
        },
        {
          "name": "Extra",
          "parameters": [
            "int extra"
          ],
          "return_type": "Indentation",
          "logic": "Creates a new Indentation object with an extra indentation level added to the current level."
        },
        {
          "name": "increase",
          "parameters": [],
          "return_type": "void",
          "logic": "Increases the current indentation level by the delta."
        },
        {
          "name": "decrease",
          "parameters": [],
          "return_type": "void",
          "logic": "Decreases the current indentation level by the delta."
        },
        {
          "name": "current",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current indentation level."
        }
      ]
    },
    {
      "name": "OffsetsProvider",
      "properties": [
        "num_imported_tables_",
        "num_imported_globals_",
        "num_imported_tags_",
        "type_offsets_",
        "import_offsets_",
        "table_offsets_",
        "tag_offsets_",
        "global_offsets_",
        "element_offsets_",
        "data_offsets_",
        "string_offsets_",
        "memory_offset_",
        "start_offset_",
        "recgroups_"
      ],
      "methods": [
        {
          "name": "CollectOffsets",
          "parameters": [
            "const WasmModule* module",
            "base::Vector<const uint8_t> wire_bytes"
          ],
          "return_type": "void",
          "logic": "Collects offsets of various sections in the WASM module from the wire bytes."
        },
        {
          "name": "TypeOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a type definition."
        },
        {
          "name": "ImportOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of an import."
        },
        {
          "name": "TableOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a table."
        },
        {
          "name": "MemoryOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a memory."
        },
        {
          "name": "TagOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a tag."
        },
        {
          "name": "GlobalOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a global variable."
        },
        {
          "name": "StartOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of the start function."
        },
        {
          "name": "ElementOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of an element segment."
        },
        {
          "name": "DataOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a data segment."
        },
        {
          "name": "StringOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Records the offset of a string."
        },
        {
          "name": "RecGroupOffset",
          "parameters": [
            "uint32_t offset",
            "uint32_t group_size"
          ],
          "return_type": "void",
          "logic": "Records the offset of a RecGroup."
        },
        {
          "name": "ImportsDone",
          "parameters": [
            "const WasmModule* module"
          ],
          "return_type": "void",
          "logic": "Stores the number of imported tables, globals and tags from the WasmModule."
        },
        {
          "name": "Bytes",
          "parameters": [
            "const uint8_t* start",
            "uint32_t count"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "const char* desc"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "const char* desc",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "uint32_t number"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "uint64_t number"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "ValueType type"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "HeapType type"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "Description",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "NextLine",
          "parameters": [],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "NextLineIfFull",
          "parameters": [],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "NextLineIfNonEmpty",
          "parameters": [],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "InitializerExpression",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end",
            "ValueType expected_type"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "FunctionBody",
          "parameters": [
            "const WasmFunction* func",
            "const uint8_t* start"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "FunctionName",
          "parameters": [
            "uint32_t func_index"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "NameSection",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end",
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Unused by this tracer."
        },
        {
          "name": "type_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the type at the given index."
        },
        {
          "name": "import_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the import at the given index."
        },
        {
          "name": "element_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the element at the given index."
        },
        {
          "name": "data_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the data at the given index."
        },
        {
          "name": "string_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the string at the given index."
        },
        {
          "name": "table_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the table at the given index, adjusted for imported tables."
        },
        {
          "name": "tag_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the tag at the given index, adjusted for imported tags."
        },
        {
          "name": "global_offset",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the global at the given index, adjusted for imported globals."
        },
        {
          "name": "memory_offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the memory."
        },
        {
          "name": "start_offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the start function."
        },
        {
          "name": "recgroup",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "RecGroup",
          "logic": "Returns the RecGroup at the given index."
        }
      ]
    },
    {
      "name": "FunctionBodyDisassembler",
      "properties": [
        "func_index_",
        "current_opcode_",
        "wire_bytes_",
        "names_",
        "used_types_",
        "label_stack_",
        "out_",
        "label_occurrence_index_",
        "label_generation_index_"
      ],
      "methods": [
        {
          "name": "FunctionBodyDisassembler",
          "parameters": [
            "Zone* zone",
            "const WasmModule* module",
            "uint32_t func_index",
            "bool shared",
            "WasmDetectedFeatures* detected",
            "const FunctionSig* sig",
            "const uint8_t* start",
            "const uint8_t* end",
            "uint32_t offset",
            "const ModuleWireBytes wire_bytes",
            "NamesProvider* names"
          ],
          "return_type": "FunctionBodyDisassembler",
          "logic": "Constructor for the FunctionBodyDisassembler class. Initializes the decoder with the function's information."
        },
        {
          "name": "DecodeAsWat",
          "parameters": [
            "MultiLineStringBuilder& out",
            "Indentation indentation",
            "FunctionHeader include_header",
            "uint32_t* first_instruction_offset"
          ],
          "return_type": "void",
          "logic": "Decodes the function body and prints it in WebAssembly Text (WAT) format."
        },
        {
          "name": "DecodeGlobalInitializer",
          "parameters": [
            "StringBuilder& out"
          ],
          "return_type": "void",
          "logic": "Decodes a global initializer expression and prints it."
        },
        {
          "name": "used_types",
          "parameters": [],
          "return_type": "std::set<uint32_t>&",
          "logic": "Returns the set of used type indices."
        },
        {
          "name": "GetOpcode",
          "parameters": [],
          "return_type": "WasmOpcode",
          "logic": "Retrieves the current opcode from the byte stream."
        },
        {
          "name": "PrintImmediatesAndGetLength",
          "parameters": [
            "StringBuilder& out"
          ],
          "return_type": "uint32_t",
          "logic": "Prints the immediates associated with the current opcode and returns the length of the immediates."
        },
        {
          "name": "PrintHexNumber",
          "parameters": [
            "StringBuilder& out",
            "uint64_t number"
          ],
          "return_type": "void",
          "logic": "Prints a number in hexadecimal format."
        },
        {
          "name": "label_info",
          "parameters": [
            "int depth"
          ],
          "return_type": "LabelInfo&",
          "logic": "Returns the LabelInfo at the given depth in the label stack."
        }
      ]
    },
    {
      "name": "ModuleDisassembler",
      "properties": [
        "out_",
        "module_",
        "names_",
        "wire_bytes_",
        "start_",
        "zone_",
        "offsets_",
        "function_body_offsets_"
      ],
      "methods": [
        {
          "name": "ModuleDisassembler",
          "parameters": [
            "MultiLineStringBuilder& out",
            "const WasmModule* module",
            "NamesProvider* names",
            "const ModuleWireBytes wire_bytes",
            "AccountingAllocator* allocator",
            "std::unique_ptr<OffsetsProvider> offsets_provider",
            "std::vector<int>* function_body_offsets"
          ],
          "return_type": "ModuleDisassembler",
          "logic": "Constructor for the ModuleDisassembler class. Initializes the disassembler with the module's information and various helpers."
        },
        {
          "name": "~ModuleDisassembler",
          "parameters": [],
          "return_type": "ModuleDisassembler",
          "logic": "Destructor for the ModuleDisassembler class."
        },
        {
          "name": "PrintTypeDefinition",
          "parameters": [
            "uint32_t type_index",
            "Indentation indendation",
            "IndexAsComment index_as_comment"
          ],
          "return_type": "void",
          "logic": "Prints the definition of the type at the given index."
        },
        {
          "name": "PrintModule",
          "parameters": [
            "Indentation indentation",
            "size_t max_mb"
          ],
          "return_type": "void",
          "logic": "Prints the entire WebAssembly module in WAT format."
        },
        {
          "name": "PrintImportName",
          "parameters": [
            "const WasmImport& import"
          ],
          "return_type": "void",
          "logic": "Prints the name of an imported function, global, memory, or table."
        },
        {
          "name": "PrintExportName",
          "parameters": [
            "ImportExportKindCode kind",
            "uint32_t index"
          ],
          "return_type": "void",
          "logic": "Prints the name of an exported function, global, memory, or table."
        },
        {
          "name": "PrintMutableType",
          "parameters": [
            "bool mutability",
            "ValueType type"
          ],
          "return_type": "void",
          "logic": "Prints the type of a mutable global variable."
        },
        {
          "name": "PrintTable",
          "parameters": [
            "const WasmTable& table"
          ],
          "return_type": "void",
          "logic": "Prints information about a table."
        },
        {
          "name": "PrintMemory",
          "parameters": [
            "const WasmMemory& memory"
          ],
          "return_type": "void",
          "logic": "Prints information about a memory."
        },
        {
          "name": "PrintGlobal",
          "parameters": [
            "const WasmGlobal& global"
          ],
          "return_type": "void",
          "logic": "Prints information about a global variable."
        },
        {
          "name": "PrintInitExpression",
          "parameters": [
            "const ConstantExpression& init",
            "ValueType expected_type"
          ],
          "return_type": "void",
          "logic": "Prints the initial value expression of a global variable."
        },
        {
          "name": "PrintTagSignature",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Prints the function signature of a tag."
        },
        {
          "name": "PrintString",
          "parameters": [
            "WireBytesRef ref"
          ],
          "return_type": "void",
          "logic": "Prints a string from the wire bytes."
        },
        {
          "name": "PrintStringAsJSON",
          "parameters": [
            "WireBytesRef ref"
          ],
          "return_type": "void",
          "logic": "Prints a string from the wire bytes as JSON."
        },
        {
          "name": "LineBreakOrSpace",
          "parameters": [
            "bool break_lines",
            "Indentation indentation",
            "uint32_t byte_offset"
          ],
          "return_type": "void",
          "logic": "Inserts a line break or a space depending on the break_lines flag."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "Indentation indentation"
      ],
      "return_type": "StringBuilder&",
      "logic": "Overloads the << operator to write an indentation to a StringBuilder."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "uint64_t n"
      ],
      "return_type": "StringBuilder&",
      "logic": "Overloads the << operator to write a uint64_t to a StringBuilder."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "ModuleTypeIndex index"
      ],
      "return_type": "StringBuilder&",
      "logic": "Overloads the << operator to write a ModuleTypeIndex to a StringBuilder."
    },
    {
      "name": "PrintSignatureOneLine",
      "parameters": [
        "StringBuilder& out",
        "const FunctionSig* sig",
        "uint32_t func_index",
        "NamesProvider* names",
        "bool param_names",
        "IndexAsComment indices_as_comments"
      ],
      "return_type": "void",
      "logic": "Prints a function signature on a single line."
    },
    {
      "name": "PrintStringAsJSON",
      "parameters": [
        "StringBuilder& out",
        "const uint8_t* start",
        "WireBytesRef ref"
      ],
      "return_type": "void",
      "logic": "Prints a string from the wire bytes as JSON to the StringBuilder."
    },
    {
      "name": "AllocateOffsetsProvider",
      "parameters": [],
      "return_type": "std::unique_ptr<OffsetsProvider>",
      "logic": "Allocates a unique pointer to an OffsetsProvider object."
    }
  ]
}