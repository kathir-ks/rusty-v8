{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-code-manager.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-code-manager.h\",\n  \"imports\": [\n    \"<atomic>\",\n    \"<map>\",\n    \"<memory>\",\n    \"<set>\",\n    \"<utility>\",\n    \"<vector>\",\n    \"absl/container/flat_hash_map.h\",\n    \"src/base/address-region.h\",\n    \"src/base/bit-field.h\",\n    \"src/base/macros.h\",\n    \"src/base/vector.h\",\n    \"src/builtins/builtins.h\",\n    \"src/codegen/safepoint-table.h\",\n    \"src/codegen/source-position.h\",\n    \"src/handles/handles.h\",\n    \"src/tasks/operations-barrier.h\",\n    \"src/trap-handler/trap-handler.h\",\n    \"src/wasm/compilation-environment.h\",\n    \"src/wasm/wasm-code-pointer-table.h\",\n    \"src/wasm/wasm-features.h\",\n    \"src/wasm/wasm-limits.h\",\n    \"src/wasm/wasm-module-sourcemap.h\",\n    \"src/wasm/wasm-tier.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"DisjointAllocationPool\",\n      \"properties\": [\n        \"regions_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DisjointAllocationPool\",\n          \"parameters\": [\n            \"base::AddressRegion region\"\n          ],\n          \"return_type\": \"explicit DisjointAllocationPool\",\n          \"logic\": \"Constructor; initializes the pool with a single region.\"\n        },\n        {\n          \"name\": \"Merge\",\n          \"parameters\": [\n            \"base::AddressRegion\"\n          ],\n          \"return_type\": \"base::AddressRegion\",\n          \"logic\": \"Merges the given region into the pool, assuming it doesn't intersect.\"\n        },\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"base::AddressRegion\",\n          \"logic\": \"Allocates a contiguous region of the specified size from the pool.\"\n        },\n        {\n          \"name\": \"AllocateInRegion\",\n          \"parameters\": [\n            \"size_t size\",\n            \"base::AddressRegion\"\n          ],\n          \"return_type\": \"base::AddressRegion\",\n          \"logic\": \"Allocates a contiguous region of the specified size within the given region from the pool.\"\n        },\n        {\n          \"name\": \"IsEmpty\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the pool is empty (contains no regions).\"\n        },\n        {\n          \"name\": \"regions\",\n          \"parameters\": [],\n          \"return_type\": \"const auto&\",\n          \"logic\": \"Returns the set of regions in the pool.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmCode\",\n      \"properties\": [\n        \"native_module_\",\n        \"instructions_\",\n        \"signature_hash_\",\n        \"meta_data_\",\n        \"instructions_size_\",\n        \"reloc_info_size_\",\n        \"source_positions_size_\",\n        \"inlining_positions_size_\",\n        \"deopt_data_size_\",\n        \"protected_instructions_size_\",\n        \"index_\",\n        \"constant_pool_offset_\",\n        \"stack_slots_\",\n        \"ool_spills_\",\n        \"tagged_parameter_slots_\",\n        \"safepoint_table_offset_\",\n        \"handler_table_offset_\",\n        \"code_comments_offset_\",\n        \"unpadded_binary_size_\",\n        \"trap_handler_index_\",\n        \"flags_\",\n        \"dying_\",\n        \"ref_count_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetRecordWriteBuiltin\",\n          \"parameters\": [\n            \"SaveFPRegsMode fp_mode\"\n          ],\n          \"return_type\": \"static Builtin\",\n          \"logic\": \"Returns the appropriate Builtin for record write based on the SaveFPRegsMode.\"\n        },\n        {\n          \"name\": \"instructions\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Returns the instruction vector.\"\n        },\n        {\n          \"name\": \"instruction_start\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the starting address of the instructions.\"\n        },\n        {\n          \"name\": \"instructions_size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the size of the instructions in bytes.\"\n        },\n        {\n          \"name\": \"reloc_info\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<const uint8_t>\",\n          \"logic\": \"Returns the relocation information vector.\"\n        },\n        {\n          \"name\": \"source_positions\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<const uint8_t>\",\n          \"logic\": \"Returns the source position table vector.\"\n        },\n        {\n          \"name\": \"inlining_positions\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<const uint8_t>\",\n          \"logic\": \"Returns the inlining positions table vector.\"\n        },\n        {\n          \"name\": \"deopt_data\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<const uint8_t>\",\n          \"logic\": \"Returns the deoptimization data vector.\"\n        },\n        {\n          \"name\": \"index\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the function index within the module.\"\n        },\n        {\n          \"name\": \"IsAnonymous\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the function is anonymous (doesn't have an index).\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"Kind\",\n          \"logic\": \"Returns the kind of Wasm code (e.g., kWasmFunction).\"\n        },\n        {\n          \"name\": \"native_module\",\n          \"parameters\": [],\n          \"return_type\": \"NativeModule*\",\n          \"logic\": \"Returns the NativeModule this code belongs to.\"\n        },\n        {\n          \"name\": \"tier\",\n          \"parameters\": [],\n          \"return_type\": \"ExecutionTier\",\n          \"logic\": \"Returns the execution tier (e.g., kLiftoff, kTurbofan).\"\n        },\n        {\n          \"name\": \"constant_pool\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the address of the constant pool.\"\n        },\n        {\n          \"name\": \"handler_table\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the address of the handler table.\"\n        },\n        {\n          \"name\": \"handler_table_size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the size of the handler table.\"\n        },\n        {\n          \"name\": \"code_comments\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the address of the code comments.\"\n        },\n        {\n          \"name\": \"code_comments_size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the size of the code comments.\"\n        },\n        {\n          \"name\": \"constant_pool_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the offset to the constant pool.\"\n        },\n        {\n          \"name\": \"safepoint_table_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the offset to the safepoint table.\"\n        },\n        {\n          \"name\": \"handler_table_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the offset to the handler table.\"\n        },\n        {\n          \"name\": \"code_comments_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the offset to the code comments.\"\n        },\n        {\n          \"name\": \"unpadded_binary_size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the unpadded binary size.\"\n        },\n        {\n          \"name\": \"stack_slots\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of stack slots used by the function.\"\n        },\n        {\n          \"name\": \"ool_spills\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of out-of-line spills.\"\n        },\n        {\n          \"name\": \"signature_hash\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the signature hash.\"\n        },\n        {\n          \"name\": \"first_tagged_parameter_slot\",\n          \"parameters\": [],\n          \"return_type\": \"uint16_t\",\n          \"logic\": \"Returns the index of first tagged parameter slot on stack.\"\n        },\n        {\n          \"name\": \"num_tagged_parameter_slots\",\n          \"parameters\": [],\n          \"return_type\": \"uint16_t\",\n          \"logic\": \"Returns the number of tagged parameter slots on the stack.\"\n        },\n        {\n          \"name\": \"raw_tagged_parameter_slots_for_serialization\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the number and position of tagged parameter slots packed into a uint32 for serialization\"\n        },\n        {\n          \"name\": \"is_liftoff\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the code was generated by Liftoff.\"\n        },\n        {\n          \"name\": \"is_turbofan\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the code was generated by Turbofan.\"\n        },\n        {\n          \"name\": \"contains\",\n          \"parameters\": [\n            \"Address pc\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given address falls within the code's instruction range.\"\n        },\n        {\n          \"name\": \"is_inspectable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the code can be inspected (Liftoff code generated for debugging).\"\n        },\n        {\n          \"name\": \"protected_instructions_data\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<const uint8_t>\",\n          \"logic\": \"Returns protected instruction data vector.\"\n        },\n        {\n          \"name\": \"protected_instructions\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<const trap_handler::ProtectedInstructionData>\",\n          \"logic\": \"Returns protected instructions data vector as ProtectedInstructionData.\"\n        },\n        {\n          \"name\": \"IsProtectedInstruction\",\n          \"parameters\": [\n            \"Address pc\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks whether the given address is a protected instruction.\"\n        },\n        {\n          \"name\": \"Validate\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Validates the internal state of the WasmCode object.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"const char* name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about the WasmCode object to the console.\"\n        },\n        {\n          \"name\": \"MaybePrint\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about the WasmCode object to the console, conditionally.\"\n        },\n        {\n          \"name\": \"Disassemble\",\n          \"parameters\": [\n            \"const char* name\",\n            \"std::ostream& os\",\n            \"Address current_pc\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Disassembles the code and prints it to the given output stream.\"\n        },\n        {\n          \"name\": \"ShouldBeLogged\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"static bool\",\n          \"logic\": \"Determines if the code should be logged based on the isolate's settings.\"\n        },\n        {\n          \"name\": \"LogCode\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* source_url\",\n            \"int script_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Logs the code using the isolate's logging mechanism.\"\n        },\n        {\n          \"name\": \"IncRef\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Increments the reference count of the WasmCode object.\"\n        },\n        {\n          \"name\": \"DecRef\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Decrements the reference count of the WasmCode object. Returns true if the object is now dead and needs to be freed.\"\n        },\n        {\n          \"name\": \"DecRefOnLiveCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decrements ref count on code that is known to be in use (i.e. the ref count cannot drop to zero here).\"\n        },\n        {\n          \"name\": \"DecRefOnDeadCode\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Decrements the reference count on code that is known to be dead. Returns whether the object is now dead and needs to be freed.\"\n        },\n        {\n          \"name\": \"DecrementRefCount\",\n          \"parameters\": [\n            \"base::Vector<WasmCode* const>\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Decrements the reference count on a set of {WasmCode} objects, potentially belonging to different {NativeModule}s. Dead code will be deleted.\"\n        },\n        {\n          \"name\": \"DcheckRefCountIsOne\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if ref count is 1, used during shutdown to detect memory leaks.\"\n        },\n        {\n          \"name\": \"GetSourcePositionBefore\",\n          \"parameters\": [\n            \"int code_offset\"\n          ],\n          \"return_type\": \"SourcePosition\",\n          \"logic\": \"Returns the last source position before the given code offset.\"\n        },\n        {\n          \"name\": \"GetSourceOffsetBefore\",\n          \"parameters\": [\n            \"int code_offset\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source offset before the given code offset.\"\n        },\n        {\n          \"name\": \"GetInliningPosition\",\n          \"parameters\": [\n            \"int inlining_id\"\n          ],\n          \"return_type\": \"std::tuple<int, bool, SourcePosition>\",\n          \"logic\": \"Returns the inlining position for the given inlining id.\"\n        },\n        {\n          \"name\": \"for_debugging\",\n          \"parameters\": [],\n          \"return_type\": \"ForDebugging\",\n          \"logic\": \"Returns whether the code was generated for debugging.\"\n        },\n        {\n          \"name\": \"is_dying\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Indicates that code object is considered 'potentially dead'.\"\n        },\n        {\n          \"name\": \"frame_has_feedback_slot\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether this code was generated with a stack frame with a feedback slot.\"\n        },\n        {\n          \"name\": \"EstimateCurrentMemoryConsumption\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Estimates the current memory consumption of this WasmCode.\"\n        },\n        {\n          \"name\": \"DebugName\",\n          \"parameters\": [],\n          \"return_type\": \"std::string\",\n          \"logic\": \"Tries to get a reasonable name. Lazily looks up the name section, and falls back to the function index. Return value is guaranteed to not be empty.\"\n        },\n        {\n          \"name\": \"WasmCode\",\n          \"parameters\": [\n            \"NativeModule* native_module\",\n            \"int index\",\n            \"base::Vector<uint8_t> instructions\",\n            \"int stack_slots\",\n            \"int ool_spills\",\n            \"uint32_t tagged_parameter_slots\",\n            \"int safepoint_table_offset\",\n            \"int handler_table_offset\",\n            \"int constant_pool_offset\",\n            \"int code_comments_offset\",\n            \"int unpadded_binary_size\",\n            \"base::Vector<const uint8_t> protected_instructions_data\",\n            \"base::Vector<const uint8_t> reloc_info\",\n            \"base::Vector<const uint8_t> source_position_table\",\n            \"base::Vector<const uint8_t> inlining_positions\",\n            \"base::Vector<const uint8_t> deopt_data\",\n            \"Kind kind\",\n            \"ExecutionTier tier\",\n            \"ForDebugging for_debugging\",\n            \"uint64_t signature_hash\",\n            \"bool frame_has_feedback_slot\"\n          ],\n          \"return_type\": \"WasmCode\",\n          \"logic\": \"Constructor\"\n        },\n        {\n          \"name\": \"RegisterTrapHandlerData\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers protected instruction information with the trap handler. Sets trap_handler_index.\"\n        },\n        {\n          \"name\": \"DecRefOnPotentiallyDeadCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Slow path for {DecRef}: The code becomes potentially dead. Schedule it for consideration in the next Code GC cycle.\"\n        },\n        {\n          \"name\": \"mark_as_dying\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Marks the code object as dying.\"\n        },\n        {\n          \"name\": \"undo_mark_as_dying\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Unmarks the code object as dying.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"UnpublishedWasmCode\",\n      \"properties\": [\n        \"code\",\n        \"assumptions\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"WasmCodeAllocator\",\n      \"properties\": [\n        \"free_code_space_\",\n        \"freed_code_space_\",\n        \"owned_code_space_\",\n        \"committed_code_space_\",\n        \"generated_code_size_\",\n        \"freed_code_size_\",\n        \"async_counters_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmCodeAllocator\",\n          \"parameters\": [\n            \"std::shared_ptr<Counters> async_counters\"\n          ],\n          \"return_type\": \"explicit WasmCodeAllocator\",\n          \"logic\": \"Constructor; initializes the allocator with async counters.\"\n        },\n        {\n          \"name\": \"Init\",\n          \"parameters\": [\n            \"VirtualMemory code_space\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the code allocator with the given virtual memory region.\"\n        },\n        {\n          \"name\": \"InitializeCodeRange\",\n          \"parameters\": [\n            \"NativeModule* native_module\",\n            \"base::AddressRegion region\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the code range with platform-specific headers.\"\n        },\n        {\n          \"name\": \"committed_code_space\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the amount of committed code space.\"\n        },\n        {\n          \"name\": \"generated_code_size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the amount of generated code.\"\n        },\n        {\n          \"name\": \"freed_code_size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the amount of freed code.\"\n        },\n        {\n          \"name\": \"AllocateForCode\",\n          \"parameters\": [\n            \"NativeModule*\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Allocates code space for a new code object.\"\n        },\n        {\n          \"name\": \"AllocateForWrapper\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Allocates code space for a new wrapper function.\"\n        },\n        {\n          \"name\": \"AllocateForCodeInRegion\",\n          \"parameters\": [\n            \"NativeModule*\",\n            \"size_t size\",\n            \"base::AddressRegion\"\n          ],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Allocates code space for a new code object within the specified region.\"\n        },\n        {\n          \"name\": \"FreeCode\",\n          \"parameters\": [\n            \"base::Vector<WasmCode* const>\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees memory pages of given code objects. Used for wasm code GC.\"\n        },\n        {\n          \"name\": \"GetNumCodeSpaces\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the number of separately reserved code spaces.\"\n        },\n        {\n          \"name\": \"counters\",\n          \"parameters\": [],\n          \"return_type\": \"Counters*\",\n          \"logic\": \"Returns the counters for asynchronous operations.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NativeModule\",\n      \"properties\": [\n        \"engine_scope_\",\n        \"code_allocator_\",\n        \"enabled_features_\",\n        \"compile_imports_\",\n        \"module_\",\n        \"source_map_\",\n        \"wire_bytes_\",\n        \"main_jump_table_\",\n        \"main_far_jump_table_\",\n        \"lazy_compile_table_\",\n        \"compilation_state_\",\n        \"tiering_budgets_\",\n        \"allocation_mutex_\",\n        \"owned_code_\",\n        \"new_owned_code_\",\n        \"code_table_\",\n        \"code_pointer_handles_\",\n        \"code_pointer_handles_size_\",\n        \"code_space_data_\",\n        \"debug_info_\",\n        \"names_provider_\",\n        \"debug_state_\",\n        \"lazy_compile_frozen_\",\n        \"liftoff_bailout_count_\",\n        \"liftoff_code_size_\",\n        \"turbofan_code_size_\",\n        \"num_lazy_compilations_\",\n        \"sum_lazy_compilation_time_in_micro_sec_\",\n        \"max_lazy_compilation_time_in_micro_sec_\",\n        \"should_metrics_be_reported_\",\n        \"should_pgo_data_be_written_\",\n        \"log_code_\",\n        \"fast_api_targets_\",\n        \"fast_api_signatures_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AddCode\",\n          \"parameters\": [\n            \"int index\",\n            \"const CodeDesc& desc\",\n            \"int stack_slots\",\n            \"int ool_spill_count\",\n            \"uint32_t tagged_parameter_slots\",\n            \"base::Vector<const uint8_t> protected_instructions\",\n            \"base::Vector<const uint8_t> source_position_table\",\n            \"base::Vector<const uint8_t> inlining_positions\",\n            \"base::Vector<const uint8_t> deopt_data\",\n            \"WasmCode::Kind kind\",\n            \"ExecutionTier tier\",\n            \"ForDebugging for_debugging\"\n          ],\n          \"return_type\": \"std::unique_ptr<WasmCode>\",\n          \"logic\": \"Adds code to the native module. The returned code still needs to be published via {PublishCode}.\"\n        },\n        {\n          \"name\": \"PublishCode\",\n          \"parameters\": [\n            \"UnpublishedWasmCode\"\n          ],\n          \"return_type\": \"WasmCode*\",\n          \"logic\": \"Publishes the code by entering it into the code table and patching the jump table. Ownership is transferred to the NativeModule.\"\n        },\n        {\n          \"name\": \"PublishCode\",\n          \"parameters\": [\n            \"base::Vector<UnpublishedWasmCode>\"\n          ],\n          \"return_type\": \"std::vector<WasmCode*>\",\n          \"logic\": \"Publishes a vector of WasmCode objects.\"\n        },\n        {\n          \"name\": \"UpdateWellKnownImports\",\n          \"parameters\": [\n            \"base::Vector<WellKnownImport> entries\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears outdated code as necessary when a new instantiation's imports conflict with previously seen well-known imports.\"\n        },\n        {\n          \"name\": \"ReinstallDebugCode\",\n          \"parameters\": [\n            \"WasmCode*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reinstalls debug code by patching the jump table.\"\n        },\n        {\n          \"name\": \"AllocateForDeserializedCode\",\n          \"parameters\": [\n            \"size_t total_code_size\"\n          ],\n          \"return_type\": \"std::pair<base::Vector<uint8_t>, JumpTablesRef>\",\n          \"logic\": \"Allocates space for deserialized code.\"\n        },\n        {\n          \"name\": \"AddDeserializedCode\",\n          \"parameters\": [\n            \"int index\",\n            \"base::Vector<uint8_t> instructions\",\n            \"int stack_slots\",\n            \"int ool_spills\",\n            \"uint32_t tagged_parameter_slots\",\n            \"int safepoint_table_offset\",\n            \"int handler_table_offset\",\n            \"int constant_pool_offset\",\n            \"int code_comments_offset\",\n            \"int unpadded_binary_size\",\n            \"base::Vector<const uint8_t> protected_instructions_data\",\n            \"base::Vector<const uint8_t> reloc_info\",\n            \"base::Vector<const uint8_t> source_position_table\",\n            \"base::Vector<const uint8_t> inlining_positions\",\n            \"base::Vector<const uint8_t> deopt_data\",\n            \"WasmCode::Kind kind\",\n            \"ExecutionTier tier\"\n          ],\n          \"return_type\": \"std::unique_ptr<WasmCode>\",\n          \"logic\": \"Adds deserialized code to the native module.\"\n        },\n        {\n          \"name\": \"AddCodeForTesting\",\n          \"parameters\": [\n            \"DirectHandle<Code> code\",\n            \"uint64_t signature_hash\"\n          ],\n          \"return_type\": \"WasmCode*\",\n          \"logic\": \"Adds anonymous code for testing purposes.\"\n        },\n        {\n          \"name\": \"InitializeJumpTableForLazyCompilation\",\n          \"parameters\": [\n            \"uint32_t num_wasm_functions\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Allocates and initializes the lazy compile table and jump table.\"\n        },\n        {\n          \"name\": \"InitializeCodePointerTableHandles\",\n          \"parameters\": [\n            \"uint32_t num_wasm_functions\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initialize code pointer table handles\"\n        },\n        {\n          \"name\": \"FreeCodePointerTableHandles\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees code pointer table handles.\"\n        },\n        {\n          \"name\": \"UseLazyStubLocked\",\n          \"parameters\": [\n            \"uint32_t func_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Setup lazy compilation per function.\"\n        },\n        {\n          \"name\": \"SnapshotCodeTable\",\n          \"parameters\": [],\n          \"return_type\": \"std::pair<std::vector<WasmCode*>, std::vector<WellKnownImport>>\",\n          \"logic\": \"Creates a snapshot of the code table.\"\n        },\n        {\n          \"name\": \"SnapshotAllOwnedCode\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<WasmCode*>\",\n          \"logic\": \"Creates a snapshot of all owned code.\"\n        },\n        {\n          \"name\": \"GetCode\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"WasmCode*\",\n          \"logic\": \"Returns the WasmCode object for the given function index.\"\n        },\n        {\n          \"name\": \"HasCode\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if code exists for a given function index.\"\n        },\n        {\n          \"name\": \"HasCodeWithTier\",\n          \"parameters\": [\n            \"uint32_t index\",\n            \"ExecutionTier tier\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if code exists with a specific execution tier for a given function index.\"\n        },\n        {\n          \"name\": \"SetWasmSourceMap\",\n          \"parameters\": [\n            \"std::unique_ptr<WasmModuleSourceMap> source_map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the Wasm source map.\"\n        },\n        {\n          \"name\": \"GetWasmSourceMap\",\n          \"parameters\": [],\n          \"return_type\": \"WasmModuleSourceMap*\",\n          \"logic\": \"Returns the Wasm source map.\"\n        },\n        {\n          \"name\": \"jump_table_start\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the start address of the jump table.\"\n        },\n        {\n          \"name\": \"GetNearCallTargetForFunction\",\n          \"parameters\": [\n            \"uint32_t func_index\",\n            \"const JumpTablesRef&\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Get the call target in the jump table for a given function index.\"\n        },\n        {\n          \"name\": \"GetJumpTableEntryForBuiltin\",\n          \"parameters\": [\n            \"Builtin builtin\",\n            \"const JumpTablesRef&\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns a jump table entry for given builtin.\"\n        },\n        {\n          \"name\": \"GetFunctionIndexFromJumpTableSlot\",\n          \"parameters\": [\n            \"Address slot_address\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the function index from a given jump table slot address.\"\n        },\n        {\n          \"name\": \"CreateIndirectCallTargetToFunctionIndexMap\",\n          \"parameters\": [],\n          \"return_type\": \"CallIndirectTargetMap\",\n          \"logic\": \"Creates a map from call indirect target to function index.\"\n        },\n        {\n          \"name\": \"ReserveCodeTableForTesting\",\n          \"parameters\": [\n            \"uint32_t max_functions\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"For cctests, where we build both WasmModule and the runtime objects on the fly, and bypass the instance builder pipeline.\"\n        },\n        {\n          \"name\": \"LogWasmCodes\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"Tagged<Script>\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Log all owned code in the given isolate, using the given script as the containing script.\"\n        },\n        {\n          \"name\": \"compilation_state\",\n          \"parameters\": [],\n          \"return_type\": \"CompilationState*\",\n          \"logic\": \"Returns the compilation state.\"\n        },\n        {\n          \"name\": \"num_functions\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the total number of functions.\"\n        },\n        {\n          \"name\": \"num_imported_functions\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the number of imported functions.\"\n        },\n        {\n          \"name\": \"num_declared_functions\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the number of declared functions.\"\n        },\n        {\n          \"name\": \"set_lazy_compile_frozen\",\n          \"parameters\": [\n            \"bool frozen\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Freezes the lazy compilation.\"\n        },\n        {\n          \"name\": \"lazy_compile_frozen\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if lazy compilation is frozen.\"\n        },\n        {\n          \"name\": \"wire_bytes\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector"
}