{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-external-refs.h",
  "imports": [
    "<stdint.h>",
    "src/base/macros.h"
  ],
  "classes": [
    {
      "name": "Isolate",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "f32_trunc_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for truncating a 32-bit float."
    },
    {
      "name": "f32_floor_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for flooring a 32-bit float."
    },
    {
      "name": "f32_ceil_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for ceiling a 32-bit float."
    },
    {
      "name": "f32_nearest_int_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for rounding a 32-bit float to the nearest integer."
    },
    {
      "name": "f64_trunc_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for truncating a 64-bit float."
    },
    {
      "name": "f64_floor_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for flooring a 64-bit float."
    },
    {
      "name": "f64_ceil_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for ceiling a 64-bit float."
    },
    {
      "name": "f64_nearest_int_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for rounding a 64-bit float to the nearest integer."
    },
    {
      "name": "int64_to_float32_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 64-bit integer to a 32-bit float."
    },
    {
      "name": "uint64_to_float32_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting an unsigned 64-bit integer to a 32-bit float."
    },
    {
      "name": "int64_to_float64_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 64-bit integer to a 64-bit float."
    },
    {
      "name": "uint64_to_float64_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting an unsigned 64-bit integer to a 64-bit float."
    },
    {
      "name": "float32_to_int64_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for converting a 32-bit float to a 64-bit integer."
    },
    {
      "name": "float32_to_uint64_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for converting a 32-bit float to an unsigned 64-bit integer."
    },
    {
      "name": "float64_to_int64_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for converting a 64-bit float to a 64-bit integer."
    },
    {
      "name": "float64_to_uint64_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for converting a 64-bit float to an unsigned 64-bit integer."
    },
    {
      "name": "float32_to_int64_sat_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 32-bit float to a saturated 64-bit integer."
    },
    {
      "name": "float32_to_uint64_sat_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 32-bit float to a saturated unsigned 64-bit integer."
    },
    {
      "name": "float64_to_int64_sat_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 64-bit float to a saturated 64-bit integer."
    },
    {
      "name": "float64_to_uint64_sat_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 64-bit float to a saturated unsigned 64-bit integer."
    },
    {
      "name": "float32_to_float16_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 32-bit float to a 16-bit float."
    },
    {
      "name": "float16_to_float32_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for converting a 16-bit float to a 32-bit float."
    },
    {
      "name": "int64_div_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for 64-bit integer division."
    },
    {
      "name": "int64_mod_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for 64-bit integer modulo."
    },
    {
      "name": "uint64_div_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for unsigned 64-bit integer division."
    },
    {
      "name": "uint64_mod_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "int32_t",
      "logic": "External reference for unsigned 64-bit integer modulo."
    },
    {
      "name": "word32_rol_wrapper",
      "parameters": [
        "uint32_t input",
        "uint32_t shift"
      ],
      "return_type": "uint32_t",
      "logic": "External reference for a 32-bit rotate left operation."
    },
    {
      "name": "word32_ror_wrapper",
      "parameters": [
        "uint32_t input",
        "uint32_t shift"
      ],
      "return_type": "uint32_t",
      "logic": "External reference for a 32-bit rotate right operation."
    },
    {
      "name": "word64_rol_wrapper",
      "parameters": [
        "uint64_t input",
        "uint32_t shift"
      ],
      "return_type": "uint64_t",
      "logic": "External reference for a 64-bit rotate left operation."
    },
    {
      "name": "word64_ror_wrapper",
      "parameters": [
        "uint64_t input",
        "uint32_t shift"
      ],
      "return_type": "uint64_t",
      "logic": "External reference for a 64-bit rotate right operation."
    },
    {
      "name": "float64_pow_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for a 64-bit float power operation."
    },
    {
      "name": "f64x2_ceil_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for ceiling a 64-bit float vector."
    },
    {
      "name": "f64x2_floor_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for flooring a 64-bit float vector."
    },
    {
      "name": "f64x2_trunc_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for truncating a 64-bit float vector."
    },
    {
      "name": "f64x2_nearest_int_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for rounding a 64-bit float vector to the nearest integer."
    },
    {
      "name": "f32x4_ceil_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for ceiling a 32-bit float vector."
    },
    {
      "name": "f32x4_floor_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for flooring a 32-bit float vector."
    },
    {
      "name": "f32x4_trunc_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for truncating a 32-bit float vector."
    },
    {
      "name": "f32x4_nearest_int_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for rounding a 32-bit float vector to the nearest integer."
    },
    {
      "name": "f16x8_abs_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for absolute value of f16x8."
    },
    {
      "name": "f16x8_neg_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for negation of f16x8."
    },
    {
      "name": "f16x8_sqrt_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for square root of f16x8."
    },
    {
      "name": "f16x8_ceil_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for ceiling a 16-bit float vector."
    },
    {
      "name": "f16x8_floor_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for flooring a 16-bit float vector."
    },
    {
      "name": "f16x8_trunc_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for truncating a 16-bit float vector."
    },
    {
      "name": "f16x8_nearest_int_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for rounding a 16-bit float vector to the nearest integer."
    },
    {
      "name": "f16x8_eq_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for equal to comparison of f16x8."
    },
    {
      "name": "f16x8_ne_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for not equal to comparison of f16x8."
    },
    {
      "name": "f16x8_lt_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for less than comparison of f16x8."
    },
    {
      "name": "f16x8_le_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for less than or equal to comparison of f16x8."
    },
    {
      "name": "f16x8_add_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for add of f16x8."
    },
    {
      "name": "f16x8_sub_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for sub of f16x8."
    },
    {
      "name": "f16x8_mul_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for mul of f16x8."
    },
    {
      "name": "f16x8_div_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for div of f16x8."
    },
    {
      "name": "f16x8_min_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for min of f16x8."
    },
    {
      "name": "f16x8_max_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for max of f16x8."
    },
    {
      "name": "f16x8_pmin_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for pairwise min of f16x8."
    },
    {
      "name": "f16x8_pmax_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for pairwise max of f16x8."
    },
    {
      "name": "i16x8_sconvert_f16x8_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for signed conversion from f16x8 to i16x8."
    },
    {
      "name": "i16x8_uconvert_f16x8_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for unsigned conversion from f16x8 to i16x8."
    },
    {
      "name": "f16x8_sconvert_i16x8_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for signed conversion from i16x8 to f16x8."
    },
    {
      "name": "f16x8_uconvert_i16x8_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for unsigned conversion from i16x8 to f16x8."
    },
    {
      "name": "f32x4_promote_low_f16x8_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for promoting the low part of f16x8 to f32x4."
    },
    {
      "name": "f16x8_demote_f32x4_zero_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for demoting f32x4 to f16x8, zeroing the upper parts."
    },
    {
      "name": "f16x8_demote_f64x2_zero_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for demoting f64x2 to f16x8, zeroing the other parts."
    },
    {
      "name": "f16x8_qfma_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for fused multiply-add of f16x8."
    },
    {
      "name": "f16x8_qfms_wrapper",
      "parameters": [
        "Address data"
      ],
      "return_type": "void",
      "logic": "External reference for fused multiply-subtract of f16x8."
    },
    {
      "name": "memory_init_wrapper",
      "parameters": [
        "Address instance_addr",
        "uint32_t mem_index",
        "uintptr_t dst",
        "uint32_t src",
        "uint32_t seg_index",
        "uint32_t size"
      ],
      "return_type": "int32_t",
      "logic": "External reference to initialize memory from a data segment."
    },
    {
      "name": "memory_copy_wrapper",
      "parameters": [
        "Address instance_addr",
        "uint32_t dst_mem_index",
        "uint32_t src_mem_index",
        "uintptr_t dst",
        "uintptr_t src",
        "uintptr_t size"
      ],
      "return_type": "int32_t",
      "logic": "External reference to copy memory from one location to another."
    },
    {
      "name": "memory_fill_wrapper",
      "parameters": [
        "Address instance_addr",
        "uint32_t mem_index",
        "uintptr_t dst",
        "uint8_t value",
        "uintptr_t size"
      ],
      "return_type": "int32_t",
      "logic": "External reference to fill memory with a specific value."
    },
    {
      "name": "array_copy_wrapper",
      "parameters": [
        "Address raw_dst_array",
        "uint32_t dst_index",
        "Address raw_src_array",
        "uint32_t src_index",
        "uint32_t length"
      ],
      "return_type": "void",
      "logic": "External reference to copy elements between arrays."
    },
    {
      "name": "array_fill_wrapper",
      "parameters": [
        "Address raw_array",
        "uint32_t index",
        "uint32_t length",
        "uint32_t emit_write_barrier",
        "uint32_t raw_type",
        "Address initial_value_addr"
      ],
      "return_type": "void",
      "logic": "External reference to fill an array with an initial value."
    },
    {
      "name": "flat_string_to_f64",
      "parameters": [
        "Address string_address"
      ],
      "return_type": "double",
      "logic": "Converts a flat string to a double value."
    },
    {
      "name": "switch_stacks",
      "parameters": [
        "Isolate* isolate",
        "Address old_continuation"
      ],
      "return_type": "void",
      "logic": "Update the stack limit after a stack switch and preserve pending interrupts."
    },
    {
      "name": "return_switch",
      "parameters": [
        "Isolate* isolate",
        "Address continuation"
      ],
      "return_type": "void",
      "logic": "Return {continuation}'s stack memory to the stack pool and update the stack limit."
    },
    {
      "name": "switch_to_the_central_stack",
      "parameters": [
        "Isolate* isolate",
        "uintptr_t sp"
      ],
      "return_type": "intptr_t",
      "logic": "Switches to the central stack, returning the old stack pointer."
    },
    {
      "name": "switch_from_the_central_stack",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Switches from the central stack back to the previous stack."
    },
    {
      "name": "switch_to_the_central_stack_for_js",
      "parameters": [
        "Isolate* isolate",
        "Address fp"
      ],
      "return_type": "intptr_t",
      "logic": "Switches to the central stack for JavaScript execution, returning the old stack pointer."
    },
    {
      "name": "switch_from_the_central_stack_for_js",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Switches from the central stack back to the previous stack after JavaScript execution."
    },
    {
      "name": "grow_stack",
      "parameters": [
        "Isolate* isolate",
        "void* current_sp",
        "size_t frame_size",
        "size_t gap",
        "Address current_fp"
      ],
      "return_type": "Address",
      "logic": "Grows the stack by allocating more memory."
    },
    {
      "name": "shrink_stack",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "Address",
      "logic": "Shrinks the stack by deallocating unused memory."
    },
    {
      "name": "load_old_fp",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "Address",
      "logic": "Loads the old frame pointer."
    }
  ]
}