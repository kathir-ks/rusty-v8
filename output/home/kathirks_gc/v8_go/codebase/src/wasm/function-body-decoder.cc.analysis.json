{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/function-body-decoder.cc",
  "imports": [
    "src/wasm/function-body-decoder.h",
    "src/utils/ostreams.h",
    "src/wasm/decoder.h",
    "src/wasm/function-body-decoder-impl.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-opcodes-inl.h"
  ],
  "classes": [
    {
      "name": "BytecodeIterator",
      "properties": [],
      "methods": [
        {
          "name": "BytecodeIterator",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end"
          ],
          "return_type": "void",
          "logic": "Constructor for BytecodeIterator. Initializes the decoder with the provided start and end pointers."
        },
        {
          "name": "BytecodeIterator",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end",
            "BodyLocalDecls* decls",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for BytecodeIterator. Decodes local declarations, then advances the program counter (pc_) by the size of the encoded local declarations."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DecodeLocalDecls",
      "parameters": [
        "WasmEnabledFeatures enabled",
        "BodyLocalDecls* decls",
        "const WasmModule* module",
        "bool is_shared",
        "const uint8_t* start",
        "const uint8_t* end",
        "Zone* zone"
      ],
      "return_type": "bool",
      "logic": "Decodes local variable declarations from a byte stream. This function uses a template parameter `ValidationTag` to determine whether or not to perform validation. It reads the encoded size of the locals, copies the decoded types, and updates the provided BodyLocalDecls structure."
    },
    {
      "name": "DecodeLocalDecls",
      "parameters": [
        "WasmEnabledFeatures enabled",
        "BodyLocalDecls* decls",
        "const uint8_t* start",
        "const uint8_t* end",
        "Zone* zone"
      ],
      "return_type": "void",
      "logic": "A wrapper function for `DecodeLocalDecls` that provides a default implementation without validation."
    },
    {
      "name": "ValidateAndDecodeLocalDeclsForTesting",
      "parameters": [
        "WasmEnabledFeatures enabled",
        "BodyLocalDecls* decls",
        "const WasmModule* module",
        "bool is_shared",
        "const uint8_t* start",
        "const uint8_t* end",
        "Zone* zone"
      ],
      "return_type": "bool",
      "logic": "Decodes local variable declarations with full validation enabled using the Decoder::FullValidationTag template argument."
    },
    {
      "name": "ValidateFunctionBody",
      "parameters": [
        "Zone* zone",
        "WasmEnabledFeatures enabled",
        "const WasmModule* module",
        "WasmDetectedFeatures* detected",
        "const FunctionBody& body"
      ],
      "return_type": "DecodeResult",
      "logic": "Validates the function body of a WebAssembly function. Uses WasmFullDecoder with full validation enabled."
    },
    {
      "name": "OpcodeLength",
      "parameters": [
        "const uint8_t* pc",
        "const uint8_t* end"
      ],
      "return_type": "unsigned",
      "logic": "Determines the length of a WebAssembly opcode at a given program counter (pc) without validation."
    },
    {
      "name": "CheckHardwareSupportsSimd",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if the CPU hardware supports SIMD instructions for WebAssembly. Returns true if supported, false otherwise."
    },
    {
      "name": "AnalyzeLoopAssignmentForTesting",
      "parameters": [
        "Zone* zone",
        "uint32_t num_locals",
        "const uint8_t* start",
        "const uint8_t* end",
        "bool* loop_is_innermost"
      ],
      "return_type": "BitVector*",
      "logic": "Analyzes loop assignment in WebAssembly code for testing purposes. Returns a BitVector representing loop assignments and sets loop_is_innermost."
    }
  ]
}