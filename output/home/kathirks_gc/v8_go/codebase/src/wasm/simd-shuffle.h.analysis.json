{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/simd-shuffle.h",
  "imports": [
    "src/base/macros.h",
    "src/common/globals.h",
    "src/compiler/backend/instruction-codes.h"
  ],
  "classes": [
    {
      "name": "SimdShuffle",
      "properties": [],
      "methods": [
        {
          "name": "CanonicalizeShuffle",
          "parameters": [
            "bool inputs_equal",
            "uint8_t* shuffle",
            "bool* needs_swap",
            "bool* is_swizzle"
          ],
          "return_type": "void",
          "logic": "Canonicalizes a SIMD shuffle pattern. It determines if inputs need to be swapped, if it's a swizzle (inputs are equal or only one input used), and canonicalizes the shuffle to have the first input lanes encountered first."
        },
        {
          "name": "TryMatchIdentity",
          "parameters": [
            "const uint8_t* shuffle"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to the identity shuffle (0, 1, 2, ..., 15)."
        },
        {
          "name": "TryMatchSplat",
          "parameters": [
            "const uint8_t* shuffle",
            "int* index"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a scalar splat operation (duplicating a single lane across the vector). Returns the index of the lane if successful."
        },
        {
          "name": "TryMatch32x4Rotate",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle32x4",
            "bool is_swizzle"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a 32x4 rotate operation (e.g., [1, 2, 3, 0]). Only applicable when inputs are equal (is_swizzle)."
        },
        {
          "name": "TryMatch32x4Reverse",
          "parameters": [
            "const uint8_t* shuffle32x4"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a 32x4 reverse operation (e.g., [3, 2, 1, 0])."
        },
        {
          "name": "TryMatch32x4OneLaneSwizzle",
          "parameters": [
            "const uint8_t* shuffle32x4",
            "uint8_t* from",
            "uint8_t* to"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a one-lane swizzle of 4x32 elements."
        },
        {
          "name": "TryMatch64x1Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle64x1"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x8 byte shuffle to an equivalent 64x1 shuffle, writing the index if found."
        },
        {
          "name": "TryMatch64x2Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle64x2"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x16 byte shuffle to an equivalent 64x2 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatch32x1Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle32x1"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x4 byte shuffle to an equivalent 32x1 shuffle, writing the index if found."
        },
        {
          "name": "TryMatch32x2Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle32x2"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x8 byte shuffle to an equivalent 32x2 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatch32x4Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle32x4"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x16 byte shuffle to an equivalent 32x4 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatch32x8Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle32x8"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x32 byte shuffle to an equivalent 32x8 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatch16x1Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle16x1"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x2 byte shuffle to an equivalent 16x1 shuffle, writing the index if found."
        },
        {
          "name": "TryMatch16x2Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle16x2"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x4 byte shuffle to an equivalent 16x2 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatch16x4Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle16x4"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x8 byte shuffle to an equivalent 16x4 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatch16x8Shuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* shuffle16x8"
          ],
          "return_type": "bool",
          "logic": "Tries to match an 8x16 byte shuffle to an equivalent 16x8 shuffle, writing the indices if found."
        },
        {
          "name": "TryMatchConcat",
          "parameters": [
            "const uint8_t* shuffle",
            "uint8_t* offset"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a concatenation operation, writing the byte offset if found."
        },
        {
          "name": "TryMatchBlend",
          "parameters": [
            "const uint8_t* shuffle"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a blend operation (interleaving lanes)."
        },
        {
          "name": "TryMatchByteToDwordZeroExtend",
          "parameters": [
            "const uint8_t* shuffle"
          ],
          "return_type": "bool",
          "logic": "Tries to match a shuffle to a packed byte to dword zero extend operation."
        },
        {
          "name": "TryMatch8x16UpperToLowerReduce",
          "parameters": [
            "const uint8_t* shuffle1",
            "const uint8_t* shuffle2",
            "const uint8_t* shuffle3",
            "const uint8_t* shuffle4"
          ],
          "return_type": "bool",
          "logic": "Tries to match a four-step reduction shuffle where the upper half is shuffled into the lower half."
        },
        {
          "name": "TryMatch16x8UpperToLowerReduce",
          "parameters": [
            "const uint8_t* shuffle1",
            "const uint8_t* shuffle2",
            "const uint8_t* shuffle3"
          ],
          "return_type": "bool",
          "logic": "Tries to match a three-step reduction shuffle where the upper half is shuffled into the lower half."
        },
        {
          "name": "TryMatch32x4UpperToLowerReduce",
          "parameters": [
            "const uint8_t* shuffle1",
            "const uint8_t* shuffle2"
          ],
          "return_type": "bool",
          "logic": "Tries to match a two-step reduction shuffle where the upper half is shuffled into the lower half."
        },
        {
          "name": "TryMatch32x4PairwiseReduce",
          "parameters": [
            "const uint8_t* shuffle1",
            "const uint8_t* shuffle2"
          ],
          "return_type": "bool",
          "logic": "Tries to match a 32x4 pairwise shuffle chain where every other element is shuffled into the lower adjacent position."
        },
        {
          "name": "TryMatch64x2Reduce",
          "parameters": [
            "const uint8_t* shuffle64x2"
          ],
          "return_type": "bool",
          "logic": "Tries to match a 64-bit reduction, where element 1 is shuffled into 0."
        },
        {
          "name": "PackShuffle4",
          "parameters": [
            "uint8_t* shuffle"
          ],
          "return_type": "uint8_t",
          "logic": "Packs a 4 lane shuffle into a single imm8 byte."
        },
        {
          "name": "PackBlend8",
          "parameters": [
            "const uint8_t* shuffle16x8"
          ],
          "return_type": "uint8_t",
          "logic": "Gets an 8-bit lane mask suitable for 16x8 pblendw."
        },
        {
          "name": "PackBlend4",
          "parameters": [
            "const uint8_t* shuffle32x4"
          ],
          "return_type": "uint8_t",
          "logic": "Gets an 8-bit lane mask suitable for 32x4 pblendw."
        },
        {
          "name": "Pack2Lanes",
          "parameters": [
            "const std::array<uint8_t, 2>& shuffle"
          ],
          "return_type": "int32_t",
          "logic": "Packs 2 bytes of shuffle into a 32-bit immediate."
        },
        {
          "name": "Pack4Lanes",
          "parameters": [
            "const uint8_t* shuffle"
          ],
          "return_type": "int32_t",
          "logic": "Packs 4 bytes of shuffle into a 32-bit immediate."
        },
        {
          "name": "Pack16Lanes",
          "parameters": [
            "uint32_t* dst",
            "const uint8_t* shuffle"
          ],
          "return_type": "void",
          "logic": "Packs 16 bytes of shuffle into an array of 4 uint32_t."
        },
        {
          "name": "TryMatchCanonical",
          "parameters": [
            "const ShuffleArray& shuffle"
          ],
          "return_type": "SimdShuffle::CanonicalShuffle",
          "logic": "Tries to match against a list of canonicalized shuffles."
        },
        {
          "name": "TryMatchVpshufd",
          "parameters": [
            "const uint8_t* shuffle32x8",
            "uint8_t* control"
          ],
          "return_type": "bool",
          "logic": "Matches shuffles against the VPSHUFD instruction."
        },
        {
          "name": "TryMatchShufps256",
          "parameters": [
            "const uint8_t* shuffle32x8",
            "uint8_t* control"
          ],
          "return_type": "bool",
          "logic": "Matches shuffles against the VSHUFPS instruction with a SIMD256 operand"
        },
        {
          "name": "TryMatchArchShuffle",
          "parameters": [
            "const uint8_t* shuffle",
            "bool is_swizzle",
            "const ShuffleEntry<simd_size>** arch_shuffle"
          ],
          "return_type": "bool",
          "logic": "Tries to match the shuffle against architecture-specific instructions (AVX). Returns true if a match is found, storing the corresponding ShuffleEntry in arch_shuffle."
        }
      ]
    },
    {
      "name": "SimdSwizzle",
      "properties": [],
      "methods": [
        {
          "name": "AllInRangeOrTopBitSet",
          "parameters": [
            "std::array<uint8_t, kSimd128Size> shuffle"
          ],
          "return_type": "bool",
          "logic": "Checks if all immediates in the shuffle array are either in range (< kSimd128Size) or have the top bit set."
        }
      ]
    }
  ],
  "functions": []
}