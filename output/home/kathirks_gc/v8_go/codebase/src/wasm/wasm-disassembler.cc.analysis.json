{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-disassembler.cc",
  "imports": [
    "src/wasm/wasm-disassembler.h",
    "<iomanip>",
    "src/debug/debug-interface.h",
    "src/numbers/conversions.h",
    "src/wasm/module-decoder-impl.h",
    "src/wasm/names-provider.h",
    "src/wasm/wasm-disassembler-impl.h",
    "src/wasm/wasm-opcodes-inl.h"
  ],
  "classes": [
    {
      "name": "OffsetsProvider",
      "properties": [
        "num_imported_tables_",
        "num_imported_globals_",
        "num_imported_tags_",
        "type_offsets_",
        "import_offsets_",
        "table_offsets_",
        "tag_offsets_",
        "global_offsets_",
        "element_offsets_",
        "data_offsets_",
        "recgroups_"
      ],
      "methods": [
        {
          "name": "CollectOffsets",
          "parameters": [
            "const WasmModule* module",
            "base::Vector<const uint8_t> wire_bytes"
          ],
          "return_type": "void",
          "logic": "Decodes the Wasm module to collect offsets of various sections like types, imports, tables, globals, etc., storing them in the respective offset vectors for later use during disassembly."
        }
      ]
    },
    {
      "name": "ModuleDisassembler",
      "properties": [
        "out_",
        "module_",
        "names_",
        "wire_bytes_",
        "start_",
        "zone_",
        "offsets_",
        "function_body_offsets_"
      ],
      "methods": [
        {
          "name": "ModuleDisassembler",
          "parameters": [
            "MultiLineStringBuilder& out",
            "const WasmModule* module",
            "NamesProvider* names",
            "const ModuleWireBytes wire_bytes",
            "AccountingAllocator* allocator",
            "std::unique_ptr<OffsetsProvider> offsets_provider",
            "std::vector<int>* function_body_offsets"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Initializes the ModuleDisassembler with the necessary components for disassembling a Wasm module, including the module, names provider, wire bytes, and offsets provider."
        },
        {
          "name": "~ModuleDisassembler",
          "parameters": [],
          "return_type": "N/A (Destructor)",
          "logic": "Default destructor."
        },
        {
          "name": "PrintTypeDefinition",
          "parameters": [
            "uint32_t type_index",
            "Indentation indentation",
            "IndexAsComment index_as_comment"
          ],
          "return_type": "void",
          "logic": "Prints the definition of a Wasm type at the given index, including its structure, fields, and mutability, using the provided indentation and formatting options."
        },
        {
          "name": "PrintModule",
          "parameters": [
            "Indentation indentation",
            "size_t max_mb"
          ],
          "return_type": "void",
          "logic": "Prints the entire Wasm module in a human-readable format, including types, imports, exports, tables, memories, globals, functions, and data segments, limiting the output size to the specified maximum megabytes."
        },
        {
          "name": "PrintImportName",
          "parameters": [
            "const WasmImport& import"
          ],
          "return_type": "void",
          "logic": "Prints the module and field names of a Wasm import."
        },
        {
          "name": "PrintExportName",
          "parameters": [
            "ImportExportKindCode kind",
            "uint32_t index"
          ],
          "return_type": "void",
          "logic": "Prints the export name for a given import/export kind and index."
        },
        {
          "name": "PrintMutableType",
          "parameters": [
            "bool mutability",
            "ValueType type"
          ],
          "return_type": "void",
          "logic": "Prints the mutability and value type of a Wasm global or local variable."
        },
        {
          "name": "PrintTable",
          "parameters": [
            "const WasmTable& table"
          ],
          "return_type": "void",
          "logic": "Prints the attributes of a Wasm table, including its initial size, maximum size, and element type."
        },
        {
          "name": "PrintMemory",
          "parameters": [
            "const WasmMemory& memory"
          ],
          "return_type": "void",
          "logic": "Prints the attributes of a Wasm memory, including its initial pages, maximum pages, and shared status."
        },
        {
          "name": "PrintGlobal",
          "parameters": [
            "const WasmGlobal& global"
          ],
          "return_type": "void",
          "logic": "Prints the attributes of a Wasm global variable, including its mutability and value type."
        },
        {
          "name": "PrintInitExpression",
          "parameters": [
            "const ConstantExpression& init",
            "ValueType expected_type"
          ],
          "return_type": "void",
          "logic": "Prints the initial value expression of a Wasm global variable."
        },
        {
          "name": "PrintTagSignature",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Prints the signature of a Wasm tag."
        },
        {
          "name": "PrintString",
          "parameters": [
            "WireBytesRef ref"
          ],
          "return_type": "void",
          "logic": "Prints a string literal from the Wasm module's wire bytes."
        },
        {
          "name": "PrintStringAsJSON",
          "parameters": [
            "WireBytesRef ref"
          ],
          "return_type": "void",
          "logic": "Prints a string literal from the Wasm module's wire bytes, escaping characters for JSON."
        },
        {
          "name": "LineBreakOrSpace",
          "parameters": [
            "bool break_lines",
            "Indentation indentation",
            "uint32_t byte_offset"
          ],
          "return_type": "void",
          "logic": "Inserts a line break with indentation or a space, depending on the 'break_lines' flag."
        }
      ]
    },
    {
      "name": "FunctionBodyDisassembler",
      "properties": [
        "out_",
        "module_",
        "func_index_",
        "shared_",
        "detected_",
        "sig_",
        "pc_",
        "end_",
        "pc_base_",
        "module_bytes_",
        "names_",
        "num_locals_",
        "current_opcode_",
        "label_stack_",
        "label_occurrence_index_",
        "used_types_"
      ],
      "methods": [
        {
          "name": "DecodeAsWat",
          "parameters": [
            "MultiLineStringBuilder& out",
            "Indentation indentation",
            "FunctionHeader include_header",
            "uint32_t* first_instruction_offset"
          ],
          "return_type": "void",
          "logic": "Decodes the function body and prints it in WebAssembly Text format (WAT), including the function header, locals, and instructions, with proper indentation and label handling. Optionally provides the offset of the first instruction."
        },
        {
          "name": "DecodeGlobalInitializer",
          "parameters": [
            "StringBuilder& out"
          ],
          "return_type": "void",
          "logic": "Decodes and prints a global initializer expression, stopping before the final 'end' opcode."
        },
        {
          "name": "GetOpcode",
          "parameters": [],
          "return_type": "WasmOpcode",
          "logic": "Reads and returns the next Wasm opcode, handling prefix opcodes correctly."
        },
        {
          "name": "PrintHexNumber",
          "parameters": [
            "StringBuilder& out",
            "uint64_t number"
          ],
          "return_type": "void",
          "logic": "Prints a 64-bit number in hexadecimal format."
        },
        {
          "name": "PrintImmediatesAndGetLength",
          "parameters": [
            "StringBuilder& out"
          ],
          "return_type": "uint32_t",
          "logic": "Prints the immediates for the current opcode using the ImmediatesPrinter and returns the total length of the opcode and immediates in bytes."
        }
      ]
    },
    {
      "name": "ImmediatesPrinter",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "Disassemble",
      "parameters": [
        "const WasmModule* module",
        "ModuleWireBytes wire_bytes",
        "NamesProvider* names",
        "v8::debug::DisassemblyCollector* collector",
        "std::vector<int>* function_body_offsets"
      ],
      "return_type": "void",
      "logic": "Disassembles a given Wasm module and populates the disassembly into the provided collector. It uses the module's metadata, wire bytes, and names provider to produce a human-readable representation."
    },
    {
      "name": "Disassemble",
      "parameters": [
        "base::Vector<const uint8_t> wire_bytes",
        "v8::debug::DisassemblyCollector* collector",
        "std::vector<int>* function_body_offsets"
      ],
      "return_type": "void",
      "logic": "Decodes a Wasm module from its wire bytes and disassembles it, using an automatically generated offsets provider.  Handles decoding errors and outputs the disassembly to the provided collector."
    },
    {
      "name": "MultiLineStringBuilder::ToDisassemblyCollector",
      "parameters": [
        "v8::debug::DisassemblyCollector* collector"
      ],
      "return_type": "void",
      "logic": "Appends the content of the MultiLineStringBuilder to a v8::debug::DisassemblyCollector, line by line, including bytecode offsets."
    },
    {
      "name": "DisassembleFunctionImpl",
      "parameters": [
        "const WasmModule* module",
        "int func_index",
        "base::Vector<const uint8_t> function_body",
        "ModuleWireBytes module_bytes",
        "NamesProvider* names",
        "std::ostream& os",
        "std::vector<uint32_t>* offsets"
      ],
      "return_type": "void",
      "logic": "Disassembles a single Wasm function, printing the output to the given output stream. It creates a FunctionBodyDisassembler to perform the actual disassembly."
    },
    {
      "name": "DisassembleFunction",
      "parameters": [
        "const WasmModule* module",
        "int func_index",
        "base::Vector<const uint8_t> wire_bytes",
        "NamesProvider* names",
        "std::ostream& os"
      ],
      "return_type": "void",
      "logic": "Disassembles a single Wasm function, printing the output to the given output stream, using the module's wire bytes to extract the function's code."
    },
    {
      "name": "DisassembleFunction",
      "parameters": [
        "const WasmModule* module",
        "int func_index",
        "base::Vector<const uint8_t> function_body",
        "base::Vector<const uint8_t> maybe_wire_bytes",
        "uint32_t function_body_offset",
        "std::ostream& os",
        "std::vector<uint32_t>* offsets"
      ],
      "return_type": "void",
      "logic": "Disassembles a single Wasm function, printing the output to the given output stream, using a provided function body and offset."
    },
    {
      "name": "GetDefaultAlignment",
      "parameters": [
        "WasmOpcode opcode"
      ],
      "return_type": "uint32_t",
      "logic": "Returns the default alignment (log2) for a given Wasm opcode, primarily used for memory access instructions."
    },
    {
      "name": "PrintSignatureOneLine",
      "parameters": [
        "StringBuilder& out",
        "const FunctionSig* sig",
        "uint32_t func_index",
        "NamesProvider* names",
        "bool param_names",
        "IndexAsComment indices_as_comments"
      ],
      "return_type": "void",
      "logic": "Prints a Wasm function signature on a single line, including parameter and result types, using the provided names provider for function names."
    },
    {
      "name": "PrintStringRaw",
      "parameters": [
        "StringBuilder& out",
        "const uint8_t* start",
        "const uint8_t* end"
      ],
      "return_type": "void",
      "logic": "Prints a raw string, escaping special characters."
    },
    {
      "name": "PrintStringAsJSON",
      "parameters": [
        "StringBuilder& out",
        "const uint8_t* start",
        "WireBytesRef ref"
      ],
      "return_type": "void",
      "logic": "Prints a string, escaping characters for safe JSON output."
    }
  ]
}