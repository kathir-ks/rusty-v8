{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/turboshaft-graph-interface.h",
  "imports": [
    "src/base/macros.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/dataview-lowering-reducer.h",
    "src/compiler/turboshaft/select-lowering-reducer.h",
    "src/compiler/turboshaft/variable-reducer.h",
    "src/objects/code-kind.h",
    "src/wasm/decoder.h",
    "src/wasm/function-body-decoder-impl.h",
    "src/wasm/value-type.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "WasmGraphBuilderBase",
      "properties": [
        "zone_",
        "asm_"
      ],
      "methods": [
        {
          "name": "BuildModifyThreadInWasmFlagHelper",
          "parameters": [
            "Zone* zone",
            "OpIndex thread_in_wasm_flag_address",
            "bool new_value"
          ],
          "return_type": "void",
          "logic": "Helper function to build the logic for modifying the thread-in-wasm flag at a specific address."
        },
        {
          "name": "BuildModifyThreadInWasmFlag",
          "parameters": [
            "Zone* zone",
            "bool new_value"
          ],
          "return_type": "void",
          "logic": "Builds the logic for modifying the thread-in-wasm flag."
        },
        {
          "name": "WasmGraphBuilderBase",
          "parameters": [
            "Zone* zone",
            "Assembler& assembler"
          ],
          "return_type": "void",
          "logic": "Constructor for WasmGraphBuilderBase, initializes the zone and assembler."
        },
        {
          "name": "CallRuntime",
          "parameters": [
            "Zone* zone",
            "Runtime::FunctionId f",
            "std::initializer_list<const OpIndex> args",
            "V<Context> context"
          ],
          "return_type": "OpIndex",
          "logic": "Generates a call to a V8 runtime function."
        },
        {
          "name": "GetBuiltinPointerTarget",
          "parameters": [
            "Builtin builtin"
          ],
          "return_type": "OpIndex",
          "logic": "Retrieves the pointer target for a given builtin function."
        },
        {
          "name": "GetTargetForBuiltinCall",
          "parameters": [
            "Builtin builtin",
            "StubCallMode stub_mode"
          ],
          "return_type": "V<WordPtr>",
          "logic": "Gets the target for a builtin call."
        },
        {
          "name": "BuildChangeInt64ToBigInt",
          "parameters": [
            "V<Word64> input",
            "StubCallMode stub_mode"
          ],
          "return_type": "V<BigInt>",
          "logic": "Builds the logic to convert an int64 value to a BigInt."
        },
        {
          "name": "BuildImportedFunctionTargetAndImplicitArg",
          "parameters": [
            "ConstOrV<Word32> func_index",
            "V<WasmTrustedInstanceData> trusted_instance_data"
          ],
          "return_type": "std::pair<V<Word32>, V<HeapObject>>",
          "logic": "Builds the target and implicit argument for an imported function call."
        },
        {
          "name": "BuildFunctionTargetAndImplicitArg",
          "parameters": [
            "V<WasmInternalFunction> internal_function"
          ],
          "return_type": "std::pair<V<Word32>, V<ExposedTrustedObject>>",
          "logic": "Builds the target and implicit argument for an internal function call."
        },
        {
          "name": "RepresentationFor",
          "parameters": [
            "ValueTypeBase type"
          ],
          "return_type": "RegisterRepresentation",
          "logic": "Returns the RegisterRepresentation for the given ValueTypeBase."
        },
        {
          "name": "LoadTrustedDataFromInstanceObject",
          "parameters": [
            "V<HeapObject> instance_object"
          ],
          "return_type": "V<WasmTrustedInstanceData>",
          "logic": "Loads the trusted data from the instance object."
        },
        {
          "name": "CallC",
          "parameters": [
            "const MachineSignature* sig",
            "ExternalReference ref",
            "std::initializer_list<OpIndex> args"
          ],
          "return_type": "OpIndex",
          "logic": "Generates a call to a C function using an ExternalReference."
        },
        {
          "name": "CallC",
          "parameters": [
            "const MachineSignature* sig",
            "OpIndex function",
            "std::initializer_list<OpIndex> args"
          ],
          "return_type": "OpIndex",
          "logic": "Generates a call to a C function using a function OpIndex."
        },
        {
          "name": "CallC",
          "parameters": [
            "const MachineSignature* sig",
            "ExternalReference ref",
            "OpIndex arg"
          ],
          "return_type": "OpIndex",
          "logic": "Generates a call to a C function using an ExternalReference with a single argument."
        },
        {
          "name": "Asm",
          "parameters": [],
          "return_type": "Assembler&",
          "logic": "Returns a reference to the Assembler object."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "BuildTSGraph",
      "parameters": [
        "compiler::turboshaft::PipelineData* data",
        "AccountingAllocator* allocator",
        "CompilationEnv* env",
        "WasmDetectedFeatures* detected",
        "compiler::turboshaft::Graph& graph",
        "const FunctionBody& func_body",
        "const WireBytesStorage* wire_bytes",
        "std::unique_ptr<AssumptionsJournal>* assumptions",
        "ZoneVector<WasmInliningPosition>* inlining_positions",
        "int func_index"
      ],
      "return_type": "void",
      "logic": "Builds the Turboshaft graph for a WebAssembly function."
    },
    {
      "name": "BuildWasmWrapper",
      "parameters": [
        "compiler::turboshaft::PipelineData* data",
        "AccountingAllocator* allocator",
        "compiler::turboshaft::Graph& graph",
        "const wasm::CanonicalSig* sig",
        "WrapperCompilationInfo"
      ],
      "return_type": "void",
      "logic": "Builds a WebAssembly wrapper graph."
    }
  ]
}