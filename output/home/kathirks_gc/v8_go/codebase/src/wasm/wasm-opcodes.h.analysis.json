{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-opcodes.h",
  "imports": [
    "<memory>",
    "src/common/globals.h",
    "src/common/message-template.h",
    "src/wasm/value-type.h",
    "src/wasm/wasm-constants.h"
  ],
  "classes": [
    {
      "name": "WasmOpcodes",
      "properties": [],
      "methods": [
        {
          "name": "OpcodeName",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "const char*",
          "logic": "Returns the name of the given WasmOpcode as a C-style string literal."
        },
        {
          "name": "Signature",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "const FunctionSig*",
          "logic": "Returns the function signature associated with the given WasmOpcode."
        },
        {
          "name": "SignatureForAtomicOp",
          "parameters": [
            "WasmOpcode opcode",
            "bool is_memory64"
          ],
          "return_type": "const FunctionSig*",
          "logic": "Returns the function signature for an atomic operation, based on the opcode and whether it targets memory64."
        },
        {
          "name": "AsmjsSignature",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "const FunctionSig*",
          "logic": "Returns the ASM.js compatible signature of the given WasmOpcode."
        },
        {
          "name": "IsPrefixOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode is a prefix opcode."
        },
        {
          "name": "IsControlOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode is a control opcode."
        },
        {
          "name": "IsExternRefOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode relates to extern references."
        },
        {
          "name": "IsThrowingOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode can throw an exception."
        },
        {
          "name": "IsRelaxedSimdOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode is a relaxed SIMD opcode."
        },
        {
          "name": "IsFP16SimdOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode is a FP16 SIMD opcode."
        },
        {
          "name": "IsMemoryAccessOpcode",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks if the given WasmOpcode accesses memory. Only available in debug builds."
        },
        {
          "name": "IsUnconditionalJump",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks whether the given opcode always jumps, making the instructions after it unreachable."
        },
        {
          "name": "IsBreakable",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "bool",
          "logic": "Checks whether a particular block can be jumped (break)."
        },
        {
          "name": "TrapReasonToMessageId",
          "parameters": [
            "TrapReason"
          ],
          "return_type": "MessageTemplate",
          "logic": "Converts a TrapReason to its corresponding MessageTemplate."
        },
        {
          "name": "MessageIdToTrapReason",
          "parameters": [
            "MessageTemplate message"
          ],
          "return_type": "TrapReason",
          "logic": "Converts a MessageTemplate to its corresponding TrapReason."
        },
        {
          "name": "ExtractPrefix",
          "parameters": [
            "WasmOpcode"
          ],
          "return_type": "uint8_t",
          "logic": "Extracts the prefix byte from a WasmOpcode."
        },
        {
          "name": "TrapReasonMessage",
          "parameters": [
            "TrapReason"
          ],
          "return_type": "const char*",
          "logic": "Returns the message associated with a given TrapReason."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const FunctionSig& function"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for FunctionSig, allowing it to be printed to an output stream."
    },
    {
      "name": "IsJSCompatibleSignature",
      "parameters": [
        "const CanonicalSig* sig"
      ],
      "return_type": "bool",
      "logic": "Checks if the given canonical signature is compatible with JavaScript."
    }
  ]
}