{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/canonical-types.h",
  "imports": [
    "<unordered_map>",
    "src/base/bounds.h",
    "src/base/hashing.h",
    "src/wasm/value-type.h",
    "src/wasm/wasm-module.h"
  ],
  "classes": [
    {
      "name": "CanonicalTypeNamesProvider",
      "properties": [],
      "methods": []
    },
    {
      "name": "TypeCanonicalizer",
      "properties": [
        "canonical_supertypes_",
        "canonical_groups_",
        "canonical_singleton_groups_",
        "canonical_types_",
        "allocator_",
        "zone_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "TypeCanonicalizer",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for the TypeCanonicalizer class."
        },
        {
          "name": "AddRecursiveGroup",
          "parameters": [
            "WasmModule* module",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Registers the last {size} types of {module} as a recursive group and canonicalizes if an identical one is found. Modifies {module->isorecursive_canonical_type_ids}."
        },
        {
          "name": "AddRecursiveSingletonGroup",
          "parameters": [
            "WasmModule* module"
          ],
          "return_type": "void",
          "logic": "Registers the last type in {module} as a recursive group of size 1 and canonicalizes if an identical one is found."
        },
        {
          "name": "AddRecursiveGroup",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "CanonicalTypeIndex",
          "logic": "Adds a module-independent signature as a recursive group and canonicalizes it if an identical one is found. Returns the canonical index of the added signature."
        },
        {
          "name": "LookupFunctionSignature",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "const CanonicalSig*",
          "logic": "Retrieves a function signature from a canonical index."
        },
        {
          "name": "LookupStruct",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "const CanonicalStructType*",
          "logic": "Retrieves a struct type from a canonical index."
        },
        {
          "name": "LookupArray",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "const CanonicalArrayType*",
          "logic": "Retrieves an array type from a canonical index."
        },
        {
          "name": "IsCanonicalSubtype",
          "parameters": [
            "CanonicalTypeIndex sub_index",
            "CanonicalTypeIndex super_index"
          ],
          "return_type": "bool",
          "logic": "Checks if {canonical_sub_index} is a canonical subtype of {canonical_super_index}."
        },
        {
          "name": "IsCanonicalSubtype",
          "parameters": [
            "ModuleTypeIndex sub_index",
            "ModuleTypeIndex super_index",
            "const WasmModule* sub_module",
            "const WasmModule* super_module"
          ],
          "return_type": "bool",
          "logic": "Checks if the type at {sub_index} in {sub_module} is a subtype of the type at {super_index} in {super_module} after canonicalization."
        },
        {
          "name": "EmptyStorageForTesting",
          "parameters": [],
          "return_type": "void",
          "logic": "Deletes recursive groups. Used by fuzzers to avoid accumulating memory, and used by specific tests e.g. for serialization / deserialization."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the canonicalizer."
        },
        {
          "name": "GetCurrentNumberOfTypes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the current number of canonical types stored."
        },
        {
          "name": "PrepareForCanonicalTypeId",
          "parameters": [
            "Isolate* isolate",
            "CanonicalTypeIndex id"
          ],
          "return_type": "static void",
          "logic": "Prepares wasm for the provided canonical type index. This reserves enough space in the canonical rtts and the JSToWasm wrappers on the isolate roots."
        },
        {
          "name": "ClearWasmCanonicalTypesForTesting",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "static void",
          "logic": "Reset the canonical rtts and JSToWasm wrappers on the isolate roots for testing purposes (in production cases canonical type ids are never freed)."
        },
        {
          "name": "IsFunctionSignature",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "bool",
          "logic": "Checks if a canonical index represents a function signature."
        },
        {
          "name": "IsStruct",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "bool",
          "logic": "Checks if a canonical index represents a struct."
        },
        {
          "name": "IsArray",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "bool",
          "logic": "Checks if a canonical index represents an array."
        },
        {
          "name": "IsHeapSubtype",
          "parameters": [
            "CanonicalTypeIndex sub",
            "CanonicalTypeIndex super"
          ],
          "return_type": "bool",
          "logic": "Checks if a heap type is a subtype of another heap type."
        },
        {
          "name": "IsCanonicalSubtype_Locked",
          "parameters": [
            "CanonicalTypeIndex sub_index",
            "CanonicalTypeIndex super_index"
          ],
          "return_type": "bool",
          "logic": "Checks if {canonical_sub_index} is a canonical subtype of {canonical_super_index} with lock."
        },
        {
          "name": "FindIndex_Slow",
          "parameters": [
            "const CanonicalSig* sig"
          ],
          "return_type": "CanonicalTypeIndex",
          "logic": "Find the CanonicalTypeIndex for a given signature by iterating through all known signatures"
        },
        {
          "name": "Contains",
          "parameters": [
            "const CanonicalSig* sig"
          ],
          "return_type": "bool",
          "logic": "Check whether a supposedly-canonicalized function signature does indeed live in this class's storage."
        },
        {
          "name": "AddPredefinedArrayTypes",
          "parameters": [],
          "return_type": "void",
          "logic": "Adds the predefined array types to the canonical type storage."
        },
        {
          "name": "FindCanonicalGroup",
          "parameters": [
            "const CanonicalGroup&"
          ],
          "return_type": "CanonicalTypeIndex",
          "logic": "Finds a canonical group that is equivalent to the specified canonical group."
        },
        {
          "name": "FindCanonicalGroup",
          "parameters": [
            "const CanonicalSingletonGroup&"
          ],
          "return_type": "CanonicalTypeIndex",
          "logic": "Finds a canonical group that is equivalent to the specified canonical singleton group."
        },
        {
          "name": "CanonicalizeTypeDef",
          "parameters": [
            "const WasmModule* module",
            "ModuleTypeIndex module_type_idx",
            "ModuleTypeIndex recgroup_start",
            "CanonicalTypeIndex canonical_recgroup_start"
          ],
          "return_type": "CanonicalType",
          "logic": "Canonicalizes a module-specific type within a recursion group."
        },
        {
          "name": "CheckMaxCanonicalIndex",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks if the maximum canonical index has been reached."
        }
      ]
    },
    {
      "name": "CanonicalType",
      "properties": [
        "function_sig",
        "struct_type",
        "array_type",
        "cont_type",
        "supertype",
        "kind",
        "is_final",
        "is_shared",
        "subtyping_depth"
      ],
      "methods": []
    },
    {
      "name": "RecursionGroupRange",
      "properties": [
        "first",
        "last"
      ],
      "methods": [
        {
          "name": "Contains",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "bool",
          "logic": "Checks if a given index is within the range of the recursion group."
        }
      ]
    },
    {
      "name": "CanonicalHashing",
      "properties": [
        "hasher",
        "recgroup"
      ],
      "methods": [
        {
          "name": "CanonicalHashing",
          "parameters": [
            "RecursionGroupRange recgroup"
          ],
          "return_type": "",
          "logic": "Constructor for the CanonicalHashing struct."
        },
        {
          "name": "Add",
          "parameters": [
            "CanonicalType type"
          ],
          "return_type": "void",
          "logic": "Adds a CanonicalType to the hash."
        },
        {
          "name": "Add",
          "parameters": [
            "CanonicalValueType value_type"
          ],
          "return_type": "void",
          "logic": "Adds a CanonicalValueType to the hash."
        },
        {
          "name": "Add",
          "parameters": [
            "const CanonicalSig& sig"
          ],
          "return_type": "void",
          "logic": "Adds a CanonicalSig to the hash."
        },
        {
          "name": "Add",
          "parameters": [
            "const CanonicalStructType& struct_type"
          ],
          "return_type": "void",
          "logic": "Adds a CanonicalStructType to the hash."
        },
        {
          "name": "Add",
          "parameters": [
            "const CanonicalArrayType& array_type"
          ],
          "return_type": "void",
          "logic": "Adds a CanonicalArrayType to the hash."
        },
        {
          "name": "Add",
          "parameters": [
            "const CanonicalContType& cont_type"
          ],
          "return_type": "void",
          "logic": "Adds a CanonicalContType to the hash."
        },
        {
          "name": "hash",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the calculated hash value."
        }
      ]
    },
    {
      "name": "CanonicalEquality",
      "properties": [
        "recgroup1",
        "recgroup2"
      ],
      "methods": [
        {
          "name": "CanonicalEquality",
          "parameters": [
            "RecursionGroupRange recgroup1",
            "RecursionGroupRange recgroup2"
          ],
          "return_type": "",
          "logic": "Constructor for the CanonicalEquality struct."
        },
        {
          "name": "EqualTypeIndex",
          "parameters": [
            "CanonicalTypeIndex index1",
            "CanonicalTypeIndex index2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalTypeIndex instances are equal, taking into account recursion group ranges."
        },
        {
          "name": "EqualType",
          "parameters": [
            "const CanonicalType& type1",
            "const CanonicalType& type2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalType instances are equal."
        },
        {
          "name": "EqualTypes",
          "parameters": [
            "base::Vector<const CanonicalType> types1",
            "base::Vector<const CanonicalType> types2"
          ],
          "return_type": "bool",
          "logic": "Checks if two vectors of CanonicalType instances are equal."
        },
        {
          "name": "EqualValueType",
          "parameters": [
            "CanonicalValueType type1",
            "CanonicalValueType type2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalValueType instances are equal."
        },
        {
          "name": "EqualSig",
          "parameters": [
            "const CanonicalSig& sig1",
            "const CanonicalSig& sig2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalSig instances are equal."
        },
        {
          "name": "EqualStructType",
          "parameters": [
            "const CanonicalStructType& type1",
            "const CanonicalStructType& type2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalStructType instances are equal."
        },
        {
          "name": "EqualArrayType",
          "parameters": [
            "const CanonicalArrayType& type1",
            "const CanonicalArrayType& type2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalArrayType instances are equal."
        },
        {
          "name": "EqualContType",
          "parameters": [
            "const CanonicalContType& type1",
            "const CanonicalContType& type2"
          ],
          "return_type": "bool",
          "logic": "Checks if two CanonicalContType instances are equal."
        }
      ]
    },
    {
      "name": "CanonicalGroup",
      "properties": [
        "types",
        "first"
      ],
      "methods": [
        {
          "name": "CanonicalGroup",
          "parameters": [
            "Zone* zone",
            "size_t size",
            "CanonicalTypeIndex first"
          ],
          "return_type": "",
          "logic": "Constructor for CanonicalGroup, allocates storage for the types."
        },
        {
          "name": "hash_value",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates the hash value of the group based on its types."
        }
      ]
    },
    {
      "name": "CanonicalSingletonGroup",
      "properties": [
        "type",
        "index"
      ],
      "methods": [
        {
          "name": "hash_value",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates the hash value of the singleton group based on its type."
        }
      ]
    },
    {
      "name": "CanonicalTypeVector",
      "properties": [],
      "methods": [
        {
          "name": "operator[]",
          "parameters": [
            "CanonicalTypeIndex index"
          ],
          "return_type": "const CanonicalType*",
          "logic": "Returns the CanonicalType at the given index."
        },
        {
          "name": "operator[]",
          "parameters": [
            "CanonicalValueType type"
          ],
          "return_type": "const CanonicalType*",
          "logic": "Returns the CanonicalType at the given value type, if the type has a reference index."
        },
        {
          "name": "reserve",
          "parameters": [
            "uint32_t size",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Reserves space in the CanonicalTypeVector for a given size."
        },
        {
          "name": "set",
          "parameters": [
            "CanonicalTypeIndex index",
            "const CanonicalType* type"
          ],
          "return_type": "void",
          "logic": "Sets the CanonicalType at the given index."
        },
        {
          "name": "ClearForTesting",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the CanonicalTypeVector for testing purposes."
        },
        {
          "name": "FindIndex_Slow",
          "parameters": [
            "const CanonicalSig* sig"
          ],
          "return_type": "const CanonicalTypeIndex",
          "logic": "Finds index of function signature. Used for testing purposes and to avoid code duplication."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetTypeCanonicalizer",
      "parameters": [],
      "return_type": "TypeCanonicalizer*",
      "logic": "Returns a reference to the TypeCanonicalizer shared by the entire process."
    }
  ]
}