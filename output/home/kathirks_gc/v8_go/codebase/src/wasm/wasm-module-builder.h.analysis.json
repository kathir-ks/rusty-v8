{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-module-builder.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-module-builder.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"src/base/memory.h\",\n    \"src/base/platform/wrappers.h\",\n    \"src/base/vector.h\",\n    \"src/codegen/signature.h\",\n    \"src/wasm/leb-helper.h\",\n    \"src/wasm/local-decl-encoder.h\",\n    \"src/wasm/value-type.h\",\n    \"src/wasm/wasm-module.h\",\n    \"src/wasm/wasm-opcodes.h\",\n    \"src/wasm/wasm-result.h\",\n    \"src/zone/zone-containers.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"ZoneBuffer\",\n      \"properties\": [\n        \"zone_\",\n        \"buffer_\",\n        \"pos_\",\n        \"end_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ZoneBuffer\",\n          \"parameters\": [\n            \"Zone* zone\",\n            \"size_t initial = kInitialSize\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ZoneBuffer. Allocates a buffer of initial size within the given zone.\"\n        },\n        {\n          \"name\": \"write_u8\",\n          \"parameters\": [\n            \"uint8_t x\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a single byte to the buffer.\"\n        },\n        {\n          \"name\": \"write_u16\",\n          \"parameters\": [\n            \"uint16_t x\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 16-bit unsigned integer to the buffer in little-endian format.\"\n        },\n        {\n          \"name\": \"write_u32\",\n          \"parameters\": [\n            \"uint32_t x\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 32-bit unsigned integer to the buffer in little-endian format.\"\n        },\n        {\n          \"name\": \"write_u64\",\n          \"parameters\": [\n            \"uint64_t x\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 64-bit unsigned integer to the buffer in little-endian format.\"\n        },\n        {\n          \"name\": \"write_u32v\",\n          \"parameters\": [\n            \"uint32_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 32-bit unsigned integer to the buffer in LEB128 variable-length format.\"\n        },\n        {\n          \"name\": \"write_u32v\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 32-bit unsigned integer to the buffer in LEB128 variable-length format, using the index of a ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"write_i32v\",\n          \"parameters\": [\n            \"int32_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 32-bit signed integer to the buffer in LEB128 variable-length format.\"\n        },\n        {\n          \"name\": \"write_u64v\",\n          \"parameters\": [\n            \"uint64_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 64-bit unsigned integer to the buffer in LEB128 variable-length format.\"\n        },\n        {\n          \"name\": \"write_i64v\",\n          \"parameters\": [\n            \"int64_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 64-bit signed integer to the buffer in LEB128 variable-length format.\"\n        },\n        {\n          \"name\": \"write_size\",\n          \"parameters\": [\n            \"size_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a size_t value to the buffer in LEB128 variable-length format (truncated to 32-bit).\"\n        },\n        {\n          \"name\": \"write_f32\",\n          \"parameters\": [\n            \"float val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 32-bit float to the buffer.\"\n        },\n        {\n          \"name\": \"write_f64\",\n          \"parameters\": [\n            \"double val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a 64-bit double to the buffer.\"\n        },\n        {\n          \"name\": \"write\",\n          \"parameters\": [\n            \"const uint8_t* data\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a block of bytes to the buffer.\"\n        },\n        {\n          \"name\": \"write_string\",\n          \"parameters\": [\n            \"base::Vector<const char> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a string to the buffer, preceded by its length.\"\n        },\n        {\n          \"name\": \"reserve_u32v\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Reserves space in the buffer for a padded u32v value and returns the offset of the reserved space.\"\n        },\n        {\n          \"name\": \"patch_u32v\",\n          \"parameters\": [\n            \"size_t offset\",\n            \"uint32_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Patches a previously reserved space in the buffer with a padded u32v value.\"\n        },\n        {\n          \"name\": \"patch_u8\",\n          \"parameters\": [\n            \"size_t offset\",\n            \"uint8_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Patches a single byte at a given offset in the buffer.\"\n        },\n        {\n          \"name\": \"offset\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the current offset (position) within the buffer.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the current size of the buffer (amount of data written).\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns a pointer to the start of the buffer data.\"\n        },\n        {\n          \"name\": \"begin\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns a pointer to the start of the buffer data (alias for data()).\"\n        },\n        {\n          \"name\": \"end\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns a pointer to the end of the currently written data.\"\n        },\n        {\n          \"name\": \"EnsureSpace\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Ensures that the buffer has enough space to write the given number of bytes, reallocating if necessary.\"\n        },\n        {\n          \"name\": \"Truncate\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Truncates the buffer, effectively reducing its size to the specified value.\"\n        },\n        {\n          \"name\": \"pos_ptr\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t**\",\n          \"logic\": \"Returns a pointer to the internal position pointer (used by LEBHelper functions).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmFunctionBuilder\",\n      \"properties\": [\n        \"builder_\",\n        \"locals_\",\n        \"signature_index_\",\n        \"func_index_\",\n        \"body_\",\n        \"name_\",\n        \"i32_temps_\",\n        \"i64_temps_\",\n        \"f32_temps_\",\n        \"f64_temps_\",\n        \"direct_calls_\",\n        \"asm_offsets_\",\n        \"last_asm_byte_offset_\",\n        \"last_asm_source_position_\",\n        \"asm_func_start_source_position_\",\n        \"hint_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SetSignature\",\n          \"parameters\": [\n            \"const FunctionSig* sig\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the signature of the function from a FunctionSig object.\"\n        },\n        {\n          \"name\": \"SetSignature\",\n          \"parameters\": [\n            \"ModuleTypeIndex sig_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the signature of the function from a ModuleTypeIndex object.\"\n        },\n        {\n          \"name\": \"AddLocal\",\n          \"parameters\": [\n            \"ValueType type\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a local variable of the given type to the function.\"\n        },\n        {\n          \"name\": \"EmitByte\",\n          \"parameters\": [\n            \"uint8_t b\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a single byte of code into the function body.\"\n        },\n        {\n          \"name\": \"EmitI32V\",\n          \"parameters\": [\n            \"int32_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a 32-bit signed integer in LEB128 variable-length format into the function body.\"\n        },\n        {\n          \"name\": \"EmitI32V\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a 32-bit signed integer in LEB128 variable-length format into the function body using ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"EmitU32V\",\n          \"parameters\": [\n            \"uint32_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a 32-bit unsigned integer in LEB128 variable-length format into the function body.\"\n        },\n        {\n          \"name\": \"EmitU32V\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a 32-bit unsigned integer in LEB128 variable-length format into the function body using ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"EmitU64V\",\n          \"parameters\": [\n            \"uint64_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a 64-bit unsigned integer in LEB128 variable-length format into the function body.\"\n        },\n        {\n          \"name\": \"EmitCode\",\n          \"parameters\": [\n            \"const uint8_t* code\",\n            \"uint32_t code_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a block of raw code into the function body.\"\n        },\n        {\n          \"name\": \"EmitCode\",\n          \"parameters\": [\n            \"std::initializer_list<const uint8_t> code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a block of raw code (from initializer list) into the function body.\"\n        },\n        {\n          \"name\": \"Emit\",\n          \"parameters\": [\n            \"WasmOpcode opcode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode into the function body.\"\n        },\n        {\n          \"name\": \"EmitWithPrefix\",\n          \"parameters\": [\n            \"WasmOpcode opcode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode with a prefix into the function body.\"\n        },\n        {\n          \"name\": \"EmitGetLocal\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the opcode to get a local variable.\"\n        },\n        {\n          \"name\": \"EmitSetLocal\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the opcode to set a local variable.\"\n        },\n        {\n          \"name\": \"EmitTeeLocal\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the opcode to tee a local variable.\"\n        },\n        {\n          \"name\": \"EmitI32Const\",\n          \"parameters\": [\n            \"int32_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the i32.const instruction with the given value.\"\n        },\n        {\n          \"name\": \"EmitI64Const\",\n          \"parameters\": [\n            \"int64_t val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the i64.const instruction with the given value.\"\n        },\n        {\n          \"name\": \"EmitF32Const\",\n          \"parameters\": [\n            \"float val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the f32.const instruction with the given value.\"\n        },\n        {\n          \"name\": \"EmitF64Const\",\n          \"parameters\": [\n            \"double val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the f64.const instruction with the given value.\"\n        },\n                {\n          \"name\": \"EmitS128Const\",\n          \"parameters\": [\n            \"Simd128 val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits the s128.const instruction with the given value.\"\n        },\n        {\n          \"name\": \"EmitWithU8\",\n          \"parameters\": [\n            \"WasmOpcode opcode\",\n            \"const uint8_t immediate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode with a u8 immediate value.\"\n        },\n        {\n          \"name\": \"EmitWithU8U8\",\n          \"parameters\": [\n            \"WasmOpcode opcode\",\n            \"const uint8_t imm1\",\n            \"const uint8_t imm2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode with two u8 immediate values.\"\n        },\n        {\n          \"name\": \"EmitWithI32V\",\n          \"parameters\": [\n            \"WasmOpcode opcode\",\n            \"int32_t immediate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode with an i32v immediate value.\"\n        },\n        {\n          \"name\": \"EmitWithU32V\",\n          \"parameters\": [\n            \"WasmOpcode opcode\",\n            \"uint32_t immediate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode with a u32v immediate value.\"\n        },\n        {\n          \"name\": \"EmitWithU32V\",\n          \"parameters\": [\n            \"WasmOpcode opcode\",\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a WebAssembly opcode with a u32v immediate value, using a ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"EmitValueType\",\n          \"parameters\": [\n            \"ValueType type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a value type.\"\n        },\n        {\n          \"name\": \"EmitDirectCallIndex\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a direct call index.\"\n        },\n        {\n          \"name\": \"EmitFromInitializerExpression\",\n          \"parameters\": [\n            \"const WasmInitExpr& init_expr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code from an initializer expression.\"\n        },\n        {\n          \"name\": \"SetName\",\n          \"parameters\": [\n            \"base::Vector<const char> name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the name of the function.\"\n        },\n        {\n          \"name\": \"AddAsmWasmOffset\",\n          \"parameters\": [\n            \"size_t call_position\",\n            \"size_t to_number_position\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds an offset for asm.js to WebAssembly mapping.\"\n        },\n        {\n          \"name\": \"SetAsmFunctionStartPosition\",\n          \"parameters\": [\n            \"size_t function_position\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the starting position of the function in asm.js source.\"\n        },\n        {\n          \"name\": \"SetCompilationHint\",\n          \"parameters\": [\n            \"WasmCompilationHintStrategy strategy\",\n            \"WasmCompilationHintTier baseline\",\n            \"WasmCompilationHintTier top_tier\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the compilation hint for the function.\"\n        },\n        {\n          \"name\": \"GetPosition\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the current position (size) of the function body.\"\n        },\n        {\n          \"name\": \"FixupByte\",\n          \"parameters\": [\n            \"size_t position\",\n            \"uint8_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fixes up a byte at a given position in the function body.\"\n        },\n        {\n          \"name\": \"DeleteCodeAfter\",\n          \"parameters\": [\n            \"size_t position\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes code in the function body after the specified position.\"\n        },\n        {\n          \"name\": \"WriteSignature\",\n          \"parameters\": [\n            \"ZoneBuffer* buffer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes the function signature to the given buffer.\"\n        },\n        {\n          \"name\": \"WriteBody\",\n          \"parameters\": [\n            \"ZoneBuffer* buffer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes the function body to the given buffer.\"\n        },\n        {\n          \"name\": \"WriteAsmWasmOffsetTable\",\n          \"parameters\": [\n            \"ZoneBuffer* buffer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes the asm.js offset table to the given buffer.\"\n        },\n        {\n          \"name\": \"builder\",\n          \"parameters\": [],\n          \"return_type\": \"WasmModuleBuilder*\",\n          \"logic\": \"Returns the associated WasmModuleBuilder.\"\n        },\n        {\n          \"name\": \"func_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the index of this function in the module.\"\n        },\n        {\n          \"name\": \"sig_index\",\n          \"parameters\": [],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Returns the signature index of this function.\"\n        },\n        {\n          \"name\": \"signature\",\n          \"parameters\": [],\n          \"return_type\": \"const FunctionSig*\",\n          \"logic\": \"Returns the signature of the function.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmModuleBuilder\",\n      \"properties\": [\n        \"zone_\",\n        \"types_\",\n        \"function_imports_\",\n        \"global_imports_\",\n        \"exports_\",\n        \"functions_\",\n        \"tables_\",\n        \"memories_\",\n        \"data_segments_\",\n        \"element_segments_\",\n        \"globals_\",\n        \"tags_\",\n        \"signature_map_\",\n        \"current_recursive_group_start_\",\n        \"recursive_groups_\",\n        \"start_function_index_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmModuleBuilder\",\n          \"parameters\": [\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"\",\n          \"logic\": \"Constructor for the WasmModuleBuilder, taking a Zone allocator.\"\n        },\n        {\n          \"name\": \"AddImport\",\n          \"parameters\": [\n            \"base::Vector<const char> name\",\n            \"const FunctionSig* sig\",\n            \"base::Vector<const char> module = {}\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a function import to the module.\"\n        },\n        {\n          \"name\": \"AddFunction\",\n          \"parameters\": [\n            \"const FunctionSig* sig = nullptr\"\n          ],\n          \"return_type\": \"WasmFunctionBuilder*\",\n          \"logic\": \"Adds a function to the module with the given signature.\"\n        },\n        {\n           \"name\": \"AddFunction\",\n           \"parameters\": [\n             \"ModuleTypeIndex sig_index\"\n           ],\n           \"return_type\": \"WasmFunctionBuilder*\",\n           \"logic\": \"Adds a function to the module with the given signature index.\"\n         },\n        {\n          \"name\": \"AddGlobal\",\n          \"parameters\": [\n            \"ValueType type\",\n            \"bool mutability\",\n            \"WasmInitExpr init\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a global variable to the module with the given type, mutability, and initializer expression.\"\n        },\n        {\n          \"name\": \"AddGlobalImport\",\n          \"parameters\": [\n            \"base::Vector<const char> name\",\n            \"ValueType type\",\n            \"bool mutability\",\n            \"base::Vector<const char> module = {}\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a global variable import to the module.\"\n        },\n        {\n          \"name\": \"AddDataSegment\",\n          \"parameters\": [\n            \"const uint8_t* data\",\n            \"uint32_t size\",\n            \"uint32_t dest\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds an active data segment to the module.\"\n        },\n        {\n          \"name\": \"AddPassiveDataSegment\",\n          \"parameters\": [\n            \"const uint8_t* data\",\n            \"uint32_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a passive data segment to the module.\"\n        },\n        {\n          \"name\": \"AddElementSegment\",\n          \"parameters\": [\n            \"WasmElemSegment segment\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds an element segment to the module.\"\n        },\n        {\n          \"name\": \"SetIndirectFunction\",\n          \"parameters\": [\n            \"uint32_t table_index\",\n            \"uint32_t index_in_table\",\n            \"uint32_t direct_function_index\",\n            \"WasmElemSegment::FunctionIndexingMode indexing_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an indirect function in the element segment.\"\n        },\n        {\n          \"name\": \"IncreaseTableMinSize\",\n          \"parameters\": [\n            \"uint32_t table_index\",\n            \"uint32_t count\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Increases the minimum size of the table at the given index.\"\n        },\n        {\n          \"name\": \"AddSignature\",\n          \"parameters\": [\n            \"const FunctionSig* sig\",\n            \"bool is_final\",\n            \"ModuleTypeIndex supertype = kNoSuperType\"\n          ],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Adds a function signature to the module, deduplicating if possible.\"\n        },\n        {\n          \"name\": \"ForceAddSignature\",\n          \"parameters\": [\n            \"const FunctionSig* sig\",\n            \"bool is_final\",\n            \"ModuleTypeIndex supertype = kNoSuperType\"\n          ],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Adds a function signature to the module, without deduplication.\"\n        },\n        {\n          \"name\": \"AddTag\",\n          \"parameters\": [\n            \"const FunctionSig* type\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a tag (exception type) to the module.\"\n        },\n        {\n          \"name\": \"AddStructType\",\n          \"parameters\": [\n            \"StructType* type\",\n            \"bool is_final\",\n            \"ModuleTypeIndex supertype = kNoSuperType\"\n          ],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Adds a struct type to the module.\"\n        },\n        {\n          \"name\": \"AddArrayType\",\n          \"parameters\": [\n            \"ArrayType* type\",\n            \"bool is_final\",\n            \"ModuleTypeIndex supertype = kNoSuperType\"\n          ],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Adds an array type to the module.\"\n        },\n        {\n          \"name\": \"AddTable\",\n          \"parameters\": [\n            \"ValueType type\",\n            \"uint32_t min_size\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a table to the module.\"\n        },\n        {\n          \"name\": \"AddTable\",\n          \"parameters\": [\n            \"ValueType type\",\n            \"uint32_t min_size\",\n            \"uint32_t max_size\",\n            \"AddressType address_type = AddressType::kI32\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a table with a maximum size to the module.\"\n        },\n        {\n          \"name\": \"AddTable\",\n          \"parameters\": [\n            \"ValueType type\",\n            \"uint32_t min_size\",\n            \"uint32_t max_size\",\n            \"WasmInitExpr init\",\n            \"AddressType address_type = AddressType::kI32\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a table with a maximum size and initializer expression to the module.\"\n        },\n        {\n          \"name\": \"AddMemory\",\n          \"parameters\": [\n            \"uint32_t min_pages\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a memory to the module.\"\n        },\n        {\n          \"name\": \"AddMemory\",\n          \"parameters\": [\n            \"uint32_t min_pages\",\n            \"uint32_t max_pages\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a memory with maximum pages to the module.\"\n        },\n        {\n          \"name\": \"AddMemory64\",\n          \"parameters\": [\n            \"uint32_t min_pages\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a 64-bit memory to the module.\"\n        },\n        {\n          \"name\": \"AddMemory64\",\n          \"parameters\": [\n            \"uint32_t min_pages\",\n            \"uint32_t max_pages\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds a 64-bit memory with maximum pages to the module.\"\n        },\n        {\n          \"name\": \"MarkStartFunction\",\n          \"parameters\": [\n            \"WasmFunctionBuilder* builder\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Marks a function as the start function of the module.\"\n        },\n        {\n          \"name\": \"AddExport\",\n          \"parameters\": [\n            \"base::Vector<const char> name\",\n            \"ImportExportKindCode kind\",\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds an export to the module.\"\n        },\n        {\n          \"name\": \"AddExport\",\n          \"parameters\": [\n            \"base::Vector<const char> name\",\n            \"WasmFunctionBuilder* builder\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a function export to the module.\"\n        },\n        {\n          \"name\": \"AddExportedGlobal\",\n          \"parameters\": [\n            \"ValueType type\",\n            \"bool mutability\",\n            \"WasmInitExpr init\",\n            \"base::Vector<const char> name\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Adds an exported global to the module.\"\n        },\n        {\n          \"name\": \"ExportImportedFunction\",\n          \"parameters\": [\n            \"base::Vector<const char> name\",\n            \"int import_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Exports an imported function.\"\n        },\n        {\n          \"name\": \"StartRecursiveTypeGroup\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts a recursive type group.\"\n        },\n        {\n          \"name\": \"EndRecursiveTypeGroup\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Ends a recursive type group.\"\n        },\n        {\n          \"name\": \"AddRecursiveTypeGroup\",\n          \"parameters\": [\n            \"uint32_t start\",\n            \"uint32_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds recursive type information to the module.\"\n        },\n        {\n          \"name\": \"WriteTo\",\n          \"parameters\": [\n            \"ZoneBuffer* buffer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes the module data to the given buffer.\"\n        },\n        {\n          \"name\": \"WriteAsmJsOffsetTable\",\n          \"parameters\": [\n            \"ZoneBuffer* buffer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes the asm.js offset table to the given buffer.\"\n        },\n        {\n          \"name\": \"zone\",\n          \"parameters\": [],\n          \"return_type\": \"Zone*\",\n          \"logic\": \"Returns the zone allocator used by this module builder.\"\n        },\n        {\n          \"name\": \"GetTableType\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns the value type of a table.\"\n        },\n        {\n          \"name\": \"IsSignature\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a type definition at an index is a function signature.\"\n        },\n        {\n          \"name\": \"IsSignature\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a type definition at ModuleTypeIndex is a function signature.\"\n        },\n        {\n          \"name\": \"GetSignature\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"const FunctionSig*\",\n          \"logic\": \"Gets the FunctionSig object at an index.\"\n        },\n        {\n          \"name\": \"GetSignature\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"const FunctionSig*\",\n          \"logic\": \"Gets the FunctionSig object at a ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"IsStructType\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a type definition at an index is a struct.\"\n        },\n        {\n          \"name\": \"IsStructType\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a type definition at ModuleTypeIndex is a struct.\"\n        },\n        {\n          \"name\": \"GetStructType\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"const StructType*\",\n          \"logic\": \"Gets the StructType object at an index.\"\n        },\n        {\n          \"name\": \"GetStructType\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\"\n          ],\n          \"return_type\": \"const StructType*\",\n          \""
}