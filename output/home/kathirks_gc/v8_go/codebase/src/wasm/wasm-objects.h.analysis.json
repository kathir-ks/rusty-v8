{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-objects.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-objects.h\",\n  \"imports\": [\n    \"include/v8-wasm.h\",\n    \"src/base/bit-field.h\",\n    \"src/debug/interface-types.h\",\n    \"src/heap/heap.h\",\n    \"src/objects/backing-store.h\",\n    \"src/objects/casting.h\",\n    \"src/objects/foreign.h\",\n    \"src/objects/js-function.h\",\n    \"src/objects/js-objects.h\",\n    \"src/objects/objects-body-descriptors.h\",\n    \"src/objects/objects.h\",\n    \"src/objects/struct.h\",\n    \"src/objects/trusted-object.h\",\n    \"src/wasm/module-instantiate.h\",\n    \"src/wasm/stacks.h\",\n    \"src/wasm/struct-types.h\",\n    \"src/wasm/value-type.h\",\n    \"src/wasm/wasm-code-manager.h\",\n    \"src/wasm/wasm-module.h\",\n    \"src/objects/object-macros.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"FunctionTargetAndImplicitArg\",\n      \"properties\": [\n        \"implicit_arg_\",\n        \"call_target_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FunctionTargetAndImplicitArg\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTrustedInstanceData> target_instance_data\",\n            \"int target_func_index\"\n          ],\n          \"return_type\": \"FunctionTargetAndImplicitArg\",\n          \"logic\": \"Constructor that initializes the implicit_arg_ and call_target_ based on target_instance_data and target_func_index.\"\n        },\n        {\n          \"name\": \"implicit_arg\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<TrustedObject>\",\n          \"logic\": \"Returns the implicit_arg_.\"\n        },\n        {\n          \"name\": \"call_target\",\n          \"parameters\": [],\n          \"return_type\": \"WasmCodePointer\",\n          \"logic\": \"Returns the call_target_.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ImportedFunctionEntry\",\n      \"properties\": [\n        \"instance_data_\",\n        \"index_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ImportedFunctionEntry\",\n          \"parameters\": [\n            \"DirectHandle<WasmTrustedInstanceData>\",\n            \"int index\"\n          ],\n          \"return_type\": \"ImportedFunctionEntry\",\n          \"logic\": \"Constructor that initializes instance_data_ and index_.\"\n        },\n        {\n          \"name\": \"SetGenericWasmToJs\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<JSReceiver> callable\",\n            \"wasm::Suspend suspend\",\n            \"const wasm::CanonicalSig* sig\",\n            \"wasm::CanonicalTypeIndex sig_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the entry as a Wasm to JS call with the generic wrapper.\"\n        },\n        {\n          \"name\": \"SetCompiledWasmToJs\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<JSReceiver> callable\",\n            \"wasm::WasmCode* wasm_to_js_wrapper\",\n            \"wasm::Suspend suspend\",\n            \"const wasm::CanonicalSig* sig\",\n            \"wasm::CanonicalTypeIndex sig_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the entry as a Wasm to JS call with a precompiled wrapper.\"\n        },\n        {\n          \"name\": \"SetWasmToWasm\",\n          \"parameters\": [\n            \"Tagged<WasmTrustedInstanceData> target_instance_object\",\n            \"WasmCodePointer call_target\",\n            \"wasm::CanonicalTypeIndex sig_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the entry as a Wasm to Wasm call.\"\n        },\n        {\n          \"name\": \"callable\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<JSReceiver>\",\n          \"logic\": \"Returns callable.\"\n        },\n        {\n          \"name\": \"maybe_callable\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Returns maybe_callable.\"\n        },\n        {\n          \"name\": \"implicit_arg\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Returns implicit_arg.\"\n        },\n        {\n          \"name\": \"target\",\n          \"parameters\": [],\n          \"return_type\": \"WasmCodePointer\",\n          \"logic\": \"Returns target.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmModuleObject\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"native_module\",\n          \"parameters\": [],\n          \"return_type\": \"wasm::NativeModule*\",\n          \"logic\": \"Returns the native module associated with the object.\"\n        },\n        {\n          \"name\": \"shared_native_module\",\n          \"parameters\": [],\n          \"return_type\": \"const std::shared_ptr<wasm::NativeModule>&\",\n          \"logic\": \"Returns the shared pointer to the native module.\"\n        },\n        {\n          \"name\": \"module\",\n          \"parameters\": [],\n          \"return_type\": \"const wasm::WasmModule*\",\n          \"logic\": \"Returns the WebAssembly module associated with the object.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"std::shared_ptr<wasm::NativeModule> native_module\",\n            \"DirectHandle<Script> script\"\n          ],\n          \"return_type\": \"DirectHandle<WasmModuleObject>\",\n          \"logic\": \"Creates a new WasmModuleObject for an existing NativeModule.\"\n        },\n        {\n          \"name\": \"is_asm_js\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the module was generated from asm.js source.\"\n        },\n        {\n          \"name\": \"GetModuleNameOrNull\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<WasmModuleObject>\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<String>\",\n          \"logic\": \"Gets the module name, returns null handle if not set.\"\n        },\n        {\n          \"name\": \"GetFunctionNameOrNull\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<WasmModuleObject>\",\n            \"uint32_t func_index\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<String>\",\n          \"logic\": \"Gets the function name, returns null handle if unnamed or invalid UTF-8.\"\n        },\n        {\n          \"name\": \"GetRawFunctionName\",\n          \"parameters\": [\n            \"int func_index\"\n          ],\n          \"return_type\": \"base::Vector<const uint8_t>\",\n          \"logic\": \"Gets the raw bytes of the function name, for debugging or frame printing.\"\n        },\n        {\n          \"name\": \"ExtractUtf8StringFromModuleBytes\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<WasmModuleObject>\",\n            \"wasm::WireBytesRef\",\n            \"InternalizeString\"\n          ],\n          \"return_type\": \"DirectHandle<String>\",\n          \"logic\": \"Extracts a portion of the wire bytes as UTF-8 string.\"\n        },\n        {\n          \"name\": \"ExtractUtf8StringFromModuleBytes\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"base::Vector<const uint8_t> wire_byte\",\n            \"wasm::WireBytesRef\",\n            \"InternalizeString\"\n          ],\n          \"return_type\": \"DirectHandle<String>\",\n          \"logic\": \"Extracts a portion of the wire bytes as UTF-8 string.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmTableObject\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"type\",\n          \"parameters\": [\n            \"const wasm::WasmModule* module\"\n          ],\n          \"return_type\": \"wasm::ValueType\",\n          \"logic\": \"Returns the element type of the table based on the module.\"\n        },\n        {\n          \"name\": \"canonical_type\",\n          \"parameters\": [\n            \"const wasm::WasmModule* module\"\n          ],\n          \"return_type\": \"wasm::CanonicalValueType\",\n          \"logic\": \"Returns the canonical type of the table based on the module.\"\n        },\n        {\n          \"name\": \"unsafe_type\",\n          \"parameters\": [],\n          \"return_type\": \"wasm::ValueType\",\n          \"logic\": \"Returns the type of the table stored on in-sandbox object, might be corrupted.\"\n        },\n        {\n          \"name\": \"Grow\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"uint32_t count\",\n            \"DirectHandle<Object> init_value\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Grows the table by 'count' elements, initializing them with 'init_value'.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTrustedInstanceData> trusted_data\",\n            \"wasm::ValueType type\",\n            \"wasm::CanonicalValueType canonical_type\",\n            \"uint32_t initial\",\n            \"bool has_maximum\",\n            \"uint64_t maximum\",\n            \"DirectHandle<Object> initial_value\",\n            \"wasm::AddressType address_type\",\n            \"DirectHandle<WasmDispatchTable>* out_dispatch_table\"\n          ],\n          \"return_type\": \"DirectHandle<WasmTableObject>\",\n          \"logic\": \"Creates a new WebAssembly.Table object.\"\n        },\n        {\n          \"name\": \"is_in_bounds\",\n          \"parameters\": [\n            \"uint32_t entry_index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given index is within the bounds of the table.\"\n        },\n        {\n          \"name\": \"is_table64\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the underlying table data is using 64bit address.\"\n        },\n        {\n          \"name\": \"maximum_length_u64\",\n          \"parameters\": [],\n          \"return_type\": \"std::optional<uint64_t>\",\n          \"logic\": \"Get the declared maximum as uint64_t or nullopt if no maximum was declared.\"\n        },\n        {\n          \"name\": \"JSToWasmElement\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"DirectHandle<Object> entry\",\n            \"const char** error_message\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<Object>\",\n          \"logic\": \"Thin wrapper around {JsToWasmObject} to convert JS Object to Wasm representation.\"\n        },\n        {\n          \"name\": \"Set\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"uint32_t index\",\n            \"DirectHandle<Object> entry\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the element at the given index in the table.\"\n        },\n        {\n          \"name\": \"Get\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Gets the element at the given index in the table.\"\n        },\n        {\n          \"name\": \"Fill\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"uint32_t start\",\n            \"DirectHandle<Object> entry\",\n            \"uint32_t count\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills a range of elements in the table with the given entry.\"\n        },\n        {\n          \"name\": \"UpdateDispatchTable\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"int entry_index\",\n            \"const wasm::WasmFunction* func\",\n            \"DirectHandle<WasmTrustedInstanceData> target_instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates dispatch table with given function and instance data.\"\n        },\n        {\n          \"name\": \"UpdateDispatchTable\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"int entry_index\",\n            \"DirectHandle<WasmJSFunction> function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates dispatch table with given JSFunction.\"\n        },\n        {\n          \"name\": \"UpdateDispatchTable\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"int entry_index\",\n            \"DirectHandle<WasmCapiFunction> capi_function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates dispatch table with given CapiFunction.\"\n        },\n        {\n          \"name\": \"ClearDispatchTable\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the dispatch table at the given index.\"\n        },\n        {\n          \"name\": \"SetFunctionTablePlaceholder\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"int entry_index\",\n            \"DirectHandle<WasmTrustedInstanceData> trusted_instance_data\",\n            \"int func_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a placeholder in the function table, for later update.\"\n        },\n        {\n          \"name\": \"GetFunctionTableEntry\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTableObject> table\",\n            \"int entry_index\",\n            \"bool* is_valid\",\n            \"bool* is_null\",\n            \"MaybeDirectHandle<WasmTrustedInstanceData>* instance_data\",\n            \"int* function_index\",\n            \"MaybeDirectHandle<WasmJSFunction>* maybe_js_function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reads content of function table entry, and returns it through output parameters.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmMemoryMapDescriptor\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"NewFromAnonymous\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<WasmMemoryMapDescriptor>\",\n          \"logic\": \"Creates a new descriptor for an anonymous memory map.\"\n        },\n        {\n          \"name\": \"NewFromFileDescriptor\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"v8::WasmMemoryMapDescriptor::WasmFileDescriptor file_descriptor\"\n          ],\n          \"return_type\": \"DirectHandle<WasmMemoryMapDescriptor>\",\n          \"logic\": \"Creates a new descriptor backed by a file descriptor.\"\n        },\n        {\n          \"name\": \"MapDescriptor\",\n          \"parameters\": [\n            \"DirectHandle<WasmMemoryObject> memory\",\n            \"size_t offset\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Maps memory descriptor into WebAssembly.Memory.\"\n        },\n        {\n          \"name\": \"UnmapDescriptor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Unmaps descriptor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmMemoryObject\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"UseInInstance\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmMemoryObject> memory\",\n            \"DirectHandle<WasmTrustedInstanceData> trusted_instance_data\",\n            \"DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data\",\n            \"int memory_index_in_instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds memory to the instance.\"\n        },\n        {\n          \"name\": \"has_maximum_pages\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if has maximum pages.\"\n        },\n        {\n          \"name\": \"is_memory64\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the memory is 64-bit addressable.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<JSArrayBuffer> buffer\",\n            \"int maximum\",\n            \"wasm::AddressType address_type\"\n          ],\n          \"return_type\": \"DirectHandle<WasmMemoryObject>\",\n          \"logic\": \"Creates a new WasmMemoryObject from a given buffer.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int initial\",\n            \"int maximum\",\n            \"SharedFlag shared\",\n            \"wasm::AddressType address_type\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<WasmMemoryObject>\",\n          \"logic\": \"Creates new WasmMemoryObject from initial and maximum size.\"\n        },\n        {\n          \"name\": \"SetNewBuffer\",\n          \"parameters\": [\n            \"Tagged<JSArrayBuffer> new_buffer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Assigns new buffer to memory.\"\n        },\n        {\n          \"name\": \"Grow\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<WasmMemoryObject>\",\n            \"uint32_t pages\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Grows memory by number of pages.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmGlobalObject\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTrustedInstanceData> instance_object\",\n            \"MaybeDirectHandle<JSArrayBuffer> maybe_untagged_buffer\",\n            \"MaybeDirectHandle<FixedArray> maybe_tagged_buffer\",\n            \"wasm::ValueType type\",\n            \"int32_t offset\",\n            \"bool is_mutable\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<WasmGlobalObject>\",\n          \"logic\": \"Creates new WasmGlobalObject.\"\n        },\n        {\n          \"name\": \"type_size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns type size.\"\n        },\n        {\n          \"name\": \"GetI32\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Gets the value of I32 global.\"\n        },\n        {\n          \"name\": \"GetI64\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Gets the value of I64 global.\"\n        },\n        {\n          \"name\": \"GetF32\",\n          \"parameters\": [],\n          \"return_type\": \"float\",\n          \"logic\": \"Gets the value of F32 global.\"\n        },\n        {\n          \"name\": \"GetF64\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Gets the value of F64 global.\"\n        },\n        {\n          \"name\": \"GetS128RawBytes\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Gets the raw bytes of S128 global.\"\n        },\n        {\n          \"name\": \"GetRef\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Gets the value of ref global.\"\n        },\n        {\n          \"name\": \"SetI32\",\n          \"parameters\": [\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of I32 global.\"\n        },\n        {\n          \"name\": \"SetI64\",\n          \"parameters\": [\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of I64 global.\"\n        },\n        {\n          \"name\": \"SetF32\",\n          \"parameters\": [\n            \"float value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of F32 global.\"\n        },\n        {\n          \"name\": \"SetF64\",\n          \"parameters\": [\n            \"double value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of F64 global.\"\n        },\n        {\n          \"name\": \"SetRef\",\n          \"parameters\": [\n            \"DirectHandle<Object> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of reference global.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmTrustedInstanceData\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"clear_padding\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clear uninitialized padding space to make snapshot content deterministic.\"\n        },\n        {\n          \"name\": \"memory_object\",\n          \"parameters\": [\n            \"int memory_index\"\n          ],\n          \"return_type\": \"Tagged<WasmMemoryObject>\",\n          \"logic\": \"Returns memory object.\"\n        },\n        {\n          \"name\": \"memory_base\",\n          \"parameters\": [\n            \"int memory_index\"\n          ],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns memory base.\"\n        },\n        {\n          \"name\": \"memory_size\",\n          \"parameters\": [\n            \"int memory_index\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns memory size.\"\n        },\n        {\n          \"name\": \"native_module\",\n          \"parameters\": [],\n          \"return_type\": \"wasm::NativeModule*\",\n          \"logic\": \"Returns native module.\"\n        },\n        {\n          \"name\": \"module_object\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<WasmModuleObject>\",\n          \"logic\": \"Returns module object.\"\n        },\n        {\n          \"name\": \"module\",\n          \"parameters\": [],\n          \"return_type\": \"const wasm::WasmModule*\",\n          \"logic\": \"Returns module.\"\n        },\n        {\n          \"name\": \"SetRawMemory\",\n          \"parameters\": [\n            \"int memory_index\",\n            \"uint8_t* mem_start\",\n            \"size_t mem_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the raw memory data (base and size).\"\n        },\n        {\n          \"name\": \"GetOrCreateInterpreterObject\",\n          \"parameters\": [\n            \"DirectHandle<WasmInstanceObject>\"\n          ],\n          \"return_type\": \"DirectHandle<Tuple2>\",\n          \"logic\": \"Gets or creates the interpreter object associated with the given instance object.\"\n        },\n        {\n          \"name\": \"GetInterpreterObject\",\n          \"parameters\": [\n            \"DirectHandle<WasmInstanceObject>\"\n          ],\n          \"return_type\": \"DirectHandle<Tuple2>\",\n          \"logic\": \"Gets the interpreter object associated with the given instance object, no creation.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"DirectHandle<WasmModuleObject>\",\n            \"bool shared\"\n          ],\n          \"return_type\": \"DirectHandle<WasmTrustedInstanceData>\",\n          \"logic\": \"Creates new WasmTrustedInstanceData.\"\n        },\n        {\n          \"name\": \"GetCallTarget\",\n          \"parameters\": [\n            \"uint32_t func_index\"\n          ],\n          \"return_type\": \"WasmCodePointer\",\n          \"logic\": \"Gets the call target for the given function index.\"\n        },\n        {\n          \"name\": \"dispatch_table\",\n          \"parameters\": [\n            \"uint32_t table_index\"\n          ],\n          \"return_type\": \"Tagged<WasmDispatchTable>\",\n          \"logic\": \"Returns the dispatch table at the given index.\"\n        },\n        {\n          \"name\": \"has_dispatch_table\",\n          \"parameters\": [\n            \"uint32_t table_index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if has a dispatch table at the given index.\"\n        },\n        {\n          \"name\": \"CopyTableEntries\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTrustedInstanceData> trusted_instance_data\",\n            \"uint32_t table_dst_index\",\n            \"uint32_t table_src_index\",\n            \"uint32_t dst\",\n            \"uint32_t src\",\n            \"uint32_t count\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Copies table entries.\"\n        },\n        {\n          \"name\": \"InitTableEntries\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTrustedInstanceData> trusted_instance_data\",\n            \"DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data\",\n            \"uint32_t table_index\",\n            \"uint32_t segment_index\",\n            \"uint32_t dst\",\n            \"uint32_t src\",\n            \"uint32_t count\"\n          ],\n          \"return_type\": \"std::optional<MessageTemplate>\",\n          \"logic\": \"Loads a range of elements from element segment into a table.\"\n        },\n        {\n          \"name\": \"try_get_func_ref\",\n          \"parameters\": [\n            \"int index\",\n            \"Tagged<WasmFuncRef>* result\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Read a WasmFuncRef from the func_refs FixedArray.\"\n        },\n        {\n          \"name\": \"GetOrCreateFuncRef\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmTrustedInstanceData> trusted_instance_data\",\n            \"int function_index\"\n          ],\n          \"return_type\": \"DirectHandle<WasmFuncRef>\",\n          \"logic\": \"Acquires the {WasmFuncRef} for a given {function_index} from the cache of the given {trusted_instance_data}, or creates a new {WasmInternalFunction} and {WasmFuncRef} if it does not exist yet.\"\n        },\n        {\n          \"name\": \"GetGlobalStorage\",\n          \"parameters\": [\n            \"const wasm::WasmGlobal&\"\n          ],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Get a raw pointer to the location where the given global is stored.\"\n        },\n        {\n          \"name\": \"GetGlobalBufferAndIndex\",\n          \"parameters\": [\n            \"const wasm::WasmGlobal&\"\n          ],\n          \"return_type\": \"std::pair<Tagged<FixedArray>, uint32_t>\",\n          \"logic\": \"Get the FixedArray and the index in that FixedArray for the given global, which must be a reference type.\"\n        },\n        {\n          \"name\": \"GetGlobalValue\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"const wasm::WasmGlobal&\"\n          ],\n          \"return_type\": \"wasm::WasmValue\",\n          \"logic\": \"Get the value of a global.\"\n        },\n        {\n          \"name\": \"InitDataSegmentArrays\",\n          \"parameters\": [\n            \"const wasm::NativeModule*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes data segments.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmInstanceObject\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"module\",\n          \"parameters\": [],\n          \"return_type\": \"const wasm::WasmModule*\",\n          \"logic\": \"Returns the WebAssembly module associated with the instance.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmTagObject\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"MatchesSignature\",\n          \"parameters\": [\n            \"wasm::CanonicalTypeIndex expected_index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks whether the given signature matches the serialized signature of the tag.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const wasm::FunctionSig* sig\",\n            \"wasm::CanonicalTypeIndex type_index\",\n            \"DirectHandle<HeapObject> tag\",\n            \"DirectHandle<WasmTrustedInstanceData> instance\"\n          ],\n          \"return_type\": \"DirectHandle<WasmTagObject>\",\n          \"logic\": \"Creates a new tag object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmDispatchTableData\",\n      \"properties\": [\n        \"wrappers_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IsAWrapper\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a given entry points to a wrapper in the table.\"\n        },\n        {\n          \"name\": \"WrapperCodePointerForDebugging\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"WasmCodePointer\",\n          \"logic\": \"Returns the WasmCodePointer for the given wrapper for debugging purpose.\"\n        },\n        {\n          \"name\": \"Add\",\n          \"parameters\": [\n            \"int index\",\n            \"Address call_target\",\n            \"wasm::WasmCode* compiled_wrapper\",\n            \"uint64_t signature_hash\"\n          ],\n          \"return_type\": \"WasmCodePointer\",\n          \"logic\": \"Adds an entry for a wrapper. If {compiled_wrapper} is nullptr, the entry is for the generic wrapper.\"\n        },\n        {\n          \"name\": \"Remove\",\n          \"parameters\": [\n            \"int index\",\n            \"WasmCodePointer call_target\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes the entry for a wrapper.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmDispatchTable\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"clear_entry_padding\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clear uninitialized padding space for deterministic object content.\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the current length of this dispatch table.\"\n        },\n        {\n          \"name\": \"capacity\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the current capacity of this dispatch table.\"\n        },\n        {\n          \"name\": \"offheap_data\",\n          \"parameters\": [],\n          \"return_type\": \"WasmDispatchTableData*\",\n          \"logic\": \"Returns the OffHeap data associated with the dispatch table.\"\n        },\n        {\n          \"name\": \"implicit_arg\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Returns the implicit argument at the given index.\"\n        },\n        {\n          \"name\": \"target\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"WasmCodePointer\",\n          \"logic\": \"Returns the target code pointer at the given index.\"\n        },\n        {\n          \"name\": \"sig\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"wasm::CanonicalTypeIndex\",\n          \"logic\": \"Returns the signature id at the given index.\"\n        },\n        {\n          \"name\": \"SetForNonWrapper\",\n          \"parameters\": [\n            \"int index\",\n            \"Tagged<Object> implicit_arg\",\n            \"WasmCodePointer call_target\",\n            \"wasm::CanonicalTypeIndex sig_id\",\n            \"NewOrExistingEntry new_or_existing\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an entry for indirect calls that don't go to a WasmToJS wrapper.\"\n        },\n        {\n          \"name\": \"SetForWrapper\",\n          \"parameters\": [\n            \"int index\",\n            \"Tagged<Object> implicit_arg"
}