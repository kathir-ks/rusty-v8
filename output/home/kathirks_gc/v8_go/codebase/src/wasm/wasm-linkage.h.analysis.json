{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-linkage.h",
  "imports": [
    "src/codegen/aligned-slot-allocator.h",
    "src/codegen/assembler-arch.h",
    "src/codegen/linkage-location.h",
    "src/codegen/machine-type.h"
  ],
  "classes": [
    {
      "name": "LinkageAllocator",
      "properties": [
        "gp_count_",
        "gp_offset_",
        "gp_regs_",
        "fp_count_",
        "fp_allocator_",
        "fp_regs_",
        "slot_allocator_"
      ],
      "methods": [
        {
          "name": "LinkageAllocator",
          "parameters": [
            "const Register* gp",
            "int gpc",
            "const DoubleRegister* fp",
            "int fpc"
          ],
          "return_type": "constexpr LinkageAllocator",
          "logic": "Constructor for LinkageAllocator. Initializes the counts and registers for general purpose and floating point registers."
        },
        {
          "name": "LinkageAllocator",
          "parameters": [
            "const Register (&gp)[kNumGpRegs]",
            "const DoubleRegister (&fp)[kNumFpRegs]"
          ],
          "return_type": "constexpr LinkageAllocator",
          "logic": "Templated constructor for LinkageAllocator.  Initializes the counts and registers for general purpose and floating point registers."
        },
        {
          "name": "CanAllocateGP",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are any general purpose registers available for allocation."
        },
        {
          "name": "CanAllocateFP",
          "parameters": [
            "MachineRepresentation rep"
          ],
          "return_type": "bool",
          "logic": "Checks if there are any floating point registers available for allocation, considering the machine representation (e.g. float32, float64, SIMD128). ARM implementation differs to account for the even/odd register pairing requirements."
        },
        {
          "name": "NextGpReg",
          "parameters": [],
          "return_type": "int",
          "logic": "Allocates and returns the code of the next available general purpose register.  Asserts that there are registers available."
        },
        {
          "name": "NextFpReg",
          "parameters": [
            "MachineRepresentation rep"
          ],
          "return_type": "int",
          "logic": "Allocates and returns the code of the next available floating point register, based on the given machine representation. ARM implementation handles S-register aliasing with D-registers."
        },
        {
          "name": "NextStackSlot",
          "parameters": [
            "MachineRepresentation type"
          ],
          "return_type": "int",
          "logic": "Allocates and returns the next available stack slot based on the provided machine representation. Returns the lowest used slot."
        },
        {
          "name": "SetStackOffset",
          "parameters": [
            "int offset"
          ],
          "return_type": "void",
          "logic": "Sets the stack offset to a new value."
        },
        {
          "name": "NumStackSlots",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack slots allocated so far."
        },
        {
          "name": "EndSlotArea",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the end of the slot area (stops allocating further stack slots)."
        }
      ]
    },
    {
      "name": "LinkageLocationAllocator",
      "properties": [
        "allocator_",
        "slot_offset_"
      ],
      "methods": [
        {
          "name": "LinkageLocationAllocator",
          "parameters": [
            "const Register (&gp)[kNumGpRegs]",
            "const DoubleRegister (&fp)[kNumFpRegs]",
            "int slot_offset"
          ],
          "return_type": "constexpr LinkageLocationAllocator",
          "logic": "Constructor for LinkageLocationAllocator. Initializes the internal LinkageAllocator and the slot offset."
        },
        {
          "name": "Next",
          "parameters": [
            "MachineRepresentation rep"
          ],
          "return_type": "LinkageLocation",
          "logic": "Allocates the next available linkage location (register or stack slot) based on the given machine representation. Prioritizes register allocation over stack slot allocation."
        },
        {
          "name": "NumStackSlots",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack slots used by the internal LinkageAllocator."
        },
        {
          "name": "EndSlotArea",
          "parameters": [],
          "return_type": "void",
          "logic": "Calls EndSlotArea() on the internal LinkageAllocator."
        }
      ]
    }
  ],
  "functions": [],
  "constants": [
    "kGpParamRegisters",
    "kGpReturnRegisters",
    "kFpParamRegisters",
    "kFpReturnRegisters",
    "kIsFpAlwaysDouble",
    "kIsBigEndian",
    "kIsBigEndianOnSim",
    "kWasmInstanceDataParameterIndex",
    "kWasmImplicitArgRegister"
  ]
}