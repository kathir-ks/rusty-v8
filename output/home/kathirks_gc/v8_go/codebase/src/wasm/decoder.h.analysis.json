{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/decoder.h",
  "imports": [
    "<cinttypes>",
    "<cstdarg>",
    "<memory>",
    "src/base/compiler-specific.h",
    "src/base/memory.h",
    "src/base/strings.h",
    "src/base/vector.h",
    "src/flags/flags.h",
    "src/utils/utils.h",
    "src/wasm/wasm-opcodes.h",
    "src/wasm/wasm-result.h"
  ],
  "classes": [
    {
      "name": "ITracer",
      "properties": [
        "static constexpr ITracer* NoTrace"
      ],
      "methods": [
        {
          "name": "TypeOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a type."
        },
        {
          "name": "ImportOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of an import."
        },
        {
          "name": "ImportsDone",
          "parameters": [
            "const WasmModule* module"
          ],
          "return_type": "void",
          "logic": "Abstract method called when import section decoding is complete."
        },
        {
          "name": "TableOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a table."
        },
        {
          "name": "MemoryOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a memory."
        },
        {
          "name": "TagOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a tag."
        },
        {
          "name": "GlobalOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a global."
        },
        {
          "name": "StartOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of the start function."
        },
        {
          "name": "ElementOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of an element segment."
        },
        {
          "name": "DataOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a data segment."
        },
        {
          "name": "StringOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a string."
        },
        {
          "name": "RecGroupOffset",
          "parameters": [
            "uint32_t offset",
            "uint32_t group_size"
          ],
          "return_type": "void",
          "logic": "Abstract method for extracting the byte offset of a recursive group."
        },
        {
          "name": "Bytes",
          "parameters": [
            "const uint8_t* start",
            "uint32_t count"
          ],
          "return_type": "void",
          "logic": "Abstract method for handling byte ranges for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "const char* desc"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a description for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "const char* desc",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a description with a specified length for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "uint32_t number"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a number as a description for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "uint64_t number"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a number as a description for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "ValueType type"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a ValueType as a description for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "HeapType type"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a HeapType as a description for tracing."
        },
        {
          "name": "Description",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a FunctionSig as a description for tracing."
        },
        {
          "name": "NextLine",
          "parameters": [],
          "return_type": "void",
          "logic": "Abstract method to move to the next line for tracing."
        },
        {
          "name": "NextLineIfFull",
          "parameters": [],
          "return_type": "void",
          "logic": "Abstract method to move to the next line if the current line is full."
        },
        {
          "name": "NextLineIfNonEmpty",
          "parameters": [],
          "return_type": "void",
          "logic": "Abstract method to move to the next line if the current line is non-empty."
        },
        {
          "name": "InitializerExpression",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end",
            "ValueType expected_type"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle initializer expressions for tracing."
        },
        {
          "name": "FunctionBody",
          "parameters": [
            "const WasmFunction* func",
            "const uint8_t* start"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle function bodies for tracing."
        },
        {
          "name": "FunctionName",
          "parameters": [
            "uint32_t func_index"
          ],
          "return_type": "void",
          "logic": "Abstract method to provide a function name for tracing."
        },
        {
          "name": "NameSection",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end",
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle the name section for tracing."
        },
        {
          "name": "~ITracer",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor"
        }
      ]
    },
    {
      "name": "Decoder",
      "properties": [
        "static constexpr struct NoValidationTag kNoValidation",
        "static constexpr struct FullValidationTag kFullValidation",
        "start_",
        "pc_",
        "end_",
        "buffer_offset_",
        "error_"
      ],
      "methods": [
        {
          "name": "read_u8",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> msg"
          ],
          "return_type": "uint8_t",
          "logic": "Reads an 8-bit unsigned integer (byte) from the given address."
        },
        {
          "name": "read_u16",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> msg"
          ],
          "return_type": "uint16_t",
          "logic": "Reads a 16-bit unsigned integer (little endian) from the given address."
        },
        {
          "name": "read_u32",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> msg"
          ],
          "return_type": "uint32_t",
          "logic": "Reads a 32-bit unsigned integer (little endian) from the given address."
        },
        {
          "name": "read_u64",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> msg"
          ],
          "return_type": "uint64_t",
          "logic": "Reads a 64-bit unsigned integer (little endian) from the given address."
        },
        {
          "name": "read_u32v",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> name"
          ],
          "return_type": "std::pair<uint32_t, uint32_t>",
          "logic": "Reads a variable-length unsigned 32-bit integer (LEB128) from the given address and returns the value and the number of bytes read."
        },
        {
          "name": "read_i32v",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> name"
          ],
          "return_type": "std::pair<int32_t, uint32_t>",
          "logic": "Reads a variable-length signed 32-bit integer (LEB128) from the given address and returns the value and the number of bytes read."
        },
        {
          "name": "read_u64v",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> name"
          ],
          "return_type": "std::pair<uint64_t, uint32_t>",
          "logic": "Reads a variable-length unsigned 64-bit integer (LEB128) from the given address and returns the value and the number of bytes read."
        },
        {
          "name": "read_i64v",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> name"
          ],
          "return_type": "std::pair<int64_t, uint32_t>",
          "logic": "Reads a variable-length signed 64-bit integer (LEB128) from the given address and returns the value and the number of bytes read."
        },
        {
          "name": "read_i33v",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> name"
          ],
          "return_type": "std::pair<int64_t, uint32_t>",
          "logic": "Reads a variable-length signed 33-bit integer (LEB128) from the given address and returns the value and the number of bytes read."
        },
        {
          "name": "read_prefixed_opcode",
          "parameters": [
            "const uint8_t* pc",
            "Name<ValidationTag> name"
          ],
          "return_type": "std::pair<WasmOpcode, uint32_t>",
          "logic": "Reads a prefixed opcode, possibly with variable length index. Returns the opcode and the number of bytes of the opcode."
        },
        {
          "name": "consume_u8",
          "parameters": [
            "const char* name"
          ],
          "return_type": "uint8_t",
          "logic": "Reads an 8-bit unsigned integer and advances the program counter."
        },
        {
          "name": "consume_u8",
          "parameters": [
            "const char* name",
            "ITracer* tracer"
          ],
          "return_type": "uint8_t",
          "logic": "Reads an 8-bit unsigned integer and advances the program counter. Traces if a tracer is given."
        },
        {
          "name": "consume_u16",
          "parameters": [
            "const char* name"
          ],
          "return_type": "uint16_t",
          "logic": "Reads a 16-bit unsigned integer and advances the program counter."
        },
        {
          "name": "consume_u32",
          "parameters": [
            "const char* name",
            "ITracer* tracer"
          ],
          "return_type": "uint32_t",
          "logic": "Reads a 32-bit unsigned integer and advances the program counter. Traces if a tracer is given."
        },
        {
          "name": "consume_u32v",
          "parameters": [
            "const char* name"
          ],
          "return_type": "uint32_t",
          "logic": "Reads a variable-length unsigned 32-bit integer and advances the program counter."
        },
        {
          "name": "consume_u32v",
          "parameters": [
            "const char* name",
            "ITracer* tracer"
          ],
          "return_type": "uint32_t",
          "logic": "Reads a variable-length unsigned 32-bit integer and advances the program counter. Traces if a tracer is given."
        },
        {
          "name": "consume_i32v",
          "parameters": [
            "const char* name"
          ],
          "return_type": "int32_t",
          "logic": "Reads a variable-length signed 32-bit integer and advances the program counter."
        },
        {
          "name": "consume_u64v",
          "parameters": [
            "const char* name",
            "ITracer* tracer"
          ],
          "return_type": "uint64_t",
          "logic": "Reads a variable-length unsigned 64-bit integer and advances the program counter.  Traces if a tracer is given."
        },
        {
          "name": "consume_i64v",
          "parameters": [
            "const char* name"
          ],
          "return_type": "int64_t",
          "logic": "Reads a variable-length signed 64-bit integer and advances the program counter."
        },
        {
          "name": "consume_bytes",
          "parameters": [
            "uint32_t size",
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Consumes a number of bytes, advancing the program counter."
        },
        {
          "name": "consume_bytes",
          "parameters": [
            "uint32_t size",
            "const char* name",
            "ITracer* tracer"
          ],
          "return_type": "void",
          "logic": "Consumes a number of bytes, advancing the program counter and tracing if a tracer is provided."
        },
        {
          "name": "available_bytes",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the number of bytes remaining in the buffer."
        },
        {
          "name": "checkAvailable",
          "parameters": [
            "uint32_t size"
          ],
          "return_type": "bool",
          "logic": "Checks if at least {size} bytes are available."
        },
        {
          "name": "error",
          "parameters": [
            "const char* msg"
          ],
          "return_type": "void",
          "logic": "Reports an error with the provided message."
        },
        {
          "name": "error",
          "parameters": [
            "const uint8_t* pc",
            "const char* msg"
          ],
          "return_type": "void",
          "logic": "Reports an error with the provided message at a specific program counter."
        },
        {
          "name": "error",
          "parameters": [
            "uint32_t offset",
            "const char* msg"
          ],
          "return_type": "void",
          "logic": "Reports an error with the provided message at a specific offset."
        },
        {
          "name": "errorf",
          "parameters": [
            "const char* format",
            "Args... args"
          ],
          "return_type": "void",
          "logic": "Reports a formatted error with the provided message."
        },
        {
          "name": "errorf",
          "parameters": [
            "const uint8_t* pc",
            "const char* format",
            "Args... args"
          ],
          "return_type": "void",
          "logic": "Reports a formatted error with the provided message at a specific program counter."
        },
        {
          "name": "errorf",
          "parameters": [
            "uint32_t offset",
            "const char* format",
            "Args... args"
          ],
          "return_type": "void",
          "logic": "Reports a formatted error with the provided message at a specific offset."
        },
        {
          "name": "onFirstError",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Virtual method called on the first error."
        },
        {
          "name": "traceByteRange",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end"
          ],
          "return_type": "void",
          "logic": "Prints a range of bytes as hex bytes for debugging."
        },
        {
          "name": "traceOffEnd",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints bytes from the current program counter to the end of the buffer."
        },
        {
          "name": "toResult",
          "parameters": [
            "T&& val"
          ],
          "return_type": "Result<R>",
          "logic": "Converts the given value to a Result, handling any errors."
        },
        {
          "name": "Reset",
          "parameters": [
            "const uint8_t* start",
            "const uint8_t* end",
            "uint32_t buffer_offset"
          ],
          "return_type": "void",
          "logic": "Resets the internal state of the decoder with a new buffer and offset."
        },
        {
          "name": "Reset",
          "parameters": [
            "base::Vector<const uint8_t> bytes",
            "uint32_t buffer_offset"
          ],
          "return_type": "void",
          "logic": "Resets the internal state of the decoder with a new byte vector and offset."
        },
        {
          "name": "ok",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if there are no errors."
        },
        {
          "name": "failed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if an error has occurred."
        },
        {
          "name": "more",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if there are more bytes to read."
        },
        {
          "name": "error",
          "parameters": [],
          "return_type": "const WasmError&",
          "logic": "Returns the current error."
        },
        {
          "name": "start",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns the start of the buffer."
        },
        {
          "name": "pc",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns the current program counter."
        },
        {
          "name": "position",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the current position (offset from the start)."
        },
        {
          "name": "pc_offset",
          "parameters": [
            "const uint8_t* pc"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the offset of a given pointer from the start of the buffer."
        },
        {
          "name": "pc_offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the current program counter from the start of the buffer."
        },
        {
          "name": "buffer_offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the buffer offset."
        },
        {
          "name": "GetBufferRelativeOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates an offset relative to the current buffer, given an offset relative to the module start."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns the end of the buffer."
        },
        {
          "name": "set_end",
          "parameters": [
            "const uint8_t* end"
          ],
          "return_type": "void",
          "logic": "Sets the end of the buffer."
        },
        {
          "name": "lookahead",
          "parameters": [
            "int offset",
            "uint8_t expected"
          ],
          "return_type": "bool",
          "logic": "Check if the byte at pc + offset equals expected."
        },
        {
          "name": "~Decoder",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor"
        }
      ]
    }
  ],
  "functions": []
}