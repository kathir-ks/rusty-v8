{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/module-compiler.h",
  "imports": [
    "<atomic>",
    "<functional>",
    "<memory>",
    "<optional>",
    "include/v8-metrics.h",
    "src/base/platform/time.h",
    "src/common/globals.h",
    "src/tasks/cancelable-task.h",
    "src/wasm/compilation-environment.h",
    "src/wasm/wasm-features.h",
    "src/wasm/wasm-import-wrapper-cache.h",
    "src/wasm/wasm-module.h"
  ],
  "classes": [
    {
      "name": "AsyncCompileJob",
      "properties": [
        "isolate_",
        "api_method_name_",
        "enabled_features_",
        "detected_features_",
        "compile_imports_",
        "dynamic_tiering_",
        "start_time_",
        "bytes_copy_",
        "wire_bytes_",
        "native_context_",
        "incumbent_context_",
        "context_id_",
        "metrics_event_",
        "resolver_",
        "module_object_",
        "native_module_",
        "step_",
        "background_task_manager_",
        "foreground_task_runner_",
        "outstanding_finishers_",
        "pending_foreground_task_",
        "stream_",
        "compilation_id_"
      ],
      "methods": [
        {
          "name": "AsyncCompileJob",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled_features",
            "CompileTimeImports compile_imports",
            "base::OwnedVector<const uint8_t> bytes",
            "DirectHandle<Context> context",
            "DirectHandle<NativeContext> incumbent_context",
            "const char* api_method_name",
            "std::shared_ptr<CompilationResultResolver> resolver",
            "int compilation_id"
          ],
          "return_type": "void",
          "logic": "Constructor for AsyncCompileJob. Initializes the state and parameters for the compilation process."
        },
        {
          "name": "~AsyncCompileJob",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for AsyncCompileJob. Cleans up resources."
        },
        {
          "name": "Start",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts the asynchronous compilation process."
        },
        {
          "name": "CreateStreamingDecoder",
          "parameters": [],
          "return_type": "std::shared_ptr<StreamingDecoder>",
          "logic": "Creates a streaming decoder for incremental parsing of the wasm module."
        },
        {
          "name": "Abort",
          "parameters": [],
          "return_type": "void",
          "logic": "Aborts the compilation process."
        },
        {
          "name": "CancelPendingForegroundTask",
          "parameters": [],
          "return_type": "void",
          "logic": "Cancels any pending foreground task."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with the compile job."
        },
        {
          "name": "context",
          "parameters": [],
          "return_type": "DirectHandle<NativeContext>",
          "logic": "Returns the native context."
        },
        {
          "name": "context_id",
          "parameters": [],
          "return_type": "v8::metrics::Recorder::ContextId",
          "logic": "Returns the context ID for metrics recording."
        },
        {
          "name": "DecrementAndCheckFinisherCount",
          "parameters": [],
          "return_type": "bool",
          "logic": "Decrements the number of outstanding finishers and checks if it's the last one."
        },
        {
          "name": "CreateNativeModule",
          "parameters": [
            "std::shared_ptr<const WasmModule> module",
            "size_t code_size_estimate"
          ],
          "return_type": "void",
          "logic": "Creates the native module object."
        },
        {
          "name": "GetOrCreateNativeModule",
          "parameters": [
            "std::shared_ptr<const WasmModule> module",
            "size_t code_size_estimate"
          ],
          "return_type": "bool",
          "logic": "Tries to get the native module from cache or creates it."
        },
        {
          "name": "PrepareRuntimeObjects",
          "parameters": [],
          "return_type": "void",
          "logic": "Prepares runtime objects needed for compilation."
        },
        {
          "name": "FinishCompile",
          "parameters": [
            "bool is_after_cache_hit"
          ],
          "return_type": "void",
          "logic": "Finalizes the compilation after successful compilation."
        },
        {
          "name": "Failed",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles compilation failures."
        },
        {
          "name": "AsyncCompileSucceeded",
          "parameters": [
            "DirectHandle<WasmModuleObject> result"
          ],
          "return_type": "void",
          "logic": "Handles successful asynchronous compilation."
        },
        {
          "name": "FinishSuccessfully",
          "parameters": [],
          "return_type": "void",
          "logic": "Finishes the compilation job successfully."
        },
        {
          "name": "StartForegroundTask",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts a foreground task."
        },
        {
          "name": "ExecuteForegroundTaskImmediately",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the foreground task immediately."
        },
        {
          "name": "StartBackgroundTask",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts a background task."
        },
        {
          "name": "DoSync",
          "parameters": [],
          "return_type": "void",
          "logic": "Switches to a compilation step and starts a foreground task to execute it."
        },
        {
          "name": "DoImmediately",
          "parameters": [],
          "return_type": "void",
          "logic": "Switches to a compilation step and immediately executes that step."
        },
        {
          "name": "DoAsync",
          "parameters": [],
          "return_type": "void",
          "logic": "Switches to a compilation step and starts a background task to execute it."
        },
        {
          "name": "NextStep",
          "parameters": [],
          "return_type": "void",
          "logic": "Switches to a compilation step but does not start a task to execute it."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CompileToNativeModule",
      "parameters": [
        "Isolate* isolate",
        "WasmEnabledFeatures enabled_features",
        "WasmDetectedFeatures detected_features",
        "CompileTimeImports compile_imports",
        "ErrorThrower* thrower",
        "std::shared_ptr<const WasmModule> module",
        "base::OwnedVector<const uint8_t> wire_bytes",
        "int compilation_id",
        "v8::metrics::Recorder::ContextId context_id",
        "ProfileInformation* pgo_info"
      ],
      "return_type": "std::shared_ptr<NativeModule>",
      "logic": "Compiles a wasm module to a NativeModule, performing validation and code generation."
    },
    {
      "name": "ValidateAndSetBuiltinImports",
      "parameters": [
        "const WasmModule* module",
        "base::Vector<const uint8_t> wire_bytes",
        "const CompileTimeImports& imports",
        "WasmDetectedFeatures* detected"
      ],
      "return_type": "WasmError",
      "logic": "Validates the module imports against builtin imports and sets the detected features."
    },
    {
      "name": "CompileImportWrapperForTest",
      "parameters": [
        "Isolate* isolate",
        "NativeModule* native_module",
        "ImportCallKind kind",
        "const CanonicalSig* sig",
        "CanonicalTypeIndex type_index",
        "int expected_arity",
        "Suspend suspend"
      ],
      "return_type": "WasmCode*",
      "logic": "Compiles the wrapper for a specific import call signature and kind. For testing purposes."
    },
    {
      "name": "CompileLazy",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>",
        "int func_index"
      ],
      "return_type": "bool",
      "logic": "Triggered by the WasmCompileLazy builtin. Compiles a wasm function lazily."
    },
    {
      "name": "ThrowLazyCompilationError",
      "parameters": [
        "Isolate* isolate",
        "const NativeModule* native_module",
        "int func_index"
      ],
      "return_type": "void",
      "logic": "Throws the compilation error after failed lazy compilation."
    },
    {
      "name": "TriggerTierUp",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>",
        "int func_index"
      ],
      "return_type": "void",
      "logic": "Triggers tier-up (optimization) of a specific wasm function to TurboFan."
    },
    {
      "name": "TierUpNowForTesting",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>",
        "int func_index"
      ],
      "return_type": "void",
      "logic": "Synchronously triggers tier-up (optimization) of a specific wasm function to TurboFan. For testing purposes."
    },
    {
      "name": "TierUpAllForTesting",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>"
      ],
      "return_type": "void",
      "logic": "Synchronously triggers tier-up (optimization) of all wasm functions. For testing purposes."
    },
    {
      "name": "InitializeCompilationForTesting",
      "parameters": [
        "NativeModule* native_module"
      ],
      "return_type": "void",
      "logic": "Initializes compilation for testing purposes."
    },
    {
      "name": "PublishDetectedFeatures",
      "parameters": [
        "WasmDetectedFeatures",
        "Isolate*",
        "bool is_initial_compilation"
      ],
      "return_type": "void",
      "logic": "Publishes a set of detected WebAssembly features in a given isolate."
    }
  ]
}