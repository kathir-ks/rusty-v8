{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-external-refs.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-external-refs.cc\",\n  \"imports\": [\n    \"<math.h>\",\n    \"<stdint.h>\",\n    \"<stdlib.h>\",\n    \"<limits>\",\n    \"src/base/bits.h\",\n    \"src/base/ieee754.h\",\n    \"src/base/safe_conversions.h\",\n    \"src/common/assert-scope.h\",\n    \"src/execution/pointer-authentication.h\",\n    \"src/numbers/conversions.h\",\n    \"src/numbers/ieee754.h\",\n    \"src/roots/roots-inl.h\",\n    \"src/utils/memcopy.h\",\n    \"src/wasm/float16.h\",\n    \"src/wasm/wasm-engine.h\",\n    \"src/wasm/wasm-objects-inl.h\",\n    \"src/trap-handler/trap-handler.h\",\n    \"src/base/memory.h\",\n    \"src/base/overflowing-math.h\",\n    \"src/utils/utils.h\",\n    \"src/wasm/wasm-external-refs.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"ThreadNotInWasmScope\",\n      \"properties\": [\n        \"thread_was_in_wasm_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ThreadNotInWasmScope\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Constructor. Checks if the current thread is in WASM and clears the flag if necessary (for ASAN on Windows).\"\n        },\n        {\n          \"name\": \"~ThreadNotInWasmScope\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor. Restores the thread-in-wasm flag if it was cleared in the constructor.\"\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"f32_trunc_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float from memory, truncates it, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f32_floor_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float from memory, floors it, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f32_ceil_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float from memory, ceils it, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f32_nearest_int_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float from memory, rounds it to the nearest integer, and writes the result back to memory. Includes an AIX workaround.\"\n    },\n    {\n      \"name\": \"f64_trunc_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a double from memory, truncates it, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f64_floor_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a double from memory, floors it, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f64_ceil_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a double from memory, ceils it, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f64_nearest_int_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a double from memory, rounds it to the nearest integer, and writes the result back to memory. Includes an AIX workaround.\"\n    },\n    {\n      \"name\": \"int64_to_float32_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads an int64_t from memory, casts it to a float, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"uint64_to_float32_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a uint64_t from memory, casts it to a float, and writes the result back to memory.  Includes a workaround for Windows FP stack precision issues.\"\n    },\n    {\n      \"name\": \"int64_to_float64_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads an int64_t from memory, casts it to a double, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"uint64_to_float64_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a uint64_t from memory, casts it to a double, and writes the result back to memory. Includes a workaround for MSVC to ensure round-to-nearest-ties-even semantics.\"\n    },\n    {\n      \"name\": \"float32_to_int64_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads a float from memory, checks if it is within the range of int64_t, casts it to int64_t and writes the result back to memory, returning 1 if successful. Returns 0 otherwise.\"\n    },\n    {\n      \"name\": \"float32_to_uint64_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads a float from memory, checks if it is within the range of uint64_t, casts it to uint64_t and writes the result back to memory, returning 1 if successful. Returns 0 otherwise.\"\n    },\n    {\n      \"name\": \"float64_to_int64_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads a double from memory, checks if it is within the range of int64_t, casts it to int64_t and writes the result back to memory, returning 1 if successful. Returns 0 otherwise.\"\n    },\n    {\n      \"name\": \"float64_to_uint64_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads a double from memory, checks if it is within the range of uint64_t, casts it to uint64_t and writes the result back to memory, returning 1 if successful. Returns 0 otherwise.\"\n    },\n    {\n      \"name\": \"float32_to_int64_sat_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float from memory, casts it to int64_t with saturation, and writes the result back to memory.  Saturates to min/max int64_t if out of range, 0 if NaN.\"\n    },\n    {\n      \"name\": \"float32_to_uint64_sat_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float from memory, casts it to uint64_t with saturation, and writes the result back to memory.  Saturates to max uint64_t if too large, 0 if negative or NaN.\"\n    },\n    {\n      \"name\": \"float64_to_int64_sat_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a double from memory, casts it to int64_t with saturation, and writes the result back to memory.  Saturates to min/max int64_t if out of range, 0 if NaN.\"\n    },\n    {\n      \"name\": \"float64_to_uint64_sat_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a double from memory, casts it to uint64_t with saturation, and writes the result back to memory. Saturates to max uint64_t if too large, 0 if negative or NaN.\"\n    },\n    {\n      \"name\": \"float16_to_float32_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float16 from memory, converts it to a float32, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"float32_to_float16_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads a float32 from memory, converts it to a float16, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"int64_div_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads two int64_t values (dividend and divisor) from memory, divides them, and writes the result back to memory. Returns 0 if the divisor is 0, -1 if dividing INT64_MIN by -1, and 1 otherwise.\"\n    },\n    {\n      \"name\": \"int64_mod_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads two int64_t values (dividend and divisor) from memory, calculates the modulo, and writes the result back to memory. Returns 0 if the divisor is 0, and 1 otherwise.\"\n    },\n    {\n      \"name\": \"uint64_div_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads two uint64_t values (dividend and divisor) from memory, divides them, and writes the result back to memory. Returns 0 if the divisor is 0, and 1 otherwise.\"\n    },\n    {\n      \"name\": \"uint64_mod_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Reads two uint64_t values (dividend and divisor) from memory, calculates the modulo, and writes the result back to memory. Returns 0 if the divisor is 0, and 1 otherwise.\"\n    },\n    {\n      \"name\": \"word32_rol_wrapper\",\n      \"parameters\": [\n        \"input\",\n        \"shift\"\n      ],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Performs a 32-bit rotate left operation.\"\n    },\n    {\n      \"name\": \"word32_ror_wrapper\",\n      \"parameters\": [\n        \"input\",\n        \"shift\"\n      ],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Performs a 32-bit rotate right operation.\"\n    },\n    {\n      \"name\": \"word64_rol_wrapper\",\n      \"parameters\": [\n        \"input\",\n        \"shift\"\n      ],\n      \"return_type\": \"uint64_t\",\n      \"logic\": \"Performs a 64-bit rotate left operation.\"\n    },\n    {\n      \"name\": \"word64_ror_wrapper\",\n      \"parameters\": [\n        \"input\",\n        \"shift\"\n      ],\n      \"return_type\": \"uint64_t\",\n      \"logic\": \"Performs a 64-bit rotate right operation.\"\n    },\n    {\n      \"name\": \"float64_pow_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Reads two doubles from memory (base and exponent), calculates the power using math::pow, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"simd_float_round_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Generic template for SIMD floating-point rounding operations. Reads a SIMD vector of floats/doubles, rounds each element using the provided rounding function, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f64x2_ceil_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD ceiling operation for a vector of two doubles.\"\n    },\n    {\n      \"name\": \"f64x2_floor_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD floor operation for a vector of two doubles.\"\n    },\n    {\n      \"name\": \"f64x2_trunc_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD truncate operation for a vector of two doubles.\"\n    },\n    {\n      \"name\": \"f64x2_nearest_int_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD nearest integer operation for a vector of two doubles.\"\n    },\n    {\n      \"name\": \"f32x4_ceil_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD ceiling operation for a vector of four floats.\"\n    },\n    {\n      \"name\": \"f32x4_floor_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD floor operation for a vector of four floats.\"\n    },\n    {\n      \"name\": \"f32x4_trunc_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD truncate operation for a vector of four floats.\"\n    },\n    {\n      \"name\": \"f32x4_nearest_int_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD nearest integer operation for a vector of four floats.\"\n    },\n     {\n      \"name\": \"f16_abs\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the absolute value of a Float16 number.\"\n    },\n    {\n      \"name\": \"f16x8_abs_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD absolute value operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_neg\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Negates a Float16 number.\"\n    },\n    {\n      \"name\": \"f16x8_neg_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD negation operation for a vector of eight Float16 numbers.\"\n    },\n     {\n      \"name\": \"f16_sqrt\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the square root of a Float16 number.\"\n    },\n    {\n      \"name\": \"f16x8_sqrt_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD square root operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_ceil\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the ceiling of a Float16 number.\"\n    },\n    {\n      \"name\": \"f16x8_ceil_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD ceiling operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_floor\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the floor of a Float16 number.\"\n    },\n    {\n      \"name\": \"f16x8_floor_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD floor operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_trunc\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Truncates a Float16 number.\"\n    },\n    {\n      \"name\": \"f16x8_trunc_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD truncate operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_nearest_int\",\n      \"parameters\": [\n        \"a\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Rounds a Float16 number to the nearest integer.\"\n    },\n    {\n      \"name\": \"f16x8_nearest_int_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD nearest integer operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"simd_float16_bin_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Generic template for SIMD float16 binary operations. Reads two SIMD vectors of float16 numbers, applies the binary operation to corresponding elements, and writes the result back to memory.\"\n    },\n    {\n      \"name\": \"f16_eq\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"int16_t\",\n      \"logic\": \"Compares two Float16 numbers for equality.\"\n    },\n    {\n      \"name\": \"f16x8_eq_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD equality comparison operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_ne\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"int16_t\",\n      \"logic\": \"Compares two Float16 numbers for inequality.\"\n    },\n    {\n      \"name\": \"f16x8_ne_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD inequality comparison operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_lt\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"int16_t\",\n      \"logic\": \"Compares two Float16 numbers for less than.\"\n    },\n    {\n      \"name\": \"f16x8_lt_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD less than comparison operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_le\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"int16_t\",\n      \"logic\": \"Compares two Float16 numbers for less than or equal to.\"\n    },\n    {\n      \"name\": \"f16x8_le_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD less than or equal to comparison operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_add\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Adds two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_add_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD addition operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_sub\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Subtracts two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_sub_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD subtraction operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_mul\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Multiplies two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_mul_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD multiplication operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_div\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Divides two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_div_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD division operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_min\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the Javascript min of two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_min_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD min operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_max\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the Javascript max of two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_max_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD max operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_pmin\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the pairwise min of two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_pmin_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD pairwise min operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16_pmax\",\n      \"parameters\": [\n        \"a\",\n        \"b\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Calculates the pairwise max of two Float16 numbers.\"\n    },\n    {\n      \"name\": \"f16x8_pmax_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD pairwise max operation for a vector of eight Float16 numbers.\"\n    },\n    {\n      \"name\": \"simd_float_un_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Generic template for SIMD floating-point unary operations. Reads a SIMD vector of floats/doubles, applies the unary operation to each element, and writes the result back to memory.\"\n    },\n     {\n      \"name\": \"ConvertToIntS\",\n      \"parameters\": [\n        \"val\"\n      ],\n      \"return_type\": \"int16_t\",\n      \"logic\": \"Converts a Float16 to a signed int16 with clamping.\"\n    },\n    {\n      \"name\": \"i16x8_sconvert_f16x8_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD conversion operation from float16x8 to int16x8 (signed).\"\n    },\n    {\n      \"name\": \"ConvertToIntU\",\n      \"parameters\": [\n        \"val\"\n      ],\n      \"return_type\": \"uint16_t\",\n      \"logic\": \"Converts a Float16 to an unsigned int16 with clamping.\"\n    },\n    {\n      \"name\": \"i16x8_uconvert_f16x8_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD conversion operation from float16x8 to uint16x8 (unsigned).\"\n    },\n     {\n      \"name\": \"ConvertToF16S\",\n      \"parameters\": [\n        \"val\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Converts a signed int16 to a Float16.\"\n    },\n    {\n      \"name\": \"f16x8_sconvert_i16x8_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD conversion operation from int16x8 (signed) to float16x8.\"\n    },\n    {\n      \"name\": \"ConvertToF16U\",\n      \"parameters\": [\n        \"val\"\n      ],\n      \"return_type\": \"Float16\",\n      \"logic\": \"Converts an unsigned int16 to a Float16.\"\n    },\n    {\n      \"name\": \"f16x8_uconvert_i16x8_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD conversion operation from uint16x8 (unsigned) to float16x8.\"\n    },\n    {\n      \"name\": \"f32x4_promote_low_f16x8_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Promotes the low four float16 values in a float16x8 vector to float32 and stores them in the original buffer, effectively converting a float16x8 into a float32x4.\"\n    },\n    {\n      \"name\": \"f16x8_demote_f32x4_zero_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Demotes a float32x4 vector to a float16x8 vector, setting the upper four float16 values to zero. Handles endianness differences.\"\n    },\n    {\n      \"name\": \"f16x8_demote_f64x2_zero_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Demotes a float64x2 vector to a float16x8 vector, setting the upper six float16 values to zero. Handles endianness differences.\"\n    },\n    {\n      \"name\": \"simd_float16_fma_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Template wrapper for float16 SIMD fused multiply-add operations. Reads three float16 SIMD vectors, applies the fma operation, writes the result back.\"\n    },\n    {\n      \"name\": \"Qfma\",\n      \"parameters\": [\n        \"a\",\n        \"b\",\n        \"c\"\n      ],\n      \"return_type\": \"float\",\n      \"logic\": \"Helper function for fma (fused multiply-add): returns a * b + c.\"\n    },\n    {\n      \"name\": \"f16x8_qfma_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD fused multiply-add operation for float16x8 using the Qfma helper function.\"\n    },\n    {\n      \"name\": \"Qfms\",\n      \"parameters\": [\n        \"a\",\n        \"b\",\n        \"c\"\n      ],\n      \"return_type\": \"float\",\n      \"logic\": \"Helper function for fms (fused multiply-subtract): returns -(a * b) + c.\"\n    },\n    {\n      \"name\": \"f16x8_qfms_wrapper\",\n      \"parameters\": [\n        \"data\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"SIMD fused multiply-subtract operation for float16x8 using the Qfms helper function.\"\n    },\n    {\n      \"name\": \"EffectiveAddress\",\n      \"parameters\": [\n        \"trusted_data\",\n        \"mem_index\",\n        \"index\"\n      ],\n      \"return_type\": \"uint8_t*\",\n      \"logic\": \"Calculates the effective address within a Wasm memory instance.\"\n    },\n    {\n      \"name\": \"ReadAndIncrementOffset\",\n      \"parameters\": [\n        \"data\",\n        \"offset\"\n      ],\n      \"return_type\": \"V\",\n      \"logic\": \"Reads a value of type V from memory at the given offset, then increments the offset by the size of V.\"\n    },\n    {\n      \"name\": \"memory_init_wrapper\",\n      \"parameters\": [\n        \"trusted_data_addr\",\n        \"mem_index\",\n        \"dst\",\n        \"src\",\n        \"seg_index\",\n        \"size\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Initializes a Wasm memory region with data from a data segment. Performs bounds checks. Returns kSuccess if successful, kOutOfBounds if out of bounds.\"\n    },\n    {\n      \"name\": \"memory_copy_wrapper\",\n      \"parameters\": [\n        \"trusted_data_addr\",\n        \"dst_mem_index\",\n        \"src_mem_index\",\n        \"dst\",\n        \"src\",\n        \"size\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Copies a region of memory from one Wasm memory to another. Performs bounds checks. Uses memmove to handle overlapping ranges. Returns kSuccess if successful, kOutOfBounds if out of bounds.\"\n    },\n    {\n      \"name\": \"memory_fill_wrapper\",\n      \"parameters\": [\n        \"trusted_data_addr\",\n        \"mem_index\",\n        \"dst\",\n        \"value\",\n        \"size\"\n      ],\n      \"return_type\": \"int32_t\",\n      \"logic\": \"Fills a region of Wasm memory with a given value. Performs bounds checks. Returns kSuccess if successful, kOutOfBounds if out of bounds.\"\n    },\n    {\n      \"name\": \"ArrayElementAddress\",\n      \"parameters\": [\n        \"array\",\n        \"index\","
}