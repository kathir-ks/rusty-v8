{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/string-builder.h",
  "imports": [
    "<cstring>",
    "<string>",
    "<vector>",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "StringBuilder",
      "properties": [
        "stack_buffer_",
        "chunks_",
        "start_",
        "cursor_",
        "remaining_bytes_",
        "on_growth_"
      ],
      "methods": [
        {
          "name": "StringBuilder",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor that initializes on_growth_ to kReplacePreviousChunk."
        },
        {
          "name": "StringBuilder",
          "parameters": [
            "const StringBuilder&"
          ],
          "return_type": "deleted",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const StringBuilder&"
          ],
          "return_type": "StringBuilder&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "~StringBuilder",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that frees allocated memory for string chunks and possibly the initial buffer."
        },
        {
          "name": "allocate",
          "parameters": [
            "size_t n"
          ],
          "return_type": "char*",
          "logic": "Reserves space for n characters, growing the buffer if needed, and returns a pointer to the allocated space."
        },
        {
          "name": "write",
          "parameters": [
            "const uint8_t* data",
            "size_t n"
          ],
          "return_type": "void",
          "logic": "Writes n bytes from data into the string buffer using allocate."
        },
        {
          "name": "write",
          "parameters": [
            "const char* data",
            "size_t n"
          ],
          "return_type": "void",
          "logic": "Writes n characters from data into the string buffer using allocate."
        },
        {
          "name": "start",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns a pointer to the beginning of the string buffer."
        },
        {
          "name": "cursor",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns a pointer to the current position in the string buffer."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the current length of the string."
        },
        {
          "name": "rewind_to_start",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the cursor to the beginning of the string, effectively clearing it."
        },
        {
          "name": "backspace",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes the last character written."
        },
        {
          "name": "StringBuilder",
          "parameters": [
            "OnGrowth on_growth"
          ],
          "return_type": "void",
          "logic": "Protected constructor to initialize with a specified growth strategy."
        },
        {
          "name": "start_here",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the start pointer to the current cursor position. Useful for subclasses."
        },
        {
          "name": "approximate_size_mb",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Approximates size in megabytes"
        },
        {
          "name": "Grow",
          "parameters": [
            "size_t requested"
          ],
          "return_type": "void",
          "logic": "Grows the internal buffer to accommodate the requested number of bytes. Allocates a new chunk, copies the existing data, and updates the pointers."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "const char* str"
      ],
      "return_type": "StringBuilder&",
      "logic": "Appends a C-style string to the StringBuilder."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "char c"
      ],
      "return_type": "StringBuilder&",
      "logic": "Appends a single character to the StringBuilder."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "const std::string& s"
      ],
      "return_type": "StringBuilder&",
      "logic": "Appends a std::string to the StringBuilder."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "std::string_view s"
      ],
      "return_type": "StringBuilder&",
      "logic": "Appends a std::string_view to the StringBuilder."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "uint32_t n"
      ],
      "return_type": "StringBuilder&",
      "logic": "Appends an unsigned 32-bit integer to the StringBuilder. Converts the integer to a string representation."
    },
    {
      "name": "operator<<",
      "parameters": [
        "StringBuilder& sb",
        "int value"
      ],
      "return_type": "StringBuilder&",
      "logic": "Appends a signed integer to the StringBuilder.  Handles negative numbers correctly."
    }
  ]
}