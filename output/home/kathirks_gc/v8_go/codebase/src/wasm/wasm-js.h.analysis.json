{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-js.h",
  "imports": [
    "memory",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "WasmJs",
      "properties": [],
      "methods": [
        {
          "name": "PrepareForSnapshot",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Creates all API objects before the snapshot is serialized. Used for serialization of the V8 heap to save startup time."
        },
        {
          "name": "Install",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Finalizes API object setup, including installing the WebAssembly object on the global object and creating API objects and properties based on runtime-enabled flags."
        },
        {
          "name": "InstallConditionalFeatures",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<NativeContext> context"
          ],
          "return_type": "void",
          "logic": "Extends the API based on late-enabled features, likely from origin trials, providing more experimental WebAssembly features."
        },
        {
          "name": "InstallModule",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSObject> webassembly"
          ],
          "return_type": "void",
          "logic": "Installs the WebAssembly.Module object on the given `webassembly` object."
        },
        {
          "name": "InstallMemoryControl",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<NativeContext> context",
            "DirectHandle<JSObject> webassembly"
          ],
          "return_type": "void",
          "logic": "Installs WebAssembly memory control functionalities related to the `webassembly` object."
        },
        {
          "name": "InstallTypeReflection",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<NativeContext> context",
            "DirectHandle<JSObject> webassembly"
          ],
          "return_type": "bool",
          "logic": "Installs WebAssembly type reflection functionalities related to the `webassembly` object. Returns a boolean indicating success."
        },
        {
          "name": "InstallJSPromiseIntegration",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<NativeContext> context",
            "DirectHandle<JSObject> webassembly"
          ],
          "return_type": "bool",
          "logic": "Installs JavaScript Promise integration functionalities related to the `webassembly` object. Returns a boolean indicating success."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "StartStreamingForTesting",
      "parameters": [
        "Isolate*",
        "std::shared_ptr<wasm::CompilationResultResolver>"
      ],
      "return_type": "std::unique_ptr<WasmStreaming>",
      "logic": "Starts streaming WebAssembly compilation for testing purposes. Takes an Isolate and CompilationResultResolver as input and returns a unique pointer to a WasmStreaming object."
    },
    {
      "name": "WebAssemblyCompile",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.compile. It compiles a WebAssembly module."
    },
    {
      "name": "WebAssemblyException",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly exception constructor."
    },
    {
      "name": "WebAssemblyExceptionGetArg",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function to get argument of a WebAssembly Exception"
    },
    {
      "name": "WebAssemblyExceptionIs",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function to check if a value is a WebAssembly Exception"
    },
    {
      "name": "WebAssemblyGlobal",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Global."
    },
    {
      "name": "WebAssemblyGlobalGetValue",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Global.prototype.valueOf."
    },
    {
      "name": "WebAssemblyGlobalSetValue",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing the set operation on WebAssembly.Global."
    },
    {
      "name": "WebAssemblyGlobalValueOf",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Global.prototype.valueOf."
    },
    {
      "name": "WebAssemblyInstance",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Instance."
    },
    {
      "name": "WebAssemblyInstanceGetExports",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function to get exports of a WebAssembly Instance"
    },
    {
      "name": "WebAssemblyInstantiate",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.instantiate."
    },
    {
      "name": "WebAssemblyMemory",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Memory."
    },
    {
      "name": "WebAssemblyMemoryMapDescriptor",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.MemoryMapDescriptor."
    },
    {
      "name": "WebAssemblyMemoryGetBuffer",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Memory.prototype.buffer getter."
    },
    {
      "name": "WebAssemblyMemoryGrow",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Memory.prototype.grow."
    },
    {
      "name": "WebAssemblyMemoryMapDescriptorMap",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.MemoryMapDescriptor.prototype.map"
    },
    {
      "name": "WebAssemblyMemoryMapDescriptorUnmap",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.MemoryMapDescriptor.prototype.unmap"
    },
    {
      "name": "WebAssemblyModule",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Module."
    },
    {
      "name": "WebAssemblyModuleCustomSections",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function to get custom sections of a WebAssembly Module"
    },
    {
      "name": "WebAssemblyModuleExports",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function to get exports of a WebAssembly Module"
    },
    {
      "name": "WebAssemblyModuleImports",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function to get imports of a WebAssembly Module"
    },
    {
      "name": "WebAssemblyTable",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Table."
    },
    {
      "name": "WebAssemblyTableGet",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Table.prototype.get."
    },
    {
      "name": "WebAssemblyTableGetLength",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Table.prototype.length getter."
    },
    {
      "name": "WebAssemblyTableGrow",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Table.prototype.grow."
    },
    {
      "name": "WebAssemblyTableSet",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Table.prototype.set."
    },
    {
      "name": "WebAssemblyTag",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.Tag."
    },
    {
      "name": "WebAssemblySuspending",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly suspending operations."
    },
    {
      "name": "WebAssemblyValidate",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Native function implementing WebAssembly.validate."
    }
  ]
}