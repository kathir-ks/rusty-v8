{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/module-decoder-impl.h",
  "imports": [
    "src/base/platform/wrappers.h",
    "src/logging/counters.h",
    "src/strings/unicode.h",
    "src/utils/ostreams.h",
    "src/wasm/canonical-types.h",
    "src/wasm/constant-expression-interface.h",
    "src/wasm/function-body-decoder-impl.h",
    "src/wasm/module-decoder.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-subtyping.h",
    "src/wasm/well-known-imports.h"
  ],
  "classes": [
    {
      "name": "WasmSectionIterator",
      "properties": [
        "decoder_",
        "tracer_",
        "section_code_",
        "section_start_",
        "payload_start_",
        "section_end_"
      ],
      "methods": [
        {
          "name": "WasmSectionIterator",
          "parameters": [
            "Decoder* decoder",
            "ITracer* tracer"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the iterator with a decoder and tracer and advances to the first section."
        },
        {
          "name": "more",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are more sections to iterate over."
        },
        {
          "name": "section_code",
          "parameters": [],
          "return_type": "SectionCode",
          "logic": "Returns the section code of the current section."
        },
        {
          "name": "section_start",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns a pointer to the beginning of the current section."
        },
        {
          "name": "section_length",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the length of the current section."
        },
        {
          "name": "payload",
          "parameters": [],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Returns a vector containing the payload of the current section."
        },
        {
          "name": "payload_start",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns a pointer to the beginning of the payload of the current section."
        },
        {
          "name": "payload_length",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the length of the payload of the current section."
        },
        {
          "name": "section_end",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns a pointer to the end of the current section."
        },
        {
          "name": "advance",
          "parameters": [
            "bool move_to_section_end = false"
          ],
          "return_type": "void",
          "logic": "Advances the iterator to the next section, ensuring that decoding the current section stopped at the expected end."
        },
        {
          "name": "next",
          "parameters": [],
          "return_type": "void",
          "logic": "Reads the section code/name at the current position and sets up the embedder fields. Skips unknown sections."
        }
      ]
    },
    {
      "name": "ModuleDecoderImpl",
      "properties": [
        "enabled_features_",
        "detected_features_",
        "module_",
        "module_start_",
        "module_end_",
        "tracer_",
        "seen_unordered_sections_",
        "next_ordered_section_",
        "inst_traces_",
        "init_expr_zone_"
      ],
      "methods": [
        {
          "name": "ModuleDecoderImpl",
          "parameters": [
            "WasmEnabledFeatures enabled_features",
            "base::Vector<const uint8_t> wire_bytes",
            "ModuleOrigin origin",
            "WasmDetectedFeatures* detected_features",
            "ITracer* tracer = ITracer::NoTrace"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the decoder with enabled features, wire bytes, origin, detected features, and a tracer."
        },
        {
          "name": "onFirstError",
          "parameters": [],
          "return_type": "void",
          "logic": "Overrides Decoder::onFirstError. Terminates section decoding loop on error."
        },
        {
          "name": "DecodeModuleHeader",
          "parameters": [
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "void",
          "logic": "Decodes the WebAssembly module header (magic word and version)."
        },
        {
          "name": "CheckSectionOrder",
          "parameters": [
            "SectionCode section_code"
          ],
          "return_type": "bool",
          "logic": "Checks the order of sections according to WebAssembly specification. Returns false if the section order is invalid."
        },
        {
          "name": "DecodeSection",
          "parameters": [
            "SectionCode section_code",
            "base::Vector<const uint8_t> bytes",
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Decodes a specific WebAssembly section based on its section code."
        },
        {
          "name": "TypeKindName",
          "parameters": [
            "uint8_t kind"
          ],
          "return_type": "const char*",
          "logic": "Returns the name of the type kind based on the given kind code."
        },
        {
          "name": "consume_base_type_definition",
          "parameters": [],
          "return_type": "TypeDefinition",
          "logic": "Consumes and decodes a base type definition (function, struct, or array) without supertypes."
        },
        {
          "name": "consume_subtype_definition",
          "parameters": [
            "size_t current_type_index"
          ],
          "return_type": "TypeDefinition",
          "logic": "Consumes a type definition, either as a base type or as a subtype extending an existing type."
        },
        {
          "name": "DecodeTypeSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the type section, defining function signatures, structs, and arrays."
        },
        {
          "name": "FinalizeRecgroup",
          "parameters": [
            "uint32_t group_size",
            "TypeCanonicalizer* type_canon"
          ],
          "return_type": "void",
          "logic": "Finalizes a recursive type group by performing subtyping checks, propagating depths, and canonicalizing the types."
        },
        {
          "name": "DecodeImportSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the import section, defining external functions, tables, memories, and globals imported into the module."
        },
        {
          "name": "DecodeFunctionSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the function section, assigning function signatures to function indices."
        },
        {
          "name": "DecodeTableSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the table section, defining indirect function call tables."
        },
        {
          "name": "DecodeMemorySection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the memory section, defining linear memories."
        },
        {
          "name": "UpdateComputedMemoryInformation",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates computed memory information, such as maximum size, for each memory."
        },
        {
          "name": "DecodeGlobalSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the global section, defining global variables and their initial values."
        },
        {
          "name": "DecodeExportSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the export section, defining functions, tables, memories, and globals exported from the module."
        },
        {
          "name": "DecodeStartSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the start section, defining the function to be executed when the module is instantiated."
        },
        {
          "name": "DecodeElementSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the element section, defining segments that initialize tables."
        },
        {
          "name": "DecodeCodeSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the code section, defining function bodies."
        },
        {
          "name": "StartCodeSection",
          "parameters": [
            "WireBytesRef section_bytes"
          ],
          "return_type": "void",
          "logic": "Start processing code section after module is complete"
        },
        {
          "name": "CheckFunctionsCount",
          "parameters": [
            "uint32_t functions_count",
            "uint32_t error_offset"
          ],
          "return_type": "bool",
          "logic": "Check the count of function bodies to match declared value"
        },
        {
          "name": "DecodeFunctionBody",
          "parameters": [
            "uint32_t func_index",
            "uint32_t length",
            "uint32_t offset"
          ],
          "return_type": "void",
          "logic": "Stores the offset and length for the bytecode of a function."
        },
        {
          "name": "CheckDataSegmentsCount",
          "parameters": [
            "uint32_t data_segments_count"
          ],
          "return_type": "bool",
          "logic": "Checks declared number of data segments against what's actually defined"
        },
        {
          "name": "DecodeDataSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the data section, defining data segments that initialize linear memory."
        },
        {
          "name": "DecodeNameSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the name section, providing debug names for functions, locals, and the module."
        },
        {
          "name": "DecodeSourceMappingURLSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the source mapping URL section, to provide source mapping information"
        },
        {
          "name": "DecodeExternalDebugInfoSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the external debug info section, to provide DWARF info"
        },
        {
          "name": "DecodeBuildIdSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the build ID section."
        },
        {
          "name": "DecodeInstTraceSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the instruction trace custom section used for debug logging"
        },
        {
          "name": "DecodeCompilationHintsSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the compilation hints custom section to guide compilation pipeline"
        },
        {
          "name": "DecodeBranchHintsSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the branch hints custom section to inform branch prediction"
        },
        {
          "name": "DecodeDataCountSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the data count section, indicating the number of data segments."
        },
        {
          "name": "DecodeTagSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the tag section, indicating declared tags."
        },
        {
          "name": "DecodeStringRefSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the string ref section, defining string literals"
        },
        {
          "name": "CheckMismatchedCounts",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks for consistency issues related to section ordering/mismatched counts"
        },
        {
          "name": "FinishDecoding",
          "parameters": [],
          "return_type": "ModuleResult",
          "logic": "Completes the module decoding process, setting up global offsets and returning result of module creation."
        },
        {
          "name": "DecodeModule",
          "parameters": [
            "bool validate_functions"
          ],
          "return_type": "ModuleResult",
          "logic": "Decodes an entire WebAssembly module."
        },
        {
          "name": "DecodeSingleFunctionForTesting",
          "parameters": [
            "Zone* zone",
            "ModuleWireBytes wire_bytes",
            "const WasmModule* module"
          ],
          "return_type": "FunctionResult",
          "logic": "Decodes a single anonymous function (for testing purposes)."
        },
        {
          "name": "DecodeFunctionSignatureForTesting",
          "parameters": [
            "Zone* zone",
            "const uint8_t* start"
          ],
          "return_type": "const FunctionSig*",
          "logic": "Decodes a single function signature (for testing purposes)."
        },
        {
          "name": "DecodeInitExprForTesting",
          "parameters": [
            "ValueType expected"
          ],
          "return_type": "ConstantExpression",
          "logic": "Decodes an initialization expression used in globals or element segments (for testing purposes)."
        },
        {
          "name": "consume_element_segment_entry",
          "parameters": [
            "WasmModule* module",
            "const WasmElemSegment& segment"
          ],
          "return_type": "ConstantExpression",
          "logic": "Consume single entry in element segment"
        },
        {
          "name": "shared_module",
          "parameters": [],
          "return_type": "const std::shared_ptr<WasmModule>&",
          "logic": "Returns the shared pointer holding the WasmModule."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ExternalKindName",
      "parameters": [
        "ImportExportKindCode kind"
      ],
      "return_type": "const char*",
      "logic": "Returns the string representation of an external kind (function, table, memory, global)."
    },
    {
      "name": "validate_utf8",
      "parameters": [
        "Decoder* decoder",
        "WireBytesRef string"
      ],
      "return_type": "bool",
      "logic": "Validates that the given string is a valid UTF-8 encoded string."
    },
    {
      "name": "consume_string",
      "parameters": [
        "Decoder* decoder",
        "unibrow::Utf8Variant grammar",
        "const char* name",
        "ITracer* tracer"
      ],
      "return_type": "WireBytesRef",
      "logic": "Reads a length-prefixed string from the decoder, checks its bounds, and returns the offset and length."
    },
    {
      "name": "consume_string",
      "parameters": [
        "Decoder* decoder",
        "unibrow::Utf8Variant grammar",
        "const char* name"
      ],
      "return_type": "WireBytesRef",
      "logic": "Reads a length-prefixed string from the decoder, checks its bounds, and returns the offset and length. This version uses ITracer::NoTrace"
    },
    {
      "name": "consume_utf8_string",
      "parameters": [
        "Decoder* decoder",
        "const char* name",
        "ITracer* tracer"
      ],
      "return_type": "WireBytesRef",
      "logic": "Consumes a UTF-8 string.  A wrapper around consume_string."
    },
    {
      "name": "IdentifyUnknownSectionInternal",
      "parameters": [
        "Decoder* decoder",
        "ITracer* tracer"
      ],
      "return_type": "SectionCode",
      "logic": "Identifies an unknown section by checking its name against known custom section names (e.g., 'name', 'sourceMappingURL')."
    },
    {
      "name": "DumpModule",
      "parameters": [
        "const base::Vector<const uint8_t> module_bytes",
        "bool ok"
      ],
      "return_type": "void",
      "logic": "Dumps the WebAssembly module to a file for debugging purposes."
    }
  ]
}