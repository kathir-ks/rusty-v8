{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/wasm-interpreter-runtime.cc",
  "imports": [
    "src/wasm/interpreter/wasm-interpreter-runtime.h",
    "<optional>",
    "src/base/platform/time.h",
    "src/execution/frames-inl.h",
    "src/execution/isolate.h",
    "src/objects/managed-inl.h",
    "src/runtime/runtime-utils.h",
    "src/wasm/canonical-types.h",
    "src/wasm/interpreter/wasm-interpreter-objects-inl.h",
    "src/wasm/interpreter/wasm-interpreter-runtime-inl.h",
    "src/wasm/wasm-arguments.h",
    "src/wasm/wasm-opcodes-inl.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "ValueTypes",
      "properties": [],
      "methods": [
        {
          "name": "ElementSizeInBytes",
          "parameters": [
            "ValueType type"
          ],
          "return_type": "int",
          "logic": "Returns the size in bytes of a given Wasm value type.  Uses a switch statement on type.kind() to determine the size."
        }
      ]
    },
    {
      "name": "IndirectFunctionTableEntry",
      "properties": [
        "table_",
        "index_"
      ],
      "methods": [
        {
          "name": "IndirectFunctionTableEntry",
          "parameters": [
            "DirectHandle<WasmInstanceObject>",
            "int table_index",
            "int entry_index"
          ],
          "return_type": "inline",
          "logic": "Constructor for the IndirectFunctionTableEntry.  Initializes the table_ and index_ members. Fetches dispatch table based on table_index and isolate."
        },
        {
          "name": "implicit_arg",
          "parameters": [],
          "return_type": "Tagged<Object>",
          "logic": "Returns the implicit argument from the dispatch table entry."
        },
        {
          "name": "sig_id",
          "parameters": [],
          "return_type": "wasm::CanonicalTypeIndex",
          "logic": "Returns the signature ID from the dispatch table entry."
        },
        {
          "name": "target",
          "parameters": [],
          "return_type": "WasmCodePointer",
          "logic": "Returns the code pointer for the function in the dispatch table entry."
        },
        {
          "name": "function_index",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the function index from the dispatch table entry."
        }
      ]
    },
    {
      "name": "WasmInterpreterRuntime",
      "properties": [
        "isolate_",
        "module_",
        "instance_object_",
        "codemap_",
        "start_function_index_",
        "trap_function_index_",
        "trap_pc_",
        "current_thread_",
        "fuzzer_start_time_",
        "memory_start_",
        "instruction_table_",
        "generic_wasm_to_js_interpreter_wrapper_fn_",
        "global_addresses_",
        "indirect_call_tables_"
      ],
      "methods": [
        {
          "name": "WasmInterpreterRuntime",
          "parameters": [
            "const WasmModule* module",
            "Isolate* isolate",
            "DirectHandle<WasmInstanceObject> instance_object",
            "WasmInterpreter::CodeMap* codemap"
          ],
          "return_type": "void",
          "logic": "Constructor for the WasmInterpreterRuntime class. Initializes various members, including global address cache, memory addresses, and indirect function tables, and the address of the GenericWasmToJSInterpreterWrapper builtin."
        },
        {
          "name": "InitGlobalAddressCache",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the global address cache with the storage locations of global variables from the Wasm module."
        },
        {
          "name": "UpdateMemoryAddress",
          "parameters": [
            "DirectHandle<WasmInstanceObject> instance"
          ],
          "return_type": "static void",
          "logic": "Updates the memory address in the WasmInterpreterRuntime based on the current memory object in the WasmInstanceObject."
        },
        {
          "name": "MemoryGrow",
          "parameters": [
            "uint32_t delta_pages"
          ],
          "return_type": "int32_t",
          "logic": "Grows the Wasm memory by the specified number of pages.  Calls WasmMemoryObject::Grow, and updates memory addresses.  Handles JS exceptions."
        },
        {
          "name": "InitIndirectFunctionTables",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the indirect function call tables. Calls PurgeIndirectCallCache for each table."
        },
        {
          "name": "TableGet",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t table_index",
            "uint32_t entry_index",
            "DirectHandle<Object>* result"
          ],
          "return_type": "bool",
          "logic": "Retrieves an entry from a Wasm table, checking bounds and handling traps."
        },
        {
          "name": "TableSet",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t table_index",
            "uint32_t entry_index",
            "DirectHandle<Object> ref"
          ],
          "return_type": "void",
          "logic": "Sets an entry in a Wasm table, checking bounds and handling traps."
        },
        {
          "name": "TableInit",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t table_index",
            "uint32_t element_segment_index",
            "uint32_t dst",
            "uint32_t src",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Initializes a Wasm table with data from an element segment, checking bounds and handling traps. Calls WasmTrustedInstanceData::InitTableEntries."
        },
        {
          "name": "TableCopy",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t dst_table_index",
            "uint32_t src_table_index",
            "uint32_t dst",
            "uint32_t src",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Copies entries from one Wasm table to another, checking bounds and handling traps. Calls WasmTrustedInstanceData::CopyTableEntries."
        },
        {
          "name": "TableGrow",
          "parameters": [
            "uint32_t table_index",
            "uint32_t delta",
            "DirectHandle<Object> value"
          ],
          "return_type": "uint32_t",
          "logic": "Grows a Wasm table by the specified delta, filling new entries with the given value. Uses WasmTableObject::Grow"
        },
        {
          "name": "TableSize",
          "parameters": [
            "uint32_t table_index"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the current size of a Wasm table."
        },
        {
          "name": "TableFill",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t table_index",
            "uint32_t count",
            "DirectHandle<Object> value",
            "uint32_t start"
          ],
          "return_type": "void",
          "logic": "Fills a range of entries in a Wasm table with a given value, checking bounds and handling traps. WasmTableObject::Fill"
        },
        {
          "name": "MemoryInit",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t data_segment_index",
            "uint64_t dst",
            "uint64_t src",
            "uint64_t size"
          ],
          "return_type": "bool",
          "logic": "Initializes a memory region from a data segment, checking bounds and handling traps."
        },
        {
          "name": "MemoryCopy",
          "parameters": [
            "const uint8_t*& current_code",
            "uint64_t dst",
            "uint64_t src",
            "uint64_t size"
          ],
          "return_type": "bool",
          "logic": "Copies a memory region from one location to another, checking bounds and handling traps."
        },
        {
          "name": "MemoryFill",
          "parameters": [
            "const uint8_t*& current_code",
            "uint64_t dst",
            "uint32_t value",
            "uint64_t size"
          ],
          "return_type": "bool",
          "logic": "Fills a memory region with a given value, checking bounds and handling traps."
        },
        {
          "name": "UnpackException",
          "parameters": [
            "uint32_t* sp",
            "const WasmTag& tag",
            "DirectHandle<Object> exception_object",
            "uint32_t first_param_slot_index",
            "uint32_t first_param_ref_stack_index"
          ],
          "return_type": "void",
          "logic": "Unpacks the values encoded in the given exception and pushes them onto the operand stack."
        },
        {
          "name": "CreateWasmExceptionPackage",
          "parameters": [
            "uint32_t tag_index"
          ],
          "return_type": "DirectHandle<WasmExceptionPackage>",
          "logic": "Allocate a new exception package given the tag_index"
        },
        {
          "name": "ThrowException",
          "parameters": [
            "const uint8_t*& code",
            "uint32_t* sp",
            "Tagged<Object> exception_object"
          ],
          "return_type": "void",
          "logic": "Throw a wasm exception."
        },
        {
          "name": "RethrowException",
          "parameters": [
            "const uint8_t*& code",
            "uint32_t* sp",
            "uint32_t catch_block_index"
          ],
          "return_type": "void",
          "logic": "Rethrow a given exception caught by the catch block specified."
        },
        {
          "name": "HandleException",
          "parameters": [
            "uint32_t* sp",
            "const uint8_t*& current_code"
          ],
          "return_type": "WasmInterpreterThread::ExceptionHandlingResult",
          "logic": "Handle a thrown exception. Returns whether the exception was handled inside of wasm. Unwinds the interpreted stack accordingly."
        },
        {
          "name": "AllowsAtomicsWait",
          "parameters": [],
          "return_type": "bool",
          "logic": "Check if atomics wait is allowed."
        },
        {
          "name": "AtomicNotify",
          "parameters": [
            "uint64_t buffer_offset",
            "int32_t val"
          ],
          "return_type": "int32_t",
          "logic": "Wrapper around FutexEmulation::Wake."
        },
        {
          "name": "I32AtomicWait",
          "parameters": [
            "uint64_t buffer_offset",
            "int32_t val",
            "int64_t timeout"
          ],
          "return_type": "int32_t",
          "logic": "Wrapper around FutexEmulation::WaitWasm32."
        },
        {
          "name": "I64AtomicWait",
          "parameters": [
            "uint64_t buffer_offset",
            "int64_t val",
            "int64_t timeout"
          ],
          "return_type": "int32_t",
          "logic": "Wrapper around FutexEmulation::WaitWasm64."
        },
        {
          "name": "BeginExecution",
          "parameters": [
            "WasmInterpreterThread* thread",
            "uint32_t func_index",
            "Address frame_pointer",
            "uint8_t* interpreter_fp",
            "uint32_t ref_stack_offset",
            "const std::vector<WasmValue>* argument_values"
          ],
          "return_type": "void",
          "logic": "Initializes the execution environment for a new Wasm function call."
        },
        {
          "name": "ContinueExecution",
          "parameters": [
            "WasmInterpreterThread* thread",
            "bool called_from_js"
          ],
          "return_type": "void",
          "logic": "Continues the execution of a Wasm function after initialization."
        },
        {
          "name": "StoreWasmRef",
          "parameters": [
            "uint32_t ref_stack_index",
            "const WasmRef& ref"
          ],
          "return_type": "void",
          "logic": "Stores a Wasm reference into the reference stack."
        },
        {
          "name": "ExtractWasmRef",
          "parameters": [
            "uint32_t ref_stack_index"
          ],
          "return_type": "WasmRef",
          "logic": "Extracts a Wasm reference from the reference stack."
        },
        {
          "name": "UnwindCurrentStackFrame",
          "parameters": [
            "uint32_t* sp",
            "uint32_t slot_offset",
            "uint32_t rets_size",
            "uint32_t args_size",
            "uint32_t rets_refs",
            "uint32_t args_refs",
            "uint32_t ref_stack_fp_offset"
          ],
          "return_type": "void",
          "logic": "Unwinds the current interpreter stack frame for a tail call."
        },
        {
          "name": "StoreRefArgsIntoStackSlots",
          "parameters": [
            "uint8_t* sp",
            "uint32_t ref_stack_fp_offset",
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Stores Ref arguments from reference stack into stack slots"
        },
        {
          "name": "StoreRefResultsIntoRefStack",
          "parameters": [
            "uint8_t* sp",
            "uint32_t ref_stack_fp_offset",
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Stores Ref results into ref stack"
        },
        {
          "name": "ExecuteImportedFunction",
          "parameters": [
            "const uint8_t*& code",
            "uint32_t func_index",
            "uint32_t current_stack_size",
            "uint32_t ref_stack_fp_offset",
            "uint32_t slot_offset",
            "uint32_t return_slot_offset",
            "bool is_tail_call"
          ],
          "return_type": "void",
          "logic": "Executes an imported Wasm function."
        },
        {
          "name": "InitializeRefLocalsRefs",
          "parameters": [
            "const WasmBytecode* target_function"
          ],
          "return_type": "void",
          "logic": "Initializes the values of locals of type ref (externref, funcref)."
        },
        {
          "name": "PrepareTailCall",
          "parameters": [
            "const uint8_t*& code",
            "uint32_t func_index",
            "uint32_t current_stack_size",
            "uint32_t return_slot_offset"
          ],
          "return_type": "void",
          "logic": "Prepares current frame for a tail call to a given function"
        },
        {
          "name": "ExecuteFunction",
          "parameters": [
            "const uint8_t*& code",
            "uint32_t func_index",
            "uint32_t current_stack_size",
            "uint32_t ref_stack_fp_offset",
            "uint32_t slot_offset",
            "uint32_t return_slot_offset"
          ],
          "return_type": "void",
          "logic": "Executes an internal Wasm function."
        },
        {
          "name": "PurgeIndirectCallCache",
          "parameters": [
            "uint32_t table_index"
          ],
          "return_type": "void",
          "logic": "Purges the indirect call cache for a given table."
        },
        {
          "name": "ClearIndirectCallCacheEntry",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmInstanceObject> instance",
            "uint32_t table_index",
            "uint32_t entry_index"
          ],
          "return_type": "static void",
          "logic": "Clears the cached entry for a given table index/entry index"
        },
        {
          "name": "UpdateIndirectCallTable",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmInstanceObject> instance",
            "uint32_t table_index"
          ],
          "return_type": "static void",
          "logic": "Updates indirect call table"
        },
        {
          "name": "CheckIndirectCallSignature",
          "parameters": [
            "uint32_t table_index",
            "uint32_t entry_index",
            "uint32_t sig_index"
          ],
          "return_type": "bool",
          "logic": "Check indirect call signature."
        },
        {
          "name": "ExecuteIndirectCall",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t table_index",
            "uint32_t sig_index",
            "uint32_t entry_index",
            "uint32_t stack_pos",
            "uint32_t* sp",
            "uint32_t ref_stack_fp_offset",
            "uint32_t slot_offset",
            "uint32_t return_slot_offset",
            "bool is_tail_call"
          ],
          "return_type": "void",
          "logic": "Executes an indirect call to a Wasm function."
        },
        {
          "name": "ExecuteCallRef",
          "parameters": [
            "const uint8_t*& current_code",
            "WasmRef func_ref",
            "uint32_t sig_index",
            "uint32_t stack_pos",
            "uint32_t* sp",
            "uint32_t ref_stack_fp_offset",
            "uint32_t slot_offset",
            "uint32_t return_slot_offset",
            "bool is_tail_call"
          ],
          "return_type": "void",
          "logic": "Executes a Wasm function using call_ref."
        },
        {
          "name": "CallImportedFunction",
          "parameters": [
            "const uint8_t*& current_code",
            "uint32_t function_index",
            "uint32_t* sp",
            "uint32_t current_stack_size",
            "uint32_t ref_stack_fp_offset",
            "uint32_t current_slot_offset"
          ],
          "return_type": "ExternalCallResult",
          "logic": "Calls an imported Wasm function."
        },
        {
          "name": "memory_start_offset",
          "parameters": [],
          "return_type": "static int",
          "logic": "Returns the offset of the member variable 'memory_start_' in the class."
        },
        {
          "name": "instruction_table_offset",
          "parameters": [],
          "return_type": "static int",
          "logic": "Returns the offset of the member variable 'instruction_table_' in the class."
        },
        {
          "name": "CallWasmToJSBuiltin",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Object> object_ref",
            "Address packed_args",
            "const FunctionSig* sig"
          ],
          "return_type": "void",
          "logic": "Calls a Wasm-to-JS builtin function."
        },
        {
          "name": "CallExternalJSFunction",
          "parameters": [
            "const uint8_t*& current_code",
            "const WasmModule* module",
            "DirectHandle<Object> object_ref",
            "const FunctionSig* sig",
            "uint32_t* sp",
            "uint32_t return_slot_offset"
          ],
          "return_type": "ExternalCallResult",
          "logic": "Calls an external JS function from Wasm code."
        },
        {
          "name": "RttCanon",
          "parameters": [
            "uint32_t type_index"
          ],
          "return_type": "DirectHandle<Map>",
          "logic": "Returns RttCanon at given type_index."
        },
        {
          "name": "StructNewUninitialized",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "std::pair<DirectHandle<WasmStruct>, const StructType*>",
          "logic": "Creates a new, uninitialized struct."
        },
        {
          "name": "ArrayNewUninitialized",
          "parameters": [
            "uint32_t length",
            "uint32_t array_index"
          ],
          "return_type": "std::pair<DirectHandle<WasmArray>, const ArrayType*>",
          "logic": "Creates a new, uninitialized array."
        },
        {
          "name": "WasmArrayNewSegment",
          "parameters": [
            "uint32_t array_index",
            "uint32_t segment_index",
            "uint32_t offset",
            "uint32_t length"
          ],
          "return_type": "WasmRef",
          "logic": "Creates a new array from segment."
        },
        {
          "name": "WasmArrayInitSegment",
          "parameters": [
            "uint32_t segment_index",
            "WasmRef wasm_array",
            "uint32_t array_offset",
            "uint32_t segment_offset",
            "uint32_t length"
          ],
          "return_type": "bool",
          "logic": "Initializes given segment with array copy."
        },
        {
          "name": "WasmArrayCopy",
          "parameters": [
            "WasmRef dest_wasm_array",
            "uint32_t dest_index",
            "WasmRef src_wasm_array",
            "uint32_t src_index",
            "uint32_t length"
          ],
          "return_type": "bool",
          "logic": "Initializes given segment with array copy."
        },
        {
          "name": "WasmJSToWasmObject",
          "parameters": [
            "WasmRef extern_ref",
            "ValueType value_type",
            "uint32_t canonical_index"
          ],
          "return_type": "WasmRef",
          "logic": "Converts JS object into Wasm object if needed."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FindInterpreterEntryFramePointer",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "Address",
      "logic": "Finds the frame pointer of the interpreter frame on the stack by iterating through the stack frames."
    },
    {
      "name": "Runtime_WasmRunInterpreter",
      "parameters": [
        "const int args_length",
        "Address* args_pointer"
      ],
      "return_type": "Address",
      "logic": "The runtime function called to run the Wasm interpreter. It retrieves arguments from the stack, sets up the execution environment, and calls the interpreter."
    },
    {
      "name": "GetInterpreterHandle",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<Tuple2> interpreter_object"
      ],
      "return_type": "InterpreterHandle*",
      "logic": "Retrieves the InterpreterHandle from the given WasmInterpreterObject."
    },
    {
      "name": "GetOrCreateInterpreterHandle",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<Tuple2> interpreter_object"
      ],
      "return_type": "InterpreterHandle*",
      "logic": "Retrieves the InterpreterHandle from the given WasmInterpreterObject, or creates it if it doesn't exist."
    },
    {
      "name": "RedirectCodeToUnwindHandler",
      "parameters": [
        "const uint8_t*& code"
      ],
      "return_type": "void",
      "logic": "Resumes execution from s2s_Unwind, which unwinds the Wasm stack frames"
    }
  ]
}