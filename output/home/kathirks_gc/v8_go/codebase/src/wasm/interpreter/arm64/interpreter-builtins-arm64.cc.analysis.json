{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/arm64/interpreter-builtins-arm64.cc",
  "imports": [
    "src/codegen/code-factory.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/macro-assembler-inl.h",
    "src/codegen/register-configuration.h",
    "src/codegen/signature.h",
    "src/execution/frame-constants.h",
    "src/execution/isolate.h",
    "src/wasm/interpreter/wasm-interpreter-runtime.h",
    "src/wasm/object-access.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "RegisterAllocator",
      "properties": [
        "allocated_registers_",
        "initial_",
        "available_"
      ],
      "methods": [
        {
          "name": "Ask",
          "parameters": [
            "Register* reg"
          ],
          "return_type": "void",
          "logic": "Allocates a register from the available pool and assigns it to the provided register pointer."
        },
        {
          "name": "Pinned",
          "parameters": [
            "const Register& requested",
            "Register* reg"
          ],
          "return_type": "void",
          "logic": "Pins a requested register, marking it as used and assigning it to the provided register pointer."
        },
        {
          "name": "Free",
          "parameters": [
            "Register* reg"
          ],
          "return_type": "void",
          "logic": "Frees a previously allocated register, making it available for future allocation."
        },
        {
          "name": "Reserve",
          "parameters": [
            "const Register& reg"
          ],
          "return_type": "void",
          "logic": "Reserves a register, preventing it from being allocated."
        },
        {
          "name": "Reserve",
          "parameters": [
            "const Register& reg1",
            "const Register& reg2",
            "const Register& reg3",
            "const Register& reg4",
            "const Register& reg5",
            "const Register& reg6"
          ],
          "return_type": "void",
          "logic": "Reserves multiple registers, preventing them from being allocated."
        },
        {
          "name": "IsUsed",
          "parameters": [
            "const Register& reg"
          ],
          "return_type": "bool",
          "logic": "Checks if a given register is currently in use."
        },
        {
          "name": "ResetExcept",
          "parameters": [
            "const Register& reg1",
            "const Register& reg2",
            "const Register& reg3",
            "const Register& reg4",
            "const Register& reg5",
            "const Register& reg6",
            "const Register& reg7"
          ],
          "return_type": "void",
          "logic": "Resets the allocator, making all registers available except for the specified registers."
        },
        {
          "name": "WithAllocatableGeneralRegisters",
          "parameters": [],
          "return_type": "RegisterAllocator",
          "logic": "Static method to create a RegisterAllocator with a specific set of general purpose registers for allocation."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "PrepareForJsToWasmConversionBuiltinCall",
      "parameters": [
        "MacroAssembler* masm",
        "Register current_param_slot",
        "Register valuetypes_array_ptr",
        "Register wasm_instance",
        "Register function_data"
      ],
      "return_type": "void",
      "logic": "Prepares the stack for a built-in call during JS to WASM conversion by pushing parameters onto the stack and setting the GC scan count."
    },
    {
      "name": "RestoreAfterJsToWasmConversionBuiltinCall",
      "parameters": [
        "MacroAssembler* masm",
        "Register function_data",
        "Register wasm_instance",
        "Register valuetypes_array_ptr",
        "Register current_param_slot"
      ],
      "return_type": "void",
      "logic": "Restores registers from the stack after a built-in call during JS to WASM conversion and resets the GC scan count."
    },
    {
      "name": "PrepareForBuiltinCall",
      "parameters": [
        "MacroAssembler* masm",
        "Register array_start",
        "Register return_count",
        "Register wasm_instance"
      ],
      "return_type": "void",
      "logic": "Prepares the stack for a built-in call by pushing parameters onto the stack and setting the GC scan count."
    },
    {
      "name": "RestoreAfterBuiltinCall",
      "parameters": [
        "MacroAssembler* masm",
        "Register wasm_instance",
        "Register return_count",
        "Register array_start"
      ],
      "return_type": "void",
      "logic": "Restores registers from the stack after a built-in call."
    },
    {
      "name": "PrepareForWasmToJsConversionBuiltinCall",
      "parameters": [
        "MacroAssembler* masm",
        "Register return_count",
        "Register result_index",
        "Register current_return_slot",
        "Register valuetypes_array_ptr",
        "Register wasm_instance",
        "Register fixed_array",
        "Register jsarray"
      ],
      "return_type": "void",
      "logic": "Prepares the stack for a built-in call during WASM to JS conversion by pushing parameters onto the stack and setting the GC scan count."
    },
    {
      "name": "RestoreAfterWasmToJsConversionBuiltinCall",
      "parameters": [
        "MacroAssembler* masm",
        "Register jsarray",
        "Register fixed_array",
        "Register wasm_instance",
        "Register valuetypes_array_ptr",
        "Register current_return_slot",
        "Register result_index",
        "Register return_count"
      ],
      "return_type": "void",
      "logic": "Restores registers from the stack after a built-in call during WASM to JS conversion."
    },
    {
      "name": "Builtins::Generate_WasmInterpreterEntry",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Generates the code for the Wasm interpreter entry point, sets up the stack frame, calls the runtime to execute the interpreter, and deconstructs the stack frame."
    },
    {
      "name": "LoadFunctionDataAndWasmInstance",
      "parameters": [
        "MacroAssembler* masm",
        "Register function_data",
        "Register wasm_instance"
      ],
      "return_type": "void",
      "logic": "Loads the function data and WASM instance from the provided registers."
    },
    {
      "name": "LoadFromSignature",
      "parameters": [
        "MacroAssembler* masm",
        "Register valuetypes_array_ptr",
        "Register return_count",
        "Register param_count"
      ],
      "return_type": "void",
      "logic": "Loads data from the function signature object."
    },
    {
      "name": "LoadValueTypesArray",
      "parameters": [
        "MacroAssembler* masm",
        "Register function_data",
        "Register valuetypes_array_ptr",
        "Register return_count",
        "Register param_count",
        "Register signature_data"
      ],
      "return_type": "void",
      "logic": "Loads the value types array from the WASM exported function data."
    },
    {
      "name": "Builtins::Generate_GenericJSToWasmInterpreterWrapper",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Generates the code for the generic JS to WASM interpreter wrapper, handles parameter conversion, calls the WASM interpreter, and handles return values."
    },
    {
      "name": "Builtins::Generate_WasmInterpreterCWasmEntry",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Generates the code for the WASM interpreter C entry point, sets up the stack frame, invokes the JS function through the GenericWasmToJSInterpreterWrapper and handles return values."
    },
    {
      "name": "Builtins::Generate_GenericWasmToJSInterpreterWrapper",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Generates the code for the generic WASM to JS interpreter wrapper, handles parameter conversion, calls the JS function, and handles return values."
    }
  ]
}