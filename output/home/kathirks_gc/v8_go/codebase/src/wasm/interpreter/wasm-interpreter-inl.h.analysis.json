{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/wasm-interpreter-inl.h",
  "imports": [
    "src/handles/handles-inl.h",
    "src/wasm/interpreter/wasm-interpreter-runtime.h",
    "src/wasm/interpreter/wasm-interpreter.h",
    "src/wasm/wasm-module.h"
  ],
  "classes": [
    {
      "name": "WasmInterpreter::CodeMap",
      "properties": [
        "interpreter_code_"
      ],
      "methods": [
        {
          "name": "GetCode",
          "parameters": [
            "uint32_t function_index"
          ],
          "return_type": "InterpreterCode*",
          "logic": "Retrieves an InterpreterCode object for a given function index from the interpreter_code_ vector. If the bytecode is missing but the start address is present, it preprocesses the function."
        },
        {
          "name": "GetFunctionBytecode",
          "parameters": [
            "uint32_t func_index"
          ],
          "return_type": "WasmBytecode*",
          "logic": "Retrieves the WasmBytecode object for a given function index.  It calls GetCode to potentially precompile the function before returning its bytecode."
        },
        {
          "name": "AddFunction",
          "parameters": [
            "const WasmFunction* function",
            "const uint8_t* code_start",
            "const uint8_t* code_end"
          ],
          "return_type": "void",
          "logic": "Adds a new function to the interpreter_code_ vector, creating a new InterpreterCode object with the given function, local declarations, and code boundaries."
        }
      ]
    },
    {
      "name": "WasmInterpreterThread::Activation",
      "properties": [
        "thread_",
        "wasm_runtime_",
        "frame_pointer_",
        "interpreter_fp_",
        "frame_state_"
      ],
      "methods": [
        {
          "name": "GetIsolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Retrieves the Isolate associated with the WasmInterpreterRuntime."
        }
      ]
    },
    {
      "name": "WasmInterpreterThread",
      "properties": [
        "activations_",
        "state_"
      ],
      "methods": [
        {
          "name": "StartActivation",
          "parameters": [
            "WasmInterpreterRuntime* wasm_runtime",
            "Address frame_pointer",
            "uint8_t* interpreter_fp",
            "const FrameState& frame_state"
          ],
          "return_type": "WasmInterpreterThread::Activation*",
          "logic": "Starts a new activation on the interpreter thread, creating a new Activation object and storing it in the activations_ vector. It also calls Run() and adds it to the activation list."
        },
        {
          "name": "FinishActivation",
          "parameters": [],
          "return_type": "void",
          "logic": "Finishes the current activation, removing it from the activations_ vector. If it was the last activation, it checks the state and calls Finish() if needed."
        },
        {
          "name": "GetCurrentActivationFor",
          "parameters": [
            "const WasmInterpreterRuntime* wasm_runtime"
          ],
          "return_type": "const FrameState*",
          "logic": "Iterates through the activations_ vector in reverse order to find the activation associated with the given WasmInterpreterRuntime and returns its current FrameState. Returns nullptr if no matching activation is found."
        }
      ]
    },
    {
      "name": "WasmInterpreter",
      "properties": [
        "codemap_",
        "wasm_runtime_"
      ],
      "methods": [
        {
          "name": "BeginExecution",
          "parameters": [
            "WasmInterpreterThread* thread",
            "uint32_t function_index",
            "Address frame_pointer",
            "uint8_t* interpreter_fp",
            "uint32_t ref_stack_offset",
            "const std::vector<WasmValue>& args"
          ],
          "return_type": "void",
          "logic": "Starts the execution of a Wasm function by retrieving its code from the codemap and calling the BeginExecution method of the wasm_runtime_."
        },
        {
          "name": "BeginExecution",
          "parameters": [
            "WasmInterpreterThread* thread",
            "uint32_t function_index",
            "Address frame_pointer",
            "uint8_t* interpreter_fp"
          ],
          "return_type": "void",
          "logic": "Overloaded version of BeginExecution that also retrievies the next reference stack offset from the thread."
        },
        {
          "name": "GetReturnValue",
          "parameters": [
            "int index"
          ],
          "return_type": "WasmValue",
          "logic": "Retrieves a return value from the wasm_runtime_ at the given index."
        },
        {
          "name": "GetInterpretedStack",
          "parameters": [
            "Address frame_pointer"
          ],
          "return_type": "std::vector<WasmInterpreterStackEntry>",
          "logic": "Retrieves the interpreted stack for a given frame pointer from the wasm_runtime_."
        },
        {
          "name": "GetFunctionIndex",
          "parameters": [
            "Address frame_pointer",
            "int index"
          ],
          "return_type": "int",
          "logic": "Retrieves the function index for a given frame pointer and index from the wasm_runtime_."
        },
        {
          "name": "SetTrapFunctionIndex",
          "parameters": [
            "int32_t func_index"
          ],
          "return_type": "void",
          "logic": "Sets the trap function index in the wasm_runtime_."
        }
      ]
    },
    {
      "name": "WasmBytecode",
      "properties": [
        "signature_",
        "interpreter_code_"
      ],
      "methods": [
        {
          "name": "return_type",
          "parameters": [
            "size_t index"
          ],
          "return_type": "ValueType",
          "logic": "Returns the return type at the specified index of the function signature."
        },
        {
          "name": "arg_type",
          "parameters": [
            "size_t index"
          ],
          "return_type": "ValueType",
          "logic": "Returns the argument type at the specified index of the function signature."
        },
        {
          "name": "local_type",
          "parameters": [
            "size_t index"
          ],
          "return_type": "ValueType",
          "logic": "Returns the local variable type at the specified index from the interpreter code's locals information."
        },
        {
          "name": "ArgsSizeInSlots",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the total size (in slots) required for all arguments based on their value kinds from the provided function signature."
        },
        {
          "name": "RetsSizeInSlots",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the total size (in slots) required for all return values based on their value kinds from the provided function signature."
        },
        {
          "name": "RefArgsCount",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "uint32_t",
          "logic": "Counts the number of reference type arguments in the given function signature."
        },
        {
          "name": "RefRetsCount",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "uint32_t",
          "logic": "Counts the number of reference type return values in the given function signature."
        },
        {
          "name": "ContainsSimd",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "bool",
          "logic": "Checks if the given function signature contains any SIMD128 (kS128) parameters or return values."
        },
        {
          "name": "HasRefOrSimdArgs",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "bool",
          "logic": "Checks if the given function signature contains any reference or SIMD128 type arguments."
        },
        {
          "name": "JSToWasmWrapperPackedArraySize",
          "parameters": [
            "const FunctionSig* sig"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the required size (in bytes) of a packed array used for passing arguments and return values between JavaScript and WebAssembly, considering alignment requirements for reference types and sizes of different value types (i32, f32, i64, f64, s128, Ref)."
        },
        {
          "name": "RefLocalsCount",
          "parameters": [
            "const InterpreterCode* wasm_code"
          ],
          "return_type": "uint32_t",
          "logic": "Counts the number of local variables with reference types within the given interpreter code."
        },
        {
          "name": "LocalsSizeInSlots",
          "parameters": [
            "const InterpreterCode* wasm_code"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the total size (in slots) required for all local variables based on their value kinds from the provided interpreter code."
        },
        {
          "name": "InitializeSlots",
          "parameters": [
            "uint8_t* sp",
            "size_t stack_space"
          ],
          "return_type": "bool",
          "logic": "Initializes the slots in the stack frame pointed to by `sp` with initial values. First copies constant values, then sets local slots to zero. Returns `false` if stack_space isn't big enough."
        }
      ]
    },
    {
      "name": "FrameState",
      "properties": [
        "handle_scope_"
      ],
      "methods": [
        {
          "name": "ResetHandleScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Resets the handle scope, creating a new one and destroying the old one. This is necessary to manage memory."
        }
      ]
    },
    {
      "name": "WasmBytecodeGenerator",
      "properties": [],
      "methods": [
        {
          "name": "ToRegisterIsAllowed",
          "parameters": [
            "const WasmInstruction& instr"
          ],
          "return_type": "bool",
          "logic": "Checks if storing the result of the given WasmInstruction in a register is allowed.  Reference values and SIMD values aren't allowed in registers."
        },
        {
          "name": "I32Push",
          "parameters": [
            "bool emit"
          ],
          "return_type": "void",
          "logic": "Pushes an I32 slot onto the stack. If emit is true, also emits the slot offset."
        },
        {
          "name": "I64Push",
          "parameters": [
            "bool emit"
          ],
          "return_type": "void",
          "logic": "Pushes an I64 slot onto the stack. If emit is true, also emits the slot offset."
        },
        {
          "name": "F32Push",
          "parameters": [
            "bool emit"
          ],
          "return_type": "void",
          "logic": "Pushes an F32 slot onto the stack. If emit is true, also emits the slot offset."
        },
        {
          "name": "F64Push",
          "parameters": [
            "bool emit"
          ],
          "return_type": "void",
          "logic": "Pushes an F64 slot onto the stack. If emit is true, also emits the slot offset."
        },
        {
          "name": "S128Push",
          "parameters": [
            "bool emit"
          ],
          "return_type": "void",
          "logic": "Pushes an S128 slot onto the stack. If emit is true, also emits the slot offset."
        },
        {
          "name": "RefPush",
          "parameters": [
            "ValueType type",
            "bool emit"
          ],
          "return_type": "void",
          "logic": "Pushes a reference slot onto the stack. If emit is true, also emits the slot offset and reference stack index."
        },
        {
          "name": "Push",
          "parameters": [
            "ValueType type"
          ],
          "return_type": "void",
          "logic": "Pushes a slot of the specified type onto the stack. Dispatches to the appropriate Push method (I32Push, I64Push, etc.)."
        },
        {
          "name": "PushCopySlot",
          "parameters": [
            "uint32_t from_stack_index"
          ],
          "return_type": "void",
          "logic": "Pushes a copy of the slot at the given stack index onto the stack."
        },
        {
          "name": "PushConstSlot",
          "parameters": [
            "uint32_t slot_index"
          ],
          "return_type": "void",
          "logic": "Pushes a constant slot onto the stack."
        },
        {
          "name": "HasVoidSignature",
          "parameters": [
            "const WasmBytecodeGenerator::BlockData& block_data"
          ],
          "return_type": "bool",
          "logic": "Checks if the block data has a void signature (no parameters or return values)."
        },
        {
          "name": "ParamsCount",
          "parameters": [
            "const WasmBytecodeGenerator::BlockData& block_data"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the number of parameters for the block data signature."
        },
        {
          "name": "GetParamType",
          "parameters": [
            "const WasmBytecodeGenerator::BlockData& block_data",
            "size_t index"
          ],
          "return_type": "ValueType",
          "logic": "Returns the type of the parameter at the given index for the block data signature."
        },
        {
          "name": "ReturnsCount",
          "parameters": [
            "const WasmBytecodeGenerator::BlockData& block_data"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the number of return values for the block data signature."
        },
        {
          "name": "GetReturnType",
          "parameters": [
            "const WasmBytecodeGenerator::BlockData& block_data",
            "size_t index"
          ],
          "return_type": "ValueType",
          "logic": "Returns the type of the return value at the given index for the block data signature."
        },
        {
          "name": "GetGlobalType",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "ValueKind",
          "logic": "Returns the type of the global variable at the specified index."
        },
        {
          "name": "IsMemory64",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the memory is 64-bit, false otherwise."
        },
        {
          "name": "IsMultiMemory",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if there are multiple memories defined in the module."
        },
        {
          "name": "EmitGlobalIndex",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "void",
          "logic": "Emits the global index to the bytecode stream."
        },
        {
          "name": "GetCurrentBranchDepth",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates the current branching depth based on the parent block index."
        },
        {
          "name": "GetTargetBranch",
          "parameters": [
            "uint32_t delta"
          ],
          "return_type": "int32_t",
          "logic": "Gets the target block index based on a delta value relative to the current block index."
        },
        {
          "name": "EmitBranchOffset",
          "parameters": [
            "uint32_t delta"
          ],
          "return_type": "void",
          "logic": "Emits the branch offset to the bytecode stream. Stores current code position."
        },
        {
          "name": "EmitBranchTableOffset",
          "parameters": [
            "uint32_t delta",
            "uint32_t code_pos"
          ],
          "return_type": "void",
          "logic": "Emits the branch table offset to the bytecode stream. Stores the provided code position."
        },
        {
          "name": "EmitIfElseBranchOffset",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits an offset for 'if/else' branches. The offset will be updated later when the 'else' block is encountered or when block ends."
        },
        {
          "name": "EmitTryCatchBranchOffset",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits a branch offset for try/catch blocks, to be updated later."
        },
        {
          "name": "BeginElseBlock",
          "parameters": [
            "uint32_t if_block_index",
            "bool dummy"
          ],
          "return_type": "void",
          "logic": "Begins an 'else' block after an 'if' block. Ends the previous if block, restores its parameters, then sets up the new else block."
        },
        {
          "name": "GetFunctionSignature",
          "parameters": [
            "uint32_t function_index"
          ],
          "return_type": "const FunctionSig*",
          "logic": "Returns the function signature for the specified function index."
        },
        {
          "name": "GetTopStackType",
          "parameters": [
            "RegMode reg_mode"
          ],
          "return_type": "ValueKind",
          "logic": "Returns the type of the top element on the stack depending on the RegMode."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetValueSizeInSlots",
      "parameters": [
        "ValueKind kind"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates the size in slots required to store a value of the given kind. It converts size in bytes to size in slots (based on kSlotSize). Returns size in slots"
    }
  ]
}