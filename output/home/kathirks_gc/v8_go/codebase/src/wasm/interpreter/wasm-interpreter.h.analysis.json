{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/wasm-interpreter.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/wasm-interpreter.h\",\n  \"imports\": [\n    \"<atomic>\",\n    \"<memory>\",\n    \"<vector>\",\n    \"src/base/platform/time.h\",\n    \"src/base/platform/wrappers.h\",\n    \"src/base/small-vector.h\",\n    \"src/base/vector.h\",\n    \"src/common/simd128.h\",\n    \"src/logging/counters.h\",\n    \"src/wasm/function-body-decoder-impl.h\",\n    \"src/wasm/interpreter/instruction-handlers.h\",\n    \"src/wasm/interpreter/wasm-interpreter-objects.h\",\n    \"src/wasm/wasm-value.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"WasmExecutionTimer\",\n      \"properties\": [\n        \"execute_ratio_histogram_\",\n        \"slow_wasm_histogram_\",\n        \"window_execute_timer_\",\n        \"window_has_started_\",\n        \"next_interval_time_\",\n        \"start_interval_time_\",\n        \"window_running_time_\",\n        \"sample_duration_\",\n        \"cooldown_interval_\",\n        \"slow_threshold_\",\n        \"slow_threshold_samples_count_\",\n        \"samples_\",\n        \"isolate_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmExecutionTimer\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"bool track_jitless_wasm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the WasmExecutionTimer. Initializes the histogram and related time tracking variables.\"\n        },\n        {\n          \"name\": \"Start\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts the timer if the execution ratio histogram is enabled.\"\n        },\n        {\n          \"name\": \"Stop\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops the timer if the execution ratio histogram is enabled.\"\n        },\n        {\n          \"name\": \"Terminate\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Terminates the timer and any associated resources.  (Empty body)\"\n        },\n        {\n          \"name\": \"StartInternal\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Internal function to start the timer.\"\n        },\n        {\n          \"name\": \"StopInternal\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Internal function to stop the timer.\"\n        },\n        {\n          \"name\": \"BeginInterval\",\n          \"parameters\": [\n            \"bool start_timer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts a sampling interval to track time.\"\n        },\n        {\n          \"name\": \"EndInterval\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Ends the sampling interval.\"\n        },\n        {\n          \"name\": \"AddSample\",\n          \"parameters\": [\n            \"int running_ratio\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a sample to the vector of running ratios\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmInterpreterThreadMap\",\n      \"properties\": [\n        \"map_\",\n        \"mutex_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetCurrentInterpreterThread\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"WasmInterpreterThread*\",\n          \"logic\": \"Retrieves the WasmInterpreterThread associated with the given Isolate.  Creates a new one if none exists.\"\n        },\n        {\n          \"name\": \"NotifyIsolateDisposal\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes the WasmInterpreterThread associated with a disposed Isolate.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmInterpreterThread\",\n      \"properties\": [\n        \"isolate_\",\n        \"state_\",\n        \"trap_reason_\",\n        \"current_stack_size_\",\n        \"stack_mem_\",\n        \"activations_\",\n        \"reference_stack_\",\n        \"current_ref_stack_size_\",\n        \"execution_timer_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmInterpreterThread\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the WasmInterpreterThread. Initializes the stack and execution timer.\"\n        },\n        {\n          \"name\": \"~WasmInterpreterThread\",\n          \"parameters\": [],\n          \"return_type\": \"destructor\",\n          \"logic\": \"Destructor for the WasmInterpreterThread. Terminates the execution timers and frees the stack memory.\"\n        },\n        {\n          \"name\": \"ExpandStack\",\n          \"parameters\": [\n            \"size_t additional_required_size\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Expands the stack size if needed.\"\n        },\n        {\n          \"name\": \"Initialize\",\n          \"parameters\": [],\n          \"return_type\": \"static void\",\n          \"logic\": \"Initializes the thread interpreter map. Called once per process.\"\n        },\n        {\n          \"name\": \"Terminate\",\n          \"parameters\": [],\n          \"return_type\": \"static void\",\n          \"logic\": \"Terminates the thread interpreter map. Called once per process.\"\n        },\n        {\n          \"name\": \"NotifyIsolateDisposal\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Notifies the thread interpreter map of an isolate disposal.\"\n        },\n        {\n          \"name\": \"GetCurrentInterpreterThread\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"static WasmInterpreterThread*\",\n          \"logic\": \"Gets the current interpreter thread for the given isolate.\"\n        },\n        {\n          \"name\": \"GetIsolate\",\n          \"parameters\": [],\n          \"return_type\": \"const Isolate*\",\n          \"logic\": \"Returns the Isolate associated with this thread.\"\n        },\n        {\n          \"name\": \"state\",\n          \"parameters\": [],\n          \"return_type\": \"State\",\n          \"logic\": \"Returns the current state of the thread.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the thread state to RUNNING.\"\n        },\n        {\n          \"name\": \"Stop\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the thread state to STOPPED.\"\n        },\n        {\n          \"name\": \"Trap\",\n          \"parameters\": [\n            \"TrapReason trap_reason\",\n            \"int trap_function_index\",\n            \"int trap_pc\",\n            \"const FrameState& current_frame\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the thread state to TRAPPED and records the trap reason and function index.\"\n        },\n        {\n          \"name\": \"GetTrapReason\",\n          \"parameters\": [],\n          \"return_type\": \"TrapReason\",\n          \"logic\": \"Returns the trap reason for the thread.\"\n        },\n        {\n          \"name\": \"Unwinding\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the thread state to EH_UNWINDING (Exception Handling Unwinding).\"\n        },\n        {\n          \"name\": \"StartActivation\",\n          \"parameters\": [\n            \"WasmInterpreterRuntime* wasm_runtime\",\n            \"Address frame_pointer\",\n            \"uint8_t* interpreter_fp\",\n            \"const FrameState& frame_state\"\n          ],\n          \"return_type\": \"Activation*\",\n          \"logic\": \"Starts a new activation (stack frame) for the given WasmInterpreterRuntime.\"\n        },\n        {\n          \"name\": \"FinishActivation\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Finishes an activation (stack frame), popping it from the stack.\"\n        },\n        {\n          \"name\": \"GetCurrentActivationFor\",\n          \"parameters\": [\n            \"const WasmInterpreterRuntime* wasm_runtime\"\n          ],\n          \"return_type\": \"const FrameState*\",\n          \"logic\": \"Returns the current activation for the given WasmInterpreterRuntime, if it exists in the stack.\"\n        },\n        {\n          \"name\": \"SetCurrentFrame\",\n          \"parameters\": [\n            \"const FrameState& frame_state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current frame state for the current activation.\"\n        },\n        {\n          \"name\": \"SetCurrentActivationFrame\",\n          \"parameters\": [\n            \"uint32_t* fp\",\n            \"uint32_t current_frame_size\",\n            \"uint32_t current_stack_size\",\n            \"uint32_t current_ref_stack_fp\",\n            \"uint32_t current_ref_stack_frame_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current activation frame parameters for the current activation.\"\n        },\n        {\n          \"name\": \"GetActivation\",\n          \"parameters\": [\n            \"Address frame_pointer\"\n          ],\n          \"return_type\": \"WasmInterpreterThread::Activation*\",\n          \"logic\": \"Retrieves an activation based on the given frame pointer.\"\n        },\n        {\n          \"name\": \"NextFrameAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns the address of the next frame in the stack, based on the current top activation or the start of stack memory if there are no activations.\"\n        },\n        {\n          \"name\": \"NextRefStackOffset\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Calculates and returns the offset to the next available slot in the reference stack based on the top activation, or returns 0 if there are no activations.\"\n        },\n        {\n          \"name\": \"StackLimitAddress\",\n          \"parameters\": [],\n          \"return_type\": \"const uint8_t*\",\n          \"logic\": \"Returns the address of the end of the stack, defining the limit of the stack.\"\n        },\n        {\n          \"name\": \"EnsureRefStackSpace\",\n          \"parameters\": [\n            \"size_t new_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Ensures there is enough space in reference stack.\"\n        },\n        {\n          \"name\": \"ClearRefStackValues\",\n          \"parameters\": [\n            \"size_t index\",\n            \"size_t count\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clear reference stack values.\"\n        },\n        {\n          \"name\": \"StartExecutionTimer\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts the execution timer for tracking execution time.\"\n        },\n        {\n          \"name\": \"StopExecutionTimer\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops the execution timer.\"\n        },\n        {\n          \"name\": \"TerminateExecutionTimers\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Terminates execution timers.\"\n        },\n        {\n          \"name\": \"SetRuntimeLastWasmError\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"MessageTemplate message\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Sets the last Wasm error message for the given isolate.\"\n        },\n        {\n          \"name\": \"GetRuntimeLastWasmError\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"static TrapReason\",\n          \"logic\": \"Gets the last Wasm error message for the given isolate.\"\n        },\n        {\n          \"name\": \"RaiseException\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"MessageTemplate message\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Raises an exception in the isolate.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmInterpreterThread::Activation\",\n      \"properties\": [\n        \"thread_\",\n        \"wasm_runtime_\",\n        \"frame_pointer_\",\n        \"current_frame_size_\",\n        \"current_ref_stack_fp_\",\n        \"current_ref_stack_frame_size_\",\n        \"current_fp_\",\n        \"current_frame_state_\",\n        \"trap_stack_trace_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Activation\",\n          \"parameters\": [\n            \"WasmInterpreterThread* thread\",\n            \"WasmInterpreterRuntime* wasm_runtime\",\n            \"Address frame_pointer\",\n            \"uint8_t* start_fp\",\n            \"const FrameState& callee_frame_state\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the Activation class. Initializes the activation with the provided thread, wasm runtime, frame pointer, and frame state.\"\n        },\n        {\n          \"name\": \"thread\",\n          \"parameters\": [],\n          \"return_type\": \"WasmInterpreterThread*\",\n          \"logic\": \"Returns the thread this activation belongs to.\"\n        },\n        {\n          \"name\": \"GetIsolate\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the isolate to which this activation belongs.\"\n        },\n        {\n          \"name\": \"GetFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the frame pointer for this activation.\"\n        },\n        {\n          \"name\": \"SetCurrentFrame\",\n          \"parameters\": [\n            \"const FrameState& frame_state\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current frame state.\"\n        },\n        {\n          \"name\": \"GetCurrentFrame\",\n          \"parameters\": [],\n          \"return_type\": \"const FrameState&\",\n          \"logic\": \"Returns the current frame state.\"\n        },\n        {\n          \"name\": \"SetCurrentActivationFrame\",\n          \"parameters\": [\n            \"uint8_t* current_fp\",\n            \"uint32_t current_frame_size\",\n            \"uint32_t current_stack_size\",\n            \"uint32_t current_ref_stack_fp\",\n            \"uint32_t current_ref_stack_frame_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current activation frame parameters.\"\n        },\n        {\n          \"name\": \"NextFrameAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Calculates and returns the address of the next frame in the stack.\"\n        },\n        {\n          \"name\": \"NextRefStackOffset\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Calculates and returns the offset to the next available slot in the reference stack.\"\n        },\n        {\n          \"name\": \"SetTrapped\",\n          \"parameters\": [\n            \"int trap_function_index\",\n            \"int trap_pc\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets that this activation has trapped, capturing the stack trace at the time of the trap.\"\n        },\n        {\n          \"name\": \"GetStackTrace\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<WasmInterpreterStackEntry>\",\n          \"logic\": \"Returns the stack trace for this activation. Captures a new trace if the activation has not trapped yet, otherwise returns the saved trace.\"\n        },\n        {\n          \"name\": \"GetFunctionIndex\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"TODO\"\n        },\n        {\n          \"name\": \"GetWasmRuntime\",\n          \"parameters\": [],\n          \"return_type\": \"const WasmInterpreterRuntime*\",\n          \"logic\": \"Returns the WasmInterpreterRuntime associated with this activation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmInterpreter::CodeMap\",\n      \"properties\": [\n        \"zone_\",\n        \"isolate_\",\n        \"module_\",\n        \"interpreter_code_\",\n        \"bytecode_generation_time_\",\n        \"generated_code_size_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CodeMap\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const WasmModule* module\",\n            \"const uint8_t* module_start\",\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the CodeMap class. Initializes the data structures and sets up the preprocessing step.\"\n        },\n        {\n          \"name\": \"module\",\n          \"parameters\": [],\n          \"return_type\": \"const WasmModule*\",\n          \"logic\": \"Returns the WasmModule associated with this CodeMap.\"\n        },\n        {\n          \"name\": \"GetCode\",\n          \"parameters\": [\n            \"uint32_t function_index\"\n          ],\n          \"return_type\": \"InterpreterCode*\",\n          \"logic\": \"Retrieves the InterpreterCode for the given function index.\"\n        },\n        {\n          \"name\": \"GetFunctionBytecode\",\n          \"parameters\": [\n            \"uint32_t func_index\"\n          ],\n          \"return_type\": \"WasmBytecode*\",\n          \"logic\": \"Retrieves the preprocessed bytecode for the given function index.\"\n        },\n        {\n          \"name\": \"AddFunction\",\n          \"parameters\": [\n            \"const WasmFunction* function\",\n            \"const uint8_t* code_start\",\n            \"const uint8_t* code_end\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a compiled function metadata to the code map.\"\n        },\n        {\n          \"name\": \"TotalBytecodeSize\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates and returns the total size of all generated bytecode.\"\n        },\n        {\n          \"name\": \"Preprocess\",\n          \"parameters\": [\n            \"uint32_t function_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs preprocessing steps on the given function index.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmInterpreter\",\n      \"properties\": [\n        \"zone_\",\n        \"instance_object_\",\n        \"module_bytes_\",\n        \"codemap_\",\n        \"wasm_runtime_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmInterpreter\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const WasmModule* module\",\n            \"const ModuleWireBytes& wire_bytes\",\n            \"DirectHandle<WasmInstanceObject> instance\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the WasmInterpreter class. Initializes the data structures and sets up the codemap.\"\n        },\n        {\n          \"name\": \"InitializeOncePerProcess\",\n          \"parameters\": [],\n          \"return_type\": \"static void\",\n          \"logic\": \"Initializes the Wasm interpreter once per process.\"\n        },\n        {\n          \"name\": \"GlobalTearDown\",\n          \"parameters\": [],\n          \"return_type\": \"static void\",\n          \"logic\": \"Tears down any global resources used by the Wasm interpreter.\"\n        },\n        {\n          \"name\": \"NotifyIsolateDisposal\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Notifies the interpreter about isolate disposal.\"\n        },\n        {\n          \"name\": \"BeginExecution\",\n          \"parameters\": [\n            \"WasmInterpreterThread* thread\",\n            \"uint32_t function_index\",\n            \"Address frame_pointer\",\n            \"uint8_t* interpreter_fp\",\n            \"uint32_t ref_stack_offset\",\n            \"const std::vector<WasmValue>& argument_values\"\n          ],\n          \"return_type\": \"inline void\",\n          \"logic\": \"Begins execution of the Wasm code for the given function.\"\n        },\n        {\n          \"name\": \"BeginExecution\",\n          \"parameters\": [\n            \"WasmInterpreterThread* thread\",\n            \"uint32_t function_index\",\n            \"Address frame_pointer\",\n            \"uint8_t* interpreter_fp\"\n          ],\n          \"return_type\": \"inline void\",\n          \"logic\": \"Begins execution of the Wasm code for the given function.\"\n        },\n        {\n          \"name\": \"ContinueExecution\",\n          \"parameters\": [\n            \"WasmInterpreterThread* thread\",\n            \"bool called_from_js\"\n          ],\n          \"return_type\": \"WasmInterpreterThread::State\",\n          \"logic\": \"Continues execution of the Wasm code in the interpreter.\"\n        },\n        {\n          \"name\": \"GetReturnValue\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"inline WasmValue\",\n          \"logic\": \"Retrieves a return value from the Wasm execution.\"\n        },\n        {\n          \"name\": \"GetInterpretedStack\",\n          \"parameters\": [\n            \"Address frame_pointer\"\n          ],\n          \"return_type\": \"inline std::vector<WasmInterpreterStackEntry>\",\n          \"logic\": \"Returns interpreted stack entries.\"\n        },\n        {\n          \"name\": \"GetFunctionIndex\",\n          \"parameters\": [\n            \"Address frame_pointer\",\n            \"int index\"\n          ],\n          \"return_type\": \"inline int\",\n          \"logic\": \"Returns function index.\"\n        },\n        {\n          \"name\": \"SetTrapFunctionIndex\",\n          \"parameters\": [\n            \"int32_t func_index\"\n          ],\n          \"return_type\": \"inline void\",\n          \"logic\": \"Sets the trap function index.\"\n        },\n        {\n          \"name\": \"GetWasmRuntime\",\n          \"parameters\": [],\n          \"return_type\": \"inline WasmInterpreterRuntime*\",\n          \"logic\": \"Returns the WASM Runtime.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmEHData\",\n      \"properties\": [\n        \"code_trycatch_map_\",\n        \"try_blocks_\",\n        \"catch_blocks_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetTryBlock\",\n          \"parameters\": [\n            \"CodeOffset code_offset\"\n          ],\n          \"return_type\": \"const TryBlock*\",\n          \"logic\": \"Returns the TryBlock for the given code offset.\"\n        },\n        {\n          \"name\": \"GetParentTryBlock\",\n          \"parameters\": [\n            \"const TryBlock* try_block\"\n          ],\n          \"return_type\": \"const TryBlock*\",\n          \"logic\": \"Returns the parent TryBlock for the given try_block.\"\n        },\n        {\n          \"name\": \"GetDelegateTryBlock\",\n          \"parameters\": [\n            \"const TryBlock* try_block\"\n          ],\n          \"return_type\": \"const TryBlock*\",\n          \"logic\": \"Returns the delegate TryBlock for the given try_block.\"\n        },\n        {\n          \"name\": \"GetEndInstructionOffsetFor\",\n          \"parameters\": [\n            \"BlockIndex catch_block_index\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the offset to the last instruction for the given catch_block_index.\"\n        },\n        {\n          \"name\": \"GetExceptionPayloadStartSlotOffsets\",\n          \"parameters\": [\n            \"BlockIndex catch_block_index\"\n          ],\n          \"return_type\": \"ExceptionPayloadSlotOffsets\",\n          \"logic\": \"Returns the offset to the start of the exception payload for the given catch_block_index.\"\n        },\n        {\n          \"name\": \"SetCaughtException\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"BlockIndex catch_block_index\",\n            \"DirectHandle<Object> exception\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the caught exception for the given catch_block_index\"\n        },\n        {\n          \"name\": \"GetCaughtException\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"BlockIndex catch_block_index\"\n          ],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Returns the caught exception for the given catch_block_index\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmEHDataGenerator\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"WasmEHDataGenerator\",\n          \"parameters\": [],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the WasmEHDataGenerator class.\"\n        },\n        {\n          \"name\": \"AddTryBlock\",\n          \"parameters\": [\n            \"BlockIndex try_block_index\",\n            \"BlockIndex parent_or_matching_try_block_index\",\n            \"BlockIndex ancestor_try_block_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a Try block to the EH data, associating the index and parent.\"\n        },\n        {\n          \"name\": \"AddCatchBlock\",\n          \"parameters\": [\n            \"BlockIndex catch_block_index\",\n            \"int tag_index\",\n            \"uint32_t first_param_slot_offset\",\n            \"uint32_t first_param_ref_stack_index\",\n            \"CodeOffset code_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a Catch block to the EH data.\"\n        },\n        {\n          \"name\": \"AddDelegatedBlock\",\n          \"parameters\": [\n            \"BlockIndex delegated_try_block_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a delegated block.\"\n        },\n        {\n          \"name\": \"EndTryCatchBlocks\",\n          \"parameters\": [\n            \"BlockIndex block_index\",\n            \"CodeOffset code_offset\"\n          ],\n          \"return_type\": \"BlockIndex\",\n          \"logic\": \"Ends the try/catch blocks.\"\n        },\n        {\n          \"name\": \"RecordPotentialExceptionThrowingInstruction\",\n          \"parameters\": [\n            \"WasmOpcode opcode\",\n            \"CodeOffset code_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records a potential exception throwing instruction for exception handling.\"\n        },\n        {\n          \"name\": \"GetCurrentTryBlockIndex\",\n          \"parameters\": [],\n          \"return_type\": \"BlockIndex\",\n          \"logic\": \"Gets the index of the current try block.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmBytecode\",\n      \"properties\": [\n        \"code_\",\n        \"code_bytes_\",\n        \"signature_\",\n        \"interpreter_code_\",\n        \"const_slots_values_\",\n        \"func_index_\",\n        \"blocks_count_\",\n        \"args_count_\",\n        \"args_slots_size_\",\n        \"return_count_\",\n        \"rets_slots_size_\",\n        \"locals_count_\",\n        \"locals_slots_size_\",\n        \"total_frame_size_in_bytes_\",\n        \"ref_args_count_\",\n        \"ref_rets_count_\",\n        \"ref_locals_count_\",\n        \"ref_slots_count_\",\n        \"eh_data_\",\n        \"code_pc_map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmBytecode\",\n          \"parameters\": [\n            \"int func_index\",\n            \"const uint8_t* code_data\",\n            \"size_t code_length\",\n            \"uint32_t stack_frame_size\",\n            \"const FunctionSig* signature\",\n            \"const InterpreterCode* interpreter_code\",\n            \"size_t blocks_count\",\n            \"const uint8_t* const_slots_data\",\n            \"size_t const_slots_length\",\n            \"uint32_t ref_slots_count\",\n            \"const WasmEHData&& eh_data\",\n            \"const std::map<CodeOffset, pc_t>&& code_pc_map\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the WasmBytecode class.\"\n        },\n        {\n          \"name\": \"GetCode\",\n          \"parameters\": [],\n          \"return_type\": \"inline const uint8_t*\",\n          \"logic\": \"Returns the code bytes.\"\n        },\n        {\n          \"name\": \"GetCodeSize\",\n          \"parameters\": [],\n          \"return_type\": \"inline size_t\",\n          \"logic\": \"Returns the code size.\"\n        },\n        {\n          \"name\": \"InitializeSlots\",\n          \"parameters\": [\n            \"uint8_t* sp\",\n            \"size_t stack_space\"\n          ],\n          \"return_type\": \"inline bool\",\n          \"logic\": \"Initializes the slots for the bytecode execution.\"\n        },\n        {\n          \"name\": \"GetPcFromTrapCode\",\n          \"parameters\": [\n            \"const uint8_t* current_code\"\n          ],\n          \"return_type\": \"pc_t\",\n          \"logic\": \"Get the program counter offset from the given code offset.\"\n        },\n        {\n          \"name\": \"GetFunctionIndex\",\n          \"parameters\": [],\n          \"return_type\": \"inline int\",\n          \"logic\": \"Returns the function index.\"\n        },\n        {\n          \"name\": \"GetBlocksCount\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of blocks.\"\n        },\n        {\n          \"name\": \"GetFunctionSignature\",\n          \"parameters\": [],\n          \"return_type\": \"inline const FunctionSig*\",\n          \"logic\": \"Returns the function signature.\"\n        },\n        {\n          \"name\": \"return_type\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"inline ValueType\",\n          \"logic\": \"Returns the return type at the specified index from the signature.\"\n        },\n        {\n          \"name\": \"arg_type\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"inline ValueType\",\n          \"logic\": \"Returns the arg type at the specified index from the signature.\"\n        },\n        {\n          \"name\": \"local_type\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"inline ValueType\",\n          \"logic\": \"Returns the local type at the specified index from the interpreter code.\"\n        },\n        {\n          \"name\": \"args_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of args.\"\n        },\n        {\n          \"name\": \"args_slots_size\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the args slots size.\"\n        },\n        {\n          \"name\": \"return_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of returns.\"\n        },\n        {\n          \"name\": \"rets_slots_size\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the rets slots size.\"\n        },\n        {\n          \"name\": \"locals_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the locals count.\"\n        },\n        {\n          \"name\": \"locals_slots_size\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the locals slots size.\"\n        },\n        {\n          \"name\": \"const_slots_size_in_bytes\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the constant slots size in bytes.\"\n        },\n        {\n          \"name\": \"ref_args_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of ref arguments.\"\n        },\n        {\n          \"name\": \"ref_rets_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of ref return values.\"\n        },\n        {\n          \"name\": \"ref_locals_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of ref locals.\"\n        },\n        {\n          \"name\": \"ref_slots_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the ref slots count.\"\n        },\n        {\n          \"name\": \"internal_ref_slots_count\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t\",\n          \"logic\": \"Returns the number of internal ref slots.\"\n        },\n        {\n          \"name\": \"frame_size\",\n          \"parameters\": [],\n          \"return_type\": \"inline uint32_t"
}