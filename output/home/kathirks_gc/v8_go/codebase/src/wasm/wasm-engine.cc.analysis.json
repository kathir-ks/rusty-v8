{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-engine.cc",
  "imports": [
    "src/wasm/wasm-engine.h",
    "<optional>",
    "src/base/hashing.h",
    "src/base/platform/time.h",
    "src/base/small-vector.h",
    "src/common/assert-scope.h",
    "src/common/globals.h",
    "src/debug/debug.h",
    "src/diagnostics/code-tracer.h",
    "src/diagnostics/compilation-statistics.h",
    "src/execution/frames.h",
    "src/execution/v8threads.h",
    "src/handles/global-handles-inl.h",
    "src/logging/counters.h",
    "src/logging/metrics.h",
    "src/objects/heap-number.h",
    "src/objects/managed-inl.h",
    "src/objects/objects-inl.h",
    "src/objects/objects.h",
    "src/objects/primitive-heap-object.h",
    "src/utils/ostreams.h",
    "src/wasm/function-compiler.h",
    "src/wasm/module-compiler.h",
    "src/wasm/module-decoder.h",
    "src/wasm/module-instantiate.h",
    "src/wasm/names-provider.h",
    "src/wasm/pgo.h",
    "src/wasm/stacks.h",
    "src/wasm/std-object-sizes.h",
    "src/wasm/streaming-decoder.h",
    "src/wasm/wasm-code-pointer-table.h",
    "src/wasm/wasm-debug.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/interpreter/wasm-interpreter-inl.h",
    "src/debug/wasm/gdb-server/gdb-server.h"
  ],
  "classes": [
    {
      "name": "WasmOrphanedGlobalHandle",
      "properties": [
        "next_",
        "prev_ptr_",
        "location_"
      ],
      "methods": [
        {
          "name": "InitializeLocation",
          "parameters": [
            "std::unique_ptr<Address*> location"
          ],
          "return_type": "void",
          "logic": "Initializes the location_ property with the provided unique pointer."
        },
        {
          "name": "Destroy",
          "parameters": [
            "WasmOrphanedGlobalHandle* that"
          ],
          "return_type": "static void",
          "logic": "Destroys a WasmOrphanedGlobalHandle instance, including the global handle it manages, and unlinks it from the linked list."
        }
      ]
    },
    {
      "name": "WasmEngine::LogCodesTask",
      "properties": [
        "isolate_"
      ],
      "methods": [
        {
          "name": "LogCodesTask",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "",
          "logic": "Constructor for the LogCodesTask, takes an Isolate."
        },
        {
          "name": "RunInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs outstanding Wasm code for the given isolate."
        }
      ]
    },
    {
      "name": "WasmEngine::WasmGCForegroundTask",
      "properties": [
        "isolate_"
      ],
      "methods": [
        {
          "name": "WasmGCForegroundTask",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "",
          "logic": "Constructor for the WasmGCForegroundTask, takes an Isolate."
        },
        {
          "name": "RunInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Reports live code from the stack for garbage collection."
        }
      ]
    },
    {
      "name": "WasmEngine::ClearWeakScriptHandleTask",
      "properties": [
        "handle_"
      ],
      "methods": [
        {
          "name": "ClearWeakScriptHandleTask",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<Address*> location"
          ],
          "return_type": "",
          "logic": "Constructor for the ClearWeakScriptHandleTask. Initializes handle_ with a new WasmOrphanedGlobalHandle and moves the location."
        },
        {
          "name": "RunInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Destroys the orphaned global handle by calling WasmOrphanedGlobalHandle::Destroy."
        }
      ]
    },
    {
      "name": "WeakScriptHandle",
      "properties": [
        "location_",
        "script_id_",
        "source_url_",
        "isolate_"
      ],
      "methods": [
        {
          "name": "WeakScriptHandle",
          "parameters": [
            "DirectHandle<Script> script",
            "Isolate* isolate"
          ],
          "return_type": "",
          "logic": "Constructor for the WeakScriptHandle. Creates a weak global handle to a Script object."
        },
        {
          "name": "~WeakScriptHandle",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for the WeakScriptHandle. Destroys the global handle by posting a task to the main thread."
        },
        {
          "name": "handle",
          "parameters": [],
          "return_type": "DirectHandle<Script>",
          "logic": "Returns the DirectHandle<Script> from the location."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the location_ unique pointer."
        },
        {
          "name": "script_id",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the script ID."
        },
        {
          "name": "source_url",
          "parameters": [],
          "return_type": "const std::shared_ptr<const char[]>&",
          "logic": "Returns the source URL."
        }
      ]
    },
    {
      "name": "NativeModuleCache",
      "properties": [],
      "methods": [
        {
          "name": "MaybeGetNativeModule",
          "parameters": [
            "ModuleOrigin origin",
            "base::Vector<const uint8_t> wire_bytes",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Tries to retrieve a native module from the cache based on the provided parameters. Returns nullptr if not found or being compiled."
        },
        {
          "name": "GetStreamingCompilationOwnership",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "bool",
          "logic": "Checks if the current compilation can take ownership for streaming compilation, by checking if prefix_hash exists in map, and emplacing nullopt if not."
        },
        {
          "name": "StreamingCompilationFailed",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "void",
          "logic": "Handles a failed streaming compilation, removes the nullopt entry, and notify waiting threads."
        },
        {
          "name": "Update",
          "parameters": [
            "std::shared_ptr<NativeModule> native_module",
            "bool error"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Updates the native module cache with the given native_module. If another native module with same key exists, return that module instead."
        },
        {
          "name": "Erase",
          "parameters": [
            "NativeModule* native_module"
          ],
          "return_type": "void",
          "logic": "Erases a native module from the cache."
        },
        {
          "name": "PrefixHash",
          "parameters": [
            "base::Vector<const uint8_t> wire_bytes"
          ],
          "return_type": "static size_t",
          "logic": "Computes a combined hash of the module headers up to the code section header."
        }
      ]
    },
    {
      "name": "WasmEngine::CurrentGCInfo",
      "properties": [
        "outstanding_isolates",
        "dead_code",
        "gc_sequence_index",
        "next_gc_sequence_index",
        "start_time"
      ],
      "methods": [
        {
          "name": "CurrentGCInfo",
          "parameters": [
            "int8_t gc_sequence_index"
          ],
          "return_type": "",
          "logic": "Constructor for CurrentGCInfo. Sets the gc_sequence_index."
        }
      ]
    },
    {
      "name": "WasmEngine::IsolateInfo",
      "properties": [
        "native_modules",
        "scripts",
        "log_codes",
        "code_to_log",
        "foreground_task_runner",
        "async_counters",
        "keep_in_debug_state",
        "pku_support_sampled"
      ],
      "methods": [
        {
          "name": "IsolateInfo",
          "parameters": [
            "Isolate* isolate",
            "bool log_code"
          ],
          "return_type": "",
          "logic": "Constructor for IsolateInfo, takes an Isolate and a boolean whether to log code."
        },
        {
          "name": "~IsolateInfo",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for IsolateInfo. Clears outstanding scripts by posting tasks."
        }
      ]
    },
    {
      "name": "WasmEngine::NativeModuleInfo",
      "properties": [
        "weak_ptr",
        "isolates"
      ],
      "methods": [
        {
          "name": "NativeModuleInfo",
          "parameters": [
            "std::weak_ptr<NativeModule> native_module"
          ],
          "return_type": "",
          "logic": "Constructor. Initializes the weak pointer to the native module."
        }
      ]
    },
    {
      "name": "WasmEngine",
      "properties": [
        "call_descriptors_",
        "allocator_",
        "native_module_cache_",
        "async_compile_jobs_",
        "next_compilation_id_",
        "operations_barrier_",
        "num_code_gcs_triggered_",
        "potentially_dead_code_",
        "new_potentially_dead_code_size_",
        "current_gc_info_",
        "num_modules_with_code_logging_",
        "compilation_stats_",
        "code_tracer_",
        "isolates_",
        "native_modules_",
        "deopts_executed_",
        "gdb_server_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "WasmEngine",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for WasmEngine."
        },
        {
          "name": "~WasmEngine",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for WasmEngine, performs cleanup, memory deallocation, and shutdown procedures."
        },
        {
          "name": "SyncValidate",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "bool",
          "logic": "Validates a Wasm module synchronously."
        },
        {
          "name": "SyncCompileTranslatedAsmJs",
          "parameters": [
            "Isolate* isolate",
            "ErrorThrower* thrower",
            "base::OwnedVector<const uint8_t> bytes",
            "DirectHandle<Script> script",
            "base::Vector<const uint8_t> asm_js_offset_table_bytes",
            "DirectHandle<HeapNumber> uses_bitset",
            "LanguageMode language_mode"
          ],
          "return_type": "MaybeHandle<AsmWasmData>",
          "logic": "Compiles translated asm.js code synchronously."
        },
        {
          "name": "FinalizeTranslatedAsmJs",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<AsmWasmData> asm_wasm_data",
            "DirectHandle<Script> script"
          ],
          "return_type": "DirectHandle<WasmModuleObject>",
          "logic": "Finalizes translated asm.js code, creating a WasmModuleObject."
        },
        {
          "name": "SyncCompile",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled_features",
            "CompileTimeImports compile_imports",
            "ErrorThrower* thrower",
            "base::OwnedVector<const uint8_t> bytes"
          ],
          "return_type": "MaybeDirectHandle<WasmModuleObject>",
          "logic": "Compiles a Wasm module synchronously."
        },
        {
          "name": "SyncInstantiate",
          "parameters": [
            "Isolate* isolate",
            "ErrorThrower* thrower",
            "DirectHandle<WasmModuleObject> module_object",
            "MaybeDirectHandle<JSReceiver> imports",
            "MaybeDirectHandle<JSArrayBuffer> memory"
          ],
          "return_type": "MaybeDirectHandle<WasmInstanceObject>",
          "logic": "Instantiates a Wasm module synchronously."
        },
        {
          "name": "AsyncInstantiate",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<InstantiationResultResolver> resolver",
            "DirectHandle<WasmModuleObject> module_object",
            "MaybeDirectHandle<JSReceiver> imports"
          ],
          "return_type": "void",
          "logic": "Instantiates a Wasm module asynchronously."
        },
        {
          "name": "AsyncCompile",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "std::shared_ptr<CompilationResultResolver> resolver",
            "base::OwnedVector<const uint8_t> bytes",
            "const char* api_method_name_for_errors"
          ],
          "return_type": "void",
          "logic": "Compiles a Wasm module asynchronously."
        },
        {
          "name": "StartStreamingCompilation",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "DirectHandle<Context> context",
            "const char* api_method_name",
            "std::shared_ptr<CompilationResultResolver> resolver"
          ],
          "return_type": "std::shared_ptr<StreamingDecoder>",
          "logic": "Starts a streaming compilation of a Wasm module."
        },
        {
          "name": "CompileFunction",
          "parameters": [
            "Counters* counters",
            "NativeModule* native_module",
            "uint32_t function_index",
            "ExecutionTier tier"
          ],
          "return_type": "void",
          "logic": "Compiles a single Wasm function."
        },
        {
          "name": "EnterDebuggingForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Puts an isolate into a debugging state."
        },
        {
          "name": "LeaveDebuggingForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Removes an isolate from debugging state."
        },
        {
          "name": "ImportNativeModule",
          "parameters": [
            "Isolate* isolate",
            "std::shared_ptr<NativeModule> shared_native_module",
            "base::Vector<const char> source_url"
          ],
          "return_type": "DirectHandle<WasmModuleObject>",
          "logic": "Imports a native module into an isolate, creating a WasmModuleObject."
        },
        {
          "name": "FlushLiftoffCode",
          "parameters": [],
          "return_type": "std::pair<size_t, size_t>",
          "logic": "Removes Liftoff code from all native modules."
        },
        {
          "name": "GetLiftoffCodeSizeForTesting",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates liftoff code size, used only in testing."
        },
        {
          "name": "GetOrCreateTurboStatistics",
          "parameters": [],
          "return_type": "std::shared_ptr<CompilationStatistics>",
          "logic": "Gets or creates compilation statistics for Turbofan compilation."
        },
        {
          "name": "DumpAndResetTurboStatistics",
          "parameters": [],
          "return_type": "void",
          "logic": "Dumps the Turbofan compilation statistics to stdout and resets them."
        },
        {
          "name": "DumpTurboStatistics",
          "parameters": [],
          "return_type": "void",
          "logic": "Dumps the Turbofan compilation statistics to stdout."
        },
        {
          "name": "GetCodeTracer",
          "parameters": [],
          "return_type": "CodeTracer*",
          "logic": "Gets the CodeTracer instance."
        },
        {
          "name": "CreateAsyncCompileJob",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "base::OwnedVector<const uint8_t> bytes",
            "DirectHandle<Context> context",
            "const char* api_method_name",
            "std::shared_ptr<CompilationResultResolver> resolver",
            "int compilation_id"
          ],
          "return_type": "AsyncCompileJob*",
          "logic": "Creates a new AsyncCompileJob."
        },
        {
          "name": "RemoveCompileJob",
          "parameters": [
            "AsyncCompileJob* job"
          ],
          "return_type": "std::unique_ptr<AsyncCompileJob>",
          "logic": "Removes a compile job from async_compile_jobs_."
        },
        {
          "name": "HasRunningCompileJob",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if a compile job is running in given isolate."
        },
        {
          "name": "DeleteCompileJobsOnContext",
          "parameters": [
            "DirectHandle<Context> context"
          ],
          "return_type": "void",
          "logic": "Deletes all compile jobs associated with a context."
        },
        {
          "name": "DeleteCompileJobsOnIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Deletes all compile jobs associated with isolate."
        },
        {
          "name": "AddIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Adds an Isolate to the WasmEngine."
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Removes an Isolate from the WasmEngine."
        },
        {
          "name": "LogCode",
          "parameters": [
            "base::Vector<WasmCode*> code_vec"
          ],
          "return_type": "void",
          "logic": "Logs Wasm code objects."
        },
        {
          "name": "LogWrapperCode",
          "parameters": [
            "WasmCode* code"
          ],
          "return_type": "bool",
          "logic": "Logs Wasm wrapper code objects."
        },
        {
          "name": "EnableCodeLogging",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Enables code logging for an isolate."
        },
        {
          "name": "EnableCodeLogging",
          "parameters": [
            "NativeModule* native_module"
          ],
          "return_type": "void",
          "logic": "Enables code logging for a NativeModule."
        },
        {
          "name": "DisableCodeLogging",
          "parameters": [
            "NativeModule* native_module"
          ],
          "return_type": "void",
          "logic": "Disables code logging for a NativeModule."
        },
        {
          "name": "LogOutstandingCodesForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Logs all outstanding Wasm code for an Isolate."
        },
        {
          "name": "NewNativeModule",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled_features",
            "WasmDetectedFeatures detected_features",
            "CompileTimeImports compile_imports",
            "std::shared_ptr<const WasmModule> module",
            "size_t code_size_estimate"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Creates a new NativeModule."
        },
        {
          "name": "MaybeGetNativeModule",
          "parameters": [
            "ModuleOrigin origin",
            "base::Vector<const uint8_t> wire_bytes",
            "const CompileTimeImports& compile_imports",
            "Isolate* isolate"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Tries to get a NativeModule from the cache or creates a new one if it does not exist."
        },
        {
          "name": "UpdateNativeModuleCache",
          "parameters": [
            "bool has_error",
            "std::shared_ptr<NativeModule> native_module",
            "Isolate* isolate"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Updates the NativeModule cache after compilation."
        },
        {
          "name": "GetStreamingCompilationOwnership",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "bool",
          "logic": "Gets the compile ownership for a streaming compilation."
        },
        {
          "name": "StreamingCompilationFailed",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "void",
          "logic": "Handles a streaming compilation failure."
        },
        {
          "name": "FreeNativeModule",
          "parameters": [
            "NativeModule* native_module"
          ],
          "return_type": "void",
          "logic": "Frees a NativeModule."
        },
        {
          "name": "ReportLiveCodeForGC",
          "parameters": [
            "Isolate* isolate",
            "std::unordered_set<WasmCode*>& live_code"
          ],
          "return_type": "void",
          "logic": "Reports live Wasm code objects for garbage collection."
        },
        {
          "name": "ReportLiveCodeFromStackForGC",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Scans the stack of an isolate and reports any live WasmCode for GC."
        },
        {
          "name": "AddPotentiallyDeadCode",
          "parameters": [
            "WasmCode* code"
          ],
          "return_type": "void",
          "logic": "Adds code to the set of potentially dead code, triggering a GC if necessary."
        },
        {
          "name": "TriggerCodeGC_Locked",
          "parameters": [
            "size_t dead_code_limit"
          ],
          "return_type": "void",
          "logic": "Triggers the garbage collection of wasm code, assuming the lock is held."
        },
        {
          "name": "TriggerCodeGCForTesting",
          "parameters": [],
          "return_type": "void",
          "logic": "Triggers a code GC for testing purposes."
        },
        {
          "name": "FreeDeadCode",
          "parameters": [
            "const DeadCodeMap& dead_code",
            "std::vector<WasmCode*>& dead_wrappers"
          ],
          "return_type": "void",
          "logic": "Frees dead code objects from the given DeadCodeMap."
        },
        {
          "name": "FreeDeadCodeLocked",
          "parameters": [
            "const DeadCodeMap& dead_code",
            "std::vector<WasmCode*>& dead_wrappers"
          ],
          "return_type": "void",
          "logic": "Frees dead code objects from the given DeadCodeMap while holding the lock."
        },
        {
          "name": "GetOrCreateScript",
          "parameters": [
            "Isolate* isolate",
            "const std::shared_ptr<NativeModule>& native_module",
            "base::Vector<const char> source_url"
          ],
          "return_type": "DirectHandle<Script>",
          "logic": "Gets or creates a Script object for a NativeModule."
        },
        {
          "name": "GetBarrierForBackgroundCompile",
          "parameters": [],
          "return_type": "std::shared_ptr<OperationsBarrier>",
          "logic": "Gets the OperationsBarrier for background compilation."
        },
        {
          "name": "TriggerGC",
          "parameters": [
            "int8_t gc_sequence_index"
          ],
          "return_type": "void",
          "logic": "Triggers a garbage collection cycle."
        },
        {
          "name": "RemoveIsolateFromCurrentGC",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Removes an isolate from the current GC cycle."
        },
        {
          "name": "PotentiallyFinishCurrentGC",
          "parameters": [],
          "return_type": "void",
          "logic": "Finishes the current garbage collection cycle if all isolates have reported."
        },
        {
          "name": "DecodeAllNameSections",
          "parameters": [
            "CanonicalTypeNamesProvider* target"
          ],
          "return_type": "void",
          "logic": "Decode all name sections and adds it to the names provider."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the WasmEngine."
        },
        {
          "name": "PrintCurrentMemoryConsumptionEstimate",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints current memory consumption estimates."
        },
        {
          "name": "GetDeoptsExecutedCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of deoptimizations that have occurred."
        },
        {
          "name": "IncrementDeoptsExecutedCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Increments the count of deoptimizations executed."
        },
        {
          "name": "NewOrphanedGlobalHandle",
          "parameters": [
            "WasmOrphanedGlobalHandle** pointer"
          ],
          "return_type": "WasmOrphanedGlobalHandle*",
          "logic": "Creates a new orphaned global handle."
        },
        {
          "name": "FreeAllOrphanedGlobalHandles",
          "parameters": [
            "WasmOrphanedGlobalHandle* start"
          ],
          "return_type": "void",
          "logic": "Frees all orphaned global handles."
        },
        {
          "name": "NativeModuleCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of native modules."
        },
        {
          "name": "ClearWeakScriptHandle",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<Address*> location"
          ],
          "return_type": "void",
          "logic": "Clears the weak script handle."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CheckNoArchivedThreads",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Checks that no archived threads are present, throwing a fatal error if they are."
    },
    {
      "name": "ReportLiveCodeFromFrameForGC",
      "parameters": [
        "Isolate* isolate",
        "StackFrame* frame",
        "std::unordered_set<wasm::WasmCode*>& live_wasm_code"
      ],
      "return_type": "void",
      "logic": "Reports WasmCode from frame for GC."
    },
    {
      "name": "CreateWasmScript",
      "parameters": [
        "Isolate* isolate",
        "std::shared_ptr<NativeModule> native_module",
        "base::Vector<const char> source_url"
      ],
      "return_type": "DirectHandle<Script>",
      "logic": "Creates a Wasm Script object."
    },
    {
      "name": "InitializeOncePerProcess",
      "parameters": [],
      "return_type": "static void",
      "logic": "Initializes Wasm-related components on a process-wide level."
    },
    {
      "name": "GlobalTearDown",
      "parameters": [],
      "return_type": "static void",
      "logic": "Tears down Wasm-related components, releasing resources and shutting down background processes."
    },
    {
      "name": "GetWasmEngine",
      "parameters": [],
      "return_type": "WasmEngine*",
      "logic": "Returns the global WasmEngine instance."
    },
    {
      "name": "GetWasmCodeManager",
      "parameters": [],
      "return_type": "WasmCodeManager*",
      "logic": "Returns the global WasmCodeManager instance."
    },
    {
      "name": "GetWasmImportWrapperCache",
      "parameters": [],
      "return_type": "WasmImportWrapperCache*",
      "logic": "Returns the global WasmImportWrapperCache instance."
    },
    {
      "name": "GetCanonicalTypeNamesProvider",
      "parameters": [],
      "return_type": "CanonicalTypeNamesProvider*",
      "logic": "Returns the global CanonicalTypeNamesProvider instance."
    },
    {
      "name": "max_mem32_pages",
      "parameters": [],
      "return_type": "uint32_t",
      "logic": "Returns the maximum number of pages allowed for 32-bit Wasm memories."
    },
    {
      "name": "max_mem64_pages",
      "parameters": [],
      "return_type": "uint32_t",
      "logic": "Returns the maximum number of pages allowed for 64-bit Wasm memories."
    },
    {
      "name": "max_table_size",
      "parameters": [],
      "return_type": "uint32_t",
      "logic": "Returns the maximum size allowed for Wasm tables."
    },
    {
      "name": "max_table_init_entries",
      "parameters": [],
      "return_type": "uint32_t",
      "logic": "Returns the maximum number of initial entries in a table."
    },
    {
      "name": "max_module_size",
      "parameters": [],
      "return_type": "size_t",
      "logic": "Returns the maximum allowed size for a Wasm module."
    }
  ]
}