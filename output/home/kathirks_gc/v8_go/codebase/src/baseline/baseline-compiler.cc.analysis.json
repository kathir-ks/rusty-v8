{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/baseline-compiler.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/baseline/baseline-compiler.cc\",\n  \"imports\": [\n    \"src/baseline/baseline-compiler.h\",\n    \"algorithm\",\n    \"optional\",\n    \"type_traits\",\n    \"src/base/bits.h\",\n    \"src/baseline/baseline-assembler-inl.h\",\n    \"src/baseline/baseline-assembler.h\",\n    \"src/builtins/builtins-constructor.h\",\n    \"src/builtins/builtins-descriptors.h\",\n    \"src/builtins/builtins.h\",\n    \"src/codegen/assembler.h\",\n    \"src/codegen/compiler.h\",\n    \"src/codegen/interface-descriptors-inl.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/codegen/macro-assembler-inl.h\",\n    \"src/common/globals.h\",\n    \"src/execution/frame-constants.h\",\n    \"src/heap/local-factory-inl.h\",\n    \"src/interpreter/bytecode-array-iterator.h\",\n    \"src/interpreter/bytecode-flags-and-tokens.h\",\n    \"src/logging/runtime-call-stats-scope.h\",\n    \"src/objects/code.h\",\n    \"src/objects/heap-object.h\",\n    \"src/objects/instance-type.h\",\n    \"src/objects/literal-objects-inl.h\",\n    \"src/objects/shared-function-info-inl.h\",\n    \"src/roots/roots.h\",\n    \"src/baseline/x64/baseline-compiler-x64-inl.h\",\n    \"src/baseline/arm64/baseline-compiler-arm64-inl.h\",\n    \"src/baseline/ia32/baseline-compiler-ia32-inl.h\",\n    \"src/baseline/arm/baseline-compiler-arm-inl.h\",\n    \"src/baseline/ppc/baseline-compiler-ppc-inl.h\",\n    \"src/baseline/s390/baseline-compiler-s390-inl.h\",\n    \"src/baseline/riscv/baseline-compiler-riscv-inl.h\",\n    \"src/baseline/mips64/baseline-compiler-mips64-inl.h\",\n    \"src/baseline/loong64/baseline-compiler-loong64-inl.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"BytecodeOffsetTableBuilder\",\n      \"properties\": [\n        \"bytes_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ToBytecodeOffsetTable\",\n          \"parameters\": [\n            \"IsolateT* isolate\"\n          ],\n          \"return_type\": \"Handle<TrustedByteArray>\",\n          \"logic\": \"Creates a TrustedByteArray from the collected bytecode offsets.\"\n        },\n        {\n          \"name\": \"Reserve\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reserves space in the internal byte vector.\"\n        },\n        {\n          \"name\": \"AddPosition\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a bytecode offset to the internal byte vector.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BaselineCompiler\",\n      \"properties\": [\n        \"local_isolate_\",\n        \"stats_\",\n        \"shared_function_info_\",\n        \"bytecode_\",\n        \"zone_\",\n        \"masm_\",\n        \"basm_\",\n        \"iterator_\",\n        \"labels_\",\n        \"label_tags_\",\n        \"bytecode_offset_table_builder_\",\n        \"effect_state_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BaselineCompiler\",\n          \"parameters\": [\n            \"LocalIsolate* local_isolate\",\n            \"Handle<SharedFunctionInfo> shared_function_info\",\n            \"Handle<BytecodeArray> bytecode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the BaselineCompiler class. Initializes compiler state.\"\n        },\n        {\n          \"name\": \"GenerateCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Generates the baseline code for the given bytecode array.\"\n        },\n        {\n          \"name\": \"Build\",\n          \"parameters\": [],\n          \"return_type\": \"MaybeHandle<Code>\",\n          \"logic\": \"Builds the final code object from the generated assembly code.\"\n        },\n        {\n          \"name\": \"EstimateInstructionSize\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> bytecode\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Estimates the size of the generated instructions for the given bytecode array.\"\n        },\n        {\n          \"name\": \"RegisterOperand\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"interpreter::Register\",\n          \"logic\": \"Returns the interpreter register operand at the specified index.\"\n        },\n        {\n          \"name\": \"LoadRegister\",\n          \"parameters\": [\n            \"Register output\",\n            \"int operand_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a register operand into the specified register.\"\n        },\n        {\n          \"name\": \"StoreRegister\",\n          \"parameters\": [\n            \"int operand_index\",\n            \"Register value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the value in a given register to a register operand.\"\n        },\n        {\n          \"name\": \"StoreRegisterPair\",\n          \"parameters\": [\n            \"int operand_index\",\n            \"Register val0\",\n            \"Register val1\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the two values in a given registers to a register pair operand.\"\n        },\n        {\n          \"name\": \"Constant\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Handle<Type>\",\n          \"logic\": \"Returns the constant at the specified index as a Handle.\"\n        },\n        {\n          \"name\": \"ConstantSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Returns the constant at the specified index as a Tagged Smi.\"\n        },\n        {\n          \"name\": \"LoadConstant\",\n          \"parameters\": [\n            \"Register output\",\n            \"int operand_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a constant value into the specified register.\"\n        },\n        {\n          \"name\": \"Uint\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the unsigned immediate operand at the specified index.\"\n        },\n        {\n          \"name\": \"Int\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the immediate operand at the specified index.\"\n        },\n        {\n          \"name\": \"Index\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the index operand at the specified index.\"\n        },\n        {\n          \"name\": \"Flag8\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the flag8 operand at the specified index.\"\n        },\n        {\n          \"name\": \"Flag16\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the flag16 operand at the specified index.\"\n        },\n                {\n          \"name\": \"RegisterCount\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the register count operand at the specified index.\"\n        },\n        {\n          \"name\": \"IndexAsTagged\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<TaggedIndex>\",\n          \"logic\": \"Returns the index operand at the specified index as a TaggedIndex.\"\n        },\n        {\n          \"name\": \"UintAsTagged\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<TaggedIndex>\",\n          \"logic\": \"Returns the uint operand at the specified index as a TaggedIndex.\"\n        },\n        {\n          \"name\": \"IndexAsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Returns the index operand at the specified index as a Smi.\"\n        },\n        {\n          \"name\": \"IntAsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Returns the int operand at the specified index as a Smi.\"\n        },\n        {\n          \"name\": \"UintAsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Returns the uint operand at the specified index as a Smi.\"\n        },\n        {\n          \"name\": \"Flag8AsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Returns the flag8 operand at the specified index as a Smi.\"\n        },\n        {\n          \"name\": \"Flag16AsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Returns the flag16 operand at the specified index as a Smi.\"\n        },\n        {\n          \"name\": \"FeedbackVector\",\n          \"parameters\": [],\n          \"return_type\": \"MemOperand\",\n          \"logic\": \"Returns the memory operand for accessing the feedback vector.\"\n        },\n        {\n          \"name\": \"LoadFeedbackVector\",\n          \"parameters\": [\n            \"Register output\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the feedback vector into the specified register.\"\n        },\n        {\n          \"name\": \"LoadClosureFeedbackArray\",\n          \"parameters\": [\n            \"Register output\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the closure feedback array from the feedback vector into the specified register.\"\n        },\n        {\n          \"name\": \"SelectBooleanConstant\",\n          \"parameters\": [\n            \"Register output\",\n            \"std::function<void(Label*, Label::Distance)> jump_func\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects either the true or false boolean constant based on the result of the given function.\"\n        },\n        {\n          \"name\": \"AddPosition\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds the current program counter offset to the bytecode offset table.\"\n        },\n        {\n          \"name\": \"PreVisitSingleBytecode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a pre-visit of a single bytecode to prepare labels.\"\n        },\n        {\n          \"name\": \"VisitSingleBytecode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a single bytecode and generates the corresponding assembly code.\"\n        },\n        {\n          \"name\": \"VerifyFrame\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Verifies the stack frame size and the feedback vector.\"\n        },\n        {\n          \"name\": \"TraceBytecode\",\n          \"parameters\": [\n            \"Runtime::FunctionId function_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces bytecode entry or exit, using a Runtime function, used for debugging.\"\n        },\n        {\n          \"name\": \"UpdateInterruptBudgetAndJumpToLabel\",\n          \"parameters\": [\n            \"int weight\",\n            \"Label* label\",\n            \"Label* skip_interrupt_label\",\n            \"StackCheckBehavior stack_check_behavior\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates the interrupt budget and jumps to the specified label if the budget is not exceeded.\"\n        },\n        {\n          \"name\": \"JumpIfRoot\",\n          \"parameters\": [\n            \"RootIndex root\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Jumps to the specified label if the accumulator contains the specified root value.\"\n        },\n        {\n          \"name\": \"JumpIfNotRoot\",\n          \"parameters\": [\n            \"RootIndex root\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Jumps to the specified label if the accumulator does not contain the specified root value.\"\n        },\n        {\n          \"name\": \"BuildForwardJumpLabel\",\n          \"parameters\": [],\n          \"return_type\": \"Label*\",\n          \"logic\": \"Builds and returns the label for a forward jump.\"\n        },\n        {\n          \"name\": \"CallBuiltin\",\n          \"parameters\": [\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls the specified builtin function.\"\n        },\n        {\n          \"name\": \"TailCallBuiltin\",\n          \"parameters\": [\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Tail calls the specified builtin function.\"\n        },\n        {\n          \"name\": \"CallRuntime\",\n          \"parameters\": [\n            \"Runtime::FunctionId function\",\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls the specified runtime function.\"\n        },\n        {\n          \"name\": \"JumpIfToBoolean\",\n          \"parameters\": [\n            \"bool do_jump_if_true\",\n            \"Label* label\",\n            \"Label::Distance distance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls the ToBoolean builtin function and jumps to the label, depending on do_jump_if_true.\"\n        },\n        {\n          \"name\": \"VisitLdaZero\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the smi zero value into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the smi constant at index 0 into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the undefined value into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaNull\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the null value into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaTheHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the the hole value into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the true value into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the false value into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaConstant\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the constant at index 0 into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaGlobal\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a global variable into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaGlobalInsideTypeof\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a global variable into the accumulator, inside a typeof.\"\n        },\n        {\n          \"name\": \"VisitStaGlobal\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a global variable.\"\n        },\n        {\n          \"name\": \"VisitPushContext\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes the current context onto the stack.\"\n        },\n        {\n          \"name\": \"VisitPopContext\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Pops the context from the stack.\"\n        },\n        {\n          \"name\": \"VisitLdaContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaScriptContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a script context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaImmutableContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from an immutable context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaCurrentContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from the current context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaCurrentScriptContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from the current script context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaImmutableCurrentContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from an immutable current context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitStaContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a context slot.\"\n        },\n        {\n          \"name\": \"VisitStaCurrentContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a context slot in the current context.\"\n        },\n        {\n          \"name\": \"VisitStaScriptContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a script context slot.\"\n        },\n        {\n          \"name\": \"VisitStaCurrentScriptContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a script context slot in the current context.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupScriptContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup script context slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupGlobalSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup global slot into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupSlotInsideTypeof\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup slot into the accumulator, inside a typeof.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupContextSlotInsideTypeof\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup context slot into the accumulator, inside a typeof.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupScriptContextSlotInsideTypeof\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup script context slot into the accumulator, inside a typeof.\"\n        },\n        {\n          \"name\": \"VisitLdaLookupGlobalSlotInsideTypeof\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a lookup global slot into the accumulator, inside a typeof.\"\n        },\n        {\n          \"name\": \"VisitStaLookupSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a lookup slot.\"\n        },\n        {\n          \"name\": \"VisitLdar\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a register into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitStar\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the value in the accumulator to a register.\"\n        },\n        {\n          \"name\": \"VisitMov\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves a value from one register to another.\"\n        },\n        {\n          \"name\": \"VisitGetNamedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Gets a named property from an object and stores the result in the accumulator.\"\n        },\n        {\n          \"name\": \"VisitGetNamedPropertyFromSuper\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Gets a named property from the super object and stores the result in the accumulator.\"\n        },\n        {\n          \"name\": \"VisitGetKeyedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Gets a keyed property from an object and stores the result in the accumulator.\"\n        },\n        {\n          \"name\": \"VisitGetEnumeratedKeyedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Gets an enumerated keyed property from an object and stores the result in the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaModuleVariable\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a module variable into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitStaModuleVariable\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the accumulator into a module variable.\"\n        },\n        {\n          \"name\": \"VisitSetNamedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a named property on an object.\"\n        },\n        {\n          \"name\": \"VisitDefineNamedOwnProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Defines a named own property on an object.\"\n        },\n        {\n          \"name\": \"VisitSetKeyedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a keyed property on an object.\"\n        },\n        {\n          \"name\": \"VisitDefineKeyedOwnProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Defines a keyed own property on an object.\"\n        },\n        {\n          \"name\": \"VisitStaInArrayLiteral\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores a value into an array literal.\"\n        },\n        {\n          \"name\": \"VisitDefineKeyedOwnPropertyInLiteral\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Defines a keyed own property in a literal.\"\n        },\n        {\n          \"name\": \"VisitAdd\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds the value in register 0 and the accumulator.\"\n        },\n        {\n          \"name\": \"VisitSub\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Subtracts the value in register 0 from the accumulator.\"\n        },\n        {\n          \"name\": \"VisitMul\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Multiplies the value in register 0 and the accumulator.\"\n        },\n        {\n          \"name\": \"VisitDiv\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Divides the accumulator by the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitMod\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calculates the modulus of the accumulator and the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitExp\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calculates the exponential value of the accumulator to the power of the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitBitwiseOr\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise OR operation on the accumulator and the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitBitwiseXor\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise XOR operation on the accumulator and the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitBitwiseAnd\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise AND operation on the accumulator and the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitShiftLeft\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Shifts the accumulator left by the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitShiftRight\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Shifts the accumulator right by the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitShiftRightLogical\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Shifts the accumulator right logically by the value in register 0.\"\n        },\n        {\n          \"name\": \"VisitAddSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds the smi constant at index 0 to the accumulator.\"\n        },\n        {\n          \"name\": \"VisitSubSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Subtracts the smi constant at index 0 from the accumulator.\"\n        },\n        {\n          \"name\": \"VisitMulSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Multiplies the accumulator by the smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitDivSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Divides the accumulator by the smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitModSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calculates the modulus of the accumulator and the smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitExpSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calculates the exponential value of the accumulator to the power of the Smi at index 0.\"\n        },\n        {\n          \"name\": \"VisitBitwiseOrSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise OR operation on the accumulator and the smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitBitwiseXorSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise XOR operation on the accumulator and the smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitBitwiseAndSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise AND operation on the accumulator and the smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitShiftLeftSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Shifts the accumulator left by the Smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitShiftRightSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Shifts the accumulator right by the Smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitShiftRightLogicalSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Shifts the accumulator right logically by the Smi constant at index 0.\"\n        },\n        {\n          \"name\": \"VisitInc\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Increments the accumulator.\"\n        },\n        {\n          \"name\": \"VisitDec\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decrements the accumulator.\"\n        },\n        {\n          \"name\": \"VisitNegate\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Negates the accumulator.\"\n        },\n        {\n          \"name\": \"VisitBitwiseNot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a bitwise NOT operation on the accumulator.\"\n        },\n        {\n          \"name\": \"VisitToBooleanLogicalNot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Converts the accumulator to a boolean and performs a logical NOT operation.\"\n        },\n        {\n          \"name\": \"VisitLogicalNot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a logical NOT operation on the accumulator.\"\n        },\n        {\n          \"name\": \"VisitTypeOf\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calculates the type of the accumulator.\"\n        },\n        {\n          \"name\": \"VisitDeletePropertyStrict\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes the property in object pointed by RegisterOperand(0), using accumulator as property name, strict mode.\"\n        },\n        {\n          \"name\": \"VisitDeletePropertySloppy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes the property in object pointed by RegisterOperand(0), using accumulator as property name, sloppy mode.\"\n        },\n        {\n          \"name\": \"VisitGetSuperConstructor\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the prototype for the super constructor from the accumulator.\"\n        },\n        {\n          \"name\": \"VisitFindNonDefaultConstructorOrConstruct\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Finds a non default constructor or construct and stores the result.\"\n        },\n        {\n          \"name\": \"BuildCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds a call bytecode, compact version or regular version\"\n        },\n        {\n          \"name\": \"VisitCallAnyReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function with any receiver.\"\n        },\n        {\n          \"name\": \"VisitCallProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function on a property.\"\n        },\n        {\n          \"name\": \"VisitCallProperty0\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function on a property with 0 arguments.\"\n        },\n        {\n          \"name\": \"VisitCallProperty1\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function on a property with 1 argument.\"\n        },\n        {\n          \"name\": \"VisitCallProperty2\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function on a property with 2 arguments.\"\n        },\n        {\n          \"name\": \"VisitCallUndefinedReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function with an undefined receiver.\"\n        },\n        {\n          \"name\": \"VisitCallUndefinedReceiver0\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function with an undefined receiver and 0 arguments.\"\n        },\n        {\n          \"name\": \"Visit"
}