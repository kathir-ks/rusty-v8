{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/baseline-batch-compiler.cc",
  "imports": [
    "src/baseline/baseline-batch-compiler.h",
    "algorithm",
    "src/base/fpu.h",
    "src/baseline/baseline-compiler.h",
    "src/codegen/compiler.h",
    "src/execution/isolate.h",
    "src/handles/global-handles-inl.h",
    "src/heap/factory-inl.h",
    "src/heap/heap-inl.h",
    "src/heap/local-heap-inl.h",
    "src/heap/parked-scope.h",
    "src/objects/fixed-array-inl.h",
    "src/objects/js-function-inl.h",
    "src/utils/locked-queue-inl.h"
  ],
  "classes": [
    {
      "name": "BaselineCompilerTask",
      "properties": [
        "shared_function_info_",
        "bytecode_",
        "maybe_code_",
        "time_taken_"
      ],
      "methods": [
        {
          "name": "BaselineCompilerTask",
          "parameters": [
            "Isolate* isolate",
            "PersistentHandles* handles",
            "Tagged<SharedFunctionInfo> sfi"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the task with the shared function info and bytecode.  It creates handles for both and sets the 'is_sparkplug_compiling' flag on the shared function info."
        },
        {
          "name": "Compile",
          "parameters": [
            "LocalIsolate* local_isolate"
          ],
          "return_type": "void",
          "logic": "Compiles the bytecode for the shared function info using BaselineCompiler in a background thread.  It measures the compilation time and stores the resulting code in a MaybeIndirectHandle."
        },
        {
          "name": "Install",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Installs the compiled code (if available) into the SharedFunctionInfo.  It clears the 'is_sparkplug_compiling' flag, checks if the code can be installed, and updates the baseline code and age of the shared function info. It also logs the compilation event."
        }
      ]
    },
    {
      "name": "BaselineBatchCompilerJob",
      "properties": [
        "tasks_",
        "handles_"
      ],
      "methods": [
        {
          "name": "BaselineBatchCompilerJob",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WeakFixedArray> task_queue",
            "int batch_size"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the batch compiler job with a queue of tasks. It iterates through the provided queue, skips invalid entries, and creates BaselineCompilerTask objects for valid functions, storing them in a vector."
        },
        {
          "name": "Compile",
          "parameters": [
            "LocalIsolate* local_isolate"
          ],
          "return_type": "void",
          "logic": "Compiles all the tasks in the batch using a LocalIsolate. It attaches and detaches the PersistentHandles to the LocalIsolate."
        },
        {
          "name": "Install",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Installs the compiled code for each task in the batch."
        }
      ]
    },
    {
      "name": "ConcurrentBaselineCompiler",
      "properties": [
        "isolate_",
        "job_handle_",
        "incoming_queue_",
        "outgoing_queue_"
      ],
      "methods": [
        {
          "name": "ConcurrentBaselineCompiler",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the concurrent baseline compiler and starts a background job if concurrent sparkplug is enabled. The job is responsible for compiling batches of functions."
        },
        {
          "name": "~ConcurrentBaselineCompiler",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that cancels the background job, ensuring that the queues are safe to access."
        },
        {
          "name": "CompileBatch",
          "parameters": [
            "Handle<WeakFixedArray> task_queue",
            "int batch_size"
          ],
          "return_type": "void",
          "logic": "Enqueues a batch of functions to be compiled in the background. It creates a BaselineBatchCompilerJob and adds it to the incoming queue."
        },
        {
          "name": "InstallBatch",
          "parameters": [],
          "return_type": "void",
          "logic": "Installs all the completed batches from the outgoing queue."
        }
      ],
      "JobDispatcher": {
        "name": "JobDispatcher",
        "properties": [
          "isolate_",
          "incoming_queue_",
          "outgoing_queue_"
        ],
        "methods": [
          {
            "name": "JobDispatcher",
            "parameters": [
              "Isolate* isolate",
              "LockedQueue<std::unique_ptr<BaselineBatchCompilerJob>>* incoming_queue",
              "LockedQueue<std::unique_ptr<BaselineBatchCompilerJob>>* outcoming_queue"
            ],
            "return_type": "void",
            "logic": "Constructor for JobDispatcher. Initialize the isolate and queues."
          },
          {
            "name": "Run",
            "parameters": [
              "JobDelegate* delegate"
            ],
            "return_type": "void",
            "logic": "The job run loop. Dequeues jobs from the incoming queue, compiles them, and enqueues them to the outgoing queue."
          },
          {
            "name": "GetMaxConcurrency",
            "parameters": [
              "size_t worker_count"
            ],
            "return_type": "size_t",
            "logic": "Calculates the maximum concurrency for the job based on flags and queue sizes."
          }
        ]
      }
    },
    {
      "name": "BaselineBatchCompiler",
      "properties": [
        "isolate_",
        "compilation_queue_",
        "last_index_",
        "estimated_instruction_size_",
        "enabled_",
        "concurrent_compiler_"
      ],
      "methods": [
        {
          "name": "BaselineBatchCompiler",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the batch compiler. It creates a concurrent compiler if concurrent sparkplug is enabled."
        },
        {
          "name": "~BaselineBatchCompiler",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that destroys the global handle for the compilation queue."
        },
        {
          "name": "concurrent",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the batch compiler is running concurrently."
        },
        {
          "name": "EnqueueFunction",
          "parameters": [
            "DirectHandle<JSFunction> function"
          ],
          "return_type": "void",
          "logic": "Enqueues a JSFunction for baseline compilation. It checks if batch compilation is enabled and either compiles the function immediately or adds it to the queue."
        },
        {
          "name": "EnqueueSFI",
          "parameters": [
            "Tagged<SharedFunctionInfo> shared"
          ],
          "return_type": "void",
          "logic": "Enqueues a SharedFunctionInfo for compilation."
        },
        {
          "name": "Enqueue",
          "parameters": [
            "DirectHandle<SharedFunctionInfo> shared"
          ],
          "return_type": "void",
          "logic": "Adds a SharedFunctionInfo to the compilation queue."
        },
        {
          "name": "InstallBatch",
          "parameters": [],
          "return_type": "void",
          "logic": "Installs all batches that have been compiled concurrently."
        },
        {
          "name": "EnsureQueueCapacity",
          "parameters": [],
          "return_type": "void",
          "logic": "Ensures that the compilation queue has enough capacity. It creates or grows the queue as needed."
        },
        {
          "name": "CompileBatch",
          "parameters": [
            "DirectHandle<JSFunction> function"
          ],
          "return_type": "void",
          "logic": "Compiles a batch of functions immediately."
        },
        {
          "name": "CompileBatchConcurrent",
          "parameters": [
            "Tagged<SharedFunctionInfo> shared"
          ],
          "return_type": "void",
          "logic": "Compiles a batch of functions concurrently."
        },
        {
          "name": "ShouldCompileBatch",
          "parameters": [
            "Tagged<SharedFunctionInfo> shared"
          ],
          "return_type": "bool",
          "logic": "Determines if a batch should be compiled based on estimated size and other factors."
        },
        {
          "name": "MaybeCompileFunction",
          "parameters": [
            "Tagged<MaybeObject> maybe_sfi"
          ],
          "return_type": "bool",
          "logic": "Tries to compile a function if it's still valid and hasn't been flushed."
        },
        {
          "name": "ClearBatch",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the current batch and resets the estimated instruction size."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CanCompileWithConcurrentBaseline",
      "parameters": [
        "Tagged<SharedFunctionInfo> shared",
        "Isolate* isolate"
      ],
      "return_type": "bool",
      "logic": "Checks if a shared function info can be compiled with the concurrent baseline compiler. This checks that it doesn't have baseline code already and is generally suitable for baseline compilation."
    }
  ]
}