{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/s390/baseline-assembler-s390-inl.h",
  "imports": [
    "src/baseline/baseline-assembler.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/s390/assembler-s390-inl.h",
    "src/objects/literal-objects-inl.h"
  ],
  "classes": [
    {
      "name": "BaselineAssembler::ScratchRegisterScope",
      "properties": [
        "assembler_",
        "prev_scope_",
        "registers_used_"
      ],
      "methods": [
        {
          "name": "ScratchRegisterScope",
          "parameters": [
            "BaselineAssembler* assembler"
          ],
          "return_type": "",
          "logic": "Constructor that initializes the scope and links it to the assembler and previous scope.  It increments the assembler's current scope."
        },
        {
          "name": "~ScratchRegisterScope",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor that restores the assembler's scratch register scope to the previous scope."
        },
        {
          "name": "AcquireScratch",
          "parameters": [],
          "return_type": "Register",
          "logic": "Acquires a scratch register from the pool, incrementing the counter of used registers.  Asserts if all registers are used."
        }
      ]
    },
    {
      "name": "EnsureAccumulatorPreservedScope",
      "properties": [],
      "methods": [
        {
          "name": "AssertEqualToAccumulator",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Asserts that the provided register is equal to the interpreter accumulator register."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Clobbers",
      "parameters": [
        "Register target",
        "MemOperand op"
      ],
      "return_type": "bool",
      "logic": "Checks if a given register is used by a memory operand. Used in debug builds."
    },
    {
      "name": "JumpIfHelper",
      "parameters": [
        "MacroAssembler* assm",
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target"
      ],
      "return_type": "void",
      "logic": "Helper function to perform a conditional jump based on the result of comparing two registers. Handles both 32-bit and 64-bit comparisons (signed/unsigned)."
    },
    {
      "name": "BaselineAssembler::RegisterFrameOperand",
      "parameters": [
        "interpreter::Register interpreter_register"
      ],
      "return_type": "MemOperand",
      "logic": "Calculates the memory operand for an interpreter register within the frame."
    },
    {
      "name": "BaselineAssembler::RegisterFrameAddress",
      "parameters": [
        "interpreter::Register interpreter_register",
        "Register rscratch"
      ],
      "return_type": "void",
      "logic": "Calculates the address of an interpreter register within the frame and stores it in the provided scratch register."
    },
    {
      "name": "BaselineAssembler::FeedbackVectorOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns a MemOperand representing the feedback vector in the frame."
    },
    {
      "name": "BaselineAssembler::FeedbackCellOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns a MemOperand representing the feedback cell in the frame."
    },
    {
      "name": "BaselineAssembler::Bind",
      "parameters": [
        "Label* label"
      ],
      "return_type": "void",
      "logic": "Binds a label to the current assembly position."
    },
    {
      "name": "BaselineAssembler::JumpTarget",
      "parameters": [],
      "return_type": "void",
      "logic": "Placeholder method for jump target on arm"
    },
    {
      "name": "BaselineAssembler::Jump",
      "parameters": [
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Unconditional jump to a label."
    },
    {
      "name": "BaselineAssembler::JumpIfRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is equal to the root value."
    },
    {
      "name": "BaselineAssembler::JumpIfNotRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is not equal to the root value."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfImmediate",
      "parameters": [
        "Condition cc",
        "Register left",
        "int right",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a register to an immediate value."
    },
    {
      "name": "BaselineAssembler::JumpIfNotSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is not a Smi."
    },
    {
      "name": "BaselineAssembler::TestAndBranch",
      "parameters": [
        "Register value",
        "int mask",
        "Condition cc",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Performs a bitwise AND operation on a register and a mask, then jumps to the target if the condition is met based on the result."
    },
    {
      "name": "BaselineAssembler::JumpIf",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "const Operand& rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a register to an operand."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectTypeFast",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the object type matches the given instance type. Uses a scratch register to avoid clobbering registers."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectType",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Register map",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the object type matches the given instance type, loading map into the provided register."
    },
    {
      "name": "BaselineAssembler::JumpIfInstanceType",
      "parameters": [
        "Condition cc",
        "Register map",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the instance type of the given map matches the given instance type."
    },
    {
      "name": "BaselineAssembler::JumpIfPointer",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a register to a pointer loaded from memory."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register value",
        "Tagged<Smi> smi",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a register containing a Smi to a Smi literal."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing two registers both containing Smis."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a register to a tagged value loaded from memory."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "MemOperand operand",
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a tagged value loaded from memory to a register."
    },
    {
      "name": "BaselineAssembler::JumpIfByte",
      "parameters": [
        "Condition cc",
        "Register value",
        "int32_t byte",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the condition is met when comparing a register with a byte"
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "interpreter::Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from a source register to an interpreter register in the frame."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Tagged<TaggedIndex> value"
      ],
      "return_type": "void",
      "logic": "Moves a tagged index value to a register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "MemOperand output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from a source register to a memory location."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "ExternalReference reference"
      ],
      "return_type": "void",
      "logic": "Moves an external reference to a register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Handle<HeapObject> value"
      ],
      "return_type": "void",
      "logic": "Moves a handle to a heap object to a register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "int32_t value"
      ],
      "return_type": "void",
      "logic": "Moves an immediate value to a register."
    },
    {
      "name": "BaselineAssembler::MoveMaybeSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves a maybe-Smi value from source to output register"
    },
    {
      "name": "BaselineAssembler::MoveSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves a Smi value from source to output register"
    },
    {
      "name": "ToRegister",
      "parameters": [
        "BaselineAssembler* basm",
        "BaselineAssembler::ScratchRegisterScope* scope",
        "Arg arg"
      ],
      "return_type": "Register",
      "logic": "Helper function that acquires a scratch register and moves the given argument into it."
    },
    {
      "name": "ToRegister",
      "parameters": [
        "BaselineAssembler* basm",
        "BaselineAssembler::ScratchRegisterScope* scope",
        "Register reg"
      ],
      "return_type": "Register",
      "logic": "Helper function that returns the existing register."
    },
    {
      "name": "BaselineAssembler::Push",
      "parameters": [
        "T... vals"
      ],
      "return_type": "int",
      "logic": "Pushes a variable number of values onto the stack. Returns the number of values pushed."
    },
    {
      "name": "BaselineAssembler::PushReverse",
      "parameters": [
        "T... vals"
      ],
      "return_type": "void",
      "logic": "Pushes a variable number of values onto the stack in reverse order."
    },
    {
      "name": "BaselineAssembler::Pop",
      "parameters": [
        "T... registers"
      ],
      "return_type": "void",
      "logic": "Pops a variable number of registers from the stack."
    },
    {
      "name": "BaselineAssembler::LoadTaggedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from an object into a register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from an object into a register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedFieldAndUntag",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from an object into a register and then untags it (removes the Smi tag)."
    },
    {
      "name": "BaselineAssembler::LoadWord16FieldZeroExtend",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a 16-bit word from a field in an object, zero-extending it to the full register size."
    },
    {
      "name": "BaselineAssembler::LoadWord8Field",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads an 8-bit word from a field in an object."
    },
    {
      "name": "BaselineAssembler::StoreTaggedSignedField",
      "parameters": [
        "Register target",
        "int offset",
        "Tagged<Smi> value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged signed value into a field of an object."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldWithWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field with a write barrier to ensure garbage collection consistency."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldNoWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field without a write barrier (used in specific cases where the write barrier is not needed)."
    },
    {
      "name": "BaselineAssembler::TryLoadOptimizedOsrCode",
      "parameters": [
        "Register scratch_and_result",
        "Register feedback_vector",
        "FeedbackSlot slot",
        "Label* on_result",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Tries to load optimized OSR (On-Stack Replacement) code from the feedback vector.  If successful, jumps to the on_result label."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "int32_t weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds a weight to the interrupt budget and jumps to the skip_interrupt_label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "Register weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds a weight to the interrupt budget and jumps to the skip_interrupt_label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::LdaContextSlot",
      "parameters": [
        "Register context",
        "uint32_t index",
        "uint32_t depth",
        "CompressionMode compression_mode"
      ],
      "return_type": "void",
      "logic": "Loads a context slot from a context at a given index and depth into the accumulator."
    },
    {
      "name": "BaselineAssembler::StaContextSlot",
      "parameters": [
        "Register context",
        "Register value",
        "uint32_t index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a context slot in a context at a given index and depth."
    },
    {
      "name": "BaselineAssembler::LdaModuleVariable",
      "parameters": [
        "Register context",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Loads a module variable from a context into the accumulator."
    },
    {
      "name": "BaselineAssembler::StaModuleVariable",
      "parameters": [
        "Register context",
        "Register value",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a module variable in a context."
    },
    {
      "name": "BaselineAssembler::IncrementSmi",
      "parameters": [
        "MemOperand lhs"
      ],
      "return_type": "void",
      "logic": "Atomically increments a Smi value in memory."
    },
    {
      "name": "BaselineAssembler::Word32And",
      "parameters": [
        "Register output",
        "Register lhs",
        "int rhs"
      ],
      "return_type": "void",
      "logic": "Performs a 32-bit AND operation between a register and an immediate value."
    },
    {
      "name": "BaselineAssembler::Switch",
      "parameters": [
        "Register reg",
        "int case_value_base",
        "Label** labels",
        "int num_labels"
      ],
      "return_type": "void",
      "logic": "Implements a switch statement using a jump table."
    },
    {
      "name": "BaselineAssembler::EmitReturn",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Emits the code for returning from a baseline function, updating the interrupt budget and leaving the frame."
    }
  ]
}