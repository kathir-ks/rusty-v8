{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/baseline-assembler.h",
  "imports": [
    "src/codegen/macro-assembler.h",
    "src/interpreter/bytecode-register.h",
    "src/objects/tagged-index.h"
  ],
  "classes": [
    {
      "name": "BaselineAssembler",
      "properties": [
        "masm_",
        "scratch_register_scope_"
      ],
      "methods": [
        {
          "name": "BaselineAssembler",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Constructor for the BaselineAssembler class, initializes the MacroAssembler pointer."
        },
        {
          "name": "RegisterFrameOperand",
          "parameters": [
            "interpreter::Register interpreter_register"
          ],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand for accessing the register frame at the given interpreter register."
        },
        {
          "name": "RegisterFrameAddress",
          "parameters": [
            "interpreter::Register interpreter_register",
            "Register rscratch"
          ],
          "return_type": "void",
          "logic": "Calculates the address of a register in the frame and stores it in the scratch register."
        },
        {
          "name": "ContextOperand",
          "parameters": [],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand to access the context."
        },
        {
          "name": "FunctionOperand",
          "parameters": [],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand to access the function."
        },
        {
          "name": "FeedbackVectorOperand",
          "parameters": [],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand to access the feedback vector."
        },
        {
          "name": "FeedbackCellOperand",
          "parameters": [],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand to access the feedback cell."
        },
        {
          "name": "GetCode",
          "parameters": [
            "LocalIsolate* isolate",
            "CodeDesc* desc"
          ],
          "return_type": "void",
          "logic": "Retrieves the generated code from the MacroAssembler."
        },
        {
          "name": "pc_offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current offset in the generated code."
        },
        {
          "name": "CodeEntry",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the code entry point for debugging and profiling purposes."
        },
        {
          "name": "ExceptionHandler",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the exception handler point for exception handling purposes."
        },
        {
          "name": "RecordComment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Records a comment in the generated code for debugging purposes."
        },
        {
          "name": "Trap",
          "parameters": [],
          "return_type": "void",
          "logic": "Inserts a trap instruction."
        },
        {
          "name": "DebugBreak",
          "parameters": [],
          "return_type": "void",
          "logic": "Inserts a breakpoint instruction."
        },
        {
          "name": "DecodeField",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Decodes a field of an object."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current code position."
        },
        {
          "name": "JumpTarget",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the current position as a valid jump target."
        },
        {
          "name": "Jump",
          "parameters": [
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Unconditional jump to a label."
        },
        {
          "name": "JumpIfRoot",
          "parameters": [
            "Register value",
            "RootIndex index",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a register contains a specific root value."
        },
        {
          "name": "JumpIfNotRoot",
          "parameters": [
            "Register value",
            "RootIndex index",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a register does not contain a specific root value."
        },
        {
          "name": "JumpIfSmi",
          "parameters": [
            "Register value",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a register contains a Smi value."
        },
        {
          "name": "JumpIfNotSmi",
          "parameters": [
            "Register value",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a register does not contain a Smi value."
        },
        {
          "name": "TestAndBranch",
          "parameters": [
            "Register value",
            "int mask",
            "Condition cc",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Tests a register against a mask and jumps to a label based on the condition."
        },
        {
          "name": "JumpIf",
          "parameters": [
            "Condition cc",
            "Register lhs",
            "const Operand& rhs",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a condition is met between a register and an operand."
        },
        {
          "name": "JumpIfJSAnyIsPrimitive",
          "parameters": [
            "Register heap_object",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if the heap object is primitive."
        },
        {
          "name": "JumpIfObjectType",
          "parameters": [
            "Condition cc",
            "Register object",
            "InstanceType instance_type",
            "Register map",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if the object type matches the given instance type based on the condition."
        },
        {
          "name": "JumpIfObjectTypeFast",
          "parameters": [
            "Condition cc",
            "Register object",
            "InstanceType instance_type",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if the object type matches the given instance type based on the condition using a potentially faster method."
        },
        {
          "name": "JumpIfInstanceType",
          "parameters": [
            "Condition cc",
            "Register map",
            "InstanceType instance_type",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if the instance type matches the given instance type based on the condition using the map register."
        },
        {
          "name": "JumpIfPointer",
          "parameters": [
            "Condition cc",
            "Register value",
            "MemOperand operand",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a condition is met between a register and a memory operand."
        },
        {
          "name": "CheckSmi",
          "parameters": [
            "Register value"
          ],
          "return_type": "Condition",
          "logic": "Checks if the value is a Smi and returns the corresponding condition."
        },
        {
          "name": "JumpIfSmi",
          "parameters": [
            "Condition cc",
            "Register value",
            "Tagged<Smi> smi",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if the value is equal to the immediate Smi based on condition."
        },
        {
          "name": "JumpIfSmi",
          "parameters": [
            "Condition cc",
            "Register lhs",
            "Register rhs",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if two registers contain equal Smis based on condition."
        },
        {
          "name": "JumpIfImmediate",
          "parameters": [
            "Condition cc",
            "Register left",
            "int right",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if the left register has immediate value based on condition."
        },
        {
          "name": "JumpIfTagged",
          "parameters": [
            "Condition cc",
            "Register value",
            "MemOperand operand",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a value equals the tagged memory based on condition."
        },
        {
          "name": "JumpIfTagged",
          "parameters": [
            "Condition cc",
            "MemOperand operand",
            "Register value",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a tagged memory location equals a value based on condition."
        },
        {
          "name": "JumpIfByte",
          "parameters": [
            "Condition cc",
            "Register value",
            "int32_t byte",
            "Label* target",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Jump to a label if a certain byte in the register equals byte based on condition."
        },
        {
          "name": "LoadMap",
          "parameters": [
            "Register output",
            "Register value"
          ],
          "return_type": "void",
          "logic": "Loads the map of a heap object into a register."
        },
        {
          "name": "LoadRoot",
          "parameters": [
            "Register output",
            "RootIndex index"
          ],
          "return_type": "void",
          "logic": "Loads a root value from the root array into a register."
        },
        {
          "name": "LoadNativeContextSlot",
          "parameters": [
            "Register output",
            "uint32_t index"
          ],
          "return_type": "void",
          "logic": "Loads a value from the native context slot into a register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "Register source"
          ],
          "return_type": "void",
          "logic": "Moves the value from one register to another."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "MemOperand operand"
          ],
          "return_type": "void",
          "logic": "Moves the value from a memory operand to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "Tagged<Smi> value"
          ],
          "return_type": "void",
          "logic": "Moves a Smi value to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "Tagged<TaggedIndex> value"
          ],
          "return_type": "void",
          "logic": "Moves a TaggedIndex to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "interpreter::Register source"
          ],
          "return_type": "void",
          "logic": "Moves the value from an interpreter register to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "interpreter::Register output",
            "Register source"
          ],
          "return_type": "void",
          "logic": "Moves the value from a register to an interpreter register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "RootIndex source"
          ],
          "return_type": "void",
          "logic": "Moves a root index value to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "MemOperand output",
            "Register source"
          ],
          "return_type": "void",
          "logic": "Moves the value from a register to a memory operand."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "ExternalReference reference"
          ],
          "return_type": "void",
          "logic": "Moves an external reference to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "Handle<HeapObject> value"
          ],
          "return_type": "void",
          "logic": "Moves a HeapObject handle to a register."
        },
        {
          "name": "Move",
          "parameters": [
            "Register output",
            "int32_t immediate"
          ],
          "return_type": "void",
          "logic": "Moves an immediate integer value to a register."
        },
        {
          "name": "MoveMaybeSmi",
          "parameters": [
            "Register output",
            "Register source"
          ],
          "return_type": "void",
          "logic": "Moves a value from source to output register and maybe uncompress if source is compressed pointer"
        },
        {
          "name": "MoveSmi",
          "parameters": [
            "Register output",
            "Register source"
          ],
          "return_type": "void",
          "logic": "Moves a Smi from source to output register and decompresses if source is compressed"
        },
        {
          "name": "Push",
          "parameters": [
            "T... vals"
          ],
          "return_type": "int",
          "logic": "Pushes values onto the stack, handling stack alignment. Returns the total number of values pushed."
        },
        {
          "name": "PushReverse",
          "parameters": [
            "T... vals"
          ],
          "return_type": "void",
          "logic": "Pushes values onto the stack in reverse order, handling stack alignment."
        },
        {
          "name": "Pop",
          "parameters": [
            "T... registers"
          ],
          "return_type": "void",
          "logic": "Pops values from the stack into the given registers."
        },
        {
          "name": "CallBuiltin",
          "parameters": [
            "Builtin builtin"
          ],
          "return_type": "void",
          "logic": "Calls a builtin function."
        },
        {
          "name": "TailCallBuiltin",
          "parameters": [
            "Builtin builtin"
          ],
          "return_type": "void",
          "logic": "Performs a tail call to a builtin function."
        },
        {
          "name": "CallRuntime",
          "parameters": [
            "Runtime::FunctionId function",
            "int nargs"
          ],
          "return_type": "void",
          "logic": "Calls a runtime function."
        },
        {
          "name": "LoadTaggedField",
          "parameters": [
            "Register output",
            "Register source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a tagged field from a heap object into a register."
        },
        {
          "name": "LoadTaggedSignedField",
          "parameters": [
            "Register output",
            "Register source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a tagged signed field from a heap object into a register."
        },
        {
          "name": "LoadTaggedSignedFieldAndUntag",
          "parameters": [
            "Register output",
            "Register source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a tagged signed field from a heap object into a register and untags the Smi."
        },
        {
          "name": "LoadWord16FieldZeroExtend",
          "parameters": [
            "Register output",
            "Register source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a 16-bit word from a heap object field and zero-extends into register."
        },
        {
          "name": "LoadWord8Field",
          "parameters": [
            "Register output",
            "Register source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a 8-bit word from a heap object field into register."
        },
        {
          "name": "StoreTaggedSignedField",
          "parameters": [
            "Register target",
            "int offset",
            "Tagged<Smi> value"
          ],
          "return_type": "void",
          "logic": "Stores a tagged Smi value into a heap object field."
        },
        {
          "name": "StoreTaggedFieldWithWriteBarrier",
          "parameters": [
            "Register target",
            "int offset",
            "Register value"
          ],
          "return_type": "void",
          "logic": "Stores a tagged value into a heap object field with write barrier."
        },
        {
          "name": "StoreTaggedFieldNoWriteBarrier",
          "parameters": [
            "Register target",
            "int offset",
            "Register value"
          ],
          "return_type": "void",
          "logic": "Stores a tagged value into a heap object field without write barrier."
        },
        {
          "name": "LoadFixedArrayElement",
          "parameters": [
            "Register output",
            "Register array",
            "int32_t index"
          ],
          "return_type": "void",
          "logic": "Loads an element from a fixed array into a register."
        },
        {
          "name": "LoadPrototype",
          "parameters": [
            "Register prototype",
            "Register object"
          ],
          "return_type": "void",
          "logic": "Loads the prototype of an object into a register."
        },
        {
          "name": "LoadTaggedField",
          "parameters": [
            "TaggedRegister output",
            "Register source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a tagged field from a heap object into a tagged register."
        },
        {
          "name": "LoadTaggedField",
          "parameters": [
            "TaggedRegister output",
            "TaggedRegister source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a tagged field from a heap object into a tagged register."
        },
        {
          "name": "LoadTaggedField",
          "parameters": [
            "Register output",
            "TaggedRegister source",
            "int offset"
          ],
          "return_type": "void",
          "logic": "Loads a tagged field from a heap object into a register."
        },
        {
          "name": "LoadFixedArrayElement",
          "parameters": [
            "Register output",
            "TaggedRegister array",
            "int32_t index"
          ],
          "return_type": "void",
          "logic": "Loads an element from a fixed array into a register."
        },
        {
          "name": "LoadFixedArrayElement",
          "parameters": [
            "TaggedRegister output",
            "TaggedRegister array",
            "int32_t index"
          ],
          "return_type": "void",
          "logic": "Loads an element from a fixed array into a tagged register."
        },
        {
          "name": "TryLoadOptimizedOsrCode",
          "parameters": [
            "Register scratch_and_result",
            "Register feedback_vector",
            "FeedbackSlot slot",
            "Label* on_result",
            "Label::Distance distance"
          ],
          "return_type": "void",
          "logic": "Attempts to load optimized OSR code and jumps to on_result if successful."
        },
        {
          "name": "AddToInterruptBudgetAndJumpIfNotExceeded",
          "parameters": [
            "int32_t weight",
            "Label* skip_interrupt_label"
          ],
          "return_type": "void",
          "logic": "Adds a weight to the interrupt budget and jumps to skip_interrupt_label if not exceeded."
        },
        {
          "name": "AddToInterruptBudgetAndJumpIfNotExceeded",
          "parameters": [
            "Register weight",
            "Label* skip_interrupt_label"
          ],
          "return_type": "void",
          "logic": "Adds a weight to the interrupt budget and jumps to skip_interrupt_label if not exceeded."
        },
        {
          "name": "LdaContextSlot",
          "parameters": [
            "Register context",
            "uint32_t index",
            "uint32_t depth",
            "CompressionMode compression_mode"
          ],
          "return_type": "void",
          "logic": "Loads a value from a context slot into a register."
        },
        {
          "name": "StaContextSlot",
          "parameters": [
            "Register context",
            "Register value",
            "uint32_t index",
            "uint32_t depth"
          ],
          "return_type": "void",
          "logic": "Stores a value into a context slot."
        },
        {
          "name": "LdaModuleVariable",
          "parameters": [
            "Register context",
            "int cell_index",
            "uint32_t depth"
          ],
          "return_type": "void",
          "logic": "Loads a value from a module variable."
        },
        {
          "name": "StaModuleVariable",
          "parameters": [
            "Register context",
            "Register value",
            "int cell_index",
            "uint32_t depth"
          ],
          "return_type": "void",
          "logic": "Stores a value into a module variable."
        },
        {
          "name": "IncrementSmi",
          "parameters": [
            "MemOperand lhs"
          ],
          "return_type": "void",
          "logic": "Increments a Smi value in memory."
        },
        {
          "name": "SmiUntag",
          "parameters": [
            "Register value"
          ],
          "return_type": "void",
          "logic": "Untags (removes the Smi tag) of a register value."
        },
        {
          "name": "SmiUntag",
          "parameters": [
            "Register output",
            "Register value"
          ],
          "return_type": "void",
          "logic": "Untags (removes the Smi tag) of a register value and places into output register."
        },
        {
          "name": "Word32And",
          "parameters": [
            "Register output",
            "Register lhs",
            "int rhs"
          ],
          "return_type": "void",
          "logic": "Performs a bitwise AND operation on a register with an immediate value."
        },
        {
          "name": "Switch",
          "parameters": [
            "Register reg",
            "int case_value_base",
            "Label** labels",
            "int num_labels"
          ],
          "return_type": "void",
          "logic": "Implements a switch statement using jump table."
        },
        {
          "name": "LoadRegister",
          "parameters": [
            "Register output",
            "interpreter::Register source"
          ],
          "return_type": "void",
          "logic": "Loads the value from an interpreter register into a machine register."
        },
        {
          "name": "StoreRegister",
          "parameters": [
            "interpreter::Register output",
            "Register value"
          ],
          "return_type": "void",
          "logic": "Stores the value from a machine register into an interpreter register."
        },
        {
          "name": "LoadFunction",
          "parameters": [
            "Register output"
          ],
          "return_type": "void",
          "logic": "Loads the function object into the output register."
        },
        {
          "name": "LoadContext",
          "parameters": [
            "Register output"
          ],
          "return_type": "void",
          "logic": "Loads the context object into the output register."
        },
        {
          "name": "StoreContext",
          "parameters": [
            "Register context"
          ],
          "return_type": "void",
          "logic": "Stores the context register."
        },
        {
          "name": "LoadFeedbackCell",
          "parameters": [
            "Register output"
          ],
          "return_type": "void",
          "logic": "Loads the feedback cell object into the output register."
        },
        {
          "name": "AssertFeedbackCell",
          "parameters": [
            "Register object"
          ],
          "return_type": "void",
          "logic": "Asserts the type of a feedback cell object."
        },
        {
          "name": "MaybeEmitPlaceHolderForDeopt",
          "parameters": [],
          "return_type": "void",
          "logic": "If CET shadow stack is enabled, reserves a few bytes as NOP for deoptimization."
        },
        {
          "name": "EmitReturn",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Emits a return instruction using the provided MacroAssembler."
        },
        {
          "name": "masm",
          "parameters": [],
          "return_type": "MacroAssembler*",
          "logic": "Returns the underlying MacroAssembler instance."
        }
      ]
    },
    {
      "name": "EnsureAccumulatorPreservedScope",
      "properties": [
        "assembler_",
        "comment_"
      ],
      "methods": [
        {
          "name": "EnsureAccumulatorPreservedScope",
          "parameters": [
            "BaselineAssembler* assembler"
          ],
          "return_type": "void",
          "logic": "Constructor for the EnsureAccumulatorPreservedScope class."
        },
        {
          "name": "~EnsureAccumulatorPreservedScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the EnsureAccumulatorPreservedScope class."
        },
        {
          "name": "AssertEqualToAccumulator",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Asserts that given register is equal to accumulator register."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "RegisterFrameOperand",
      "parameters": [
        "interpreter::Register interpreter_register"
      ],
      "return_type": "MemOperand",
      "logic": "Returns a MemOperand for accessing the register frame at the given interpreter register."
    }
  ]
}