{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/baseline-compiler.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/baseline/baseline-compiler.h\",\n  \"imports\": [\n    \"src/base/logging.h\",\n    \"src/base/pointer-with-payload.h\",\n    \"src/base/threaded-list.h\",\n    \"src/base/vlq.h\",\n    \"src/baseline/baseline-assembler.h\",\n    \"src/execution/local-isolate.h\",\n    \"src/handles/handles.h\",\n    \"src/interpreter/bytecode-array-iterator.h\",\n    \"src/interpreter/bytecode-register.h\",\n    \"src/interpreter/interpreter-intrinsics.h\",\n    \"src/logging/counters.h\",\n    \"src/objects/map.h\",\n    \"src/objects/tagged-index.h\",\n    \"src/utils/bit-vector.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"BytecodeOffsetTableBuilder\",\n      \"properties\": [\n        \"previous_pc_\",\n        \"bytes_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AddPosition\",\n          \"parameters\": [\n            \"size_t pc_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a bytecode offset to the table, encoding it as a VLQ. Calculates the difference between the current and previous offset, encodes it, and stores it in the byte vector.\"\n        },\n        {\n          \"name\": \"ToBytecodeOffsetTable\",\n          \"parameters\": [\n            \"IsolateT* isolate\"\n          ],\n          \"return_type\": \"Handle<TrustedByteArray>\",\n          \"logic\": \"Converts the collected bytecode offset data into a TrustedByteArray handle, using the provided isolate.\"\n        },\n        {\n          \"name\": \"Reserve\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reserves space in the internal byte vector for a given size.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BaselineCompiler\",\n      \"properties\": [\n        \"local_isolate_\",\n        \"stats_\",\n        \"shared_function_info_\",\n        \"interpreter_data_\",\n        \"bytecode_\",\n        \"zone_\",\n        \"masm_\",\n        \"basm_\",\n        \"iterator_\",\n        \"bytecode_offset_table_builder_\",\n        \"labels_\",\n        \"label_tags_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BaselineCompiler\",\n          \"parameters\": [\n            \"LocalIsolate* local_isolate\",\n            \"Handle<SharedFunctionInfo> shared_function_info\",\n            \"Handle<BytecodeArray> bytecode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the BaselineCompiler, initializes member variables with the provided arguments. Used to setup compilation context.\"\n        },\n        {\n          \"name\": \"GenerateCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Generates the machine code for the given bytecode array.\"\n        },\n        {\n          \"name\": \"Build\",\n          \"parameters\": [],\n          \"return_type\": \"MaybeHandle<Code>\",\n          \"logic\": \"Builds the generated code into a Code object. Returns a handle to the Code object, or an empty handle if building fails.\"\n        },\n        {\n          \"name\": \"EstimateInstructionSize\",\n          \"parameters\": [\n            \"Tagged<BytecodeArray> bytecode\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Static method estimating the size of the generated code for a given bytecode array. Used for pre-allocation and optimization.\"\n        },\n        {\n          \"name\": \"Prologue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Generates the function prologue. Sets up the stack frame.\"\n        },\n        {\n          \"name\": \"PrologueFillFrame\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills the stack frame with appropriate initial values during the prologue. Helps initialize register values.\"\n        },\n        {\n          \"name\": \"PrologueHandleOptimizationState\",\n          \"parameters\": [\n            \"Register feedback_vector\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the optimization state during prologue setup, potentially reading state from the provided feedback vector.\"\n        },\n        {\n          \"name\": \"PreVisitSingleBytecode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Actions to perform *before* visiting each bytecode, such as setting up for position mapping or debugging.\"\n        },\n        {\n          \"name\": \"VisitSingleBytecode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Processes a single bytecode instruction. This is the core logic of the compiler.\"\n        },\n        {\n          \"name\": \"VerifyFrame\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs runtime checks to verify the correctness of the stack frame.\"\n        },\n        {\n          \"name\": \"VerifyFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Verifies that the stack frame size is as expected.\"\n        },\n        {\n          \"name\": \"RegisterOperand\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"interpreter::Register\",\n          \"logic\": \"Retrieves a register operand from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"LoadRegister\",\n          \"parameters\": [\n            \"Register output\",\n            \"int operand_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the value from a register operand into the specified output register.\"\n        },\n        {\n          \"name\": \"StoreRegister\",\n          \"parameters\": [\n            \"int operand_index\",\n            \"Register value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the value from the specified register into a register operand.\"\n        },\n        {\n          \"name\": \"StoreRegisterPair\",\n          \"parameters\": [\n            \"int operand_index\",\n            \"Register val0\",\n            \"Register val1\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores a pair of registers into two consecutive register operands.\"\n        },\n        {\n          \"name\": \"Constant\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Handle<Type>\",\n          \"logic\": \"Retrieves a constant pool entry as a handle of the specified type based on the index. This is a template function.\"\n        },\n        {\n          \"name\": \"ConstantSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Retrieves a constant pool entry as a Smi based on the index.\"\n        },\n        {\n          \"name\": \"LoadConstant\",\n          \"parameters\": [\n            \"Register output\",\n            \"int operand_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a constant from the constant pool into the specified output register. This is a template function.\"\n        },\n        {\n          \"name\": \"Uint\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Retrieves an unsigned 32-bit integer immediate value from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"Int\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Retrieves a signed 32-bit integer immediate value from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"Index\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Retrieves an unsigned 32-bit index value from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"Flag8\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Retrieves an 8-bit flag value from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"Flag16\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Retrieves a 16-bit flag value from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"RegisterCount\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Retrieves the number of registers from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"IndexAsTagged\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<TaggedIndex>\",\n          \"logic\": \"Retrieves an index value as a TaggedIndex from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"UintAsTagged\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<TaggedIndex>\",\n          \"logic\": \"Retrieves an unsigned integer value as a TaggedIndex from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"IndexAsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Retrieves an index value as a Smi from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"IntAsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Retrieves a signed integer value as a Smi from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"UintAsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Retrieves an unsigned integer value as a Smi from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"Flag8AsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Retrieves an 8-bit flag value as a Smi from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"Flag16AsSmi\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"Tagged<Smi>\",\n          \"logic\": \"Retrieves a 16-bit flag value as a Smi from the bytecode instruction based on the index.\"\n        },\n        {\n          \"name\": \"NewLabel\",\n          \"parameters\": [],\n          \"return_type\": \"Label*\",\n          \"logic\": \"Creates a new label for branching.\"\n        },\n        {\n          \"name\": \"BuildForwardJumpLabel\",\n          \"parameters\": [],\n          \"return_type\": \"Label*\",\n          \"logic\": \"Builds a forward jump label. This is likely a convenience function.\"\n        },\n        {\n          \"name\": \"UpdateInterruptBudgetAndJumpToLabel\",\n          \"parameters\": [\n            \"int weight\",\n            \"Label* label\",\n            \"Label* skip_interrupt_label\",\n            \"StackCheckBehavior stack_check_behavior\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates the interrupt budget based on weight, and then jumps to the provided label. Can be conditional on stack checking.\"\n        },\n        {\n          \"name\": \"JumpIfRoot\",\n          \"parameters\": [\n            \"RootIndex root\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Jumps to a specific location if the value at the specified RootIndex matches a condition.\"\n        },\n        {\n          \"name\": \"JumpIfNotRoot\",\n          \"parameters\": [\n            \"RootIndex root\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Jumps to a specific location if the value at the specified RootIndex does not match a condition.\"\n        },\n        {\n          \"name\": \"FeedbackVector\",\n          \"parameters\": [],\n          \"return_type\": \"MemOperand\",\n          \"logic\": \"Returns a MemOperand representing the feedback vector. Used for accessing the feedback vector.\"\n        },\n        {\n          \"name\": \"LoadFeedbackVector\",\n          \"parameters\": [\n            \"Register output\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the feedback vector into the specified output register.\"\n        },\n        {\n          \"name\": \"LoadClosureFeedbackArray\",\n          \"parameters\": [\n            \"Register output\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the feedback array associated with the closure into the specified output register.\"\n        },\n        {\n          \"name\": \"AddPosition\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a position mapping entry for debugging and profiling.\"\n        },\n        {\n          \"name\": \"SelectBooleanConstant\",\n          \"parameters\": [\n            \"Register output\",\n            \"std::function<void(Label*, Label::Distance)> jump_func\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects a boolean constant (true or false) based on the behavior of the provided jump function and stores it in the given register.\"\n        },\n        {\n          \"name\": \"JumpIfToBoolean\",\n          \"parameters\": [\n            \"bool do_jump_if_true\",\n            \"Label* label\",\n            \"Label::Distance distance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Jumps to the specified label based on the result of calling ToBoolean on the interpreter accumulator register.\"\n        },\n        {\n          \"name\": \"CallBuiltin\",\n          \"parameters\": [\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a builtin function with the provided arguments. This is a template function.\"\n        },\n        {\n          \"name\": \"CallRuntime\",\n          \"parameters\": [\n            \"Runtime::FunctionId function\",\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a runtime function with the provided arguments. This is a template function.\"\n        },\n        {\n          \"name\": \"TailCallBuiltin\",\n          \"parameters\": [\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a tail call to a builtin function with the provided arguments. This is a template function.\"\n        },\n        {\n          \"name\": \"BuildCall\",\n          \"parameters\": [\n            \"uint32_t slot\",\n            \"uint32_t arg_count\",\n            \"Args... args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds a call to a function with a given slot and argument count using the provided arguments. This is a template function.\"\n        },\n        {\n          \"name\": \"TraceBytecode\",\n          \"parameters\": [\n            \"Runtime::FunctionId function_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces a bytecode instruction for debugging purposes (only enabled if V8_TRACE_UNOPTIMIZED is defined).\"\n        },\n        {\n          \"name\": \"VisitLdaZero\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaZero bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaSmi bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaConstant\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaConstant bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaUndefined bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaNull\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaNull bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaTheHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaTheHole bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaTrue bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaFalse bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdar\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Ldar bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitStar\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Star bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitStaGlobal\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the StaGlobal bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitStaCurrentContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the StaCurrentContextSlot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitStaContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the StaContextSlot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaGlobal\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaGlobal bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaCurrentContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaCurrentContextSlot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaContextSlot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaContextSlot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitPushContext\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the PushContext bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitPopContext\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the PopContext bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitMov\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Mov bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitAdd\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Add bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitSub\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Sub bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitMul\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Mul bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitDiv\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Div bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitMod\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Mod bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitBitwiseAnd\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the BitwiseAnd bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitBitwiseOr\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the BitwiseOr bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitBitwiseXor\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the BitwiseXor bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitShiftLeft\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ShiftLeft bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitShiftRight\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ShiftRight bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitShiftRightLogical\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ShiftRightLogical bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitInc\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Inc bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitDec\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Dec bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitNegate\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Negate bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitBitwiseNot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the BitwiseNot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitToBooleanLogicalNot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ToBooleanLogicalNot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLogicalNot\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LogicalNot bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTypeOf\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TypeOf bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitDeletePropertyStrict\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the DeletePropertyStrict bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitDeletePropertySloppy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the DeletePropertySloppy bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitGetSuperProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the GetSuperProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitGetSuperPropertyWithReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the GetSuperPropertyWithReceiver bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitSetSuperProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the SetSuperProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaNamedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaNamedProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitLdaKeyedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the LdaKeyedProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitStaNamedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the StaNamedProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitStaKeyedProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the StaKeyedProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallProperty\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallProperty bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallProperty0\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallProperty0 bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallProperty1\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallProperty1 bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallProperty2\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallProperty2 bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallUndefinedReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallUndefinedReceiver bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallUndefinedReceiver0\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallUndefinedReceiver0 bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallUndefinedReceiver1\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallUndefinedReceiver1 bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallUndefinedReceiver2\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallUndefinedReceiver2 bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitCallWithSpread\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the CallWithSpread bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitApply\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Apply bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitConstruct\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Construct bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitConstructWithSpread\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ConstructWithSpread bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestEqual\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestEqual bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestNotEqual\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestNotEqual bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestLessThan\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestLessThan bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestGreaterThan\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestGreaterThan bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestLessThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestLessThanOrEqual bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestGreaterThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestGreaterThanOrEqual bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestEqualStrict\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestEqualStrict bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestNotEqualStrict\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestNotEqualStrict bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestInstanceOf\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestInstanceOf bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestIn\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestIn bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestUndefined bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestNull\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestNull bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestTheHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestTheHole bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestTrue bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitTestFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the TestFalse bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfTrue bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfFalse bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfToBooleanTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfToBooleanTrue bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfToBooleanFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfToBooleanFalse bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfUndefined bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfNull\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfNull bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfTheHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfTheHole bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfTrueConstant\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfTrueConstant bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpIfFalseConstant\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpIfFalseConstant bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJumpLoop\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the JumpLoop bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitJump\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Jump bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitForInPrepare\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ForInPrepare bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitForInContinue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ForInContinue bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitForInNext\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ForInNext bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitForInStep\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ForInStep bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitThrow\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Throw bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitReThrow\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ReThrow bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitReturn\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the Return bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitThrowReferenceErrorIfHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ThrowReferenceErrorIfHole bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitThrowSuperNotCalled\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the ThrowSuperNotCalled bytecode instruction.\"\n        },\n        {\n          \"name\": \"VisitThrowStrictSuperNotCalledIfHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the"
}