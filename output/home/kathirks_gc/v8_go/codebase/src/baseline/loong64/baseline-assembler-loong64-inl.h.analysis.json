{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/loong64/baseline-assembler-loong64-inl.h",
  "imports": [
    "src/baseline/baseline-assembler.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/loong64/assembler-loong64-inl.h",
    "src/objects/literal-objects-inl.h"
  ],
  "classes": [
    {
      "name": "BaselineAssembler::ScratchRegisterScope",
      "properties": [
        "assembler_",
        "prev_scope_",
        "wrapped_scope_"
      ],
      "methods": [
        {
          "name": "ScratchRegisterScope",
          "parameters": [
            "BaselineAssembler* assembler"
          ],
          "return_type": "explicit",
          "logic": "Constructor for ScratchRegisterScope.  Manages a stack of scratch register scopes and includes some extra registers in the initial scope.  It also tracks the previous scope, linking them."
        },
        {
          "name": "~ScratchRegisterScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for ScratchRegisterScope. Restores the previous scratch register scope."
        },
        {
          "name": "AcquireScratch",
          "parameters": [],
          "return_type": "Register",
          "logic": "Acquires a scratch register from the wrapped UseScratchRegisterScope."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Clobbers",
      "parameters": [
        "Register target",
        "MemOperand op"
      ],
      "return_type": "bool",
      "logic": "Checks if the target register is used as the base or index in the memory operand. (DEBUG only)"
    },
    {
      "name": "BaselineAssembler::RegisterFrameOperand",
      "parameters": [
        "interpreter::Register interpreter_register"
      ],
      "return_type": "MemOperand",
      "logic": "Calculates the memory operand for accessing a register in the interpreter frame, relative to the frame pointer."
    },
    {
      "name": "BaselineAssembler::RegisterFrameAddress",
      "parameters": [
        "interpreter::Register interpreter_register",
        "Register rscratch"
      ],
      "return_type": "void",
      "logic": "Calculates the address of a register in the interpreter frame and stores it in rscratch, relative to the frame pointer."
    },
    {
      "name": "BaselineAssembler::FeedbackVectorOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Creates a memory operand for accessing the feedback vector in the baseline frame."
    },
    {
      "name": "BaselineAssembler::FeedbackCellOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Creates a memory operand for accessing the feedback cell in the baseline frame."
    },
    {
      "name": "BaselineAssembler::Bind",
      "parameters": [
        "Label* label"
      ],
      "return_type": "void",
      "logic": "Binds a label to the current code position."
    },
    {
      "name": "BaselineAssembler::JumpTarget",
      "parameters": [],
      "return_type": "void",
      "logic": "No-op instruction. Placeholder for jump target."
    },
    {
      "name": "BaselineAssembler::Jump",
      "parameters": [
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Unconditional jump to a label."
    },
    {
      "name": "BaselineAssembler::JumpIfRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if value equals the specified root."
    },
    {
      "name": "BaselineAssembler::JumpIfNotRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if value does not equal the specified root."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if value is a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfNotSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if value is not a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfImmediate",
      "parameters": [
        "Condition cc",
        "Register left",
        "int right",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing a register and an immediate value."
    },
    {
      "name": "BaselineAssembler::TestAndBranch",
      "parameters": [
        "Register value",
        "int mask",
        "Condition cc",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Performs a bitwise AND between a register and a mask, and jumps to target based on the specified condition."
    },
    {
      "name": "BaselineAssembler::JumpIf",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "const Operand& rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing a register and an operand."
    },
    {
      "name": "BaselineAssembler::JumpIfJSAnyIsPrimitive",
      "parameters": [
        "Register heap_object",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if a JSAny (heap object) is a primitive.  Uses scratch register for the operation."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectTypeFast",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing the object type of a register to a specific instance type. Uses scratch register for the operation. Optimized version when cc is equality or inequality."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectType",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Register map",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing the object type of a register to a specific instance type.  Gets the object type from the given map register, and uses scratch register for the operation."
    },
    {
      "name": "BaselineAssembler::JumpIfInstanceType",
      "parameters": [
        "Condition cc",
        "Register map",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing the instance type of a map to a specific instance type.  Uses scratch register for the operation."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register value",
        "Tagged<Smi> smi",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing a register and a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target based on condition code comparing two Smi registers."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a tagged value from memory and jumps to target based on condition code comparing the register with loaded memory."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "MemOperand operand",
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a tagged value from memory and jumps to target based on condition code comparing the register with loaded memory."
    },
    {
      "name": "BaselineAssembler::JumpIfByte",
      "parameters": [
        "Condition cc",
        "Register value",
        "int32_t byte",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the byte-sized value in the register meets a condition against a given immediate byte."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "interpreter::Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from source register to output interpreter register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Tagged<TaggedIndex> value"
      ],
      "return_type": "void",
      "logic": "Moves the provided tagged index value to the destination register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "MemOperand output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Stores the value from source register to output memory operand."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "ExternalReference reference"
      ],
      "return_type": "void",
      "logic": "Moves the value from external reference to output register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Handle<HeapObject> value"
      ],
      "return_type": "void",
      "logic": "Moves the value from handle to heap object to output register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "int32_t value"
      ],
      "return_type": "void",
      "logic": "Moves the immediate value to output register."
    },
    {
      "name": "BaselineAssembler::MoveMaybeSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from source register to output register. No Smi check."
    },
    {
      "name": "BaselineAssembler::MoveSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from source register to output register. No Smi check."
    },
    {
      "name": "ToRegister",
      "parameters": [
        "BaselineAssembler* basm",
        "BaselineAssembler::ScratchRegisterScope* scope",
        "Arg arg"
      ],
      "return_type": "Register",
      "logic": "Helper function to move an argument to a scratch register if the argument is not already a register."
    },
    {
      "name": "ToRegister",
      "parameters": [
        "BaselineAssembler* basm",
        "BaselineAssembler::ScratchRegisterScope* scope",
        "Register reg"
      ],
      "return_type": "Register",
      "logic": "Helper function that returns the register itself, when given a register."
    },
    {
      "name": "PushAllHelper<>::Push",
      "parameters": [
        "BaselineAssembler* basm"
      ],
      "return_type": "int",
      "logic": "Base case for the PushAllHelper template. Does nothing and returns 0."
    },
    {
      "name": "PushAllHelper<>::PushReverse",
      "parameters": [
        "BaselineAssembler* basm"
      ],
      "return_type": "int",
      "logic": "Base case for the PushAllHelper template. Does nothing and returns 0."
    },
    {
      "name": "PushAllHelper<Arg>::Push",
      "parameters": [
        "BaselineAssembler* basm",
        "Arg arg"
      ],
      "return_type": "int",
      "logic": "Push a single argument. Acquires a scratch register, moves the argument into it, then pushes it onto the stack."
    },
    {
      "name": "PushAllHelper<Arg>::PushReverse",
      "parameters": [
        "BaselineAssembler* basm",
        "Arg arg"
      ],
      "return_type": "int",
      "logic": "Push a single argument in reverse order (same as normal push for single element). Acquires a scratch register, moves the argument into it, then pushes it onto the stack."
    },
    {
      "name": "PushAllHelper<Arg, Args...>::Push",
      "parameters": [
        "BaselineAssembler* basm",
        "Arg arg",
        "Args... args"
      ],
      "return_type": "int",
      "logic": "Recursively push a list of arguments. Calls PushAllHelper<Arg>::Push for the first argument, then recurses to handle the remaining arguments."
    },
    {
      "name": "PushAllHelper<Arg, Args...>::PushReverse",
      "parameters": [
        "BaselineAssembler* basm",
        "Arg arg",
        "Args... args"
      ],
      "return_type": "int",
      "logic": "Recursively push a list of arguments in reverse order. Calls PushAllHelper<Args...>::PushReverse for the remaining arguments, then calls PushAllHelper<Arg>::Push for the first argument."
    },
    {
      "name": "PushAllHelper<interpreter::RegisterList>::Push",
      "parameters": [
        "BaselineAssembler* basm",
        "interpreter::RegisterList list"
      ],
      "return_type": "int",
      "logic": "Push all registers from a given register list."
    },
    {
      "name": "PushAllHelper<interpreter::RegisterList>::PushReverse",
      "parameters": [
        "BaselineAssembler* basm",
        "interpreter::RegisterList list"
      ],
      "return_type": "int",
      "logic": "Push all registers from a given register list in reversed order."
    },
    {
      "name": "PopAllHelper<>::Pop",
      "parameters": [
        "BaselineAssembler* basm"
      ],
      "return_type": "void",
      "logic": "Base case for PopAllHelper template. Does nothing."
    },
    {
      "name": "PopAllHelper<Register>::Pop",
      "parameters": [
        "BaselineAssembler* basm",
        "Register reg"
      ],
      "return_type": "void",
      "logic": "Pops the top of the stack into a given register."
    },
    {
      "name": "PopAllHelper<Register, T...>::Pop",
      "parameters": [
        "BaselineAssembler* basm",
        "Register reg",
        "T... tail"
      ],
      "return_type": "void",
      "logic": "Recursively pops a list of registers. Pops the top of the stack into the first register, then recurses to handle the remaining registers."
    },
    {
      "name": "BaselineAssembler::Push",
      "parameters": [
        "T... vals"
      ],
      "return_type": "int",
      "logic": "Pushes a variable number of arguments onto the stack."
    },
    {
      "name": "BaselineAssembler::PushReverse",
      "parameters": [
        "T... vals"
      ],
      "return_type": "void",
      "logic": "Pushes a variable number of arguments onto the stack in reverse order."
    },
    {
      "name": "BaselineAssembler::Pop",
      "parameters": [
        "T... registers"
      ],
      "return_type": "void",
      "logic": "Pops a variable number of registers from the stack."
    },
    {
      "name": "BaselineAssembler::LoadTaggedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from an object to a register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from an object to a register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedFieldAndUntag",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from an object to a register and untags it (SmiUntag)."
    },
    {
      "name": "BaselineAssembler::LoadWord16FieldZeroExtend",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a 16-bit word field from an object to a register with zero extension."
    },
    {
      "name": "BaselineAssembler::LoadWord8Field",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads an 8-bit word field from an object to a register."
    },
    {
      "name": "BaselineAssembler::StoreTaggedSignedField",
      "parameters": [
        "Register target",
        "int offset",
        "Tagged<Smi> value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged Smi value to a field of a given object."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldWithWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field to an object with a write barrier.  The write barrier ensures that the garbage collector is aware of the pointer, so it can be updated properly."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldNoWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field to an object without a write barrier."
    },
    {
      "name": "BaselineAssembler::TryLoadOptimizedOsrCode",
      "parameters": [
        "Register scratch_and_result",
        "Register feedback_vector",
        "FeedbackSlot slot",
        "Label* on_result",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Tries to load an optimized OSR (On-Stack Replacement) code object from a feedback vector slot. If the slot contains a weak reference to optimized code, it loads the code pointer and checks if it's marked for deoptimization."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "int32_t weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds the given weight to the interrupt budget stored in the feedback cell. Jumps to skip_interrupt_label if the budget hasn't been exceeded (is still non-negative)."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "Register weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds the given weight to the interrupt budget stored in the feedback cell. Jumps to skip_interrupt_label if the budget hasn't been exceeded (is still non-negative)."
    },
    {
      "name": "BaselineAssembler::LdaContextSlot",
      "parameters": [
        "Register context",
        "uint32_t index",
        "uint32_t depth",
        "CompressionMode compression_mode"
      ],
      "return_type": "void",
      "logic": "Loads the context slot at a given index and depth into the interpreter accumulator register."
    },
    {
      "name": "BaselineAssembler::StaContextSlot",
      "parameters": [
        "Register context",
        "Register value",
        "uint32_t index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores the value in the specified register into the context slot at the given index and depth, using write barrier."
    },
    {
      "name": "BaselineAssembler::LdaModuleVariable",
      "parameters": [
        "Register context",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Loads a module variable into the interpreter accumulator register, based on cell_index and depth."
    },
    {
      "name": "BaselineAssembler::StaModuleVariable",
      "parameters": [
        "Register context",
        "Register value",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value in a module variable, based on cell_index and depth, using write barrier."
    },
    {
      "name": "BaselineAssembler::IncrementSmi",
      "parameters": [
        "MemOperand lhs"
      ],
      "return_type": "void",
      "logic": "Increments a Smi stored in a memory location."
    },
    {
      "name": "BaselineAssembler::Word32And",
      "parameters": [
        "Register output",
        "Register lhs",
        "int rhs"
      ],
      "return_type": "void",
      "logic": "Performs a 32-bit bitwise AND operation between a register and an immediate value and stores the result in a register."
    },
    {
      "name": "BaselineAssembler::Switch",
      "parameters": [
        "Register reg",
        "int case_value_base",
        "Label** labels",
        "int num_labels"
      ],
      "return_type": "void",
      "logic": "Implements a switch statement based on a register value and a table of labels."
    },
    {
      "name": "BaselineAssembler::EmitReturn",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Emits the code for returning from a Baseline function.  It updates the interrupt budget, leaves the frame, drops the arguments and returns."
    },
    {
      "name": "EnsureAccumulatorPreservedScope::AssertEqualToAccumulator",
      "parameters": [
        "Register reg"
      ],
      "return_type": "void",
      "logic": "Asserts that the provided register holds the same value as the interpreter accumulator register."
    }
  ]
}