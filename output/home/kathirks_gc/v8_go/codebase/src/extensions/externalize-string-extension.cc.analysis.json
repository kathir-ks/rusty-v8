{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/extensions/externalize-string-extension.cc",
  "imports": [
    "src/extensions/externalize-string-extension.h",
    "include/v8-template.h",
    "src/api/api-inl.h",
    "src/base/strings.h",
    "src/execution/isolate.h",
    "src/handles/handles.h",
    "src/heap/heap-layout-inl.h",
    "src/objects/heap-object-inl.h",
    "src/objects/objects-inl.h"
  ],
  "classes": [
    {
      "name": "SimpleStringResource",
      "properties": [
        "data_",
        "length_"
      ],
      "methods": [
        {
          "name": "SimpleStringResource",
          "parameters": [
            "Char* data",
            "size_t length"
          ],
          "return_type": "constructor",
          "logic": "Constructor for SimpleStringResource, takes ownership of the provided data and stores its length."
        },
        {
          "name": "~SimpleStringResource",
          "parameters": [],
          "return_type": "destructor",
          "logic": "Destructor for SimpleStringResource, deallocates the memory held by data_."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "const Char*",
          "logic": "Returns the pointer to the character data."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the length of the string resource."
        }
      ]
    },
    {
      "name": "ExternalizeStringExtension",
      "properties": [],
      "methods": [
        {
          "name": "BuildSource",
          "parameters": [
            "char* buf",
            "size_t size"
          ],
          "return_type": "const char*",
          "logic": "Builds the JavaScript source code for the extension, including native function declarations and constants related to externalized string length thresholds."
        },
        {
          "name": "GetNativeFunctionTemplate",
          "parameters": [
            "v8::Isolate* isolate",
            "v8::Local<v8::String> str"
          ],
          "return_type": "v8::Local<v8::FunctionTemplate>",
          "logic": "Returns a function template based on the provided string.  Maps the string names (e.g. 'externalizeString') to their respective C++ native function implementations."
        },
        {
          "name": "Externalize",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "void",
          "logic": "Externalizes a given string.  Allocates memory for a copy of the string data and creates an external string resource that points to this memory.  It then attaches the resource to the original string and marks the string as external."
        },
        {
          "name": "CreateExternalizableString",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "void",
          "logic": "Creates an externalizable string from the input string. If the input string already supports externalization, it returns the input string itself. Otherwise, it allocates a new string object, copies the data from the input string into the new object, and returns the new string. It handles ConsStrings by creating a new ConsString in old space. It also handles flattening and copying the string data to the new string."
        },
        {
          "name": "CreateExternalizableTwoByteString",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "void",
          "logic": "Creates an externalizable two-byte string from the input string. This is a specialization of `CreateExternalizableString` to force a two-byte representation. It allocates a new string object, copies the data from the input string into the new object, and returns the new string."
        },
        {
          "name": "IsOneByte",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "void",
          "logic": "Checks if a given string is a one-byte string and returns the result as a boolean value."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "HasExternalForwardingIndex",
      "parameters": [
        "DirectHandle<String> string"
      ],
      "return_type": "bool",
      "logic": "Checks if a shared string has an external forwarding index, indicating that it is already marked for externalization."
    },
    {
      "name": "CopyConsStringToOld",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<ConsString> string",
        "v8::String::Encoding encoding"
      ],
      "return_type": "MaybeDirectHandle<String>",
      "logic": "Copies a ConsString to old space. It is used to prepare ConsStrings for externalization. It ensures that at least one part of the ConsString is two-byte if requested to create externalizable two-byte string. Otherwise, it creates a new ConsString."
    },
    {
      "name": "CreateExternalizableString",
      "parameters": [
        "v8::Isolate* isolate",
        "DirectHandle<String> string",
        "v8::String::Encoding encoding"
      ],
      "return_type": "MaybeDirectHandle<String>",
      "logic": "Creates a new externalizable string, handling various string types (ConsString, SeqOneByteString, SeqTwoByteString) and performing necessary allocations and data copying."
    }
  ]
}