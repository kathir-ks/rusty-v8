{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug-scopes.cc",
  "imports": [
    "src/debug/debug-scopes.h",
    "memory",
    "src/ast/ast.h",
    "src/ast/scopes.h",
    "src/common/globals.h",
    "src/debug/debug.h",
    "src/execution/frames-inl.h",
    "src/objects/js-generator-inl.h",
    "src/objects/source-text-module.h",
    "src/objects/string-set.h",
    "src/parsing/parse-info.h",
    "src/parsing/parsing.h",
    "src/utils/ostreams.h"
  ],
  "classes": [
    {
      "name": "ScopeIterator",
      "properties": [
        "isolate_",
        "frame_inspector_",
        "function_",
        "script_",
        "locals_",
        "context_",
        "generator_",
        "start_scope_",
        "current_scope_",
        "seen_script_scope_",
        "calculate_blocklists_",
        "reusable_compile_state_",
        "info_"
      ],
      "methods": [
        {
          "name": "ScopeIterator",
          "parameters": [
            "Isolate* isolate",
            "FrameInspector* frame_inspector",
            "ReparseStrategy strategy"
          ],
          "return_type": "void",
          "logic": "Constructor for ScopeIterator, initializes member variables and attempts to parse and retrieve scopes based on the given reparse strategy when frame inspector is available."
        },
        {
          "name": "~ScopeIterator",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for ScopeIterator (default)."
        },
        {
          "name": "GetFunctionDebugName",
          "parameters": [],
          "return_type": "DirectHandle<Object>",
          "logic": "Returns the debug name of the function associated with the scope, if available. Retrieves it from the function object, closure context, or returns undefined if not found."
        },
        {
          "name": "ScopeIterator",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSFunction> function"
          ],
          "return_type": "void",
          "logic": "Constructor for ScopeIterator that takes a JSFunction handle as input, initializes member variables, unwraps evaluation contexts, and retrieves the script associated with the function."
        },
        {
          "name": "ScopeIterator",
          "parameters": [
            "Isolate* isolate",
            "Handle<JSGeneratorObject> generator"
          ],
          "return_type": "void",
          "logic": "Constructor for ScopeIterator that takes a JSGeneratorObject handle as input. Initializes members, retrieves function and context from the generator, and attempts to parse and retrieve scopes using ReparseStrategy::kFunctionLiteral."
        },
        {
          "name": "Restart",
          "parameters": [],
          "return_type": "void",
          "logic": "Restarts the scope iteration from the initial scope, resetting the current scope and unwrapping the evaluation context."
        },
        {
          "name": "TryParseAndRetrieveScopes",
          "parameters": [
            "ReparseStrategy strategy"
          ],
          "return_type": "void",
          "logic": "Parses the code and analyzes the scopes, handling different reparse strategies and script compilation types.  It sets up the scope chain based on the break point and the function's shared information, and collect block lists."
        },
        {
          "name": "UnwrapEvaluationContext",
          "parameters": [],
          "return_type": "void",
          "logic": "Unwraps nested debug evaluation contexts to get to the actual context being debugged."
        },
        {
          "name": "MaterializeScopeDetails",
          "parameters": [],
          "return_type": "DirectHandle<JSObject>",
          "logic": "Materializes details of the current scope, creating a JSArray with information about the scope type, object, and other relevant properties."
        },
        {
          "name": "HasPositionInfo",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current scope has position information (start and end positions)."
        },
        {
          "name": "start_position",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the start position of the current scope."
        },
        {
          "name": "end_position",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the end position of the current scope."
        },
        {
          "name": "DeclaresLocals",
          "parameters": [
            "Mode mode"
          ],
          "return_type": "bool",
          "logic": "Checks if the current scope declares any local variables."
        },
        {
          "name": "HasContext",
          "parameters": "None",
          "return_type": "bool",
          "logic": "Checks if the current scope has an associated context."
        },
        {
          "name": "NeedsContext",
          "parameters": "None",
          "return_type": "bool",
          "logic": "Determines if the current scope requires a context to be available."
        },
        {
          "name": "AdvanceOneScope",
          "parameters": [],
          "return_type": "bool",
          "logic": "Advances the scope iterator to the outer scope."
        },
        {
          "name": "AdvanceOneContext",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the scope iterator to the previous context."
        },
        {
          "name": "AdvanceScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the scope iterator to the next visible scope, skipping hidden scopes."
        },
        {
          "name": "AdvanceContext",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the scope iterator to the next context."
        },
        {
          "name": "Next",
          "parameters": [],
          "return_type": "void",
          "logic": "Moves to the next scope in the chain."
        },
        {
          "name": "Type",
          "parameters": [],
          "return_type": "ScopeType",
          "logic": "Returns the type of the current scope."
        },
        {
          "name": "ScopeObject",
          "parameters": [
            "Mode mode"
          ],
          "return_type": "Handle<JSObject>",
          "logic": "Returns a JSObject representing the current scope's variables."
        },
        {
          "name": "VisitScope",
          "parameters": [
            "const Visitor& visitor",
            "Mode mode"
          ],
          "return_type": "void",
          "logic": "Visits the variables within the current scope, using the provided visitor function."
        },
        {
          "name": "SetVariableValue",
          "parameters": [
            "Handle<String> name",
            "DirectHandle<Object> value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a variable in the current scope."
        },
        {
          "name": "ClosureScopeHasThisReference",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the closure scope has a 'this' reference."
        },
        {
          "name": "CollectLocalsFromCurrentScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Collects local variables from the current scope."
        },
        {
          "name": "DebugPrint",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the content of the current scope for debugging purposes."
        },
        {
          "name": "GetSourcePosition",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the source position of the current execution point."
        },
        {
          "name": "VisitScriptScope",
          "parameters": [
            "const Visitor& visitor"
          ],
          "return_type": "void",
          "logic": "Visits the script scope and its variables using the provided visitor."
        },
        {
          "name": "VisitModuleScope",
          "parameters": [
            "const Visitor& visitor"
          ],
          "return_type": "void",
          "logic": "Visits the module scope and its variables using the provided visitor."
        },
        {
          "name": "VisitContextLocals",
          "parameters": [
            "const Visitor& visitor",
            "DirectHandle<ScopeInfo> scope_info",
            "DirectHandle<Context> context",
            "ScopeType scope_type"
          ],
          "return_type": "bool",
          "logic": "Visits the context locals of a scope."
        },
        {
          "name": "VisitLocals",
          "parameters": [
            "const Visitor& visitor",
            "Mode mode",
            "ScopeType scope_type"
          ],
          "return_type": "bool",
          "logic": "Visits the local variables within the current scope, using the provided visitor function."
        },
        {
          "name": "WithContextExtension",
          "parameters": [],
          "return_type": "Handle<JSObject>",
          "logic": "Retrieves the with-context extension object."
        },
        {
          "name": "VisitLocalScope",
          "parameters": [
            "const Visitor& visitor",
            "Mode mode",
            "ScopeType scope_type"
          ],
          "return_type": "void",
          "logic": "Visits the local scope and its variables using the provided visitor."
        },
        {
          "name": "SetLocalVariableValue",
          "parameters": [
            "DirectHandle<String> variable_name",
            "DirectHandle<Object> new_value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a local variable."
        },
        {
          "name": "SetContextExtensionValue",
          "parameters": [
            "DirectHandle<String> variable_name",
            "DirectHandle<Object> new_value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a variable in the context extension object."
        },
        {
          "name": "SetContextVariableValue",
          "parameters": [
            "DirectHandle<String> variable_name",
            "DirectHandle<Object> new_value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a variable in the current context."
        },
        {
          "name": "SetModuleVariableValue",
          "parameters": [
            "DirectHandle<String> variable_name",
            "DirectHandle<Object> new_value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a module variable."
        },
        {
          "name": "SetScriptVariableValue",
          "parameters": [
            "DirectHandle<String> variable_name",
            "DirectHandle<Object> new_value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a script variable."
        },
        {
          "name": "MaybeCollectAndStoreLocalBlocklists",
          "parameters": [],
          "return_type": "void",
          "logic": "Collects and store local blocklists to avoid reparsing scopes."
        }
      ]
    },
    {
      "name": "ScopeChainRetriever",
      "properties": [
        "scope_",
        "break_scope_start_",
        "break_scope_end_",
        "break_scope_type_",
        "position_",
        "closure_scope_",
        "start_scope_"
      ],
      "methods": [
        {
          "name": "ScopeChainRetriever",
          "parameters": [
            "DeclarationScope* scope",
            "DirectHandle<JSFunction> function",
            "int position"
          ],
          "return_type": "void",
          "logic": "Constructor for ScopeChainRetriever. Takes a scope, JSFunction, and position, and retrieves the scopes."
        },
        {
          "name": "ClosureScope",
          "parameters": [],
          "return_type": "DeclarationScope*",
          "logic": "Returns the closure scope."
        },
        {
          "name": "StartScope",
          "parameters": [],
          "return_type": "Scope*",
          "logic": "Returns the start scope."
        },
        {
          "name": "RetrieveScopes",
          "parameters": [],
          "return_type": "void",
          "logic": "Retrieves the closure and start scopes."
        },
        {
          "name": "RetrieveClosureScope",
          "parameters": [
            "Scope* scope"
          ],
          "return_type": "bool",
          "logic": "Retrieves the closure scope by recursively searching the scope chain."
        },
        {
          "name": "RetrieveStartScope",
          "parameters": [
            "Scope* scope"
          ],
          "return_type": "void",
          "logic": "Retrieves the start scope by recursively searching the scope chain."
        },
        {
          "name": "ContainsPosition",
          "parameters": [
            "Scope* scope"
          ],
          "return_type": "bool",
          "logic": "Checks if the given scope contains the specified position."
        }
      ]
    },
    {
      "name": "LocalBlocklistsCollector",
      "properties": [
        "isolate_",
        "script_",
        "context_",
        "scope_",
        "closure_scope_",
        "context_blocklist_",
        "function_blocklists_"
      ],
      "methods": [
        {
          "name": "LocalBlocklistsCollector",
          "parameters": [
            "Isolate* isolate",
            "Handle<Script> script",
            "Handle<Context> context",
            "DeclarationScope* closure_scope"
          ],
          "return_type": "void",
          "logic": "Constructor for LocalBlocklistsCollector. Initializes members."
        },
        {
          "name": "CollectAndStore",
          "parameters": [],
          "return_type": "void",
          "logic": "Collects all the local blocklists to the scope chain and stores them to the LocalsBlockListCache."
        },
        {
          "name": "InitializeWithClosureScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Creates block lists and populate starting with the scope associated to the current closure."
        },
        {
          "name": "AdvanceToNextNonHiddenScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Advance from the current Scope to the next visible/non hidden scope."
        },
        {
          "name": "CollectCurrentLocalsIntoBlocklists",
          "parameters": [],
          "return_type": "void",
          "logic": "Add all the stack allocated variables from the current scope into the various blocklists."
        },
        {
          "name": "FindScopeInfoForScope",
          "parameters": [
            "Scope* scope"
          ],
          "return_type": "DirectHandle<ScopeInfo>",
          "logic": "Retrieve the ScopeInfo associated with the given scope."
        },
        {
          "name": "StoreFunctionBlocklists",
          "parameters": [
            "DirectHandle<ScopeInfo> outer_scope_info"
          ],
          "return_type": "void",
          "logic": "Store all the function blocklists in the locals blocklist cache."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FindEvalScope",
      "parameters": [
        "Isolate* isolate",
        "Tagged<ScopeInfo> start_scope"
      ],
      "return_type": "MaybeDirectHandle<ScopeInfo>",
      "logic": "Walks a ScopeInfo outwards until it finds a EVAL scope."
    }
  ]
}