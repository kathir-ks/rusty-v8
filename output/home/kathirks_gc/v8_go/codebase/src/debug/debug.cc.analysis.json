{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug.cc",
  "imports": [
    "src/debug/debug.h",
    "memory",
    "optional",
    "src/api/api-inl.h",
    "src/base/platform/mutex.h",
    "src/builtins/builtins.h",
    "src/codegen/compilation-cache.h",
    "src/codegen/compiler.h",
    "src/common/assert-scope.h",
    "src/common/globals.h",
    "src/common/message-template.h",
    "src/debug/debug-evaluate.h",
    "src/debug/liveedit.h",
    "src/deoptimizer/deoptimizer.h",
    "src/execution/execution.h",
    "src/execution/frames-inl.h",
    "src/execution/frames.h",
    "src/execution/isolate-inl.h",
    "src/execution/protectors-inl.h",
    "src/execution/v8threads.h",
    "src/handles/global-handles-inl.h",
    "src/heap/heap-inl.h",
    "src/init/bootstrapper.h",
    "src/interpreter/bytecode-array-iterator.h",
    "src/logging/counters.h",
    "src/logging/runtime-call-stats-scope.h",
    "src/objects/api-callbacks-inl.h",
    "src/objects/debug-objects-inl.h",
    "src/objects/js-generator-inl.h",
    "src/objects/js-promise-inl.h",
    "src/objects/slots.h",
    "src/snapshot/embedded/embedded-data.h",
    "src/wasm/wasm-debug.h",
    "src/wasm/wasm-objects-inl.h"
  ],
  "classes": [
    {
      "name": "Debug::TemporaryObjectsTracker",
      "properties": [
        "disabled",
        "regions_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "AllocationEvent",
          "parameters": [
            "Address addr",
            "int size"
          ],
          "return_type": "void",
          "logic": "Adds a region to track temporary objects based on allocation events."
        },
        {
          "name": "MoveEvent",
          "parameters": [
            "Address from",
            "Address to",
            "int size"
          ],
          "return_type": "void",
          "logic": "Handles object move events, updating the tracked regions accordingly."
        },
        {
          "name": "HasObject",
          "parameters": [
            "DirectHandle<HeapObject> obj"
          ],
          "return_type": "bool",
          "logic": "Checks if a given HeapObject is being tracked as temporary, considering embedder fields."
        },
        {
          "name": "HasRegionContainingObject",
          "parameters": [
            "Address start",
            "Address end"
          ],
          "return_type": "bool",
          "logic": "Checks if there is a tracked memory region that overlaps with the object."
        },
        {
          "name": "FindOverlappingRegion",
          "parameters": [
            "Address start",
            "Address end",
            "bool include_adjacent"
          ],
          "return_type": "std::map<Address, Address>::iterator",
          "logic": "Finds a memory region that overlaps a certain address range. If include_adjacent is set to true, it also considers directly connected regions."
        },
        {
          "name": "AddRegion",
          "parameters": [
            "Address start",
            "Address end"
          ],
          "return_type": "void",
          "logic": "Adds a memory region to the tracker, combining it with existing overlapping regions."
        },
        {
          "name": "RemoveFromRegions",
          "parameters": [
            "Address start",
            "Address end"
          ],
          "return_type": "bool",
          "logic": "Removes part of a region by splitting and readjusting regions that overlap the removed part."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "BreakLocation::FromFrame",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "JavaScriptFrame* frame"
      ],
      "return_type": "BreakLocation",
      "logic": "Creates a BreakLocation from a JavaScriptFrame, determining the appropriate break position based on debug info."
    },
    {
      "name": "BreakLocation::IsPausedInJsFunctionEntry",
      "parameters": [
        "JavaScriptFrame* frame"
      ],
      "return_type": "bool",
      "logic": "Determines if execution is paused at the entry of a JS function."
    },
    {
      "name": "Debug::CheckBreakPointsForLocations",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "std::vector<BreakLocation>& break_locations",
        "bool* has_break_points"
      ],
      "return_type": "MaybeDirectHandle<FixedArray>",
      "logic": "Checks if any breakpoints are hit at the provided break locations."
    },
    {
      "name": "BreakLocation::AllAtCurrentStatement",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "JavaScriptFrame* frame",
        "std::vector<BreakLocation>* result_out"
      ],
      "return_type": "void",
      "logic": "Finds all break locations at the current statement."
    },
    {
      "name": "BreakLocation::GetGeneratorObjectForSuspendedFrame",
      "parameters": [
        "JavaScriptFrame* frame"
      ],
      "return_type": "Tagged<JSGeneratorObject>",
      "logic": "Gets the JSGeneratorObject associated with a suspended frame from an interpreter register."
    },
    {
      "name": "BreakLocation::BreakIndexFromCodeOffset",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "DirectHandle<AbstractCode> abstract_code",
        "int offset"
      ],
      "return_type": "int",
      "logic": "Finds the break index closest to the given code offset."
    },
    {
      "name": "BreakLocation::HasBreakPoint",
      "parameters": [
        "Isolate* isolate",
        "Handle<DebugInfo> debug_info"
      ],
      "return_type": "bool",
      "logic": "Checks if there's a breakpoint set at a specific BreakLocation."
    },
    {
      "name": "BreakIterator::BreakIndexFromPosition",
      "parameters": [
        "int source_position"
      ],
      "return_type": "int",
      "logic": "Finds the break index that matches the given source position."
    },
    {
      "name": "BreakIterator::Next",
      "parameters": [],
      "return_type": "void",
      "logic": "Advances the BreakIterator to the next breakable location."
    },
    {
      "name": "BreakIterator::GetDebugBreakType",
      "parameters": [],
      "return_type": "DebugBreakType",
      "logic": "Gets the type of debug break at the current location."
    },
    {
      "name": "BreakIterator::SkipToPosition",
      "parameters": [
        "int position"
      ],
      "return_type": "void",
      "logic": "Skips the iterator to a certain position."
    },
    {
      "name": "BreakIterator::SetDebugBreak",
      "parameters": [],
      "return_type": "void",
      "logic": "Sets a debug break at the current break location by modifying the bytecode."
    },
    {
      "name": "BreakIterator::ClearDebugBreak",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears a debug break at the current break location by reverting to the original bytecode."
    },
    {
      "name": "BreakIterator::GetBreakLocation",
      "parameters": [],
      "return_type": "BreakLocation",
      "logic": "Returns a BreakLocation object that represents the location the iterator currently points at."
    },
    {
      "name": "Debug::ThreadInit",
      "parameters": [],
      "return_type": "void",
      "logic": "Initializes thread-local data for debugging."
    },
    {
      "name": "Debug::ArchiveDebug",
      "parameters": [
        "char* storage"
      ],
      "return_type": "char*",
      "logic": "Archives debug information from a thread for serialization."
    },
    {
      "name": "Debug::RestoreDebug",
      "parameters": [
        "char* storage"
      ],
      "return_type": "char*",
      "logic": "Restores debug information from serialized data into a thread."
    },
    {
      "name": "Debug::ArchiveSpacePerThread",
      "parameters": [],
      "return_type": "int",
      "logic": "Returns the space required per thread for archiving debug information."
    },
    {
      "name": "Debug::Iterate",
      "parameters": [
        "RootVisitor* v"
      ],
      "return_type": "void",
      "logic": "Iterates through the debug roots using a RootVisitor."
    },
    {
      "name": "Debug::Iterate",
      "parameters": [
        "RootVisitor* v",
        "char* thread_storage"
      ],
      "return_type": "char*",
      "logic": "Iterates debug info for archived thread storage."
    },
    {
      "name": "Debug::Iterate",
      "parameters": [
        "RootVisitor* v",
        "ThreadLocal* thread_local_data"
      ],
      "return_type": "void",
      "logic": "Iterates through the debug roots of a ThreadLocal object."
    },
    {
      "name": "DebugInfoCollection::Insert",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi",
        "Tagged<DebugInfo> debug_info"
      ],
      "return_type": "void",
      "logic": "Inserts a DebugInfo object into the collection, associated with a SharedFunctionInfo."
    },
    {
      "name": "DebugInfoCollection::Contains",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "bool",
      "logic": "Checks if the collection contains a DebugInfo object for a given SharedFunctionInfo."
    },
    {
      "name": "DebugInfoCollection::Find",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "std::optional<Tagged<DebugInfo>>",
      "logic": "Finds the DebugInfo object associated with a given SharedFunctionInfo, if it exists."
    },
    {
      "name": "DebugInfoCollection::DeleteSlow",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "void",
      "logic": "Deletes the DebugInfo object associated with a given SharedFunctionInfo from the collection."
    },
    {
      "name": "DebugInfoCollection::EntryAsDebugInfo",
      "parameters": [
        "size_t index"
      ],
      "return_type": "Tagged<DebugInfo>",
      "logic": "Returns the DebugInfo at a particular index."
    },
    {
      "name": "DebugInfoCollection::DeleteIndex",
      "parameters": [
        "size_t index"
      ],
      "return_type": "void",
      "logic": "Deletes the DebugInfo at a particular index"
    },
    {
      "name": "Debug::Unload",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears all debugger state when the debugger is unloaded."
    },
    {
      "name": "Debug::OnInstrumentationBreak",
      "parameters": [],
      "return_type": "debug::DebugDelegate::ActionAfterInstrumentation",
      "logic": "Callback triggered when instrumentation breakpoint is hit."
    },
    {
      "name": "Debug::Break",
      "parameters": [
        "JavaScriptFrame* frame",
        "DirectHandle<JSFunction> break_target"
      ],
      "return_type": "void",
      "logic": "Handles a debug break, checking breakpoints and stepping actions."
    },
    {
      "name": "Debug::IsBreakOnInstrumentation",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "const BreakLocation& location"
      ],
      "return_type": "bool",
      "logic": "Checks if execution stopped at an instrumentation breakpoint."
    },
    {
      "name": "Debug::IsBreakOnDebuggerStatement",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> function",
        "const BreakLocation& location"
      ],
      "return_type": "bool",
      "logic": "Checks if execution stopped at a debugger statement."
    },
    {
      "name": "Debug::CheckBreakPoints",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "BreakLocation* location",
        "bool* has_break_points"
      ],
      "return_type": "MaybeHandle<FixedArray>",
      "logic": "Checks for breakpoints at a given location and returns an array of hit breakpoints."
    },
    {
      "name": "Debug::IsMutedAtAnyBreakLocation",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> function",
        "const std::vector<BreakLocation>& locations"
      ],
      "return_type": "bool",
      "logic": "Determines if breakpoints at the current location are muted, meaning the breakpoint should be ignored."
    },
    {
      "name": "Debug::SetMutedWasmLocation",
      "parameters": [
        "DirectHandle<Script> script",
        "int position"
      ],
      "return_type": "void",
      "logic": "Sets the muted location for WASM scripts."
    },
    {
      "name": "Debug::IsMutedAtWasmLocation",
      "parameters": [
        "Tagged<Script> script",
        "int position"
      ],
      "return_type": "bool",
      "logic": "Checks if the current Wasm location is muted."
    },
    {
      "name": "Debug::CheckBreakPoint",
      "parameters": [
        "DirectHandle<BreakPoint> break_point",
        "bool is_break_at_entry"
      ],
      "return_type": "bool",
      "logic": "Evaluates a single breakpoint condition and determines if it is triggered."
    },
    {
      "name": "Debug::SetBreakpoint",
      "parameters": [
        "Handle<SharedFunctionInfo> shared",
        "DirectHandle<BreakPoint> break_point",
        "int* source_position"
      ],
      "return_type": "bool",
      "logic": "Sets a breakpoint in a SharedFunctionInfo at the specified source position."
    },
    {
      "name": "Debug::SetBreakPointForScript",
      "parameters": [
        "Handle<Script> script",
        "DirectHandle<String> condition",
        "int* source_position",
        "int* id"
      ],
      "return_type": "bool",
      "logic": "Sets a breakpoint in a script at the specified source position."
    },
    {
      "name": "Debug::FindBreakablePosition",
      "parameters": [
        "Handle<DebugInfo> debug_info",
        "int source_position"
      ],
      "return_type": "int",
      "logic": "Finds the closest breakable position to the given source position."
    },
    {
      "name": "Debug::ApplyBreakPoints",
      "parameters": [
        "Handle<DebugInfo> debug_info"
      ],
      "return_type": "void",
      "logic": "Applies breakpoints by instrumenting the bytecode with debug breaks."
    },
    {
      "name": "Debug::ClearBreakPoints",
      "parameters": [
        "Handle<DebugInfo> debug_info"
      ],
      "return_type": "void",
      "logic": "Clears breakpoints from a DebugInfo object."
    },
    {
      "name": "Debug::ClearBreakPoint",
      "parameters": [
        "DirectHandle<BreakPoint> break_point"
      ],
      "return_type": "void",
      "logic": "Clears a single breakpoint."
    },
    {
      "name": "Debug::GetFunctionDebuggingId",
      "parameters": [
        "DirectHandle<JSFunction> function"
      ],
      "return_type": "int",
      "logic": "Gets or assigns an id to a debugging function."
    },
    {
      "name": "Debug::SetBreakpointForFunction",
      "parameters": [
        "Handle<SharedFunctionInfo> shared",
        "DirectHandle<String> condition",
        "int* id",
        "BreakPointKind kind"
      ],
      "return_type": "bool",
      "logic": "Sets a breakpoint on function."
    },
    {
      "name": "Debug::RemoveBreakpoint",
      "parameters": [
        "int id"
      ],
      "return_type": "void",
      "logic": "Removes a breakpoint."
    },
    {
      "name": "Debug::SetInstrumentationBreakpointForWasmScript",
      "parameters": [
        "DirectHandle<Script> script",
        "int* id"
      ],
      "return_type": "void",
      "logic": "Sets an instrumentation breakpoint on a WASM script."
    },
    {
      "name": "Debug::RemoveBreakpointForWasmScript",
      "parameters": [
        "DirectHandle<Script> script",
        "int id"
      ],
      "return_type": "void",
      "logic": "Removes breakpoints for wasm script."
    },
    {
      "name": "Debug::RecordWasmScriptWithBreakpoints",
      "parameters": [
        "DirectHandle<Script> script"
      ],
      "return_type": "void",
      "logic": "Records Wasm script with breakpoints."
    },
    {
      "name": "Debug::ClearAllBreakPoints",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears all breakpoints in the isolate."
    },
    {
      "name": "Debug::FloodWithOneShot",
      "parameters": [
        "Handle<SharedFunctionInfo> shared",
        "bool returns_only"
      ],
      "return_type": "void",
      "logic": "Floods the function with one-shot breakpoints for stepping."
    },
    {
      "name": "Debug::ChangeBreakOnException",
      "parameters": [
        "ExceptionBreakType type",
        "bool enable"
      ],
      "return_type": "void",
      "logic": "Changes the break-on-exception setting for caught or uncaught exceptions."
    },
    {
      "name": "Debug::IsBreakOnException",
      "parameters": [
        "ExceptionBreakType type"
      ],
      "return_type": "bool",
      "logic": "Checks if the debugger should break on the specified type of exception."
    },
    {
      "name": "Debug::GetHitBreakPoints",
      "parameters": [
        "DirectHandle<DebugInfo> debug_info",
        "int position",
        "bool* has_break_points"
      ],
      "return_type": "MaybeHandle<FixedArray>",
      "logic": "Retrieves hit breakpoints at a specific position."
    },
    {
      "name": "Debug::SetBreakOnNextFunctionCall",
      "parameters": [],
      "return_type": "void",
      "logic": "Sets a flag to break on the next function call."
    },
    {
      "name": "Debug::ClearBreakOnNextFunctionCall",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears the flag to break on the next function call."
    },
    {
      "name": "Debug::PrepareStepIn",
      "parameters": [
        "DirectHandle<JSFunction> function"
      ],
      "return_type": "void",
      "logic": "Prepares for a step-in action by flooding functions with one-shot breakpoints."
    },
    {
      "name": "Debug::PrepareStepInSuspendedGenerator",
      "parameters": [],
      "return_type": "void",
      "logic": "Prepares to step into a suspended generator."
    },
    {
      "name": "Debug::PrepareStepOnThrow",
      "parameters": [],
      "return_type": "void",
      "logic": "Prepares step on throw."
    },
    {
      "name": "Debug::PrepareStep",
      "parameters": [
        "StepAction step_action"
      ],
      "return_type": "void",
      "logic": "Prepares for a step action."
    },
    {
      "name": "Debug::GetSourceBreakLocations",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<SharedFunctionInfo> shared"
      ],
      "return_type": "DirectHandle<Object>",
      "logic": "Gets the source positions for active breakpoints."
    },
    {
      "name": "Debug::ClearStepping",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears all stepping setup."
    },
    {
      "name": "Debug::ClearOneShot",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears all one-shot breakpoints."
    },
    {
      "name": "Debug::ClearMutedLocation",
      "parameters": [],
      "return_type": "void",
      "logic": "Clears the muted location."
    },
    {
      "name": "Debug::SetMutedLocation",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> function",
        "const BreakLocation& location"
      ],
      "return_type": "void",
      "logic": "Sets the muted location for debugging."
    },
    {
      "name": "Debug::DiscardBaselineCode",
      "parameters": [
        "Tagged<SharedFunctionInfo> shared"
      ],
      "return_type": "void",
      "logic": "Discards baseline code."
    },
    {
      "name": "Debug::DiscardAllBaselineCode",
      "parameters": [],
      "return_type": "void",
      "logic": "Discards all baseline code."
    },
    {
      "name": "Debug::DeoptimizeFunction",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> shared"
      ],
      "return_type": "void",
      "logic": "Deoptimizes functions by discarding optimized code and baseline code."
    },
    {
      "name": "Debug::PrepareFunctionForDebugExecution",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> shared"
      ],
      "return_type": "void",
      "logic": "Prepares functions."
    },
    {
      "name": "Debug::InstallDebugBreakTrampoline",
      "parameters": [],
      "return_type": "void",
      "logic": "Installs DebugBreakTrampoline"
    },
    {
      "name": "Debug::GetPossibleBreakpoints",
      "parameters": [
        "Handle<Script> script",
        "int start_position",
        "int end_position",
        "bool restrict_to_function",
        "std::vector<BreakLocation>* locations"
      ],
      "return_type": "bool",
      "logic": "Gets all possible breakpoints for a certain range of code."
    },
    {
      "name": "Debug::FindClosestSharedFunctionInfoFromPosition",
      "parameters": [
        "int position",
        "Handle<Script> script",
        "Handle<SharedFunctionInfo> outer_shared"
      ],
      "return_type": "Handle<SharedFunctionInfo>",
      "logic": "Finds closest SharedFunctionInfo."
    },
    {
      "name": "Debug::FindSharedFunctionInfosIntersectingRange",
      "parameters": [
        "Handle<Script> script",
        "int start_position",
        "int end_position",
        "std::vector<Handle<SharedFunctionInfo>>* intersecting_shared"
      ],
      "return_type": "bool",
      "logic": "Finds the SharedFunctionInfos for functions that intersect a given range in a script."
    },
    {
      "name": "Debug::GetTopLevelWithRecompile",
      "parameters": [
        "Handle<Script> script",
        "bool* did_compile"
      ],
      "return_type": "MaybeDirectHandle<SharedFunctionInfo>",
      "logic": "Gets the top level compile."
    },
    {
      "name": "Debug::FindInnermostContainingFunctionInfo",
      "parameters": [
        "Handle<Script> script",
        "int position"
      ],
      "return_type": "Handle<Object>",
      "logic": "Finds the innermost shared function info."
    },
    {
      "name": "Debug::EnsureBreakInfo",
      "parameters": [
        "Handle<SharedFunctionInfo> shared"
      ],
      "return_type": "bool",
      "logic": "Ensures break info is available."
    },
    {
      "name": "Debug::CreateBreakInfo",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> shared"
      ],
      "return_type": "void",
      "logic": "Creates the debug break point for information."
    },
    {
      "name": "Debug::GetOrCreateDebugInfo",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> shared"
      ],
      "return_type": "Handle<DebugInfo>",
      "logic": "Gets or creates debug info for a shared function."
    },
    {
      "name": "Debug::InstallCoverageInfo",
      "parameters": [
        "DirectHandle<SharedFunctionInfo> shared",
        "DirectHandle<CoverageInfo> coverage_info"
      ],
      "return_type": "void",
      "logic": "Installs coverage info for the function."
    },
    {
      "name": "Debug::RemoveAllCoverageInfos",
      "parameters": [],
      "return_type": "void",
      "logic": "Removes all coverage infos."
    },
    {
      "name": "Debug::ClearAllDebuggerHints",
      "parameters": [],
      "return_type": "void",
      "logic": "Clear all debug hints."
    },
    {
      "name": "Debug::ClearAllDebugInfos",
      "parameters": [
        "const Debug::DebugInfoClearFunction& clear_function"
      ],
      "return_type": "void",
      "logic": "Clears all debug information and data structures."
    },
    {
      "name": "Debug::RemoveBreakInfoAndMaybeFree",
      "parameters": [
        "DirectHandle<DebugInfo> debug_info"
      ],
      "return_type": "void",
      "logic": "Removes break info and maybe free debug."
    },
    {
      "name": "Debug::IsBreakAtReturn",
      "parameters": [
        "JavaScriptFrame* frame"
      ],
      "return_type": "bool",
      "logic": "Checks if a break occurred at the end of return of the function."
    },
    {
      "name": "Debug::GetLoadedScripts",
      "parameters": [],
      "return_type": "DirectHandle<FixedArray>",
      "logic": "Gets all loaded scripts in an array."
    },
    {
      "name": "Debug::TryGetDebugInfo",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "std::optional<Tagged<DebugInfo>>",
      "logic": "Tries to find the debug info."
    },
    {
      "name": "Debug::HasDebugInfo",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "bool",
      "logic": "Checks if there is debug info."
    },
    {
      "name": "Debug::HasCoverageInfo",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "bool",
      "logic": "Checks if there is coverage info."
    },
    {
      "name": "Debug::HasBreakInfo",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "bool",
      "logic": "Check if there is break info."
    },
    {
      "name": "Debug::BreakAtEntry",
      "parameters": [
        "Tagged<SharedFunctionInfo> sfi"
      ],
      "return_type": "bool",
      "logic": "Tests whether we should break at entry."
    },
    {
      "name": "Debug::OnThrow",
      "parameters": [
        "DirectHandle<Object> exception"
      ],
      "return_type": "std::optional<Tagged<Object>>",
      "logic": "Called by the isolate when an exception is thrown."
    },
    {
      "name": "Debug::OnPromiseReject",
      "parameters": [
        "DirectHandle<Object> promise",
        "DirectHandle<Object> value"
      ],
      "return_type": "void",
      "logic": "Called when a promise is rejected."
    },
    {
      "name": "Debug::IsFrameBlackboxed",
      "parameters": [
        "JavaScriptFrame* frame"
      ],
      "return_type": "bool",
      "logic": "Checks frame for being blackboxed."
    },
    {
      "name": "Debug::OnException",
      "parameters": [
        "DirectHandle<Object> exception",
        "MaybeDirectHandle<JSPromise> promise",
        "v8::debug::ExceptionType exception_type"
      ],
      "return_type": "void",
      "logic": "Handles an exception event."
    },
    {
      "name": "Debug::OnDebugBreak",
      "parameters": [
        "DirectHandle<FixedArray> break_points_hit",
        "StepAction lastStepAction",
        "v8::debug::BreakReasons break_reasons"
      ],
      "return_type": "void",
      "logic": "Handles a debug break event."
    }
  ]
}