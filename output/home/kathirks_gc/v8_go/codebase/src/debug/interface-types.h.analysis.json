{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/interface-types.h",
  "imports": [
    "<cstdint>",
    "include/v8-function-callback.h",
    "include/v8-local-handle.h",
    "src/base/logging.h",
    "src/base/macros.h",
    "v8-isolate.h"
  ],
  "classes": [
    {
      "name": "Location",
      "properties": [
        "line_number_",
        "column_number_",
        "is_empty_"
      ],
      "methods": [
        {
          "name": "Location",
          "parameters": [
            "int line_number",
            "int column_number"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the line and column number of the location."
        },
        {
          "name": "Location",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor that creates an empty location."
        },
        {
          "name": "GetLineNumber",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the line number of the location."
        },
        {
          "name": "GetColumnNumber",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the column number of the location."
        },
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the location is empty, false otherwise."
        }
      ]
    },
    {
      "name": "BreakLocation",
      "properties": [
        "type_"
      ],
      "methods": [
        {
          "name": "BreakLocation",
          "parameters": [
            "int line_number",
            "int column_number",
            "BreakLocationType type"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the line and column number, and the break location type."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "BreakLocationType",
          "logic": "Returns the break location type."
        }
      ]
    },
    {
      "name": "ConsoleCallArguments",
      "properties": [
        "isolate_",
        "values_",
        "length_"
      ],
      "methods": [
        {
          "name": "Length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of arguments."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int i"
          ],
          "return_type": "v8::Local<v8::Value>",
          "logic": "Accessor for the arguments at index i. Returns Undefined if out of bounds."
        },
        {
          "name": "GetIsolate",
          "parameters": [],
          "return_type": "v8::Isolate*",
          "logic": "Returns the isolate."
        },
        {
          "name": "ConsoleCallArguments",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>&"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes from a v8 FunctionCallbackInfo object."
        },
        {
          "name": "ConsoleCallArguments",
          "parameters": [
            "internal::Isolate* isolate",
            "const internal::BuiltinArguments&"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes from internal V8 structures."
        }
      ]
    },
    {
      "name": "ConsoleContext",
      "properties": [
        "id_",
        "name_"
      ],
      "methods": [
        {
          "name": "ConsoleContext",
          "parameters": [
            "int id",
            "v8::Local<v8::String> name"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the context id and name."
        },
        {
          "name": "ConsoleContext",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the context id."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "v8::Local<v8::String>",
          "logic": "Returns the context name."
        }
      ]
    },
    {
      "name": "ConsoleDelegate",
      "properties": [],
      "methods": [
        {
          "name": "Debug",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.debug calls."
        },
        {
          "name": "Error",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.error calls."
        },
        {
          "name": "Info",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.info calls."
        },
        {
          "name": "Log",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.log calls."
        },
        {
          "name": "Warn",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.warn calls."
        },
        {
          "name": "Dir",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.dir calls."
        },
        {
          "name": "DirXml",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.dirxml calls."
        },
        {
          "name": "Table",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.table calls."
        },
        {
          "name": "Trace",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.trace calls."
        },
        {
          "name": "Group",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.group calls."
        },
        {
          "name": "GroupCollapsed",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.groupCollapsed calls."
        },
        {
          "name": "GroupEnd",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.groupEnd calls."
        },
        {
          "name": "Clear",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.clear calls."
        },
        {
          "name": "Count",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.count calls."
        },
        {
          "name": "CountReset",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.countReset calls."
        },
        {
          "name": "Assert",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.assert calls."
        },
        {
          "name": "Profile",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.profile calls."
        },
        {
          "name": "ProfileEnd",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.profileEnd calls."
        },
        {
          "name": "Time",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.time calls."
        },
        {
          "name": "TimeLog",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.timeLog calls."
        },
        {
          "name": "TimeEnd",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.timeEnd calls."
        },
        {
          "name": "TimeStamp",
          "parameters": [
            "const ConsoleCallArguments& args",
            "const ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Virtual method for handling console.timeStamp calls."
        },
        {
          "name": "~ConsoleDelegate",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual destructor."
        }
      ]
    }
  ],
  "functions": []
}