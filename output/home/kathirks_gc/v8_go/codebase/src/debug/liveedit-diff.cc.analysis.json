{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/liveedit-diff.cc",
  "imports": [
    "src/debug/liveedit-diff.h",
    "cmath",
    "map",
    "optional",
    "vector",
    "src/base/logging.h"
  ],
  "classes": [
    {
      "name": "MyersDiffer",
      "properties": [
        "input_",
        "output_",
        "fr_forward_",
        "fr_reverse_"
      ],
      "methods": [
        {
          "name": "MyersDiffer",
          "parameters": [
            "Comparator::Input* input",
            "Comparator::Output* output"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the MyersDiffer class. Initializes input_, output_, and the furthest reaching vectors (fr_forward_, fr_reverse_)."
        },
        {
          "name": "FindEditPath",
          "parameters": [],
          "return_type": "std::optional<Path>",
          "logic": "Finds the shortest edit path between the start and end points of the input strings. Calls the recursive FindEditPath with specific start and end points."
        },
        {
          "name": "FindEditPath",
          "parameters": [
            "Point from",
            "Point to"
          ],
          "return_type": "std::optional<Path>",
          "logic": "Recursively finds the shortest edit path between two points in the edit graph.  Divides the area by finding the middle snake, and then recursively calls itself to solve the sub-problems. Returns an optional Path representing the edit path."
        },
        {
          "name": "FindMiddleSnake",
          "parameters": [
            "Point from",
            "Point to"
          ],
          "return_type": "std::optional<Snake>",
          "logic": "Finds the 'middle snake' in the edit graph between two points.  This is done by incrementally calculating forward and reverse paths until they overlap, effectively finding the midpoint of the shortest edit script. Returns an optional Snake."
        },
        {
          "name": "ShortestEditForward",
          "parameters": [
            "const EditGraphArea& area",
            "int d"
          ],
          "return_type": "std::optional<Snake>",
          "logic": "Calculates the furthest reaching 'd'-paths for each k-diagonal in the forward direction.  Extends paths by either inserting or deleting, and follows diagonal moves as long as possible. Returns an optional Snake if an overlap with the reverse path is found."
        },
        {
          "name": "ShortestEditReverse",
          "parameters": [
            "const EditGraphArea& area",
            "int d"
          ],
          "return_type": "std::optional<Snake>",
          "logic": "Calculates the furthest reaching reverse 'd'-paths for each l-diagonal.  Works similarly to `ShortestEditForward` but in the reverse direction (from the end to the start). Returns an optional Snake if an overlap with the forward path is found."
        },
        {
          "name": "WriteResult",
          "parameters": [
            "const Path& path"
          ],
          "return_type": "void",
          "logic": "Converts an edit path into a source mapping, notifying the `ResultWriter` after each single move. Calls WalkDiagonal to traverse diagonal moves. Notifies the ResultWriter to record insertion/deletion/no-modification events based on the path."
        },
        {
          "name": "WalkDiagonal",
          "parameters": [
            "ResultWriter& writer",
            "Point p1",
            "Point p2"
          ],
          "return_type": "Point",
          "logic": "Walks along the diagonal between two points, notifying the `ResultWriter` of no-modification events for each diagonal move."
        },
        {
          "name": "MyersDiff",
          "parameters": [
            "Comparator::Input* input",
            "Comparator::Output* output"
          ],
          "return_type": "void",
          "logic": "Static method to calculate the diff using Myers' algorithm.  Creates a `MyersDiffer` object, finds the edit path, and then writes the result using the `WriteResult` method."
        }
      ]
    },
    {
      "name": "MyersDiffer::Point",
      "properties": [
        "x",
        "y"
      ],
      "methods": [
        {
          "name": "operator<",
          "parameters": [
            "const Point& other"
          ],
          "return_type": "bool",
          "logic": "Defines the less-than operator for points in the edit graph. Compares x and y coordinates. At least one diagonal away."
        }
      ]
    },
    {
      "name": "MyersDiffer::EditGraphArea",
      "properties": [
        "top_left",
        "bottom_right"
      ],
      "methods": [
        {
          "name": "width",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates the width of the edit graph area."
        },
        {
          "name": "height",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates the height of the edit graph area."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates the size (width + height) of the edit graph area."
        },
        {
          "name": "delta",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates the delta (width - height) of the edit graph area."
        }
      ]
    },
    {
      "name": "MyersDiffer::Path",
      "properties": [
        "points"
      ],
      "methods": [
        {
          "name": "Add",
          "parameters": [
            "const Point& p"
          ],
          "return_type": "void",
          "logic": "Adds a point to the path."
        },
        {
          "name": "Add",
          "parameters": [
            "const Path& p"
          ],
          "return_type": "void",
          "logic": "Adds another path's points to this path."
        }
      ]
    },
    {
      "name": "MyersDiffer::Snake",
      "properties": [
        "from",
        "to"
      ],
      "methods": []
    },
    {
      "name": "MyersDiffer::FurthestReaching",
      "properties": [
        "v_"
      ],
      "methods": [
        {
          "name": "FurthestReaching",
          "parameters": [
            "std::vector<int>::size_type size"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the FurthestReaching class. Initializes the internal vector with the given size."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int index"
          ],
          "return_type": "int&",
          "logic": "Overloads the [] operator for read/write access to the internal vector. Handles negative indexing."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int index"
          ],
          "return_type": "const int&",
          "logic": "Overloads the [] operator for const read access to the internal vector. Handles negative indexing."
        }
      ]
    },
    {
      "name": "MyersDiffer::ResultWriter",
      "properties": [
        "output_",
        "change_is_ongoing_",
        "change_start_"
      ],
      "methods": [
        {
          "name": "ResultWriter",
          "parameters": [
            "Comparator::Output* output"
          ],
          "return_type": "constructor",
          "logic": "Constructor for ResultWriter. Initializes the output pointer."
        },
        {
          "name": "RecordNoModification",
          "parameters": [
            "const Point& from"
          ],
          "return_type": "void",
          "logic": "Records a no-modification event.  Closes the current chunk if one is open."
        },
        {
          "name": "RecordInsertionOrDeletion",
          "parameters": [
            "const Point& from"
          ],
          "return_type": "void",
          "logic": "Records an insertion or deletion event.  Starts a new chunk if one is not already ongoing."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Comparator::CalculateDifference",
      "parameters": [
        "Comparator::Input* input",
        "Comparator::Output* result_writer"
      ],
      "return_type": "void",
      "logic": "Calculates the difference between two inputs using Myers' algorithm. Creates a `MyersDiffer` object and calls its static `MyersDiff` method."
    }
  ]
}