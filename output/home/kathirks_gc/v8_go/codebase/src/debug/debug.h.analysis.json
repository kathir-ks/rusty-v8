{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/debug/debug.h\",\n  \"imports\": [\n    \"<memory>\",\n    \"<optional>\",\n    \"<unordered_map>\",\n    \"<vector>\",\n    \"src/base/enum-set.h\",\n    \"src/base/platform/elapsed-timer.h\",\n    \"src/codegen/source-position-table.h\",\n    \"src/common/globals.h\",\n    \"src/debug/debug-interface.h\",\n    \"src/debug/interface-types.h\",\n    \"src/execution/interrupts-scope.h\",\n    \"src/execution/isolate.h\",\n    \"src/handles/handles.h\",\n    \"src/objects/debug-objects.h\",\n    \"src/objects/shared-function-info.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"BreakLocation\",\n      \"properties\": [\n        \"abstract_code_\",\n        \"code_offset_\",\n        \"type_\",\n        \"position_\",\n        \"generator_obj_reg_index_\",\n        \"generator_suspend_id_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Invalid\",\n          \"parameters\": [],\n          \"return_type\": \"BreakLocation\",\n          \"logic\": \"Returns an invalid BreakLocation object.\"\n        },\n        {\n          \"name\": \"FromFrame\",\n          \"parameters\": [\n            \"Handle<DebugInfo> debug_info\",\n            \"JavaScriptFrame* frame\"\n          ],\n          \"return_type\": \"BreakLocation\",\n          \"logic\": \"Creates a BreakLocation from a JavaScriptFrame.\"\n        },\n        {\n          \"name\": \"IsPausedInJsFunctionEntry\",\n          \"parameters\": [\n            \"JavaScriptFrame* frame\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the JavaScriptFrame is paused in a JS function entry.\"\n        },\n        {\n          \"name\": \"AllAtCurrentStatement\",\n          \"parameters\": [\n            \"Handle<DebugInfo> debug_info\",\n            \"JavaScriptFrame* frame\",\n            \"std::vector<BreakLocation>* result_out\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Populates the result_out vector with all BreakLocations at the current statement.\"\n        },\n        {\n          \"name\": \"IsSuspend\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a suspend breakpoint.\"\n        },\n        {\n          \"name\": \"IsReturn\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a return breakpoint.\"\n        },\n        {\n          \"name\": \"IsReturnOrSuspend\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a return or suspend breakpoint.\"\n        },\n        {\n          \"name\": \"IsCall\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a call breakpoint.\"\n        },\n        {\n          \"name\": \"IsDebugBreakSlot\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a debug break slot breakpoint.\"\n        },\n        {\n          \"name\": \"IsDebuggerStatement\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a debugger statement breakpoint.\"\n        },\n        {\n          \"name\": \"IsDebugBreakAtEntry\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the BreakLocation represents a debug break at entry breakpoint.\"\n        },\n        {\n          \"name\": \"HasBreakPoint\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Handle<DebugInfo> debug_info\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a breakpoint exists at this location in DebugInfo.\"\n        },\n        {\n          \"name\": \"generator_suspend_id\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the generator suspend id.\"\n        },\n        {\n          \"name\": \"position\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the position.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"debug::BreakLocationType\",\n          \"logic\": \"Returns the break location type (from the debug namespace).\"\n        },\n        {\n          \"name\": \"GetGeneratorObjectForSuspendedFrame\",\n          \"parameters\": [\n            \"JavaScriptFrame* frame\"\n          ],\n          \"return_type\": \"Tagged<JSGeneratorObject>\",\n          \"logic\": \"Retrieves the JSGeneratorObject associated with this breakpoint from the frame, if suspended.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BreakIterator\",\n      \"properties\": [\n        \"debug_info_\",\n        \"break_index_\",\n        \"position_\",\n        \"statement_position_\",\n        \"source_position_iterator_\",\n        \"no_gc_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BreakIterator\",\n          \"parameters\": [\n            \"Handle<DebugInfo> debug_info\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for BreakIterator.\"\n        },\n        {\n          \"name\": \"GetBreakLocation\",\n          \"parameters\": [],\n          \"return_type\": \"BreakLocation\",\n          \"logic\": \"Returns the current break location.\"\n        },\n        {\n          \"name\": \"Done\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the iteration is complete.\"\n        },\n        {\n          \"name\": \"Next\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves the iterator to the next break location.\"\n        },\n        {\n          \"name\": \"SkipToPosition\",\n          \"parameters\": [\n            \"int position\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Skips the iterator to a specific position.\"\n        },\n        {\n          \"name\": \"SkipTo\",\n          \"parameters\": [\n            \"int count\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Skips the iterator by a given count.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset of the current break location.\"\n        },\n        {\n          \"name\": \"break_index\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the current break index.\"\n        },\n        {\n          \"name\": \"position\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the position of the current location.\"\n        },\n        {\n          \"name\": \"statement_position\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns statement position of the current location.\"\n        },\n        {\n          \"name\": \"ClearDebugBreak\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the debug break at the current location.\"\n        },\n        {\n          \"name\": \"SetDebugBreak\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the debug break at the current location.\"\n        },\n        {\n          \"name\": \"GetDebugBreakType\",\n          \"parameters\": [],\n          \"return_type\": \"DebugBreakType\",\n          \"logic\": \"Returns the debug break type for the iterator's current location.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DebugInfoCollection\",\n      \"properties\": [\n        \"isolate_\",\n        \"list_\",\n        \"map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DebugInfoCollection\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for DebugInfoCollection.\"\n        },\n        {\n          \"name\": \"Insert\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\",\n            \"Tagged<DebugInfo> debug_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Inserts a DebugInfo for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"Contains\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a DebugInfo exists for a given SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"Find\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"std::optional<Tagged<DebugInfo>>\",\n          \"logic\": \"Finds a DebugInfo for a given SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"DeleteSlow\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes the DebugInfo for a given SharedFunctionInfo. (Slow path)\"\n        },\n        {\n          \"name\": \"Size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the number of DebugInfo objects in the collection.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DebugInfoCollection::Iterator\",\n      \"properties\": [\n        \"collection_\",\n        \"index_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Iterator\",\n          \"parameters\": [\n            \"DebugInfoCollection* collection\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for the iterator.\"\n        },\n        {\n          \"name\": \"HasNext\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if there is a next DebugInfo object.\"\n        },\n        {\n          \"name\": \"Next\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<DebugInfo>\",\n          \"logic\": \"Returns the next DebugInfo object.\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator to the next element.\"\n        },\n        {\n          \"name\": \"DeleteNext\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes current element pointed by iterator.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Debug\",\n      \"properties\": [\n        \"debug_delegate_\",\n        \"is_active_\",\n        \"hook_on_function_call_\",\n        \"is_suppressed_\",\n        \"running_live_edit_\",\n        \"break_disabled_\",\n        \"break_points_active_\",\n        \"break_on_caught_exception_\",\n        \"break_on_uncaught_exception_\",\n        \"side_effect_check_failed_\",\n        \"debug_infos_\",\n        \"temporary_objects_\",\n        \"regexp_match_info_\",\n        \"thread_local_\",\n        \"wasm_scripts_with_break_points_\",\n        \"ignore_side_effects_for_function_template_info_\",\n        \"isolate_\",\n        \"isolate_id_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OnDebugBreak\",\n          \"parameters\": [\n            \"DirectHandle<FixedArray> break_points_hit\",\n            \"StepAction stepAction\",\n            \"debug::BreakReasons break_reasons\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles debug break events.\"\n        },\n        {\n          \"name\": \"OnInstrumentationBreak\",\n          \"parameters\": [],\n          \"return_type\": \"debug::DebugDelegate::ActionAfterInstrumentation\",\n          \"logic\": \"Handles instrumentation break events.\"\n        },\n        {\n          \"name\": \"OnThrow\",\n          \"parameters\": [\n            \"DirectHandle<Object> exception\"\n          ],\n          \"return_type\": \"std::optional<Tagged<Object>>\",\n          \"logic\": \"Handles throw events.\"\n        },\n        {\n          \"name\": \"OnPromiseReject\",\n          \"parameters\": [\n            \"DirectHandle<Object> promise\",\n            \"DirectHandle<Object> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles promise rejection events.\"\n        },\n        {\n          \"name\": \"OnCompileError\",\n          \"parameters\": [\n            \"DirectHandle<Script> script\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles compile error events.\"\n        },\n        {\n          \"name\": \"OnAfterCompile\",\n          \"parameters\": [\n            \"DirectHandle<Script> script\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles after compile events.\"\n        },\n        {\n          \"name\": \"HandleDebugBreak\",\n          \"parameters\": [\n            \"IgnoreBreakMode ignore_break_mode\",\n            \"debug::BreakReasons break_reasons\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles debug break. It might be ignored, handled or deferred.\"\n        },\n        {\n          \"name\": \"Break\",\n          \"parameters\": [\n            \"JavaScriptFrame* frame\",\n            \"DirectHandle<JSFunction> break_target\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Breaks execution at the specified frame.\"\n        },\n        {\n          \"name\": \"GetLoadedScripts\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<FixedArray>\",\n          \"logic\": \"Retrieves loaded scripts.\"\n        },\n        {\n          \"name\": \"TryGetDebugInfo\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"std::optional<Tagged<DebugInfo>>\",\n          \"logic\": \"Tries to retrieve the DebugInfo for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"HasDebugInfo\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a SharedFunctionInfo has associated DebugInfo.\"\n        },\n        {\n          \"name\": \"HasCoverageInfo\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a SharedFunctionInfo has coverage info.\"\n        },\n        {\n          \"name\": \"HasBreakInfo\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a SharedFunctionInfo has break info.\"\n        },\n        {\n          \"name\": \"BreakAtEntry\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> sfi\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the debugger should break at the entry of a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"SetBreakpoint\",\n          \"parameters\": [\n            \"Handle<SharedFunctionInfo> shared\",\n            \"DirectHandle<BreakPoint> break_point\",\n            \"int* source_position\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets a breakpoint for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"ClearBreakPoint\",\n          \"parameters\": [\n            \"DirectHandle<BreakPoint> break_point\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears a breakpoint.\"\n        },\n        {\n          \"name\": \"ChangeBreakOnException\",\n          \"parameters\": [\n            \"ExceptionBreakType type\",\n            \"bool enable\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Changes whether to break on exceptions of a given type.\"\n        },\n        {\n          \"name\": \"IsBreakOnException\",\n          \"parameters\": [\n            \"ExceptionBreakType type\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks whether the debugger should break on exceptions of a given type.\"\n        },\n        {\n          \"name\": \"SetTerminateOnResume\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the terminate on resume flag.\"\n        },\n        {\n          \"name\": \"SetBreakPointForScript\",\n          \"parameters\": [\n            \"Handle<Script> script\",\n            \"DirectHandle<String> condition\",\n            \"int* source_position\",\n            \"int* id\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets a breakpoint for a script.\"\n        },\n        {\n          \"name\": \"SetBreakpointForFunction\",\n          \"parameters\": [\n            \"Handle<SharedFunctionInfo> shared\",\n            \"DirectHandle<String> condition\",\n            \"int* id\",\n            \"BreakPointKind kind\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets a breakpoint for a function.\"\n        },\n        {\n          \"name\": \"RemoveBreakpoint\",\n          \"parameters\": [\n            \"int id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes a breakpoint.\"\n        },\n        {\n          \"name\": \"SetInstrumentationBreakpointForWasmScript\",\n          \"parameters\": [\n            \"DirectHandle<Script> script\",\n            \"int* id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an instrumentation breakpoint for a WASM script.\"\n        },\n        {\n          \"name\": \"RemoveBreakpointForWasmScript\",\n          \"parameters\": [\n            \"DirectHandle<Script> script\",\n            \"int id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes a breakpoint for a WASM script.\"\n        },\n        {\n          \"name\": \"RecordWasmScriptWithBreakpoints\",\n          \"parameters\": [\n            \"DirectHandle<Script> script\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records the given WASM script as having breakpoints.\"\n        },\n        {\n          \"name\": \"GetHitBreakPoints\",\n          \"parameters\": [\n            \"DirectHandle<DebugInfo> debug_info\",\n            \"int position\",\n            \"bool* has_break_points\"\n          ],\n          \"return_type\": \"MaybeHandle<FixedArray>\",\n          \"logic\": \"Finds and returns the breakpoints that are hit at a given position. It return an empty handle if none were found. has_break_points parameter is set to true if position has any non-instrumentation breakpoint.\"\n        },\n        {\n          \"name\": \"PrepareStep\",\n          \"parameters\": [\n            \"StepAction step_action\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for stepping.\"\n        },\n        {\n          \"name\": \"PrepareStepIn\",\n          \"parameters\": [\n            \"DirectHandle<JSFunction> function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for stepping into a function.\"\n        },\n        {\n          \"name\": \"PrepareStepInSuspendedGenerator\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for stepping into a suspended generator.\"\n        },\n        {\n          \"name\": \"PrepareStepOnThrow\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for stepping on throw.\"\n        },\n        {\n          \"name\": \"ClearStepping\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears stepping information.\"\n        },\n        {\n          \"name\": \"PrepareRestartFrame\",\n          \"parameters\": [\n            \"JavaScriptFrame* frame\",\n            \"int inlined_frame_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares the execution for restarting the given frame.\"\n        },\n        {\n          \"name\": \"SetBreakOnNextFunctionCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the break on next function call flag.\"\n        },\n        {\n          \"name\": \"ClearBreakOnNextFunctionCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the break on next function call flag.\"\n        },\n        {\n          \"name\": \"DiscardBaselineCode\",\n          \"parameters\": [\n            \"Tagged<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Discards the baseline code for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"DiscardAllBaselineCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Discards all baseline code.\"\n        },\n        {\n          \"name\": \"DeoptimizeFunction\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Deoptimizes a function.\"\n        },\n        {\n          \"name\": \"PrepareFunctionForDebugExecution\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares a function for debug execution.\"\n        },\n        {\n          \"name\": \"InstallDebugBreakTrampoline\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Installs the debug break trampoline.\"\n        },\n        {\n          \"name\": \"GetPossibleBreakpoints\",\n          \"parameters\": [\n            \"Handle<Script> script\",\n            \"int start_position\",\n            \"int end_position\",\n            \"bool restrict_to_function\",\n            \"std::vector<BreakLocation>* locations\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Populates vector with possible break locations given parameters.\"\n        },\n        {\n          \"name\": \"IsFunctionBlackboxed\",\n          \"parameters\": [\n            \"DirectHandle<Script> script\",\n            \"const int start\",\n            \"const int end\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if the function defined by the given script and range is blackboxed.\"\n        },\n        {\n          \"name\": \"IsBlackboxed\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a SharedFunctionInfo is blackboxed.\"\n        },\n        {\n          \"name\": \"ShouldBeSkipped\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if current execution frame should be skipped by debugger based on blackboxing configuration.\"\n        },\n        {\n          \"name\": \"CanBreakAtEntry\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Check if a SharedFunctionInfo can break at entry. Basically check if it's not blackboxed.\"\n        },\n        {\n          \"name\": \"SetDebugDelegate\",\n          \"parameters\": [\n            \"debug::DebugDelegate* delegate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the debug delegate.\"\n        },\n        {\n          \"name\": \"EnsureBreakInfo\",\n          \"parameters\": [\n            \"Handle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Ensures that a SharedFunctionInfo has break info, creates one if necessary. Returns whether the operation succeeded.\"\n        },\n        {\n          \"name\": \"CreateBreakInfo\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates break info for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"GetOrCreateDebugInfo\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"Handle<DebugInfo>\",\n          \"logic\": \"Retrieves the DebugInfo for a SharedFunctionInfo, creating one if it doesn't exist.\"\n        },\n        {\n          \"name\": \"InstallCoverageInfo\",\n          \"parameters\": [\n            \"DirectHandle<SharedFunctionInfo> shared\",\n            \"DirectHandle<CoverageInfo> coverage_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Installs coverage info for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"RemoveAllCoverageInfos\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes all coverage infos.\"\n        },\n        {\n          \"name\": \"FindInnermostContainingFunctionInfo\",\n          \"parameters\": [\n            \"Handle<Script> script\",\n            \"int position\"\n          ],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Finds the innermost containing function info for a given position in a script.\"\n        },\n        {\n          \"name\": \"FindClosestSharedFunctionInfoFromPosition\",\n          \"parameters\": [\n            \"int position\",\n            \"Handle<Script> script\",\n            \"Handle<SharedFunctionInfo> outer_shared\"\n          ],\n          \"return_type\": \"Handle<SharedFunctionInfo>\",\n          \"logic\": \"Finds closest SharedFunctionInfo from position within script.\"\n        },\n        {\n          \"name\": \"FindSharedFunctionInfosIntersectingRange\",\n          \"parameters\": [\n            \"Handle<Script> script\",\n            \"int start_position\",\n            \"int end_position\",\n            \"std::vector<Handle<SharedFunctionInfo>>* candidates\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Finds shared function infos intersecting a given range of script and stores into provided vector.\"\n        },\n        {\n          \"name\": \"GetTopLevelWithRecompile\",\n          \"parameters\": [\n            \"Handle<Script> script\",\n            \"bool* did_compile\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<SharedFunctionInfo>\",\n          \"logic\": \"Gets the top-level SharedFunctionInfo with recompile.\"\n        },\n        {\n          \"name\": \"GetSourceBreakLocations\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<SharedFunctionInfo> shared\"\n          ],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Retrieves the source break locations for a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"IsBreakAtReturn\",\n          \"parameters\": [\n            \"JavaScriptFrame* frame\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Check whether this frame is just about to return.\"\n        },\n        {\n          \"name\": \"AllFramesOnStackAreBlackboxed\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Walks the call stack to see if any frames are not ignore listed (blackboxed).\"\n        },\n        {\n          \"name\": \"SetScriptSource\",\n          \"parameters\": [\n            \"Handle<Script> script\",\n            \"Handle<String> source\",\n            \"bool preview\",\n            \"bool allow_top_frame_live_editing\",\n            \"debug::LiveEditResult* result\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets new script source, throw an exception if error occurred. When preview is true: try to set source, throw exception if any without actual script change.\"\n        },\n        {\n          \"name\": \"GetFunctionDebuggingId\",\n          \"parameters\": [\n            \"DirectHandle<JSFunction> function\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Gets the debugging ID for a function.\"\n        },\n        {\n          \"name\": \"ArchiveDebug\",\n          \"parameters\": [\n            \"char* to\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Archives the debug data to a character buffer.\"\n        },\n        {\n          \"name\": \"RestoreDebug\",\n          \"parameters\": [\n            \"char* from\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Restores the debug data from a character buffer.\"\n        },\n        {\n          \"name\": \"ArchiveSpacePerThread\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the archive space per thread.\"\n        },\n        {\n          \"name\": \"FreeThreadResources\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees thread resources.\"\n        },\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates over the debug roots.\"\n        },\n        {\n          \"name\": \"InitThread\",\n          \"parameters\": [\n            \"const ExecutionAccess& lock\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the thread.\"\n        },\n        {\n          \"name\": \"CheckExecutionState\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the debugger is active.\"\n        },\n        {\n          \"name\": \"StartSideEffectCheckMode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts side effect check mode.\"\n        },\n        {\n          \"name\": \"StopSideEffectCheckMode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops side effect check mode.\"\n        },\n        {\n          \"name\": \"ApplySideEffectChecks\",\n          \"parameters\": [\n            \"DirectHandle<DebugInfo> debug_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Applies side effect checks.\"\n        },\n        {\n          \"name\": \"ClearSideEffectChecks\",\n          \"parameters\": [\n            \"DirectHandle<DebugInfo> debug_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears side effect checks.\"\n        },\n        {\n          \"name\": \"IgnoreSideEffectsOnNextCallTo\",\n          \"parameters\": [\n            \"Handle<FunctionTemplateInfo> function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Make a one-time exception for side effects for given function template.\"\n        },\n        {\n          \"name\": \"PerformSideEffectCheck\",\n          \"parameters\": [\n            \"DirectHandle<JSFunction> function\",\n            \"DirectHandle<Object> receiver\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Performs side effect check.\"\n        },\n        {\n          \"name\": \"PrepareBuiltinForSideEffectCheck\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Builtin id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares a builtin for side effect check.\"\n        },\n        {\n          \"name\": \"PerformSideEffectCheckForAccessor\",\n          \"parameters\": [\n            \"DirectHandle<AccessorInfo> accessor_info\",\n            \"DirectHandle<Object> receiver\",\n            \"AccessorComponent component\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Performs side effect check for accessor.\"\n        },\n        {\n          \"name\": \"PerformSideEffectCheckForCallback\",\n          \"parameters\": [\n            \"Handle<FunctionTemplateInfo> function\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Performs side effect check for callback.\"\n        },\n        {\n          \"name\": \"PerformSideEffectCheckForInterceptor\",\n          \"parameters\": [\n            \"DirectHandle<InterceptorInfo> interceptor_info\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Performs side effect check for interceptor.\"\n        },\n        {\n          \"name\": \"PerformSideEffectCheckAtBytecode\",\n          \"parameters\": [\n            \"InterpretedFrame* frame\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Performs side effect check at bytecode.\"\n        },\n        {\n          \"name\": \"PerformSideEffectCheckForObject\",\n          \"parameters\": [\n            \"DirectHandle<Object> object\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Performs side effect check for Object.\"\n        },\n        {\n          \"name\": \"is_active\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the debugger is active.\"\n        },\n        {\n          \"name\": \"in_debug_scope\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the debugger is in a debug scope.\"\n        },\n        {\n          \"name\": \"needs_check_on_function_call\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the debugger needs to check on function calls.\"\n        },\n        {\n          \"name\": \"set_break_points_active\",\n          \"parameters\": [\n            \"bool v\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets whether breakpoints are active.\"\n        },\n        {\n          \"name\": \"break_points_active\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if breakpoints are active.\"\n        },\n        {\n          \"name\": \"break_frame_id\",\n          \"parameters\": [],\n          \"return_"
}