{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/wasm/gdb-server/gdb-server.cc",
  "imports": [
    "src/debug/wasm/gdb-server/gdb-server.h",
    "<inttypes.h>",
    "<functional>",
    "src/api/api-inl.h",
    "src/api/api.h",
    "src/debug/debug.h",
    "src/debug/wasm/gdb-server/gdb-server-thread.h",
    "src/utils/locked-queue-inl.h"
  ],
  "classes": [
    {
      "name": "TaskRunner",
      "properties": [
        "queue_",
        "process_queue_semaphore_",
        "nested_loop_count_",
        "is_terminated_"
      ],
      "methods": [
        {
          "name": "TaskRunner",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the TaskRunner class, initializing the semaphore, loop count, and termination flag."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts the task runner, processing tasks from the queue until terminated or the loop is exited."
        },
        {
          "name": "Terminate",
          "parameters": [],
          "return_type": "void",
          "logic": "Terminates the task runner, preventing further task processing until restarted."
        },
        {
          "name": "Append",
          "parameters": [
            "base::Semaphore* ready_semaphore",
            "Functor&& task"
          ],
          "return_type": "auto",
          "logic": "Appends a new task (function) to the task queue with a semaphore to signal completion."
        },
        {
          "name": "GetNext",
          "parameters": [],
          "return_type": "std::shared_ptr<Task>",
          "logic": "Retrieves the next task from the queue, waiting on the semaphore if the queue is empty."
        }
      ]
    },
    {
      "name": "Task",
      "properties": [
        "ready_semaphore_",
        "func_"
      ],
      "methods": [
        {
          "name": "Task",
          "parameters": [
            "base::Semaphore* ready_semaphore",
            "std::function<void()> func"
          ],
          "return_type": "void",
          "logic": "Constructor for the Task class, storing the function and semaphore."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the stored function and signals the semaphore to indicate completion."
        }
      ]
    },
    {
      "name": "GdbServer",
      "properties": [
        "task_runner_",
        "thread_",
        "isolate_delegates_",
        "scripts_",
        "breakpoints_",
        "has_module_list_changed_"
      ],
      "methods": [
        {
          "name": "GdbServer",
          "parameters": [],
          "return_type": "GdbServer",
          "logic": "Constructor for the GdbServer class, initializing the task runner."
        },
        {
          "name": "Create",
          "parameters": [],
          "return_type": "std::unique_ptr<GdbServer>",
          "logic": "Static factory method to create a GdbServer instance and start the GDB server thread."
        },
        {
          "name": "~GdbServer",
          "parameters": [],
          "return_type": "GdbServer",
          "logic": "Destructor for the GdbServer class, stopping and joining the GDB server thread."
        },
        {
          "name": "RunMessageLoopOnPause",
          "parameters": [],
          "return_type": "void",
          "logic": "Runs the task runner's message loop when the debugger is paused."
        },
        {
          "name": "QuitMessageLoopOnPause",
          "parameters": [],
          "return_type": "void",
          "logic": "Terminates the task runner's message loop when the debugger is no longer paused."
        },
        {
          "name": "GetLoadedModules",
          "parameters": [
            "bool clear_module_list_changed_flag"
          ],
          "return_type": "std::vector<GdbServer::WasmModuleInfo>",
          "logic": "Retrieves a list of loaded WASM modules and their debug information."
        },
        {
          "name": "GetModuleDebugHandler",
          "parameters": [
            "uint32_t module_id",
            "WasmModuleDebug** wasm_module_debug"
          ],
          "return_type": "bool",
          "logic": "Retrieves the WasmModuleDebug handler for a given module ID."
        },
        {
          "name": "GetWasmGlobal",
          "parameters": [
            "uint32_t frame_index",
            "uint32_t index",
            "uint8_t* buffer",
            "uint32_t buffer_size",
            "uint32_t* size"
          ],
          "return_type": "bool",
          "logic": "Retrieves the value of a WASM global variable."
        },
        {
          "name": "GetWasmLocal",
          "parameters": [
            "uint32_t frame_index",
            "uint32_t index",
            "uint8_t* buffer",
            "uint32_t buffer_size",
            "uint32_t* size"
          ],
          "return_type": "bool",
          "logic": "Retrieves the value of a WASM local variable."
        },
        {
          "name": "GetWasmStackValue",
          "parameters": [
            "uint32_t frame_index",
            "uint32_t index",
            "uint8_t* buffer",
            "uint32_t buffer_size",
            "uint32_t* size"
          ],
          "return_type": "bool",
          "logic": "Retrieves a WASM stack value."
        },
        {
          "name": "GetWasmMemory",
          "parameters": [
            "uint32_t module_id",
            "uint32_t offset",
            "uint8_t* buffer",
            "uint32_t size"
          ],
          "return_type": "uint32_t",
          "logic": "Retrieves a chunk of WASM memory from a specific module."
        },
        {
          "name": "GetWasmData",
          "parameters": [
            "uint32_t module_id",
            "uint32_t offset",
            "uint8_t* buffer",
            "uint32_t size"
          ],
          "return_type": "uint32_t",
          "logic": "Retrieves a chunk of WASM data from a specific module."
        },
        {
          "name": "GetWasmModuleBytes",
          "parameters": [
            "wasm_addr_t wasm_addr",
            "uint8_t* buffer",
            "uint32_t size"
          ],
          "return_type": "uint32_t",
          "logic": "Retrieves bytes from the WASM module at given address."
        },
        {
          "name": "AddBreakpoint",
          "parameters": [
            "uint32_t wasm_module_id",
            "uint32_t offset"
          ],
          "return_type": "bool",
          "logic": "Adds a breakpoint to a specific WASM module at a given offset."
        },
        {
          "name": "RemoveBreakpoint",
          "parameters": [
            "uint32_t wasm_module_id",
            "uint32_t offset"
          ],
          "return_type": "bool",
          "logic": "Removes a breakpoint from a specific WASM module at a given offset."
        },
        {
          "name": "GetWasmCallStack",
          "parameters": [],
          "return_type": "std::vector<wasm_addr_t>",
          "logic": "Retrieves the current WASM call stack."
        },
        {
          "name": "AddIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Adds a V8 isolate to the GDB server, creating a DebugDelegate for it."
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Removes a V8 isolate from the GDB server."
        },
        {
          "name": "Suspend",
          "parameters": [],
          "return_type": "void",
          "logic": "Suspends the execution of the V8 isolate."
        },
        {
          "name": "PrepareStep",
          "parameters": [],
          "return_type": "void",
          "logic": "Prepares for a step operation in the debugger."
        },
        {
          "name": "AddWasmModule",
          "parameters": [
            "uint32_t module_id",
            "Local<debug::WasmScript> wasm_script"
          ],
          "return_type": "void",
          "logic": "Adds a WASM module to the GDB server's list of modules."
        },
        {
          "name": "GetTarget",
          "parameters": [],
          "return_type": "Target&",
          "logic": "Returns a reference to the Target object managed by the GdbServerThread."
        },
        {
          "name": "RunSyncTask",
          "parameters": [
            "Functor&& callback"
          ],
          "return_type": "auto",
          "logic": "Runs a synchronous task on the TaskRunner, blocking until the task completes."
        }
      ]
    },
    {
      "name": "DebugDelegate",
      "properties": [
        "isolate_",
        "id_",
        "gdb_server_"
      ],
      "methods": [
        {
          "name": "DebugDelegate",
          "parameters": [
            "Isolate* isolate",
            "GdbServer* gdb_server"
          ],
          "return_type": "DebugDelegate",
          "logic": "Constructor for the DebugDelegate class, registering the delegate with the V8 isolate."
        },
        {
          "name": "~DebugDelegate",
          "parameters": [],
          "return_type": "DebugDelegate",
          "logic": "Destructor for the DebugDelegate class, deregistering the delegate from the V8 isolate."
        },
        {
          "name": "ScriptCompiled",
          "parameters": [
            "Local<debug::Script> script",
            "bool is_live_edited",
            "bool has_compile_error"
          ],
          "return_type": "void",
          "logic": "Called when a script is compiled, adding WASM modules to the GDB server if necessary."
        },
        {
          "name": "BreakProgramRequested",
          "parameters": [
            "Local<v8::Context> paused_context",
            "const std::vector<debug::BreakpointId>& inspector_break_points_hit",
            "v8::debug::BreakReasons break_reasons"
          ],
          "return_type": "void",
          "logic": "Called when the program is paused due to a breakpoint or other event."
        },
        {
          "name": "ExceptionThrown",
          "parameters": [
            "Local<v8::Context> paused_context",
            "Local<Value> exception",
            "Local<Value> promise",
            "bool is_uncaught",
            "debug::ExceptionType exception_type"
          ],
          "return_type": "void",
          "logic": "Called when an exception is thrown in the V8 isolate."
        },
        {
          "name": "IsFunctionBlackboxed",
          "parameters": [
            "Local<debug::Script> script",
            "const debug::Location& start",
            "const debug::Location& end"
          ],
          "return_type": "bool",
          "logic": "Determines if a function is blackboxed (ignored by the debugger)."
        }
      ]
    },
    {
      "name": "WasmModuleInfo",
      "properties": [
        "module_id",
        "module_name"
      ],
      "methods": []
    }
  ],
  "functions": [],
  "enums": []
}