{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug-property-iterator.cc",
  "imports": [
    "src/debug/debug-property-iterator.h",
    "src/api/api-inl.h",
    "src/base/flags.h",
    "src/objects/js-array-buffer-inl.h",
    "src/objects/keys.h",
    "src/objects/property-descriptor.h",
    "src/objects/property-details.h"
  ],
  "classes": [
    {
      "name": "DebugPropertyIterator",
      "properties": [
        "isolate_",
        "prototype_iterator_",
        "skip_indices_",
        "current_key_index_",
        "current_keys_",
        "current_keys_length_",
        "stage_",
        "is_done_",
        "is_own_",
        "calculated_native_accessor_flags_",
        "native_accessor_flags_"
      ],
      "methods": [
        {
          "name": "Create",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSReceiver> receiver",
            "bool skip_indices"
          ],
          "return_type": "std::unique_ptr<DebugPropertyIterator>",
          "logic": "Creates a DebugPropertyIterator instance. It handles JSProxy objects by advancing to the prototype. It also fills the initial set of keys for the current prototype. Returns nullptr if it fails to construct the iterator properly."
        },
        {
          "name": "DebugPropertyIterator",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSReceiver> receiver",
            "bool skip_indices"
          ],
          "return_type": "void",
          "logic": "Constructor for DebugPropertyIterator. Initializes the iterator with the given isolate, receiver, and skip_indices flag.  Sets up the PrototypeIterator."
        },
        {
          "name": "Done",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the iterator is done."
        },
        {
          "name": "AdvanceToPrototype",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the iterator to the next prototype in the prototype chain. Updates the stage to kExoticIndices and advances the PrototypeIterator, also setting is_done_ if the prototype is null."
        },
        {
          "name": "AdvanceInternal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Advances the iterator to the next property within the current stage or moves to the next stage. It cycles through kExoticIndices, kEnumerableStrings, and kAllProperties, then advances to the next prototype. Returns false if FillKeysForCurrentPrototypeAndStage fails."
        },
        {
          "name": "is_native_accessor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines whether the current property has a native accessor (getter or setter).  Calls CalculateNativeAccessorFlags to populate native_accessor_flags_ if not already calculated."
        },
        {
          "name": "has_native_getter",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines whether the current property has a native getter. Calls CalculateNativeAccessorFlags to populate native_accessor_flags_ if not already calculated."
        },
        {
          "name": "has_native_setter",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines whether the current property has a native setter. Calls CalculateNativeAccessorFlags to populate native_accessor_flags_ if not already calculated."
        },
        {
          "name": "raw_name",
          "parameters": [],
          "return_type": "DirectHandle<Name>",
          "logic": "Returns the raw Name handle of the current property. If it's in the kExoticIndices stage, it returns a string representation of the index."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "v8::Local<v8::Name>",
          "logic": "Returns the v8::Local<v8::Name> of the current property by converting the raw name to a local."
        },
        {
          "name": "attributes",
          "parameters": [],
          "return_type": "v8::Maybe<v8::PropertyAttribute>",
          "logic": "Retrieves the property attributes for the current property. It calls JSReceiver::GetPropertyAttributes to get the attributes and handles potential errors where the embedder reports inconsistent property information. "
        },
        {
          "name": "descriptor",
          "parameters": [],
          "return_type": "v8::Maybe<v8::debug::PropertyDescriptor>",
          "logic": "Retrieves the property descriptor for the current property. It calls JSReceiver::GetOwnPropertyDescriptor and constructs a PropertyDescriptor object based on the result. Handles cases where the property does not exist on the object."
        },
        {
          "name": "is_own",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the current property is an own property of the current object."
        },
        {
          "name": "is_array_index",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the current property is an array index."
        },
        {
          "name": "FillKeysForCurrentPrototypeAndStage",
          "parameters": [],
          "return_type": "bool",
          "logic": "Fills the 'current_keys_' FixedArray with the keys for the current prototype and stage. Handles the different stages (kExoticIndices, kEnumerableStrings, kAllProperties) and applies appropriate filters.  Returns false if KeyAccumulator fails."
        },
        {
          "name": "should_move_to_next_stage",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the iterator should move to the next stage. It returns true if the iterator is not done and the current key index has reached the end of the current keys."
        },
        {
          "name": "CalculateNativeAccessorFlags",
          "parameters": [],
          "return_type": "void",
          "logic": "Calculates and caches the native accessor flags (whether the property has a native getter or setter). It uses the GetNativeAccessorDescriptorInternal function to determine the flags."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetNativeAccessorDescriptorInternal",
      "parameters": [
        "DirectHandle<JSReceiver> object",
        "DirectHandle<Name> name"
      ],
      "return_type": "base::Flags<debug::NativeAccessorType, int>",
      "logic": "Internal helper function to get the native accessor descriptor flags for a property. It uses LookupIterator to find the property and checks if it's an accessor. If it's an AccessorInfo, it determines if it has a getter and/or setter and returns the corresponding flags."
    }
  ]
}