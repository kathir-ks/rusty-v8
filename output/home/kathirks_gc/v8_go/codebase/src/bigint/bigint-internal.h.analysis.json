{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/bigint/bigint-internal.h",
  "imports": [
    "<memory>",
    "src/bigint/bigint.h"
  ],
  "classes": [
    {
      "name": "ProcessorImpl",
      "properties": [
        "work_estimate_",
        "status_",
        "platform_"
      ],
      "methods": [
        {
          "name": "ProcessorImpl",
          "parameters": [
            "Platform* platform"
          ],
          "return_type": "explicit ProcessorImpl",
          "logic": "Constructor for ProcessorImpl, takes a Platform pointer as input."
        },
        {
          "name": "~ProcessorImpl",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for ProcessorImpl."
        },
        {
          "name": "get_and_clear_status",
          "parameters": [],
          "return_type": "Status",
          "logic": "Gets and clears the status of the processor. Returns the current status."
        },
        {
          "name": "Multiply",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y"
          ],
          "return_type": "void",
          "logic": "Multiplies two BigInt digits arrays X and Y, storing the result in Z."
        },
        {
          "name": "MultiplySingle",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "digit_t y"
          ],
          "return_type": "void",
          "logic": "Multiplies a BigInt digits array X by a single digit y, storing the result in Z."
        },
        {
          "name": "MultiplySchoolbook",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y"
          ],
          "return_type": "void",
          "logic": "Multiplies two BigInt digits arrays X and Y using the schoolbook multiplication algorithm, storing the result in Z."
        },
        {
          "name": "MultiplyKaratsuba",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y"
          ],
          "return_type": "void",
          "logic": "Multiplies two BigInt digits arrays X and Y using the Karatsuba multiplication algorithm, storing the result in Z."
        },
        {
          "name": "KaratsubaStart",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y",
            "RWDigits scratch",
            "int k"
          ],
          "return_type": "void",
          "logic": "Initiates Karatsuba Multiplication. Takes Z, X, Y, scratch and k as inputs."
        },
        {
          "name": "KaratsubaChunk",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y",
            "RWDigits scratch"
          ],
          "return_type": "void",
          "logic": "Performs a chunk of Karatsuba multiplication."
        },
        {
          "name": "KaratsubaMain",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y",
            "RWDigits scratch",
            "int n"
          ],
          "return_type": "void",
          "logic": "Main routine for Karatsuba Multiplication. Takes Z, X, Y, scratch and the size n of chunks as inputs."
        },
        {
          "name": "Divide",
          "parameters": [
            "RWDigits Q",
            "Digits A",
            "Digits B"
          ],
          "return_type": "void",
          "logic": "Divides BigInt A by BigInt B, storing the quotient in Q."
        },
        {
          "name": "DivideSingle",
          "parameters": [
            "RWDigits Q",
            "digit_t* remainder",
            "Digits A",
            "digit_t b"
          ],
          "return_type": "void",
          "logic": "Divides a BigInt digits array A by a single digit b, storing the quotient in Q and the remainder in *remainder."
        },
        {
          "name": "DivideSchoolbook",
          "parameters": [
            "RWDigits Q",
            "RWDigits R",
            "Digits A",
            "Digits B"
          ],
          "return_type": "void",
          "logic": "Divides BigInt A by BigInt B using the schoolbook division algorithm, storing the quotient in Q and the remainder in R."
        },
        {
          "name": "DivideBurnikelZiegler",
          "parameters": [
            "RWDigits Q",
            "RWDigits R",
            "Digits A",
            "Digits B"
          ],
          "return_type": "void",
          "logic": "Divides BigInt A by BigInt B using the Burnikel-Ziegler division algorithm, storing the quotient in Q and the remainder in R."
        },
        {
          "name": "Modulo",
          "parameters": [
            "RWDigits R",
            "Digits A",
            "Digits B"
          ],
          "return_type": "void",
          "logic": "Calculates the modulo of BigInt A by BigInt B, storing the remainder in R."
        },
        {
          "name": "MultiplyToomCook",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y"
          ],
          "return_type": "void",
          "logic": "Multiplies two BigInt digits arrays X and Y using the Toom-Cook multiplication algorithm, storing the result in Z.  (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "Toom3Main",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y"
          ],
          "return_type": "void",
          "logic": "Main routine for Toom3 Multiplication."
        },
        {
          "name": "MultiplyFFT",
          "parameters": [
            "RWDigits Z",
            "Digits X",
            "Digits Y"
          ],
          "return_type": "void",
          "logic": "Multiplies two BigInt digits arrays X and Y using the FFT multiplication algorithm, storing the result in Z. (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "DivideBarrett",
          "parameters": [
            "RWDigits Q",
            "RWDigits R",
            "Digits A",
            "Digits B"
          ],
          "return_type": "void",
          "logic": "Divides BigInt A by BigInt B using the Barrett reduction algorithm, storing the quotient in Q and the remainder in R. (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "DivideBarrett",
          "parameters": [
            "RWDigits Q",
            "RWDigits R",
            "Digits A",
            "Digits B",
            "Digits I",
            "RWDigits scratch"
          ],
          "return_type": "void",
          "logic": "Divides BigInt A by BigInt B using the Barrett reduction algorithm, storing the quotient in Q and the remainder in R.  Uses a precomputed inverse I and scratch space. (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "Invert",
          "parameters": [
            "RWDigits Z",
            "Digits V",
            "RWDigits scratch"
          ],
          "return_type": "void",
          "logic": "Calculates the inverse of V, storing the result in Z, using scratch space. (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "InvertBasecase",
          "parameters": [
            "RWDigits Z",
            "Digits V",
            "RWDigits scratch"
          ],
          "return_type": "void",
          "logic": "Calculates the inverse of V, storing the result in Z, using scratch space, via a basecase method. (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "InvertNewton",
          "parameters": [
            "RWDigits Z",
            "Digits V",
            "RWDigits scratch"
          ],
          "return_type": "void",
          "logic": "Calculates the inverse of V, storing the result in Z, using scratch space, via Newton's method. (Only available if V8_ADVANCED_BIGINT_ALGORITHMS is defined)."
        },
        {
          "name": "ToString",
          "parameters": [
            "char* out",
            "uint32_t* out_length",
            "Digits X",
            "int radix",
            "bool sign"
          ],
          "return_type": "void",
          "logic": "Converts a BigInt digits array X to a string representation in the given radix, storing the result in out. Updates the length of the output string in out_length."
        },
        {
          "name": "ToStringImpl",
          "parameters": [
            "char* out",
            "uint32_t* out_length",
            "Digits X",
            "int radix",
            "bool sign",
            "bool use_fast_algorithm"
          ],
          "return_type": "void",
          "logic": "Implementation of ToString with an option to use the fast algorithm"
        },
        {
          "name": "FromString",
          "parameters": [
            "RWDigits Z",
            "FromStringAccumulator* accumulator"
          ],
          "return_type": "void",
          "logic": "Converts a string to a BigInt digits array, storing the result in Z."
        },
        {
          "name": "FromStringClassic",
          "parameters": [
            "RWDigits Z",
            "FromStringAccumulator* accumulator"
          ],
          "return_type": "void",
          "logic": "Converts a string to a BigInt digits array, storing the result in Z, using the classic method."
        },
        {
          "name": "FromStringLarge",
          "parameters": [
            "RWDigits Z",
            "FromStringAccumulator* accumulator"
          ],
          "return_type": "void",
          "logic": "Converts a string to a BigInt digits array, storing the result in Z, using the large method."
        },
        {
          "name": "FromStringBasePowerOfTwo",
          "parameters": [
            "RWDigits Z",
            "FromStringAccumulator* accumulator"
          ],
          "return_type": "void",
          "logic": "Converts a string with a base that is a power of two to a BigInt digits array, storing the result in Z."
        },
        {
          "name": "should_terminate",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the operation should be terminated due to an interrupt request."
        },
        {
          "name": "AddWorkEstimate",
          "parameters": [
            "uintptr_t estimate"
          ],
          "return_type": "void",
          "logic": "Adds to the work estimate.  If the estimate reaches a threshold, checks for an interrupt request."
        }
      ]
    },
    {
      "name": "Storage",
      "properties": [
        "ptr_"
      ],
      "methods": [
        {
          "name": "Storage",
          "parameters": [
            "int count"
          ],
          "return_type": "explicit Storage",
          "logic": "Constructor for Storage. Allocates storage for a Digits array of the given count."
        },
        {
          "name": "get",
          "parameters": [],
          "return_type": "digit_t*",
          "logic": "Returns a pointer to the allocated digit storage."
        }
      ]
    },
    {
      "name": "ScratchDigits",
      "properties": [
        "storage_"
      ],
      "methods": [
        {
          "name": "ScratchDigits",
          "parameters": [
            "int len"
          ],
          "return_type": "explicit ScratchDigits",
          "logic": "Constructor for ScratchDigits. Allocates scratch space for writable Digits of the given length."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DivideBarrettScratchSpace",
      "parameters": [
        "int n"
      ],
      "return_type": "int",
      "logic": "Calculates the scratch space needed for Barrett division based on the size 'n' of the BigInt."
    },
    {
      "name": "InvertNewtonScratchSpace",
      "parameters": [
        "int n"
      ],
      "return_type": "int",
      "logic": "Calculates the scratch space needed for Newton inversion based on the size 'n' of the BigInt."
    },
    {
      "name": "InvertScratchSpace",
      "parameters": [
        "int n"
      ],
      "return_type": "int",
      "logic": "Calculates the scratch space needed for inversion, choosing between Newton's method and base case depending on size."
    }
  ]
}