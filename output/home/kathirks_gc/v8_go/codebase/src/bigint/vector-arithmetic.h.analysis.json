{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/bigint/vector-arithmetic.h",
  "imports": [
    "src/bigint/bigint.h",
    "src/bigint/digit-arithmetic.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "AddAndReturnOverflow",
      "parameters": [
        "RWDigits Z",
        "Digits X"
      ],
      "return_type": "digit_t",
      "logic": "Adds the digits in vector X to the digits in vector Z. Returns the carry on overflow (if any)."
    },
    {
      "name": "SubAndReturnBorrow",
      "parameters": [
        "RWDigits Z",
        "Digits X"
      ],
      "return_type": "digit_t",
      "logic": "Subtracts the digits in vector X from the digits in vector Z. Returns the borrow on overflow (if any)."
    },
    {
      "name": "Add",
      "parameters": [
        "RWDigits X",
        "digit_t y"
      ],
      "return_type": "void",
      "logic": "Adds a single digit `y` to the digit vector `X`.  Handles carry propagation."
    },
    {
      "name": "Subtract",
      "parameters": [
        "RWDigits X",
        "digit_t y"
      ],
      "return_type": "void",
      "logic": "Subtracts a single digit `y` from the digit vector `X`. Handles borrow propagation."
    },
    {
      "name": "AddAndReturnCarry",
      "parameters": [
        "RWDigits Z",
        "Digits X",
        "Digits Y"
      ],
      "return_type": "digit_t",
      "logic": "Adds the digits in vectors X and Y, storing the result in vector Z. Returns the final carry."
    },
    {
      "name": "SubtractAndReturnBorrow",
      "parameters": [
        "RWDigits Z",
        "Digits X",
        "Digits Y"
      ],
      "return_type": "digit_t",
      "logic": "Subtracts the digits in vector Y from the digits in vector X, storing the result in vector Z. Returns the final borrow."
    },
    {
      "name": "IsDigitNormalized",
      "parameters": [
        "Digits X"
      ],
      "return_type": "bool",
      "logic": "Checks if the digit vector `X` is normalized, meaning either it's empty or its most significant digit is not zero."
    },
    {
      "name": "IsBitNormalized",
      "parameters": [
        "Digits X"
      ],
      "return_type": "bool",
      "logic": "Checks if the digit vector `X` is bit-normalized, meaning its most significant digit's most significant bit is set to 1."
    },
    {
      "name": "GreaterThanOrEqual",
      "parameters": [
        "Digits A",
        "Digits B"
      ],
      "return_type": "bool",
      "logic": "Compares two digit vectors `A` and `B` and returns true if A is greater than or equal to B."
    },
    {
      "name": "BitLength",
      "parameters": [
        "Digits X"
      ],
      "return_type": "int",
      "logic": "Calculates the bit length of the digit vector `X`."
    }
  ]
}