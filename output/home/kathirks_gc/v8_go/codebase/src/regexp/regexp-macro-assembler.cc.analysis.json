{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-macro-assembler.cc",
  "imports": [
    "src/regexp/regexp-macro-assembler.h",
    "src/codegen/assembler.h",
    "src/codegen/label.h",
    "src/execution/isolate-inl.h",
    "src/execution/pointer-authentication.h",
    "src/execution/simulator.h",
    "src/regexp/regexp-stack.h",
    "src/regexp/special-case.h",
    "src/strings/unicode-inl.h",
    "unicode/uchar.h",
    "unicode/unistr.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssembler",
      "properties": [
        "slow_safe_compiler_",
        "backtrack_limit_",
        "global_mode_",
        "isolate_",
        "zone_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssembler",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes member variables such as slow_safe_compiler_, backtrack_limit_, global_mode_, isolate_, and zone_."
        },
        {
          "name": "has_backtrack_limit",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the backtrack limit is set (i.e., not JSRegExp::kNoBacktrackLimit)."
        },
        {
          "name": "CaseInsensitiveCompareNonUnicode",
          "parameters": [
            "Address byte_offset1",
            "Address byte_offset2",
            "size_t byte_length",
            "Isolate* isolate"
          ],
          "return_type": "int",
          "logic": "Performs case-insensitive comparison of two strings, assuming they are not Unicode. Uses RegExpCaseFolding::Canonicalize for case folding if V8_INTL_SUPPORT is defined. Otherwise, calls CaseInsensitiveCompareUnicode."
        },
        {
          "name": "CaseInsensitiveCompareUnicode",
          "parameters": [
            "Address byte_offset1",
            "Address byte_offset2",
            "size_t byte_length",
            "Isolate* isolate"
          ],
          "return_type": "int",
          "logic": "Performs case-insensitive comparison of two strings, assuming they are Unicode. Uses icu::UnicodeString::caseCompare if V8_INTL_SUPPORT is defined.  Otherwise uses unibrow::Mapping for canonicalization."
        },
        {
          "name": "CheckNotInSurrogatePair",
          "parameters": [
            "int cp_offset",
            "Label* on_failure"
          ],
          "return_type": "void",
          "logic": "Checks that the character at the given offset is not part of a surrogate pair. Jumps to on_failure if it is."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if a given character position is within the bounds of the input string.  Jumps to `on_outside_input` if it is out of bounds."
        },
        {
          "name": "LoadCurrentCharacter",
          "parameters": [
            "int cp_offset",
            "Label* on_end_of_input",
            "bool check_bounds",
            "int characters",
            "int eats_at_least"
          ],
          "return_type": "void",
          "logic": "Loads a character from the input string at a given offset. Performs bounds checking and jumps to on_end_of_input if the end of the input is reached."
        },
        {
          "name": "LoadCurrentCharacter",
          "parameters": [
            "int cp_offset",
            "Label* on_end_of_input",
            "bool check_bounds",
            "int characters"
          ],
          "return_type": "void",
          "logic": "Overload of LoadCurrentCharacter. Loads a character from the input string at a given offset. Performs bounds checking and jumps to on_end_of_input if the end of the input is reached."
        }
      ]
    },
    {
      "name": "NativeRegExpMacroAssembler",
      "properties": [
        "range_array_cache_"
      ],
      "methods": [
        {
          "name": "LoadCurrentCharacterImpl",
          "parameters": [
            "int cp_offset",
            "Label* on_end_of_input",
            "bool check_bounds",
            "int characters",
            "int eats_at_least"
          ],
          "return_type": "void",
          "logic": "Implementation of the LoadCurrentCharacter method."
        },
        {
          "name": "CanReadUnaligned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks whether unaligned memory accesses are enabled for regular expressions."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Isolate* isolate",
            "int start_index",
            "RegExp::CallOrigin call_origin",
            "Address* return_address",
            "Tagged<InstructionStream> re_code",
            "Address* subject",
            "const uint8_t** input_start",
            "const uint8_t** input_end",
            "uintptr_t gap"
          ],
          "return_type": "int",
          "logic": "Checks the state of the stack guard to determine if a stack overflow or interrupt has occurred during RegExp execution. Returns a sentinel value indicating the outcome."
        },
        {
          "name": "Match",
          "parameters": [
            "DirectHandle<IrRegExpData> regexp_data",
            "DirectHandle<String> subject",
            "int* offsets_vector",
            "int offsets_vector_length",
            "int previous_index",
            "Isolate* isolate"
          ],
          "return_type": "int",
          "logic": "Performs the actual regular expression matching. Prepares the input string, sets up the execution environment, and calls the generated RegExp code. Returns the number of successful matches or a sentinel value."
        },
        {
          "name": "ExecuteForTesting",
          "parameters": [
            "Tagged<String> input",
            "int start_offset",
            "const uint8_t* input_start",
            "const uint8_t* input_end",
            "int* output",
            "int output_size",
            "Isolate* isolate",
            "Tagged<JSRegExp> regexp"
          ],
          "return_type": "int",
          "logic": "Executes the regular expression for testing purposes.  It takes a JSRegExp object as input."
        },
        {
          "name": "Execute",
          "parameters": [
            "Tagged<String>\n        input",
            "int start_offset",
            "const uint8_t* input_start",
            "const uint8_t* input_end",
            "int* output",
            "int output_size",
            "Isolate* isolate",
            "Tagged<IrRegExpData> regexp_data"
          ],
          "return_type": "int",
          "logic": "Executes the compiled regexp code. This is the core function that calls the generated code to perform the actual matching."
        },
        {
          "name": "GrowStack",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Address",
          "logic": "Grows the RegExp stack.  Doubles the stack size and returns the new stack pointer."
        },
        {
          "name": "GetOrAddRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "Handle<ByteArray>",
          "logic": "Retrieves a FixedUInt16Array from the range array cache, or creates a new one and adds it to the cache."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Hash",
      "parameters": [
        "const ZoneList<CharacterRange>* ranges"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates a hash value for a list of character ranges."
    },
    {
      "name": "MaskEndOfRangeMarker",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "constexpr base::uc32",
      "logic": "Masks the end of range marker value."
    },
    {
      "name": "RangeArrayLengthFor",
      "parameters": [
        "const ZoneList<CharacterRange>* ranges"
      ],
      "return_type": "int",
      "logic": "Calculates the required length for a range array based on the character ranges."
    },
    {
      "name": "Equals",
      "parameters": [
        "const ZoneList<CharacterRange>* lhs",
        "const DirectHandle<FixedUInt16Array>& rhs"
      ],
      "return_type": "bool",
      "logic": "Compares a list of character ranges with a FixedUInt16Array for equality."
    },
    {
      "name": "MakeRangeArray",
      "parameters": [
        "Isolate* isolate",
        "const ZoneList<CharacterRange>* ranges"
      ],
      "return_type": "Handle<FixedUInt16Array>",
      "logic": "Creates a FixedUInt16Array from a list of character ranges."
    },
    {
      "name": "IsCharacterInRangeArray",
      "parameters": [
        "uint32_t current_char",
        "Address raw_byte_array"
      ],
      "return_type": "uint32_t",
      "logic": "Checks if a character is within the ranges specified in a FixedUInt16Array. Uses binary search."
    }
  ]
}