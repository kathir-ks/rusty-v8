{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/mips64/regexp-macro-assembler-mips64.cc",
  "imports": [
    "src/regexp/mips64/regexp-macro-assembler-mips64.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/mips64/assembler-mips64-inl.h",
    "src/heap/factory.h",
    "src/logging/log.h",
    "src/objects/code-inl.h",
    "src/regexp/regexp-stack.h",
    "src/snapshot/embedded/embedded-data-inl.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerMIPS",
      "properties": [
        "masm_",
        "no_root_array_scope_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "internal_failure_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "fallback_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerMIPS",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor for RegExpMacroAssemblerMIPS. Initializes member variables, creates a MacroAssembler, and sets up basic labels for entry, failure, and start points."
        },
        {
          "name": "~RegExpMacroAssemblerMIPS",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for RegExpMacroAssemblerMIPS. Unuses the labels to prevent memory leaks if the assembler is discarded without generating code."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack limit slack slots."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current input position by a given number of characters."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value in the given register by a given amount. The register holds a character position."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops a code offset from the backtrack stack, adds it to the code pointer, and jumps to that location. Implements the backtracking mechanism for regular expression matching. Checks preemption and backtrack limits before performing the backtrack."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds the given label to the current assembly position."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to the given character. If equal, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than the given limit. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with a given offset is at the start of the input string. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with a given offset is not at the start of the input string. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than the given limit. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks for a greedy loop condition.  If the current input offset is equal to the value at the top of the backtrack stack, pops the backtrack stack and branches to the given label, otherwise backtracks."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the substring captured in a specified register matches the input at the current position, ignoring case. If there is no match, branches to the given label; otherwise continues."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the substring captured in a specified register matches the input at the current position. If there is no match, branches to the given label; otherwise continues."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to the given character. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after applying a bitwise AND with a mask is equal to the given character. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after applying a bitwise AND with a mask is not equal to the given character. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Subtracts minus from the current character, applies a bitwise AND with mask, and checks if the result is not equal to c. If so, branches to on_not_equal; otherwise backtracks."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within the given range. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within the given range. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a C function to check if the current character is within a range specified by an array of character ranges."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Calls CallIsCharacterInRangeArray and branches to on_in_range if the character is in range. Returns true."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Calls CallIsCharacterInRangeArray and branches to on_not_in_range if the character is not in range. Returns true."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit is set in the given byte array table at the index corresponding to the current character. If so, branches to the given label; otherwise backtracks."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips forward in the input until a bit is set in the provided byte array table.  The parameters table and nibble_table appear unused in code."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a specific character class (e.g., whitespace, digit). If there is no match, branches to the given label. Returns true if the character class is handled; false otherwise."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the return value to FAILURE and jumps to the exit label, indicating a failed match."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the current RegExp stack pointer from memory into the given destination register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the value of the given source register into the current RegExp stack pointer in memory."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Calculates and stores the RegExp stack base pointer relative to the provided stack_pointer into the frame."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Loads the RegExp stack base pointer from the frame, adds it to the stored stack pointer value to get the actual current stack pointer, and updates the in-memory stack pointer value."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Generates the machine code for the regular expression. Includes entry code, exit code, backtrack code, and preempt code. Returns a handle to the generated code object."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Unconditionally jumps to the given label. If the label is null, calls Backtrack."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Branches to the given label if the value in the specified register is greater than or equal to the given comparand; otherwise backtracks."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Branches to the given label if the value in the specified register is less than the given comparand; otherwise backtracks."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Branches to the given label if the value in the specified register is equal to the current input offset; otherwise backtracks."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "RegExpMacroAssembler::IrregexpImplementation",
          "logic": "Returns the implementation type for the assembler."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current input position from the backtrack stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack and stores it in the specified register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes the address of the given label onto the backtrack stack. The label address needs to be adjusted to include the instruction stream header size and to remove the heap object tag."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current input position onto the backtrack stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value in the specified register onto the backtrack stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current input position from the specified register."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the current stack pointer to a given register, after subtracting the memory_top_address value."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the stack pointer offset from a register, adds back the memory_top_address value, and sets the backtrack_stackpointer to that location."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current input position to a given offset from the end of the input string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the specified register to the given integer value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Jumps to the success label. Returns whether the regular expression is global."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current input position (with a given offset) to the specified register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears the specified registers by setting them to the value of kStringStartMinusOneOffset."
        },
        {
          "name": "CanReadUnaligned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns false because the MIPS architecture does not support unaligned memory access."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Register scratch",
            "Operand extra_space"
          ],
          "return_type": "void",
          "logic": "Calls the CheckStackGuardState runtime function to check for stack overflows.  It aligns the stack, calls the runtime function, and restores the stack."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int64_t",
          "logic": "A static method. Calls the NativeRegExpMacroAssembler::CheckStackGuardState for actual stack check."
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "MemOperand",
          "logic": "Calculates the memory operand for accessing the specified register on the stack."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if the current position is within the bounds of the input string. If not, branches to the given label; otherwise continues."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Label* to",
            "Condition condition",
            "Register rs",
            "const Operand& rt"
          ],
          "return_type": "void",
          "logic": "Branches to the given label based on the specified condition. If the label is null, calls Backtrack instead."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to",
            "Condition cond",
            "Register rs",
            "const Operand& rt"
          ],
          "return_type": "void",
          "logic": "Calls the function at the given label based on the specified condition."
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Returns from a safe call."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* name"
          ],
          "return_type": "void",
          "logic": "Defines a safe call target."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes register value on to the backtrack stack."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops value from the backtrack stack into register."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from Irregexp code."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for preemption by comparing the stack pointer to the stack limit and calling the preempt check if necessary."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks if the backtrack stack pointer is within the stack limit. If not, calls the stack overflow handler."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts in debug builds that the current stack pointer is within stack limit minus slack size."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int characters"
          ],
          "return_type": "void",
          "logic": "Loads the current character without checking the bounds."
        }
      ]
    }
  ],
  "functions": []
}