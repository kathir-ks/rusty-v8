{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-ast.cc",
  "imports": [
    "src/regexp/regexp-ast.h",
    "src/utils/ostreams.h",
    "src/zone/zone-list-inl.h"
  ],
  "classes": [
    {
      "name": "RegExpTree",
      "properties": [
        "min_match_",
        "max_match_"
      ],
      "methods": [
        {
          "name": "AsName",
          "parameters": [],
          "return_type": "RegExp##Name*",
          "logic": "Returns nullptr. Implemented for each RegExpTree subclass via macro."
        },
        {
          "name": "IsName",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns false. Implemented for each RegExpTree subclass via macro."
        },
        {
          "name": "CaptureRegisters",
          "parameters": [],
          "return_type": "Interval",
          "logic": "Abstract method to determine the range of registers captured by the subtree. Returns an empty interval by default and is overridden in subclasses."
        },
        {
          "name": "IsAnchoredAtStart",
          "parameters": [],
          "return_type": "bool",
          "logic": "Abstract method to check if the regexp tree is anchored at the start. Returns false by default and is overridden in subclasses."
        },
        {
          "name": "IsAnchoredAtEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Abstract method to check if the regexp tree is anchored at the end. Returns false by default and is overridden in subclasses."
        },
        {
          "name": "Print",
          "parameters": [
            "std::ostream& os",
            "Zone* zone"
          ],
          "return_type": "std::ostream&",
          "logic": "Prints the regexp tree to the output stream using the RegExpUnparser class."
        }
      ]
    },
    {
      "name": "RegExpAlternative",
      "properties": [
        "nodes_"
      ],
      "methods": [
        {
          "name": "CaptureRegisters",
          "parameters": [],
          "return_type": "Interval",
          "logic": "Returns the union of the capture registers of all child nodes."
        },
        {
          "name": "IsAnchoredAtStart",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the alternative is anchored at the start by iterating through the nodes and checking if any node is anchored at the start or if a non-zero max_match is encountered before an anchored node."
        },
        {
          "name": "IsAnchoredAtEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the alternative is anchored at the end by iterating backwards through the nodes and checking if any node is anchored at the end or if a non-zero max_match is encountered before an anchored node."
        },
        {
          "name": "RegExpAlternative",
          "parameters": [
            "ZoneList<RegExpTree*>* nodes"
          ],
          "return_type": "void",
          "logic": "Constructor for RegExpAlternative. Initializes min_match_ and max_match_ by summing the min_match and max_match of the child nodes, respectively."
        }
      ]
    },
    {
      "name": "RegExpDisjunction",
      "properties": [
        "alternatives_"
      ],
      "methods": [
        {
          "name": "CaptureRegisters",
          "parameters": [],
          "return_type": "Interval",
          "logic": "Returns the union of the capture registers of all alternatives."
        },
        {
          "name": "IsAnchoredAtStart",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all alternatives are anchored at the start."
        },
        {
          "name": "IsAnchoredAtEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all alternatives are anchored at the end."
        },
        {
          "name": "RegExpDisjunction",
          "parameters": [
            "ZoneList<RegExpTree*>* alternatives"
          ],
          "return_type": "void",
          "logic": "Constructor for RegExpDisjunction. Initializes min_match_ and max_match_ to the minimum and maximum of the min_match and max_match values of the alternatives, respectively."
        }
      ]
    },
    {
      "name": "RegExpLookaround",
      "properties": [],
      "methods": [
        {
          "name": "CaptureRegisters",
          "parameters": [],
          "return_type": "Interval",
          "logic": "Returns the capture registers of the body."
        },
        {
          "name": "IsAnchoredAtStart",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the lookaround is a positive lookahead and the body is anchored at the start."
        }
      ]
    },
    {
      "name": "RegExpCapture",
      "properties": [],
      "methods": [
        {
          "name": "CaptureRegisters",
          "parameters": [],
          "return_type": "Interval",
          "logic": "Returns the union of the capture registers of the capture group itself and the body."
        },
        {
          "name": "IsAnchoredAtStart",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the body is anchored at the start."
        },
        {
          "name": "IsAnchoredAtEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the body is anchored at the end."
        }
      ]
    },
    {
      "name": "RegExpQuantifier",
      "properties": [],
      "methods": [
        {
          "name": "CaptureRegisters",
          "parameters": [],
          "return_type": "Interval",
          "logic": "Returns the capture registers of the body."
        }
      ]
    },
    {
      "name": "RegExpAssertion",
      "properties": [],
      "methods": [
        {
          "name": "IsAnchoredAtStart",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the assertion type is START_OF_INPUT."
        },
        {
          "name": "IsAnchoredAtEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the assertion type is END_OF_INPUT."
        }
      ]
    },
    {
      "name": "RegExpClassSetOperand",
      "properties": [
        "ranges_",
        "strings_"
      ],
      "methods": [
        {
          "name": "RegExpClassSetOperand",
          "parameters": [
            "ZoneList<CharacterRange>* ranges",
            "CharacterClassStrings* strings"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes min_match_ and max_match_ based on whether ranges or strings are present."
        }
      ]
    },
    {
      "name": "RegExpClassSetExpression",
      "properties": [
        "operation_",
        "is_negated_",
        "may_contain_strings_",
        "operands_"
      ],
      "methods": [
        {
          "name": "RegExpClassSetExpression",
          "parameters": [
            "OperationType op",
            "bool is_negated",
            "bool may_contain_strings",
            "ZoneList<RegExpTree*>* operands"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes the class with operands and sets max_match based on operands' max_match value. If negated, max_match is set to 2."
        },
        {
          "name": "Empty",
          "parameters": [
            "Zone* zone",
            "bool is_negated"
          ],
          "return_type": "RegExpClassSetExpression*",
          "logic": "Static method to create an empty RegExpClassSetExpression."
        }
      ]
    },
    {
      "name": "RegExpUnparser",
      "properties": [
        "os_",
        "zone_"
      ],
      "methods": [
        {
          "name": "RegExpUnparser",
          "parameters": [
            "std::ostream& os",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the RegExpUnparser class."
        },
        {
          "name": "VisitCharacterRange",
          "parameters": [
            "CharacterRange that"
          ],
          "return_type": "void",
          "logic": "Prints a character range to the output stream."
        },
        {
          "name": "VisitName",
          "parameters": [
            "RegExp##Name*",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Macro generated method to visit each type of RegExp node."
        },
        {
          "name": "VisitDisjunction",
          "parameters": [
            "RegExpDisjunction* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpDisjunction node."
        },
        {
          "name": "VisitAlternative",
          "parameters": [
            "RegExpAlternative* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpAlternative node."
        },
        {
          "name": "VisitClassRanges",
          "parameters": [
            "RegExpClassRanges* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpClassRanges node."
        },
        {
          "name": "VisitClassSetOperand",
          "parameters": [
            "RegExpClassSetOperand* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpClassSetOperand node."
        },
        {
          "name": "VisitClassSetExpression",
          "parameters": [
            "RegExpClassSetExpression* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpClassSetExpression node."
        },
        {
          "name": "VisitAssertion",
          "parameters": [
            "RegExpAssertion* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpAssertion node."
        },
        {
          "name": "VisitAtom",
          "parameters": [
            "RegExpAtom* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpAtom node."
        },
        {
          "name": "VisitText",
          "parameters": [
            "RegExpText* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpText node."
        },
        {
          "name": "VisitQuantifier",
          "parameters": [
            "RegExpQuantifier* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpQuantifier node."
        },
        {
          "name": "VisitCapture",
          "parameters": [
            "RegExpCapture* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpCapture node."
        },
        {
          "name": "VisitGroup",
          "parameters": [
            "RegExpGroup* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpGroup node."
        },
        {
          "name": "VisitLookaround",
          "parameters": [
            "RegExpLookaround* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpLookaround node."
        },
        {
          "name": "VisitBackReference",
          "parameters": [
            "RegExpBackReference* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpBackReference node."
        },
        {
          "name": "VisitEmpty",
          "parameters": [
            "RegExpEmpty* that",
            "void* data"
          ],
          "return_type": "void*",
          "logic": "Unparses a RegExpEmpty node."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ListCaptureRegisters",
      "parameters": [
        "ZoneList<RegExpTree*>* children"
      ],
      "return_type": "Interval",
      "logic": "Calculates the union of capture register intervals for a list of RegExpTree nodes."
    },
    {
      "name": "IncreaseBy",
      "parameters": [
        "int previous",
        "int increase"
      ],
      "return_type": "int",
      "logic": "Increases a number by a certain amount, but returns kInfinity if the result would overflow."
    }
  ]
}