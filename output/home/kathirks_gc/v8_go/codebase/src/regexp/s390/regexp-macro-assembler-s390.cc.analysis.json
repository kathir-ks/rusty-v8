{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/s390/regexp-macro-assembler-s390.cc",
  "imports": [
    "src/init/v8.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/s390/assembler-s390-inl.h",
    "src/heap/factory.h",
    "src/logging/log.h",
    "src/objects/code-inl.h",
    "src/regexp/regexp-stack.h",
    "src/regexp/s390/regexp-macro-assembler-s390.h",
    "src/snapshot/embedded/embedded-data-inl.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerS390",
      "properties": [
        "kRegExpCodeSize",
        "masm_",
        "no_root_array_scope_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "internal_failure_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerS390",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor for the RegExpMacroAssemblerS390 class. Initializes member variables, including the MacroAssembler, and sets up initial code for entry and internal failure."
        },
        {
          "name": "~RegExpMacroAssemblerS390",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the RegExpMacroAssemblerS390 class. Unuses the labels to prevent issues if the assembler is discarded without generating code."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the stack limit slack slot count from RegExpStack."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current input position by a specified number of characters, taking into account the character size (1 or 2 bytes)."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value of a register by a given offset.  Handles both small and large offsets efficiently."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Implements the backtracking logic for regular expression matching. Checks for preemption and backtrack limit, pops the next instruction offset from the backtrack stack, and jumps to it."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current assembly position."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to a given character.  Branches to on_equal if they are equal, or backtracks if not."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a limit. Branches to on_greater if true, otherwise backtracks."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if current input position is at start.  Branches to on_at_start if at start, otherwise backtracks."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if current input position is not at start.  Branches to on_not_at_start if not at start, otherwise backtracks."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a limit. Branches to on_less if true, otherwise backtracks."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks for greedy loops. Branches to on_equal if the current position is equal to the position on the backtrack stack."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if a backreference matches the current input, ignoring case. If not, it jumps to on_no_match, otherwise continues."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if a backreference matches the current input. If not, it jumps to on_no_match, otherwise continues."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to a given character.  Branches to on_not_equal if not equal, otherwise backtracks."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character ANDed with a mask is equal to a value c. Branches to on_equal if equal, otherwise backtracks."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character ANDed with a mask is not equal to a value c. Branches to on_not_equal if not equal, otherwise backtracks."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if (current_char - minus) AND mask != c. Branches to on_not_equal if not equal, otherwise backtracks."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a given range [from, to]. Branches to on_in_range if it is, otherwise backtracks."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within a given range [from, to]. Branches to on_not_in_range if it is not, otherwise backtracks."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a C function to check if the current character is within a range specified by an array of character ranges."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is in a range array by calling CallIsCharacterInRangeArray. Branches to on_in_range if it is. Returns true."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is not in a range array by calling CallIsCharacterInRangeArray. Branches to on_not_in_range if it is not. Returns true."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit is set in a table based on the current character as an index. Branches to on_bit_set if set, otherwise backtracks."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips characters until a bit is set in a table. Loads the current character with an offset and then checks the bit in the table. Repeats until the bit is set."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a special character class. Branches to on_no_match if it doesn't match the character class. Returns true if handled, false if not."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the return value to FAILURE and jumps to the exit label."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the regexp stack pointer from memory into the destination register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the value from the source register into the memory location of the regexp stack pointer."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the current regexp base pointer onto the stack."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the current regexp base pointer from the stack."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Finalizes the code generation, creates the code object, and returns a handle to it.  Includes setup of stack frame and handling different global match cases."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Unconditionally branches to the specified label. Backtracks if the label is null."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Branches to if_ge if register's value is greater than or equal to comparand."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Branches to if_lt if register's value is less than comparand."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Branches to if_eq if register's value is equal to the current input offset (current position)."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "RegExpMacroAssembler::IrregexpImplementation",
          "logic": "Returns the IrregexpImplementation type (kS390Implementation)."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current input offset from the backtrack stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack and stores it in the specified register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes the offset of the given label onto the backtrack stack. Check stack limit."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current input offset onto the backtrack stack. Check stack limit."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of the specified register onto the backtrack stack. Optionally checks the stack limit."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads current position from register."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes current stack pointer value to register."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads current stack pointer value from register."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current position to be 'by' characters from the end of the input string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified register to the given integer value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Branches to the success label. Returns true if the regular expression is global."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current input position to the specified register with an optional character offset."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears a range of registers by setting them to the initial string start position."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Register scratch",
            "Operand extra_space"
          ],
          "return_type": "void",
          "logic": "Calls the C++ function CheckStackGuardState to check for stack overflows."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int",
          "logic": "Static method that calls the NativeRegExpMacroAssembler::CheckStackGuardState function to determine if stack overflow is likely."
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "MemOperand",
          "logic": "Calculates the memory operand for a given register index based on the frame pointer and offset."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with the given character offset is outside the bounds of the input string."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Condition condition",
            "Label* to",
            "CRegister cr"
          ],
          "return_type": "void",
          "logic": "Branches to the given label based on the specified condition or backtracks if the label is null. If the condition is always (al), it directly branches or backtracks."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to",
            "Condition cond",
            "CRegister cr"
          ],
          "return_type": "void",
          "logic": "Performs a safe call to a label based on a condition. If the condition is met, it saves the return address and jumps to the label; otherwise, it skips the call."
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Returns from a safe call by restoring the return address from the stack and executing a return instruction."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* name"
          ],
          "return_type": "void",
          "logic": "Defines a safe call target label. It saves the return address to the stack so it can be restored later."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes a value from the given register onto the backtrack stack."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack into the given register."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from Irregexp code."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for preemption by comparing the stack pointer to the stack limit."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks if the backtrack stack pointer has exceeded the stack limit, indicating a stack overflow."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the stack pointer is above the stack limit minus slack, used for slow debug builds."
        },
        {
          "name": "CallCFunctionUsingStub",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function using a stub, passing arguments in registers."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int characters"
          ],
          "return_type": "void",
          "logic": "Loads the current character (or multiple characters) from memory into the current_character register without any bounds checking."
        }
      ]
    }
  ],
  "functions": []
}