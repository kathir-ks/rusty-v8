{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-macro-assembler-tracer.cc",
  "imports": [
    "src/regexp/regexp-macro-assembler-tracer.h",
    "src/objects/fixed-array-inl.h",
    "src/objects/string.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerTracer",
      "properties": [
        "assembler_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerTracer",
          "parameters": [
            "Isolate* isolate",
            "RegExpMacroAssembler* assembler"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the tracer with an isolate and the assembler to trace. Prints a message indicating the assembler implementation type."
        },
        {
          "name": "~RegExpMacroAssemblerTracer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Default implementation provided."
        },
        {
          "name": "AbortedCodeGeneration",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a message indicating code generation was aborted and calls the wrapped assembler's AbortedCodeGeneration method."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Prints a message about binding a label and calls the wrapped assembler's Bind method."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Prints a message about advancing the current position and calls the wrapped assembler's AdvanceCurrentPosition method."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking a greedy loop and calls the wrapped assembler's CheckGreedyLoop method."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a message about popping the current position and calls the wrapped assembler's PopCurrentPosition method."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a message about pushing the current position and calls the wrapped assembler's PushCurrentPosition method."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a message about backtracking and calls the wrapped assembler's Backtrack method."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Prints a message about going to a label and calls the wrapped assembler's GoTo method."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Prints a message about pushing a backtrack label and calls the wrapped assembler's PushBacktrack method."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Calls the wrapped assembler's Succeed method, prints a message about succeeding (with restart information), and returns the result."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a message about failing and calls the wrapped assembler's Fail method."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Prints a message about popping a register and calls the wrapped assembler's PopRegister method."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Prints a message about pushing a register and calls the wrapped assembler's PushRegister method."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Prints a message about advancing a register and calls the wrapped assembler's AdvanceRegister method."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Prints a message about setting the current position from the end and calls the wrapped assembler's SetCurrentPositionFromEnd method."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Prints a message about setting a register and calls the wrapped assembler's SetRegister method."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Prints a message about writing the current position to a register and calls the wrapped assembler's WriteCurrentPositionToRegister method."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Prints a message about clearing registers and calls the wrapped assembler's ClearRegisters method."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Prints a message about reading the current position from a register and calls the wrapped assembler's ReadCurrentPositionFromRegister method."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Prints a message about writing the stack pointer to a register and calls the wrapped assembler's WriteStackPointerToRegister method."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Prints a message about reading the stack pointer from a register and calls the wrapped assembler's ReadStackPointerFromRegister method."
        },
        {
          "name": "LoadCurrentCharacterImpl",
          "parameters": [
            "int cp_offset",
            "Label* on_end_of_input",
            "bool check_bounds",
            "int characters",
            "int eats_at_least"
          ],
          "return_type": "void",
          "logic": "Prints a message about loading the current character and calls the wrapped assembler's LoadCurrentCharacter method."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character is less than a limit and calls the wrapped assembler's CheckCharacterLT method."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character is greater than a limit and calls the wrapped assembler's CheckCharacterGT method."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character is equal to a given character and calls the wrapped assembler's CheckCharacter method."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current position is at the start and calls the wrapped assembler's CheckAtStart method."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current position is not at the start and calls the wrapped assembler's CheckNotAtStart method."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character is not equal to a given character and calls the wrapped assembler's CheckNotCharacter method."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character, after applying a bitwise AND with a mask, is equal to a given character and calls the wrapped assembler's CheckCharacterAfterAnd method."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character, after applying a bitwise AND with a mask, is not equal to a given character and calls the wrapped assembler's CheckNotCharacterAfterAnd method."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character minus another character after applying a bitwise AND with a mask is not equal and calls the wrapped assembler's CheckNotCharacterAfterMinusAnd method."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character is in a given range and calls the wrapped assembler's CheckCharacterInRange method."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking if the current character is not in a given range and calls the wrapped assembler's CheckCharacterNotInRange method."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Prints a message about checking if the current character is in a range array and calls the wrapped assembler's CheckCharacterInRangeArray method."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Prints a message about checking if the current character is not in a range array and calls the wrapped assembler's CheckCharacterNotInRangeArray method."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Prints a message and the bit table, then calls the wrapped assembler's CheckBitInTable method."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Prints the details and tables before calling the wrapped assembler's SkipUntilBitInTable"
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking a backreference and calls the wrapped assembler's CheckNotBackReference method."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking a backreference ignoring case and calls the wrapped assembler's CheckNotBackReferenceIgnoreCase method."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Prints a message about checking position and calls the wrapped assembler's CheckPosition method."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Prints a message about checking special character class ranges and calls the wrapped assembler's CheckSpecialClassRanges method.  Returns the result of the call."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int register_index",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Prints a message and calls the wrapped assembler's IfRegisterLT method."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int register_index",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Prints a message and calls the wrapped assembler's IfRegisterEqPos method."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int register_index",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Prints a message and calls the wrapped assembler's IfRegisterGE method."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "RegExpMacroAssembler::IrregexpImplementation",
          "logic": "Returns the underlying RegExpMacroAssembler's implementation type."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Prints a message about getting the code and calls the wrapped assembler's GetCode method. Returns the result of the call."
        }
      ]
    },
    {
      "name": "PrintablePrinter",
      "properties": [
        "character_",
        "buffer_"
      ],
      "methods": [
        {
          "name": "PrintablePrinter",
          "parameters": [
            "base::uc16 character"
          ],
          "return_type": "explicit PrintablePrinter",
          "logic": "Constructor to initialize the PrintablePrinter with the character."
        },
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Converts the character to a printable string if it's in the printable range, otherwise returns an empty string."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "LabelToInt",
      "parameters": [
        "Label* label"
      ],
      "return_type": "int",
      "logic": "Converts a Label pointer to an integer by reinterpreting its address as an integer."
    }
  ]
}