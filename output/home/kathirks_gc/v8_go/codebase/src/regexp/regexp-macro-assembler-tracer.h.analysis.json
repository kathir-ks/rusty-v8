{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-macro-assembler-tracer.h",
  "imports": [
    "src/base/strings.h",
    "src/regexp/regexp-macro-assembler.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerTracer",
      "properties": [
        "assembler_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerTracer",
          "parameters": [
            "Isolate* isolate",
            "RegExpMacroAssembler* assembler"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the tracer with an Isolate and the underlying RegExpMacroAssembler."
        },
        {
          "name": "~RegExpMacroAssemblerTracer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the tracer."
        },
        {
          "name": "AbortedCodeGeneration",
          "parameters": [],
          "return_type": "void",
          "logic": "Indicates that code generation was aborted.  Presumably logs or takes some action."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the stack limit slack slot count from the underlying assembler."
        },
        {
          "name": "CanReadUnaligned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the underlying assembler can read unaligned data."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current position in the input string by a signed amount."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value of a register by a given amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles backtracking during regex matching."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current position in the code."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character equals a given character and jumps to on_equal if true."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned and_with",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after a bitwise AND operation equals a given character and jumps to on_equal if true."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a given limit and jumps to on_greater if true."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a given limit and jumps to on_less if true."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_tos_equals_current_position"
          ],
          "return_type": "void",
          "logic": "Checks if the top of stack equals current position and jumps to on_tos_equals_current_position if true."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position is at the start of the input with an offset and jumps to on_at_start if true."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position is NOT at the start of the input with an offset and jumps to on_not_at_start if true."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input matches a previous backreference and jumps to on_no_match if there isn't a match."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input matches a previous backreference, ignoring case and jumps to on_no_match if there isn't a match."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to a given character and jumps to on_not_equal if true."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned and_with",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after a bitwise AND operation is not equal to a given character and jumps to on_not_equal if true."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 and_with",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after a subtraction and bitwise AND is not equal to a given character and jumps to on_not_equal if true."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a range and jumps to on_in_range if true."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within a range and jumps to on_not_in_range if true."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is within a range specified in a ZoneList of CharacterRange objects, and jumps to on_in_range if true. Returns true if ranges were processed; false otherwise."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is not within a range specified in a ZoneList of CharacterRange objects, and jumps to on_not_in_range if true. Returns true if ranges were processed; false otherwise."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit is set in a ByteArray and jumps to on_bit_set if true."
        },
        {
          "name": "SkipUntilBitInTableUseSimd",
          "parameters": [
            "int advance_by"
          ],
          "return_type": "bool",
          "logic": "Attempts to skip until a bit is set in table using SIMD instructions. Returns true if used SIMD; false otherwise."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips ahead until a bit is set in a ByteArray table.  Uses the nibble table to accelerate skipping."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if a position is outside the input string and jumps to on_outside_input if true."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a special character class and jumps to on_no_match if it doesn't."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Indicates a regex match failure."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Returns the generated code as a HeapObject."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Jumps to a given label."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Checks if a register is greater than or equal to a given value and jumps to if_ge if true."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Checks if a register is less than a given value and jumps to if_lt if true."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Checks if a register is equal to the current position and jumps to if_eq if true."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "IrregexpImplementation",
          "logic": "Returns the implementation used for the regex assembler."
        },
        {
          "name": "LoadCurrentCharacterImpl",
          "parameters": [
            "int cp_offset",
            "Label* on_end_of_input",
            "bool check_bounds",
            "int characters",
            "int eats_at_least"
          ],
          "return_type": "void",
          "logic": "Loads the current character with an offset. Jumps to on_end_of_input if it is at the end of the input. The number of characters to load can be specified, as well as how many characters are consumed after loading."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from the stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a register value from the stack."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes a backtrack label onto the stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto the stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes a register value onto the stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current position from a register."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the stack pointer from a register."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current position to be an offset from the end of the input string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of a register."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates a successful regex match."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current position plus an offset to a register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears a range of registers."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the stack pointer to a register."
        }
      ]
    }
  ],
  "functions": []
}