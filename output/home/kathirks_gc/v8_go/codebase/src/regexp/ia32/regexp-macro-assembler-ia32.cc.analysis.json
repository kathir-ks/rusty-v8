{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/ia32/regexp-macro-assembler-ia32.cc",
  "imports": [
    "src/regexp/ia32/regexp-macro-assembler-ia32.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/macro-assembler.h",
    "src/logging/log.h",
    "src/objects/objects-inl.h",
    "src/regexp/regexp-macro-assembler.h",
    "src/regexp/regexp-stack.h",
    "src/strings/unicode.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerIA32",
      "properties": [
        "kRegExpCodeSize",
        "masm_",
        "no_root_array_scope_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "fallback_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerIA32",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the assembler, sets up labels, and jumps to the entry point."
        },
        {
          "name": "~RegExpMacroAssemblerIA32",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Unuses labels to prevent memory leaks when the assembler is discarded without generating code."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack limit slack slots."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current input position by a given number of characters. Takes care of character size."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value of a register by a given amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles backtracking by popping the instruction stream offset from the backtrack stack and jumping to that location. Includes preemption and backtrack limit checks."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current assembler position."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to a given character, and branches to a label if it is. Otherwise, backtracks."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a given limit, and branches to a label if it is. Otherwise, backtracks."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position is at the start of the string + offset, and branches to a label if it is. Otherwise, backtracks."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position is NOT at the start of the string + offset, and branches to a label if it is. Otherwise, backtracks."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a given limit, and branches to a label if it is. Otherwise, backtracks."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks for greedy loop condition.  If edi matches top of the backtrack stack, pops and jumps.  Otherwise fallthrough."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from Irregexp code."
        },
        {
          "name": "PushCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the caller-saved registers (ecx, edx) onto the stack."
        },
        {
          "name": "PopCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the caller-saved registers (ecx, edx) from the stack."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input does not match a back-reference, ignoring case. Performs different comparisons based on LATIN1 or UC16 mode."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input does not match a back-reference."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to a given character, and branches if it is not. Otherwise, backtracks."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after applying a bitwise AND with a mask, is equal to a given value. Branches accordingly."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after applying a bitwise AND with a mask, is not equal to a given value. Branches accordingly."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character minus 'minus', after applying a bitwise AND with a mask, is not equal to a given value. Branches accordingly."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a given range. Branches accordingly."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within a given range. Branches accordingly."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a C function to check if the current character is within a range specified by an array of character ranges."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is within a range specified by an array of character ranges using a C function. Branches accordingly. Returns true to indicate that the check was performed."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is not within a range specified by an array of character ranges using a C function. Branches accordingly. Returns true to indicate that the check was performed."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit is set in a table at the index of the current character. Branches if the bit is set."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips characters until a bit is set in a table at the index of the current character."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a special character class (whitespace, digit, etc.). Branches if it doesn't match the class. Returns true if the character class was handled."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Signals a failed match by jumping to the exit label and setting the return value to FAILURE."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the current value of the regexp stack pointer from memory into a specified register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the current value of the regexp stack pointer from a register back into memory."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the regexp base pointer onto the stack."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the regexp base pointer from the stack."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Finalizes the code generation, writes the entry point, saves and restores registers, allocates stack space, and returns the generated code as a HeapObject."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Jumps to a label. If the label is null, backtracks."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Checks if a register is greater than or equal to a given comparand. Branches accordingly."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Checks if a register is less than a given comparand. Branches accordingly."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Checks if a register is equal to the current position. Branches accordingly."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "RegExpMacroAssembler::IrregexpImplementation",
          "logic": "Returns the implementation type (kIA32Implementation)."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from the stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the stack into a register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes a backtrack address (label) onto the stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto the stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current position from a register."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Calculates current offset of stack pointer compared to its base and writes the offset to register. "
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads stack pointer offset from the register and calculates stack pointer value."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current position to a specific offset from the end of the input."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of a register to a given value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Signals a successful match by jumping to the success label. Returns whether the regexp is global."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current position, optionally with an offset, to a register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears a range of registers by setting their values to a specific initial value (start of string - 1)."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Register scratch",
            "Immediate extra_space"
          ],
          "return_type": "void",
          "logic": "Calls a C function to check the stack guard state and potentially grow the stack."
        },
        {
          "name": "StaticVariable",
          "parameters": [
            "const ExternalReference& ext"
          ],
          "return_type": "Operand",
          "logic": "Creates an operand for accessing a static variable using an external reference."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int",
          "logic": "Checks the stack guard state, potentially triggering stack expansion. Called from generated code.  This static version allows this function to not require `this`.  "
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "Operand",
          "logic": "Returns an operand for accessing a register on the stack."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if a position, with an offset, is within the bounds of the input string. Branches if it is outside."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Branches to a label or backtracks if the label is null."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Condition condition",
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Conditionally branches to a label or backtracks based on a given condition."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Performs a safe call to a label, pushing the return address onto the stack."
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs a safe return from a called function, jumping to the return address on the stack."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* name"
          ],
          "return_type": "void",
          "logic": "Binds a label as a safe call target."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the backtrack stack. Backtrack stackpointer gets updated."
        },
        {
          "name": "Push",
          "parameters": [
            "Immediate value"
          ],
          "return_type": "void",
          "logic": "Pushes an immediate value onto the backtrack stack. Backtrack stackpointer gets updated."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack into a register. Backtrack stackpointer gets updated."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for preemption by comparing the stack pointer to a stack limit. If preemption is required, it calls a C function to handle it."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks if the backtrack stack has reached its limit. If it has, it calls a C function to grow the stack."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the backtrack stack pointer is above the stack limit minus a slack value, used for debugging."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int characters"
          ],
          "return_type": "void",
          "logic": "Loads the current character from memory, assuming the position is valid, into the current_character register. The number of characters to load and their sizes are determined by mode."
        }
      ]
    }
  ],
  "functions": []
}