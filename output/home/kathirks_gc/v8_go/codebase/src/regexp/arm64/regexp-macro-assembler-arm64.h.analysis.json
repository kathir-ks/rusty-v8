{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/arm64/regexp-macro-assembler-arm64.h",
  "imports": [
    "src/base/strings.h",
    "src/codegen/arm64/assembler-arm64.h",
    "src/codegen/macro-assembler.h",
    "src/regexp/regexp-macro-assembler.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerARM64",
      "properties": [
        "kFramePointerOffset",
        "kReturnAddressOffset",
        "kNumCalleeSavedRegisters",
        "kCalleeSavedRegistersOffset",
        "kFrameTypeOffset",
        "kPaddingAfterFrameType",
        "kIsolateOffset",
        "kDirectCallOffset",
        "kNumOutputRegistersOffset",
        "kInputStringOffset",
        "kSuccessfulCapturesOffset",
        "kBacktrackCountOffset",
        "kRegExpStackBasePointerOffset",
        "kStackLocalPadding",
        "kNumberOfStackLocals",
        "kFirstRegisterOnStackOffset",
        "kFirstCaptureOnStackOffset",
        "kInitialBufferSize",
        "kNumRegistersToUnroll",
        "kNumCachedRegisters",
        "masm_",
        "no_root_array_scope_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "fallback_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerARM64",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor for the RegExpMacroAssemblerARM64 class. Initializes the assembler with the given isolate, zone, mode, and number of registers to save."
        },
        {
          "name": "~RegExpMacroAssemblerARM64",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the RegExpMacroAssemblerARM64 class."
        },
        {
          "name": "AbortedCodeGeneration",
          "parameters": [],
          "return_type": "void",
          "logic": "Called when code generation is aborted, usually due to errors."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack slots that can be used as slack before hitting the stack limit."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current input position by a given amount."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value of a register by a given amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the current point as a backtracking point."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current position in the generated code."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is at the start of the input string. Jumps to on_at_start if true."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to a given character. Jumps to on_equal if true."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character ANDed with a mask is equal to a given character. Jumps to on_equal if true."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a given limit. Jumps to on_greater if true."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a given limit. Jumps to on_less if true."
        },
        {
          "name": "CheckCharacters",
          "parameters": [
            "base::Vector<const base::uc16> str",
            "int cp_offset",
            "Label* on_failure",
            "bool check_end_of_string"
          ],
          "return_type": "void",
          "logic": "Checks if the characters at the current position plus an offset match a given string. Jumps to on_failure if they don't match."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_tos_equals_current_position"
          ],
          "return_type": "void",
          "logic": "Checks if a greedy loop condition is met. Jumps to on_tos_equals_current_position if the top of the stack equals the current position."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is not at the start of the input string. Jumps to on_not_at_start if true."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input does not match a backreference. Jumps to on_no_match if they do not match."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input does not match a backreference (case-insensitive). Jumps to on_no_match if they do not match."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to a given character. Jumps to on_not_equal if true."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character ANDed with a mask is not equal to a given character. Jumps to on_not_equal if true."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if (character - minus) AND mask is not equal to c. Jumps to on_not_equal if true."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a given range. Jumps to on_in_range if true."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within a given range. Jumps to on_not_in_range if true."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is within any of the ranges in a given array. Jumps to on_in_range if true."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is not within any of the ranges in a given array. Jumps to on_not_in_range if true."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit is set in a given byte array table at the index corresponding to the current character. Jumps to on_bit_set if true."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips forward in the input string, looking for a character whose corresponding bit is set in a given byte array table."
        },
        {
          "name": "SkipUntilBitInTableUseSimd",
          "parameters": [
            "int advance_by"
          ],
          "return_type": "bool",
          "logic": "Skips forward in the input string using SIMD instructions, looking for a character whose corresponding bit is set in a given byte array table."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is a valid position within the input string. Jumps to on_outside_input if it is outside the input string."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a special character class. Jumps to on_no_match if it does not match."
        },
        {
          "name": "BindJumpTarget",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a jump target label.  If the label is null, it is a no-op."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Indicates that the regular expression matching has failed."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Finalizes code generation and returns a compiled regexp object."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Jumps to a given label."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Checks if the value in a register is greater than or equal to a given value. Jumps to if_ge if true."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Checks if the value in a register is less than a given value. Jumps to if_lt if true."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Checks if the value in a register is equal to the current position. Jumps to if_eq if true."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "IrregexpImplementation",
          "logic": "Returns the type of regexp implementation."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int character_count"
          ],
          "return_type": "void",
          "logic": "Loads the current character from the input string at a given offset without checking bounds."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from the stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the stack into a given register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes a backtrack label onto the stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto the stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a given register onto the stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads current position value from the register and sets as the current position."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the stack pointer from the register and sets current stack pointer."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current input position to a given offset from the end of the string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of a given register to a specific value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates that the regular expression matching has succeeded."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes current position plus offset to the given register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears a range of registers to zero."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the current stack pointer value into the provided register."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "int start_offset",
            "const uint8_t** input_start",
            "const uint8_t** input_end",
            "uintptr_t extra_space"
          ],
          "return_type": "int",
          "logic": "Called when the stack guard is triggered. It checks if the stack overflowed and fix the return address if needed."
        },
        {
          "name": "PushCachedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Saves cached registers (x0-x7) onto the stack."
        },
        {
          "name": "PopCachedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Restores cached registers (x0-x7) from the stack."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from the generated Irregexp code."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks whether preemption has been requested."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks whether the backtrack stack is exceeding its limit."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the stack pointer is above the stack limit minus slack."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Register scratch",
            "Operand extra_space"
          ],
          "return_type": "void",
          "logic": "Calls CheckStackGuardState C function."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls the internal IsCharacterInRangeArray function."
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "MemOperand",
          "logic": "Calculates memory location for storing/loading a 32-bit register."
        },
        {
          "name": "capture_location",
          "parameters": [
            "int register_index",
            "Register scratch"
          ],
          "return_type": "MemOperand",
          "logic": "Calculates the memory operand to the location for a capture register pair. A capture register holds two register values."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Condition condition",
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Conditionally branches to a label or backtracks if the label is null."
        },
        {
          "name": "CompareAndBranchOrBacktrack",
          "parameters": [
            "Register reg",
            "int immediate",
            "Condition condition",
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Compares a register to an immediate value, then conditionally branches to a label or backtracks based on the condition."
        },
        {
          "name": "CallIf",
          "parameters": [
            "Label* to",
            "Condition condition"
          ],
          "return_type": "void",
          "logic": "Call a label if the condition is met"
        },
        {
          "name": "SaveLinkRegister",
          "parameters": [],
          "return_type": "void",
          "logic": "Save the link register on the stack."
        },
        {
          "name": "RestoreLinkRegister",
          "parameters": [],
          "return_type": "void",
          "logic": "Restore the link register from the stack."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes a register value onto the backtrack stack."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack into a register."
        },
        {
          "name": "StoreRegister",
          "parameters": [
            "int register_index",
            "Register source"
          ],
          "return_type": "void",
          "logic": "Store a register based on the register state. If cached, store to the specific hardware register. Otherwise, stores to memory."
        },
        {
          "name": "GetRegister",
          "parameters": [
            "int register_index",
            "Register maybe_result"
          ],
          "return_type": "Register",
          "logic": "Returns a hardware register that holds the value of a register. Attempts to use a cached register if available."
        },
        {
          "name": "GetCachedRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "Register",
          "logic": "Returns hardware register holding the value of capture register, if not stacked"
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the current regexp stack pointer from memory"
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the regexp stack pointer to memory"
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the regexp base pointer to the backtrack stack."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the regexp base pointer from the backtrack stack."
        }
      ]
    }
  ],
  "functions": []
}