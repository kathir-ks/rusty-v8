{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/x64/regexp-macro-assembler-x64.cc",
  "imports": [
    "src/regexp/x64/regexp-macro-assembler-x64.h",
    "src/codegen/code-desc.h",
    "src/codegen/macro-assembler.h",
    "src/heap/factory.h",
    "src/logging/log.h",
    "src/objects/code-inl.h",
    "src/regexp/regexp-macro-assembler.h",
    "src/regexp/regexp-stack.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerX64",
      "properties": [
        "masm_",
        "no_root_array_scope_",
        "code_relative_fixup_positions_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "fallback_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerX64",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the assembler, labels, and other internal state."
        },
        {
          "name": "~RegExpMacroAssemblerX64",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Unuses the labels to prevent dangling pointers if the assembler is discarded without generating code."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack limit slack slots."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current position in the input string by a specified number of characters (byte offset)."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances a register value by a specified amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops an InstructionStream offset from the backtrack stack, adds InstructionStream and jumps to that location, implementing backtracking."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current code position."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to a given character, branching to 'on_equal' if true."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a given limit, branching to 'on_greater' if true."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is at the start of the string, branching to 'on_at_start' if true."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is NOT at the start of the string, branching to 'on_not_at_start' if true."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a given limit, branching to 'on_less' if true."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks for a greedy loop, branching to 'on_equal' if the current position matches the top of the backtrack stack."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C++ function from Irregexp code, taking care of necessary registers."
        },
        {
          "name": "PushCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes caller-saved registers used by Irregexp onto the stack."
        },
        {
          "name": "PopCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops caller-saved registers from the stack."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the substring captured by a backreference matches the current input (case-insensitive), branching to 'on_no_match' if it doesn't match."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the substring captured by a backreference matches the current input, branching to 'on_no_match' if it doesn't match."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is NOT equal to a given character, branching to 'on_not_equal' if true."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character ANDed with a mask is equal to a given value, branching to 'on_equal' if true."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character ANDed with a mask is NOT equal to a given value, branching to 'on_not_equal' if true."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if (current character - minus) ANDed with a mask is NOT equal to a given value, branching to 'on_not_equal' if true."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a given range [from, to], branching to 'on_in_range' if true."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is NOT within a given range [from, to], branching to 'on_not_in_range' if true."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a C++ function to check if the current character is within the given character ranges array."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Calls a C++ function to check if the current character is in a given array of ranges. Branches to on_in_range if true."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Calls a C++ function to check if the current character is not in the given range array, and branches to 'on_not_in_range' if true."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit corresponding to the current character is set in a given byte array table, branching to 'on_bit_set' if true."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table_array",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips characters until a bit corresponding to the current character is set in a table.  Uses a scalar or SIMD version depending on conditions."
        },
        {
          "name": "SkipUntilBitInTableUseSimd",
          "parameters": [
            "int advance_by"
          ],
          "return_type": "bool",
          "logic": "Determines whether the SIMD implementation should be used for the SkipUntilBitInTable."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a special character class (e.g., whitespace, digit), branching to 'on_no_match' if it doesn't match."
        },
        {
          "name": "BindJumpTarget",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to a jump target."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the return value to indicate failure and jumps to the exit label."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the RegExp stack pointer from memory into the destination register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the RegExp stack pointer from the source register into memory."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the base pointer onto the stack."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the base pointer off the stack."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Finalizes the code generation, creates the Code object, and returns a handle to it."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Jumps to a specified label or backtracks."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Checks if a register value is greater than or equal to a comparand, branching to 'if_ge' if true."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Checks if a register value is less than a comparand, branching to 'if_lt' if true."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Checks if a register value is equal to the current position, branching to 'if_eq' if true."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "RegExpMacroAssembler::IrregexpImplementation",
          "logic": "Returns the implementation type (kX64Implementation)."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from the stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the stack and stores it in the specified register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes a backtrack label onto the stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto the stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current position into a register."
        },
        {
          "name": "ReadPositionFromRegister",
          "parameters": [
            "Register dst",
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads a position from a register into another register."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes a stack pointer into a register, maintaining a position-independent representation."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads stack pointer value from register."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current position as a negative offset from the end of the string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets a register value to a specified value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Jumps to the success label."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current position (with an optional offset) to a register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears the specified registers to the 'string start - 1' value."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Immediate extra_space"
          ],
          "return_type": "void",
          "logic": "Calls a function to check the stack guard state and potentially grow the stack."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int",
          "logic": "Checks the stack guard state for potential stack overflows."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if a given character position is within the bounds of the input string, branching to 'on_outside_input' if it's outside."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Branches to the provided label or backtracks."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Condition condition",
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Branches to the provided label, or backtracks if no label is provided and the condition is met."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Calls a given label, adding some extra safe code."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Declares a Safe call target. To avoid memory corruption, there needs to be some handling for return address."
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Returns safely from a called function."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes a register value onto the backtrack stack."
        },
        {
          "name": "Push",
          "parameters": [
            "Immediate value"
          ],
          "return_type": "void",
          "logic": "Pushes an immediate value onto the backtrack stack."
        },
        {
          "name": "FixupCodeRelativePositions",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates code relative positions."
        },
        {
          "name": "Push",
          "parameters": [
            "Label* backtrack_target"
          ],
          "return_type": "void",
          "logic": "Pushes the relative offset of a backtrack label to the stack."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack and stores it in the target register."
        },
        {
          "name": "Drop",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes an element from the stack by adjusting the stack pointer."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for preemption, calling a helper function if necessary."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for stack overflow, calling a helper function if necessary."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the stack pointer is above a certain level."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int characters"
          ],
          "return_type": "void",
          "logic": "Loads the current character from the input string into the current_character() register without checking bounds."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "frame_entry",
      "parameters": [
        "Address re_frame",
        "int frame_offset"
      ],
      "return_type": "T&",
      "logic": "Helper function for reading a value out of a stack frame."
    },
    {
      "name": "frame_entry_address",
      "parameters": [
        "Address re_frame",
        "int frame_offset"
      ],
      "return_type": "T*",
      "logic": "Helper function for reading address out of a stack frame."
    }
  ]
}