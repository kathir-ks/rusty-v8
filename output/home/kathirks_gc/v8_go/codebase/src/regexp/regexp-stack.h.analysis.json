{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-stack.h",
  "imports": [
    "src/base/logging.h",
    "src/base/macros.h",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "RegExpStackScope",
      "properties": [
        "regexp_stack_",
        "old_sp_top_delta_"
      ],
      "methods": [
        {
          "name": "RegExpStackScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "",
          "logic": "Constructor that initializes the stack memory area if necessary. It associates the scope with an isolate."
        },
        {
          "name": "~RegExpStackScope",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor that releases the stack if it has grown.  It cleans up dynamically allocated memory."
        },
        {
          "name": "stack",
          "parameters": [],
          "return_type": "RegExpStack*",
          "logic": "Returns a pointer to the RegExpStack associated with this scope."
        }
      ]
    },
    {
      "name": "RegExpStack",
      "properties": [
        "static_stack_",
        "thread_local_"
      ],
      "methods": [
        {
          "name": "RegExpStack",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for the RegExpStack. Initializes thread-local storage."
        },
        {
          "name": "~RegExpStack",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for the RegExpStack. Frees allocated memory."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the beginning address of the allocated stack memory."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the ending address of the allocated stack memory."
        },
        {
          "name": "memory_top",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the top of the allocated memory (same as end())."
        },
        {
          "name": "stack_pointer",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the current stack pointer."
        },
        {
          "name": "memory_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the allocated memory area."
        },
        {
          "name": "limit_address_address",
          "parameters": [],
          "return_type": "Address*",
          "logic": "Returns the address of the memory location containing the stack limit."
        },
        {
          "name": "EnsureCapacity",
          "parameters": [
            "size_t size"
          ],
          "return_type": "Address",
          "logic": "Ensures that there is a memory area with at least the specified size. If passing zero, the default/minimum size buffer is allocated."
        },
        {
          "name": "ArchiveStack",
          "parameters": [
            "char* to"
          ],
          "return_type": "char*",
          "logic": "Archives the current stack state to a given memory location for thread switching."
        },
        {
          "name": "RestoreStack",
          "parameters": [
            "char* from"
          ],
          "return_type": "char*",
          "logic": "Restores the stack state from a given memory location after a thread switch."
        },
        {
          "name": "FreeThreadResources",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees thread-local resources, resetting to the static stack."
        },
        {
          "name": "sp_top_delta",
          "parameters": [],
          "return_type": "ptrdiff_t",
          "logic": "Calculates the delta (difference) between the stack pointer and the top of the memory area.  Used as a position-independent representation."
        },
        {
          "name": "ResetIfEmpty",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the buffer to the static stack if it has grown beyond the default size and is empty."
        },
        {
          "name": "IsValid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the ThreadLocal storage has been invalidated (i.e., memory is not null)."
        }
      ]
    }
  ],
  "functions": []
}