{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-bytecode-generator.h",
  "imports": [
    "src/base/strings.h",
    "src/codegen/label.h",
    "src/regexp/regexp-macro-assembler.h"
  ],
  "classes": [
    {
      "name": "RegExpBytecodeGenerator",
      "properties": [
        "buffer_",
        "pc_",
        "backtrack_",
        "advance_current_start_",
        "advance_current_offset_",
        "advance_current_end_",
        "jump_edges_",
        "isolate_",
        "kInitialBufferSize",
        "kInvalidPC"
      ],
      "methods": [
        {
          "name": "RegExpBytecodeGenerator",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor. Initializes the bytecode generator with an isolate and zone, allocates the buffer, and sets up initial state."
        },
        {
          "name": "~RegExpBytecodeGenerator",
          "parameters": [],
          "return_type": "destructor",
          "logic": "Destructor. Deallocates the buffer used for storing the generated bytecode."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the stack limit slack slot count, indicating how much space should be reserved for stack checks. Returns 1."
        },
        {
          "name": "CanReadUnaligned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether the architecture allows unaligned memory access. Returns false."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current position in the bytecode buffer.  This is where the label's target address is set."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current position by a given offset, representing movement in the input string."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from a stack, effectively restoring the position to a previous value."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto a stack, allowing it to be restored later."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Signals a backtracking event in the regular expression matching process."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Performs an unconditional jump to a given label."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes a backtrack point (a label) onto a stack, used for backtracking in case of a mismatch."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates that the regular expression match has succeeded.  Returns true."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Signals that the regular expression match has failed."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops the value from the stack to the register with the given index."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the stack. It also checks the stack limit according to the StackCheckFlag."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Increments the value of a register by a given amount."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current position based on an offset from the end of the input string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of a register to a given value."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current position (with an offset) to a register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears a range of registers, setting their values to zero."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current position from a specified register."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the current stack pointer to the given register."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current stack pointer from the given register."
        },
        {
          "name": "LoadCurrentCharacterImpl",
          "parameters": [
            "int cp_offset",
            "Label* on_end_of_input",
            "bool check_bounds",
            "int characters",
            "int eats_at_least"
          ],
          "return_type": "void",
          "logic": "Loads the character at the current position (with an offset) and jumps to on_end_of_input if the end of the input is reached.  Handles boundary checks."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position is equal to a given character, and jumps to on_equal if it is."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position, after applying a bitwise AND with a mask, is equal to a given character, and jumps to on_equal if it is."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position is greater than a given limit, and jumps to on_greater if it is."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position is less than a given limit, and jumps to on_less if it is."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_tos_equals_current_position"
          ],
          "return_type": "void",
          "logic": "Checks if the top of stack is equal to the current position, which is used to detect and handle greedy loops."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position (with an offset) is at the start of the input string, and jumps to on_at_start if it is."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position (with an offset) is not at the start of the input string, and jumps to on_not_at_start if it is not."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position is not equal to a given character, and jumps to on_not_equal if it is not."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position, after applying a bitwise AND with a mask, is not equal to a given character, and jumps to on_not_equal if it is not."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position, after applying a (c - minus) & mask is not equal to a given character, and jumps to on_not_equal if it is not."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position is within a given range, and jumps to on_in_range if it is."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the character at the current position is not within a given range, and jumps to on_not_in_range if it is not."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the character at the current position is within any of the ranges in a given array of character ranges, and jumps to on_in_range if it is. Returns false always."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the character at the current position is not within any of the ranges in a given array of character ranges, and jumps to on_not_in_range if it is not. Returns false always."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if the bit corresponding to the character at the current position is set in a given bit table, and jumps to on_bit_set if it is."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips characters until a bit is set in a given bit table. Advances the current position by `advance_by`."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the backreference (captured substring) matches the current position. Jumps to on_no_match if no match is found."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the backreference (captured substring) matches the current position, ignoring case. Jumps to on_no_match if no match is found."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int register_index",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Checks if the register value is less than comparand, jump to the if_lt label if the condition is true."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int register_index",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Checks if the register value is greater than or equal to comparand, jump to the if_ge label if the condition is true."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int register_index",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Checks if the register value is equal to current position, jump to the if_eq label if the condition is true."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "IrregexpImplementation",
          "logic": "Returns the implementation type of the Irregexp assembler."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Returns the generated bytecode as a HeapObject. Takes the source string and RegExp flags as input."
        },
        {
          "name": "ExpandBuffer",
          "parameters": [],
          "return_type": "void",
          "logic": "Expands the buffer when it runs out of space during bytecode generation."
        },
        {
          "name": "EmitOrLink",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Emits a jump instruction or links it to a label if the label is already bound."
        },
        {
          "name": "Emit32",
          "parameters": [
            "uint32_t x"
          ],
          "return_type": "void",
          "logic": "Emits a 32-bit value into the bytecode buffer."
        },
        {
          "name": "Emit16",
          "parameters": [
            "uint32_t x"
          ],
          "return_type": "void",
          "logic": "Emits a 16-bit value into the bytecode buffer."
        },
        {
          "name": "Emit8",
          "parameters": [
            "uint32_t x"
          ],
          "return_type": "void",
          "logic": "Emits an 8-bit value into the bytecode buffer."
        },
        {
          "name": "Emit",
          "parameters": [
            "uint32_t bc",
            "uint32_t arg"
          ],
          "return_type": "void",
          "logic": "Emits a bytecode instruction with a 32-bit argument."
        },
        {
          "name": "Emit",
          "parameters": [
            "uint32_t bc",
            "int32_t arg"
          ],
          "return_type": "void",
          "logic": "Emits a bytecode instruction with a signed 32-bit argument."
        },
        {
          "name": "EmitSkipTable",
          "parameters": [
            "DirectHandle<ByteArray> table"
          ],
          "return_type": "void",
          "logic": "Emits a skip table, which contains data used for skipping characters based on certain criteria."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current length of the bytecode buffer."
        },
        {
          "name": "Copy",
          "parameters": [
            "uint8_t* a"
          ],
          "return_type": "void",
          "logic": "Copies the bytecode buffer to a given memory location."
        }
      ]
    }
  ],
  "functions": []
}