{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/code-serializer.h",
  "imports": [
    "src/base/macros.h",
    "src/codegen/script-details.h",
    "src/snapshot/serializer.h",
    "src/snapshot/snapshot-data.h"
  ],
  "classes": [
    {
      "name": "AlignedCachedData",
      "properties": [
        "owns_data_",
        "rejected_",
        "data_",
        "length_"
      ],
      "methods": [
        {
          "name": "AlignedCachedData",
          "parameters": [
            "const uint8_t* data",
            "int length"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the object with a pointer to the data and its length. It assumes ownership is with the caller."
        },
        {
          "name": "~AlignedCachedData",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Deallocates the data if the object owns it."
        },
        {
          "name": "AlignedCachedData",
          "parameters": [
            "const AlignedCachedData&"
          ],
          "return_type": "AlignedCachedData&",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const AlignedCachedData&"
          ],
          "return_type": "AlignedCachedData&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns a pointer to the cached data."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the length of the cached data."
        },
        {
          "name": "rejected",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the cached data has been rejected."
        },
        {
          "name": "Reject",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the cached data as rejected."
        },
        {
          "name": "HasDataOwnership",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the object owns the data."
        },
        {
          "name": "AcquireDataOwnership",
          "parameters": [],
          "return_type": "void",
          "logic": "Takes ownership of the cached data.  Asserts that ownership wasn't previously held."
        },
        {
          "name": "ReleaseDataOwnership",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases ownership of the cached data. Asserts that ownership was previously held."
        }
      ]
    },
    {
      "name": "CodeSerializer",
      "properties": [
        "no_gc_",
        "source_hash_"
      ],
      "methods": [
        {
          "name": "Serialize",
          "parameters": [
            "Isolate* isolate",
            "Handle<SharedFunctionInfo> info"
          ],
          "return_type": "ScriptCompiler::CachedData*",
          "logic": "Serializes a SharedFunctionInfo into a CachedData object."
        },
        {
          "name": "SerializeSharedFunctionInfo",
          "parameters": [
            "Handle<SharedFunctionInfo> info"
          ],
          "return_type": "AlignedCachedData*",
          "logic": "Serializes a SharedFunctionInfo into AlignedCachedData."
        },
        {
          "name": "Deserialize",
          "parameters": [
            "Isolate* isolate",
            "AlignedCachedData* cached_data",
            "DirectHandle<String> source",
            "const ScriptDetails& script_details",
            "MaybeDirectHandle<Script> maybe_cached_script"
          ],
          "return_type": "MaybeDirectHandle<SharedFunctionInfo>",
          "logic": "Deserializes a SharedFunctionInfo from cached data."
        },
        {
          "name": "StartDeserializeOffThread",
          "parameters": [
            "LocalIsolate* isolate",
            "AlignedCachedData* cached_data"
          ],
          "return_type": "OffThreadDeserializeData",
          "logic": "Starts deserialization of cached data off-thread."
        },
        {
          "name": "FinishOffThreadDeserialize",
          "parameters": [
            "Isolate* isolate",
            "OffThreadDeserializeData&& data",
            "AlignedCachedData* cached_data",
            "DirectHandle<String> source",
            "const ScriptDetails& script_details",
            "BackgroundMergeTask* background_merge_task"
          ],
          "return_type": "MaybeDirectHandle<SharedFunctionInfo>",
          "logic": "Finishes the off-thread deserialization process."
        },
        {
          "name": "source_hash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the source hash."
        },
        {
          "name": "CodeSerializer",
          "parameters": [
            "Isolate* isolate",
            "uint32_t source_hash"
          ],
          "return_type": "void",
          "logic": "Protected constructor."
        },
        {
          "name": "~CodeSerializer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Outputs statistics."
        },
        {
          "name": "SerializeGeneric",
          "parameters": [
            "Handle<HeapObject> heap_object",
            "SlotType slot_type"
          ],
          "return_type": "void",
          "logic": "Serializes a generic heap object. (Delegate from Serializer)"
        },
        {
          "name": "SerializeObjectImpl",
          "parameters": [
            "Handle<HeapObject> o",
            "SlotType slot_type"
          ],
          "return_type": "void",
          "logic": "Serializes a heap object, specific implementation. (Override from Serializer)"
        }
      ]
    },
    {
      "name": "SerializedCodeData",
      "properties": [],
      "methods": [
        {
          "name": "FromCachedData",
          "parameters": [
            "Isolate* isolate",
            "AlignedCachedData* cached_data",
            "uint32_t expected_source_hash",
            "SerializedCodeSanityCheckResult* rejection_result"
          ],
          "return_type": "SerializedCodeData",
          "logic": "Creates a SerializedCodeData object from cached data, performing sanity checks using source information."
        },
        {
          "name": "FromCachedDataWithoutSource",
          "parameters": [
            "LocalIsolate* local_isolate",
            "AlignedCachedData* cached_data",
            "SerializedCodeSanityCheckResult* rejection_result"
          ],
          "return_type": "SerializedCodeData",
          "logic": "Creates a SerializedCodeData object from cached data, performing only source-independent sanity checks."
        },
        {
          "name": "FromPartiallySanityCheckedCachedData",
          "parameters": [
            "AlignedCachedData* cached_data",
            "uint32_t expected_source_hash",
            "SerializedCodeSanityCheckResult* rejection_result"
          ],
          "return_type": "SerializedCodeData",
          "logic": "Creates a SerializedCodeData object from cached data that's already been partially checked. Performs source-dependent sanity checks."
        },
        {
          "name": "SerializedCodeData",
          "parameters": [
            "const std::vector<uint8_t>* payload",
            "const CodeSerializer* cs"
          ],
          "return_type": "void",
          "logic": "Constructor for SerializedCodeData when producing serialized data."
        },
        {
          "name": "GetScriptData",
          "parameters": [],
          "return_type": "AlignedCachedData*",
          "logic": "Returns the AlignedCachedData object and relinquishes ownership to the caller."
        },
        {
          "name": "Payload",
          "parameters": [],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Returns a read-only vector to the payload."
        },
        {
          "name": "SourceHash",
          "parameters": [
            "DirectHandle<String> source",
            "DirectHandle<FixedArray> wrapped_arguments",
            "ScriptOriginOptions origin_options"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the source hash from the given parameters."
        },
        {
          "name": "SerializedCodeData",
          "parameters": [
            "AlignedCachedData* data"
          ],
          "return_type": "void",
          "logic": "Constructor for SerializedCodeData taking ownership of existing AlignedCachedData."
        },
        {
          "name": "ChecksummedContent",
          "parameters": [],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Returns a base::Vector pointing to the checksummed content of the data. This is everything past the header."
        },
        {
          "name": "SanityCheck",
          "parameters": [
            "uint32_t expected_ro_snapshot_checksum",
            "uint32_t expected_source_hash"
          ],
          "return_type": "SerializedCodeSanityCheckResult",
          "logic": "Performs a full sanity check on the serialized code, validating the read-only snapshot checksum and the source hash."
        },
        {
          "name": "SanityCheckJustSource",
          "parameters": [
            "uint32_t expected_source_hash"
          ],
          "return_type": "SerializedCodeSanityCheckResult",
          "logic": "Performs sanity check on the serialized code based on source hash only."
        },
        {
          "name": "SanityCheckWithoutSource",
          "parameters": [
            "uint32_t expected_ro_snapshot_checksum"
          ],
          "return_type": "SerializedCodeSanityCheckResult",
          "logic": "Performs a sanity check without the source code, only validating the read-only snapshot checksum."
        }
      ]
    },
    {
      "name": "CodeSerializer::OffThreadDeserializeData",
      "properties": [
        "maybe_result",
        "scripts",
        "persistent_handles",
        "sanity_check_result"
      ],
      "methods": [
        {
          "name": "HasResult",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the deserialization has a result available."
        },
        {
          "name": "GetOnlyScript",
          "parameters": [
            "LocalHeap* heap"
          ],
          "return_type": "DirectHandle<Script>",
          "logic": "Gets the single script object from the deserialization result (if only one exists)."
        }
      ]
    }
  ],
  "functions": [],
  "typedefs": [
    {
      "name": "SerializedCodeSanityCheckResult",
      "type": "v8::ScriptCompiler::CachedData::CompatibilityCheckResult"
    }
  ]
}