{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/platform-embedded-file-writer-zos.h",
  "imports": [
    "src/base/macros.h",
    "src/snapshot/embedded/platform-embedded-file-writer-base.h"
  ],
  "classes": [
    {
      "name": "PlatformEmbeddedFileWriterZOS",
      "properties": [
        "target_arch_",
        "target_os_"
      ],
      "methods": [
        {
          "name": "PlatformEmbeddedFileWriterZOS",
          "parameters": [
            "EmbeddedTargetArch target_arch",
            "EmbeddedTargetOs target_os"
          ],
          "return_type": "constructor",
          "logic": "Constructor. Initializes the target architecture and OS. Checks that the target OS is z/OS."
        },
        {
          "name": "SectionText",
          "parameters": [],
          "return_type": "void",
          "logic": "Outputs the start of the text section (code)."
        },
        {
          "name": "SectionRoData",
          "parameters": [],
          "return_type": "void",
          "logic": "Outputs the start of the read-only data section."
        },
        {
          "name": "AlignToCodeAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to the code alignment."
        },
        {
          "name": "AlignToDataAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to the data alignment."
        },
        {
          "name": "DeclareUint32",
          "parameters": [
            "const char* name",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Declares a 32-bit unsigned integer variable."
        },
        {
          "name": "DeclareLabel",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a label (jump target)."
        },
        {
          "name": "DeclareLabelProlog",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a label for a function prolog."
        },
        {
          "name": "DeclareLabelEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Declares a label for a function epilogue."
        },
        {
          "name": "SourceInfo",
          "parameters": [
            "int fileid",
            "const char* filename",
            "int line"
          ],
          "return_type": "void",
          "logic": "Outputs source code location information (file and line number)."
        },
        {
          "name": "DeclareFunctionBegin",
          "parameters": [
            "const char* name",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Declares the beginning of a function."
        },
        {
          "name": "DeclareFunctionEnd",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares the end of a function."
        },
        {
          "name": "HexLiteral",
          "parameters": [
            "uint64_t value"
          ],
          "return_type": "int",
          "logic": "Outputs a hexadecimal literal value."
        },
        {
          "name": "Comment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Outputs a comment."
        },
        {
          "name": "FilePrologue",
          "parameters": [],
          "return_type": "void",
          "logic": "Outputs the file prologue (header)."
        },
        {
          "name": "DeclareExternalFilename",
          "parameters": [
            "int fileid",
            "const char* filename"
          ],
          "return_type": "void",
          "logic": "Declares an external filename."
        },
        {
          "name": "FileEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Outputs the file epilogue (footer)."
        },
        {
          "name": "IndentedDataDirective",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "int",
          "logic": "Outputs an indented data directive."
        },
        {
          "name": "ByteChunkDataDirective",
          "parameters": [],
          "return_type": "DataDirective",
          "logic": "Returns the appropriate data directive for writing byte chunks."
        },
        {
          "name": "WriteByteChunk",
          "parameters": [
            "const uint8_t* data"
          ],
          "return_type": "int",
          "logic": "Writes a chunk of bytes to the output."
        },
        {
          "name": "DeclareSymbolGlobal",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a symbol as global."
        }
      ]
    }
  ],
  "functions": []
}