{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/platform-embedded-file-writer-generic.cc",
  "imports": [
    "src/snapshot/embedded/platform-embedded-file-writer-generic.h",
    "algorithm",
    "cinttypes",
    "src/objects/instruction-stream.h"
  ],
  "classes": [
    {
      "name": "PlatformEmbeddedFileWriterGeneric",
      "properties": [],
      "methods": [
        {
          "name": "SectionText",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the section header for the text segment to the file. Chooses between '.section .text.hot.embedded' for ChromeOS or '.section .text' otherwise."
        },
        {
          "name": "SectionRoData",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the section header for the read-only data segment to the file."
        },
        {
          "name": "DeclareUint32",
          "parameters": [
            "const char* name",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Declares a global symbol, defines a label, outputs a long directive, and prints the given uint32_t value to the file."
        },
        {
          "name": "DeclareSymbolGlobal",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a global symbol and then hides it, improving binary size and dynamic linker performance."
        },
        {
          "name": "AlignToCodeAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to a specific code alignment boundary, using .balign directive. The alignment value depends on the target architecture and platform (e.g., 4096 for Android/Linux x64/ARM64, 64 for x64/PPC64, 32 otherwise)."
        },
        {
          "name": "AlignToPageSizeIfNeeded",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to a page boundary if the target is Android/Linux x64/ARM64. Used for remapping builtins."
        },
        {
          "name": "AlignToDataAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to 8 bytes for data alignment, ensuring correct loading of embedded blob data."
        },
        {
          "name": "Comment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Writes a comment to the file, prefixed with '//'."
        },
        {
          "name": "DeclareLabel",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a label in the assembly file."
        },
        {
          "name": "SourceInfo",
          "parameters": [
            "int fileid",
            "const char* filename",
            "int line"
          ],
          "return_type": "void",
          "logic": "Writes source file and line number information to the file using the '.loc' directive."
        },
        {
          "name": "DeclareFunctionBegin",
          "parameters": [
            "const char* name",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Declares the beginning of a function in the assembly file, including declaring a global symbol if drumbrake is enabled, setting a label, function type, and size."
        },
        {
          "name": "DeclareFunctionEnd",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Placeholder for function end declaration, currently empty."
        },
        {
          "name": "FilePrologue",
          "parameters": [],
          "return_type": "void",
          "logic": "Placeholder for file prologue, currently empty."
        },
        {
          "name": "DeclareExternalFilename",
          "parameters": [
            "int fileid",
            "const char* filename"
          ],
          "return_type": "void",
          "logic": "Declares an external filename in the assembly file, replacing backslashes with forward slashes for consistency."
        },
        {
          "name": "FileEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the file epilogue, including a section for the GNU stack, preventing executable stack warnings."
        },
        {
          "name": "IndentedDataDirective",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "int",
          "logic": "Writes a data directive to the file with indentation."
        },
        {
          "name": "ByteChunkDataDirective",
          "parameters": [],
          "return_type": "DataDirective",
          "logic": "Determines the appropriate data directive for byte chunks based on the target architecture, using kLong for MIPS/LOONG64 and deferring to the base class implementation otherwise."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DirectiveAsString",
      "parameters": [
        "DataDirective directive"
      ],
      "return_type": "const char*",
      "logic": "Converts a DataDirective enum value to its corresponding string representation (e.g., kByte to \".byte\")."
    }
  ]
}