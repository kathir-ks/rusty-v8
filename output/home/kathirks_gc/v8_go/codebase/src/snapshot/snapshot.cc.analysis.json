{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/snapshot.cc",
  "imports": [
    "src/snapshot/snapshot.h",
    "src/api/api-inl.h",
    "src/baseline/baseline-batch-compiler.h",
    "src/common/assert-scope.h",
    "src/execution/local-isolate-inl.h",
    "src/handles/global-handles-inl.h",
    "src/heap/local-heap-inl.h",
    "src/heap/read-only-promotion.h",
    "src/heap/safepoint.h",
    "src/init/bootstrapper.h",
    "src/logging/counters-scopes.h",
    "src/logging/runtime-call-stats-scope.h",
    "src/objects/js-regexp-inl.h",
    "src/snapshot/context-deserializer.h",
    "src/snapshot/context-serializer.h",
    "src/snapshot/read-only-serializer.h",
    "src/snapshot/shared-heap-serializer.h",
    "src/snapshot/snapshot-utils.h",
    "src/snapshot/startup-serializer.h",
    "src/utils/memcopy.h",
    "src/utils/version.h",
    "src/snapshot/snapshot-compression.h"
  ],
  "classes": [
    {
      "name": "SnapshotImpl",
      "properties": [
        "kNumberOfContextsOffset",
        "kRehashabilityOffset",
        "kChecksumOffset",
        "kReadOnlySnapshotChecksumOffset",
        "kVersionStringOffset",
        "kVersionStringLength",
        "kReadOnlyOffsetOffset",
        "kSharedHeapOffsetOffset",
        "kFirstContextOffsetOffset"
      ],
      "methods": [
        {
          "name": "CreateSnapshotBlob",
          "parameters": [
            "const SnapshotData* startup_snapshot_in",
            "const SnapshotData* read_only_snapshot_in",
            "const SnapshotData* shared_heap_snapshot_in",
            "const std::vector<SnapshotData*>& context_snapshots_in",
            "bool can_be_rehashed"
          ],
          "return_type": "v8::StartupData",
          "logic": "Creates a snapshot blob by combining startup, read-only, shared heap, and context snapshots.  It also handles compression and sets up the header information within the blob."
        },
        {
          "name": "ExtractNumContexts",
          "parameters": [
            "const v8::StartupData* data"
          ],
          "return_type": "uint32_t",
          "logic": "Extracts the number of contexts stored in the snapshot data."
        },
        {
          "name": "ExtractContextOffset",
          "parameters": [
            "const v8::StartupData* data",
            "uint32_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Extracts the offset of a specific context within the snapshot data based on its index."
        },
        {
          "name": "ExtractStartupData",
          "parameters": [
            "const v8::StartupData* data"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Extracts the startup data section from the snapshot data."
        },
        {
          "name": "ExtractReadOnlyData",
          "parameters": [
            "const v8::StartupData* data"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Extracts the read-only data section from the snapshot data."
        },
        {
          "name": "ExtractSharedHeapData",
          "parameters": [
            "const v8::StartupData* data"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Extracts the shared heap data section from the snapshot data."
        },
        {
          "name": "ExtractContextData",
          "parameters": [
            "const v8::StartupData* data",
            "uint32_t index"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Extracts the data for a specific context from the snapshot data."
        },
        {
          "name": "GetHeaderValue",
          "parameters": [
            "const v8::StartupData* data",
            "uint32_t offset"
          ],
          "return_type": "uint32_t",
          "logic": "Retrieves a 32-bit unsigned integer value from the snapshot data header at a given offset."
        },
        {
          "name": "SetHeaderValue",
          "parameters": [
            "char* data",
            "uint32_t offset",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Sets a 32-bit unsigned integer value in the snapshot data header at a given offset."
        },
        {
          "name": "CheckVersion",
          "parameters": [
            "const v8::StartupData* data"
          ],
          "return_type": "void",
          "logic": "Checks if the version string in the snapshot data matches the current V8 version.  If not, it triggers a fatal error."
        },
        {
          "name": "ChecksummedContent",
          "parameters": [
            "const v8::StartupData* data"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Returns a vector representing the region of the snapshot data that is used for checksum calculation."
        },
        {
          "name": "StartupSnapshotOffset",
          "parameters": [
            "int num_contexts"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the offset to the beginning of the startup snapshot data based on the number of contexts."
        },
        {
          "name": "ContextSnapshotOffsetOffset",
          "parameters": [
            "int index"
          ],
          "return_type": "uint32_t",
          "logic": "Calculates the offset to the context snapshot offset within the header, based on the context index."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "MaybeDecompress",
      "parameters": [
        "Isolate* isolate",
        "base::Vector<const uint8_t> snapshot_data"
      ],
      "return_type": "SnapshotData",
      "logic": "Decompresses the snapshot data if snapshot compression is enabled, otherwise returns the data as-is."
    },
    {
      "name": "Snapshot::SnapshotIsValid",
      "parameters": [
        "const v8::StartupData* snapshot_blob"
      ],
      "return_type": "bool",
      "logic": "Checks if the snapshot data appears to be valid by verifying the number of contexts."
    },
    {
      "name": "Snapshot::HasContextSnapshot",
      "parameters": [
        "Isolate* isolate",
        "size_t index"
      ],
      "return_type": "bool",
      "logic": "Checks if a context snapshot is available for a given index in the snapshot data."
    },
    {
      "name": "Snapshot::VersionIsValid",
      "parameters": [
        "const v8::StartupData* data"
      ],
      "return_type": "bool",
      "logic": "Checks if the version string embedded in the snapshot data matches the current V8 version."
    },
    {
      "name": "Snapshot::Initialize",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "bool",
      "logic": "Initializes the isolate with data from the snapshot, including decompressing and setting up the heap."
    },
    {
      "name": "Snapshot::NewContextFromSnapshot",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<JSGlobalProxy> global_proxy",
        "size_t context_index",
        "DeserializeEmbedderFieldsCallback embedder_fields_deserializer"
      ],
      "return_type": "MaybeDirectHandle<Context>",
      "logic": "Creates a new context from the snapshot data at a given index."
    },
    {
      "name": "Snapshot::ClearReconstructableDataForSerialization",
      "parameters": [
        "Isolate* isolate",
        "bool clear_recompilable_data"
      ],
      "return_type": "void",
      "logic": "Clears data that can be reconstructed during deserialization, such as compiled code in SharedFunctionInfo and JSRegExp objects.  This reduces the snapshot size."
    },
    {
      "name": "Snapshot::SerializeDeserializeAndVerifyForTesting",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<Context> default_context"
      ],
      "return_type": "void",
      "logic": "Serializes a context to a snapshot, then deserializes it into a new isolate, and verifies that the resulting isolate is functional. Used for testing snapshotting."
    },
    {
      "name": "Snapshot::Create",
      "parameters": [
        "Isolate* isolate",
        "std::vector<Tagged<Context>>* contexts",
        "const std::vector<SerializeEmbedderFieldsCallback>& embedder_fields_serializers",
        "const SafepointScope& safepoint_scope",
        "const DisallowGarbageCollection& no_gc",
        "SerializerFlags flags"
      ],
      "return_type": "v8::StartupData",
      "logic": "Creates a snapshot blob by serializing the isolate and the provided contexts."
    },
    {
      "name": "Snapshot::GetExpectedChecksum",
      "parameters": [
        "const v8::StartupData* data"
      ],
      "return_type": "uint32_t",
      "logic": "Returns the checksum stored in the snapshot's header."
    },
    {
      "name": "Snapshot::CalculateChecksum",
      "parameters": [
        "const v8::StartupData* data"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates the checksum of the snapshot data."
    },
    {
      "name": "Snapshot::VerifyChecksum",
      "parameters": [
        "const v8::StartupData* data"
      ],
      "return_type": "bool",
      "logic": "Verifies the integrity of the snapshot data by comparing the calculated checksum with the checksum stored in the header."
    },
    {
      "name": "Snapshot::ExtractRehashability",
      "parameters": [
        "const v8::StartupData* data"
      ],
      "return_type": "bool",
      "logic": "Extracts the rehashability flag from the startup data."
    },
    {
      "name": "Snapshot::ExtractReadOnlySnapshotChecksum",
      "parameters": [
        "const v8::StartupData* data"
      ],
      "return_type": "uint32_t",
      "logic": "Extracts the read-only snapshot's checksum from the startup data."
    },
    {
      "name": "RunExtraCode",
      "parameters": [
        "v8::Isolate* isolate",
        "v8::Local<v8::Context> context",
        "const char* utf8_source",
        "const char* name"
      ],
      "return_type": "bool",
      "logic": "Runs JavaScript code within a given context.  Used to embed source code into snapshots."
    },
    {
      "name": "CreateSnapshotDataBlobInternal",
      "parameters": [
        "v8::SnapshotCreator::FunctionCodeHandling function_code_handling",
        "const char* embedded_source",
        "SnapshotCreator& snapshot_creator",
        "Snapshot::SerializerFlags serializer_flags"
      ],
      "return_type": "v8::StartupData",
      "logic": "Creates a snapshot data blob using a SnapshotCreator, embedding source code if provided."
    },
    {
      "name": "CreateSnapshotDataBlobInternal",
      "parameters": [
        "v8::SnapshotCreator::FunctionCodeHandling function_code_handling",
        "const char* embedded_source",
        "Snapshot::SerializerFlags serializer_flags"
      ],
      "return_type": "v8::StartupData",
      "logic": "Creates a snapshot data blob using a SnapshotCreator, embedding source code if provided, and using default array buffer allocator."
    },
    {
      "name": "CreateSnapshotDataBlobInternalForInspectorTest",
      "parameters": [
        "v8::SnapshotCreator::FunctionCodeHandling function_code_handling",
        "const char* embedded_source"
      ],
      "return_type": "v8::StartupData",
      "logic": "Creates a snapshot data blob with specified function code handling and embedded source, primarily used for inspector tests."
    },
    {
      "name": "WarmUpSnapshotDataBlobInternal",
      "parameters": [
        "v8::StartupData cold_snapshot_blob",
        "const char* warmup_source"
      ],
      "return_type": "v8::StartupData",
      "logic": "Creates a warmed-up snapshot blob from a cold snapshot blob, running a warmup script in the process."
    },
    {
      "name": "ConvertSerializedObjectsToFixedArray",
      "parameters": [
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Converts the ArrayList of serialized objects in the isolate heap to a FixedArray."
    },
    {
      "name": "ConvertSerializedObjectsToFixedArray",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<NativeContext> context"
      ],
      "return_type": "void",
      "logic": "Converts the ArrayList of serialized objects associated with the NativeContext to a FixedArray."
    }
  ]
}