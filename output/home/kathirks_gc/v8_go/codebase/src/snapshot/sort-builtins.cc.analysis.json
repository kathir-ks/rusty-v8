{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/sort-builtins.cc",
  "imports": [
    "sort-builtins.h",
    "<algorithm>",
    "<fstream>",
    "src/snapshot/embedded/embedded-data-inl.h",
    "src/snapshot/embedded/embedded-data.h"
  ],
  "classes": [
    {
      "name": "Cluster",
      "properties": [
        "density_",
        "size_",
        "sorter_",
        "targets_"
      ],
      "methods": [
        {
          "name": "Cluster",
          "parameters": [
            "uint32_t density",
            "uint32_t size",
            "Builtin target",
            "BuiltinsSorter* sorter"
          ],
          "return_type": "void",
          "logic": "Constructor for the Cluster class. Initializes the density, size, sorter, and adds the target builtin to the cluster. Updates the builtin_cluster_map in the sorter."
        },
        {
          "name": "Merge",
          "parameters": [
            "Cluster* other"
          ],
          "return_type": "void",
          "logic": "Merges another cluster into the current cluster. Adds all builtins from the other cluster to the current cluster, updates the builtin_cluster_map, recalculates the density, updates the size, and clears the other cluster."
        },
        {
          "name": "time_approximation",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Approximates the time spent in the cluster by multiplying the size and density."
        }
      ]
    },
    {
      "name": "BuiltinsSorter",
      "properties": [
        "clusters_",
        "builtin_cluster_map_",
        "builtin_density_order_",
        "call_graph_",
        "builtin_density_map_",
        "builtin_size_"
      ],
      "methods": [
        {
          "name": "BuiltinsSorter",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the BuiltinsSorter class.  Currently empty."
        },
        {
          "name": "~BuiltinsSorter",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the BuiltinsSorter class. Deallocates all the Cluster objects in the clusters_ vector."
        },
        {
          "name": "InitializeClusters",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the clusters based on the builtin sizes and densities. Creates a new Cluster for each builtin (ASM and CPP builtins are skipped) and populates the clusters_ and builtin_density_order_ vectors. Sorts the builtin_density_order_ by density."
        },
        {
          "name": "FindBestPredecessorOf",
          "parameters": [
            "Builtin callee"
          ],
          "return_type": "Builtin",
          "logic": "Finds the best predecessor (caller) of a given builtin based on the call graph and edge probabilities.  Considers several constraints for merging clusters, such as combined size, density decrease, and existing cluster membership."
        },
        {
          "name": "MergeBestPredecessors",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through the sorted builtin density order and merges each builtin's cluster with the cluster of its best predecessor, as determined by FindBestPredecessorOf."
        },
        {
          "name": "SortClusters",
          "parameters": [],
          "return_type": "void",
          "logic": "Sorts the clusters_ vector by density in descending order and removes empty clusters (clusters with no targets)."
        },
        {
          "name": "ProcessBlockCountLineInfo",
          "parameters": [
            "std::istringstream& line_stream",
            "std::unordered_map<std::string, Builtin>& name2id"
          ],
          "return_type": "void",
          "logic": "Processes a line from the profiling file that represents a normalized execution count of a block with a call. Extracts the caller, block ID, and normalized count from the line and updates the call graph with the call probabilities."
        },
        {
          "name": "ProcessBuiltinDensityLineInfo",
          "parameters": [
            "std::istringstream& line_stream",
            "std::unordered_map<std::string, Builtin>& name2id"
          ],
          "return_type": "void",
          "logic": "Processes a line from the profiling file that represents the normalized execution count for block 0 of a builtin, taking it as density of the builtin. Extracts the builtin name and density from the line and updates the builtin_density_map_."
        },
        {
          "name": "InitializeCallGraph",
          "parameters": [
            "const char* profiling_file",
            "const std::vector<uint32_t>& size"
          ],
          "return_type": "void",
          "logic": "Initializes the call graph from the given profiling file. Reads the file line by line, processing builtin density and block count information.  Populates name2id map for builtin name to ID conversion."
        },
        {
          "name": "SortBuiltins",
          "parameters": [
            "const char* profiling_file",
            "const std::vector<uint32_t>& builtin_size"
          ],
          "return_type": "std::vector<Builtin>",
          "logic": "Main function to sort builtins. It first initializes the call graph, then clusters the builtins, merges best predecessors, sorts the clusters, and finally returns the sorted builtin order. Functions in clusters are added first and then remaining functions"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "AddBuiltinIfNotProcessed",
      "parameters": [
        "Builtin builtin",
        "std::vector<Builtin>& order",
        "std::unordered_set<Builtin>& processed_builtins"
      ],
      "return_type": "bool",
      "logic": "Adds a builtin to the order vector if it has not already been processed. Returns true if the builtin was added, false otherwise."
    }
  ]
}