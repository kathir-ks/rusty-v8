{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/context-serializer.cc",
  "imports": [
    "src/snapshot/context-serializer.h",
    "src/api/api-inl.h",
    "src/execution/microtask-queue.h",
    "src/heap/combined-heap.h",
    "src/numbers/math-random.h",
    "src/objects/embedder-data-array-inl.h",
    "src/objects/js-objects.h",
    "src/objects/objects-inl.h",
    "src/objects/slots.h",
    "src/snapshot/serializer-deserializer.h",
    "src/snapshot/startup-serializer.h"
  ],
  "classes": [
    {
      "name": "SanitizeNativeContextScope",
      "properties": [
        "native_context_",
        "microtask_queue_external_pointer_",
        "no_gc_"
      ],
      "methods": [
        {
          "name": "SanitizeNativeContextScope",
          "parameters": [
            "Isolate* isolate",
            "Tagged<NativeContext> native_context",
            "bool allow_active_isolate_for_testing",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "void",
          "logic": "Constructor. Clears the microtask queue's external pointer content for serialization and stores it temporarily."
        },
        {
          "name": "~SanitizeNativeContextScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Restores the microtask queue's external pointer content after serialization."
        }
      ]
    },
    {
      "name": "ContextSerializer",
      "properties": [
        "startup_serializer_",
        "serialize_embedder_fields_",
        "can_be_rehashed_",
        "context_"
      ],
      "methods": [
        {
          "name": "ContextSerializer",
          "parameters": [
            "Isolate* isolate",
            "Snapshot::SerializerFlags flags",
            "StartupSerializer* startup_serializer",
            "SerializeEmbedderFieldsCallback callback"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the ContextSerializer with the isolate, flags, startup serializer, and embedder fields callback."
        },
        {
          "name": "~ContextSerializer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Outputs serialization statistics."
        },
        {
          "name": "Serialize",
          "parameters": [
            "Tagged<Context>* o",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "void",
          "logic": "Serializes a NativeContext, taking care of global proxy, math random state, embedder fields, and external references. Prepares the context for serialization by clearing certain fields, serializes deferred objects and ensures data consistency across snapshots."
        },
        {
          "name": "SerializeObjectImpl",
          "parameters": [
            "Handle<HeapObject> obj",
            "SlotType slot_type"
          ],
          "return_type": "void",
          "logic": "Serializes a HeapObject, handling hot objects, root objects, back references, read-only object references, shared heap object cache, startup object cache, feedback vectors, JSObjects with embedder fields, JSFunctions, and EmbedderDataArrays."
        },
        {
          "name": "ShouldBeInTheStartupObjectCache",
          "parameters": [
            "Tagged<HeapObject> o"
          ],
          "return_type": "bool",
          "logic": "Determines whether a HeapObject should be placed in the startup object cache during serialization. Used to cache objects common across contexts."
        },
        {
          "name": "ShouldBeInTheSharedObjectCache",
          "parameters": [
            "Tagged<HeapObject> o"
          ],
          "return_type": "bool",
          "logic": "Determines whether a HeapObject should be placed in the shared object cache during serialization, which is used for storing internalized strings."
        },
        {
          "name": "SerializeApiWrapperFields",
          "parameters": [
            "DirectHandle<JSObject> js_object"
          ],
          "return_type": "void",
          "logic": "Serializes API wrapper fields for JSObjects, using a provided callback to serialize the data. It determines whether serialization is required based on callback and cpp_heap_pointer existence."
        },
        {
          "name": "SerializeObjectWithEmbedderFields",
          "parameters": [
            "Handle<V8Type> data_holder",
            "int embedder_fields_count",
            "UserSerializerWrapper wrapper",
            "UserCallback user_callback",
            "ApiObjectType api_obj"
          ],
          "return_type": "void",
          "logic": "Handles serialization of embedder fields within an object by iterating each field, determining whether custom serialization is required via provided callback, stores the data in a separate sink, and restores the original state. "
        },
        {
          "name": "CheckRehashability",
          "parameters": [
            "Tagged<HeapObject> obj"
          ],
          "return_type": "void",
          "logic": "Checks whether a HeapObject needs rehashing and updates the rehashability flag accordingly."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "InternalFieldSerializeWrapper",
      "parameters": [
        "int index",
        "bool field_is_nullptr",
        "v8::SerializeInternalFieldsCallback user_callback",
        "v8::Local<v8::Object> api_obj"
      ],
      "return_type": "v8::StartupData",
      "logic": "Wrapper function for serializing internal fields of a JSObject. It checks if a user-provided serializer exists or if the field is null; if not, it returns a nullptr StartupData. If a serializer does exist, it is executed."
    },
    {
      "name": "ContextDataSerializeWrapper",
      "parameters": [
        "int index",
        "bool field_is_nullptr",
        "v8::SerializeContextDataCallback user_callback",
        "v8::Local<v8::Context> api_obj"
      ],
      "return_type": "v8::StartupData",
      "logic": "Wrapper function for serializing context data. If a serializer callback is not provided, returns empty startup data, otherwise calls user callback to serialize."
    }
  ]
}