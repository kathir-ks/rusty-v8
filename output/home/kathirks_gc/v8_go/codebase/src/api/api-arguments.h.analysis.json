{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/api/api-arguments.h",
  "imports": [
    "include/v8-template.h",
    "src/builtins/builtins-utils.h",
    "src/execution/isolate.h",
    "src/objects/slots.h",
    "src/objects/visitors.h"
  ],
  "classes": [
    {
      "name": "CustomArgumentsBase",
      "properties": [],
      "methods": [
        {
          "name": "CustomArgumentsBase",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "explicit inline",
          "logic": "Constructor for CustomArgumentsBase.  Takes an isolate as input.  Marked explicit to prevent implicit conversions."
        }
      ]
    },
    {
      "name": "CustomArguments",
      "properties": [
        "Address values_[T::kArgsLength]"
      ],
      "methods": [
        {
          "name": "~CustomArguments",
          "parameters": [],
          "return_type": "override",
          "logic": "Destructor for CustomArguments."
        },
        {
          "name": "IterateInstance",
          "parameters": [
            "RootVisitor* v"
          ],
          "return_type": "inline void override",
          "logic": "Visits the root pointers of the CustomArguments instance for garbage collection."
        },
        {
          "name": "CustomArguments",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "explicit inline",
          "logic": "Constructor for CustomArguments. Takes an isolate as input. Marked explicit to prevent implicit conversions."
        },
        {
          "name": "GetReturnValue",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Handle<V>",
          "logic": "Retrieves the return value from the CustomArguments."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "inline Isolate*",
          "logic": "Returns the isolate associated with the CustomArguments."
        },
        {
          "name": "slot_at",
          "parameters": [
            "int index"
          ],
          "return_type": "inline FullObjectSlot",
          "logic": "Returns the FullObjectSlot at the given index within the values_ array."
        }
      ]
    },
    {
      "name": "PropertyCallbackArguments",
      "properties": [
        "uint32_t index_",
        "uint32_t javascript_execution_counter_"
      ],
      "methods": [
        {
          "name": "PropertyCallbackArguments",
          "parameters": [
            "Isolate* isolate",
            "Tagged<Object> data",
            "Tagged<Object> self",
            "Tagged<JSObject> holder",
            "Maybe<ShouldThrow> should_throw"
          ],
          "return_type": "",
          "logic": "Constructor for PropertyCallbackArguments. Initializes the arguments for a property callback."
        },
        {
          "name": "~PropertyCallbackArguments",
          "parameters": [],
          "return_type": "inline",
          "logic": "Destructor for PropertyCallbackArguments."
        },
        {
          "name": "CallAccessorGetter",
          "parameters": [
            "DirectHandle<AccessorInfo> info",
            "DirectHandle<Name> name"
          ],
          "return_type": "inline DirectHandle<JSAny>",
          "logic": "Calls an accessor getter function."
        },
        {
          "name": "CallAccessorSetter",
          "parameters": [
            "DirectHandle<AccessorInfo> info",
            "DirectHandle<Name> name",
            "DirectHandle<Object> value"
          ],
          "return_type": "inline bool",
          "logic": "Calls an accessor setter function."
        },
        {
          "name": "CallNamedQuery",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "DirectHandle<Name> name"
          ],
          "return_type": "inline DirectHandle<Object>",
          "logic": "Calls a named query interceptor callback."
        },
        {
          "name": "CallNamedGetter",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "DirectHandle<Name> name"
          ],
          "return_type": "inline DirectHandle<JSAny>",
          "logic": "Calls a named getter interceptor callback."
        },
        {
          "name": "CallNamedSetter",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "DirectHandle<Name> name",
            "DirectHandle<Object> value"
          ],
          "return_type": "inline v8::Intercepted",
          "logic": "Calls a named setter interceptor callback."
        },
        {
          "name": "CallNamedDefiner",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "DirectHandle<Name> name",
            "const v8::PropertyDescriptor& desc"
          ],
          "return_type": "inline v8::Intercepted",
          "logic": "Calls a named definer interceptor callback."
        },
        {
          "name": "CallNamedDeleter",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "DirectHandle<Name> name"
          ],
          "return_type": "inline v8::Intercepted",
          "logic": "Calls a named deleter interceptor callback."
        },
        {
          "name": "CallNamedDescriptor",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "DirectHandle<Name> name"
          ],
          "return_type": "inline Handle<JSAny>",
          "logic": "Calls a named descriptor interceptor callback."
        },
        {
          "name": "CallNamedEnumerator",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor"
          ],
          "return_type": "inline DirectHandle<JSObjectOrUndefined>",
          "logic": "Calls a named enumerator interceptor callback."
        },
        {
          "name": "CallIndexedQuery",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "uint32_t index"
          ],
          "return_type": "inline DirectHandle<Object>",
          "logic": "Calls an indexed query interceptor callback."
        },
        {
          "name": "CallIndexedGetter",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "uint32_t index"
          ],
          "return_type": "inline DirectHandle<JSAny>",
          "logic": "Calls an indexed getter interceptor callback."
        },
        {
          "name": "CallIndexedSetter",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "uint32_t index",
            "DirectHandle<Object> value"
          ],
          "return_type": "inline v8::Intercepted",
          "logic": "Calls an indexed setter interceptor callback."
        },
        {
          "name": "CallIndexedDefiner",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "uint32_t index",
            "const v8::PropertyDescriptor& desc"
          ],
          "return_type": "inline v8::Intercepted",
          "logic": "Calls an indexed definer interceptor callback."
        },
        {
          "name": "CallIndexedDeleter",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "uint32_t index"
          ],
          "return_type": "inline v8::Intercepted",
          "logic": "Calls an indexed deleter interceptor callback."
        },
        {
          "name": "CallIndexedDescriptor",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor",
            "uint32_t index"
          ],
          "return_type": "inline Handle<JSAny>",
          "logic": "Calls an indexed descriptor interceptor callback."
        },
        {
          "name": "CallIndexedEnumerator",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor"
          ],
          "return_type": "inline DirectHandle<JSObjectOrUndefined>",
          "logic": "Calls an indexed enumerator interceptor callback."
        },
        {
          "name": "AcceptSideEffects",
          "parameters": [],
          "return_type": "inline void",
          "logic": "Accepts potential JavaScript side effects that might occur during the lifetime of this object."
        },
        {
          "name": "GetBooleanReturnValue",
          "parameters": [
            "v8::Intercepted intercepted",
            "const char* callback_kind_for_error_message",
            "bool ignore_return_value"
          ],
          "return_type": "inline Maybe<InterceptorResult>",
          "logic": "Converts the result of a Setter/Definer/Deleter interceptor callback to Maybe<InterceptorResult>."
        },
        {
          "name": "GetPropertyCallbackInfo",
          "parameters": [],
          "return_type": "const v8::PropertyCallbackInfo<T>&",
          "logic": "Returns the underlying v8::PropertyCallbackInfo object."
        },
        {
          "name": "ShouldThrowOnError",
          "parameters": [],
          "return_type": "bool",
          "logic": "Forwards ShouldThrowOnError() request to the underlying v8::PropertyCallbackInfo<> object."
        },
        {
          "name": "GetPropertyKey",
          "parameters": [
            "const PropertyCallbackInfo<T>& info"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Unofficial way of getting property key from v8::PropertyCallbackInfo<T>."
        },
        {
          "name": "GetPropertyKeyHandle",
          "parameters": [
            "const PropertyCallbackInfo<T>& info"
          ],
          "return_type": "Handle<Object>",
          "logic": "Unofficial way of getting property key handle from v8::PropertyCallbackInfo<T>."
        },
        {
          "name": "GetPropertyIndex",
          "parameters": [
            "const PropertyCallbackInfo<T>& info"
          ],
          "return_type": "uint32_t",
          "logic": "Returns index value passed to CallIndexedXXX()."
        },
        {
          "name": "CallPropertyEnumerator",
          "parameters": [
            "DirectHandle<InterceptorInfo> interceptor"
          ],
          "return_type": "inline DirectHandle<JSObjectOrUndefined>",
          "logic": "Calls property enumerator."
        },
        {
          "name": "holder",
          "parameters": [],
          "return_type": "inline Tagged<JSObject>",
          "logic": "Returns holder."
        },
        {
          "name": "receiver",
          "parameters": [],
          "return_type": "inline Tagged<Object>",
          "logic": "Returns receiver."
        }
      ]
    },
    {
      "name": "FunctionCallbackArguments",
      "properties": [
        "Address* argv_",
        "int const argc_"
      ],
      "methods": [
        {
          "name": "FunctionCallbackArguments",
          "parameters": [
            "Isolate* isolate",
            "Tagged<FunctionTemplateInfo> target",
            "Tagged<HeapObject> new_target",
            "Address* argv",
            "int argc"
          ],
          "return_type": "",
          "logic": "Constructor for FunctionCallbackArguments. Initializes the arguments for a function callback."
        },
        {
          "name": "CallOrConstruct",
          "parameters": [
            "Tagged<FunctionTemplateInfo> function",
            "bool is_construct"
          ],
          "return_type": "inline DirectHandle<Object>",
          "logic": "Calls the old or new style callbacks depending on which one has been registered."
        },
        {
          "name": "GetTarget",
          "parameters": [
            "const FunctionCallbackInfo<T>& info"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Unofficial way of getting target FunctionTemplateInfo from v8::FunctionCallbackInfo<T>."
        }
      ]
    }
  ],
  "functions": []
}