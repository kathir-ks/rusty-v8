{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/flags/flags.h",
  "imports": [
    "<optional>",
    "src/common/globals.h",
    "src/wasm/wasm-limits.h"
  ],
  "classes": [
    {
      "name": "FlagValue",
      "properties": [
        "T value_"
      ],
      "methods": [
        {
          "name": "FlagValue",
          "parameters": [
            "T value"
          ],
          "return_type": "FlagValue",
          "logic": "Constructor for the FlagValue class, initializes the value_ member with the given value."
        },
        {
          "name": "operator T",
          "parameters": [],
          "return_type": "T",
          "logic": "Implicit conversion operator to the underlying type T. Returns the current value_."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the current value_ as a constexpr."
        },
        {
          "name": "operator=",
          "parameters": [
            "T new_value"
          ],
          "return_type": "FlagValue<T>&",
          "logic": "Assignment operator. Assigns a new value to the FlagValue, resets the flag hash if the new value is different from the old, and returns a reference to the FlagValue."
        }
      ]
    },
    {
      "name": "FlagValues",
      "properties": [],
      "methods": [
        {
          "name": "FlagValues",
          "parameters": [],
          "return_type": "FlagValues",
          "logic": "Default constructor for the FlagValues struct."
        }
      ]
    },
    {
      "name": "FlagList",
      "properties": [],
      "methods": [
        {
          "name": "SetFlagsFromCommandLine",
          "parameters": [
            "int* argc",
            "char** argv",
            "bool remove_flags",
            "FlagList::HelpOptions help_options"
          ],
          "return_type": "int",
          "logic": "Parses command-line arguments to set flag values.  It can remove recognized flags and their values from the argument list.  Returns an error index or 0 on success. Handles help requests."
        },
        {
          "name": "SetFlagsFromString",
          "parameters": [
            "const char* str",
            "size_t len"
          ],
          "return_type": "int",
          "logic": "Parses a string containing flag settings. It splits the string and then uses SetFlagsFromCommandLine to set flags."
        },
        {
          "name": "FreezeFlags",
          "parameters": [],
          "return_type": "void",
          "logic": "Freezes the current flag values, disallowing further changes via the API."
        },
        {
          "name": "IsFrozen",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the flags are currently frozen."
        },
        {
          "name": "ReleaseDynamicAllocations",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees dynamically allocated memory for strings used as flag values.  Called during teardown."
        },
        {
          "name": "PrintHelp",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints help information to stdout, including flag names, types, and default values."
        },
        {
          "name": "PrintValues",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the current values of all flags."
        },
        {
          "name": "PrintFeatureFlagsJSON",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints JS and Wasm feature flags categorized as JSON.  Used by scripts to manage flags in test files."
        },
        {
          "name": "ResolveContradictionsWhenFuzzing",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets contradictory flags set during fuzzing."
        },
        {
          "name": "EnforceFlagImplications",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets flags as a consequence of other flags (flag implications)."
        },
        {
          "name": "Hash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates and returns a hash of the current flag values."
        },
        {
          "name": "ResetFlagHash",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the cached flag hash, to be called when a flag changes."
        }
      ],
      "HelpOptions": [
        {
          "name": "HelpOptions",
          "properties": [
            "ExitBehavior exit_behavior_",
            "const char* usage_"
          ],
          "methods": [
            {
              "name": "HelpOptions",
              "parameters": [
                "ExitBehavior exit_behavior",
                "const char* usage"
              ],
              "return_type": "HelpOptions",
              "logic": "Constructor for the HelpOptions class"
            },
            {
              "name": "ShouldExit",
              "parameters": [],
              "return_type": "bool",
              "logic": "Returns true if the program should exit after printing help information (if --help was specified)."
            },
            {
              "name": "HasUsage",
              "parameters": [],
              "return_type": "bool",
              "logic": "Returns true if a usage string is provided."
            },
            {
              "name": "usage",
              "parameters": [],
              "return_type": "const char*",
              "logic": "Returns a usage string pointer."
            }
          ]
        }
      ]
    }
  ],
  "functions": []
}