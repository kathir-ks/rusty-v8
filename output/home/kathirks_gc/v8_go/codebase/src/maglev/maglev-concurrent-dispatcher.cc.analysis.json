{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-concurrent-dispatcher.cc",
  "imports": [
    "src/maglev/maglev-concurrent-dispatcher.h",
    "src/base/fpu.h",
    "src/codegen/compiler.h",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/js-heap-broker.h",
    "src/execution/isolate.h",
    "src/execution/local-isolate-inl.h",
    "src/flags/flags.h",
    "src/handles/handles-inl.h",
    "src/handles/persistent-handles.h",
    "src/heap/local-heap-inl.h",
    "src/heap/parked-scope.h",
    "src/maglev/maglev-code-generator.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-compiler.h",
    "src/maglev/maglev-graph-labeller.h",
    "src/maglev/maglev-pipeline-statistics.h",
    "src/objects/js-function-inl.h",
    "src/utils/identity-map.h",
    "src/utils/locked-queue-inl.h"
  ],
  "classes": [
    {
      "name": "LocalIsolateScope",
      "properties": [
        "info_"
      ],
      "methods": [
        {
          "name": "LocalIsolateScope",
          "parameters": [
            "MaglevCompilationInfo* info",
            "LocalIsolate* local_isolate"
          ],
          "return_type": "LocalIsolateScope",
          "logic": "Constructor. Attaches persistent handles to the LocalHeap inside {local_isolate} using the provided info."
        },
        {
          "name": "~LocalIsolateScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Detaches persistent handles from LocalHeap using the provided info."
        }
      ]
    },
    {
      "name": "ExportedMaglevCompilationInfo",
      "properties": [],
      "methods": [
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone of the compilation info."
        },
        {
          "name": "set_canonical_handles",
          "parameters": [
            "std::unique_ptr<CanonicalHandlesMap>&& canonical_handles"
          ],
          "return_type": "void",
          "logic": "Sets the canonical handles for compilation info."
        }
      ]
    },
    {
      "name": "MaglevCompilationJob",
      "properties": [
        "info_",
        "zone_stats_",
        "pipeline_statistics_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "Handle<JSFunction> function",
            "BytecodeOffset osr_offset"
          ],
          "return_type": "std::unique_ptr<MaglevCompilationJob>",
          "logic": "Static factory method that creates a new MaglevCompilationJob."
        },
        {
          "name": "MaglevCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<MaglevCompilationInfo>&& info"
          ],
          "return_type": "MaglevCompilationJob",
          "logic": "Constructor. Initializes the compilation job with compilation info."
        },
        {
          "name": "~MaglevCompilationJob",
          "parameters": [],
          "return_type": "MaglevCompilationJob",
          "logic": "Default Destructor."
        },
        {
          "name": "PrepareJobImpl",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "CompilationJob::Status",
          "logic": "Prepares the compilation job. Ensures source positions are available if needed."
        },
        {
          "name": "ExecuteJobImpl",
          "parameters": [
            "RuntimeCallStats* stats",
            "LocalIsolate* local_isolate"
          ],
          "return_type": "CompilationJob::Status",
          "logic": "Executes the Maglev compilation. Compiles the code using the MaglevCompiler."
        },
        {
          "name": "FinalizeJobImpl",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "CompilationJob::Status",
          "logic": "Finalizes the compilation job. Generates machine code from the compiled graph."
        },
        {
          "name": "CollectRetainedMaps",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Code> code"
          ],
          "return_type": "GlobalHandleVector<Map>",
          "logic": "Collects maps retained by the generated code."
        },
        {
          "name": "DisposeOnMainThread",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Disposes of the compilation job on the main thread, clearing resources like canonical handles."
        },
        {
          "name": "code",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<Code>",
          "logic": "Returns the generated code for the compilation job."
        },
        {
          "name": "function",
          "parameters": [],
          "return_type": "IndirectHandle<JSFunction>",
          "logic": "Returns the top-level JSFunction associated with the compilation job."
        },
        {
          "name": "osr_offset",
          "parameters": [],
          "return_type": "BytecodeOffset",
          "logic": "Returns the OSR offset for the compilation job."
        },
        {
          "name": "is_osr",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the compilation job is an OSR job."
        },
        {
          "name": "specialize_to_function_context",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the job needs to specialize to a function context."
        },
        {
          "name": "RecordCompilationStats",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Records compilation statistics to the isolate counters."
        },
        {
          "name": "trace_id",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Generates a trace ID for the compilation job."
        },
        {
          "name": "BeginPhaseKind",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Begins a tracing phase for pipeline statistics."
        },
        {
          "name": "EndPhaseKind",
          "parameters": [],
          "return_type": "void",
          "logic": "Ends a tracing phase for pipeline statistics."
        }
      ]
    },
    {
      "name": "MaglevConcurrentDispatcher::JobTask",
      "properties": [
        "dispatcher_"
      ],
      "methods": [
        {
          "name": "JobTask",
          "parameters": [
            "MaglevConcurrentDispatcher* dispatcher"
          ],
          "return_type": "JobTask",
          "logic": "Constructor. Initializes the JobTask with a pointer to the dispatcher."
        },
        {
          "name": "Run",
          "parameters": [
            "JobDelegate* delegate"
          ],
          "return_type": "void",
          "logic": "Runs the job task. Dequeues and executes Maglev compilation jobs from the incoming queue."
        },
        {
          "name": "GetMaxConcurrency",
          "parameters": [
            "size_t worker_count"
          ],
          "return_type": "size_t",
          "logic": "Calculates the maximum concurrency for the task based on the number of jobs and available threads."
        }
      ]
    },
    {
      "name": "MaglevConcurrentDispatcher",
      "properties": [
        "isolate_",
        "incoming_queue_",
        "outgoing_queue_",
        "destruction_queue_",
        "job_handle_"
      ],
      "methods": [
        {
          "name": "MaglevConcurrentDispatcher",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "MaglevConcurrentDispatcher",
          "logic": "Constructor. Initializes the dispatcher and potentially starts the concurrent compilation job if enabled."
        },
        {
          "name": "~MaglevConcurrentDispatcher",
          "parameters": [],
          "return_type": "MaglevConcurrentDispatcher",
          "logic": "Destructor. Cancels the compilation job handle and waits for completion."
        },
        {
          "name": "EnqueueJob",
          "parameters": [
            "std::unique_ptr<MaglevCompilationJob>&& job"
          ],
          "return_type": "void",
          "logic": "Enqueues a Maglev compilation job for processing by the background worker."
        },
        {
          "name": "FinalizeFinishedJobs",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes completed Maglev compilation jobs from the outgoing queue. Disposes of the job after finalization."
        },
        {
          "name": "AwaitCompileJobs",
          "parameters": [],
          "return_type": "void",
          "logic": "Waits for all queued and running compile jobs to finish."
        },
        {
          "name": "Flush",
          "parameters": [
            "BlockingBehavior behavior"
          ],
          "return_type": "void",
          "logic": "Flushes all queues.  If blocking is specified, waits for the queues to empty."
        },
        {
          "name": "is_enabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks whether concurrent maglev compilation is enabled (if a JobHandle is associated with this dispatcher)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "JSHeapBroker::AttachLocalIsolateForMaglev",
      "parameters": [
        "maglev::MaglevCompilationInfo* info",
        "LocalIsolate* local_isolate"
      ],
      "return_type": "void",
      "logic": "Attaches a LocalIsolate to the JSHeapBroker for Maglev compilation."
    },
    {
      "name": "JSHeapBroker::DetachLocalIsolateForMaglev",
      "parameters": [
        "maglev::MaglevCompilationInfo* info"
      ],
      "return_type": "void",
      "logic": "Detaches a LocalIsolate from the JSHeapBroker after Maglev compilation."
    },
    {
      "name": "CreatePipelineStatistics",
      "parameters": [
        "Isolate* isolate",
        "MaglevCompilationInfo* compilation_info",
        "compiler::ZoneStats* zone_stats"
      ],
      "return_type": "MaglevPipelineStatistics*",
      "logic": "Creates a MaglevPipelineStatistics object if tracing is enabled or the appropriate flags are set."
    }
  ]
}