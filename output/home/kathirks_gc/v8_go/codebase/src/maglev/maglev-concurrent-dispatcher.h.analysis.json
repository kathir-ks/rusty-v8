{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-concurrent-dispatcher.h",
  "imports": [
    "<memory>",
    "src/codegen/compiler.h",
    "src/maglev/maglev-pipeline-statistics.h",
    "src/utils/locked-queue.h"
  ],
  "classes": [
    {
      "name": "ExportedMaglevCompilationInfo",
      "properties": [
        "MaglevCompilationInfo* const info_"
      ],
      "methods": [
        {
          "name": "ExportedMaglevCompilationInfo",
          "parameters": [
            "MaglevCompilationInfo* info"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the info_ pointer."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with the compilation info."
        },
        {
          "name": "set_canonical_handles",
          "parameters": [
            "std::unique_ptr<CanonicalHandlesMap>&& canonical_handles"
          ],
          "return_type": "void",
          "logic": "Sets the canonical handles for the compilation info."
        }
      ]
    },
    {
      "name": "MaglevCompilationJob",
      "properties": [
        "const std::unique_ptr<MaglevCompilationInfo> info_",
        "compiler::ZoneStats zone_stats_",
        "std::unique_ptr<MaglevPipelineStatistics> pipeline_statistics_",
        "BailoutReason bailout_reason_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "Handle<JSFunction> function",
            "BytecodeOffset osr_offset"
          ],
          "return_type": "std::unique_ptr<MaglevCompilationJob>",
          "logic": "Static factory method to create a new MaglevCompilationJob."
        },
        {
          "name": "~MaglevCompilationJob",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the MaglevCompilationJob."
        },
        {
          "name": "PrepareJobImpl",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Status",
          "logic": "Prepares the compilation job for execution.  Overridden from OptimizedCompilationJob."
        },
        {
          "name": "ExecuteJobImpl",
          "parameters": [
            "RuntimeCallStats* stats",
            "LocalIsolate* local_isolate"
          ],
          "return_type": "Status",
          "logic": "Executes the compilation job. Overridden from OptimizedCompilationJob."
        },
        {
          "name": "FinalizeJobImpl",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Status",
          "logic": "Finalizes the compilation job. Overridden from OptimizedCompilationJob."
        },
        {
          "name": "function",
          "parameters": [],
          "return_type": "IndirectHandle<JSFunction>",
          "logic": "Returns the JSFunction associated with the job."
        },
        {
          "name": "code",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<Code>",
          "logic": "Returns the compiled Code object (if available)."
        },
        {
          "name": "osr_offset",
          "parameters": [],
          "return_type": "BytecodeOffset",
          "logic": "Returns the offset of the on-stack replacement (OSR) bytecode."
        },
        {
          "name": "is_osr",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether the job is an OSR compilation."
        },
        {
          "name": "specialize_to_function_context",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether the compilation should be specialized to the function context."
        },
        {
          "name": "time_taken_to_prepare",
          "parameters": [],
          "return_type": "base::TimeDelta",
          "logic": "Returns the time taken to prepare the job."
        },
        {
          "name": "time_taken_to_execute",
          "parameters": [],
          "return_type": "base::TimeDelta",
          "logic": "Returns the time taken to execute the job."
        },
        {
          "name": "time_taken_to_finalize",
          "parameters": [],
          "return_type": "base::TimeDelta",
          "logic": "Returns the time taken to finalize the job."
        },
        {
          "name": "RecordCompilationStats",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Records compilation statistics to the Isolate."
        },
        {
          "name": "DisposeOnMainThread",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Disposes of resources on the main thread."
        },
        {
          "name": "trace_id",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns a globally unique ID for tracing purposes."
        },
        {
          "name": "MaglevCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<MaglevCompilationInfo>&& info"
          ],
          "return_type": "void",
          "logic": "Private constructor that initializes the info_ pointer."
        },
        {
          "name": "BeginPhaseKind",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Starts a compilation phase."
        },
        {
          "name": "EndPhaseKind",
          "parameters": [],
          "return_type": "void",
          "logic": "Ends a compilation phase."
        },
        {
          "name": "CollectRetainedMaps",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Code> code"
          ],
          "return_type": "GlobalHandleVector<Map>",
          "logic": "Collects retained maps from the compiled code."
        },
        {
          "name": "info",
          "parameters": [],
          "return_type": "MaglevCompilationInfo*",
          "logic": "Returns the MaglevCompilationInfo pointer."
        }
      ]
    },
    {
      "name": "MaglevConcurrentDispatcher",
      "properties": [
        "Isolate* const isolate_",
        "std::unique_ptr<JobHandle> job_handle_",
        "QueueT incoming_queue_",
        "QueueT outgoing_queue_",
        "QueueT destruction_queue_"
      ],
      "methods": [
        {
          "name": "MaglevConcurrentDispatcher",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for MaglevConcurrentDispatcher, initializes the isolate pointer."
        },
        {
          "name": "~MaglevConcurrentDispatcher",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for MaglevConcurrentDispatcher."
        },
        {
          "name": "EnqueueJob",
          "parameters": [
            "std::unique_ptr<MaglevCompilationJob>&& job"
          ],
          "return_type": "void",
          "logic": "Enqueues a compilation job to the incoming queue. Called from the main thread."
        },
        {
          "name": "FinalizeFinishedJobs",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes any compilation jobs that have finished. Called from the main thread."
        },
        {
          "name": "AwaitCompileJobs",
          "parameters": [],
          "return_type": "void",
          "logic": "Waits for all compile jobs to finish."
        },
        {
          "name": "Flush",
          "parameters": [
            "BlockingBehavior blocking_behavior"
          ],
          "return_type": "void",
          "logic": "Flushes the compilation queues, potentially blocking."
        },
        {
          "name": "is_enabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the dispatcher is enabled (i.e., a JobHandle exists)."
        }
      ]
    }
  ],
  "functions": []
}