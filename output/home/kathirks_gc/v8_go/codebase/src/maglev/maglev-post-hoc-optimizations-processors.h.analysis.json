{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-post-hoc-optimizations-processors.h",
  "imports": [
    "src/compiler/heap-refs.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-graph-builder.h",
    "src/maglev/maglev-graph-printer.h",
    "src/maglev/maglev-graph-processor.h",
    "src/maglev/maglev-graph.h",
    "src/maglev/maglev-interpreter-frame-state.h",
    "src/maglev/maglev-ir.h",
    "src/objects/js-function.h"
  ],
  "classes": [
    {
      "name": "LoopOptimizationProcessor",
      "properties": [
        "zone",
        "current_block",
        "loop_effects",
        "was_deoptimized"
      ],
      "methods": [
        {
          "name": "LoopOptimizationProcessor",
          "parameters": [
            "MaglevGraphBuilder* builder"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the processor with a graph builder and sets `was_deoptimized` flag based on feedback from the compilation unit."
        },
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "No-op graph pre-processing step."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "No-op phi post-processing step."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "No-op basic block post-processing step."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Sets the current block, extracts and stores loop effects if the block is a loop, otherwise clears the stored effects. Returns kContinue if the block requires further processing, kSkip otherwise."
        },
        {
          "name": "IsLoopPhi",
          "parameters": [
            "Node* input"
          ],
          "return_type": "bool",
          "logic": "Checks if the given node is a loop phi for the current basic block."
        },
        {
          "name": "CanHoist",
          "parameters": [
            "Node* candidate"
          ],
          "return_type": "bool",
          "logic": "Checks if a candidate node can be hoisted out of the current loop. It verifies conditions like a unique loop entry, inputs not defined inside the loop, and no hoisting over checks."
        },
        {
          "name": "Process",
          "parameters": [
            "LoadTaggedFieldForContextSlot* ltf",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a LoadTaggedFieldForContextSlot node, determining whether it can be hoisted based on loop effects and whether the object is a loop phi.  Returns kHoist if can be hoisted, otherwise kContinue."
        },
        {
          "name": "Process",
          "parameters": [
            "LoadTaggedFieldForProperty* ltf",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a LoadTaggedFieldForProperty node by delegating to ProcessNamedLoad."
        },
        {
          "name": "Process",
          "parameters": [
            "StringLength* len",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a StringLength node by delegating to ProcessNamedLoad."
        },
        {
          "name": "Process",
          "parameters": [
            "LoadTypedArrayLength* len",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a LoadTypedArrayLength node by delegating to ProcessNamedLoad."
        },
        {
          "name": "ProcessNamedLoad",
          "parameters": [
            "Node* load",
            "ValueNode* object",
            "KnownNodeAspects::LoadedPropertyMapKey name"
          ],
          "return_type": "ProcessResult",
          "logic": "Determines whether a named load can be hoisted based on loop effects, whether the object is a loop phi, and the properties of the loop. Returns kHoist if can be hoisted, otherwise kContinue."
        },
        {
          "name": "Process",
          "parameters": [
            "CheckMaps* maps",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a CheckMaps node, attempting to hoist it out of the loop if the function hasn't deoptimized previously and if certain loop effects are clear. Returns kHoist if hoisted, kSkipBlock if it should be skipped."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Generic node processing. If node can eager deopt, disable loop effects. Returns kSkipBlock if deopt is possible, kContinue otherwise."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "No-op graph post-processing step."
        }
      ]
    },
    {
      "name": "AnyUseMarkingProcessor",
      "properties": [
        "stores_to_allocations_"
      ],
      "methods": [
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "No-op graph pre-processing step."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "No-op basic block post-processing step."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Continues the processing of the current block.  Returns kContinue."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "No-op phi post-processing step."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a generic node. If the node is a ValueNode and is unused, removes it from the graph and drops use of its inputs. For stores to inline allocations, store it to the member variable stores_to_allocations_. Returns kRemove if the node is removed, kContinue otherwise."
        },
        {
          "name": "Process",
          "parameters": [
            "Dead* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "In debug builds, this method is used to assert that dead nodes are not being processed."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Runs escape analysis and then drops uses of values in stores to captured allocations."
        },
        {
          "name": "EscapeAllocation",
          "parameters": [
            "Graph* graph",
            "InlinedAllocation* alloc",
            "Graph::SmallAllocationVector& deps"
          ],
          "return_type": "void",
          "logic": "Recursively marks an inlined allocation and its dependencies as escaped."
        },
        {
          "name": "VerifyEscapeAnalysis",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "In debug builds, verifies that the escape analysis has reached a fixpoint."
        },
        {
          "name": "RunEscapeAnalysis",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Runs escape analysis on the graph to determine which inlined allocations escape and sets appropriate flags."
        },
        {
          "name": "DropUseOfValueInStoresToCapturedAllocations",
          "parameters": [],
          "return_type": "void",
          "logic": "Drops uses of values in stores to allocations that were determined to be captured (non-escaping) during escape analysis."
        },
        {
          "name": "DropInputUses",
          "parameters": [
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Removes a use from the given input and recursively removes uses from the input node if it becomes unused."
        },
        {
          "name": "DropInputUses",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Iterates through the inputs of a node and drops their uses, and marks the input as visited. The function recursively calls DropInputUses"
        }
      ]
    },
    {
      "name": "DeadNodeSweepingProcessor",
      "properties": [
        "labeller_"
      ],
      "methods": [
        {
          "name": "DeadNodeSweepingProcessor",
          "parameters": [
            "MaglevCompilationInfo* compilation_info"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the processor, getting graph labeller if available."
        },
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "No-op graph pre-processing step."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "No-op graph post-processing step."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "No-op basic block post-processing step."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Continues the processing of the current block.  Returns kContinue."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "No-op phi post-processing step."
        },
        {
          "name": "Process",
          "parameters": [
            "AllocationBlock* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes an AllocationBlock. Sets offset and size based on whether allocations in allocation list have escaped. Removes the allocation if the size is 0."
        },
        {
          "name": "Process",
          "parameters": [
            "InlinedAllocation* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes an InlinedAllocation. Removes inlined allocation if it has not escaped."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a generic node, removing unused ValueNodes and stores to non-escaping allocations.  Returns kRemove if the node is removed, kContinue otherwise."
        }
      ]
    }
  ],
  "functions": [],
  "constants": []
}