{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-graph.h",
  "imports": [
    "<vector>",
    "src/codegen/optimized-compilation-info.h",
    "src/compiler/heap-refs.h",
    "src/maglev/maglev-basic-block.h",
    "src/maglev/maglev-ir.h"
  ],
  "classes": [
    {
      "name": "Graph",
      "properties": [
        "tagged_stack_slots_",
        "untagged_stack_slots_",
        "max_call_stack_args_",
        "max_deopted_stack_size_",
        "blocks_",
        "root_",
        "osr_values_",
        "smi_",
        "tagged_index_",
        "int32_",
        "uint32_",
        "float_",
        "external_references_",
        "parameters_",
        "inlineable_calls_",
        "allocations_escape_map_",
        "allocations_elide_map_",
        "register_inputs_",
        "constants_",
        "trusted_constants_",
        "inlined_functions_",
        "node_buffer_",
        "has_recursive_calls_",
        "total_inlined_bytecode_size_",
        "total_peeled_bytecode_size_",
        "is_osr_",
        "object_ids_",
        "has_resumable_generator_",
        "scope_infos_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Zone* zone",
            "bool is_osr"
          ],
          "return_type": "Graph*",
          "logic": "Allocates a new Graph object in the provided zone."
        },
        {
          "name": "Graph",
          "parameters": [
            "Zone* zone",
            "bool is_osr"
          ],
          "return_type": "void",
          "logic": "Constructor for the Graph class, initializes member variables."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int i"
          ],
          "return_type": "BasicBlock*",
          "logic": "Overloads the [] operator to access BasicBlock objects from the blocks_ vector."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int i"
          ],
          "return_type": "const BasicBlock*",
          "logic": "Overloads the [] operator (const version) to access BasicBlock objects from the blocks_ vector."
        },
        {
          "name": "num_blocks",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of basic blocks in the graph."
        },
        {
          "name": "blocks",
          "parameters": [],
          "return_type": "ZoneVector<BasicBlock*>&",
          "logic": "Returns a reference to the blocks_ vector."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "BlockConstIterator",
          "logic": "Returns a const iterator to the beginning of the blocks_ vector."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "BlockConstIterator",
          "logic": "Returns a const iterator to the end of the blocks_ vector."
        },
        {
          "name": "rbegin",
          "parameters": [],
          "return_type": "BlockConstReverseIterator",
          "logic": "Returns a const reverse iterator to the beginning of the blocks_ vector."
        },
        {
          "name": "rend",
          "parameters": [],
          "return_type": "BlockConstReverseIterator",
          "logic": "Returns a const reverse iterator to the end of the blocks_ vector."
        },
        {
          "name": "last_block",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the last BasicBlock in the graph."
        },
        {
          "name": "Add",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Adds a BasicBlock to the blocks_ vector."
        },
        {
          "name": "set_blocks",
          "parameters": [
            "ZoneVector<BasicBlock*> blocks"
          ],
          "return_type": "void",
          "logic": "Sets the blocks_ vector to the provided vector."
        },
        {
          "name": "tagged_stack_slots",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the number of tagged stack slots."
        },
        {
          "name": "untagged_stack_slots",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the number of untagged stack slots."
        },
        {
          "name": "max_call_stack_args",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the maximum number of arguments passed on the stack in a call."
        },
        {
          "name": "max_deopted_stack_size",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the maximum size of the stack when deoptimizing."
        },
        {
          "name": "set_tagged_stack_slots",
          "parameters": [
            "uint32_t stack_slots"
          ],
          "return_type": "void",
          "logic": "Sets the number of tagged stack slots."
        },
        {
          "name": "set_untagged_stack_slots",
          "parameters": [
            "uint32_t stack_slots"
          ],
          "return_type": "void",
          "logic": "Sets the number of untagged stack slots."
        },
        {
          "name": "set_max_call_stack_args",
          "parameters": [
            "uint32_t stack_slots"
          ],
          "return_type": "void",
          "logic": "Sets the maximum number of arguments passed on the stack in a call."
        },
        {
          "name": "set_max_deopted_stack_size",
          "parameters": [
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Sets the maximum size of the stack when deoptimizing."
        },
        {
          "name": "total_inlined_bytecode_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the total size of inlined bytecode."
        },
        {
          "name": "add_inlined_bytecode_size",
          "parameters": [
            "int size"
          ],
          "return_type": "void",
          "logic": "Adds to the total size of inlined bytecode."
        },
        {
          "name": "total_peeled_bytecode_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the total size of peeled bytecode."
        },
        {
          "name": "add_peeled_bytecode_size",
          "parameters": [
            "int size"
          ],
          "return_type": "void",
          "logic": "Adds to the total size of peeled bytecode."
        },
        {
          "name": "root",
          "parameters": [],
          "return_type": "ZoneMap<RootIndex, RootConstant*>&",
          "logic": "Returns a reference to the root_ map."
        },
        {
          "name": "osr_values",
          "parameters": [],
          "return_type": "ZoneVector<InitialValue*>&",
          "logic": "Returns a reference to the osr_values_ vector."
        },
        {
          "name": "smi",
          "parameters": [],
          "return_type": "ZoneMap<int, SmiConstant*>&",
          "logic": "Returns a reference to the smi_ map."
        },
        {
          "name": "tagged_index",
          "parameters": [],
          "return_type": "ZoneMap<int, TaggedIndexConstant*>&",
          "logic": "Returns a reference to the tagged_index_ map."
        },
        {
          "name": "int32",
          "parameters": [],
          "return_type": "ZoneMap<int32_t, Int32Constant*>&",
          "logic": "Returns a reference to the int32_ map."
        },
        {
          "name": "uint32",
          "parameters": [],
          "return_type": "ZoneMap<uint32_t, Uint32Constant*>&",
          "logic": "Returns a reference to the uint32_ map."
        },
        {
          "name": "float64",
          "parameters": [],
          "return_type": "ZoneMap<uint64_t, Float64Constant*>&",
          "logic": "Returns a reference to the float_ map."
        },
        {
          "name": "external_references",
          "parameters": [],
          "return_type": "ZoneMap<Address, ExternalConstant*>&",
          "logic": "Returns a reference to the external_references_ map."
        },
        {
          "name": "parameters",
          "parameters": [],
          "return_type": "ZoneVector<InitialValue*>&",
          "logic": "Returns a reference to the parameters_ vector."
        },
        {
          "name": "inlineable_calls",
          "parameters": [],
          "return_type": "ZoneVector<MaglevCallSiteInfo*>&",
          "logic": "Returns a reference to the inlineable_calls_ vector."
        },
        {
          "name": "node_buffer",
          "parameters": [],
          "return_type": "ZoneVector<Node*>&",
          "logic": "Returns a reference to the node_buffer_ vector."
        },
        {
          "name": "allocations_escape_map",
          "parameters": [],
          "return_type": "ZoneMap<InlinedAllocation*, SmallAllocationVector>&",
          "logic": "Returns a reference to the allocations_escape_map_ map."
        },
        {
          "name": "allocations_elide_map",
          "parameters": [],
          "return_type": "ZoneMap<InlinedAllocation*, SmallAllocationVector>&",
          "logic": "Returns a reference to the allocations_elide_map_ map."
        },
        {
          "name": "register_inputs",
          "parameters": [],
          "return_type": "RegList&",
          "logic": "Returns a reference to the register_inputs_ RegList."
        },
        {
          "name": "constants",
          "parameters": [],
          "return_type": "compiler::ZoneRefMap<compiler::ObjectRef, Constant*>&",
          "logic": "Returns a reference to the constants_ ZoneRefMap."
        },
        {
          "name": "trusted_constants",
          "parameters": [],
          "return_type": "compiler::ZoneRefMap<compiler::HeapObjectRef, TrustedConstant*>&",
          "logic": "Returns a reference to the trusted_constants_ ZoneRefMap."
        },
        {
          "name": "inlined_functions",
          "parameters": [],
          "return_type": "ZoneVector<OptimizedCompilationInfo::InlinedFunctionHolder>&",
          "logic": "Returns a reference to the inlined_functions_ ZoneVector."
        },
        {
          "name": "has_recursive_calls",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the graph has recursive calls."
        },
        {
          "name": "set_has_recursive_calls",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets whether the graph has recursive calls."
        },
        {
          "name": "is_osr",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether this is an on-stack replacement (OSR) graph."
        },
        {
          "name": "min_maglev_stackslots_for_unoptimized_frame_size",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates the minimum number of stack slots required for an unoptimized frame size in OSR."
        },
        {
          "name": "NewObjectId",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Generates a unique object ID."
        },
        {
          "name": "set_has_resumable_generator",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the flag indicating the graph contains a resumable generator."
        },
        {
          "name": "has_resumable_generator",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the graph contains a resumable generator."
        },
        {
          "name": "TryGetScopeInfoForContextLoad",
          "parameters": [
            "ValueNode* context",
            "int offset",
            "compiler::JSHeapBroker* broker"
          ],
          "return_type": "compiler::OptionalScopeInfoRef",
          "logic": "Attempts to resolve the scope info of a context value based on the given context and offset. Used for context loads."
        },
        {
          "name": "TryGetScopeInfo",
          "parameters": [
            "ValueNode* context",
            "compiler::JSHeapBroker* broker"
          ],
          "return_type": "compiler::OptionalScopeInfoRef",
          "logic": "Attempts to resolve the scope info of a context value."
        },
        {
          "name": "record_scope_info",
          "parameters": [
            "ValueNode* context",
            "compiler::OptionalScopeInfoRef scope_info"
          ],
          "return_type": "void",
          "logic": "Records the scope info for a context value."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone* const",
          "logic": "Returns the zone associated with the graph."
        }
      ]
    }
  ],
  "functions": []
}