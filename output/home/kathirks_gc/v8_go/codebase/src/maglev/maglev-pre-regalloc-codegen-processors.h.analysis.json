{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-pre-regalloc-codegen-processors.h",
  "imports": [
    "src/codegen/register-configuration.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-graph-processor.h",
    "src/maglev/maglev-graph.h",
    "src/maglev/maglev-ir.h"
  ],
  "classes": [
    {
      "name": "ValueLocationConstraintProcessor",
      "properties": [],
      "methods": [
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for graph pre-processing."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for graph post-processing."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for basic block post-processing."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Returns kContinue, allowing processing to continue."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "Empty function, placeholder for post phi processing."
        },
        {
          "name": "Process",
          "parameters": [
            "NAME* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Initializes temporaries and sets value location constraints for a node. Returns kContinue to indicate that processing should continue. This is a macro-based method, implemented for each node type in NODE_BASE_LIST."
        }
      ]
    },
    {
      "name": "DecompressedUseMarkingProcessor",
      "properties": [],
      "methods": [
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for graph pre-processing."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for graph post-processing."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for basic block post-processing."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Returns kContinue, allowing processing to continue."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "Empty function, placeholder for post phi processing."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Marks tagged inputs as decompressing if V8_COMPRESS_POINTERS is defined. Returns kContinue."
        }
      ]
    },
    {
      "name": "MaxCallDepthProcessor",
      "properties": [
        "int max_call_stack_args_",
        "int max_deopted_stack_size_",
        "const MaglevCompilationUnit* last_seen_unit_"
      ],
      "methods": [
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for graph pre-processing."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Sets the maximum call stack arguments and maximum deopted stack size on the graph."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for basic block post-processing."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Returns kContinue, allowing processing to continue."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "Empty function, placeholder for post phi processing."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Calculates and updates the maximum call stack arguments and maximum deopted stack size based on the properties of the current node. Returns kContinue."
        },
        {
          "name": "UpdateMaxDeoptedStackSize",
          "parameters": [
            "DeoptInfo* deopt_info"
          ],
          "return_type": "void",
          "logic": "Updates the maximum deopted stack size by iterating through the deopt frames and calculating their sizes."
        },
        {
          "name": "ConservativeFrameSize",
          "parameters": [
            "const DeoptFrame* deopt_frame"
          ],
          "return_type": "int",
          "logic": "Calculates a conservative frame size for a given deopt frame based on its type."
        }
      ]
    },
    {
      "name": "LiveRangeAndNextUseProcessor",
      "properties": [
        "MaglevCompilationInfo* compilation_info_",
        "uint32_t next_node_id_",
        "std::vector<LoopUsedNodes> loop_used_nodes_"
      ],
      "methods": [
        {
          "name": "LiveRangeAndNextUseProcessor",
          "parameters": [
            "MaglevCompilationInfo* compilation_info"
          ],
          "return_type": "void",
          "logic": "Constructor for the class."
        },
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for graph pre-processing."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Asserts loop_used_nodes_ is empty after graph processing."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Empty function, placeholder for basic block post-processing."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "If the basic block is part of a loop, creates a LoopUsedNodes entry. Returns kContinue."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "Empty function, placeholder for post phi processing."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Assigns an ID to the node, marks call nodes inside loops, and marks input uses.  Returns kContinue."
        },
        {
          "name": "MarkInputUses",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Marks the uses of the inputs to the node. Handles eager and lazy deopt checkpoints."
        },
        {
          "name": "MarkInputUses",
          "parameters": [
            "Phi* node",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Empty function.  Phi uses are handled specially during Jump/JumpLoop processing."
        },
        {
          "name": "MarkInputUses",
          "parameters": [
            "JumpLoop* node",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Specialized version to extend the live ranges of Phi inputs for JumpLoop nodes. Also determines spill and reload hints for loop backedges."
        },
        {
          "name": "MarkInputUses",
          "parameters": [
            "Jump* node",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Specialized version for handling input uses of Jump nodes."
        },
        {
          "name": "MarkInputUses",
          "parameters": [
            "CheckpointedJump* node",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Specialized version for handling input uses of CheckpointedJump nodes."
        },
        {
          "name": "MarkJumpInputUses",
          "parameters": [
            "uint32_t use",
            "BasicBlock* target",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Handles input uses for a jump node based on the target block's phis."
        },
        {
          "name": "GetCurrentLoopUsedNodes",
          "parameters": [],
          "return_type": "LoopUsedNodes*",
          "logic": "Returns pointer to the current LoopUsedNodes."
        },
        {
          "name": "MarkUse",
          "parameters": [
            "ValueNode* node",
            "uint32_t use_id",
            "InputLocation* input",
            "LoopUsedNodes* loop_used_nodes"
          ],
          "return_type": "void",
          "logic": "Records the next use of a node and potentially extends its lifetime to the end of the current loop."
        },
        {
          "name": "MarkCheckpointNodes",
          "parameters": [
            "NodeBase* node",
            "DeoptInfoT* deopt_info",
            "LoopUsedNodes* loop_used_nodes",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Marks uses of nodes in the deoptimization information."
        }
      ]
    }
  ],
  "functions": []
}