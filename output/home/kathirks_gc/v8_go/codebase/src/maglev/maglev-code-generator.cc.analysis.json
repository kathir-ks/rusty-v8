{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-code-generator.cc",
  "imports": [
    "src/maglev/maglev-code-generator.h",
    "algorithm",
    "src/base/hashmap.h",
    "src/base/logging.h",
    "src/codegen/code-desc.h",
    "src/codegen/compiler.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/register.h",
    "src/codegen/reglist.h",
    "src/codegen/safepoint-table.h",
    "src/codegen/source-position.h",
    "src/common/globals.h",
    "src/compiler/backend/instruction.h",
    "src/deoptimizer/deoptimize-reason.h",
    "src/deoptimizer/deoptimizer.h",
    "src/deoptimizer/frame-translation-builder.h",
    "src/execution/frame-constants.h",
    "src/flags/flags.h",
    "src/handles/global-handles-inl.h",
    "src/interpreter/bytecode-register.h",
    "src/maglev/maglev-assembler-inl.h",
    "src/maglev/maglev-code-gen-state.h",
    "src/maglev/maglev-compilation-unit.h",
    "src/maglev/maglev-graph-labeller.h",
    "src/maglev/maglev-graph-printer.h",
    "src/maglev/maglev-graph-processor.h",
    "src/maglev/maglev-graph.h",
    "src/maglev/maglev-ir-inl.h",
    "src/maglev/maglev-ir.h",
    "src/maglev/maglev-regalloc-data.h",
    "src/objects/code-inl.h",
    "src/objects/deoptimization-data.h",
    "src/utils/identity-map.h"
  ],
  "classes": [
    {
      "name": "RegisterTHelper<RegisterT>",
      "properties": [],
      "methods": []
    },
    {
      "name": "RegisterTHelper<Register>",
      "properties": [
        "kAllocatableRegisters"
      ],
      "methods": []
    },
    {
      "name": "RegisterTHelper<DoubleRegister>",
      "properties": [
        "kAllocatableRegisters"
      ],
      "methods": []
    },
    {
      "name": "ParallelMoveResolver<RegisterT, bool DecompressIfNeeded>",
      "properties": [
        "kAllocatableRegistersT",
        "masm_",
        "scratch_",
        "moves_from_register_",
        "moves_from_stack_slot_",
        "materializing_register_moves_",
        "materializing_stack_slot_moves_",
        "scratch_has_cycle_start_"
      ],
      "methods": [
        {
          "name": "ParallelMoveResolver",
          "parameters": [
            "MaglevAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes the MaglevAssembler pointer and scratch register."
        },
        {
          "name": "RecordMove",
          "parameters": [
            "ValueNode* source_node",
            "compiler::InstructionOperand source",
            "compiler::AllocatedOperand target",
            "bool target_needs_to_be_decompressed"
          ],
          "return_type": "void",
          "logic": "Records a move operation to either a register or a stack slot."
        },
        {
          "name": "RecordMove",
          "parameters": [
            "ValueNode* source_node",
            "compiler::InstructionOperand source",
            "RegisterT target_reg",
            "NeedsDecompression target_needs_to_be_decompressed"
          ],
          "return_type": "void",
          "logic": "Records a move operation to a register."
        },
        {
          "name": "EmitMoves",
          "parameters": [
            "RegisterT scratch"
          ],
          "return_type": "void",
          "logic": "Emits the recorded parallel move operations, resolving conflicts and breaking cycles."
        },
        {
          "name": "RecordMoveToRegister",
          "parameters": [
            "ValueNode* node",
            "compiler::InstructionOperand source",
            "RegisterT target_reg",
            "bool target_needs_to_be_decompressed"
          ],
          "return_type": "void",
          "logic": "Records a move to a register."
        },
        {
          "name": "RecordMoveToStackSlot",
          "parameters": [
            "ValueNode* node",
            "compiler::InstructionOperand source",
            "int32_t target_slot",
            "bool target_needs_to_be_decompressed"
          ],
          "return_type": "void",
          "logic": "Records a move to a stack slot."
        },
        {
          "name": "PopTargets",
          "parameters": [
            "RegisterT source_reg"
          ],
          "return_type": "GapMoveTargets",
          "logic": "Removes and returns the targets of moves from the given source register."
        },
        {
          "name": "PopTargets",
          "parameters": [
            "int32_t source_slot"
          ],
          "return_type": "GapMoveTargets",
          "logic": "Removes and returns the targets of moves from the given source stack slot."
        },
        {
          "name": "StartEmitMoveChain",
          "parameters": [
            "SourceT source"
          ],
          "return_type": "void",
          "logic": "Starts emitting a move chain from the given source (register or stack slot)."
        },
        {
          "name": "ContinueEmitMoveChain",
          "parameters": [
            "ChainStartT chain_start",
            "SourceT source"
          ],
          "return_type": "bool",
          "logic": "Recursively continues emitting the move chain from the given source."
        },
        {
          "name": "RecursivelyEmitMoveChainTargets",
          "parameters": [
            "ChainStartT chain_start",
            "GapMoveTargets& targets"
          ],
          "return_type": "bool",
          "logic": "Recursively calls ContinueEmitMoveChain for each target of a source."
        },
        {
          "name": "EmitMovesFromSource",
          "parameters": [
            "RegisterT source_reg",
            "GapMoveTargets&& targets"
          ],
          "return_type": "void",
          "logic": "Emits moves from a register source to all its targets."
        },
        {
          "name": "EmitMovesFromSource",
          "parameters": [
            "int32_t source_slot",
            "GapMoveTargets&& targets"
          ],
          "return_type": "void",
          "logic": "Emits moves from a stack slot source to all its targets."
        },
        {
          "name": "Push",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Pushes a register onto the stack"
        },
        {
          "name": "Push",
          "parameters": [
            "DoubleRegister reg"
          ],
          "return_type": "void",
          "logic": "Pushes a double register onto the stack"
        },
        {
          "name": "Pop",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Pops a register from the stack"
        },
        {
          "name": "Pop",
          "parameters": [
            "DoubleRegister reg"
          ],
          "return_type": "void",
          "logic": "Pops a double register from the stack"
        },
        {
          "name": "masm",
          "parameters": [],
          "return_type": "MaglevAssembler*",
          "logic": "Returns the MaglevAssembler pointer."
        }
      ]
    },
    {
      "name": "ParallelMoveResolver<Register, COMPRESS_POINTERS_BOOL>::GapMoveTargets",
      "properties": [
        "stack_slots",
        "registers",
        "needs_decompression"
      ],
      "methods": [
        {
          "name": "is_empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the targets are empty."
        }
      ]
    },
    {
      "name": "ParallelMoveResolver<Register, COMPRESS_POINTERS_BOOL>::DummyNeedsDecompression",
      "properties": [],
      "methods": []
    },
    {
      "name": "ExceptionHandlerTrampolineBuilder",
      "properties": [],
      "methods": [
        {
          "name": "Build",
          "parameters": [
            "MaglevAssembler* masm",
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Builds the exception handler trampoline for a given node."
        },
        {
          "name": "EmitTrampolineFor",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Emits the code for the exception handler trampoline."
        },
        {
          "name": "masm",
          "parameters": [],
          "return_type": "MaglevAssembler*",
          "logic": "Returns the MaglevAssembler pointer."
        },
        {
          "name": "RecordMoves",
          "parameters": [
            "const MaglevCompilationUnit& unit",
            "BasicBlock* catch_block",
            "const CompactInterpreterFrameState* register_frame",
            "ParallelMoveResolver<Register, COMPRESS_POINTERS_BOOL>* direct_moves",
            "MoveVector* materialising_moves",
            "bool* save_accumulator"
          ],
          "return_type": "void",
          "logic": "Records the necessary moves for the exception phi nodes."
        },
        {
          "name": "EmitMaterialisationsAndPushResults",
          "parameters": [
            "const MoveVector& moves",
            "bool save_accumulator"
          ],
          "return_type": "void",
          "logic": "Emits the code to materialize values and push the results onto the stack."
        },
        {
          "name": "EmitPopMaterialisedResults",
          "parameters": [
            "const MoveVector& moves",
            "bool save_accumulator",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Emits the code to pop the materialized results from the stack."
        }
      ]
    },
    {
      "name": "ExceptionHandlerTrampolineBuilder::Move",
      "properties": [
        "target",
        "source"
      ],
      "methods": []
    },
    {
      "name": "MaglevCodeGeneratingNodeProcessor",
      "properties": [],
      "methods": [
        {
          "name": "MaglevCodeGeneratingNodeProcessor",
          "parameters": [
            "MaglevAssembler* masm",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes the MaglevAssembler pointer and Zone pointer."
        },
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Performs initial graph processing steps."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Placeholder for post-graph processing steps."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Placeholder for post-block processing steps."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Performs initial block processing steps."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Generates code for a given node."
        },
        {
          "name": "EmitBlockEndGapMoves",
          "parameters": [
            "UnconditionalControlNode* node",
            "const ProcessingState& state"
          ],
          "return_type": "void",
          "logic": "Emits gap moves at the end of a basic block."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate."
        },
        {
          "name": "masm",
          "parameters": [],
          "return_type": "MaglevAssembler*",
          "logic": "Returns the MaglevAssembler pointer."
        },
        {
          "name": "code_gen_state",
          "parameters": [],
          "return_type": "MaglevCodeGenState*",
          "logic": "Returns the MaglevCodeGenState pointer."
        },
        {
          "name": "graph_labeller",
          "parameters": [],
          "return_type": "MaglevGraphLabeller*",
          "logic": "Returns the MaglevGraphLabeller pointer."
        },
        {
          "name": "PatchJumps",
          "parameters": [
            "NodeT* node"
          ],
          "return_type": "void",
          "logic": "Performs jump threading."
        },
        {
          "name": "ComputeDeferred",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "int",
          "logic": "Computes deferred blocks."
        }
      ]
    },
    {
      "name": "SafepointingNodeProcessor",
      "properties": [
        "local_isolate_"
      ],
      "methods": [
        {
          "name": "SafepointingNodeProcessor",
          "parameters": [
            "LocalIsolate* local_isolate"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes the LocalIsolate pointer."
        },
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Placeholder for graph preprocessing steps."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Placeholder for graph postprocessing steps."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Placeholder for block postprocessing steps."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Placeholder for block preprocessing steps."
        },
        {
          "name": "PostPhiProcessing",
          "return_type": "void",
          "parameters": [],
          "logic": "Placeholder for phi processing steps."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeBase* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Inserts safepoints during node processing."
        }
      ]
    },
    {
      "name": "MaglevFrameTranslationBuilder",
      "properties": [
        "local_isolate_",
        "masm_",
        "translation_array_builder_",
        "protected_deopt_literals_",
        "deopt_literals_",
        "object_ids_"
      ],
      "methods": [
        {
          "name": "MaglevFrameTranslationBuilder",
          "parameters": [
            "LocalIsolate* local_isolate",
            "MaglevAssembler* masm",
            "FrameTranslationBuilder* translation_array_builder",
            "IdentityMap<int, base::DefaultAllocationPolicy>* protected_deopt_literals",
            "IdentityMap<int, base::DefaultAllocationPolicy>* deopt_literals"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes the member variables."
        },
        {
          "name": "BuildEagerDeopt",
          "parameters": [
            "EagerDeoptInfo* deopt_info"
          ],
          "return_type": "void",
          "logic": "Builds the frame translation information for eager deoptimization."
        },
        {
          "name": "BuildLazyDeopt",
          "parameters": [
            "LazyDeoptInfo* deopt_info"
          ],
          "return_type": "void",
          "logic": "Builds the frame translation information for lazy deoptimization."
        },
        {
          "name": "BuildBeginDeopt",
          "parameters": [
            "DeoptInfo* deopt_info"
          ],
          "return_type": "void",
          "logic": "Initializes data structures at the beginning of deoptimization frame construction."
        },
        {
          "name": "RecursiveBuildDeoptFrame",
          "parameters": [
            "const DeoptFrame& frame",
            "const InputLocation*& current_input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Recursively builds the deoptimization frame translation information for nested frames."
        },
        {
          "name": "BuildSingleDeoptFrame",
          "parameters": [
            "const InterpretedDeoptFrame& frame",
            "const InputLocation*& current_input_location",
            "const VirtualObjectList& virtual_objects",
            "interpreter::Register result_location",
            "int result_size"
          ],
          "return_type": "void",
          "logic": "Builds the deoptimization frame translation information for interpreted frames."
        },
        {
          "name": "BuildSingleDeoptFrame",
          "parameters": [
            "const InterpretedDeoptFrame& frame",
            "const InputLocation*& current_input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds the deoptimization frame translation information for interpreted frames."
        },
        {
          "name": "BuildSingleDeoptFrame",
          "parameters": [
            "const InlinedArgumentsDeoptFrame& frame",
            "const InputLocation*& current_input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds the deoptimization frame translation information for inlined arguments frames."
        },
        {
          "name": "BuildSingleDeoptFrame",
          "parameters": [
            "const ConstructInvokeStubDeoptFrame& frame",
            "const InputLocation*& current_input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds the deoptimization frame translation information for construct invoke stub frames."
        },
        {
          "name": "BuildSingleDeoptFrame",
          "parameters": [
            "const BuiltinContinuationDeoptFrame& frame",
            "const InputLocation*& current_input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds the deoptimization frame translation information for built-in continuation frames."
        },
        {
          "name": "BuildDeoptStoreRegister",
          "parameters": [
            "const compiler::AllocatedOperand& operand",
            "ValueRepresentation repr"
          ],
          "return_type": "void",
          "logic": "Stores register value for deoptimization."
        },
        {
          "name": "BuildDeoptStoreStackSlot",
          "parameters": [
            "const compiler::AllocatedOperand& operand",
            "ValueRepresentation repr"
          ],
          "return_type": "void",
          "logic": "Stores stack slot value for deoptimization."
        },
        {
          "name": "GetDuplicatedId",
          "parameters": [
            "intptr_t id"
          ],
          "return_type": "int",
          "logic": "Checks if the passed id is already present in object_ids_."
        },
        {
          "name": "BuildHeapNumber",
          "parameters": [
            "Float64 number"
          ],
          "return_type": "void",
          "logic": "Builds HeapNumber Literal and store literal id."
        },
        {
          "name": "BuildConsString",
          "parameters": [
            "const VirtualObject* object",
            "const InputLocation*& input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds ConsString Literal and store literal id."
        },
        {
          "name": "BuildFixedDoubleArray",
          "parameters": [
            "uint32_t length",
            "compiler::FixedDoubleArrayRef array"
          ],
          "return_type": "void",
          "logic": "Builds FixedDoubleArray Literal and store literal id."
        },
        {
          "name": "BuildNestedValue",
          "parameters": [
            "const ValueNode* value",
            "const InputLocation*& input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds nested value in VirtualObject for deopt translation."
        },
        {
          "name": "BuildVirtualObject",
          "parameters": [
            "const VirtualObject* object",
            "const InputLocation*& input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds the representation of a virtual object for deoptimization purposes."
        },
        {
          "name": "BuildDeoptFrameSingleValue",
          "parameters": [
            "const ValueNode* value",
            "const InputLocation*& input_location",
            "const VirtualObjectList& virtual_objects"
          ],
          "return_type": "void",
          "logic": "Builds the deoptimization frame translation for a single value."
        },
        {
          "name": "BuildDeoptFrameValues",
          "parameters": [
            "const MaglevCompilationUnit& compilation_unit",
            "const CompactInterpreterFrameState* checkpoint_state",
            "const ValueNode* closure",
            "const InputLocation*& input_location",
            "const VirtualObjectList& virtual_objects",
            "interpreter::Register result_location",
            "int result_size"
          ],
          "return_type": "void",
          "logic": "Builds deopt translation for all values in frame (params,context,locals,acc)."
        },
        {
          "name": "GetProtectedDeoptLiteral",
          "parameters": [
            "Tagged<TrustedObject> obj"
          ],
          "return_type": "int",
          "logic": "Retrieves or creates a literal ID for a trusted object."
        },
        {
          "name": "GetDeoptLiteral",
          "parameters": [
            "Tagged<Object> obj"
          ],
          "return_type": "int",
          "logic": "Retrieves or creates a literal ID for an object."
        },
        {
          "name": "GetDeoptLiteral",
          "parameters": [
            "compiler::HeapObjectRef ref"
          ],
          "return_type": "int",
          "logic": "Retrieves or creates a literal ID for a HeapObjectRef."
        }
      ]
    },
    {
      "name": "MaglevCodeGenerator",
      "properties": [
        "local_isolate_",
        "safepoint_table_builder_",
        "frame_translation_builder_",
        "code_gen_state_",
        "masm_",
        "graph_",
        "protected_deopt_literals_",
        "deopt_literals_",
        "retained_maps_",
        "is_context_specialized_",
        "zone_",
        "code_gen_succeeded_",
        "deopt_exit_start_offset_",
        "handler_table_offset_",
        "code_",
        "deopt_data_",
        "inlined_function_count_"
      ],
      "methods": [
        {
          "name": "MaglevCodeGenerator",
          "parameters": [
            "LocalIsolate* isolate",
            "MaglevCompilationInfo* compilation_info",
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Constructor for the MaglevCodeGenerator class."
        },
        {
          "name": "Assemble",
          "parameters": [],
          "return_type": "bool",
          "logic": "Assembles the Maglev code."
        },
        {
          "name": "Generate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "MaybeHandle<Code>",
          "logic": "Generates the code object."
        },
        {
          "name": "RetainedMaps",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "GlobalHandleVector<Map>",
          "logic": "Returns maps retained by generated code."
        },
        {
          "name": "EmitCode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Emits the Maglev code."
        },
        {
          "name": "RecordInlinedFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Records inlined functions."
        },
        {
          "name": "EmitDeferredCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits code that was deferred during the main code generation pass."
        },
        {
          "name": "EmitDeopts",
          "parameters": [],
          "return_type": "bool",
          "logic": "Emits deoptimization entries."
        },
        {
          "name": "EmitExceptionHandlerTrampolines",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits exception handler trampolines."
        },
        {
          "name": "EmitMetadata",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits metadata such as the safepoint table and handler table."
        },
        {
          "name": "BuildCodeObject",
          "parameters": [
            "LocalIsolate* local_isolate"
          ],
          "return_type": "MaybeHandle<Code>",
          "logic": "Builds the code object from the generated code and metadata."
        },
        {
          "name": "CollectRetainedMaps",
          "parameters": [
            "DirectHandle<Code> code"
          ],
          "return_type": "GlobalHandleVector<Map>",
          "logic": "Collects the maps from a DirectHandle<Code>."
        },
        {
          "name": "GenerateDeoptimizationData",
          "parameters": [
            "LocalIsolate* local_isolate"
          ],
          "return_type": "Handle<DeoptimizationData>",
          "logic": "Generates the deoptimization data object."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetFrameCount",
      "parameters": [
        "const DeoptFrame* deopt_frame"
      ],
      "return_type": "DeoptimizationFrameTranslation::FrameCount",
      "logic": "Calculates the frame count for deoptimization."
    }
  ]
}