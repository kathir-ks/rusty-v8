{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-phi-representation-selector.h",
  "imports": [
    "<optional>",
    "src/base/small-vector.h",
    "src/compiler/turboshaft/snapshot-table.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-graph-builder.h",
    "src/maglev/maglev-graph-processor.h"
  ],
  "classes": [
    {
      "name": "MaglevPhiRepresentationSelector",
      "properties": [
        "builder_",
        "current_block_",
        "phi_taggings_",
        "predecessors_",
        "new_nodes_at_start_",
        "new_nodes_"
      ],
      "methods": [
        {
          "name": "MaglevPhiRepresentationSelector",
          "parameters": [
            "MaglevGraphBuilder* builder"
          ],
          "return_type": "void",
          "logic": "Constructor for the class. Initializes the builder_, phi_taggings_, predecessors_, and new_nodes_at_start_ members."
        },
        {
          "name": "PreProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Pre-processes the graph. Currently, it only prints a trace message if the trace_maglev_phi_untagging flag is enabled."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Post-processes the graph. Currently, it only prints a trace message if the trace_maglev_phi_untagging flag is enabled."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Pre-processes a basic block."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Post-processes a basic block."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "A hook to do some processing after all phis are processed.  Currently empty."
        },
        {
          "name": "ProcessPhi",
          "parameters": [
            "Phi* node"
          ],
          "return_type": "ProcessPhiResult",
          "logic": "Processes a phi node."
        },
        {
          "name": "Process",
          "parameters": [
            "Phi* node",
            "const ProcessingState&"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a phi node (no-op because phi's are processed in PreProcessBasicBlock)."
        },
        {
          "name": "Process",
          "parameters": [
            "JumpLoop* node",
            "const ProcessingState&"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a JumpLoop node. Calls FixLoopPhisBackedge to insert necessary tagging on the backedge."
        },
        {
          "name": "Process",
          "parameters": [
            "Dead* node",
            "const ProcessingState&"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a Dead node. Removes the node."
        },
        {
          "name": "Process",
          "parameters": [
            "NodeT* node",
            "const ProcessingState& state"
          ],
          "return_type": "ProcessResult",
          "logic": "Processes a generic node. Calls UpdateNodeInputs to update the inputs of the node."
        },
        {
          "name": "ConvertTaggedPhiTo",
          "parameters": [
            "Phi* phi",
            "ValueRepresentation repr",
            "const HoistTypeList& hoist_untagging"
          ],
          "return_type": "void",
          "logic": "Updates the inputs of {phi} so that they all have {repr} representation, and updates {phi}'s representation to {repr}."
        },
        {
          "name": "GetReplacementForPhiInputConversion",
          "parameters": [
            "ValueNode* conversion_node",
            "Phi* phi",
            "uint32_t input_index"
          ],
          "return_type": "ValueNode*",
          "logic": "Gets replacement node for phi input conversion"
        },
        {
          "name": "UpdateNodeInputs",
          "parameters": [
            "NodeT* n",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the inputs of a node to account for phi representation changes. Removes outdated untagging operations. Inserts new conversions where needed."
        },
        {
          "name": "UpdateNonUntaggingNodeInputs",
          "parameters": [
            "NodeT* n",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the inputs of a non-untagging node. Handles retagging of Phi inputs, bypassing Identity nodes, and calls UpdateNodePhiInput if the input is a Phi."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "CheckSmi* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates a CheckSmi node's Phi input."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "CheckNumber* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates a CheckNumber node's Phi input."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "StoreTaggedFieldNoWriteBarrier* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates a StoreTaggedFieldNoWriteBarrier node's Phi input."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "StoreFixedArrayElementNoWriteBarrier* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates a StoreFixedArrayElementNoWriteBarrier node's Phi input."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "BranchIfToBooleanTrue* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates a BranchIfToBooleanTrue node's Phi input."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "NodeBase* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates a generic node's Phi input."
        },
        {
          "name": "EnsurePhiInputsTagged",
          "parameters": [
            "Phi* phi"
          ],
          "return_type": "void",
          "logic": "Ensures that all inputs to the Phi node are tagged."
        },
        {
          "name": "IsUntagging",
          "parameters": [
            "Opcode op"
          ],
          "return_type": "bool",
          "logic": "Checks if an opcode corresponds to an untagging node."
        },
        {
          "name": "UpdateUntaggingOfPhi",
          "parameters": [
            "Phi* phi",
            "ValueNode* old_untagging"
          ],
          "return_type": "void",
          "logic": "Updates an untagging node that is consuming a Phi input that has been untagged."
        },
        {
          "name": "EnsurePhiTagged",
          "parameters": [
            "Phi* phi",
            "BasicBlock* block",
            "NewNodePosition pos",
            "const ProcessingState* state",
            "std::optional<int> predecessor_index"
          ],
          "return_type": "ValueNode*",
          "logic": "Ensures that the Phi node has a tagged representation. Returns a tagged node representing the phi."
        },
        {
          "name": "AddNodeAtBlockEnd",
          "parameters": [
            "ValueNode* new_node",
            "BasicBlock* block",
            "DeoptFrame* deopt_frame"
          ],
          "return_type": "ValueNode*",
          "logic": "Adds a new node at the end of a basic block."
        },
        {
          "name": "AddNode",
          "parameters": [
            "ValueNode* node",
            "BasicBlock* block",
            "NewNodePosition pos",
            "const ProcessingState* state",
            "DeoptFrame* deopt_frame"
          ],
          "return_type": "ValueNode*",
          "logic": "Adds a new node to the current basic block."
        },
        {
          "name": "RegisterNewNode",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Registers a new node."
        },
        {
          "name": "FixLoopPhisBackedge",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Fixes the backedge of loop phis in a loop header."
        },
        {
          "name": "PreparePhiTaggings",
          "parameters": [
            "BasicBlock* old_block",
            "const BasicBlock* new_block"
          ],
          "return_type": "void",
          "logic": "Prepares the phi tagging snapshot table when merging basic blocks."
        },
        {
          "name": "graph_labeller",
          "parameters": [],
          "return_type": "MaglevGraphLabeller*",
          "logic": "Returns the graph labeller."
        },
        {
          "name": "CanHoistUntaggingTo",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "bool",
          "logic": "Determines if untagging can be hoisted to a block"
        }
      ]
    }
  ],
  "functions": []
}