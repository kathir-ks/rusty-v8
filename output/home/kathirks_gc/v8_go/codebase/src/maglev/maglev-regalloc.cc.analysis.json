{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-regalloc.cc",
  "imports": [
    "src/maglev/maglev-regalloc.h",
    "sstream",
    "type_traits",
    "src/base/bits.h",
    "src/base/logging.h",
    "src/codegen/machine-type.h",
    "src/codegen/register.h",
    "src/codegen/reglist.h",
    "src/compiler/backend/instruction.h",
    "src/heap/parked-scope.h",
    "src/maglev/maglev-code-gen-state.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-compilation-unit.h",
    "src/maglev/maglev-graph-labeller.h",
    "src/maglev/maglev-graph-printer.h",
    "src/maglev/maglev-graph-processor.h",
    "src/maglev/maglev-graph.h",
    "src/maglev/maglev-interpreter-frame-state.h",
    "src/maglev/maglev-ir-inl.h",
    "src/maglev/maglev-ir.h",
    "src/maglev/maglev-regalloc-data.h",
    "src/zone/zone-containers.h",
    "src/codegen/arm/register-arm.h",
    "src/codegen/arm64/register-arm64.h",
    "src/codegen/riscv/register-riscv.h",
    "src/codegen/x64/register-x64.h",
    "src/codegen/s390/register-s390.h"
  ],
  "classes": [
    {
      "name": "StraightForwardRegisterAllocator",
      "properties": [
        "compilation_info_",
        "graph_",
        "patches_",
        "block_it_",
        "node_it_",
        "general_registers_",
        "double_registers_",
        "tagged_",
        "untagged_",
        "printing_visitor_"
      ],
      "methods": [
        {
          "name": "ApplyPatches",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Applies pending patches (inserted gap moves) to a basic block by inserting the patched nodes into the block's node vector."
        },
        {
          "name": "StraightForwardRegisterAllocator",
          "parameters": [
            "MaglevCompilationInfo* compilation_info",
            "Graph* graph"
          ],
          "return_type": "constructor",
          "logic": "Initializes the register allocator. It computes post-dominating holes, allocates registers, and adjusts stack frame sizes based on OSR information."
        },
        {
          "name": "~StraightForwardRegisterAllocator",
          "parameters": [],
          "return_type": "destructor",
          "logic": "Default destructor."
        },
        {
          "name": "ComputePostDominatingHoles",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes, for each forward control node, the tree of post-dominating control flow 'holes'.  A 'hole' is a discontinuity in linear control flow caused by jumps, branches, etc."
        },
        {
          "name": "PrintLiveRegs",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the currently live registers and the ValueNodes they contain to the output stream, used for debugging."
        },
        {
          "name": "AllocateRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "The main register allocation routine. Iterates through basic blocks and nodes, assigning registers and spill slots."
        },
        {
          "name": "FreeRegistersUsedBy",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Frees the registers currently allocated to a given ValueNode, differentiating between general-purpose and double registers."
        },
        {
          "name": "UpdateUse",
          "parameters": [
            "ValueNode* node",
            "InputLocation* input_location"
          ],
          "return_type": "void",
          "logic": "Updates the 'next use' pointer for a ValueNode.  If the node has no more uses, frees its registers and any stack slot it may have occupied."
        },
        {
          "name": "AllocateEagerDeopt",
          "parameters": [
            "const EagerDeoptInfo& deopt_info"
          ],
          "return_type": "void",
          "logic": "Allocates registers or spill slots for ValueNodes needed in an eager deoptimization."
        },
        {
          "name": "AllocateLazyDeopt",
          "parameters": [
            "const LazyDeoptInfo& deopt_info"
          ],
          "return_type": "void",
          "logic": "Allocates spill slots (always) for ValueNodes needed in a lazy deoptimization."
        },
        {
          "name": "AllocateNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Allocates registers and spill slots for a general Node in the graph."
        },
        {
          "name": "AllocateNodeResult",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Allocates the output/result register (or stack slot) for a given ValueNode."
        },
        {
          "name": "DropRegisterValue",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Removes a value associated with a general-purpose register. If possible, it tries to move the value to another free register or spills it to a stack slot."
        },
        {
          "name": "DropRegisterValue",
          "parameters": [
            "DoubleRegister reg"
          ],
          "return_type": "void",
          "logic": "Removes a value associated with a double register. If possible, it tries to move the value to another free register or spills it to a stack slot."
        },
        {
          "name": "InitializeBranchTargetPhis",
          "parameters": [
            "int predecessor_id",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes the inputs of phi nodes at a branch target with the allocation information from the predecessor."
        },
        {
          "name": "AllocateControlNode",
          "parameters": [
            "ControlNode* node",
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Handles register allocation for ControlNodes (e.g., branches, returns)."
        },
        {
          "name": "SetLoopPhiRegisterHint",
          "parameters": [
            "Phi* phi",
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Set loop phi registers hint for general purpose register."
        },
        {
          "name": "SetLoopPhiRegisterHint",
          "parameters": [
            "Phi* phi",
            "DoubleRegister reg"
          ],
          "return_type": "void",
          "logic": "Set loop phi registers hint for double register."
        },
        {
          "name": "TryAllocateToInput",
          "parameters": [
            "Phi* phi"
          ],
          "return_type": "void",
          "logic": "Attempts to allocate a phi node to the same register as one of its inputs."
        },
        {
          "name": "AddMoveBeforeCurrentNode",
          "parameters": [
            "ValueNode* node",
            "compiler::InstructionOperand source",
            "compiler::AllocatedOperand target"
          ],
          "return_type": "void",
          "logic": "Adds a gap move (register-to-register or constant-to-register move) before the current node, essentially emitting the move instruction."
        },
        {
          "name": "Spill",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Spills a value node by allocating a spill slot and generating a move to the allocated spill slot."
        },
        {
          "name": "AssignFixedInput",
          "parameters": [
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Assigns registers or slots to inputs that have a fixed/required location specified in their operand."
        },
        {
          "name": "MarkAsClobbered",
          "parameters": [
            "ValueNode* node",
            "const compiler::AllocatedOperand& location"
          ],
          "return_type": "void",
          "logic": "Marks a location as clobbered."
        },
        {
          "name": "AssignArbitraryRegisterInput",
          "parameters": [
            "NodeBase* result_node",
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Assigns an arbitrary register to an input, preferring to reuse an existing register if possible. Creates a register to register move if required. Handles cases where the register may have been clobbered."
        },
        {
          "name": "AssignAnyInput",
          "parameters": [
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Assign location of input node."
        },
        {
          "name": "AssignInputs",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns registers and spill slots to the inputs of a node."
        },
        {
          "name": "VerifyInputs",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Verifies the register assigned for each node is valid."
        },
        {
          "name": "VerifyRegisterState",
          "parameters": [],
          "return_type": "void",
          "logic": "Verifies the consistency of the register state, checking that all registers are correctly assigned and that no blocked registers are present."
        },
        {
          "name": "SpillRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Spills all currently live registers."
        },
        {
          "name": "SaveRegisterSnapshot",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Saves the current live register state to the node for deoptimization."
        },
        {
          "name": "AllocateSpillSlot",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Allocates a spill slot (stack slot) for a given ValueNode."
        },
        {
          "name": "PickRegisterToFree",
          "parameters": [
            "RegListBase<RegisterT> reserved"
          ],
          "return_type": "RegisterT",
          "logic": "Picks a register to free based on furthest next use."
        },
        {
          "name": "FreeUnblockedRegister",
          "parameters": [
            "RegListBase<RegisterT> reserved"
          ],
          "return_type": "RegisterT",
          "logic": "Frees an unblocked register."
        },
        {
          "name": "AllocateRegister",
          "parameters": [
            "ValueNode* node",
            "const compiler::InstructionOperand& hint"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Allocates a register (either general-purpose or double) for a ValueNode, potentially freeing a register if needed."
        },
        {
          "name": "IsCurrentNodeLastUseOf",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "bool",
          "logic": "Checks that current node is the last use of the input node."
        },
        {
          "name": "EnsureFreeRegisterAtEnd",
          "parameters": [
            "const compiler::InstructionOperand& hint"
          ],
          "return_type": "void",
          "logic": "Ensures free registers at the end."
        },
        {
          "name": "AllocateRegisterAtEnd",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Allocates registers at the end."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "Register reg",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Force allocation of a register."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "DoubleRegister reg",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Force allocation of a register."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "const Input& input",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Force allocation of a register based on an input."
        },
        {
          "name": "AssignFixedTemporaries",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns fixed temporaries for each node."
        },
        {
          "name": "AssignArbitraryTemporaries",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns arbitrary temporaries for each node."
        },
        {
          "name": "ForEachMergePointRegisterState",
          "parameters": [
            "MergePointRegisterState& merge_point_state",
            "Function&& f"
          ],
          "return_type": "void",
          "logic": "For each register state, execute merge point."
        },
        {
          "name": "ClearRegisterValues",
          "parameters": [],
          "return_type": "void",
          "logic": "Clear register state."
        },
        {
          "name": "InitializeRegisterValues",
          "parameters": [
            "MergePointRegisterState& target_state"
          ],
          "return_type": "void",
          "logic": "Initalize target state."
        },
        {
          "name": "HoistLoopReloads",
          "parameters": [
            "BasicBlock* target",
            "RegisterFrameState<RegisterT>& registers"
          ],
          "return_type": "void",
          "logic": "Initialize reload loop registers to avoid unnecessary load."
        },
        {
          "name": "HoistLoopSpills",
          "parameters": [
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Spill used loop registers to avoid unnecessary reloads and spills."
        },
        {
          "name": "InitializeBranchTargetRegisterValues",
          "parameters": [
            "ControlNode* source",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes a register value for a branch target, based on the live registers at the source."
        },
        {
          "name": "InitializeEmptyBlockRegisterValues",
          "parameters": [
            "ControlNode* source",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes a register value for an edge split block."
        },
        {
          "name": "MergeRegisterValues",
          "parameters": [
            "ControlNode* control",
            "BasicBlock* target",
            "int predecessor_id"
          ],
          "return_type": "void",
          "logic": "Merges the register values from multiple predecessors into a single register state at a merge point (e.g., after a branch)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsTargetOfNodeFallthrough",
      "parameters": [
        "ControlNode* node",
        "BasicBlock* target"
      ],
      "return_type": "bool",
      "logic": "Checks if a target block is a fallthrough of a control node (i.e., the target's ID immediately follows the node's ID)."
    },
    {
      "name": "NearestPostDominatingHole",
      "parameters": [
        "ControlNode* node"
      ],
      "return_type": "ControlNode*",
      "logic": "Finds the nearest post-dominating control flow 'hole' for a given control node."
    },
    {
      "name": "HighestPostDominatingHole",
      "parameters": [
        "ControlNode* first",
        "ControlNode* second"
      ],
      "return_type": "ControlNode*",
      "logic": "Determines the highest post-dominating hole for two control nodes. This is used when merging control flow from multiple branches."
    },
    {
      "name": "HighestPostDominatingHole",
      "parameters": [
        "base::SmallVector<ControlNode*, kSize>& holes"
      ],
      "return_type": "ControlNode*",
      "logic": "Variant of `HighestPostDominatingHole` that operates on a vector of holes, finding the highest hole by repeatedly merging pairs."
    },
    {
      "name": "IsLiveAtTarget",
      "parameters": [
        "ValueNode* node",
        "ControlNode* source",
        "BasicBlock* target"
      ],
      "return_type": "bool",
      "logic": "Determines whether a ValueNode is live (i.e., its value is needed) at a given target block, considering control flow jumps and loops."
    },
    {
      "name": "IsDeadNodeToSkip",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Determines whether a node is unused."
    }
  ]
}