{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-ir-inl.h",
  "imports": [
    "src/interpreter/bytecode-register.h",
    "src/maglev/maglev-deopt-frame-visitor.h",
    "src/maglev/maglev-ir.h",
    "src/sandbox/js-dispatch-table-inl.h"
  ],
  "classes": [
    {
      "name": "CallKnownJSFunction",
      "properties": [
        "dispatch_handle_",
        "shared_function_info_",
        "expected_parameter_count_"
      ],
      "methods": [
        {
          "name": "CallKnownJSFunction",
          "parameters": [
            "uint64_t bitfield",
            "JSDispatchHandle dispatch_handle",
            "compiler::SharedFunctionInfoRef shared_function_info",
            "ValueNode* closure",
            "ValueNode* context",
            "ValueNode* receiver",
            "ValueNode* new_target"
          ],
          "return_type": "void",
          "logic": "Constructor for CallKnownJSFunction. Initializes the base class (Base), sets the dispatch handle, shared function info, expected parameter count (obtained from the dispatch table or shared function info depending on whether LEAPTIERING is enabled), and sets the input ValueNodes for closure, context, receiver, and new target."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetGeneralRegistersUsedAsInputs",
      "parameters": [
        "const EagerDeoptInfo* deopt_info"
      ],
      "return_type": "RegList",
      "logic": "Collects the general registers used as inputs in an EagerDeoptInfo structure. Iterates through the input locations of the deopt info, and if an input location is a general register, it adds that register to the RegList. This function is only compiled in DEBUG mode."
    },
    {
      "name": "DefineAsRegister",
      "parameters": [
        "Node* node"
      ],
      "return_type": "void",
      "logic": "Defines the result location of a node to be an unallocated register.  It requires the node to be assigned a register by the register allocator."
    },
    {
      "name": "DefineAsConstant",
      "parameters": [
        "Node* node"
      ],
      "return_type": "void",
      "logic": "Defines the result location of a node to be a constant. This means that the node's result will be a constant value directly embedded in the generated code."
    },
    {
      "name": "DefineAsFixed",
      "parameters": [
        "Node* node",
        "Register reg"
      ],
      "return_type": "void",
      "logic": "Defines the result location of a node to be a specific fixed register. The node's result will always be stored in the provided register."
    },
    {
      "name": "DefineSameAsFirst",
      "parameters": [
        "Node* node"
      ],
      "return_type": "void",
      "logic": "Defines the result location of a node to be the same as the first input.  This allows reusing the same register for the input and output."
    },
    {
      "name": "UseRegister",
      "parameters": [
        "Input& input"
      ],
      "return_type": "void",
      "logic": "Specifies that an input must be in a register. The input is marked as 'USED_AT_END', meaning the register needs to hold a valid value until the end of the current operation."
    },
    {
      "name": "UseAndClobberRegister",
      "parameters": [
        "Input& input"
      ],
      "return_type": "void",
      "logic": "Specifies that an input must be in a register and the operation may clobber (overwrite) the register. The input is marked as 'USED_AT_START', meaning that the register can be overwritten after the operation uses its initial value."
    },
    {
      "name": "UseAny",
      "parameters": [
        "Input& input"
      ],
      "return_type": "void",
      "logic": "Specifies that an input can be in a register, a stack slot, or a constant. The input is marked as 'USED_AT_END'."
    },
    {
      "name": "UseFixed",
      "parameters": [
        "Input& input",
        "Register reg"
      ],
      "return_type": "void",
      "logic": "Specifies that an input must be in a particular fixed general-purpose register. Also sets a hint to prefer this input. "
    },
    {
      "name": "UseFixed",
      "parameters": [
        "Input& input",
        "DoubleRegister reg"
      ],
      "return_type": "void",
      "logic": "Specifies that an input must be in a particular fixed floating-point register. Also sets a hint to prefer this input."
    }
  ]
}