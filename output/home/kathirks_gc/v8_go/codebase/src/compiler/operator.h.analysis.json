{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/operator.h",
  "imports": [
    "ostream",
    "src/base/compiler-specific.h",
    "src/base/flags.h",
    "src/base/hashing.h",
    "src/common/globals.h",
    "src/handles/handles.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "Operator",
      "properties": [
        "mnemonic_",
        "opcode_",
        "properties_",
        "value_in_",
        "effect_in_",
        "control_in_",
        "value_out_",
        "effect_out_",
        "control_out_"
      ],
      "methods": [
        {
          "name": "Operator",
          "parameters": [
            "Opcode opcode",
            "Properties properties",
            "const char* mnemonic",
            "size_t value_in",
            "size_t effect_in",
            "size_t control_in",
            "size_t value_out",
            "size_t effect_out",
            "size_t control_out"
          ],
          "return_type": "void",
          "logic": "Constructor for the Operator class, initializes its properties and input/output counts."
        },
        {
          "name": "~Operator",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual destructor for the Operator class."
        },
        {
          "name": "opcode",
          "parameters": [],
          "return_type": "Opcode",
          "logic": "Returns the opcode of the operator."
        },
        {
          "name": "mnemonic",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the mnemonic of the operator."
        },
        {
          "name": "Equals",
          "parameters": [
            "const Operator* that"
          ],
          "return_type": "bool",
          "logic": "Checks if this operator is equal to another operator based on their opcode."
        },
        {
          "name": "HashCode",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Computes a hash code for the operator based on its opcode."
        },
        {
          "name": "HasProperty",
          "parameters": [
            "Property property"
          ],
          "return_type": "bool",
          "logic": "Checks if the operator has a given property."
        },
        {
          "name": "properties",
          "parameters": [],
          "return_type": "Properties",
          "logic": "Returns the properties of the operator."
        },
        {
          "name": "ValueInputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of value inputs for the operator."
        },
        {
          "name": "EffectInputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of effect inputs for the operator."
        },
        {
          "name": "ControlInputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of control inputs for the operator."
        },
        {
          "name": "ValueOutputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of value outputs for the operator."
        },
        {
          "name": "EffectOutputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of effect outputs for the operator."
        },
        {
          "name": "ControlOutputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of control outputs for the operator."
        },
        {
          "name": "ZeroIfEliminatable",
          "parameters": [
            "Properties properties"
          ],
          "return_type": "size_t",
          "logic": "Returns 0 if the properties indicate that the operator is eliminatable, otherwise 1."
        },
        {
          "name": "ZeroIfNoThrow",
          "parameters": [
            "Properties properties"
          ],
          "return_type": "size_t",
          "logic": "Returns 0 if the properties indicate that the operator cannot throw, otherwise 2."
        },
        {
          "name": "ZeroIfPure",
          "parameters": [
            "Properties properties"
          ],
          "return_type": "size_t",
          "logic": "Returns 0 if the properties indicate that the operator is pure, otherwise 1."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& os",
            "PrintVerbosity verbose"
          ],
          "return_type": "void",
          "logic": "Prints the operator to the given stream with a specified verbosity level."
        },
        {
          "name": "PrintPropsTo",
          "parameters": [
            "std::ostream& os"
          ],
          "return_type": "void",
          "logic": "Prints the properties of the operator to the given stream."
        },
        {
          "name": "PrintToImpl",
          "parameters": [
            "std::ostream& os",
            "PrintVerbosity verbose"
          ],
          "return_type": "void",
          "logic": "Virtual method to be overridden to provide the actual printing implementation.  Protected."
        }
      ]
    },
    {
      "name": "Operator1",
      "properties": [
        "parameter_",
        "pred_",
        "hash_"
      ],
      "methods": [
        {
          "name": "Operator1",
          "parameters": [
            "Opcode opcode",
            "Properties properties",
            "const char* mnemonic",
            "size_t value_in",
            "size_t effect_in",
            "size_t control_in",
            "size_t value_out",
            "size_t effect_out",
            "size_t control_out",
            "T parameter",
            "Pred const& pred",
            "Hash const& hash"
          ],
          "return_type": "void",
          "logic": "Constructor for Operator1, taking the operator parameters and a static parameter of type T."
        },
        {
          "name": "parameter",
          "parameters": [],
          "return_type": "T const&",
          "logic": "Returns the static parameter of the operator."
        },
        {
          "name": "Equals",
          "parameters": [
            "const Operator* other"
          ],
          "return_type": "bool",
          "logic": "Checks if this operator is equal to another, considering both the opcode and the static parameter.  Overrides Operator::Equals."
        },
        {
          "name": "HashCode",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Computes the hash code for the operator, combining the opcode and the static parameter's hash. Overrides Operator::HashCode."
        },
        {
          "name": "PrintParameter",
          "parameters": [
            "std::ostream& os",
            "PrintVerbosity verbose"
          ],
          "return_type": "void",
          "logic": "Prints the static parameter to the stream, enclosed in brackets."
        },
        {
          "name": "PrintToImpl",
          "parameters": [
            "std::ostream& os",
            "PrintVerbosity verbose"
          ],
          "return_type": "void",
          "logic": "Prints the operator mnemonic and its parameter.  Overrides Operator::PrintToImpl."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const Operator& op"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the Operator class, enabling printing of the operator to an output stream."
    },
    {
      "name": "OpParameter",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "T const&",
      "logic": "Helper function to extract the static parameter from an Operator1 instance."
    }
  ]
}