{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/machine-graph-verifier.cc",
  "imports": [
    "src/compiler/machine-graph-verifier.h",
    "src/compiler/common-operator.h",
    "src/compiler/linkage.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/schedule.h",
    "src/compiler/turbofan-graph.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "MachineRepresentationInferrer",
      "properties": [
        "schedule_",
        "linkage_",
        "representation_vector_",
        "current_block_"
      ],
      "methods": [
        {
          "name": "MachineRepresentationInferrer",
          "parameters": [
            "Schedule const* schedule",
            "TFGraph const* graph",
            "Linkage* linkage",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the inferrer with the schedule, graph, linkage, and zone. Calls Run() to perform the inference."
        },
        {
          "name": "call_descriptor",
          "parameters": [],
          "return_type": "CallDescriptor*",
          "logic": "Returns the incoming call descriptor from the linkage."
        },
        {
          "name": "GetRepresentation",
          "parameters": [
            "Node const* node"
          ],
          "return_type": "MachineRepresentation",
          "logic": "Returns the inferred machine representation for a given node."
        },
        {
          "name": "PromoteRepresentation",
          "parameters": [
            "MachineRepresentation rep"
          ],
          "return_type": "MachineRepresentation",
          "logic": "Promotes certain machine representations to a wider type (e.g., Word8 to Word32). Useful when handling smaller integer types that are often promoted for operations."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through the schedule's basic blocks and nodes, inferring the machine representation for each node based on its opcode and the linkage information.  Handles different IrOpcodes and assigns representations based on their semantics, parameter types, and return types.  Uses a vector to store the inferred representations."
        }
      ]
    },
    {
      "name": "MachineRepresentationChecker",
      "properties": [
        "schedule_",
        "inferrer_",
        "is_stub_",
        "name_",
        "current_block_"
      ],
      "methods": [
        {
          "name": "MachineRepresentationChecker",
          "parameters": [
            "Schedule const* const schedule",
            "MachineRepresentationInferrer const* const inferrer",
            "bool is_stub",
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the checker with the schedule, the representation inferrer, whether it's a stub, and a name."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through the schedule's basic blocks and nodes, checking if the inferred machine representations are consistent with the expected representations based on the node's opcode and input types.  It uses the `MachineRepresentationInferrer` to get the inferred representations and performs checks based on the opcodes.  If inconsistencies are found, it generates a fatal error with debugging information."
        },
        {
          "name": "Is32",
          "parameters": [],
          "return_type": "static bool",
          "logic": "Determines if the pointer representation is 32-bit."
        },
        {
          "name": "Is64",
          "parameters": [],
          "return_type": "static bool",
          "logic": "Determines if the pointer representation is 64-bit."
        },
        {
          "name": "CheckValueInputRepresentationIs",
          "parameters": [
            "Node const* node",
            "int index",
            "MachineRepresentation representation"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has the expected machine representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputIsTagged",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a tagged representation (Tagged, TaggedPointer, or TaggedSigned). If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputIsCompressedOrTagged",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a compressed or tagged representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputIsCompressedOrTaggedOrInt32",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a compressed, tagged, or int32 representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputIsTaggedOrPointer",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a tagged representation (Tagged, TaggedPointer, TaggedSigned) or a pointer representation (Word32 or Word64, depending on architecture). If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputForInt32Op",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has an int32-compatible representation (Bit, Word8, Word16, Word32). If not, it generates a fatal error."
        },
        {
          "name": "CheckValueIsTaggedOrInt32",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a tagged (Tagged, TaggedPointer) or int32-compatible (Bit, Word8, Word16, Word32) representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputForInt64Op",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a kWord64 representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputForFloat32Op",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a kFloat32 representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckValueInputForFloat64Op",
          "parameters": [
            "Node const* node",
            "int index"
          ],
          "return_type": "void",
          "logic": "Checks if the input node at the specified index has a kFloat64 representation. If not, it generates a fatal error."
        },
        {
          "name": "CheckCallInputs",
          "parameters": [
            "Node const* node"
          ],
          "return_type": "void",
          "logic": "Checks the input types of a call node against the expected input types from the call descriptor.  It iterates through the inputs of the call node and verifies if the `MachineRepresentation` of each input is compatible with the expected type according to the `CallDescriptor`. If a mismatch is found, a fatal error message is generated."
        },
        {
          "name": "IsCompatible",
          "parameters": [
            "MachineRepresentation expected",
            "MachineRepresentation actual"
          ],
          "return_type": "bool",
          "logic": "Checks if the actual machine representation is compatible with the expected representation. Handles special cases like tagged representations where more specific checks are needed.  This function is mainly used by `CheckCallInputs` to ensure that call sites have the appropriate arguments."
        },
        {
          "name": "PrintDebugHelp",
          "parameters": [
            "std::ostream& out",
            "Node const* node"
          ],
          "return_type": "void",
          "logic": "Prints debug information to the output stream, including the current basic block and instructions for debugging the specific node."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "MachineGraphVerifier::Run",
      "parameters": [
        "TFGraph* graph",
        "Schedule const* const schedule",
        "Linkage* linkage",
        "bool is_stub",
        "const char* name",
        "Zone* temp_zone"
      ],
      "return_type": "void",
      "logic": "The main entry point for the machine graph verifier. Creates a `MachineRepresentationInferrer` to infer the machine representations of nodes in the graph, then creates a `MachineRepresentationChecker` to verify the consistency of these representations.  The `MachineRepresentationChecker::Run` method will `FATAL` if any type errors are detected."
    }
  ]
}