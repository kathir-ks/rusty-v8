{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/operation-typer.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/operation-typer.cc\",\n  \"imports\": [\n    \"src/compiler/operation-typer.h\",\n    \"src/compiler/common-operator.h\",\n    \"src/compiler/js-heap-broker.h\",\n    \"src/compiler/turbofan-types.h\",\n    \"src/compiler/type-cache.h\",\n    \"src/objects/oddball.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"OperationTyper\",\n      \"properties\": [\n        \"zone_\",\n        \"cache_\",\n        \"infinity_\",\n        \"minus_infinity_\",\n        \"singleton_empty_string_\",\n        \"singleton_NaN_string_\",\n        \"singleton_zero_string_\",\n        \"singleton_false_\",\n        \"singleton_true_\",\n        \"signed32ish_\",\n        \"unsigned32ish_\",\n        \"falsish_\",\n        \"truish_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OperationTyper\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the OperationTyper class. Initializes member variables, creates constants, and precomputes some types for optimization.\"\n        },\n        {\n          \"name\": \"Merge\",\n          \"parameters\": [\n            \"Type left\",\n            \"Type right\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Merges two types into a union using the zone allocator.\"\n        },\n        {\n          \"name\": \"WeakenRange\",\n          \"parameters\": [\n            \"Type previous_range\",\n            \"Type current_range\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Weakens a numerical range type to a coarser range.  This is done using a predefined set of allowed minima and maxima.\"\n        },\n        {\n          \"name\": \"Rangify\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a range type if it's an integer, otherwise returns the original type.  Used to represent integer types as numerical ranges.\"\n        },\n        {\n          \"name\": \"AddRanger\",\n          \"parameters\": [\n            \"double lhs_min\",\n            \"double lhs_max\",\n            \"double rhs_min\",\n            \"double rhs_max\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting range type for the addition of two numerical range types.  Handles infinities and NaN values.\"\n        },\n        {\n          \"name\": \"SubtractRanger\",\n          \"parameters\": [\n            \"double lhs_min\",\n            \"double lhs_max\",\n            \"double rhs_min\",\n            \"double rhs_max\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting range type for the subtraction of two numerical range types. Handles infinities and NaN values.\"\n        },\n        {\n          \"name\": \"MultiplyRanger\",\n          \"parameters\": [\n            \"double lhs_min\",\n            \"double lhs_max\",\n            \"double rhs_min\",\n            \"double rhs_max\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting range type for the multiplication of two numerical range types.  Handles infinities, NaN, and -0.\"\n        },\n        {\n          \"name\": \"ConvertReceiver\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a given type to a receiver type, potentially including JSPrimitiveWrappers for primitives.\"\n        },\n        {\n          \"name\": \"ToNumber\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a Number type, handling conversions for primitives like null, undefined, false, and true.\"\n        },\n        {\n          \"name\": \"ToNumberConvertBigInt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a Number type, explicitly handling BigInt conversions.\"\n        },\n        {\n          \"name\": \"ToBigInt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a BigInt type. Returns the BigInt type.\"\n        },\n        {\n          \"name\": \"ToBigIntConvertNumber\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a BigInt type, explicitly handling Number conversions.\"\n        },\n        {\n          \"name\": \"ToNumeric\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a Numeric type (Number or BigInt).\"\n        },\n        {\n          \"name\": \"NumberAbs\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Calculates the absolute value type of a number type, handling NaN and -0.\"\n        },\n        {\n          \"name\": \"NumberAcos\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of acos operation.\"\n        },\n        {\n          \"name\": \"NumberAcosh\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of acosh operation.\"\n        },\n        {\n          \"name\": \"NumberAsin\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of asin operation.\"\n        },\n        {\n          \"name\": \"NumberAsinh\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of asinh operation.\"\n        },\n        {\n          \"name\": \"NumberAtan\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of atan operation.\"\n        },\n        {\n          \"name\": \"NumberAtanh\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of atanh operation.\"\n        },\n        {\n          \"name\": \"NumberCbrt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of cbrt operation.\"\n        },\n        {\n          \"name\": \"NumberCeil\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Calculates the ceiling type of a number type. Returns IntegerOrMinusZeroOrNaN type if its already that, otherwise removes NonInteger parts and returns IntegerOrMinusZero type. \"\n        },\n        {\n          \"name\": \"NumberClz32\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns the kZeroToThirtyTwo type as the result of clz32.\"\n        },\n        {\n          \"name\": \"NumberCos\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of cos operation.\"\n        },\n        {\n          \"name\": \"NumberCosh\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of cosh operation.\"\n        },\n        {\n          \"name\": \"NumberExp\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of exp operation.\"\n        },\n        {\n          \"name\": \"NumberExpm1\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of expm1 operation.\"\n        },\n        {\n          \"name\": \"NumberFloor\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Calculates the floor type of a number type. Returns IntegerOrMinusZeroOrNaN type if its already that, otherwise removes NonInteger parts and returns Integer type.\"\n        },\n        {\n          \"name\": \"NumberFround\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of fround operation.\"\n        },\n        {\n          \"name\": \"NumberLog\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of log operation.\"\n        },\n        {\n          \"name\": \"NumberLog1p\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of log1p operation.\"\n        },\n        {\n          \"name\": \"NumberLog2\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of log2 operation.\"\n        },\n        {\n          \"name\": \"NumberLog10\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of log10 operation.\"\n        },\n        {\n          \"name\": \"NumberRound\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Calculates the round type of a number type. Returns IntegerOrMinusZeroOrNaN type if its already that, otherwise removes NonInteger parts and returns IntegerOrMinusZero type.\"\n        },\n        {\n          \"name\": \"NumberSign\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the sign type of a number type, returning -1, 0, 1, or NaN depending on the sign of the input.\"\n        },\n        {\n          \"name\": \"NumberSin\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of sin operation.\"\n        },\n        {\n          \"name\": \"NumberSinh\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of sinh operation.\"\n        },\n        {\n          \"name\": \"NumberSqrt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of sqrt operation.\"\n        },\n        {\n          \"name\": \"NumberTan\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of tan operation.\"\n        },\n        {\n          \"name\": \"NumberTanh\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of tanh operation.\"\n        },\n        {\n          \"name\": \"NumberTrunc\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Calculates the trunc type of a number type. Returns IntegerOrMinusZeroOrNaN type if its already that, otherwise removes NonInteger parts and returns IntegerOrMinusZero type.\"\n        },\n        {\n          \"name\": \"NumberToBoolean\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a number type to a boolean type, mapping zeroish values to false and non-zero values to true.\"\n        },\n        {\n          \"name\": \"NumberToInt32\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a number type to a Signed32 integer type.\"\n        },\n        {\n          \"name\": \"NumberToString\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a number type to a String type, handling NaN and zero values.\"\n        },\n        {\n          \"name\": \"NumberToUint32\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a number type to an Unsigned32 integer type.\"\n        },\n        {\n          \"name\": \"NumberToUint8Clamped\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a number type to an Uint8 integer type using clamping.\"\n        },\n        {\n          \"name\": \"Integral32OrMinusZeroToBigInt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a number type to big int depending on ranges.\"\n        },\n        {\n          \"name\": \"NumberSilenceNaN\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"If the input type may be NaN, converts it to just Number.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntAsIntN\",\n          \"parameters\": [\n            \"Type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns a BigInt type.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntAsUintN\",\n          \"parameters\": [\n            \"Type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns an Unsigned BigInt type.\"\n        },\n        {\n          \"name\": \"CheckBigInt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Verifies that the input type is of BigInt type and returns BigInt Type.\"\n        },\n        {\n          \"name\": \"CheckedBigIntToBigInt64\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns a signed BigInt Type.\"\n        },\n        {\n          \"name\": \"NumberAdd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the addition of two number types, handling NaN, -0, and integer types.\"\n        },\n        {\n          \"name\": \"NumberSubtract\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the subtraction of two number types, handling NaN, -0, and integer types.\"\n        },\n        {\n          \"name\": \"SpeculativeAdditiveSafeIntegerAdd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative addition of SafeIntegers\"\n        },\n        {\n          \"name\": \"SpeculativeAdditiveSafeIntegerSubtract\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative subtraction of SafeIntegers\"\n        },\n        {\n          \"name\": \"SpeculativeSmallIntegerAdd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative addition of SmallIntegers.\"\n        },\n        {\n          \"name\": \"SpeculativeSmallIntegerSubtract\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative subtraction of SmallIntegers\"\n        },\n        {\n          \"name\": \"NumberMultiply\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the multiplication of two number types, handling NaN, -0, integer types, and infinities.\"\n        },\n        {\n          \"name\": \"NumberDivide\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the division of two number types, handling NaN and -0.\"\n        },\n        {\n          \"name\": \"NumberModulus\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the modulus operation of two number types, handling NaN and -0.\"\n        },\n        {\n          \"name\": \"NumberBitwiseOr\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the bitwise OR operation of two number types.\"\n        },\n        {\n          \"name\": \"NumberBitwiseAnd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the bitwise AND operation of two number types.\"\n        },\n        {\n          \"name\": \"NumberBitwiseXor\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the bitwise XOR operation of two number types.\"\n        },\n        {\n          \"name\": \"NumberShiftLeft\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the bitwise shift left operation of two number types.\"\n        },\n        {\n          \"name\": \"NumberShiftRight\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the bitwise shift right operation of two number types.\"\n        },\n        {\n          \"name\": \"NumberShiftRightLogical\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines the resulting type for the bitwise shift right logical operation of two number types.\"\n        },\n        {\n          \"name\": \"NumberAtan2\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of atan2 operation.\"\n        },\n        {\n          \"name\": \"NumberImul\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Signed32 type as result of imul operation.\"\n        },\n        {\n          \"name\": \"NumberMax\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determine the resulting type for Number.max\"\n        },\n        {\n          \"name\": \"NumberMin\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determine the resulting type for Number.min\"\n        },\n        {\n          \"name\": \"NumberPow\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Number type as result of pow operation.\"\n        },\n        {\n          \"name\": \"SpeculativeNumberAdd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative addition of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberSubtract\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative subtraction of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberMultiply\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative multiplication of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberPow\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative pow of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberDivide\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative division of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberModulus\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative modulus operation of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberBitwiseOr\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative bitwise or operation of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberBitwiseAnd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative bitwise and operation of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberBitwiseXor\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative bitwise xor operation of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberShiftLeft\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative shift left operation of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberShiftRight\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative shift right operation of Numbers\"\n        },\n        {\n          \"name\": \"SpeculativeNumberShiftRightLogical\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Performs speculative shift right logical operation of Numbers\"\n        },\n         {\n          \"name\": \"ChangeUint32ToUint64\",\n          \"parameters\": [\n            \"Type input\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns Machine type.\"\n        },\n        {\n          \"name\": \"BigIntAdd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of add operation.\"\n        },\n        {\n          \"name\": \"BigIntSubtract\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of subtract operation.\"\n        },\n        {\n          \"name\": \"BigIntMultiply\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of multiply operation.\"\n        },\n        {\n          \"name\": \"BigIntDivide\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of divide operation.\"\n        },\n        {\n          \"name\": \"BigIntModulus\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of modulus operation.\"\n        },\n        {\n          \"name\": \"BigIntBitwiseAnd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of bitwiseAnd operation.\"\n        },\n        {\n          \"name\": \"BigIntBitwiseOr\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of bitwiseOr operation.\"\n        },\n        {\n          \"name\": \"BigIntBitwiseXor\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of bitwiseXor operation.\"\n        },\n        {\n          \"name\": \"BigIntShiftLeft\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of shiftLeft operation.\"\n        },\n        {\n          \"name\": \"BigIntShiftRight\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of shiftRight operation.\"\n        },\n        {\n          \"name\": \"BigIntNegate\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of negate operation.\"\n        },\n       {\n          \"name\": \"SpeculativeBigIntAdd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of add operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntSubtract\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of subtract operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntMultiply\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of multiply operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntDivide\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of divide operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntModulus\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of modulus operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntBitwiseAnd\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of bitwiseAnd operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntBitwiseOr\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of bitwiseOr operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntBitwiseXor\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of bitwiseXor operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntShiftLeft\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of shiftLeft operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntShiftRight\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of shiftRight operation.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntNegate\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns BigInt type as result of negate operation.\"\n        },\n        {\n          \"name\": \"SpeculativeToBigInt\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts to big int type\"\n        },\n        {\n          \"name\": \"SpeculativeToNumber\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts to number type\"\n        },\n        {\n          \"name\": \"ToPrimitive\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Converts a type to a primitive type.\"\n        },\n        {\n          \"name\": \"Invert\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Inverts a boolean type.\"\n        },\n        {\n          \"name\": \"Invert\",\n          \"parameters\": [\n            \"ComparisonOutcome outcome\"\n          ],\n          \"return_type\": \"ComparisonOutcome\",\n          \"logic\": \"Inverts a ComparisonOutcome.\"\n        },\n        {\n          \"name\": \"FalsifyUndefined\",\n          \"parameters\": [\n            \"ComparisonOutcome outcome\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Falsifies an undefined comparison outcome, returning a boolean type.\"\n        },\n        {\n          \"name\": \"SameValue\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines if two types are the same using SameValue semantics.\"\n        },\n         {\n          \"name\": \"SameValueNumbersOnly\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines if two types are the same using SameValueNumbersOnly semantics.\"\n        },\n        {\n          \"name\": \"StrictEqual\",\n          \"parameters\": [\n            \"Type lhs\",\n            \"Type rhs\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Determines if two types are strictly equal.\"\n        },\n        {\n          \"name\": \"CheckBounds\",\n          \"parameters\": [\n            \"Type index\",\n            \"Type length\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Checks if an index is within the bounds of a given length.\"\n        },\n        {\n          \"name\": \"CheckFloat64Hole\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Checks if a type may be a Float64 hole, converting it to undefined if necessary.\"\n        },\n        {\n          \"name\": \"CheckNumber\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Checks if a type is a Number type\"\n        },\n        {\n          \"name\": \"CheckNumberFitsInt32\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Checks if a type is a Number type and fits in Int32 range.\"\n        },\n        {\n          \"name\": \"TypeTypeGuard\",\n          \"parameters\": [\n            \"const Operator* sigma_op\",\n            \"Type input\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"Intersects the input type with the type guard of the given sigma operator.\"\n        },\n        {\n          \"name\": \"ConvertTaggedHoleToUndefined\",\n          \"parameters\": [\n            \"Type input\"\n          ],\n          \"return_type\": \"Type\",\n          \"logic\": \"If a tagged hole is present, turns a 'hole' type into undefined.\"\n        },\n        {\n          \"name\": \"ToBoolean\",\n          \"parameters"
}