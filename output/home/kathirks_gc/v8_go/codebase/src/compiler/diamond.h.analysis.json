{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/diamond.h",
  "imports": [
    "src/compiler/common-operator.h",
    "src/compiler/node.h",
    "src/compiler/turbofan-graph.h"
  ],
  "classes": [
    {
      "name": "Diamond",
      "properties": [
        "graph",
        "common",
        "branch",
        "if_true",
        "if_false",
        "merge"
      ],
      "methods": [
        {
          "name": "Diamond",
          "parameters": [
            "TFGraph* g",
            "CommonOperatorBuilder* b",
            "Node* cond",
            "BranchHint hint = BranchHint::kNone",
            "BranchSemantics semantics = BranchSemantics::kUnspecified"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the Diamond struct. It initializes the graph, common operator builder, and creates the branch, if_true, if_false, and merge nodes that form the diamond control flow pattern based on the provided condition node."
        },
        {
          "name": "Chain",
          "parameters": [
            "Diamond const& that"
          ],
          "return_type": "void",
          "logic": "Chains this diamond after another diamond in control flow. It replaces the input of the 'branch' node's control input (index 1) with the 'merge' node of the 'that' diamond."
        },
        {
          "name": "Chain",
          "parameters": [
            "Node* that"
          ],
          "return_type": "void",
          "logic": "Chains this diamond after a given node in control flow.  It replaces the input of the 'branch' node's control input (index 1) with the given node 'that'."
        },
        {
          "name": "Nest",
          "parameters": [
            "Diamond const& that",
            "bool cond"
          ],
          "return_type": "void",
          "logic": "Nests this diamond into either the if_true or if_false branch of another diamond ('that'). If 'cond' is true, it nests into the if_true branch, otherwise into the if_false branch. It also updates the appropriate input of the outer diamond's merge node to point to the nested diamond's merge node."
        },
        {
          "name": "Phi",
          "parameters": [
            "MachineRepresentation rep",
            "Node* tv",
            "Node* fv"
          ],
          "return_type": "Node*",
          "logic": "Creates a Phi node, selecting between 'tv' (true value) and 'fv' (false value) based on the diamond's branch condition. The merge node is used as the control input to the Phi node."
        },
        {
          "name": "EffectPhi",
          "parameters": [
            "Node* tv",
            "Node* fv"
          ],
          "return_type": "Node*",
          "logic": "Creates an EffectPhi node, similar to Phi, but for effect dependencies. It selects between 'tv' (true effect) and 'fv' (false effect) based on the diamond's branch condition. The merge node is used as the control input to the EffectPhi node."
        }
      ]
    }
  ],
  "functions": []
}