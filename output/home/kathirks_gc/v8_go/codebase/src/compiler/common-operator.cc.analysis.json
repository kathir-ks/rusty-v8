{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/common-operator.cc",
  "imports": [
    "src/compiler/common-operator.h",
    "<optional>",
    "src/base/hashing.h",
    "src/base/lazy-instance.h",
    "src/compiler/linkage.h",
    "src/compiler/node.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/handles/handles-inl.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "SparseInputMask",
      "properties": [
        "BitMaskType bit_mask_",
        "static const BitMaskType kDenseBitMask",
        "static const BitMaskType kEndMarker",
        "static const BitMaskType kEntryMask"
      ],
      "methods": [
        {
          "name": "CountReal",
          "parameters": [],
          "return_type": "int",
          "logic": "Counts the number of real inputs represented by the bit mask, excluding the end marker.  This method should not be called when the mask is dense."
        },
        {
          "name": "IterateOverInputs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "InputIterator",
          "logic": "Creates an iterator to traverse the real inputs of a node based on the sparse input mask."
        },
        {
          "name": "IsDense",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the sparse input mask is dense"
        },
        {
          "name": "mask",
          "parameters": [],
          "return_type": "BitMaskType",
          "logic": "Returns the internal mask"
        }
      ]
    },
    {
      "name": "SparseInputMask::InputIterator",
      "properties": [
        "BitMaskType bit_mask_",
        "Node* parent_",
        "size_t real_index_"
      ],
      "methods": [
        {
          "name": "InputIterator",
          "parameters": [
            "SparseInputMask::BitMaskType bit_mask",
            "Node* parent"
          ],
          "return_type": "void",
          "logic": "Constructor for the InputIterator.  Initializes the bit mask, parent node, and real index."
        },
        {
          "name": "Advance",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the iterator to the next input. Increments real_index_ if it is a real input."
        },
        {
          "name": "AdvanceToNextRealOrEnd",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Advances the iterator to the next real input or the end, returning the number of positions skipped."
        },
        {
          "name": "GetReal",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the Node pointer at the current real index."
        },
        {
          "name": "IsReal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current iterator position represents a real input."
        },
        {
          "name": "IsEnd",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the iterator has reached the end."
        }
      ]
    },
    {
      "name": "CommonOperatorGlobalCache",
      "properties": [],
      "methods": []
    },
    {
      "name": "CommonOperatorBuilder",
      "properties": [
        "cache_",
        "zone_"
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "BranchHint hint"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a BranchHint value to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "BranchSemantics semantics"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a BranchSemantics value to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "TrapId trap_id"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a TrapId value to an output stream."
    },
    {
      "name": "TrapIdOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "TrapId",
      "logic": "Retrieves the TrapId associated with a TrapIf or TrapUnless operator."
    },
    {
      "name": "operator==",
      "parameters": [
        "const BranchParameters& lhs",
        "const BranchParameters& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two BranchParameters are equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "const BranchParameters& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a BranchParameters object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const BranchParameters& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a BranchParameters object to an output stream."
    },
    {
      "name": "BranchParametersOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "const BranchParameters&",
      "logic": "Retrieves the BranchParameters associated with a Branch operator."
    },
    {
      "name": "BranchHintOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "BranchHint",
      "logic": "Retrieves the BranchHint associated with a Branch, IfValue or IfDefault operator."
    },
    {
      "name": "operator==",
      "parameters": [
        "const AssertParameters& lhs",
        "const AssertParameters& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two AssertParameters are equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "const AssertParameters& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for an AssertParameters object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const AssertParameters& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an AssertParameters object to an output stream."
    },
    {
      "name": "AssertParametersOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "const AssertParameters&",
      "logic": "Retrieves the AssertParameters associated with an Assert operator."
    },
    {
      "name": "ValueInputCountOfReturn",
      "parameters": [
        "Operator const* const op"
      ],
      "return_type": "int",
      "logic": "Returns the number of value inputs of a Return node, excluding the hidden input."
    },
    {
      "name": "operator==",
      "parameters": [
        "DeoptimizeParameters lhs",
        "DeoptimizeParameters rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two DeoptimizeParameters are equal."
    },
    {
      "name": "operator!=",
      "parameters": [
        "DeoptimizeParameters lhs",
        "DeoptimizeParameters rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two DeoptimizeParameters are not equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "DeoptimizeParameters p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a DeoptimizeParameters object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "DeoptimizeParameters p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a DeoptimizeParameters object to an output stream."
    },
    {
      "name": "DeoptimizeParametersOf",
      "parameters": [
        "Operator const* const op"
      ],
      "return_type": "DeoptimizeParameters const&",
      "logic": "Retrieves the DeoptimizeParameters associated with a Deoptimize, DeoptimizeIf, or DeoptimizeUnless operator."
    },
    {
      "name": "operator==",
      "parameters": [
        "SelectParameters const& lhs",
        "SelectParameters const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two SelectParameters objects are equal."
    },
    {
      "name": "operator!=",
      "parameters": [
        "SelectParameters const& lhs",
        "SelectParameters const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two SelectParameters objects are not equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "SelectParameters const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value of SelectParameters object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "SelectParameters const& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a SelectParameters object to an output stream."
    },
    {
      "name": "SelectParametersOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "SelectParameters const&",
      "logic": "Retrieves the SelectParameters associated with a Select operator."
    },
    {
      "name": "CallDescriptorOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "CallDescriptor const*",
      "logic": "Retrieves the CallDescriptor associated with a Call or TailCall operator."
    },
    {
      "name": "ProjectionIndexOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "size_t",
      "logic": "Retrieves the index associated with a Projection operator."
    },
    {
      "name": "PhiRepresentationOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "MachineRepresentation",
      "logic": "Retrieves the MachineRepresentation associated with a Phi operator."
    },
    {
      "name": "LoopExitValueRepresentationOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "MachineRepresentation",
      "logic": "Retrieves the MachineRepresentation associated with a LoopExitValue operator."
    },
    {
      "name": "ParameterIndexOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "int",
      "logic": "Retrieves the index of a Parameter node."
    },
    {
      "name": "ParameterInfoOf",
      "parameters": [
        "const Operator* const op"
      ],
      "return_type": "const ParameterInfo&",
      "logic": "Retrieves the ParameterInfo associated with a Parameter operator."
    },
    {
      "name": "operator==",
      "parameters": [
        "ParameterInfo const& lhs",
        "ParameterInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two ParameterInfo objects are equal."
    },
    {
      "name": "operator!=",
      "parameters": [
        "ParameterInfo const& lhs",
        "ParameterInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two ParameterInfo objects are not equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "ParameterInfo const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value of ParameterInfo."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "ParameterInfo const& i"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a ParameterInfo object to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "ObjectStateInfo const& i"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an ObjectStateInfo object to an output stream."
    },
    {
      "name": "hash_value",
      "parameters": [
        "ObjectStateInfo const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for an ObjectStateInfo object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "TypedObjectStateInfo const& i"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a TypedObjectStateInfo object to an output stream."
    },
    {
      "name": "hash_value",
      "parameters": [
        "TypedObjectStateInfo const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a TypedObjectStateInfo object."
    },
    {
      "name": "operator==",
      "parameters": [
        "RelocatablePtrConstantInfo const& lhs",
        "RelocatablePtrConstantInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two RelocatablePtrConstantInfo objects are equal."
    },
    {
      "name": "operator!=",
      "parameters": [
        "RelocatablePtrConstantInfo const& lhs",
        "RelocatablePtrConstantInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two RelocatablePtrConstantInfo objects are not equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "RelocatablePtrConstantInfo const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a RelocatablePtrConstantInfo object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "RelocatablePtrConstantInfo const& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a RelocatablePtrConstantInfo object to an output stream."
    },
    {
      "name": "operator==",
      "parameters": [
        "SparseInputMask const& lhs",
        "SparseInputMask const& rhs"
      ],
      "return_type": "bool",
      "logic": "Compares two sparse input masks for equality"
    },
    {
      "name": "operator!=",
      "parameters": [
        "SparseInputMask const& lhs",
        "SparseInputMask const& rhs"
      ],
      "return_type": "bool",
      "logic": "Compares two sparse input masks for inequality"
    },
    {
      "name": "hash_value",
      "parameters": [
        "SparseInputMask const& p"
      ],
      "return_type": "size_t",
      "logic": "Computes a hash value for a sparse input mask"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "SparseInputMask const& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Prints a sparse input mask in a human-readable format"
    },
    {
      "name": "operator==",
      "parameters": [
        "TypedStateValueInfo const& lhs",
        "TypedStateValueInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two TypedStateValueInfo objects are equal."
    },
    {
      "name": "operator!=",
      "parameters": [
        "TypedStateValueInfo const& lhs",
        "TypedStateValueInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two TypedStateValueInfo objects are not equal."
    },
    {
      "name": "hash_value",
      "parameters": [
        "TypedStateValueInfo const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a TypedStateValueInfo object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "TypedStateValueInfo const& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a TypedStateValueInfo object to an output stream."
    },
    {
      "name": "hash_value",
      "parameters": [
        "RegionObservability observability"
      ],
      "return_type": "size_t",
      "logic": "Calculates hash value of region observability."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "RegionObservability observability"
      ],
      "return_type": "std::ostream&",
      "logic": "Prints a region observability enum."
    },
    {
      "name": "RegionObservabilityOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "RegionObservability",
      "logic": "Returns the region observability value of a BeginRegion operator"
    },
    {
      "name": "TypeGuardTypeOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "Type",
      "logic": "Returns the Type of a TypeGuard operator"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const ZoneVector<MachineType>* types"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a ZoneVector of MachineType objects to an output stream."
    },
    {
      "name": "OsrValueIndexOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "int",
      "logic": "Returns the index associated with the OsrValue operator"
    },
    {
      "name": "SparseInputMaskOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "SparseInputMask",
      "logic": "Returns the SparseInputMask of StateValues or TypedStateValues operator."
    },
    {
      "name": "MachineTypesOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "ZoneVector<MachineType> const*",
      "logic": "Returns the MachineType of TypedObjectState or TypedStateValues operator."
    },
    {
      "name": "operator==",
      "parameters": [
        "IfValueParameters const& l",
        "IfValueParameters const& r"
      ],
      "return_type": "bool",
      "logic": "Tests two IfValueParameters objects for equality"
    },
    {
      "name": "hash_value",
      "parameters": [
        "IfValueParameters const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value of an IfValueParameters object"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& out",
        "IfValueParameters const& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Prints an IfValueParameters object in a human-readable format"
    },
    {
      "name": "IfValueParametersOf",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "IfValueParameters const&",
      "logic": "Returns the IfValueParameters of an IfValue operator"
    },
    {
      "name": "operator==",
      "parameters": [
        "const SLVerifierHintParameters& p1",
        "const SLVerifierHintParameters& p2"
      ],
      "return_type": "bool",
      "logic": "Compares two SLVerifierHintParameters objects for equality"
    },
    {
      "name": "hash_value",
      "parameters": [
        "const SLVerifierHintParameters& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value of an SLVerifierHintParameters object"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& out",
        "const SLVerifierHintParameters& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Prints an SLVerifierHintParameters object in a human-readable format"
    },
    {
      "name": "SLVerifierHintParametersOf",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "const SLVerifierHintParameters&",
      "logic": "Returns the SLVerifierHintParameters of an SLVerifierHint operator"
    },
    {
      "name": "operator==",
      "parameters": [
        "const ExitMachineGraphParameters& lhs",
        "const ExitMachineGraphParameters& rhs"
      ],
      "return_type": "bool",
      "logic": "Tests two ExitMachineGraphParameters for equality."
    },
    {
      "name": "hash_value",
      "parameters": [
        "const ExitMachineGraphParameters& p"
      ],
      "return_type": "size_t",
      "logic": "Hashes an ExitMachineGraphParameters object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const ExitMachineGraphParameters& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Prints an ExitMachineGraphParameters object."
    },
    {
      "name": "ExitMachineGraphParametersOf",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "const ExitMachineGraphParameters&",
      "logic": "Returns the ExitMachineGraphParameters of an ExitMachineGraph operator"
    },
    {
      "name": "HeapConstantOf",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "Handle<HeapObject>",
      "logic": "Returns the HeapConstant associated with a HeapConstant, CompressedHeapConstant, or TrustedHeapConstant operator."
    },
    {
      "name": "StaticAssertSourceOf",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "const char*",
      "logic": "Gets the source string for the StaticAssert operator"
    },
    {
      "name": "ObjectIdOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "uint32_t",
      "logic": "Returns the object ID of an ObjectState, TypedObjectState, or ObjectId operator"
    },
    {
      "name": "DeadValueRepresentationOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "MachineRepresentation",
      "logic": "Returns the machine representation of a DeadValue operator"
    },
    {
      "name": "FrameStateInfoOf",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "const FrameStateInfo&",
      "logic": "Returns the FrameStateInfo of a FrameState operator"
    },
    {
      "name": "ArgumentsStateTypeOf",
      "parameters": [
        "Operator const* op"
      ],
      "return_type": "ArgumentsStateType",
      "logic": "Returns the ArgumentsStateType of an ArgumentsElementsState operator."
    }
  ]
}