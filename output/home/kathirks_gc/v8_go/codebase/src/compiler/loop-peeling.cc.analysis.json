{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/loop-peeling.cc",
  "imports": [
    "src/compiler/loop-peeling.h",
    "src/compiler/common-operator.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/loop-analysis.h",
    "src/compiler/node-marker.h",
    "src/compiler/node-origin-table.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/turbofan-graph.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "PeeledIterationImpl",
      "properties": [
        "NodeVector node_pairs_"
      ],
      "methods": [
        {
          "name": "PeeledIterationImpl",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for PeeledIterationImpl. Initializes the node_pairs_ vector."
        }
      ]
    },
    {
      "name": "PeeledIteration",
      "properties": [],
      "methods": [
        {
          "name": "map",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Maps a node from the original loop to its corresponding node in the peeled iteration. Performs a linear search through node_pairs_ to find the mapping."
        }
      ]
    },
    {
      "name": "LoopPeeler",
      "properties": [],
      "methods": [
        {
          "name": "Peel",
          "parameters": [
            "LoopTree::Loop* loop"
          ],
          "return_type": "PeeledIteration*",
          "logic": "Peels a given loop. It creates a copy of the loop body, maps header nodes, replaces the loop entry with the peeled iteration's output, and modifies exit nodes to merge/phi nodes. Returns the peeled iteration or nullptr if the loop cannot be peeled."
        },
        {
          "name": "PeelInnerLoops",
          "parameters": [
            "LoopTree::Loop* loop"
          ],
          "return_type": "void",
          "logic": "Recursively peels inner loops within a given loop. Only peels loops that are small enough."
        },
        {
          "name": "EliminateLoopExit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Eliminates a given LoopExit node by replacing uses of the exit and related exit markers with appropriate inputs. Kills the node after replacement."
        },
        {
          "name": "PeelInnerLoopsOfTree",
          "parameters": [],
          "return_type": "void",
          "logic": "Peels inner loops of the entire loop tree and eliminates unnecessary loop exits."
        },
        {
          "name": "EliminateLoopExits",
          "parameters": [
            "TFGraph* graph",
            "Zone* tmp_zone"
          ],
          "return_type": "void",
          "logic": "Static method to eliminate all loop exits in the graph by traversing the control flow graph starting from the end node.  Uses EliminateLoopExit to handle each LoopExit node."
        }
      ]
    }
  ],
  "functions": []
}