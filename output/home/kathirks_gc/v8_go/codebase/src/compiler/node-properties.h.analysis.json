{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/node-properties.h",
  "imports": [
    "src/codegen/machine-type.h",
    "src/common/globals.h",
    "src/compiler/heap-refs.h",
    "src/compiler/node.h",
    "src/compiler/operator-properties.h",
    "src/compiler/turbofan-types.h"
  ],
  "classes": [
    {
      "name": "NodeProperties",
      "properties": [],
      "methods": [
        {
          "name": "FirstValueIndex",
          "parameters": [
            "const Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index of the first value input for a given node (always 0)."
        },
        {
          "name": "FirstContextIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index of the first context input for a given node."
        },
        {
          "name": "FirstFrameStateIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index of the first frame state input for a given node."
        },
        {
          "name": "FirstEffectIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index of the first effect input for a given node."
        },
        {
          "name": "FirstControlIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index of the first control input for a given node."
        },
        {
          "name": "PastValueIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index after the last value input for a given node."
        },
        {
          "name": "PastContextIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index after the last context input for a given node."
        },
        {
          "name": "PastFrameStateIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index after the last frame state input for a given node."
        },
        {
          "name": "PastEffectIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index after the last effect input for a given node."
        },
        {
          "name": "PastControlIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Returns the index after the last control input for a given node."
        },
        {
          "name": "GetValueInput",
          "parameters": [
            "Node* node",
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Returns the value input at the given index for a given node."
        },
        {
          "name": "GetValueInput",
          "parameters": [
            "const Node* node",
            "int index"
          ],
          "return_type": "const Node*",
          "logic": "Returns the value input at the given index for a given node (const version)."
        },
        {
          "name": "GetContextInput",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Returns the context input for a given node."
        },
        {
          "name": "GetFrameStateInput",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Returns the frame state input for a given node."
        },
        {
          "name": "GetEffectInput",
          "parameters": [
            "Node* node",
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Returns the effect input at the given index for a given node."
        },
        {
          "name": "GetControlInput",
          "parameters": [
            "Node* node",
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Returns the control input at the given index for a given node."
        },
        {
          "name": "IsValueEdge",
          "parameters": [
            "Edge edge"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given edge is a value edge."
        },
        {
          "name": "IsContextEdge",
          "parameters": [
            "Edge edge"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given edge is a context edge."
        },
        {
          "name": "IsFrameStateEdge",
          "parameters": [
            "Edge edge"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given edge is a frame state edge."
        },
        {
          "name": "IsEffectEdge",
          "parameters": [
            "Edge edge"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given edge is an effect edge."
        },
        {
          "name": "IsControlEdge",
          "parameters": [
            "Edge edge"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given edge is a control edge."
        },
        {
          "name": "IsCommon",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given node is a common node."
        },
        {
          "name": "IsControl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given node is a control node."
        },
        {
          "name": "IsConstant",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given node is a constant node."
        },
        {
          "name": "IsPhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given node is a phi node."
        },
        {
          "name": "IsSimd128Operation",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given node is a Simd128 Operation node. (Only enabled with V8_ENABLE_WEBASSEMBLY)"
        },
        {
          "name": "IsExceptionalCall",
          "parameters": [
            "Node* node",
            "Node** out_exception"
          ],
          "return_type": "bool",
          "logic": "Determines whether exceptions thrown by the given node are handled locally within the graph."
        },
        {
          "name": "FindSuccessfulControlProjection",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Returns the node producing the successful control output of the given node."
        },
        {
          "name": "IsValueIdentity",
          "parameters": [
            "Node* node",
            "Node** out_value"
          ],
          "return_type": "bool",
          "logic": "Returns whether the node acts as the identity function on a value input."
        },
        {
          "name": "ReplaceValueInput",
          "parameters": [
            "Node* node",
            "Node* value",
            "int index"
          ],
          "return_type": "void",
          "logic": "Replaces a value input of a node with a new value."
        },
        {
          "name": "ReplaceContextInput",
          "parameters": [
            "Node* node",
            "Node* context"
          ],
          "return_type": "void",
          "logic": "Replaces the context input of a node with a new context."
        },
        {
          "name": "ReplaceControlInput",
          "parameters": [
            "Node* node",
            "Node* control",
            "int index"
          ],
          "return_type": "void",
          "logic": "Replaces a control input of a node with a new control."
        },
        {
          "name": "ReplaceEffectInput",
          "parameters": [
            "Node* node",
            "Node* effect",
            "int index"
          ],
          "return_type": "void",
          "logic": "Replaces an effect input of a node with a new effect."
        },
        {
          "name": "ReplaceFrameStateInput",
          "parameters": [
            "Node* node",
            "Node* frame_state"
          ],
          "return_type": "void",
          "logic": "Replaces the frame state input of a node with a new frame state."
        },
        {
          "name": "RemoveNonValueInputs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Removes all non-value inputs from the given node."
        },
        {
          "name": "RemoveValueInputs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Removes all value inputs from the given node."
        },
        {
          "name": "ReplaceValueInputs",
          "parameters": [
            "Node* node",
            "Node* value"
          ],
          "return_type": "void",
          "logic": "Replaces all value inputs of a node with a single value input."
        },
        {
          "name": "MergeControlToEnd",
          "parameters": [
            "TFGraph* graph",
            "CommonOperatorBuilder* common",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Merge the control node {node} into the end of the graph, introducing a merge node or expanding an existing merge node if necessary."
        },
        {
          "name": "RemoveControlFromEnd",
          "parameters": [
            "TFGraph* graph",
            "CommonOperatorBuilder* common",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Removes the control node {node} from the end of the graph, reducing the existing merge node's input count."
        },
        {
          "name": "ReplaceUses",
          "parameters": [
            "Node* node",
            "Node* value",
            "Node* effect",
            "Node* success",
            "Node* exception"
          ],
          "return_type": "void",
          "logic": "Replaces all uses of a node with the given replacement nodes."
        },
        {
          "name": "ChangeOp",
          "parameters": [
            "Node* node",
            "const Operator* new_op"
          ],
          "return_type": "void",
          "logic": "Safely changes the operator of a node, checking constraints."
        },
        {
          "name": "ChangeOpUnchecked",
          "parameters": [
            "Node* node",
            "const Operator* new_op"
          ],
          "return_type": "void",
          "logic": "Changes the operator of a node without checking constraints."
        },
        {
          "name": "FindFrameStateBefore",
          "parameters": [
            "Node* node",
            "Node* unreachable_sentinel"
          ],
          "return_type": "Node*",
          "logic": "Finds the last frame state before the given node in the effect chain."
        },
        {
          "name": "FindProjection",
          "parameters": [
            "Node* node",
            "size_t projection_index"
          ],
          "return_type": "Node*",
          "logic": "Collect the output-value projection for the given output index."
        },
        {
          "name": "CollectValueProjections",
          "parameters": [
            "Node* node",
            "Node** proj",
            "size_t count"
          ],
          "return_type": "void",
          "logic": "Collect the value projections from a node."
        },
        {
          "name": "CollectControlProjections",
          "parameters": [
            "Node* node",
            "Node** proj",
            "size_t count"
          ],
          "return_type": "void",
          "logic": "Collect the control projections from a node, such as IfTrue, IfFalse, IfSuccess, IfException, IfValue and IfDefault."
        },
        {
          "name": "GetProjectionType",
          "parameters": [
            "Node const* projection"
          ],
          "return_type": "MachineRepresentation",
          "logic": "Return the MachineRepresentation of a Projection based on its input."
        },
        {
          "name": "IsSame",
          "parameters": [
            "Node* a",
            "Node* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two nodes are the same, looking past {CheckHeapObject}."
        },
        {
          "name": "Equals",
          "parameters": [
            "Node* a",
            "Node* b"
          ],
          "return_type": "bool",
          "logic": "Check if two nodes have equal operators and reference-equal inputs. Used for value numbering/hash-consing."
        },
        {
          "name": "HashCode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "size_t",
          "logic": "A corresponding hash function for comparing nodes."
        },
        {
          "name": "InferMapsUnsafe",
          "parameters": [
            "JSHeapBroker* broker",
            "Node* receiver",
            "Effect effect",
            "ZoneRefSet<Map>* maps_out"
          ],
          "return_type": "InferMapsResult",
          "logic": "Walks up the {effect} chain to find a witness that provides map information about the {receiver}. Can look through potentially side effecting nodes."
        },
        {
          "name": "GetJSCreateMap",
          "parameters": [
            "JSHeapBroker* broker",
            "Node* receiver"
          ],
          "return_type": "OptionalMapRef",
          "logic": "Return the initial map of the new-target if the allocation can be inlined."
        },
        {
          "name": "NoObservableSideEffectBetween",
          "parameters": [
            "Node* effect",
            "Node* dominator"
          ],
          "return_type": "bool",
          "logic": "Walks up the {effect} chain to check that there's no observable side-effect between the {effect} and it's {dominator}."
        },
        {
          "name": "CanBePrimitive",
          "parameters": [
            "JSHeapBroker* broker",
            "Node* receiver",
            "Effect effect"
          ],
          "return_type": "bool",
          "logic": "Returns true if the {receiver} can be a primitive value."
        },
        {
          "name": "CanBeNullOrUndefined",
          "parameters": [
            "JSHeapBroker* broker",
            "Node* receiver",
            "Effect effect"
          ],
          "return_type": "bool",
          "logic": "Returns true if the {receiver} can be null or undefined."
        },
        {
          "name": "GetOuterContext",
          "parameters": [
            "Node* node",
            "size_t* depth"
          ],
          "return_type": "Node*",
          "logic": "Walk up the context chain from the given {node}."
        },
        {
          "name": "IsTyped",
          "parameters": [
            "const Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node has a type assigned."
        },
        {
          "name": "GetType",
          "parameters": [
            "const Node* node"
          ],
          "return_type": "Type",
          "logic": "Returns the type of a node."
        },
        {
          "name": "GetTypeOrAny",
          "parameters": [
            "const Node* node"
          ],
          "return_type": "Type",
          "logic": "Returns the type of a node or Type::Any if no type is specified."
        },
        {
          "name": "SetType",
          "parameters": [
            "Node* node",
            "Type type"
          ],
          "return_type": "void",
          "logic": "Sets the type of a node."
        },
        {
          "name": "RemoveType",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Removes the type of a node by setting to Type::Invalid()"
        },
        {
          "name": "AllValueInputsAreTyped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks that all value inputs of node are typed"
        },
        {
          "name": "IsInputRange",
          "parameters": [
            "Edge edge",
            "int first",
            "int count"
          ],
          "return_type": "bool",
          "logic": "Check if the edge is within a given range of inputs"
        }
      ]
    }
  ],
  "functions": []
}