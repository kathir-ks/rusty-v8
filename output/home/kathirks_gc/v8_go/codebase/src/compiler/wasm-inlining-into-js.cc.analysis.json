{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-inlining-into-js.cc",
  "imports": [
    "src/compiler/wasm-inlining-into-js.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/wasm-compiler-definitions.h",
    "src/compiler/wasm-compiler.h",
    "src/compiler/wasm-graph-assembler.h",
    "src/wasm/decoder.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-opcodes-inl.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "WasmIntoJSInlinerImpl",
      "properties": [
        "module_",
        "mcgraph_",
        "body_",
        "parameters_",
        "graph_",
        "gasm_",
        "source_position_table_",
        "instruction_start_",
        "inlining_id_",
        "is_inlineable_",
        "trusted_data_node_"
      ],
      "methods": [
        {
          "name": "WasmIntoJSInlinerImpl",
          "parameters": [
            "Zone* zone",
            "const wasm::WasmModule* module",
            "MachineGraph* mcgraph",
            "const wasm::FunctionBody& body",
            "base::Vector<const uint8_t> bytes",
            "SourcePositionTable* source_position_table",
            "int inlining_id"
          ],
          "return_type": "void",
          "logic": "Constructor for the inliner. Initializes internal state, including the graph, parameters, and the WasmGraphAssembler. Also sets up the start and end nodes of the graph."
        },
        {
          "name": "Param",
          "parameters": [
            "int index",
            "const char* debug_name = nullptr"
          ],
          "return_type": "Node*",
          "logic": "Retrieves or creates a parameter node for the given index. Adds a type guard based on the inlinee's signature, when the parameter represents a WebAssembly parameter."
        },
        {
          "name": "TryInlining",
          "parameters": [],
          "return_type": "bool",
          "logic": "Attempts to inline the Wasm function body into the JavaScript code. Parses the function body, handling supported Wasm opcodes. Returns true if inlining succeeds, false otherwise. This function contains the main logic to inline functions."
        },
        {
          "name": "ParseAnyConvertExtern",
          "parameters": [
            "Value input"
          ],
          "return_type": "Value",
          "logic": "Parses the AnyConvertExtern opcode which converts an external reference to a generic any type. Returns the value wrapped in a Value struct."
        },
        {
          "name": "ParseExternConvertAny",
          "parameters": [
            "Value input"
          ],
          "return_type": "Value",
          "logic": "Parses the ExternConvertAny opcode which converts a generic any type to an external reference. Returns the value wrapped in a Value struct."
        },
        {
          "name": "ParseLocalGet",
          "parameters": [],
          "return_type": "Value",
          "logic": "Parses the LocalGet opcode to retrieve a local variable. Returns the node corresponding to that local wrapped in a Value struct."
        },
        {
          "name": "ParseStructGet",
          "parameters": [
            "Value struct_val",
            "WasmOpcode opcode"
          ],
          "return_type": "Value",
          "logic": "Parses the StructGet opcode, accessing a field of a struct. Performs null checks if necessary. Returns the extracted value wrapped in a Value struct."
        },
        {
          "name": "ParseStructSet",
          "parameters": [
            "Value wasm_struct",
            "Value value"
          ],
          "return_type": "void",
          "logic": "Parses the StructSet opcode, setting a field of a struct. Performs null checks if necessary."
        },
        {
          "name": "ParseRefCast",
          "parameters": [
            "Value input",
            "bool null_succeeds"
          ],
          "return_type": "Value",
          "logic": "Parses the RefCast and RefCastNull opcodes. Implements type casting including handling array types. Returns the cast value wrapped in a Value struct."
        },
        {
          "name": "ParseArrayLen",
          "parameters": [
            "Value input"
          ],
          "return_type": "Value",
          "logic": "Parses the ArrayLen opcode to get the length of an array. Returns the array length wrapped in a Value struct."
        },
        {
          "name": "ParseArrayGet",
          "parameters": [
            "Value array",
            "Value index",
            "WasmOpcode opcode"
          ],
          "return_type": "Value",
          "logic": "Parses the ArrayGet opcodes (ArrayGet, ArrayGetS, ArrayGetU). Performs null and bounds checks. Returns the element wrapped in a Value struct."
        },
        {
          "name": "ParseArraySet",
          "parameters": [
            "Value array",
            "Value index",
            "Value value"
          ],
          "return_type": "void",
          "logic": "Parses the ArraySet opcode. Performs null and bounds checks."
        },
        {
          "name": "ReadOpcode",
          "parameters": [],
          "return_type": "WasmOpcode",
          "logic": "Reads the next Wasm opcode from the byte stream, handling prefixed opcodes."
        },
        {
          "name": "TypeNode",
          "parameters": [
            "Node* node",
            "wasm::ValueType type"
          ],
          "return_type": "Value",
          "logic": "Sets the type of a node and returns a Value struct containing the node and its type."
        },
        {
          "name": "SetSourcePosition",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Sets the source position information for a given node in the source position table."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "WasmIntoJSInliner::TryInlining",
      "parameters": [
        "Zone* zone",
        "const wasm::WasmModule* module",
        "MachineGraph* mcgraph",
        "const wasm::FunctionBody& body",
        "base::Vector<const uint8_t> bytes",
        "SourcePositionTable* source_position_table",
        "int inlining_id"
      ],
      "return_type": "bool",
      "logic": "Attempts to inline a Wasm function into JavaScript code using the WasmIntoJSInlinerImpl class. Creates an instance of the inliner and calls its TryInlining method."
    }
  ]
}