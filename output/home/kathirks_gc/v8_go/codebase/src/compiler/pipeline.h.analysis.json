{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/pipeline.h",
  "imports": [
    "<memory>",
    "src/codegen/interface-descriptors.h",
    "src/common/globals.h",
    "src/objects/code.h",
    "src/zone/zone-containers.h",
    "src/wasm/module-instantiate.h",
    "src/wasm/value-type.h"
  ],
  "classes": [
    {
      "name": "Pipeline",
      "properties": [],
      "methods": [
        {
          "name": "NewCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "Handle<JSFunction> function",
            "CodeKind code_kind",
            "bool has_script",
            "BytecodeOffset osr_offset = BytecodeOffset::None()"
          ],
          "return_type": "std::unique_ptr<TurbofanCompilationJob>",
          "logic": "Creates a new compilation job for a JavaScript function to be optimized by Turbofan."
        },
        {
          "name": "NewCSLinkageCodeStubBuiltinCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "Builtin builtin",
            "CodeAssemblerGenerator generator",
            "CodeAssemblerInstaller installer",
            "const AssemblerOptions& assembler_options",
            "CallDescriptors::Key interface_descriptor",
            "const char* name",
            "const ProfileDataFromFile* profile_data",
            "int finalize_order"
          ],
          "return_type": "std::unique_ptr<TurbofanCompilationJob>",
          "logic": "Creates a new compilation job for a code stub builtin using CodeStub linkage."
        },
        {
          "name": "NewJSLinkageCodeStubBuiltinCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "Builtin builtin",
            "CodeAssemblerGenerator generator",
            "CodeAssemblerInstaller installer",
            "const AssemblerOptions& assembler_options",
            "int argc",
            "const char* name",
            "const ProfileDataFromFile* profile_data",
            "int finalize_order"
          ],
          "return_type": "std::unique_ptr<TurbofanCompilationJob>",
          "logic": "Creates a new compilation job for a code stub builtin using JS linkage."
        },
        {
          "name": "NewBytecodeHandlerCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "Builtin builtin",
            "CodeAssemblerGenerator generator",
            "CodeAssemblerInstaller installer",
            "const AssemblerOptions& assembler_options",
            "const char* name",
            "const ProfileDataFromFile* profile_data",
            "int finalize_order"
          ],
          "return_type": "std::unique_ptr<TurbofanCompilationJob>",
          "logic": "Creates a new compilation job for a bytecode handler."
        },
        {
          "name": "GenerateCodeForWasmNativeStub",
          "parameters": [
            "CallDescriptor* call_descriptor",
            "MachineGraph* mcgraph",
            "CodeKind kind",
            "const char* debug_name",
            "const AssemblerOptions& assembler_options",
            "SourcePositionTable* source_positions = nullptr"
          ],
          "return_type": "wasm::WasmCompilationResult",
          "logic": "Generates code for a WebAssembly native stub from a machine graph."
        },
        {
          "name": "GenerateCodeForWasmNativeStubFromTurboshaft",
          "parameters": [
            "const wasm::CanonicalSig* sig",
            "wasm::WrapperCompilationInfo wrapper_info",
            "const char* debug_name",
            "const AssemblerOptions& assembler_options",
            "SourcePositionTable* source_positions"
          ],
          "return_type": "wasm::WasmCompilationResult",
          "logic": "Generates code for a WebAssembly native stub from Turboshaft IR."
        },
        {
          "name": "GenerateWasmCode",
          "parameters": [
            "wasm::CompilationEnv* env",
            "WasmCompilationData& compilation_data",
            "wasm::WasmDetectedFeatures* detected",
            "Counters* counters"
          ],
          "return_type": "wasm::WasmCompilationResult",
          "logic": "Generates WebAssembly code from compilation environment and compilation data."
        },
        {
          "name": "NewWasmHeapStubCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "CallDescriptor* call_descriptor",
            "std::unique_ptr<Zone> zone",
            "TFGraph* graph",
            "CodeKind kind",
            "std::unique_ptr<char[]> debug_name",
            "const AssemblerOptions& options"
          ],
          "return_type": "std::unique_ptr<TurbofanCompilationJob>",
          "logic": "Creates a new compilation job for a WebAssembly heap stub."
        },
        {
          "name": "NewWasmTurboshaftWrapperCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "const wasm::CanonicalSig* sig",
            "wasm::WrapperCompilationInfo wrapper_info",
            "std::unique_ptr<char[]> debug_name",
            "const AssemblerOptions& options"
          ],
          "return_type": "std::unique_ptr<compiler::turboshaft::TurboshaftCompilationJob>",
          "logic": "Creates a new Turboshaft compilation job for a WebAssembly wrapper."
        },
        {
          "name": "GenerateCodeForTurboshaftBuiltin",
          "parameters": [
            "turboshaft::PipelineData* turboshaft_data",
            "CallDescriptor* call_descriptor",
            "Builtin builtin",
            "const char* debug_name",
            "const ProfileDataFromFile* profile_data"
          ],
          "return_type": "MaybeHandle<Code>",
          "logic": "Generates code for a Turboshaft-compiled builtin."
        },
        {
          "name": "GenerateCodeForTesting",
          "parameters": [
            "OptimizedCompilationInfo* info",
            "Isolate* isolate"
          ],
          "return_type": "MaybeHandle<Code>",
          "logic": "Generates code for testing purposes using JavaScript bytecode."
        },
        {
          "name": "GenerateCodeForTesting",
          "parameters": [
            "OptimizedCompilationInfo* info",
            "Isolate* isolate",
            "CallDescriptor* call_descriptor",
            "TFGraph* graph",
            "const AssemblerOptions& options",
            "Schedule* schedule = nullptr"
          ],
          "return_type": "MaybeHandle<Code>",
          "logic": "Generates code for testing purposes from a machine graph.  It allows specification of the schedule."
        },
        {
          "name": "GenerateTurboshaftCodeForTesting",
          "parameters": [
            "CallDescriptor* call_descriptor",
            "turboshaft::PipelineData* data"
          ],
          "return_type": "MaybeHandle<Code>",
          "logic": "Generates code for testing purposes after instruction selection on a Turboshaft graph."
        }
      ]
    },
    {
      "name": "InstructionRangesAsJSON",
      "properties": [
        "sequence",
        "instr_origins"
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& out",
        "const InstructionRangesAsJSON& s"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator to print an `InstructionRangesAsJSON` object."
    }
  ]
}