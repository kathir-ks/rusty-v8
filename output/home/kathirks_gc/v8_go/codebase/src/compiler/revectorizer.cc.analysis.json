{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/revectorizer.cc",
  "imports": [
    "src/compiler/revectorizer.h",
    "src/base/cpu.h",
    "src/base/logging.h",
    "src/compiler/all-nodes.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-observer.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/compiler/verifier.h",
    "src/execution/isolate-inl.h",
    "src/wasm/simd-shuffle.h"
  ],
  "classes": [
    {
      "name": "MemoryOffsetComparer",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const Node* lhs",
            "const Node* rhs"
          ],
          "return_type": "bool",
          "logic": "Compares two Nodes based on their memory offset values. Returns true if the left-hand side's offset is less than the right-hand side's offset."
        }
      ]
    },
    {
      "name": "PackNode",
      "properties": [
        "nodes_",
        "revectorized_node_"
      ],
      "methods": [
        {
          "name": "PackNode",
          "parameters": [
            "Zone* zone",
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "void",
          "logic": "Constructor of PackNode. Initializes nodes_ with the provided node group and sets revectorized_node_ to null."
        },
        {
          "name": "Nodes",
          "parameters": [],
          "return_type": "const ZoneVector<Node*>&",
          "logic": "Returns the ZoneVector of nodes associated with this PackNode."
        },
        {
          "name": "RevectorizedNode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the revectorized node, which may be null if revectorization hasn't occurred yet."
        },
        {
          "name": "SetRevectorizedNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Sets the revectorized node."
        },
        {
          "name": "GetOperand",
          "parameters": [
            "int index"
          ],
          "return_type": "PackNode*",
          "logic": "Gets the operand by index."
        },
        {
          "name": "SetOperand",
          "parameters": [
            "int index",
            "PackNode* operand"
          ],
          "return_type": "void",
          "logic": "Sets the operand by index."
        },
        {
          "name": "IsSame",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Check if the node group is same."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the PackNode for debugging purposes, showing the revectorized node's ID and mnemonic, or indicating if it's null."
        }
      ]
    },
    {
      "name": "SLPTree",
      "properties": [
        "zone_",
        "graph_",
        "root_",
        "node_to_packnode_",
        "stack_",
        "on_stack_",
        "RecursionMaxDepth"
      ],
      "methods": [
        {
          "name": "SLPTree",
          "parameters": [
            "Zone* zone",
            "TFGraph* graph"
          ],
          "return_type": "void",
          "logic": "Constructor for the SLPTree class. Initializes the zone and graph members and also sets up the data structures."
        },
        {
          "name": "CanBePacked",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Determines if a group of nodes can be packed together based on their opcodes, constant values, and other properties, primarily for SIMD operations."
        },
        {
          "name": "NewPackNode",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "PackNode*",
          "logic": "Creates a new PackNode for a given group of nodes and registers the PackNode as owning the underlying nodes"
        },
        {
          "name": "NewPackNodeAndRecurs",
          "parameters": [
            "const ZoneVector<Node*>& node_group",
            "int start_index",
            "int count",
            "unsigned recursion_depth"
          ],
          "return_type": "PackNode*",
          "logic": "Creates a new PackNode and recursively builds the tree for the operands. It recursively creates pack nodes for the inputs of the nodes, forming a tree."
        },
        {
          "name": "GetPackNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "PackNode*",
          "logic": "Retrieves the PackNode associated with a given Node."
        },
        {
          "name": "PushStack",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "void",
          "logic": "Pushes a group of nodes onto the stack, used to track nodes during recursive tree construction and detect cycles."
        },
        {
          "name": "PopStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops a group of nodes from the stack."
        },
        {
          "name": "OnStack",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node is currently on the stack."
        },
        {
          "name": "AllOnStack",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if all the nodes in the given node_group are on the stack."
        },
        {
          "name": "StackTopIsPhi",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the group of nodes at the top of stack contains Phi nodes."
        },
        {
          "name": "ClearStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the stack."
        },
        {
          "name": "TryReduceLoadChain",
          "parameters": [
            "const ZoneVector<Node*>& loads"
          ],
          "return_type": "void",
          "logic": "Attempts to connect a series of load nodes by effect edges. This helps to prevent breaking effect dependencies."
        },
        {
          "name": "IsSideEffectFreeLoad",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if a group of load nodes are free of side effects, used to determine if they can be safely combined."
        },
        {
          "name": "BuildTree",
          "parameters": [
            "const ZoneVector<Node*>& roots"
          ],
          "return_type": "PackNode*",
          "logic": "Builds the SLP tree from a set of root nodes."
        },
        {
          "name": "BuildTreeRec",
          "parameters": [
            "const ZoneVector<Node*>& node_group",
            "unsigned recursion_depth"
          ],
          "return_type": "PackNode*",
          "logic": "Recursively builds the SLP tree. It creates and connects PackNodes."
        },
        {
          "name": "DeleteTree",
          "parameters": [],
          "return_type": "void",
          "logic": "Deletes the SLP tree."
        },
        {
          "name": "Print",
          "parameters": [
            "const char* info"
          ],
          "return_type": "void",
          "logic": "Prints information about the SLP tree for debugging."
        },
        {
          "name": "ForEach",
          "parameters": [
            "FunctionType callback"
          ],
          "return_type": "void",
          "logic": "Iterates over all PackNodes in the tree and applies a callback function to each."
        },
        {
          "name": "GetEarlySchedulePosition",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Returns the dominator node of a given node"
        },
        {
          "name": "SameBasicBlock",
          "parameters": [
            "Node* a",
            "Node* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two nodes are in the same basic block. Dummy Implementation"
        }
      ]
    },
    {
      "name": "Revectorizer",
      "properties": [
        "zone_",
        "graph_",
        "mcgraph_",
        "group_of_stores_",
        "source_positions_",
        "support_simd256_",
        "slp_tree_",
        "node_observer_for_test_",
        "sources_"
      ],
      "methods": [
        {
          "name": "Revectorizer",
          "parameters": [
            "Zone* zone",
            "TFGraph* graph",
            "MachineGraph* mcgraph",
            "SourcePositionTable* source_positions"
          ],
          "return_type": "void",
          "logic": "Constructor for the Revectorizer class. Initializes the zone, graph, and other necessary data structures. Also detects supported CPU features."
        },
        {
          "name": "DecideVectorize",
          "parameters": [],
          "return_type": "bool",
          "logic": "Decides whether to vectorize the SLP tree, based on a cost/benefit analysis."
        },
        {
          "name": "SetEffectInput",
          "parameters": [
            "PackNode* pnode",
            "int index",
            "Node*& input"
          ],
          "return_type": "void",
          "logic": "Sets the effect input for a given PackNode based on the index and input node."
        },
        {
          "name": "SetMemoryOpInputs",
          "parameters": [
            "base::SmallVector<Node*, 2>& inputs",
            "PackNode* pnode",
            "int effect_index"
          ],
          "return_type": "void",
          "logic": "Sets the inputs for memory operations, keeping address inputs and setting the effect and control inputs."
        },
        {
          "name": "VectorizeTree",
          "parameters": [
            "PackNode* pnode"
          ],
          "return_type": "Node*",
          "logic": "Vectorizes the SLP tree starting from a given PackNode, creating new SIMD-256 nodes to replace SIMD-128 operations."
        },
        {
          "name": "DetectCPUFeatures",
          "parameters": [],
          "return_type": "void",
          "logic": "Detects CPU features, particularly whether AVX2 is supported, which enables SIMD-256 operations."
        },
        {
          "name": "TryRevectorize",
          "parameters": [
            "const char* function"
          ],
          "return_type": "bool",
          "logic": "Tries to revectorize a given function, collecting seeds, reducing store chains, and building/vectorizing the SLP tree."
        },
        {
          "name": "UpdateSources",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates the sources of operations based on whether the operations are vectorizable."
        },
        {
          "name": "CollectSeeds",
          "parameters": [],
          "return_type": "void",
          "logic": "Collects potential \"seed\" nodes (SimdStores) for SLP vectorization based on address, offset, and dominator information."
        },
        {
          "name": "ReduceStoreChains",
          "parameters": [
            "ZoneMap<Node*, StoreNodeSet>* store_chains"
          ],
          "return_type": "bool",
          "logic": "Reduces store chains by attempting to merge adjacent stores into wider SIMD operations."
        },
        {
          "name": "ReduceStoreChain",
          "parameters": [
            "const ZoneVector<Node*>& Stores"
          ],
          "return_type": "bool",
          "logic": "Reduces a single store chain by building an SLP tree and vectorizing it if possible."
        },
        {
          "name": "PrintStores",
          "parameters": [
            "ZoneMap<Node*, StoreNodeSet>* store_chains"
          ],
          "return_type": "void",
          "logic": "Prints information about the store chains for debugging."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetConstantValue",
      "parameters": [
        "const Node* node"
      ],
      "return_type": "int64_t",
      "logic": "Retrieves the constant integer value from a Node, if the node represents an Int64Constant. Otherwise returns -1."
    },
    {
      "name": "GetMemoryOffsetValue",
      "parameters": [
        "const Node* node"
      ],
      "return_type": "int64_t",
      "logic": "Retrieves the memory offset value from a load or store Node. Looks for a constant offset added to the base address."
    },
    {
      "name": "GetNodeAddress",
      "parameters": [
        "const Node* node"
      ],
      "return_type": "Node*",
      "logic": "Retrieves the memory address Node from a load or store Node. If the index is changed to Uint64 for memory32, the original address node is extracted."
    },
    {
      "name": "IsContinuousAccess",
      "parameters": [
        "const ZoneVector<Node*>& node_group"
      ],
      "return_type": "bool",
      "logic": "Checks if a group of load or store Nodes have continuous memory access, meaning their offsets are sequential by kSimd128Size. It also support LoadTransform with LoadTransformation::kFirst128Extend or LoadTransformation::kLast128Extend and offset 8."
    },
    {
      "name": "AllConstant",
      "parameters": [
        "const ZoneVector<Node*>& node_group"
      ],
      "return_type": "bool",
      "logic": "Checks if all nodes in the node_group are constants."
    },
    {
      "name": "AllSameAddress",
      "parameters": [
        "const ZoneVector<Node*>& nodes"
      ],
      "return_type": "bool",
      "logic": "Checks if all nodes in the given vector access the same memory address."
    },
    {
      "name": "IsSplat",
      "parameters": [
        "const T& node_group"
      ],
      "return_type": "bool",
      "logic": "Checks if all nodes in the given group are identical, indicating a splat operation (creating a vector with identical lanes)."
    },
    {
      "name": "OperatorCanBePacked",
      "parameters": [
        "const Operator* lhs",
        "const Operator* rhs"
      ],
      "return_type": "static bool",
      "logic": "Checks if two operators can be packed together by comparing their opcodes and properties."
    },
    {
      "name": "AllPackableOperator",
      "parameters": [
        "const ZoneVector<Node*>& node_group"
      ],
      "return_type": "bool",
      "logic": "Checks if all nodes in a group have the same operator type."
    },
    {
      "name": "ShiftBySameScalar",
      "parameters": [
        "const ZoneVector<Node*>& node_group"
      ],
      "return_type": "bool",
      "logic": "Checks if all shift operations in a group shift by the same scalar value."
    },
    {
      "name": "IsSignExtensionOperation",
      "parameters": [
        "IrOpcode::Value op"
      ],
      "return_type": "bool",
      "logic": "Checks if the given IrOpcode::Value represent a sign extension operation."
    },
    {
      "name": "MaybePackSignExtensionOp",
      "parameters": [
        "const ZoneVector<Node*>& node_group"
      ],
      "return_type": "bool",
      "logic": "Checks if the given node group can be packed into sign extension operation. It checks if the node is a low/high sign extension pair."
    },
    {
      "name": "InsertAfter",
      "parameters": [
        "EffectChainIterator& dest",
        "EffectChainIterator& src"
      ],
      "return_type": "void",
      "logic": "Inserts an effect chain fragment pointed to by src after the node pointed to by dest."
    },
    {
      "name": "IsSupportedLoad",
      "parameters": [
        "const Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if the given node is a supported load type."
    },
    {
      "name": "IsSupportedLoad",
      "parameters": [
        "const ZoneVector<Node*>& node_group"
      ],
      "return_type": "bool",
      "logic": "DEBUG-ONLY check to verify that a group of nodes are supported loads"
    }
  ]
}