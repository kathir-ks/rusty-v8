{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/code-assembler.h",
  "imports": [
    "<initializer_list>",
    "<map>",
    "<memory>",
    "<optional>",
    "<sstream>",
    "<type_traits>",
    "include/cppgc/source-location.h",
    "src/base/macros.h",
    "src/builtins/builtins.h",
    "src/codegen/atomic-memory-order.h",
    "src/codegen/callable.h",
    "src/codegen/handler-table.h",
    "src/codegen/machine-type.h",
    "src/codegen/source-position.h",
    "src/codegen/tnode.h",
    "src/heap/heap.h",
    "src/objects/object-type.h",
    "src/objects/objects.h",
    "src/runtime/runtime.h",
    "src/zone/zone-containers.h",
    "src/wasm/wasm-builtin-list.h"
  ],
  "classes": [
    {
      "name": "CodeAssembler",
      "properties": [
        "state_"
      ],
      "methods": [
        {
          "name": "CodeAssembler",
          "parameters": [
            "CodeAssemblerState* state"
          ],
          "return_type": "CodeAssembler",
          "logic": "Constructor, initializes the CodeAssembler with a given CodeAssemblerState."
        },
        {
          "name": "~CodeAssembler",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor."
        },
        {
          "name": "Is64",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the architecture is 64-bit."
        },
        {
          "name": "Is32",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the architecture is 32-bit."
        },
        {
          "name": "IsFloat64RoundUpSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Float64 RoundUp is supported"
        },
        {
          "name": "IsFloat64RoundDownSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Float64 RoundDown is supported"
        },
        {
          "name": "IsFloat64RoundTiesEvenSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Float64 RoundTiesEven is supported"
        },
        {
          "name": "IsFloat64RoundTruncateSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Float64 RoundTruncate is supported"
        },
        {
          "name": "IsTruncateFloat64ToFloat16RawBitsSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if TruncateFloat64ToFloat16RawBits is supported"
        },
        {
          "name": "IsInt32AbsWithOverflowSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Int32AbsWithOverflow is supported"
        },
        {
          "name": "IsInt64AbsWithOverflowSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Int64AbsWithOverflow is supported"
        },
        {
          "name": "IsIntPtrAbsWithOverflowSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if IntPtrAbsWithOverflow is supported"
        },
        {
          "name": "IsWord32PopcntSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Word32Popcnt is supported"
        },
        {
          "name": "IsWord64PopcntSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Word64Popcnt is supported"
        },
        {
          "name": "IsWord32CtzSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Word32Ctz is supported"
        },
        {
          "name": "IsWord64CtzSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if Word64Ctz is supported"
        },
        {
          "name": "BuiltinCompilationScheduler",
          "properties": [
            "builtins_installed_count_",
            "current_batch_zone_size_",
            "main_thread_output_queue_"
          ],
          "methods": [
            {
              "name": "~BuiltinCompilationScheduler",
              "parameters": [],
              "return_type": "void",
              "logic": "Destructor"
            },
            {
              "name": "builtins_installed_count",
              "parameters": [],
              "return_type": "int",
              "logic": "Getter for builtins_installed_count_"
            },
            {
              "name": "CompileCode",
              "parameters": [
                "Isolate* isolate",
                "std::unique_ptr<TurbofanCompilationJob> job"
              ],
              "return_type": "void",
              "logic": "Compiles the code in the given TurbofanCompilationJob."
            },
            {
              "name": "AwaitAndFinalizeCurrentBatch",
              "parameters": [
                "Isolate* isolate"
              ],
              "return_type": "void",
              "logic": "Awaits and finalizes the current batch of jobs."
            }
          ]
        },
        {
          "name": "CheckedNode",
          "properties": [
            "node_",
            "code_assembler_",
            "location_"
          ],
          "methods": [
            {
              "name": "CheckedNode",
              "parameters": [
                "Node* node",
                "CodeAssembler* code_assembler",
                "const char* location"
              ],
              "return_type": "CheckedNode",
              "logic": "Constructor, initializes a CheckedNode with a node, code assembler, and location (for debugging)."
            },
            {
              "name": "operator TNode<A>",
              "parameters": [],
              "return_type": "TNode<A>",
              "logic": "Casts the internal node to a TNode of type A, performing type checks in debug mode."
            },
            {
              "name": "node",
              "parameters": [],
              "return_type": "Node*",
              "logic": "Returns the underlying node."
            }
          ]
        },
        {
          "name": "MessageWithSourceLocation",
          "properties": [
            "message",
            "loc"
          ],
          "methods": [
            {
              "name": "MessageWithSourceLocation",
              "parameters": [
                "const char* message",
                "const SourceLocation& loc = SourceLocation::Current()"
              ],
              "return_type": "MessageWithSourceLocation",
              "logic": "Constructor for MessageWithSourceLocation. Holds a message and source code location"
            }
          ]
        },
        {
          "name": "SourcePositionScope",
          "properties": [
            "ca_"
          ],
          "methods": [
            {
              "name": "SourcePositionScope",
              "parameters": [
                "CodeAssembler* ca"
              ],
              "return_type": "SourcePositionScope",
              "logic": "Constructor that pushes the source position when created"
            },
            {
              "name": "~SourcePositionScope",
              "parameters": [],
              "return_type": "void",
              "logic": "Destructor that pops the source position when destroyed"
            }
          ]
        },
        {
          "name": "CodeAssemblerVariable",
          "properties": [
            "impl_",
            "state_"
          ],
          "methods": [
            {
              "name": "value",
              "parameters": [],
              "return_type": "Node*",
              "logic": "Returns the current value of the variable."
            },
            {
              "name": "rep",
              "parameters": [],
              "return_type": "MachineRepresentation",
              "logic": "Returns the machine representation of the variable."
            },
            {
              "name": "IsBound",
              "parameters": [],
              "return_type": "bool",
              "logic": "Checks if the variable is bound to a value."
            }
          ]
        },
        {
          "name": "TypedCodeAssemblerVariable",
          "properties": [],
          "methods": [
            {
              "name": "value",
              "parameters": [],
              "return_type": "TNode<T>",
              "logic": "Returns the current value of the variable as a TNode<T>."
            },
            {
              "name": "operator=",
              "parameters": [
                "TNode<T> value"
              ],
              "return_type": "void",
              "logic": "Assigns a new value to the variable."
            }
          ]
        },
        {
          "name": "CodeAssemblerLabel",
          "properties": [
            "bound_",
            "merge_count_",
            "state_",
            "label_",
            "variable_phis_",
            "variable_merges_"
          ],
          "methods": [
            {
              "name": "is_bound",
              "parameters": [],
              "return_type": "bool",
              "logic": "Checks if the label is bound (target is known)."
            },
            {
              "name": "is_used",
              "parameters": [],
              "return_type": "bool",
              "logic": "Checks if the label is used in a branch or goto."
            }
          ]
        },
        {
          "name": "CodeAssemblerParameterizedLabelBase",
          "properties": [
            "state_",
            "phi_inputs_",
            "plain_label_"
          ],
          "methods": []
        },
        {
          "name": "CodeAssemblerParameterizedLabel",
          "properties": [],
          "methods": []
        },
        {
          "name": "CodeAssemblerState",
          "properties": [
            "raw_assembler_",
            "kind_",
            "name_",
            "builtin_",
            "code_generated_",
            "variables_",
            "call_prologue_",
            "call_epilogue_",
            "exception_handler_labels_",
            "next_variable_id_",
            "jsgraph_",
            "macro_call_stack_"
          ],
          "methods": [
            {
              "name": "CodeAssemblerState",
              "parameters": [
                "Isolate* isolate",
                "Zone* zone",
                "const CallInterfaceDescriptor& descriptor",
                "CodeKind kind",
                "const char* name",
                "Builtin builtin = Builtin::kNoBuiltinId"
              ],
              "return_type": "CodeAssemblerState",
              "logic": "Constructor"
            },
            {
              "name": "~CodeAssemblerState",
              "parameters": [],
              "return_type": "void",
              "logic": "Destructor"
            },
            {
              "name": "name",
              "parameters": [],
              "return_type": "const char*",
              "logic": "Returns the name of the code."
            },
            {
              "name": "parameter_count",
              "parameters": [],
              "return_type": "int",
              "logic": "Returns the parameter count."
            },
            {
              "name": "InsideBlock",
              "parameters": [],
              "return_type": "bool",
              "logic": "Checks if the current position is within a block."
            }
          ]
        },
        {
          "name": "ScopedExceptionHandler",
          "properties": [
            "has_handler_",
            "assembler_",
            "compatibility_label_",
            "label_",
            "exception_"
          ],
          "methods": [
            {
              "name": "ScopedExceptionHandler",
              "parameters": [
                "CodeAssembler* assembler",
                "CodeAssemblerExceptionHandlerLabel* label"
              ],
              "return_type": "ScopedExceptionHandler",
              "logic": "Constructor for ScopedExceptionHandler with CodeAssemblerExceptionHandlerLabel"
            },
            {
              "name": "ScopedExceptionHandler",
              "parameters": [
                "CodeAssembler* assembler",
                "CodeAssemblerLabel* label",
                "TypedCodeAssemblerVariable<Object>* exception"
              ],
              "return_type": "ScopedExceptionHandler",
              "logic": "Constructor for ScopedExceptionHandler with CodeAssemblerLabel (legacy)"
            },
            {
              "name": "~ScopedExceptionHandler",
              "parameters": [],
              "return_type": "void",
              "logic": "Destructor for ScopedExceptionHandler"
            }
          ]
        }
      ]
    },
    {
      "name": "ObjectTypeOf",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "NeedsBoundsCheck",
      "parameters": [
        "CheckBounds check_bounds"
      ],
      "return_type": "bool",
      "logic": "Determines if a bounds check is needed based on the CheckBounds enum and the DEBUG_BOOL macro."
    },
    {
      "name": "Float64Add",
      "parameters": [
        "TNode<Float64T> a",
        "TNode<Float64T> b"
      ],
      "return_type": "TNode<Float64T>",
      "logic": "Adds two Float64T nodes."
    }
  ]
}