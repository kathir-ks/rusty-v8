{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/heap-refs.cc",
  "imports": [
    "src/compiler/heap-refs.h",
    "<optional>",
    "src/compiler/js-heap-broker.h",
    "src/objects/elements-kind.h",
    "src/objects/instance-type-inl.h",
    "<algorithm>",
    "src/api/api-inl.h",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/js-heap-broker-inl.h",
    "src/execution/protectors-inl.h",
    "src/heap/heap-layout-inl.h",
    "src/objects/allocation-site-inl.h",
    "src/objects/descriptor-array.h",
    "src/objects/heap-number-inl.h",
    "src/objects/js-array-buffer-inl.h",
    "src/objects/literal-objects-inl.h",
    "src/objects/property-cell.h",
    "src/objects/template-objects-inl.h"
  ],
  "classes": [
    {
      "name": "ObjectData",
      "properties": [
        "IndirectHandle<Object> const object_",
        "ObjectDataKind const kind_",
        "JSHeapBroker* const broker_"
      ],
      "methods": [
        {
          "name": "ObjectData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<Object> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor. Creates ObjectData for a V8 object. Stores the object handle and kind. Checks if accessing a heap object from a background thread is safe. Canonicalizes the handle for objects which might be mutable."
        },
        {
          "name": "Is##Name",
          "parameters": [],
          "return_type": "bool",
          "logic": "Generated for each HEAP_BROKER_OBJECT_LIST entry. Checks if the underlying object is of the specified type."
        },
        {
          "name": "As##Name",
          "parameters": [],
          "return_type": "Name##Data*",
          "logic": "Generated for each HEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST entry. Casts to the specialized data type assuming that the object is of that type."
        },
        {
          "name": "object",
          "parameters": [],
          "return_type": "IndirectHandle<Object>",
          "logic": "Returns the handle to the underlying V8 object."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "ObjectDataKind",
          "logic": "Returns the ObjectDataKind."
        },
        {
          "name": "is_smi",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the object is a Smi."
        },
        {
          "name": "should_access_heap",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if it's safe to access the heap directly."
        },
        {
          "name": "IsNull",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the object is null."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Returns the JSHeapBroker. (DEBUG only)."
        }
      ]
    },
    {
      "name": "HeapObjectData",
      "properties": [
        "ObjectData* map_"
      ],
      "methods": [
        {
          "name": "HeapObjectData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<HeapObject> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor. Creates HeapObjectData for a HeapObject. Gets the map."
        },
        {
          "name": "TryGetBooleanValue",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "std::optional<bool>",
          "logic": "Tries to determine the boolean value of the heap object."
        },
        {
          "name": "map",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the map object data."
        },
        {
          "name": "GetMapInstanceType",
          "parameters": [],
          "return_type": "InstanceType",
          "logic": "Returns the InstanceType from the object's map. Avoids reading from the heap unless necessary."
        },
        {
          "name": "TryGetBooleanValueImpl",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "std::optional<bool>",
          "logic": "Implementation details for TryGetBooleanValue"
        }
      ]
    },
    {
      "name": "PropertyCellData",
      "properties": [
        "PropertyDetails property_details_",
        "ObjectData* value_"
      ],
      "methods": [
        {
          "name": "PropertyCellData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<PropertyCell> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for PropertyCellData. Calls HeapObjectData constructor."
        },
        {
          "name": "Cache",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "bool",
          "logic": "Serializes the PropertyCell data. Reads property_details and value, and creates ObjectData for the value."
        },
        {
          "name": "property_details",
          "parameters": [],
          "return_type": "PropertyDetails",
          "logic": "Returns the property details of the property cell."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the object data representing the value of the property cell."
        },
        {
          "name": "serialized",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the property cell is serialized."
        }
      ]
    },
    {
      "name": "JSReceiverData",
      "properties": [],
      "methods": [
        {
          "name": "JSReceiverData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSReceiver> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSReceiverData. Calls HeapObjectData constructor."
        }
      ]
    },
    {
      "name": "JSObjectData",
      "properties": [],
      "methods": [
        {
          "name": "JSObjectData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSObject> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSObjectData. Calls JSReceiverData constructor."
        }
      ]
    },
    {
      "name": "JSTypedArrayData",
      "properties": [],
      "methods": [
        {
          "name": "JSTypedArrayData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSTypedArray> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSTypedArrayData. Calls JSObjectData constructor."
        }
      ]
    },
    {
      "name": "JSDataViewData",
      "properties": [],
      "methods": [
        {
          "name": "JSDataViewData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSDataView> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSDataViewData. Calls JSObjectData constructor."
        }
      ]
    },
    {
      "name": "JSPrimitiveWrapperData",
      "properties": [],
      "methods": [
        {
          "name": "JSPrimitiveWrapperData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSPrimitiveWrapper> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSPrimitiveWrapperData. Calls JSObjectData constructor."
        }
      ]
    },
    {
      "name": "JSBoundFunctionData",
      "properties": [],
      "methods": [
        {
          "name": "JSBoundFunctionData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSBoundFunction> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSBoundFunctionData. Calls JSObjectData constructor."
        }
      ]
    },
    {
      "name": "JSFunctionData",
      "properties": [
        "UsedFields used_fields_",
        "ObjectData* prototype_or_initial_map_",
        "bool has_initial_map_",
        "bool has_instance_prototype_",
        "bool PrototypeRequiresRuntimeLookup_",
        "ObjectData* context_",
        "ObjectData* initial_map_",
        "ObjectData* instance_prototype_",
        "ObjectData* shared_",
        "ObjectData* feedback_cell_",
        "int initial_map_instance_size_with_min_slack_"
      ],
      "methods": [
        {
          "name": "JSFunctionData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSFunction> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSFunctionData. Calls JSObjectData constructor and then calls Cache to serialize the data."
        },
        {
          "name": "IsConsistentWithHeapState",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "bool",
          "logic": "Checks if serialized state is consistent with heap state."
        },
        {
          "name": "has_initial_map",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the function has an initial map."
        },
        {
          "name": "has_instance_prototype",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the function has an instance prototype."
        },
        {
          "name": "PrototypeRequiresRuntimeLookup",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether runtime lookup is required for the prototype."
        },
        {
          "name": "context",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the context object data."
        },
        {
          "name": "initial_map",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the initial map object data."
        },
        {
          "name": "instance_prototype",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the instance prototype object data."
        },
        {
          "name": "shared",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the shared function info object data."
        },
        {
          "name": "raw_feedback_cell",
          "parameters": [],
          "return_type": "ObjectData*",
          "logic": "Returns the feedback cell object data."
        },
        {
          "name": "initial_map_instance_size_with_min_slack",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the initial map instance size with minimum slack."
        },
        {
          "name": "has_any_used_field",
          "parameters": [],
          "return_type": "bool",
          "logic": "Check if any used field is set."
        },
        {
          "name": "has_used_field",
          "parameters": [
            "UsedField used_field"
          ],
          "return_type": "bool",
          "logic": "Check if a specific used field is set."
        },
        {
          "name": "set_used_field",
          "parameters": [
            "UsedField used_field"
          ],
          "return_type": "void",
          "logic": "Set a specific used field."
        },
        {
          "name": "Cache",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Serializes the JSFunction data."
        }
      ]
    },
    {
      "name": "BigIntData",
      "properties": [
        "const uint64_t as_uint64_",
        "const int64_t as_int64_",
        "bool lossless_"
      ],
      "methods": [
        {
          "name": "BigIntData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<BigInt> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for BigIntData. Calls HeapObjectData constructor and retrieves the BigInt's value as uint64 and int64."
        },
        {
          "name": "AsUint64",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the value as uint64."
        },
        {
          "name": "AsInt64",
          "parameters": [
            "bool* lossless"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value as int64 and indicates if the conversion was lossless."
        }
      ]
    },
    {
      "name": "MapData",
      "properties": [
        "InstanceType instance_type_",
        "int instance_size_",
        "uint32_t bit_field2_",
        "uint32_t bit_field3_",
        "int unused_property_fields_",
        "bool is_abandoned_prototype_map_",
        "int in_object_properties_"
      ],
      "methods": [
        {
          "name": "MapData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<Map> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for MapData. Calls HeapObjectData constructor and serializes map properties."
        },
        {
          "name": "instance_type",
          "parameters": [],
          "return_type": "InstanceType",
          "logic": "Returns the instance type."
        },
        {
          "name": "instance_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the instance size."
        },
        {
          "name": "bit_field2",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns bit_field2."
        },
        {
          "name": "bit_field3",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns bit_field3."
        },
        {
          "name": "in_object_properties",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of in-object properties."
        },
        {
          "name": "UnusedPropertyFields",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of unused property fields."
        },
        {
          "name": "is_abandoned_prototype_map",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this map is an abandoned prototype map."
        }
      ]
    },
    {
      "name": "FixedArrayBaseData",
      "properties": [
        "int const length_"
      ],
      "methods": [
        {
          "name": "FixedArrayBaseData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<FixedArrayBase> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for FixedArrayBaseData. Calls HeapObjectData constructor and gets the length."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the length of the fixed array base."
        }
      ]
    },
    {
      "name": "FixedArrayData",
      "properties": [],
      "methods": [
        {
          "name": "FixedArrayData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<FixedArray> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for FixedArrayData. Calls FixedArrayBaseData constructor."
        }
      ]
    },
    {
      "name": "ScriptContextTableData",
      "properties": [],
      "methods": [
        {
          "name": "ScriptContextTableData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<ScriptContextTable> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for ScriptContextTableData. Calls FixedArrayBaseData constructor."
        }
      ]
    },
    {
      "name": "JSArrayData",
      "properties": [],
      "methods": [
        {
          "name": "JSArrayData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSArray> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSArrayData. Calls JSObjectData constructor."
        }
      ]
    },
    {
      "name": "JSGlobalObjectData",
      "properties": [],
      "methods": [
        {
          "name": "JSGlobalObjectData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSGlobalObject> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSGlobalObjectData. Calls JSObjectData constructor."
        }
      ]
    },
    {
      "name": "JSGlobalProxyData",
      "properties": [],
      "methods": [
        {
          "name": "JSGlobalProxyData",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData** storage",
            "IndirectHandle<JSGlobalProxy> object",
            "ObjectDataKind kind"
          ],
          "return_type": "void",
          "logic": "Constructor for JSGlobalProxyData. Calls JSObjectData constructor."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Is64",
      "parameters": [],
      "return_type": "bool",
      "logic": "Determines if the system pointer size is 8 bytes (64-bit)."
    },
    {
      "name": "GetCFunctions",
      "parameters": [
        "Tagged<FixedArray> function_overloads",
        "Isolate* isolate",
        "Zone* zone"
      ],
      "return_type": "ZoneVector<Address>",
      "logic": "Extracts C function addresses from a FixedArray."
    },
    {
      "name": "GetCSignatures",
      "parameters": [
        "Tagged<FixedArray> function_overloads",
        "Isolate* isolate",
        "Zone* zone"
      ],
      "return_type": "ZoneVector<const CFunctionInfo*>",
      "logic": "Extracts C function signatures from a FixedArray."
    },
    {
      "name": "InstanceSizeWithMinSlack",
      "parameters": [
        "JSHeapBroker* broker",
        "MapRef map"
      ],
      "return_type": "int",
      "logic": "Calculates the minimum InstanceSize with minimum slack."
    },
    {
      "name": "ObjectDataKindFor",
      "parameters": [
        "RefSerializationKind kind"
      ],
      "return_type": "ObjectDataKind",
      "logic": "Converts a RefSerializationKind enum to an ObjectDataKind enum."
    },
    {
      "name": "RecordConsistentJSFunctionViewDependencyIfNeeded",
      "parameters": [
        "const JSHeapBroker* broker",
        "JSFunctionRef ref",
        "JSFunctionData* data",
        "JSFunctionData::UsedField used_field"
      ],
      "return_type": "void",
      "logic": "Records a dependency on the consistent JSFunction view."
    },
    {
      "name": "GetOwnFastConstantDataPropertyFromHeap",
      "parameters": [
        "JSHeapBroker* broker",
        "JSObjectRef holder",
        "Representation representation",
        "FieldIndex field_index"
      ],
      "return_type": "std::optional<Tagged<Object>>",
      "logic": "Tries to get the own fast constant data property from the heap"
    },
    {
      "name": "GetOwnDictionaryPropertyFromHeap",
      "parameters": [
        "JSHeapBroker* broker",
        "DirectHandle<JSObject> receiver",
        "InternalIndex dict_index"
      ],
      "return_type": "OptionalObjectRef",
      "logic": "Gets the own dictionary property from the heap."
    },
    {
      "name": "RacyReadHeapNumberBits",
      "parameters": [
        "Tagged<HeapNumber> value"
      ],
      "return_type": "uint64_t",
      "logic": "Reads the value as bits from a HeapNumber."
    },
    {
      "name": "IsReadOnlyLengthDescriptor",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<Map> jsarray_map"
      ],
      "return_type": "bool",
      "logic": "Checks if the length property of JSArray is read only."
    },
    {
      "name": "SupportsFastArrayIteration",
      "parameters": [
        "JSHeapBroker* broker",
        "DirectHandle<Map> map"
      ],
      "return_type": "bool",
      "logic": "Checks if fast array iteration is supported."
    },
    {
      "name": "SupportsFastArrayResize",
      "parameters": [
        "JSHeapBroker* broker",
        "DirectHandle<Map> map"
      ],
      "return_type": "bool",
      "logic": "Checks if fast array resize is supported."
    },
    {
      "name": "GetOddballType",
      "parameters": [
        "Isolate* isolate",
        "Tagged<Map> map"
      ],
      "return_type": "OddballType",
      "logic": "Helper function to derive Oddball type based on map."
    }
  ]
}