{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/bytecode-graph-builder.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/bytecode-graph-builder.cc\",\n  \"imports\": [\n    \"src/compiler/bytecode-graph-builder.h\",\n    \"<optional>\",\n    \"src/ast/ast.h\",\n    \"src/codegen/source-position-table.h\",\n    \"src/codegen/tick-counter.h\",\n    \"src/common/assert-scope.h\",\n    \"src/compiler/bytecode-analysis.h\",\n    \"src/compiler/common-operator.h\",\n    \"src/compiler/compilation-dependencies.h\",\n    \"src/compiler/compiler-source-position-table.h\",\n    \"src/compiler/js-heap-broker.h\",\n    \"src/compiler/js-type-hint-lowering.h\",\n    \"src/compiler/linkage.h\",\n    \"src/compiler/node-matchers.h\",\n    \"src/compiler/node-observer.h\",\n    \"src/compiler/node-origin-table.h\",\n    \"src/compiler/operator-properties.h\",\n    \"src/compiler/simplified-operator.h\",\n    \"src/compiler/state-values-utils.h\",\n    \"src/interpreter/bytecode-array-iterator.h\",\n    \"src/interpreter/bytecode-flags-and-tokens.h\",\n    \"src/interpreter/bytecode-register.h\",\n    \"src/interpreter/bytecodes.h\",\n    \"src/objects/elements-kind.h\",\n    \"src/objects/js-generator.h\",\n    \"src/objects/literal-objects-inl.h\",\n    \"src/objects/scope-info.h\",\n    \"src/objects/template-objects-inl.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"BytecodeGraphBuilder\",\n      \"properties\": [\n        \"broker_\",\n        \"local_isolate_\",\n        \"local_zone_\",\n        \"jsgraph_\",\n        \"native_context_\",\n        \"shared_info_\",\n        \"bytecode_array_\",\n        \"feedback_cell_\",\n        \"feedback_vector_\",\n        \"invocation_frequency_\",\n        \"type_hint_lowering_\",\n        \"frame_state_function_info_\",\n        \"source_position_iterator_\",\n        \"bytecode_iterator_\",\n        \"bytecode_analysis_\",\n        \"environment_\",\n        \"decorator_\",\n        \"osr_\",\n        \"currently_peeled_loop_offset_\",\n        \"skip_first_stack_and_tierup_check_\",\n        \"merge_environments_\",\n        \"generator_merge_environments_\",\n        \"cached_parameters_\",\n        \"exception_handlers_\",\n        \"current_exception_handler_\",\n        \"input_buffer_size_\",\n        \"input_buffer_\",\n        \"code_kind_\",\n        \"feedback_vector_node_\",\n        \"native_context_node_\",\n        \"needs_eager_checkpoint_\",\n        \"function_closure_\",\n        \"exit_controls_\",\n        \"state_values_cache_\",\n        \"node_origins_\",\n        \"source_positions_\",\n        \"start_position_\",\n        \"tick_counter_\",\n        \"observe_node_info_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BytecodeGraphBuilder\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"Zone* local_zone\",\n            \"NativeContextRef native_context\",\n            \"SharedFunctionInfoRef shared_info\",\n            \"BytecodeArrayRef bytecode\",\n            \"FeedbackCellRef feedback_cell\",\n            \"BytecodeOffset osr_offset\",\n            \"JSGraph* jsgraph\",\n            \"CallFrequency const& invocation_frequency\",\n            \"SourcePositionTable* source_positions\",\n            \"NodeOriginTable* node_origins\",\n            \"int inlining_id\",\n            \"CodeKind code_kind\",\n            \"BytecodeGraphBuilderFlags flags\",\n            \"TickCounter* tick_counter\",\n            \"ObserveNodeInfo const& observe_node_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the BytecodeGraphBuilder. Initializes all member variables.\"\n        },\n        {\n          \"name\": \"CreateGraph\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates the graph by visiting bytecodes and setting up the basic structure.\"\n        },\n        {\n          \"name\": \"PrepareEagerCheckpoint\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares information for eager deoptimization by creating Checkpoint nodes.\"\n        },\n        {\n          \"name\": \"PrepareFrameState\",\n          \"parameters\": [\n            \"Node* node\",\n            \"OutputFrameStateCombine combine\",\n            \"BytecodeOffset bailout_id\",\n            \"const BytecodeLivenessState* liveness\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares information for lazy deoptimization and attaches it to the given node.\"\n        },\n        {\n          \"name\": \"AdvanceIteratorsTo\",\n          \"parameters\": [\n            \"int bytecode_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances bytecode and source position iterators to the given bytecode offset.\"\n        },\n        {\n          \"name\": \"VisitSingleBytecode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits a single bytecode instruction and performs the corresponding graph construction.\"\n        },\n        {\n          \"name\": \"VisitBytecodes\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through all bytecodes and calls VisitSingleBytecode for each.\"\n        },\n        {\n          \"name\": \"AddBytecodePositionDecorator\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a bytecode position decorator to the graph for storing bytecode origins.\"\n        },\n        {\n          \"name\": \"RemoveBytecodePositionDecorator\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes the bytecode position decorator from the graph.\"\n        },\n        {\n          \"name\": \"GetFunctionClosure\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Gets or creates the node representing the outer function closure.\"\n        },\n        {\n          \"name\": \"GetParameter\",\n          \"parameters\": [\n            \"int parameter_index\",\n            \"const char* debug_name_hint\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Gets or creates the node for the parameter at the given index.\"\n        },\n        {\n          \"name\": \"CreateFeedbackVectorNode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates the node representing the feedback vector.\"\n        },\n        {\n          \"name\": \"BuildLoadFeedbackCell\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Builds a node to load a feedback cell from the feedback vector.\"\n        },\n        {\n          \"name\": \"CreateNativeContextNode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates the node representing the native context.\"\n        },\n        {\n          \"name\": \"BuildLoadNativeContextField\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Builds a node to load a native context field.\"\n        },\n        {\n          \"name\": \"CreateFeedbackSource\",\n          \"parameters\": [\n            \"int slot_id\"\n          ],\n          \"return_type\": \"FeedbackSource\",\n          \"logic\": \"Creates a feedback source containing type feedback vector and a feedback slot.\"\n        },\n        {\n          \"name\": \"NewNode\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"bool incomplete\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new node with the given operator and no input values.\"\n        },\n        {\n          \"name\": \"NewNode\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* n0\",\n            \"Args... nodes\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new node with the given operator and input values.\"\n        },\n        {\n          \"name\": \"NewIfTrue\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new IfTrue node.\"\n        },\n        {\n          \"name\": \"NewIfFalse\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new IfFalse node.\"\n        },\n        {\n          \"name\": \"NewIfValue\",\n          \"parameters\": [\n            \"int32_t value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new IfValue node.\"\n        },\n        {\n          \"name\": \"NewIfDefault\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new IfDefault node.\"\n        },\n        {\n          \"name\": \"NewMerge\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new Merge node.\"\n        },\n        {\n          \"name\": \"NewLoop\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new Loop node.\"\n        },\n        {\n          \"name\": \"NewBranch\",\n          \"parameters\": [\n            \"Node* condition\",\n            \"BranchHint hint\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new Branch node.\"\n        },\n        {\n          \"name\": \"NewSwitch\",\n          \"parameters\": [\n            \"Node* condition\",\n            \"int control_output_count\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new Switch node.\"\n        },\n        {\n          \"name\": \"NewPhi\",\n          \"parameters\": [\n            \"int count\",\n            \"Node* input\",\n            \"Node* control\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new Phi node having {count} input values.\"\n        },\n        {\n          \"name\": \"NewEffectPhi\",\n          \"parameters\": [\n            \"int count\",\n            \"Node* input\",\n            \"Node* control\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a new EffectPhi node.\"\n        },\n        {\n          \"name\": \"MergeControl\",\n          \"parameters\": [\n            \"Node* control\",\n            \"Node* other\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Merges control dependencies.\"\n        },\n        {\n          \"name\": \"MergeEffect\",\n          \"parameters\": [\n            \"Node* effect\",\n            \"Node* other_effect\",\n            \"Node* control\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Merges effect dependencies.\"\n        },\n        {\n          \"name\": \"MergeValue\",\n          \"parameters\": [\n            \"Node* value\",\n            \"Node* other_value\",\n            \"Node* control\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Merges value dependencies.\"\n        },\n        {\n          \"name\": \"MakeNode\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"int value_input_count\",\n            \"Node* const* value_inputs\",\n            \"bool incomplete\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"The main node creation chokepoint. Adds context, frame state, effect, and control dependencies depending on the operator.\"\n        },\n        {\n          \"name\": \"EnsureInputBufferSize\",\n          \"parameters\": [\n            \"int size\"\n          ],\n          \"return_type\": \"Node**\",\n          \"logic\": \"Ensures that the input buffer has enough space to hold the specified number of inputs.\"\n        },\n        {\n          \"name\": \"GetCallArgumentsFromRegisters\",\n          \"parameters\": [\n            \"Node* callee\",\n            \"Node* receiver\",\n            \"interpreter::Register first_arg\",\n            \"int arg_count\"\n          ],\n          \"return_type\": \"Node* const*\",\n          \"logic\": \"Gets call arguments from registers.\"\n        },\n        {\n          \"name\": \"ProcessCallVarArgs\",\n          \"parameters\": [\n            \"ConvertReceiverMode receiver_mode\",\n            \"Node* callee\",\n            \"interpreter::Register first_reg\",\n            \"int arg_count\"\n          ],\n          \"return_type\": \"Node* const*\",\n          \"logic\": \"Processes variable arguments for a call.\"\n        },\n        {\n          \"name\": \"GetConstructArgumentsFromRegister\",\n          \"parameters\": [\n            \"Node* target\",\n            \"Node* new_target\",\n            \"interpreter::Register first_arg\",\n            \"int arg_count\"\n          ],\n          \"return_type\": \"Node* const*\",\n          \"logic\": \"Gets arguments from registers for a construct call.\"\n        },\n        {\n          \"name\": \"ProcessCallRuntimeArguments\",\n          \"parameters\": [\n            \"const Operator* call_runtime_op\",\n            \"interpreter::Register receiver\",\n            \"size_t reg_count\"\n          ],\n          \"return_type\": \"Node* const*\",\n          \"logic\": \"Processes arguments for a runtime call.\"\n        },\n        {\n          \"name\": \"PrepareFrameState\",\n          \"parameters\": [\n            \"Node* node\",\n            \"OutputFrameStateCombine combine\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares frame state for the given node.\"\n        },\n        {\n          \"name\": \"PrepareFrameStateForFunctionEntryStackCheck\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares frame state for a function entry stack check node.\"\n        },\n        {\n          \"name\": \"PrepareFrameStateForOSREntryStackCheck\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares frame state for OSR entry stack check.\"\n        },\n        {\n          \"name\": \"BuildCreateArguments\",\n          \"parameters\": [\n            \"CreateArgumentsType type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds the graph nodes for creating arguments objects.\"\n        },\n        {\n          \"name\": \"BuildLoadGlobal\",\n          \"parameters\": [\n            \"NameRef name\",\n            \"uint32_t feedback_slot_index\",\n            \"TypeofMode typeof_mode\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Builds the graph nodes for loading a global variable.\"\n        },\n        {\n          \"name\": \"BuildNamedStore\",\n          \"parameters\": [\n            \"NamedStoreMode store_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds the graph nodes for storing a named property.\"\n        },\n        {\n          \"name\": \"BuildLdaLookupSlot\",\n          \"parameters\": [\n            \"TypeofMode typeof_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds graph nodes for loading a lookup slot.\"\n        },\n        {\n          \"name\": \"BuildLdaLookupContextSlot\",\n          \"parameters\": [\n            \"ContextKind context_kind\",\n            \"TypeofMode typeof_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds the graph nodes for loading a context slot.\"\n        },\n        {\n          \"name\": \"BuildLdaLookupGlobalSlot\",\n          \"parameters\": [\n            \"TypeofMode typeof_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds graph nodes for loading a global slot.\"\n        },\n        {\n          \"name\": \"BuildCallVarArgs\",\n          \"parameters\": [\n            \"ConvertReceiverMode receiver_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for calling a function with variable arguments.\"\n        },\n        {\n          \"name\": \"BuildCall\",\n          \"parameters\": [\n            \"ConvertReceiverMode receiver_mode\",\n            \"Node* const* args\",\n            \"size_t arg_count\",\n            \"int slot_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for calling a function with a specific set of arguments.\"\n        },\n        {\n          \"name\": \"BuildUnaryOp\",\n          \"parameters\": [\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for a unary operator.\"\n        },\n        {\n          \"name\": \"BuildBinaryOp\",\n          \"parameters\": [\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for a binary operator.\"\n        },\n        {\n          \"name\": \"BuildBinaryOpWithImmediate\",\n          \"parameters\": [\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for binary operator with immediate value.\"\n        },\n        {\n          \"name\": \"BuildCompareOp\",\n          \"parameters\": [\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for a comparison operator.\"\n        },\n        {\n          \"name\": \"BuildDelete\",\n          \"parameters\": [\n            \"LanguageMode language_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for delete operator.\"\n        },\n        {\n          \"name\": \"BuildCastOperator\",\n          \"parameters\": [\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for cast operator.\"\n        },\n        {\n          \"name\": \"BuildHoleCheckAndThrow\",\n          \"parameters\": [\n            \"Node* condition\",\n            \"Runtime::FunctionId runtime_id\",\n            \"Node* name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for checking a hole and throwing an exception.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedUnaryOp\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* operand\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower a unary operator to the simplified operator level.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedBinaryOp\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* left\",\n            \"Node* right\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower a binary operator to the simplified operator level.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedForInNext\",\n          \"parameters\": [\n            \"Node* receiver\",\n            \"Node* cache_array\",\n            \"Node* cache_type\",\n            \"Node* index\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower ForInNext to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedForInPrepare\",\n          \"parameters\": [\n            \"Node* receiver\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower ForInPrepare to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedToNumber\",\n          \"parameters\": [\n            \"Node* input\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower ToNumber to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedCall\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* const* args\",\n            \"int arg_count\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower a call to the simplified operator level.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedConstruct\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* const* args\",\n            \"int arg_count\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower a construct call to the simplified operator level.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedGetIterator\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* receiver\",\n            \"FeedbackSlot load_slot\",\n            \"FeedbackSlot call_slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower getIterator to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedLoadNamed\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower LoadNamed to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedLoadKeyed\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* receiver\",\n            \"Node* key\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower LoadKeyed to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedStoreNamed\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* receiver\",\n            \"Node* value\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower StoreNamed to simplified operator.\"\n        },\n        {\n          \"name\": \"TryBuildSimplifiedStoreKeyed\",\n          \"parameters\": [\n            \"const Operator* op\",\n            \"Node* receiver\",\n            \"Node* key\",\n            \"Node* value\",\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"JSTypeHintLowering::LoweringResult\",\n          \"logic\": \"Tries to lower StoreKeyed to simplified operator.\"\n        },\n        {\n          \"name\": \"ApplyEarlyReduction\",\n          \"parameters\": [\n            \"JSTypeHintLowering::LoweringResult reduction\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Applies the given early reduction onto the current environment.\"\n        },\n        {\n          \"name\": \"CheckContextExtensions\",\n          \"parameters\": [\n            \"uint32_t depth\"\n          ],\n          \"return_type\": \"Environment*\",\n          \"logic\": \"Check the context chain for extensions, for lookup fast paths.\"\n        },\n        {\n          \"name\": \"CheckContextExtensionsSlowPath\",\n          \"parameters\": [\n            \"uint32_t depth\"\n          ],\n          \"return_type\": \"Environment*\",\n          \"logic\": \"Slow path taken when we cannot figure out the current scope info.\"\n        },\n        {\n          \"name\": \"TryGetScopeInfo\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalScopeInfoRef\",\n          \"logic\": \"Helper function that tries to get the current scope info.\"\n        },\n        {\n          \"name\": \"CheckContextExtensionAtDepth\",\n          \"parameters\": [\n            \"Environment* slow_environment\",\n            \"uint32_t depth\"\n          ],\n          \"return_type\": \"Environment*\",\n          \"logic\": \"Helper function to create a context extension check.\"\n        },\n        {\n          \"name\": \"GetForInMode\",\n          \"parameters\": [\n            \"FeedbackSlot slot\"\n          ],\n          \"return_type\": \"ForInMode\",\n          \"logic\": \"Helper function to create for-in mode from the recorded type feedback.\"\n        },\n        {\n          \"name\": \"ComputeCallFrequency\",\n          \"parameters\": [\n            \"int slot_id\"\n          ],\n          \"return_type\": \"CallFrequency\",\n          \"logic\": \"Helper function to compute call frequency from the recorded type feedback.\"\n        },\n        {\n          \"name\": \"GetSpeculationMode\",\n          \"parameters\": [\n            \"int slot_id\"\n          ],\n          \"return_type\": \"SpeculationMode\",\n          \"logic\": \"Helper function to extract the speculation mode from the recorded type feedback.\"\n        },\n        {\n          \"name\": \"ComputeCallFeedbackRelation\",\n          \"parameters\": [\n            \"int slot_id\"\n          ],\n          \"return_type\": \"CallFeedbackRelation\",\n          \"logic\": \"Helper function to determine the call feedback relation from the recorded type feedback.\"\n        },\n        {\n          \"name\": \"BuildFunctionEntryStackCheck\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for the implicit FunctionEntry StackChecks.\"\n        },\n        {\n          \"name\": \"BuildIterationBodyStackCheck\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for the implicit IterationBody StackChecks.\"\n        },\n        {\n          \"name\": \"BuildOSREntryStackCheck\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for the implicit OSREntry StackChecks.\"\n        },\n        {\n          \"name\": \"BuildJump\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump control flow.\"\n        },\n        {\n          \"name\": \"BuildJumpIf\",\n          \"parameters\": [\n            \"Node* condition\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump control flow if condition is true.\"\n        },\n        {\n          \"name\": \"BuildJumpIfNot\",\n          \"parameters\": [\n            \"Node* condition\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump control flow if condition is false.\"\n        },\n        {\n          \"name\": \"BuildJumpIfEqual\",\n          \"parameters\": [\n            \"Node* comperand\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator is equal to comperand.\"\n        },\n        {\n          \"name\": \"BuildJumpIfNotEqual\",\n          \"parameters\": [\n            \"Node* comperand\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator is not equal to comperand.\"\n        },\n        {\n          \"name\": \"BuildJumpIfTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator is true.\"\n        },\n        {\n          \"name\": \"BuildJumpIfFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator is false.\"\n        },\n        {\n          \"name\": \"BuildJumpIfToBooleanTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator converted to boolean is true.\"\n        },\n        {\n          \"name\": \"BuildJumpIfToBooleanFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator converted to boolean is false.\"\n        },\n        {\n          \"name\": \"BuildJumpIfNotHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator is not hole.\"\n        },\n        {\n          \"name\": \"BuildJumpIfJSReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump if the accumulator is JSReceiver.\"\n        },\n        {\n          \"name\": \"BuildJumpIfForInDone\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds jump for for in done.\"\n        },\n        {\n          \"name\": \"BuildSwitchOnSmi\",\n          \"parameters\": [\n            \"Node* condition\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds a switch statement on a SMI.\"\n        },\n        {\n          \"name\": \"BuildSwitchOnGeneratorState\",\n          \"parameters\": [\n            \"const ZoneVector<ResumeJumpTarget>& resume_jump_targets\",\n            \"bool allow_fallthrough_on_executing\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds a switch statement on generator state.\"\n        },\n        {\n          \"name\": \"MergeIntoSuccessorEnvironment\",\n          \"parameters\": [\n            \"int target_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Simulates control flow by forward-propagating environments.\"\n        },\n        {\n          \"name\": \"BuildLoopHeaderEnvironment\",\n          \"parameters\": [\n            \"int current_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds a loop header environment.\"\n        },\n        {\n          \"name\": \"SwitchToMergeEnvironment\",\n          \"parameters\": [\n            \"int current_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Switches the current environment to a merge environment.\"\n        },\n        {\n          \"name\": \"MergeControlToLeaveFunction\",\n          \"parameters\": [\n            \"Node* exit\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Simulates control flow that exits the function body.\"\n        },\n        {\n          \"name\": \"BuildLoopExitsForBranch\",\n          \"parameters\": [\n            \"int target_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds loop exit nodes for exited loops between the current offset and target_offset, for branch instructions\"\n        },\n        {\n          \"name\": \"BuildLoopExitsForFunctionExit\",\n          \"parameters\": [\n            \"const BytecodeLivenessState* liveness\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds loop exits when exiting function due to return/suspend/throw.\"\n        },\n        {\n          \"name\": \"BuildLoopExitsUntilLoop\",\n          \"parameters\": [\n            \"int loop_offset\",\n            \"const BytecodeLivenessState* liveness\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds loop exit until specific loop\"\n        },\n        {\n          \"name\": \"BuildReturn\",\n          \"parameters\": [\n            \"const BytecodeLivenessState* liveness\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds nodes for function return/suspend.\"\n        },\n        {\n          \"name\": \"ExitThenEnterExceptionHandlers\",\n          \"parameters\": [\n            \"int current_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Simulates entry and exit of exception handlers.\"\n        },\n        {\n          \"name\": \"UpdateSourceAndBytecodePosition\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Update the current position of source position and bytecode position tables.\"\n        },\n        {\n          \"name\": \"MakeRefForConstantForIndexOperand\",\n          \"parameters\": [\n            \"int operand_index\"\n          ],\n          \"return_type\": \"typename ref_traits<T>::ref_type\",\n          \"logic\": \"Makes a reference for a constant at the given index operand.\"\n        },\n        {\n          \"name\": \"VisitLdaZero\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the zero constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaSmi\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a small integer constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaConstant\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a constant from the constant pool into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the undefined constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaNull\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the null constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaTheHole\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the the hole constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaTrue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the true constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdaFalse\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the false constant into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitLdar\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a register into the accumulator.\"\n        },\n        {\n          \"name\": \"VisitStar\",\n          \"parameters"
}