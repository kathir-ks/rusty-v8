{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-load-elimination.h",
  "imports": [
    "src/base/compiler-specific.h",
    "src/codegen/machine-type.h",
    "src/compiler/graph-reducer.h",
    "src/compiler/node-aux-data.h",
    "src/compiler/persistent-map.h"
  ],
  "classes": [
    {
      "name": "WasmLoadElimination",
      "properties": [
        "empty_state_",
        "node_states_",
        "jsgraph_",
        "dead_",
        "zone_"
      ],
      "methods": [
        {
          "name": "WasmLoadElimination",
          "parameters": [
            "Editor* editor",
            "JSGraph* jsgraph",
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the WasmLoadElimination class, initializes the reducer with the editor, JSGraph and Zone."
        },
        {
          "name": "~WasmLoadElimination",
          "parameters": [],
          "return_type": "destructor",
          "logic": "Destructor for the WasmLoadElimination class. Defaults to the standard destructor."
        },
        {
          "name": "WasmLoadElimination",
          "parameters": [
            "const WasmLoadElimination&"
          ],
          "return_type": "deleted",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const WasmLoadElimination&"
          ],
          "return_type": "WasmLoadElimination&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer, which is \"WasmLoadElimination\"."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces the given node. This is the main entry point for the reducer."
        },
        {
          "name": "ReduceWasmStructGet",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WasmStructGet node, attempting to perform load elimination."
        },
        {
          "name": "ReduceWasmStructSet",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WasmStructSet node, updating the abstract state."
        },
        {
          "name": "ReduceWasmArrayLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WasmArrayLength node."
        },
        {
          "name": "ReduceWasmArrayInitializeLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WasmArrayInitializeLength node."
        },
        {
          "name": "ReduceStringPrepareForGetCodeunit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StringPrepareForGetCodeunit node."
        },
        {
          "name": "ReduceStringAsWtf16",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StringAsWtf16 node."
        },
        {
          "name": "ReduceAnyConvertExtern",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an AnyConvertExtern node."
        },
        {
          "name": "ReduceEffectPhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an EffectPhi node."
        },
        {
          "name": "ReduceStart",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Start node."
        },
        {
          "name": "ReduceOtherNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces other nodes (default case)."
        },
        {
          "name": "ReduceLoadLikeFromImmutable",
          "parameters": [
            "Node* node",
            "int index"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an operation that could be treated as a load from an immutable object."
        },
        {
          "name": "UpdateState",
          "parameters": [
            "Node* node",
            "AbstractState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Updates the abstract state of a node."
        },
        {
          "name": "ComputeLoopState",
          "parameters": [
            "Node* node",
            "AbstractState const* state"
          ],
          "return_type": "AbstractState const*",
          "logic": "Computes the abstract state at the beginning of a loop."
        },
        {
          "name": "TruncateAndExtendOrType",
          "parameters": [
            "Node* value",
            "Node* effect",
            "Node* control",
            "wasm::ValueType field_type",
            "bool is_signed"
          ],
          "return_type": "std::tuple<Node*, Node*>",
          "logic": "Returns the replacement value and effect for a load, after optional type guarding."
        },
        {
          "name": "AssertUnreachable",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Asserts that a node is unreachable."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the MachineOperatorBuilder."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph."
        },
        {
          "name": "dead",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the dead node."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone."
        },
        {
          "name": "empty_state",
          "parameters": [],
          "return_type": "AbstractState const*",
          "logic": "Returns a pointer to the empty abstract state."
        }
      ]
    },
    {
      "name": "FieldOrElementValue",
      "properties": [
        "value"
      ],
      "methods": [
        {
          "name": "FieldOrElementValue",
          "parameters": [],
          "return_type": "constructor",
          "logic": "Default constructor for FieldOrElementValue"
        },
        {
          "name": "FieldOrElementValue",
          "parameters": [
            "Node* value"
          ],
          "return_type": "constructor",
          "logic": "Constructor for FieldOrElementValue, initializing with a Node* value."
        },
        {
          "name": "operator==",
          "parameters": [
            "const FieldOrElementValue& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two FieldOrElementValue objects are equal."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const FieldOrElementValue& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two FieldOrElementValue objects are not equal."
        },
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FieldOrElementValue is empty (value is nullptr)."
        }
      ]
    },
    {
      "name": "HalfState",
      "properties": [
        "zone_",
        "fields_",
        "elements_"
      ],
      "methods": [
        {
          "name": "HalfState",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for HalfState. Initializes the maps."
        },
        {
          "name": "Equals",
          "parameters": [
            "HalfState const* that"
          ],
          "return_type": "bool",
          "logic": "Compares two HalfState objects for equality."
        },
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the HalfState is empty."
        },
        {
          "name": "IntersectWith",
          "parameters": [
            "HalfState const* that"
          ],
          "return_type": "void",
          "logic": "Intersects this HalfState with another HalfState."
        },
        {
          "name": "KillField",
          "parameters": [
            "int field_index",
            "Node* object"
          ],
          "return_type": "HalfState const*",
          "logic": "Kills a field in the HalfState, returning a new HalfState."
        },
        {
          "name": "AddField",
          "parameters": [
            "int field_index",
            "Node* object",
            "Node* value"
          ],
          "return_type": "HalfState const*",
          "logic": "Adds a field to the HalfState, returning a new HalfState."
        },
        {
          "name": "LookupField",
          "parameters": [
            "int field_index",
            "Node* object"
          ],
          "return_type": "FieldOrElementValue",
          "logic": "Looks up a field in the HalfState."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the HalfState."
        }
      ]
    },
    {
      "name": "AbstractState",
      "properties": [
        "mutable_state",
        "immutable_state"
      ],
      "methods": [
        {
          "name": "AbstractState",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for AbstractState, initializes with empty half-states."
        },
        {
          "name": "AbstractState",
          "parameters": [
            "HalfState mutable_state",
            "HalfState immutable_state"
          ],
          "return_type": "constructor",
          "logic": "Constructor for AbstractState, initializes with given half-states."
        },
        {
          "name": "Equals",
          "parameters": [
            "AbstractState const* that"
          ],
          "return_type": "bool",
          "logic": "Checks if two AbstractState objects are equal."
        },
        {
          "name": "IntersectWith",
          "parameters": [
            "AbstractState const* that"
          ],
          "return_type": "void",
          "logic": "Intersects this AbstractState with another AbstractState."
        }
      ]
    }
  ],
  "functions": []
}