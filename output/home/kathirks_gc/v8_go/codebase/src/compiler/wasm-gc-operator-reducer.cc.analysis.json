{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-gc-operator-reducer.cc",
  "imports": [
    "src/compiler/wasm-gc-operator-reducer.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/node-properties.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/wasm-compiler-definitions.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "WasmGCOperatorReducer",
      "properties": [
        "mcgraph_",
        "gasm_",
        "module_",
        "source_position_table_"
      ],
      "methods": [
        {
          "name": "WasmGCOperatorReducer",
          "parameters": [
            "Editor* editor",
            "Zone* temp_zone_",
            "MachineGraph* mcgraph",
            "const wasm::WasmModule* module",
            "SourcePositionTable* source_position_table"
          ],
          "return_type": "void",
          "logic": "Constructor for the WasmGCOperatorReducer class. Initializes the reducer with the given editor, zone, machine graph, module and source position table."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "The main reduction function that processes a node and dispatches to specific reduction functions based on the node's opcode."
        },
        {
          "name": "SetType",
          "parameters": [
            "Node* node",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Sets the type of a node to a given WebAssembly value type."
        },
        {
          "name": "UpdateNodeAndAliasesTypes",
          "parameters": [
            "Node* state_owner",
            "ControlPathTypes parent_state",
            "Node* node",
            "wasm::TypeInModule type",
            "bool in_new_block"
          ],
          "return_type": "Reduction",
          "logic": "Updates the types of a node and its aliases based on the control path state."
        },
        {
          "name": "ReduceStart",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Start node by initializing the control path state."
        },
        {
          "name": "ObjectTypeFromContext",
          "parameters": [
            "Node* object",
            "Node* control",
            "bool allow_non_wasm"
          ],
          "return_type": "wasm::TypeInModule",
          "logic": "Determines the WebAssembly type of an object node based on the control context and any type information present in the control path state."
        },
        {
          "name": "ReduceWasmStructOperation",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmStructGet and WasmStructSet nodes by potentially removing null checks and updating types."
        },
        {
          "name": "ReduceWasmArrayLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmArrayLength nodes by potentially removing null checks and updating types."
        },
        {
          "name": "ReduceIf",
          "parameters": [
            "Node* node",
            "bool condition"
          ],
          "return_type": "Reduction",
          "logic": "Reduces IfTrue and IfFalse nodes by adding type information to the control path state based on type checks or null checks in the branch condition."
        },
        {
          "name": "ReduceMerge",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces Merge nodes by combining control path states from multiple inputs."
        },
        {
          "name": "ReduceAssertNotNull",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces AssertNotNull nodes by potentially removing the null check if the input is known to be non-null."
        },
        {
          "name": "ReduceCheckNull",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces IsNull and IsNotNull nodes by potentially replacing them with constants if the input is known to be null or non-null."
        },
        {
          "name": "ReduceWasmAnyConvertExtern",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmAnyConvertExtern nodes by removing redundant any.convert_extern(extern.convert_any(...)) patterns."
        },
        {
          "name": "ReduceTypeGuard",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces TypeGuard nodes by refining the type based on the guarded type."
        },
        {
          "name": "ReduceWasmTypeCast",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmTypeCast nodes by optimizing away unnecessary casts or inserting trap if the cast is guaranteed to fail."
        },
        {
          "name": "ReduceWasmTypeCastAbstract",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmTypeCastAbstract nodes by optimizing away unnecessary casts or inserting trap if the cast is guaranteed to fail."
        },
        {
          "name": "ReduceWasmTypeCheck",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmTypeCheck nodes by optimizing away checks that always succeed or always fail."
        },
        {
          "name": "ReduceWasmTypeCheckAbstract",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces WasmTypeCheckAbstract nodes by optimizing away checks that always succeed or always fail."
        },
        {
          "name": "UpdateSourcePosition",
          "parameters": [
            "Node* new_node",
            "Node* old_node"
          ],
          "return_type": "void",
          "logic": "Copies the source position from an old node to a new node."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "InDeadBranch",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if a node is in a dead branch (Dead, DeadValue, or uninhabited type)."
    },
    {
      "name": "GetAlias",
      "parameters": [
        "Node* node"
      ],
      "return_type": "Node*",
      "logic": "Returns the alias of a node based on its opcode (WasmTypeCast, WasmTypeCastAbstract, TypeGuard, AssertNotNull), or nullptr if it has no alias."
    }
  ]
}