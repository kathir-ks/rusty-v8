{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/escape-analysis.h",
  "imports": [
    "src/base/hashing.h",
    "src/common/globals.h",
    "src/compiler/graph-reducer.h",
    "src/compiler/js-graph.h",
    "src/compiler/persistent-map.h",
    "src/objects/name.h"
  ],
  "classes": [
    {
      "name": "EffectGraphReducer",
      "properties": [
        "graph_",
        "state_",
        "revisit_",
        "stack_",
        "reduce_",
        "tick_counter_"
      ],
      "methods": [
        {
          "name": "EffectGraphReducer",
          "parameters": [
            "TFGraph* graph",
            "std::function<void(Node*, Reduction*)> reduce",
            "TickCounter* tick_counter",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the EffectGraphReducer. Initializes the graph, reduction function, tick counter, and zone."
        },
        {
          "name": "ReduceGraph",
          "parameters": [],
          "return_type": "void",
          "logic": "Reduces the graph starting from the end node."
        },
        {
          "name": "Revisit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Marks a node for revisitation during the reduction process."
        },
        {
          "name": "AddRoot",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a new root node to start reduction from."
        },
        {
          "name": "Complete",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the reduction process is complete (no more nodes on the stack or revisit list)."
        },
        {
          "name": "tick_counter",
          "parameters": [],
          "return_type": "TickCounter*",
          "logic": "Returns the tick counter."
        },
        {
          "name": "Reduction",
          "parameters": [],
          "return_type": "void",
          "logic": "Nested class to hold reduction information like value and effect changes."
        },
        {
          "name": "Reduction::value_changed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Getter for value_changed_"
        },
        {
          "name": "Reduction::set_value_changed",
          "parameters": [],
          "return_type": "void",
          "logic": "Setter for value_changed_"
        },
        {
          "name": "Reduction::effect_changed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Getter for effect_changed_"
        },
        {
          "name": "Reduction::set_effect_changed",
          "parameters": [],
          "return_type": "void",
          "logic": "Setter for effect_changed_"
        }
      ]
    },
    {
      "name": "Variable",
      "properties": [
        "id_"
      ],
      "methods": [
        {
          "name": "operator==",
          "parameters": [
            "Variable other"
          ],
          "return_type": "bool",
          "logic": "Checks if two variables are equal based on their IDs."
        },
        {
          "name": "operator!=",
          "parameters": [
            "Variable other"
          ],
          "return_type": "bool",
          "logic": "Checks if two variables are not equal based on their IDs."
        },
        {
          "name": "operator<",
          "parameters": [
            "Variable other"
          ],
          "return_type": "bool",
          "logic": "Compares two variables based on their IDs."
        },
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "Variable",
          "logic": "Returns an invalid variable."
        }
      ]
    },
    {
      "name": "Dependable",
      "properties": [
        "dependants_"
      ],
      "methods": [
        {
          "name": "Dependable",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the Dependable class."
        },
        {
          "name": "AddDependency",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the list of dependants."
        },
        {
          "name": "RevisitDependants",
          "parameters": [
            "EffectGraphReducer* reducer"
          ],
          "return_type": "void",
          "logic": "Revisits all dependant nodes using the given reducer."
        }
      ]
    },
    {
      "name": "VirtualObject",
      "properties": [
        "escaped_",
        "id_",
        "fields_"
      ],
      "methods": [
        {
          "name": "VirtualObject",
          "parameters": [
            "VariableTracker* var_states",
            "Id id",
            "int size"
          ],
          "return_type": "void",
          "logic": "Constructor for the VirtualObject class."
        },
        {
          "name": "FieldAt",
          "parameters": [
            "int offset"
          ],
          "return_type": "Maybe<Variable>",
          "logic": "Returns the variable at the given field offset."
        },
        {
          "name": "FieldAt",
          "parameters": [
            "Maybe<int> maybe_offset"
          ],
          "return_type": "Maybe<Variable>",
          "logic": "Returns the variable at the given field offset if the offset is valid."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "Id",
          "logic": "Returns the ID of the virtual object."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of the virtual object in bytes."
        },
        {
          "name": "SetEscaped",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the object as escaped."
        },
        {
          "name": "HasEscaped",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the object has escaped."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns an iterator to the beginning of the fields vector."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns an iterator to the end of the fields vector."
        }
      ]
    },
    {
      "name": "EscapeAnalysisResult",
      "properties": [
        "tracker_"
      ],
      "methods": [
        {
          "name": "EscapeAnalysisResult",
          "parameters": [
            "EscapeAnalysisTracker* tracker"
          ],
          "return_type": "void",
          "logic": "Constructor for the EscapeAnalysisResult class."
        },
        {
          "name": "GetVirtualObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "const VirtualObject*",
          "logic": "Retrieves the virtual object associated with a given node."
        },
        {
          "name": "GetVirtualObjectField",
          "parameters": [
            "const VirtualObject* vobject",
            "int field",
            "Node* effect"
          ],
          "return_type": "Node*",
          "logic": "Retrieves a field of a virtual object."
        },
        {
          "name": "GetReplacementOf",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Gets the replacement node for a given node after escape analysis."
        }
      ]
    },
    {
      "name": "EscapeAnalysis",
      "properties": [
        "tracker_",
        "jsgraph_"
      ],
      "methods": [
        {
          "name": "EscapeAnalysis",
          "parameters": [
            "JSGraph* jsgraph",
            "TickCounter* tick_counter",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the EscapeAnalysis class."
        },
        {
          "name": "analysis_result",
          "parameters": [],
          "return_type": "EscapeAnalysisResult",
          "logic": "Returns the result of the escape analysis."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node",
            "Reduction* reduction"
          ],
          "return_type": "void",
          "logic": "Reduces a given node during the escape analysis process."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph associated with this analysis."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate."
        }
      ]
    }
  ],
  "functions": []
}