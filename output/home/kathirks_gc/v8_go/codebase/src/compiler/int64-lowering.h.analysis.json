{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/int64-lowering.h",
  "imports": [
    "<memory>",
    "src/compiler/common-operator.h",
    "src/compiler/machine-operator.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/turbofan-graph.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "Int64Lowering",
      "properties": [
        "graph_",
        "machine_",
        "common_",
        "simplified_",
        "zone_",
        "signature_",
        "state_",
        "stack_",
        "replacements_",
        "placeholder_"
      ],
      "methods": [
        {
          "name": "Int64Lowering",
          "parameters": [
            "TFGraph* graph",
            "MachineOperatorBuilder* machine",
            "CommonOperatorBuilder* common",
            "SimplifiedOperatorBuilder* simplified_",
            "Zone* zone",
            "Signature<MachineRepresentation>* signature"
          ],
          "return_type": "void",
          "logic": "Constructor for the Int64Lowering class.  On 64-bit architectures, this is an empty constructor."
        },
        {
          "name": "LowerGraph",
          "parameters": [],
          "return_type": "void",
          "logic": "LowerGraph is an empty function on 64-bit architectures."
        },
        {
          "name": "GetParameterCountAfterLowering",
          "parameters": [
            "Signature<MachineRepresentation>* signature"
          ],
          "return_type": "static int",
          "logic": "Calculates the parameter count after int64 lowering."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone used for memory allocation."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the turbofan graph."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the machine operator builder."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the common operator builder."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the simplified operator builder."
        },
        {
          "name": "signature",
          "parameters": [],
          "return_type": "Signature<MachineRepresentation>*",
          "logic": "Returns the signature."
        },
        {
          "name": "PushNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Pushes a node onto the stack for processing."
        },
        {
          "name": "LowerNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers a given node in the graph, splitting int64 operations into 32-bit operations."
        },
        {
          "name": "DefaultLowering",
          "parameters": [
            "Node* node",
            "bool low_word_only"
          ],
          "return_type": "bool",
          "logic": "Applies the default lowering logic for a node. It returns a boolean indicating if the lowering was successful."
        },
        {
          "name": "LowerComparison",
          "parameters": [
            "Node* node",
            "const Operator* signed_op",
            "const Operator* unsigned_op"
          ],
          "return_type": "void",
          "logic": "Lowers a comparison operation, using signed or unsigned operators."
        },
        {
          "name": "LowerWord64AtomicBinop",
          "parameters": [
            "Node* node",
            "const Operator* op"
          ],
          "return_type": "void",
          "logic": "Lowers a 64-bit atomic binary operation."
        },
        {
          "name": "LowerWord64AtomicNarrowOp",
          "parameters": [
            "Node* node",
            "const Operator* op"
          ],
          "return_type": "void",
          "logic": "Lowers a 64-bit atomic narrow operation."
        },
        {
          "name": "LowerLoadOperator",
          "parameters": [
            "Node* node",
            "MachineRepresentation rep",
            "const Operator* load_op"
          ],
          "return_type": "void",
          "logic": "Lowers a load operation."
        },
        {
          "name": "LowerStoreOperator",
          "parameters": [
            "Node* node",
            "MachineRepresentation rep",
            "const Operator* store_op"
          ],
          "return_type": "void",
          "logic": "Lowers a store operator."
        },
        {
          "name": "LowerCallDescriptor",
          "parameters": [
            "const CallDescriptor* call_descriptor"
          ],
          "return_type": "const CallDescriptor*",
          "logic": "Lowers a call descriptor."
        },
        {
          "name": "ReplaceNode",
          "parameters": [
            "Node* old",
            "Node* new_low",
            "Node* new_high"
          ],
          "return_type": "void",
          "logic": "Replaces a node with two new nodes representing the low and high parts of a 64-bit value."
        },
        {
          "name": "HasReplacementLow",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node has a low replacement."
        },
        {
          "name": "GetReplacementLow",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Gets the low replacement node for a given node."
        },
        {
          "name": "HasReplacementHigh",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node has a high replacement."
        },
        {
          "name": "GetReplacementHigh",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Gets the high replacement node for a given node."
        },
        {
          "name": "PreparePhiReplacement",
          "parameters": [
            "Node* phi"
          ],
          "return_type": "void",
          "logic": "Prepares a phi node for replacement."
        },
        {
          "name": "GetIndexNodes",
          "parameters": [
            "Node* index",
            "Node** index_low",
            "Node** index_high"
          ],
          "return_type": "void",
          "logic": "Gets the low and high index nodes."
        },
        {
          "name": "ReplaceNodeWithProjections",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Replaces a node with projections for low and high words."
        },
        {
          "name": "LowerMemoryBaseAndIndex",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the memory base and index of a node."
        }
      ]
    }
  ],
  "functions": []
}