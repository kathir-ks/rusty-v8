{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/common-operator.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/common-operator.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"src/base/compiler-specific.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/codegen/reloc-info.h\",\n    \"src/common/globals.h\",\n    \"src/compiler/feedback-source.h\",\n    \"src/compiler/frame-states.h\",\n    \"src/compiler/linkage.h\",\n    \"src/compiler/node-properties.h\",\n    \"src/compiler/use-info.h\",\n    \"src/deoptimizer/deoptimize-reason.h\",\n    \"src/zone/zone-containers.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"BranchParameters\",\n      \"properties\": [\n        \"semantics_\",\n        \"hint_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BranchParameters\",\n          \"parameters\": [\n            \"BranchSemantics semantics\",\n            \"BranchHint hint\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for BranchParameters, initializes semantics_ and hint_.\"\n        },\n        {\n          \"name\": \"semantics\",\n          \"parameters\": [],\n          \"return_type\": \"BranchSemantics\",\n          \"logic\": \"Returns the BranchSemantics of the object.\"\n        },\n        {\n          \"name\": \"hint\",\n          \"parameters\": [],\n          \"return_type\": \"BranchHint\",\n          \"logic\": \"Returns the BranchHint of the object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AssertParameters\",\n      \"properties\": [\n        \"semantics_\",\n        \"condition_string_\",\n        \"file_\",\n        \"line_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AssertParameters\",\n          \"parameters\": [\n            \"BranchSemantics semantics\",\n            \"const char* condition_string\",\n            \"const char* file\",\n            \"int line\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AssertParameters, initializes semantics_, condition_string_, file_, and line_.\"\n        },\n        {\n          \"name\": \"semantics\",\n          \"parameters\": [],\n          \"return_type\": \"BranchSemantics\",\n          \"logic\": \"Returns the BranchSemantics of the object.\"\n        },\n        {\n          \"name\": \"condition_string\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the condition string of the assertion.\"\n        },\n        {\n          \"name\": \"file\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the file name where the assertion is located.\"\n        },\n        {\n          \"name\": \"line\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the line number where the assertion is located.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DeoptimizeParameters\",\n      \"properties\": [\n        \"reason_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DeoptimizeParameters\",\n          \"parameters\": [\n            \"DeoptimizeReason reason\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for DeoptimizeParameters, initializes reason_ and feedback_.\"\n        },\n        {\n          \"name\": \"reason\",\n          \"parameters\": [],\n          \"return_type\": \"DeoptimizeReason\",\n          \"logic\": \"Returns the DeoptimizeReason.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the FeedbackSource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SelectParameters\",\n      \"properties\": [\n        \"representation_\",\n        \"hint_\",\n        \"semantics_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SelectParameters\",\n          \"parameters\": [\n            \"MachineRepresentation representation\",\n            \"BranchHint hint\",\n            \"BranchSemantics semantics\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for SelectParameters, initializes representation_, hint_, and semantics_.\"\n        },\n        {\n          \"name\": \"representation\",\n          \"parameters\": [],\n          \"return_type\": \"MachineRepresentation\",\n          \"logic\": \"Returns the MachineRepresentation.\"\n        },\n        {\n          \"name\": \"hint\",\n          \"parameters\": [],\n          \"return_type\": \"BranchHint\",\n          \"logic\": \"Returns the BranchHint.\"\n        },\n        {\n          \"name\": \"semantics\",\n          \"parameters\": [],\n          \"return_type\": \"BranchSemantics\",\n          \"logic\": \"Returns the BranchSemantics.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ParameterInfo\",\n      \"properties\": [\n        \"index_\",\n        \"debug_name_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ParameterInfo\",\n          \"parameters\": [\n            \"int index\",\n            \"const char* debug_name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ParameterInfo, initializes index_ and debug_name_.\"\n        },\n        {\n          \"name\": \"index\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the index of the parameter.\"\n        },\n        {\n          \"name\": \"debug_name\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the debug name of the parameter.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ObjectStateInfo\",\n      \"properties\": [\n        \"first\",\n        \"second\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ObjectStateInfo\",\n          \"parameters\": [\n            \"uint32_t object_id\",\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ObjectStateInfo, inherits from std::pair and initializes first (object_id) and second (size).\"\n        },\n        {\n          \"name\": \"object_id\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the object ID.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the size.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TypedObjectStateInfo\",\n      \"properties\": [\n        \"first\",\n        \"second\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TypedObjectStateInfo\",\n          \"parameters\": [\n            \"uint32_t object_id\",\n            \"const ZoneVector<MachineType>* machine_types\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TypedObjectStateInfo, inherits from std::pair and initializes first (object_id) and second (machine_types).\"\n        },\n        {\n          \"name\": \"object_id\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the object ID.\"\n        },\n        {\n          \"name\": \"machine_types\",\n          \"parameters\": [],\n          \"return_type\": \"const ZoneVector<MachineType>*\",\n          \"logic\": \"Returns the machine types.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"RelocatablePtrConstantInfo\",\n      \"properties\": [\n        \"value_\",\n        \"rmode_\",\n        \"type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"RelocatablePtrConstantInfo\",\n          \"parameters\": [\n            \"int32_t value\",\n            \"RelocInfo::Mode rmode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for RelocatablePtrConstantInfo for int32_t, initializes value_, rmode_, and type_ (kInt32).\"\n        },\n        {\n          \"name\": \"RelocatablePtrConstantInfo\",\n          \"parameters\": [\n            \"int64_t value\",\n            \"RelocInfo::Mode rmode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for RelocatablePtrConstantInfo for int64_t, initializes value_, rmode_, and type_ (kInt64).\"\n        },\n        {\n          \"name\": \"value\",\n          \"parameters\": [],\n          \"return_type\": \"intptr_t\",\n          \"logic\": \"Returns the value.\"\n        },\n        {\n          \"name\": \"rmode\",\n          \"parameters\": [],\n          \"return_type\": \"RelocInfo::Mode\",\n          \"logic\": \"Returns the relocation mode.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns the type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SparseInputMask\",\n      \"properties\": [\n        \"bit_mask_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SparseInputMask\",\n          \"parameters\": [\n            \"BitMaskType bit_mask\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for SparseInputMask, initializes bit_mask_.\"\n        },\n        {\n          \"name\": \"Dense\",\n          \"parameters\": [],\n          \"return_type\": \"SparseInputMask\",\n          \"logic\": \"Provides a SparseInputMask representing a dense input set.\"\n        },\n        {\n          \"name\": \"mask\",\n          \"parameters\": [],\n          \"return_type\": \"BitMaskType\",\n          \"logic\": \"Returns the bit mask.\"\n        },\n        {\n          \"name\": \"IsDense\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the mask represents a dense input set.\"\n        },\n        {\n          \"name\": \"CountReal\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Counts how many real values are in the sparse array.\"\n        },\n        {\n          \"name\": \"IterateOverInputs\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"InputIterator\",\n          \"logic\": \"Returns an iterator over the sparse inputs of {node}.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SparseInputMask::InputIterator\",\n      \"properties\": [\n        \"bit_mask_\",\n        \"parent_\",\n        \"real_index_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"InputIterator\",\n          \"parameters\": [\n            \"BitMaskType bit_mask\",\n            \"Node* parent\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the input iterator, initializes member variables.\"\n        },\n        {\n          \"name\": \"parent\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Returns the parent node.\"\n        },\n        {\n          \"name\": \"real_index\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the real index.\"\n        },\n        {\n          \"name\": \"Advance\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Advances the iterator to the next sparse input.\"\n        },\n        {\n          \"name\": \"GetReal\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Returns the current sparse input's real node value.\"\n        },\n        {\n          \"name\": \"AdvanceToNextRealOrEnd\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Advances to the next real value or the end.\"\n        },\n        {\n          \"name\": \"Get\",\n          \"parameters\": [\n            \"Node* empty_value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Returns either a real input node, or the given {empty_value}.\"\n        },\n        {\n          \"name\": \"IsReal\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the current sparse input is a real input node.\"\n        },\n        {\n          \"name\": \"IsEmpty\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the current sparse input is an empty value.\"\n        },\n        {\n          \"name\": \"IsEnd\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the iterator has reached the end of the sparse inputs.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TypedStateValueInfo\",\n      \"properties\": [\n        \"machine_types_\",\n        \"sparse_input_mask_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TypedStateValueInfo\",\n          \"parameters\": [\n            \"ZoneVector<MachineType> const* machine_types\",\n            \"SparseInputMask sparse_input_mask\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TypedStateValueInfo, initializes machine_types_ and sparse_input_mask_.\"\n        },\n        {\n          \"name\": \"machine_types\",\n          \"parameters\": [],\n          \"return_type\": \"ZoneVector<MachineType> const*\",\n          \"logic\": \"Returns the machine types.\"\n        },\n        {\n          \"name\": \"sparse_input_mask\",\n          \"parameters\": [],\n          \"return_type\": \"SparseInputMask\",\n          \"logic\": \"Returns the sparse input mask.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IfValueParameters\",\n      \"properties\": [\n        \"value_\",\n        \"comparison_order_\",\n        \"hint_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IfValueParameters\",\n          \"parameters\": [\n            \"int32_t value\",\n            \"int32_t comparison_order\",\n            \"BranchHint hint\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for IfValueParameters, initializes value_, comparison_order_, and hint_.\"\n        },\n        {\n          \"name\": \"value\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the value.\"\n        },\n        {\n          \"name\": \"comparison_order\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the comparison order.\"\n        },\n        {\n          \"name\": \"hint\",\n          \"parameters\": [],\n          \"return_type\": \"BranchHint\",\n          \"logic\": \"Returns the branch hint.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SLVerifierHintParameters\",\n      \"properties\": [\n        \"semantics_\",\n        \"override_output_type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SLVerifierHintParameters\",\n          \"parameters\": [\n            \"const Operator* semantics\",\n            \"std::optional<Type> override_output_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for SLVerifierHintParameters, initializes semantics_ and override_output_type_.\"\n        },\n        {\n          \"name\": \"semantics\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the semantics.\"\n        },\n        {\n          \"name\": \"override_output_type\",\n          \"parameters\": [],\n          \"return_type\": \"const std::optional<Type>&\",\n          \"logic\": \"Returns the override output type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExitMachineGraphParameters\",\n      \"properties\": [\n        \"output_representation_\",\n        \"output_type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ExitMachineGraphParameters\",\n          \"parameters\": [\n            \"MachineRepresentation output_representation\",\n            \"Type output_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ExitMachineGraphParameters, initializes output_representation_ and output_type_.\"\n        },\n        {\n          \"name\": \"output_representation\",\n          \"parameters\": [],\n          \"return_type\": \"MachineRepresentation\",\n          \"logic\": \"Returns the output representation.\"\n        },\n        {\n          \"name\": \"output_type\",\n          \"parameters\": [],\n          \"return_type\": \"const Type&\",\n          \"logic\": \"Returns the output type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CommonOperatorBuilder\",\n      \"properties\": [\n        \"cache_\",\n        \"zone_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CommonOperatorBuilder\",\n          \"parameters\": [\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for CommonOperatorBuilder, initializes cache_ and zone_.\"\n        },\n        {\n          \"name\": \"Plug\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator for a dummy value.\"\n        },\n        {\n          \"name\": \"Chained\",\n          \"parameters\": [\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator used to fix allocating operators at a specific position in the effect and control chain.\"\n        },\n        {\n          \"name\": \"Dead\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing dead code.\"\n        },\n        {\n          \"name\": \"DeadValue\",\n          \"parameters\": [\n            \"MachineRepresentation rep\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a dead value with a given representation.\"\n        },\n        {\n          \"name\": \"Unreachable\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing unreachable code.\"\n        },\n        {\n          \"name\": \"StaticAssert\",\n          \"parameters\": [\n            \"const char* source\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator for static assertions.\"\n        },\n        {\n          \"name\": \"SLVerifierHint\",\n          \"parameters\": [\n            \"const Operator* semantics\",\n            \"const std::optional<Type>& override_output_type\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator providing hints for the verifier during SimplifiedLowering.\"\n        },\n        {\n          \"name\": \"End\",\n          \"parameters\": [\n            \"size_t control_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator marking the end of a control flow construct.\"\n        },\n        {\n          \"name\": \"Branch\",\n          \"parameters\": [\n            \"BranchHint\",\n            \"BranchSemantics\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a branch.\"\n        },\n        {\n          \"name\": \"IfTrue\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the true branch of an if statement.\"\n        },\n        {\n          \"name\": \"IfFalse\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the false branch of an if statement.\"\n        },\n        {\n          \"name\": \"IfSuccess\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the success branch.\"\n        },\n        {\n          \"name\": \"IfException\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the exception branch.\"\n        },\n        {\n          \"name\": \"Switch\",\n          \"parameters\": [\n            \"size_t control_output_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a switch statement.\"\n        },\n        {\n          \"name\": \"IfValue\",\n          \"parameters\": [\n            \"int32_t value\",\n            \"int32_t order\",\n            \"BranchHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a value-based condition.\"\n        },\n        {\n          \"name\": \"IfDefault\",\n          \"parameters\": [\n            \"BranchHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a default branch.\"\n        },\n        {\n          \"name\": \"Throw\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing throwing an exception.\"\n        },\n        {\n          \"name\": \"Deoptimize\",\n          \"parameters\": [\n            \"DeoptimizeReason reason\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing deoptimization.\"\n        },\n        {\n          \"name\": \"DeoptimizeIf\",\n          \"parameters\": [\n            \"DeoptimizeReason reason\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing conditional deoptimization.\"\n        },\n        {\n          \"name\": \"DeoptimizeUnless\",\n          \"parameters\": [\n            \"DeoptimizeReason reason\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing conditional deoptimization.\"\n        },\n        {\n          \"name\": \"Assert\",\n          \"parameters\": [\n            \"BranchSemantics semantics\",\n            \"const char* condition_string\",\n            \"const char* file\",\n            \"int line\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator for assertions.\"\n        },\n        {\n          \"name\": \"TrapIf\",\n          \"parameters\": [\n            \"TrapId trap_id\",\n            \"bool has_frame_state\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator for wasm trap if condition is true.\"\n        },\n        {\n          \"name\": \"TrapUnless\",\n          \"parameters\": [\n            \"TrapId trap_id\",\n            \"bool has_frame_state\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator for wasm trap if condition is false.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"int value_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a function return.\"\n        },\n        {\n          \"name\": \"Terminate\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing program termination.\"\n        },\n        {\n          \"name\": \"Start\",\n          \"parameters\": [\n            \"int value_output_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the start of a function.\"\n        },\n        {\n          \"name\": \"Loop\",\n          \"parameters\": [\n            \"int control_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a loop.\"\n        },\n        {\n          \"name\": \"Merge\",\n          \"parameters\": [\n            \"int control_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing merging control flow.\"\n        },\n        {\n          \"name\": \"Parameter\",\n          \"parameters\": [\n            \"int index\",\n            \"const char* debug_name\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a function parameter.\"\n        },\n        {\n          \"name\": \"OsrValue\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing on-stack replacement value.\"\n        },\n        {\n          \"name\": \"Int32Constant\",\n          \"parameters\": [\n            \"int32_t\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing an int32 constant.\"\n        },\n        {\n          \"name\": \"Int64Constant\",\n          \"parameters\": [\n            \"int64_t\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing an int64 constant.\"\n        },\n        {\n          \"name\": \"TaggedIndexConstant\",\n          \"parameters\": [\n            \"int32_t value\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a tagged index constant.\"\n        },\n        {\n          \"name\": \"Float32Constant\",\n          \"parameters\": [\n            \"float\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a float32 constant.\"\n        },\n        {\n          \"name\": \"Float64Constant\",\n          \"parameters\": [\n            \"double\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a float64 constant.\"\n        },\n        {\n          \"name\": \"ExternalConstant\",\n          \"parameters\": [\n            \"const ExternalReference&\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing an external constant.\"\n        },\n        {\n          \"name\": \"NumberConstant\",\n          \"parameters\": [\n            \"double\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a number constant.\"\n        },\n        {\n          \"name\": \"PointerConstant\",\n          \"parameters\": [\n            \"intptr_t\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a pointer constant.\"\n        },\n        {\n          \"name\": \"HeapConstant\",\n          \"parameters\": [\n            \"const Handle<HeapObject>&\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a heap constant.\"\n        },\n        {\n          \"name\": \"CompressedHeapConstant\",\n          \"parameters\": [\n            \"const Handle<HeapObject>&\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a compressed heap constant.\"\n        },\n        {\n          \"name\": \"TrustedHeapConstant\",\n          \"parameters\": [\n            \"const Handle<HeapObject>&\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a trusted heap constant.\"\n        },\n        {\n          \"name\": \"ObjectId\",\n          \"parameters\": [\n            \"uint32_t\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing an object id.\"\n        },\n        {\n          \"name\": \"RelocatableInt32Constant\",\n          \"parameters\": [\n            \"int32_t value\",\n            \"RelocInfo::Mode rmode\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a relocatable int32 constant.\"\n        },\n        {\n          \"name\": \"RelocatableInt64Constant\",\n          \"parameters\": [\n            \"int64_t value\",\n            \"RelocInfo::Mode rmode\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a relocatable int64 constant.\"\n        },\n        {\n          \"name\": \"Select\",\n          \"parameters\": [\n            \"MachineRepresentation\",\n            \"BranchHint\",\n            \"BranchSemantics\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a select operation.\"\n        },\n        {\n          \"name\": \"Phi\",\n          \"parameters\": [\n            \"MachineRepresentation representation\",\n            \"int value_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a phi node.\"\n        },\n        {\n          \"name\": \"EffectPhi\",\n          \"parameters\": [\n            \"int effect_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing an effect phi node.\"\n        },\n        {\n          \"name\": \"InductionVariablePhi\",\n          \"parameters\": [\n            \"int value_input_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing an induction variable phi node.\"\n        },\n        {\n          \"name\": \"LoopExit\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a loop exit.\"\n        },\n        {\n          \"name\": \"LoopExitValue\",\n          \"parameters\": [\n            \"MachineRepresentation rep\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the value produced at loop exit.\"\n        },\n        {\n          \"name\": \"LoopExitEffect\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the effect at loop exit.\"\n        },\n        {\n          \"name\": \"Checkpoint\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a checkpoint in the control flow graph.\"\n        },\n        {\n          \"name\": \"BeginRegion\",\n          \"parameters\": [\n            \"RegionObservability\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the beginning of a region.\"\n        },\n        {\n          \"name\": \"FinishRegion\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the end of a region.\"\n        },\n        {\n          \"name\": \"StateValues\",\n          \"parameters\": [\n            \"int arguments\",\n            \"SparseInputMask bitmask\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a collection of state values.\"\n        },\n        {\n          \"name\": \"TypedStateValues\",\n          \"parameters\": [\n            \"const ZoneVector<MachineType>* types\",\n            \"SparseInputMask bitmask\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a collection of state values with type information.\"\n        },\n        {\n          \"name\": \"ArgumentsElementsState\",\n          \"parameters\": [\n            \"ArgumentsStateType type\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing arguments elements state.\"\n        },\n        {\n          \"name\": \"ArgumentsLengthState\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing arguments length state.\"\n        },\n        {\n          \"name\": \"ObjectState\",\n          \"parameters\": [\n            \"uint32_t object_id\",\n            \"int pointer_slots\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the state of an object.\"\n        },\n        {\n          \"name\": \"TypedObjectState\",\n          \"parameters\": [\n            \"uint32_t object_id\",\n            \"const ZoneVector<MachineType>* types\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the typed state of an object.\"\n        },\n        {\n          \"name\": \"FrameState\",\n          \"parameters\": [\n            \"BytecodeOffset bailout_id\",\n            \"OutputFrameStateCombine state_combine\",\n            \"const FrameStateFunctionInfo* function_info\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing the frame state.\"\n        },\n        {\n          \"name\": \"Call\",\n          \"parameters\": [\n            \"const CallDescriptor* call_descriptor\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a function call.\"\n        },\n        {\n          \"name\": \"TailCall\",\n          \"parameters\": [\n            \"const CallDescriptor* call_descriptor\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a tail call.\"\n        },\n        {\n          \"name\": \"Projection\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing a projection.\"\n        },\n        {\n          \"name\": \"Retain\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing retaining a value.\"\n        },\n        {\n          \"name\": \"TypeGuard\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator representing type guarding.\"\n        },\n        {\n          \"name\": \"EnterMachineGraph\",\n          \"parameters\": [\n            \"UseInfo use_info\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator marking the entry"
}