{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/string-builder-optimizer.cc",
  "imports": [
    "src/compiler/string-builder-optimizer.h",
    "algorithm",
    "optional",
    "src/base/bits.h",
    "src/base/logging.h",
    "src/base/small-vector.h",
    "src/compiler/access-builder.h",
    "src/compiler/graph-assembler.h",
    "src/compiler/js-graph.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/js-operator.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/compiler/schedule.h",
    "src/compiler/turbofan-types.h",
    "src/objects/code.h",
    "src/objects/map-inl.h",
    "src/utils/utils.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "OneOrTwoByteAnalysis",
      "properties": [],
      "methods": [
        {
          "name": "ConcatResultIsOneOrTwoByte",
          "parameters": [
            "State a",
            "State b"
          ],
          "return_type": "State",
          "logic": "Determines the resulting OneOrTwoByte State after concatenating two strings with known States. Returns kOneByte if both are kOneByte, kTwoByte if either is kTwoByte, and kCantKnow otherwise."
        },
        {
          "name": "TryGetRange",
          "parameters": [
            "Node* node"
          ],
          "return_type": "std::optional<std::pair<int64_t, int64_t>>",
          "logic": "Attempts to determine the numerical range of a given node based on its opcode and inputs. This function recursively analyzes the inputs and returns the min and max possible value."
        },
        {
          "name": "OneOrTwoByte",
          "parameters": [
            "Node* node"
          ],
          "return_type": "State",
          "logic": "Tries to determine whether a given node represents a 1-byte or a 2-byte string. Relies heavily on HeapObjectMatcher and Range analysis."
        }
      ]
    },
    {
      "name": "StringBuilderOptimizer",
      "properties": [
        "jsgraph_",
        "schedule_",
        "temp_zone_",
        "broker_",
        "blocks_to_trimmings_map_",
        "status_",
        "string_builders_",
        "loop_headers_"
      ],
      "methods": [
        {
          "name": "BlockShouldFinalizeStringBuilders",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "bool",
          "logic": "Checks if a given basic block should finalize any string builders."
        },
        {
          "name": "GetStringBuildersToFinalize",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "ZoneVector<Node*>",
          "logic": "Retrieves the list of string builders that need to be finalized in a given basic block."
        },
        {
          "name": "GetOneOrTwoByte",
          "parameters": [
            "Node* node"
          ],
          "return_type": "OneOrTwoByteAnalysis::State",
          "logic": "Retrieves the OneOrTwoByte state for a given node within a string builder."
        },
        {
          "name": "IsStringBuilderEnd",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given node marks the end of a string builder chain."
        },
        {
          "name": "IsNonLoopPhiStringBuilderEnd",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given node is a StringBuilder end that is NOT a loop phi."
        },
        {
          "name": "IsStringBuilderConcatInput",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given node is a concat input inside a string builder."
        },
        {
          "name": "ConcatIsInStringBuilder",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given concatenation node is part of a string builder."
        },
        {
          "name": "GetStringBuilderIdForConcat",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "Retrieves the ID of the string builder that a given concatenation node belongs to."
        },
        {
          "name": "IsFirstConcatInStringBuilder",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given concatenation node is the first one in a string builder."
        },
        {
          "name": "ReplaceConcatInputIfNeeded",
          "parameters": [
            "Node* node",
            "int input_idx"
          ],
          "return_type": "void",
          "logic": "Replaces a concatenation input if it has multiple uses, ensuring it can be optimized safely."
        },
        {
          "name": "GetPhiPredecessorsCommonId",
          "parameters": [
            "Node* node"
          ],
          "return_type": "int",
          "logic": "If all predecessors of a Phi node are part of the same string builder, returns the ID. Otherwise, returns kInvalidId."
        },
        {
          "name": "CheckNodeUses",
          "parameters": [
            "Node* node",
            "Node* string_builder_child",
            "Status status"
          ],
          "return_type": "bool",
          "logic": "Checks if the uses of a node within a string builder are valid, ensuring no modifications outside the builder affect the internal state."
        },
        {
          "name": "CheckPreviousNodeUses",
          "parameters": [
            "Node* child",
            "Status status",
            "int input_if_loop_phi"
          ],
          "return_type": "bool",
          "logic": "Checks that the uses of the previous node(s) of `child` are still valid given that `child` is now part of a string builder."
        },
        {
          "name": "VisitNode",
          "parameters": [
            "Node* node",
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Visits a node in the graph and determines if it's part of a string builder, updating its status accordingly."
        },
        {
          "name": "FinalizeStringBuilders",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes the detected string builders, confirming their validity and preparing them for further optimization."
        },
        {
          "name": "VisitGraph",
          "parameters": [],
          "return_type": "void",
          "logic": "Traverses the graph, identifying potential string builders and updating node statuses."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts the string builder optimization process by visiting the graph."
        },
        {
          "name": "StringBuilderOptimizer",
          "parameters": [
            "JSGraph* jsgraph",
            "Schedule* schedule",
            "Zone* temp_zone",
            "JSHeapBroker* broker"
          ],
          "return_type": "N/A",
          "logic": "Constructor for the StringBuilderOptimizer class."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsConcat",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if a given node is a kStringConcat or kNewConsString node."
    },
    {
      "name": "IsLiteralString",
      "parameters": [
        "Node* node",
        "JSHeapBroker* broker"
      ],
      "return_type": "bool",
      "logic": "Checks if a given node represents a literal string."
    },
    {
      "name": "HasConcatOrPhiUse",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if a node has at least one concatenation or phi in its uses."
    },
    {
      "name": "ComesBeforeInBlock",
      "parameters": [
        "Node* first",
        "Node* second",
        "BasicBlock* block"
      ],
      "return_type": "bool",
      "logic": "Determines if one node comes before another within a basic block."
    },
    {
      "name": "ComputePredecessors",
      "parameters": [
        "BasicBlock* start",
        "BasicBlock* end",
        "base::SmallVector<BasicBlock*, kMaxPredecessors>* dst"
      ],
      "return_type": "bool",
      "logic": "Computes up to a maximum number of predecessors for a given block."
    },
    {
      "name": "OpcodeIsAllowed",
      "parameters": [
        "IrOpcode::Value op"
      ],
      "return_type": "bool",
      "logic": "Checks whether a specific opcode is considered 'allowed' for uses that may influence or invalidate the string builder's in-place operations."
    },
    {
      "name": "ValidControlFlowForStringBuilder",
      "parameters": [
        "BasicBlock* sb_child_block",
        "BasicBlock* other_child_block",
        "BasicBlock* previous_block",
        "ZoneVector<BasicBlock*> loop_headers"
      ],
      "return_type": "bool",
      "logic": "Ensures the control flow is valid for string builder operations, preventing invalid data from being used due to loop mutations."
    },
    {
      "name": "IsClosebyDominator",
      "parameters": [
        "BasicBlock* maybe_dominator",
        "BasicBlock* maybe_dominee"
      ],
      "return_type": "bool",
      "logic": "Determines if a basic block dominates another within a limited range of dominance depth."
    },
    {
      "name": "IsPhiContainingGivenInputs",
      "parameters": [
        "Node* node",
        "Node* input1",
        "Node* input2",
        "Schedule* schedule"
      ],
      "return_type": "bool",
      "logic": "Checks if a Phi node contains two specified input nodes."
    },
    {
      "name": "PhiInputsAreConcatsOrPhi",
      "parameters": [
        "Node* phi"
      ],
      "return_type": "bool",
      "logic": "Quickly eliminates Phi nodes that cannot be part of a String Builder. Checks if a Phi has concat/NewConsString/Phi inputs."
    }
  ]
}