{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/frame-states.h",
  "imports": [
    "src/builtins/builtins.h",
    "src/compiler/node.h",
    "src/handles/handles.h",
    "src/objects/shared-function-info.h",
    "src/utils/utils.h"
  ],
  "classes": [
    {
      "name": "OutputFrameStateCombine",
      "properties": [
        "parameter_"
      ],
      "methods": [
        {
          "name": "Ignore",
          "parameters": [],
          "return_type": "OutputFrameStateCombine",
          "logic": "Creates an OutputFrameStateCombine that indicates the output should be ignored by setting the parameter to kInvalidIndex."
        },
        {
          "name": "PokeAt",
          "parameters": [
            "size_t index"
          ],
          "return_type": "OutputFrameStateCombine",
          "logic": "Creates an OutputFrameStateCombine that indicates the output should be poked at a specific index in the FrameState."
        },
        {
          "name": "GetOffsetToPokeAt",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the index to poke at in the FrameState. Asserts that the index is valid."
        },
        {
          "name": "IsOutputIgnored",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the output is ignored (parameter_ is kInvalidIndex)."
        },
        {
          "name": "ConsumedOutputCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns 0 if output is ignored, 1 otherwise. Indicates how many outputs are consumed."
        },
        {
          "name": "operator==",
          "parameters": [
            "OutputFrameStateCombine const& other"
          ],
          "return_type": "bool",
          "logic": "Compares two OutputFrameStateCombine objects for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "OutputFrameStateCombine const& other"
          ],
          "return_type": "bool",
          "logic": "Compares two OutputFrameStateCombine objects for inequality."
        }
      ]
    },
    {
      "name": "FrameStateFunctionInfo",
      "properties": [
        "type_",
        "parameter_count_",
        "max_arguments_",
        "local_count_",
        "wasm_liftoff_frame_size_",
        "wasm_function_index_",
        "shared_info_",
        "bytecode_array_"
      ],
      "methods": [
        {
          "name": "FrameStateFunctionInfo",
          "parameters": [
            "FrameStateType type",
            "uint16_t parameter_count",
            "uint16_t max_arguments",
            "int local_count",
            "IndirectHandle<SharedFunctionInfo> shared_info",
            "MaybeIndirectHandle<BytecodeArray> bytecode_array",
            "uint32_t wasm_liftoff_frame_size",
            "uint32_t wasm_function_index"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the FrameStateFunctionInfo with the provided parameters."
        },
        {
          "name": "local_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of local variables."
        },
        {
          "name": "parameter_count",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Returns the number of parameters."
        },
        {
          "name": "max_arguments",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Returns the maximum number of arguments."
        },
        {
          "name": "shared_info",
          "parameters": [],
          "return_type": "IndirectHandle<SharedFunctionInfo>",
          "logic": "Returns the SharedFunctionInfo handle."
        },
        {
          "name": "bytecode_array",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<BytecodeArray>",
          "logic": "Returns the BytecodeArray handle."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "FrameStateType",
          "logic": "Returns the FrameStateType."
        },
        {
          "name": "wasm_liftoff_frame_size",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the WebAssembly liftoff frame size."
        },
        {
          "name": "wasm_function_index",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the WebAssembly function index."
        },
        {
          "name": "IsJSFunctionType",
          "parameters": [
            "FrameStateType type"
          ],
          "return_type": "bool",
          "logic": "Checks if the FrameStateType represents a JS function type."
        }
      ]
    },
    {
      "name": "JSToWasmFrameStateFunctionInfo",
      "properties": [
        "signature_"
      ],
      "methods": [
        {
          "name": "JSToWasmFrameStateFunctionInfo",
          "parameters": [
            "FrameStateType type",
            "uint16_t parameter_count",
            "int local_count",
            "IndirectHandle<SharedFunctionInfo> shared_info",
            "const wasm::CanonicalSig* signature"
          ],
          "return_type": "void",
          "logic": "Constructor for JSToWasmFrameStateFunctionInfo, inheriting from FrameStateFunctionInfo and adding a wasm::CanonicalSig."
        },
        {
          "name": "signature",
          "parameters": [],
          "return_type": "const wasm::CanonicalSig*",
          "logic": "Returns the wasm::CanonicalSig associated with this frame state."
        }
      ]
    },
    {
      "name": "FrameStateInfo",
      "properties": [
        "bailout_id_",
        "frame_state_combine_",
        "info_"
      ],
      "methods": [
        {
          "name": "FrameStateInfo",
          "parameters": [
            "BytecodeOffset bailout_id",
            "OutputFrameStateCombine state_combine",
            "const FrameStateFunctionInfo* info"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the FrameStateInfo with the provided parameters."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "FrameStateType",
          "logic": "Returns the FrameStateType.  Defaults to kUnoptimizedFunction if info_ is null."
        },
        {
          "name": "bailout_id",
          "parameters": [],
          "return_type": "BytecodeOffset",
          "logic": "Returns the bailout ID."
        },
        {
          "name": "state_combine",
          "parameters": [],
          "return_type": "OutputFrameStateCombine",
          "logic": "Returns the OutputFrameStateCombine."
        },
        {
          "name": "shared_info",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<SharedFunctionInfo>",
          "logic": "Returns the SharedFunctionInfo handle. Returns empty handle if info_ is null."
        },
        {
          "name": "bytecode_array",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<BytecodeArray>",
          "logic": "Returns the BytecodeArray handle. Returns empty handle if info_ is null."
        },
        {
          "name": "parameter_count",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Returns the parameter count. Returns 0 if info_ is null."
        },
        {
          "name": "max_arguments",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Returns the maximum number of arguments. Returns 0 if info_ is null."
        },
        {
          "name": "local_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the local count. Returns 0 if info_ is null."
        },
        {
          "name": "stack_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the stack count, which is 1 for kUnoptimizedFunction, 0 otherwise."
        },
        {
          "name": "function_info",
          "parameters": [],
          "return_type": "const FrameStateFunctionInfo*",
          "logic": "Returns the FrameStateFunctionInfo pointer."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator==",
      "parameters": [
        "FrameStateFunctionInfo const&",
        "FrameStateFunctionInfo const&"
      ],
      "return_type": "bool",
      "logic": "Compares two FrameStateFunctionInfo objects for equality."
    },
    {
      "name": "operator==",
      "parameters": [
        "FrameStateInfo const&",
        "FrameStateInfo const&"
      ],
      "return_type": "bool",
      "logic": "Compares two FrameStateInfo objects for equality."
    },
    {
      "name": "operator!=",
      "parameters": [
        "FrameStateInfo const&",
        "FrameStateInfo const&"
      ],
      "return_type": "bool",
      "logic": "Compares two FrameStateInfo objects for inequality."
    },
    {
      "name": "hash_value",
      "parameters": [
        "FrameStateInfo const&"
      ],
      "return_type": "size_t",
      "logic": "Computes the hash value for a FrameStateInfo object."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "FrameStateInfo const&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for FrameStateInfo objects, allowing them to be printed to a stream."
    },
    {
      "name": "CreateStubBuiltinContinuationFrameState",
      "parameters": [
        "JSGraph* graph",
        "Builtin name",
        "Node* context",
        "Node* const* parameters",
        "int parameter_count",
        "Node* outer_frame_state",
        "ContinuationFrameStateMode mode",
        "const wasm::CanonicalSig* signature"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState representing a continuation to a stub builtin function."
    },
    {
      "name": "CreateJSWasmCallBuiltinContinuationFrameState",
      "parameters": [
        "JSGraph* jsgraph",
        "Node* context",
        "Node* outer_frame_state",
        "const wasm::CanonicalSig* signature"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState representing a continuation to a JS to Wasm call."
    },
    {
      "name": "CreateJavaScriptBuiltinContinuationFrameState",
      "parameters": [
        "JSGraph* graph",
        "SharedFunctionInfoRef shared",
        "Builtin name",
        "Node* target",
        "Node* context",
        "Node* const* stack_parameters",
        "int stack_parameter_count",
        "Node* outer_frame_state",
        "ContinuationFrameStateMode mode"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState representing a continuation to a JavaScript builtin function."
    },
    {
      "name": "CreateGenericLazyDeoptContinuationFrameState",
      "parameters": [
        "JSGraph* graph",
        "SharedFunctionInfoRef shared",
        "Node* target",
        "Node* context",
        "Node* receiver",
        "Node* outer_frame_state"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState for a generic lazy deoptimization continuation."
    },
    {
      "name": "CreateInlinedApiFunctionFrameState",
      "parameters": [
        "JSGraph* graph",
        "SharedFunctionInfoRef shared",
        "Node* target",
        "Node* context",
        "Node* receiver",
        "Node* outer_frame_state"
      ],
      "return_type": "Node*",
      "logic": "Creates a FrameState for an inlined API function, or returns outer_frame_state if stack trace frames are disabled."
    },
    {
      "name": "CloneFrameState",
      "parameters": [
        "JSGraph* jsgraph",
        "FrameState frame_state",
        "OutputFrameStateCombine changed_state_combine"
      ],
      "return_type": "FrameState",
      "logic": "Creates a new FrameState by cloning an existing FrameState and modifying its OutputFrameStateCombine."
    }
  ]
}