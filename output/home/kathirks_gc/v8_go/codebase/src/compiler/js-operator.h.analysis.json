{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-operator.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/js-operator.h\",\n  \"imports\": [\n    \"src/base/compiler-specific.h\",\n    \"src/codegen/tnode.h\",\n    \"src/compiler/common-operator.h\",\n    \"src/compiler/feedback-source.h\",\n    \"src/compiler/globals.h\",\n    \"src/compiler/node-properties.h\",\n    \"src/compiler/node.h\",\n    \"src/compiler/opcodes.h\",\n    \"src/compiler/operator-properties.h\",\n    \"src/objects/feedback-cell.h\",\n    \"src/objects/oddball.h\",\n    \"src/runtime/runtime.h\",\n    \"src/wasm/canonical-types.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"JSOperator\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"IsUnaryWithFeedback\",\n          \"parameters\": [\n            \"Operator::Opcode opcode\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given opcode corresponds to a JavaScript unary operator that uses feedback.\"\n        },\n        {\n          \"name\": \"IsBinaryWithFeedback\",\n          \"parameters\": [\n            \"Operator::Opcode opcode\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given opcode corresponds to a JavaScript binary operator that uses feedback.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallFrequency\",\n      \"properties\": [\n        \"value_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallFrequency\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Default constructor, initializes value_ to NaN, indicating an unknown frequency.\"\n        },\n        {\n          \"name\": \"CallFrequency\",\n          \"parameters\": [\n            \"float value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes value_ to the given float value.\"\n        },\n        {\n          \"name\": \"IsKnown\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the call frequency is known (i.e., not NaN).\"\n        },\n        {\n          \"name\": \"IsUnknown\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the call frequency is unknown (i.e., NaN).\"\n        },\n        {\n          \"name\": \"value\",\n          \"parameters\": [],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the stored call frequency.  Requires the frequency to be known.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"CallFrequency const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CallFrequency objects for equality using bit_cast for NaN comparison.\"\n        },\n        {\n          \"name\": \"operator!=\",\n          \"parameters\": [\n            \"CallFrequency const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CallFrequency objects for inequality.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConstructForwardVarargsParameters\",\n      \"properties\": [\n        \"bit_field_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ConstructForwardVarargsParameters\",\n          \"parameters\": [\n            \"size_t arity\",\n            \"uint32_t start_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, encodes arity and start_index into a bitfield.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Decodes and returns the arity from the bitfield.\"\n        },\n        {\n          \"name\": \"start_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Decodes and returns the start_index from the bitfield.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"ConstructForwardVarargsParameters const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two ConstructForwardVarargsParameters objects for equality based on their bitfields.\"\n        },\n        {\n          \"name\": \"operator!=\",\n          \"parameters\": [\n            \"ConstructForwardVarargsParameters const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two ConstructForwardVarargsParameters objects for inequality.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConstructParameters\",\n      \"properties\": [\n        \"arity_\",\n        \"frequency_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ConstructParameters\",\n          \"parameters\": [\n            \"uint32_t arity\",\n            \"CallFrequency const& frequency\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the arity, frequency, and feedback for a constructor call.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the arity of the construct call, including implicit parameters.\"\n        },\n        {\n          \"name\": \"arity_without_implicit_args\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the arity of the construct call, excluding implicit parameters (target, new target, and feedback).\"\n        },\n        {\n          \"name\": \"frequency\",\n          \"parameters\": [],\n          \"return_type\": \"CallFrequency const&\",\n          \"logic\": \"Returns the call frequency.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallForwardVarargsParameters\",\n      \"properties\": [\n        \"bit_field_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallForwardVarargsParameters\",\n          \"parameters\": [\n            \"size_t arity\",\n            \"uint32_t start_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, encodes arity and start_index into a bitfield.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Decodes and returns the arity from the bitfield.\"\n        },\n        {\n          \"name\": \"start_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Decodes and returns the start_index from the bitfield.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"CallForwardVarargsParameters const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CallForwardVarargsParameters objects for equality based on their bitfields.\"\n        },\n        {\n          \"name\": \"operator!=\",\n          \"parameters\": [\n            \"CallForwardVarargsParameters const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CallForwardVarargsParameters objects for inequality.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallParameters\",\n      \"properties\": [\n        \"bit_field_\",\n        \"frequency_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallParameters\",\n          \"parameters\": [\n            \"size_t arity\",\n            \"CallFrequency const& frequency\",\n            \"FeedbackSource const& feedback\",\n            \"ConvertReceiverMode convert_mode\",\n            \"SpeculationMode speculation_mode\",\n            \"CallFeedbackRelation feedback_relation\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes arity, frequency, feedback, convert_mode, speculation_mode and feedback_relation for a call.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the arity of the call, including implicit parameters.\"\n        },\n        {\n          \"name\": \"arity_without_implicit_args\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the arity of the call, excluding implicit parameters (target, receiver, and feedback).\"\n        },\n        {\n          \"name\": \"frequency\",\n          \"parameters\": [],\n          \"return_type\": \"CallFrequency const&\",\n          \"logic\": \"Returns the call frequency.\"\n        },\n        {\n          \"name\": \"convert_mode\",\n          \"parameters\": [],\n          \"return_type\": \"ConvertReceiverMode\",\n          \"logic\": \"Returns the convert receiver mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"speculation_mode\",\n          \"parameters\": [],\n          \"return_type\": \"SpeculationMode\",\n          \"logic\": \"Returns the speculation mode.\"\n        },\n        {\n          \"name\": \"feedback_relation\",\n          \"parameters\": [],\n          \"return_type\": \"CallFeedbackRelation\",\n          \"logic\": \"Returns the feedback relation.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"CallParameters const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CallParameters objects for equality.\"\n        },\n        {\n          \"name\": \"operator!=\",\n          \"parameters\": [\n            \"CallParameters const& that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CallParameters objects for inequality.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallRuntimeParameters\",\n      \"properties\": [\n        \"id_\",\n        \"arity_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallRuntimeParameters\",\n          \"parameters\": [\n            \"Runtime::FunctionId id\",\n            \"size_t arity\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the runtime function ID and arity for a runtime call.\"\n        },\n        {\n          \"name\": \"id\",\n          \"parameters\": [],\n          \"return_type\": \"Runtime::FunctionId\",\n          \"logic\": \"Returns the runtime function ID.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the arity of the runtime call.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ContextAccess\",\n      \"properties\": [\n        \"immutable_\",\n        \"depth_\",\n        \"index_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ContextAccess\",\n          \"parameters\": [\n            \"size_t depth\",\n            \"size_t index\",\n            \"bool immutable\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the depth, index, and immutability flag for a context access.\"\n        },\n        {\n          \"name\": \"depth\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the context depth.\"\n        },\n        {\n          \"name\": \"index\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the context index.\"\n        },\n        {\n          \"name\": \"immutable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns the immutability flag.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateFunctionContextParameters\",\n      \"properties\": [\n        \"scope_info_\",\n        \"slot_count_\",\n        \"scope_type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateFunctionContextParameters\",\n          \"parameters\": [\n            \"ScopeInfoRef scope_info\",\n            \"int slot_count\",\n            \"ScopeType scope_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the scope info, slot count, and scope type for a new function context.\"\n        },\n        {\n          \"name\": \"scope_info\",\n          \"parameters\": [],\n          \"return_type\": \"ScopeInfoRef\",\n          \"logic\": \"Returns the scope info.\"\n        },\n        {\n          \"name\": \"slot_count\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the slot count.\"\n        },\n        {\n          \"name\": \"scope_type\",\n          \"parameters\": [],\n          \"return_type\": \"ScopeType\",\n          \"logic\": \"Returns the scope type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DefineNamedOwnPropertyParameters\",\n      \"properties\": [\n        \"name_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"DefineNamedOwnPropertyParameters\",\n          \"parameters\": [\n            \"NameRef name\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the name and feedback source for defining a named own property.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"NameRef\",\n          \"logic\": \"Returns the name.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FeedbackParameter\",\n      \"properties\": [\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FeedbackParameter\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the feedback source for a feedback parameter.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NamedAccess\",\n      \"properties\": [\n        \"name_\",\n        \"feedback_\",\n        \"language_mode_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NamedAccess\",\n          \"parameters\": [\n            \"LanguageMode language_mode\",\n            \"NameRef name\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the language mode, name and feedback source for a named access.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"NameRef\",\n          \"logic\": \"Returns the name.\"\n        },\n        {\n          \"name\": \"language_mode\",\n          \"parameters\": [],\n          \"return_type\": \"LanguageMode\",\n          \"logic\": \"Returns the language mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LoadGlobalParameters\",\n      \"properties\": [\n        \"name_\",\n        \"feedback_\",\n        \"typeof_mode_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LoadGlobalParameters\",\n          \"parameters\": [\n            \"NameRef name\",\n            \"const FeedbackSource& feedback\",\n            \"TypeofMode typeof_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the name, feedback, and typeof mode for a global load.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"NameRef\",\n          \"logic\": \"Returns the name.\"\n        },\n        {\n          \"name\": \"typeof_mode\",\n          \"parameters\": [],\n          \"return_type\": \"TypeofMode\",\n          \"logic\": \"Returns the typeof mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StoreGlobalParameters\",\n      \"properties\": [\n        \"language_mode_\",\n        \"name_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StoreGlobalParameters\",\n          \"parameters\": [\n            \"LanguageMode language_mode\",\n            \"const FeedbackSource& feedback\",\n            \"NameRef name\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the language mode, feedback, and name for a global store.\"\n        },\n        {\n          \"name\": \"language_mode\",\n          \"parameters\": [],\n          \"return_type\": \"LanguageMode\",\n          \"logic\": \"Returns the language mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"NameRef\",\n          \"logic\": \"Returns the name.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PropertyAccess\",\n      \"properties\": [\n        \"feedback_\",\n        \"language_mode_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PropertyAccess\",\n          \"parameters\": [\n            \"LanguageMode language_mode\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the language mode and feedback source for a property access.\"\n        },\n        {\n          \"name\": \"language_mode\",\n          \"parameters\": [],\n          \"return_type\": \"LanguageMode\",\n          \"logic\": \"Returns the language mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateArrayParameters\",\n      \"properties\": [\n        \"arity_\",\n        \"site_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateArrayParameters\",\n          \"parameters\": [\n            \"size_t arity\",\n            \"OptionalAllocationSiteRef site\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the arity and allocation site for creating an array.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the arity.\"\n        },\n        {\n          \"name\": \"site\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalAllocationSiteRef\",\n          \"logic\": \"Returns the allocation site.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateArrayIteratorParameters\",\n      \"properties\": [\n        \"kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateArrayIteratorParameters\",\n          \"parameters\": [\n            \"IterationKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the iteration kind for creating an array iterator.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"IterationKind\",\n          \"logic\": \"Returns the iteration kind.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateCollectionIteratorParameters\",\n      \"properties\": [\n        \"collection_kind_\",\n        \"iteration_kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateCollectionIteratorParameters\",\n          \"parameters\": [\n            \"CollectionKind collection_kind\",\n            \"IterationKind iteration_kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the collection and iteration kind for creating a collection iterator.\"\n        },\n        {\n          \"name\": \"collection_kind\",\n          \"parameters\": [],\n          \"return_type\": \"CollectionKind\",\n          \"logic\": \"Returns the collection kind.\"\n        },\n        {\n          \"name\": \"iteration_kind\",\n          \"parameters\": [],\n          \"return_type\": \"IterationKind\",\n          \"logic\": \"Returns the iteration kind.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateBoundFunctionParameters\",\n      \"properties\": [\n        \"arity_\",\n        \"map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateBoundFunctionParameters\",\n          \"parameters\": [\n            \"size_t arity\",\n            \"MapRef map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the arity and map for creating a bound function.\"\n        },\n        {\n          \"name\": \"arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the arity.\"\n        },\n        {\n          \"name\": \"map\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the map.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateClosureParameters\",\n      \"properties\": [\n        \"shared_info_\",\n        \"code_\",\n        \"allocation_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateClosureParameters\",\n          \"parameters\": [\n            \"SharedFunctionInfoRef shared_info\",\n            \"CodeRef code\",\n            \"AllocationType allocation\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the shared function info, code, and allocation type for creating a closure.\"\n        },\n        {\n          \"name\": \"shared_info\",\n          \"parameters\": [],\n          \"return_type\": \"SharedFunctionInfoRef\",\n          \"logic\": \"Returns the shared function info.\"\n        },\n        {\n          \"name\": \"code\",\n          \"parameters\": [],\n          \"return_type\": \"CodeRef\",\n          \"logic\": \"Returns the code.\"\n        },\n        {\n          \"name\": \"allocation\",\n          \"parameters\": [],\n          \"return_type\": \"AllocationType\",\n          \"logic\": \"Returns the allocation type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GetTemplateObjectParameters\",\n      \"properties\": [\n        \"description_\",\n        \"shared_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetTemplateObjectParameters\",\n          \"parameters\": [\n            \"TemplateObjectDescriptionRef description\",\n            \"SharedFunctionInfoRef shared\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the description, shared function info, and feedback source for retrieving a template object.\"\n        },\n        {\n          \"name\": \"description\",\n          \"parameters\": [],\n          \"return_type\": \"TemplateObjectDescriptionRef\",\n          \"logic\": \"Returns the description.\"\n        },\n        {\n          \"name\": \"shared\",\n          \"parameters\": [],\n          \"return_type\": \"SharedFunctionInfoRef\",\n          \"logic\": \"Returns the shared function info.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CreateLiteralParameters\",\n      \"properties\": [\n        \"constant_\",\n        \"feedback_\",\n        \"length_\",\n        \"flags_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CreateLiteralParameters\",\n          \"parameters\": [\n            \"HeapObjectRef constant\",\n            \"FeedbackSource const& feedback\",\n            \"int length\",\n            \"int flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the constant, feedback source, length, and flags for creating a literal.\"\n        },\n        {\n          \"name\": \"constant\",\n          \"parameters\": [],\n          \"return_type\": \"HeapObjectRef\",\n          \"logic\": \"Returns the constant.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the length.\"\n        },\n        {\n          \"name\": \"flags\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the flags.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CloneObjectParameters\",\n      \"properties\": [\n        \"feedback_\",\n        \"flags_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CloneObjectParameters\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\",\n            \"int flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the feedback source and flags for cloning an object.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"flags\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the flags.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GetIteratorParameters\",\n      \"properties\": [\n        \"load_feedback_\",\n        \"call_feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetIteratorParameters\",\n          \"parameters\": [\n            \"const FeedbackSource& load_feedback\",\n            \"const FeedbackSource& call_feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the load feedback and call feedback for retrieving an iterator.\"\n        },\n        {\n          \"name\": \"loadFeedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the load feedback.\"\n        },\n        {\n          \"name\": \"callFeedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the call feedback.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ForInParameters\",\n      \"properties\": [\n        \"feedback_\",\n        \"mode_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ForInParameters\",\n          \"parameters\": [\n            \"const FeedbackSource& feedback\",\n            \"ForInMode mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the feedback and for-in mode for performing a for-in enumeration.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the feedback.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"ForInMode\",\n          \"logic\": \"Returns the for-in mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JSWasmCallParameters\",\n      \"properties\": [\n        \"module_\",\n        \"signature_\",\n        \"function_index_\",\n        \"shared_fct_info_\",\n        \"native_module_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"JSWasmCallParameters\",\n          \"parameters\": [\n            \"const wasm::WasmModule* module\",\n            \"const wasm::CanonicalSig* signature\",\n            \"int function_index\",\n            \"SharedFunctionInfoRef shared_fct_info\",\n            \"wasm::NativeModule* native_module\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the parameters for a WebAssembly function call.\"\n        },\n        {\n          \"name\": \"module\",\n          \"parameters\": [],\n          \"return_type\": \"const wasm::WasmModule*\",\n          \"logic\": \"Returns the wasm module.\"\n        },\n        {\n          \"name\": \"signature\",\n          \"parameters\": [],\n          \"return_type\": \"const wasm::CanonicalSig*\",\n          \"logic\": \"Returns the wasm signature.\"\n        },\n        {\n          \"name\": \"function_index\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the wasm function index.\"\n        },\n        {\n          \"name\": \"shared_fct_info\",\n          \"parameters\": [],\n          \"return_type\": \"SharedFunctionInfoRef\",\n          \"logic\": \"Returns the shared function info.\"\n        },\n        {\n          \"name\": \"native_module\",\n          \"parameters\": [],\n          \"return_type\": \"wasm::NativeModule*\",\n          \"logic\": \"Returns the native module.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"input_count\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns input count of the WASM function.\"\n        },\n        {\n          \"name\": \"arity_without_implicit_args\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the arity of the WASM function excluding implicit args.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JSOperatorBuilder\",\n      \"properties\": [\n        \"cache_\",\n        \"zone_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"JSOperatorBuilder\",\n          \"parameters\": [\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor, initializes the zone and operator cache.\"\n        },\n        {\n          \"name\": \"Equal\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'Equal' operator.\"\n        },\n        {\n          \"name\": \"StrictEqual\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'StrictEqual' operator.\"\n        },\n        {\n          \"name\": \"LessThan\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'LessThan' operator.\"\n        },\n        {\n          \"name\": \"GreaterThan\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'GreaterThan' operator.\"\n        },\n        {\n          \"name\": \"LessThanOrEqual\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'LessThanOrEqual' operator.\"\n        },\n        {\n          \"name\": \"GreaterThanOrEqual\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'GreaterThanOrEqual' operator.\"\n        },\n        {\n          \"name\": \"BitwiseOr\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'BitwiseOr' operator.\"\n        },\n        {\n          \"name\": \"BitwiseXor\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'BitwiseXor' operator.\"\n        },\n        {\n          \"name\": \"BitwiseAnd\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'BitwiseAnd' operator.\"\n        },\n        {\n          \"name\": \"ShiftLeft\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'ShiftLeft' operator.\"\n        },\n        {\n          \"name\": \"ShiftRight\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'ShiftRight' operator.\"\n        },\n        {\n          \"name\": \"ShiftRightLogical\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the 'ShiftRightLogical' operator.\"\n        },\n        {\n          \"name\": \"Add\",\n          \"parameters\": [\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_"
}