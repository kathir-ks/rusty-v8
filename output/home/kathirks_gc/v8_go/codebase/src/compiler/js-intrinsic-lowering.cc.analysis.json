{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-intrinsic-lowering.cc",
  "imports": [
    "src/compiler/js-intrinsic-lowering.h",
    "stack",
    "src/codegen/callable.h",
    "src/compiler/access-builder.h",
    "src/compiler/js-graph.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/linkage.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-properties.h",
    "src/objects/js-generator.h",
    "src/objects/objects-inl.h"
  ],
  "classes": [
    {
      "name": "JSIntrinsicLowering",
      "properties": [
        "jsgraph_",
        "broker_"
      ],
      "methods": [
        {
          "name": "JSIntrinsicLowering",
          "parameters": [
            "Editor* editor",
            "JSGraph* jsgraph",
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSIntrinsicLowering class. Initializes the AdvancedReducer, jsgraph_, and broker_."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "This is the main reduction function. It checks if a node is a JSCallRuntime node, and if so, determines the runtime function being called. It then attempts to lower the node based on the runtime function.  It prioritizes specific runtime functions and then inlines the intrinsic functions based on their ids."
        },
        {
          "name": "ReduceCopyDataProperties",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in CopyDataProperties."
        },
        {
          "name": "ReduceCopyDataPropertiesWithExcludedPropertiesOnStack",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in CopyDataPropertiesWithExcludedProperties. It calculates the input count, adjusts the call descriptor, and inserts the necessary inputs (callable code and input count) into the node. Then, it changes the operator of the node to a Call operator."
        },
        {
          "name": "ReduceCreateIterResultObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the javascript()->CreateIterResultObject operator to create an iterator result object."
        },
        {
          "name": "ReduceDeoptimizeNow",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a deoptimization node and a dead node. It creates a Deoptimize node and merges the control flow to the end of the graph. Then the node is marked as dead."
        },
        {
          "name": "ReduceCreateJSGeneratorObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the javascript()->CreateGeneratorObject operator to create a JSGeneratorObject."
        },
        {
          "name": "ReduceGeneratorClose",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a store field to set the generator state to closed."
        },
        {
          "name": "ReduceAsyncFunctionAwait",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in AsyncFunctionAwait."
        },
        {
          "name": "ReduceAsyncFunctionEnter",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to javascript()->AsyncFunctionEnter operator."
        },
        {
          "name": "ReduceAsyncFunctionReject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to javascript()->AsyncFunctionReject operator."
        },
        {
          "name": "ReduceAsyncFunctionResolve",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to javascript()->AsyncFunctionResolve operator."
        },
        {
          "name": "ReduceAsyncGeneratorAwait",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in AsyncGeneratorAwait."
        },
        {
          "name": "ReduceAsyncGeneratorReject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in AsyncGeneratorReject."
        },
        {
          "name": "ReduceAsyncGeneratorResolve",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in AsyncGeneratorResolve."
        },
        {
          "name": "ReduceAsyncGeneratorYieldWithAwait",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in AsyncGeneratorYieldWithAwait."
        },
        {
          "name": "ReduceGeneratorGetResumeMode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a load field to retrieve the resume mode of the generator."
        },
        {
          "name": "ReduceIsInstanceType",
          "parameters": [
            "Node* node",
            "InstanceType instance_type"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a node that checks if a value's instance type is a specific type. Implements a branching logic checking if the value is Smi and if not loads and compares the instance type with the given one."
        },
        {
          "name": "ReduceIsJSReceiver",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a ObjectIsReceiver node from the simplified operator."
        },
        {
          "name": "ReduceTurbofanStaticAssert",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Handles a static assert. If always_turbofan is enabled, it relaxes the effects and controls of the node. Otherwise, it creates a StaticAssert node."
        },
        {
          "name": "ReduceVerifyType",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a VerifyType node from the simplified operator."
        },
        {
          "name": "ReduceCheckTurboshaftTypeOf",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a CheckTurboshaftTypeOf from the simplified operator, conditionally based on turboshaft flag. If turboshaft is enabled a check node is created, otherwise node is replaced with input and RelaxEffectsAndControls is called."
        },
        {
          "name": "ReduceIsBeingInterpreted",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with the FalseConstant node."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "const Operator* op"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to replace the operator of a node and relax its effects and controls. Removes non-value inputs."
        },
        {
          "name": "ReduceToLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to javascript()->ToLength()."
        },
        {
          "name": "ReduceToObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to javascript()->ToObject()."
        },
        {
          "name": "ReduceToString",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to javascript()->ToString(). If the input is already a string, no change happens."
        },
        {
          "name": "ReduceCall",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a javascript()->Call node. Inserts a feedback vector input."
        },
        {
          "name": "ReduceIncBlockCounter",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a call to the built-in IncBlockCounter."
        },
        {
          "name": "ReduceGetImportMetaObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the node with a javascript()->GetImportMeta() node."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "const Operator* op",
            "Node* a",
            "Node* b"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to change a node's operator and inputs. Takes two value input arguments."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "const Operator* op",
            "Node* a",
            "Node* b",
            "Node* c"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to change a node's operator and inputs. Takes three value input arguments."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "const Operator* op",
            "Node* a",
            "Node* b",
            "Node* c",
            "Node* d"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to change a node's operator and inputs. Takes four value input arguments."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "Callable const& callable",
            "int stack_parameter_count",
            "enum FrameStateFlag frame_state_flag"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to replace a node with a call to a given Callable."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the underlying TFGraph."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder."
        },
        {
          "name": "javascript",
          "parameters": [],
          "return_type": "JSOperatorBuilder*",
          "logic": "Returns the JSOperatorBuilder."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder."
        }
      ]
    }
  ],
  "functions": []
}