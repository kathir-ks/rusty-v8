{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-compiler.cc",
  "imports": [
    "src/compiler/wasm-compiler.h",
    "memory",
    "optional",
    "src/base/small-vector.h",
    "src/base/vector.h",
    "src/codegen/assembler.h",
    "src/codegen/compiler.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/machine-type.h",
    "src/codegen/optimized-compilation-info.h",
    "src/compiler/access-builder.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/instruction-selector.h",
    "src/compiler/common-operator.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/diamond.h",
    "src/compiler/fast-api-calls.h",
    "src/compiler/graph-assembler.h",
    "src/compiler/int64-lowering.h",
    "src/compiler/linkage.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-origin-table.h",
    "src/compiler/node-properties.h",
    "src/compiler/pipeline.h",
    "src/compiler/turbofan-graph-visualizer.h",
    "src/compiler/turbofan-graph.h",
    "src/compiler/turboshaft/wasm-turboshaft-compiler.h",
    "src/compiler/wasm-call-descriptors.h",
    "src/compiler/wasm-compiler-definitions.h",
    "src/compiler/wasm-graph-assembler.h",
    "src/compiler/wasm-inlining-into-js.h",
    "src/compiler/write-barrier-kind.h",
    "src/execution/simulator-base.h",
    "src/heap/factory.h",
    "src/logging/counters.h",
    "src/objects/code-kind.h",
    "src/objects/heap-number.h",
    "src/objects/instance-type.h",
    "src/objects/name.h",
    "src/objects/string.h",
    "src/roots/roots.h",
    "src/tracing/trace-event.h",
    "src/trap-handler/trap-handler.h",
    "src/wasm/code-space-access.h",
    "src/wasm/compilation-environment-inl.h",
    "src/wasm/function-compiler.h",
    "src/wasm/jump-table-assembler.h",
    "src/wasm/memory-tracing.h",
    "src/wasm/object-access.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-constants.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-opcodes-inl.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "WasmGraphBuilder",
      "properties": [
        "gasm_",
        "zone_",
        "mcgraph_",
        "env_",
        "enabled_features_",
        "has_simd_",
        "function_sig_",
        "wrapper_sig_",
        "source_position_table_",
        "parameter_mode_",
        "isolate_",
        "null_check_strategy_",
        "parameters_",
        "instance_data_node_",
        "needs_stack_check_",
        "inlining_id_"
      ],
      "methods": [
        {
          "name": "WasmGraphBuilder",
          "parameters": [
            "wasm::CompilationEnv* env",
            "Zone* zone",
            "MachineGraph* mcgraph",
            "const wasm::FunctionSig* sig",
            "compiler::SourcePositionTable* source_position_table",
            "ParameterMode parameter_mode",
            "Isolate* isolate",
            "wasm::WasmEnabledFeatures enabled_features",
            "const wasm::CanonicalSig* wrapper_sig"
          ],
          "return_type": "void",
          "logic": "Constructor for WasmGraphBuilder, initializes members based on provided arguments like compilation environment, zone, machine graph, signature information, parameter mode, and isolate."
        },
        {
          "name": "~WasmGraphBuilder",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for WasmGraphBuilder."
        },
        {
          "name": "TryWasmInlining",
          "parameters": [
            "int fct_index",
            "wasm::NativeModule* native_module",
            "int inlining_id"
          ],
          "return_type": "bool",
          "logic": "Attempts to inline a Wasm function into the current compilation unit. Checks size, imported status, and validates the function body before attempting inlining using WasmIntoJSInliner."
        },
        {
          "name": "Start",
          "parameters": [
            "unsigned params"
          ],
          "return_type": "void",
          "logic": "Initializes the Wasm graph building process, setting up the start node, parameters, and instance data node based on the parameter mode."
        },
        {
          "name": "Param",
          "parameters": [
            "int index",
            "const char* debug_name"
          ],
          "return_type": "Node*",
          "logic": "Returns a parameter node from the graph, creating one if it doesn't exist yet. Used to access function arguments."
        },
        {
          "name": "TerminateThrow",
          "parameters": [
            "Node* effect",
            "Node* control"
          ],
          "return_type": "void",
          "logic": "Terminates graph construction with a throw node, merging the current control flow into the end of the graph."
        },
        {
          "name": "NoContextConstant",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns an integer constant representing no context."
        },
        {
          "name": "BuildLoadIsolateRoot",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns a node that loads the isolate root. Uses either a heap constant or loads the root register depending on the presence of isolate."
        },
        {
          "name": "Int32Constant",
          "parameters": [
            "int32_t value"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 constant node in the graph."
        },
        {
          "name": "UndefinedValue",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Loads and returns the undefined value from the isolate's factory."
        },
        {
          "name": "GetTrapIdForTrap",
          "parameters": [
            "wasm::TrapReason reason"
          ],
          "return_type": "TrapId",
          "logic": "Converts a WebAssembly trap reason to a trap ID."
        },
        {
          "name": "Return",
          "parameters": [
            "base::Vector<Node*> vals"
          ],
          "return_type": "Node*",
          "logic": "Creates a return node for the graph, merging the control flow into the end of the graph."
        },
        {
          "name": "IsNull",
          "parameters": [
            "Node* object",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Checks if an object is null based on the given wasm value type."
        },
        {
          "name": "effect",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the current effect node."
        },
        {
          "name": "control",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the current control node."
        },
        {
          "name": "SetEffect",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Sets the current effect to the given node."
        },
        {
          "name": "SetControl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Sets the current control to the given node."
        },
        {
          "name": "SetEffectControl",
          "parameters": [
            "Node* effect",
            "Node* control"
          ],
          "return_type": "void",
          "logic": "Sets the current effect and control nodes."
        },
        {
          "name": "BuildCallNode",
          "parameters": [
            "size_t param_count",
            "base::Vector<Node*> args",
            "wasm::WasmCodePosition position",
            "Node* implicit_first_arg",
            "const Operator* op",
            "Node* frame_state"
          ],
          "return_type": "Node*",
          "logic": "Builds a call node for the graph, adding implicit arguments, effect, and control inputs. Also updates the source position if available."
        },
        {
          "name": "BuildWasmCall",
          "parameters": [
            "const Signature<T>* sig",
            "base::Vector<Node*> args",
            "base::Vector<Node*> rets",
            "wasm::WasmCodePosition position",
            "Node* implicit_first_arg",
            "bool indirect",
            "Node* frame_state"
          ],
          "return_type": "Node*",
          "logic": "Builds a call node to a Wasm function, either direct or indirect, handling return values and updating effect/control."
        },
        {
          "name": "BuildCallToRuntimeWithContext",
          "parameters": [
            "Runtime::FunctionId f",
            "Node* js_context",
            "Node** parameters",
            "int parameter_count"
          ],
          "return_type": "Node*",
          "logic": "Builds a call node to a runtime function with a specific JS context."
        },
        {
          "name": "BuildCallToRuntime",
          "parameters": [
            "Runtime::FunctionId f",
            "Node** parameters",
            "int parameter_count"
          ],
          "return_type": "Node*",
          "logic": "Builds a call node to a runtime function."
        },
        {
          "name": "GetSafeLoadOperator",
          "parameters": [
            "int offset",
            "wasm::ValueTypeBase type"
          ],
          "return_type": "const Operator*",
          "logic": "Determines the appropriate load operator based on alignment and machine type."
        },
        {
          "name": "BuildSafeStore",
          "parameters": [
            "int offset",
            "wasm::ValueTypeBase type",
            "Node* arg_buffer",
            "Node* value",
            "Node* effect",
            "Node* control"
          ],
          "return_type": "Node*",
          "logic": "Builds a store node, handling alignment and write barriers."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph."
        },
        {
          "name": "graph_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the graph zone."
        },
        {
          "name": "LowerInt64",
          "parameters": [
            "Signature<MachineRepresentation>* sig"
          ],
          "return_type": "void",
          "logic": "Lowers Int64 values to Int32 pairs for 32-bit architectures."
        },
        {
          "name": "LowerInt64",
          "parameters": [
            "wasm::CallOrigin origin"
          ],
          "return_type": "void",
          "logic": "Lowers Int64 values to Int32 pairs for 32-bit architectures, based on call origin."
        },
        {
          "name": "BuildChangeInt64ToBigInt",
          "parameters": [
            "Node* input",
            "StubCallMode stub_mode"
          ],
          "return_type": "Node*",
          "logic": "Builds a call to a runtime function to convert an Int64 to a BigInt."
        },
        {
          "name": "SetSourcePosition",
          "parameters": [
            "Node* node",
            "wasm::WasmCodePosition position"
          ],
          "return_type": "void",
          "logic": "Sets the source position of a node for debugging purposes."
        },
        {
          "name": "TypeGuard",
          "parameters": [
            "Node* value",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Adds a type guard node to the graph, enforcing a specific type on a value."
        },
        {
          "name": "BuildModifyThreadInWasmFlagHelper",
          "parameters": [
            "Node* thread_in_wasm_flag_address",
            "bool new_value"
          ],
          "return_type": "void",
          "logic": "Helper function to modify the thread-in-wasm flag."
        },
        {
          "name": "BuildModifyThreadInWasmFlag",
          "parameters": [
            "bool new_value"
          ],
          "return_type": "void",
          "logic": "Modifies the thread-in-wasm flag to indicate whether the current thread is executing Wasm code."
        },
        {
          "name": "Assert",
          "parameters": [
            "Node* condition",
            "AbortReason abort_reason"
          ],
          "return_type": "void",
          "logic": "Inserts an assertion node that will abort execution if the condition is false."
        },
        {
          "name": "SetType",
          "parameters": [
            "Node* node",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Sets the type information for a node in the graph, ensuring type consistency."
        }
      ]
    },
    {
      "name": "WasmDecorator",
      "properties": [
        "origins_",
        "decoder_"
      ],
      "methods": [
        {
          "name": "WasmDecorator",
          "parameters": [
            "NodeOriginTable* origins",
            "wasm::Decoder* decoder"
          ],
          "return_type": "explicit WasmDecorator",
          "logic": "Constructor for WasmDecorator.  Stores references to a node origin table and a decoder to allow assigning origin information to newly created nodes."
        },
        {
          "name": "Decorate",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Assigns origin information to a node. The origin information includes a description, filename, source type, and position in the bytecode."
        }
      ]
    },
    {
      "name": "WasmWrapperGraphBuilder",
      "properties": [],
      "methods": [
        {
          "name": "WasmWrapperGraphBuilder",
          "parameters": [
            "Zone* zone",
            "MachineGraph* mcgraph",
            "const wasm::CanonicalSig* sig",
            "ParameterMode parameter_mode",
            "Isolate* isolate",
            "compiler::SourcePositionTable* spt"
          ],
          "return_type": "void",
          "logic": "Constructor for WasmWrapperGraphBuilder, initializes members based on provided arguments like compilation environment, zone, machine graph, signature information, parameter mode, and isolate."
        },
        {
          "name": "BuildCallAndReturn",
          "parameters": [
            "Node* js_context",
            "Node* function_data",
            "base::SmallVector<Node*, 16> args",
            "Node* frame_state",
            "bool set_in_wasm_flag"
          ],
          "return_type": "Node*",
          "logic": "Builds a call node and handles the return value, considering whether to set the thread-in-wasm flag."
        },
        {
          "name": "BuildJSToWasmWrapper",
          "parameters": [
            "Node* frame_state",
            "bool set_in_wasm_flag"
          ],
          "return_type": "void",
          "logic": "Builds a wrapper function for calling Wasm from JavaScript, handling parameter conversion and checking for type errors."
        },
        {
          "name": "BuildReceiverNode",
          "parameters": [
            "Node* callable_node",
            "Node* native_context",
            "Node* undefined_node"
          ],
          "return_type": "Node*",
          "logic": "Builds a node representing the receiver for a JS function call, checking for strict mode and using global proxy if needed."
        },
        {
          "name": "BuildJSFastApiCallWrapper",
          "parameters": [
            "DirectHandle<JSReceiver> callable"
          ],
          "return_type": "void",
          "logic": "Builds a fast API call wrapper for JavaScript to Wasm calls, optimizing the call path based on the function signature and API data."
        },
        {
          "name": "BuildCWasmEntry",
          "parameters": [],
          "return_type": "void",
          "logic": "Builds a wrapper that is used for calls into wasm code that are initiated from C/C++ code, often used in embedder environments."
        }
      ]
    },
    {
      "name": "WasmWrapperGraphBuilder::ModifyThreadInWasmFlagScope",
      "properties": [
        "wasm_wrapper_graph_builder_",
        "thread_in_wasm_flag_address_"
      ],
      "methods": [
        {
          "name": "ModifyThreadInWasmFlagScope",
          "parameters": [
            "WasmWrapperGraphBuilder* wasm_wrapper_graph_builder",
            "WasmGraphAssembler* gasm"
          ],
          "return_type": "void",
          "logic": "Constructor.  Sets the thread in wasm flag to true when the scope is entered."
        },
        {
          "name": "~ModifyThreadInWasmFlagScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor.  Sets the thread in wasm flag back to false when the scope is exited."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ContainsSimd",
      "parameters": [
        "const Signature<T>* sig"
      ],
      "return_type": "bool",
      "logic": "Checks if a signature contains any SIMD (S128) value types."
    },
    {
      "name": "ContainsInt64",
      "parameters": [
        "const wasm::CanonicalSig* sig"
      ],
      "return_type": "bool",
      "logic": "Checks if a signature contains any Int64 value types."
    },
    {
      "name": "CreateMachineSignature",
      "parameters": [
        "Zone* zone",
        "const Signature<T>* sig",
        "wasm::CallOrigin origin"
      ],
      "return_type": "Signature<MachineRepresentation>*",
      "logic": "Creates a machine representation signature from a wasm signature, considering the call origin (JS or Wasm)."
    },
    {
      "name": "BuildInlinedJSToWasmWrapper",
      "parameters": [
        "Zone* zone",
        "MachineGraph* mcgraph",
        "const wasm::CanonicalSig* signature",
        "Isolate* isolate",
        "compiler::SourcePositionTable* spt",
        "Node* frame_state",
        "bool set_in_wasm_flag"
      ],
      "return_type": "void",
      "logic": "Builds a wrapper function for calling Wasm from JavaScript, inlined directly into the calling JS function.  Uses a WasmWrapperGraphBuilder and then calls the BuildJSToWasmWrapper() method."
    },
    {
      "name": "NewJSToWasmCompilationJob",
      "parameters": [
        "Isolate* isolate",
        "const wasm::CanonicalSig* sig"
      ],
      "return_type": "std::unique_ptr<OptimizedCompilationJob>",
      "logic": "Creates a new optimized compilation job for compiling a JS-to-Wasm wrapper function."
    },
    {
      "name": "CreateCommonMachineGraph",
      "parameters": [
        "Zone* zone"
      ],
      "return_type": "MachineGraph*",
      "logic": "Creates a common machine graph with a graph, common operator builder, and machine operator builder."
    },
    {
      "name": "CompileWasmImportCallWrapper",
      "parameters": [
        "wasm::ImportCallKind kind",
        "const wasm::CanonicalSig* sig",
        "bool source_positions",
        "int expected_arity",
        "wasm::Suspend suspend"
      ],
      "return_type": "wasm::WasmCompilationResult",
      "logic": "Compiles a wrapper for calls from Wasm to JavaScript import functions."
    },
    {
      "name": "CompileWasmCapiCallWrapper",
      "parameters": [
        "const wasm::CanonicalSig* sig"
      ],
      "return_type": "wasm::WasmCompilationResult",
      "logic": "Compiles a wrapper for calls from Wasm to C API functions."
    },
    {
      "name": "IsFastCallSupportedSignature",
      "parameters": [
        "const v8::CFunctionInfo* sig"
      ],
      "return_type": "bool",
      "logic": "Checks if a given C function signature is supported for fast call optimization."
    },
    {
      "name": "CompileWasmJSFastCallWrapper",
      "parameters": [
        "const wasm::CanonicalSig* sig",
        "DirectHandle<JSReceiver> callable"
      ],
      "return_type": "wasm::WasmCompilationResult",
      "logic": "Compiles a fast call wrapper for calling JavaScript functions from Wasm."
    },
    {
      "name": "CompileCWasmEntry",
      "parameters": [
        "Isolate* isolate",
        "const wasm::CanonicalSig* sig"
      ],
      "return_type": "Handle<Code>",
      "logic": "Compiles an entry point that is used to call a Wasm function that is initiated from C/C++ code. "
    },
    {
      "name": "WasmAssemblerOptions",
      "parameters": [],
      "return_type": "AssemblerOptions",
      "logic": "Returns assembler options for Wasm code generation, including relocation info for serialization."
    },
    {
      "name": "WasmStubAssemblerOptions",
      "parameters": [],
      "return_type": "AssemblerOptions",
      "logic": "Returns assembler options for Wasm stubs, without relocation info, and with indirect builtin call jump mode."
    }
  ]
}