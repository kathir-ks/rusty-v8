{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/opcodes.h",
  "imports": [
    "<iosfwd>",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "IrOpcode",
      "properties": [],
      "methods": [
        {
          "name": "Mnemonic",
          "parameters": [
            "Value value"
          ],
          "return_type": "char const*",
          "logic": "Returns the mnemonic name of an opcode."
        },
        {
          "name": "IsCommonOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a common operator."
        },
        {
          "name": "IsControlOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a control operator."
        },
        {
          "name": "IsJsOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a JavaScript operator."
        },
        {
          "name": "IsMachineOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a machine operator."
        },
        {
          "name": "IsMachineConstantOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a machine-level constant."
        },
        {
          "name": "IsConstantOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a constant operator."
        },
        {
          "name": "IsPhiOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a Phi or EffectPhi operator."
        },
        {
          "name": "IsMergeOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a Merge or Loop operator."
        },
        {
          "name": "IsIfProjectionOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents an If projection operator (IfTrue, IfFalse, etc.)."
        },
        {
          "name": "IsGraphTerminator",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode terminates control flow in a graph (Deoptimize, Return, Throw, etc.)."
        },
        {
          "name": "IsInlineeOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode can be inlined (JSConstruct, JSCall)."
        },
        {
          "name": "IsComparisonOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a comparison operator."
        },
        {
          "name": "IsContextChainExtendingOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode represents a context-chain-extending operation (JSCreateFunctionContext, etc.)."
        },
        {
          "name": "IsFeedbackCollectingOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode takes the feedback vector as an input, and implements feedback-collecting logic in generic lowering."
        },
        {
          "name": "IsFeedbackCollectingOpcode",
          "parameters": [
            "int16_t value"
          ],
          "return_type": "bool",
          "logic": "Overloaded version of IsFeedbackCollectingOpcode, takes int16_t as input.  Returns true if the opcode takes the feedback vector as an input, and implements feedback-collecting logic in generic lowering."
        },
        {
          "name": "isAtomicOpOpcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode is atomic operation."
        },
        {
          "name": "IsSimd128Opcode",
          "parameters": [
            "Value value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the opcode is a SIMD128 operation (WebAssembly specific)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "IrOpcode::Value"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for IrOpcode::Value for printing purposes."
    }
  ]
}