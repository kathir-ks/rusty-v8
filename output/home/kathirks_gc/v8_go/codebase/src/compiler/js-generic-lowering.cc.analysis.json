{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-generic-lowering.cc",
  "imports": [
    "src/compiler/js-generic-lowering.h",
    "src/ast/ast.h",
    "src/builtins/builtins-constructor.h",
    "src/codegen/code-factory.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/compiler/access-builder.h",
    "src/compiler/common-operator.h",
    "src/compiler/js-graph.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-properties.h",
    "src/compiler/operator-properties.h",
    "src/compiler/processed-feedback.h",
    "src/compiler/simplified-operator.h",
    "src/objects/scope-info.h",
    "src/objects/template-objects-inl.h"
  ],
  "classes": [
    {
      "name": "JSGenericLowering",
      "properties": [
        "jsgraph_",
        "broker_"
      ],
      "methods": [
        {
          "name": "JSGenericLowering",
          "parameters": [
            "JSGraph* jsgraph",
            "Editor* editor",
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSGenericLowering class. Initializes the AdvancedReducer and stores pointers to the JSGraph and JSHeapBroker."
        },
        {
          "name": "~JSGenericLowering",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the JSGenericLowering class."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a given node. Dispatches to specific lowering functions based on the node's opcode. Returns NoChange if the node is not handled."
        },
        {
          "name": "LowerJS##Name",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Placeholder method that will be expanded by the REPLACE_STUB_CALL macro to define LowerJS methods for specific built-ins."
        },
        {
          "name": "ReplaceWithBuiltinCall",
          "parameters": [
            "Node* node",
            "Builtin builtin"
          ],
          "return_type": "void",
          "logic": "Replaces a node with a call to a specified builtin function."
        },
        {
          "name": "ReplaceWithBuiltinCall",
          "parameters": [
            "Node* node",
            "Callable callable",
            "CallDescriptor::Flags flags"
          ],
          "return_type": "void",
          "logic": "Replaces a node with a call to a specified callable, setting flags."
        },
        {
          "name": "ReplaceWithBuiltinCall",
          "parameters": [
            "Node* node",
            "Callable callable",
            "CallDescriptor::Flags flags",
            "Operator::Properties properties"
          ],
          "return_type": "void",
          "logic": "Replaces a node with a call to a specified callable, setting flags and properties."
        },
        {
          "name": "ReplaceWithRuntimeCall",
          "parameters": [
            "Node* node",
            "Runtime::FunctionId f",
            "int nargs_override"
          ],
          "return_type": "void",
          "logic": "Replaces a node with a call to a specified runtime function."
        },
        {
          "name": "ReplaceUnaryOpWithBuiltinCall",
          "parameters": [
            "Node* node",
            "Builtin builtin_without_feedback",
            "Builtin builtin_with_feedback"
          ],
          "return_type": "void",
          "logic": "Replaces a unary operation node with a call to a specified builtin function, optionally using a version with feedback."
        },
        {
          "name": "LowerJS##Name",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Placeholder method that will be expanded by the DEF_UNARY_LOWERING macro to define LowerJS methods for specific unary operators."
        },
        {
          "name": "ReplaceBinaryOpWithBuiltinCall",
          "parameters": [
            "Node* node",
            "Builtin builtin_without_feedback",
            "Builtin builtin_with_feedback"
          ],
          "return_type": "void",
          "logic": "Replaces a binary operation node with a call to a specified builtin function, optionally using a version with feedback."
        },
        {
          "name": "LowerJS##Name",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Placeholder method that will be expanded by the DEF_BINARY_LOWERING macro to define LowerJS methods for specific binary operators."
        },
        {
          "name": "LowerJSStrictEqual",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStrictEqual operator. Removes context and control dependencies and replace it with builtin call."
        },
        {
          "name": "LowerJSHasProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSHasProperty operator to the appropriate builtin call."
        },
        {
          "name": "LowerJSLoadProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadProperty operator to a KeyedLoadIC trampoline/builtin call, depending on feedback."
        },
        {
          "name": "LowerJSLoadNamed",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadNamed operator to a LoadIC trampoline/builtin call, depending on feedback."
        },
        {
          "name": "LowerJSLoadNamedFromSuper",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadNamedFromSuper operator to a LoadSuperIC builtin call."
        },
        {
          "name": "LowerJSLoadGlobal",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadGlobal operator to a LoadGlobalIC builtin call, depending on feedback."
        },
        {
          "name": "LowerJSGetIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGetIterator operator to a GetIteratorWithFeedback builtin call."
        },
        {
          "name": "LowerJSSetKeyedProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSSetKeyedProperty operator to a KeyedStoreIC trampoline/builtin call, depending on feedback."
        },
        {
          "name": "LowerJSDefineKeyedOwnProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSDefineKeyedOwnProperty operator to a DefineKeyedOwnIC trampoline/builtin call, depending on feedback."
        },
        {
          "name": "LowerJSSetNamedProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSSetNamedProperty operator to a runtime call or a StoreIC trampoline/builtin call, depending on feedback."
        },
        {
          "name": "LowerJSDefineNamedOwnProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSDefineNamedOwnProperty operator to a DefineNamedOwnIC builtin call, depending on feedback."
        },
        {
          "name": "LowerJSStoreGlobal",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStoreGlobal operator to a StoreGlobalIC trampoline/builtin call, depending on feedback."
        },
        {
          "name": "LowerJSDefineKeyedOwnPropertyInLiteral",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSDefineKeyedOwnPropertyInLiteral operator to a runtime call."
        },
        {
          "name": "LowerJSStoreInArrayLiteral",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStoreInArrayLiteral operator to a builtin call."
        },
        {
          "name": "LowerJSDeleteProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSDeleteProperty operator to a builtin call."
        },
        {
          "name": "LowerJSGetSuperConstructor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGetSuperConstructor operator by loading the map prototype from the active function."
        },
        {
          "name": "LowerJSFindNonDefaultConstructorOrConstruct",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSFindNonDefaultConstructorOrConstruct operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSHasInPrototypeChain",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSHasInPrototypeChain operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSOrdinaryHasInstance",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSOrdinaryHasInstance operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSHasContextExtension",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSHasContextExtension operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSLoadContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadContext operator. This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSLoadScriptContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadScriptContext operator. This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSStoreContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStoreContext operator. This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSStoreScriptContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStoreScriptContext operator. This should be unreachable since it's eliminated in context specialization."
        },
        {
          "name": "LowerJSCreate",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreate operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSCreateArguments",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateArguments operator by replacing the node with call to the appropriate runtime function."
        },
        {
          "name": "LowerJSCreateArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateArray operator to call ArrayConstructorStubConstant."
        },
        {
          "name": "LowerJSCreateArrayIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateArrayIterator operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreateAsyncFunctionObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateAsyncFunctionObject operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreateCollectionIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateCollectionIterator operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreateBoundFunction",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateBoundFunction operator. This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSObjectIsArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSObjectIsArray operator. This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreateObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateObject operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSCreateStringWrapper",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateStringWrapper operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSParseInt",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSParseInt operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSRegExpTest",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSRegExpTest operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSCreateClosure",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateClosure operator by replacing the node with call to the appropriate builtin or runtime function."
        },
        {
          "name": "LowerJSCreateFunctionContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateFunctionContext operator by replacing the node with a call to the fast new function context, or to the runtime function."
        },
        {
          "name": "LowerJSCreateGeneratorObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateGeneratorObject operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSCreateIterResultObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateIterResultObject operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSCreateStringIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateStringIterator operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreateKeyValueArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateKeyValueArray operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreatePromise",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreatePromise operator. This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSCreateTypedArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateTypedArray operator by replacing the node with call to the corresponding builtin."
        },
        {
          "name": "LowerJSCreateLiteralArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateLiteralArray operator by replacing the node with call to the CreateShallowArrayLiteral or CreateArrayFromSlowBoilerplate built-in, depending on whether literal is simple or not."
        },
        {
          "name": "LowerJSGetTemplateObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGetTemplateObject operator by replacing it with a call to the kGetTemplateObject builtin."
        },
        {
          "name": "LowerJSCreateEmptyLiteralArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateEmptyLiteralArray operator by replacing it with a call to CreateEmptyArrayLiteral builtin."
        },
        {
          "name": "LowerJSCreateArrayFromIterable",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateArrayFromIterable operator by replacing it with a call to the kIterableToListWithSymbolLookup Builtin."
        },
        {
          "name": "LowerJSCreateLiteralObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateLiteralObject operator by replacing the node with call to the CreateShallowObjectLiteral or CreateObjectFromSlowBoilerplate built-in, depending on whether literal is simple or not."
        },
        {
          "name": "LowerJSCloneObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCloneObject operator to CloneObjectIC."
        },
        {
          "name": "LowerJSCreateEmptyLiteralObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateEmptyLiteralObject operator by replacing it with a call to the CreateEmptyLiteralObject builtin."
        },
        {
          "name": "LowerJSCreateLiteralRegExp",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateLiteralRegExp operator by replacing it with a call to CreateRegExpLiteral builtin."
        },
        {
          "name": "LowerJSCreateCatchContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateCatchContext operator by replacing the node with a call to the kPushCatchContext runtime."
        },
        {
          "name": "LowerJSCreateWithContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateWithContext operator by replacing the node with a call to the kPushWithContext runtime."
        },
        {
          "name": "LowerJSCreateBlockContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCreateBlockContext operator by replacing the node with a call to the kPushBlockContext runtime."
        },
        {
          "name": "LowerJSConstructForwardVarargs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSConstructForwardVarargs operator."
        },
        {
          "name": "LowerJSConstructForwardAllArgs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSConstructForwardAllArgs operator."
        },
        {
          "name": "LowerJSConstruct",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSConstruct operator."
        },
        {
          "name": "LowerJSConstructWithArrayLike",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSConstructWithArrayLike operator."
        },
        {
          "name": "LowerJSConstructWithSpread",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSConstructWithSpread operator."
        },
        {
          "name": "LowerJSCallForwardVarargs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCallForwardVarargs operator."
        },
        {
          "name": "LowerJSCall",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCall operator."
        },
        {
          "name": "LowerJSCallWithArrayLike",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCallWithArrayLike operator."
        },
        {
          "name": "LowerJSCallWithSpread",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCallWithSpread operator."
        },
        {
          "name": "LowerJSCallRuntime",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSCallRuntime operator."
        },
        {
          "name": "LowerJSWasmCall",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowering for the JSWasmCall operator."
        },
        {
          "name": "LowerJSForInPrepare",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSForInPrepare operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSForInNext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSForInNext operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSLoadMessage",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadMessage operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSStoreMessage",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStoreMessage operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSLoadModule",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSLoadModule operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSStoreModule",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStoreModule operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSGetImportMeta",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGetImportMeta operator by replacing the node with call to the corresponding runtime function."
        },
        {
          "name": "LowerJSGeneratorStore",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGeneratorStore operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSGeneratorRestoreContinuation",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGeneratorRestoreContinuation operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSGeneratorRestoreContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGeneratorRestoreContext operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSGeneratorRestoreInputOrDebugPos",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGeneratorRestoreInputOrDebugPos operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSGeneratorRestoreRegister",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSGeneratorRestoreRegister operator.  This should be unreachable since it's eliminated in typed lowering."
        },
        {
          "name": "LowerJSStackCheck",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSStackCheck operator by checking stack limit and calling runtime."
        },
        {
          "name": "LowerJSDebugger",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers the JSDebugger operator by replacing the node with a call to the corresponding runtime function."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone for the current graph."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate for the current graph."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph associated with this lowering phase."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder for building common operators."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the MachineOperatorBuilder for building machine operators."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FrameStateFlagForCall",
      "parameters": [
        "Node* node"
      ],
      "return_type": "CallDescriptor::Flags",
      "logic": "Determines the appropriate flags for a call descriptor based on whether the node has a frame state input."
    },
    {
      "name": "ShouldUseMegamorphicAccessBuiltin",
      "parameters": [
        "FeedbackSource const& source",
        "OptionalNameRef name",
        "AccessMode mode",
        "JSHeapBroker* broker"
      ],
      "return_type": "bool",
      "logic": "Checks if a megamorphic access builtin is appropriate for a given feedback source and access mode."
    },
    {
      "name": "StackCheckKindOfJSStackCheck",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "StackCheckKind",
      "logic": "Retrieves the StackCheckKind of a JSStackCheck operator."
    }
  ]
}