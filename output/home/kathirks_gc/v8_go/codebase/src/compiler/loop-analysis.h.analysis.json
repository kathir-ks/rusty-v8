{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/loop-analysis.h",
  "imports": [
    "src/base/iterator.h",
    "src/common/globals.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/node-marker.h",
    "src/compiler/node-origin-table.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/turbofan-graph.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "LoopTree",
      "properties": [
        "zone_",
        "outer_loops_",
        "all_loops_",
        "node_to_loop_num_",
        "loop_nodes_"
      ],
      "methods": [
        {
          "name": "LoopTree",
          "parameters": [
            "size_t num_nodes",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for LoopTree. Initializes the data structures used to store loop information, using the given zone for memory allocation."
        },
        {
          "name": "ContainingLoop",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Loop*",
          "logic": "Returns the innermost nested loop containing the given node, or nullptr if the node is not in any loop."
        },
        {
          "name": "Contains",
          "parameters": [
            "const Loop* loop",
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if the given loop contains the given node, either directly or through a nested loop."
        },
        {
          "name": "outer_loops",
          "parameters": [],
          "return_type": "const ZoneVector<Loop*>&",
          "logic": "Returns the list of outer loops (loops not contained within any other loop)."
        },
        {
          "name": "inner_loops",
          "parameters": [],
          "return_type": "ZoneVector<const Loop*>",
          "logic": "Returns a vector containing the inner loops (loops with no nested loops)."
        },
        {
          "name": "LoopNum",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "int",
          "logic": "Returns a unique number for the given loop."
        },
        {
          "name": "HeaderNodes",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "NodeRange",
          "logic": "Returns a range of nodes representing the header nodes of the given loop."
        },
        {
          "name": "HeaderNode",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "Node*",
          "logic": "Returns the header control node for a loop. The implementation is not provided in the header file."
        },
        {
          "name": "BodyNodes",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "NodeRange",
          "logic": "Returns a range of nodes representing the body nodes of the given loop."
        },
        {
          "name": "ExitNodes",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "NodeRange",
          "logic": "Returns a range of nodes representing the exit nodes of the given loop."
        },
        {
          "name": "LoopNodes",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "NodeRange",
          "logic": "Returns a range of nodes representing all nodes in the given loop (header, body, and exits)."
        },
        {
          "name": "GetLoopControl",
          "parameters": [
            "const Loop* loop"
          ],
          "return_type": "Node*",
          "logic": "Returns the node that represents the control flow of the loop (typically the loop node itself)."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with this loop tree."
        },
        {
          "name": "NewLoop",
          "parameters": [],
          "return_type": "Loop*",
          "logic": "Creates a new loop object within the loop tree's zone and adds it to the list of all loops."
        },
        {
          "name": "SetParent",
          "parameters": [
            "Loop* parent",
            "Loop* child"
          ],
          "return_type": "void",
          "logic": "Sets the parent of a loop, establishing the nesting relationship.  If parent is null, it adds the child to the outer loops."
        }
      ]
    },
    {
      "name": "LoopTree::Loop",
      "properties": [
        "parent_",
        "depth_",
        "children_",
        "header_start_",
        "body_start_",
        "exits_start_",
        "exits_end_"
      ],
      "methods": [
        {
          "name": "parent",
          "parameters": [],
          "return_type": "Loop*",
          "logic": "Returns the parent loop of this loop, or nullptr if it is an outer loop."
        },
        {
          "name": "children",
          "parameters": [],
          "return_type": "const ZoneVector<Loop*>&",
          "logic": "Returns the list of child loops nested within this loop."
        },
        {
          "name": "HeaderSize",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the size of the loop's header node range."
        },
        {
          "name": "BodySize",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the size of the loop's body node range."
        },
        {
          "name": "ExitsSize",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the size of the loop's exit node range."
        },
        {
          "name": "TotalSize",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the total size of the loop (header, body, and exits)."
        },
        {
          "name": "depth",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the nesting depth of the loop (0 for outer loops)."
        },
        {
          "name": "Loop",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for Loop. Initializes a new loop object within the specified zone."
        }
      ]
    },
    {
      "name": "LoopFinder",
      "properties": [],
      "methods": [
        {
          "name": "BuildLoopTree",
          "parameters": [
            "TFGraph* graph",
            "TickCounter* tick_counter",
            "Zone* temp_zone"
          ],
          "return_type": "LoopTree*",
          "logic": "Builds a loop tree for the entire graph. The implementation is not provided in the header file."
        },
        {
          "name": "HasMarkedExits",
          "parameters": [
            "LoopTree* loop_tree",
            "const LoopTree::Loop* loop"
          ],
          "return_type": "bool",
          "logic": "Checks if the loop has marked exits. The implementation is not provided in the header file."
        },
        {
          "name": "FindSmallInnermostLoopFromHeader",
          "parameters": [
            "Node* loop_header",
            "AllNodes& all_nodes",
            "Zone* zone",
            "size_t max_size",
            "Purpose purpose"
          ],
          "return_type": "ZoneUnorderedSet<Node*>*",
          "logic": "Finds all nodes in the loop headed by {loop_header} if it contains no nested loops and satisfies other conditions. The implementation is only enabled when V8_ENABLE_WEBASSEMBLY is defined."
        }
      ]
    },
    {
      "name": "NodeCopier",
      "properties": [
        "node_map_",
        "copies_",
        "copy_count_"
      ],
      "methods": [
        {
          "name": "NodeCopier",
          "parameters": [
            "TFGraph* graph",
            "uint32_t max",
            "NodeVector* p",
            "uint32_t copy_count"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes a NodeCopier instance to copy a range of nodes."
        },
        {
          "name": "map",
          "parameters": [
            "Node* node",
            "uint32_t copy_index"
          ],
          "return_type": "Node*",
          "logic": "Returns the mapped node in the copy_index'th copy, or the original node if not present in the mapping."
        },
        {
          "name": "map",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Helper for map function for one copy."
        },
        {
          "name": "Insert",
          "parameters": [
            "Node* original",
            "const NodeVector& new_copies"
          ],
          "return_type": "void",
          "logic": "Inserts a new mapping from original to new_copies into the copier."
        },
        {
          "name": "Insert",
          "parameters": [
            "Node* original",
            "Node* copy"
          ],
          "return_type": "void",
          "logic": "Helper function for Insert for one copy."
        },
        {
          "name": "CopyNodes",
          "parameters": [
            "TFGraph* graph",
            "Zone* tmp_zone_",
            "Node* dead",
            "base::iterator_range<InputIterator> nodes",
            "SourcePositionTable* source_positions",
            "NodeOriginTable* node_origins"
          ],
          "return_type": "void",
          "logic": "Copies a range of nodes. It clones each node, then fixes the input pointers of the clones to point to the appropriate nodes in the copies."
        },
        {
          "name": "Marked",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node has been marked by the copier (meaning it's part of the copied range)."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "LoopFinder::Purpose",
      "values": [
        "kLoopPeeling",
        "kLoopUnrolling"
      ]
    }
  ]
}