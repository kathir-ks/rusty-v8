{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/loop-unrolling.h",
  "imports": [
    "src/compiler/common-operator.h",
    "src/compiler/loop-analysis.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "unrolling_count_heuristic",
      "parameters": [
        "uint32_t size",
        "uint32_t depth"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates the number of times to unroll a loop based on its size and nesting depth.  Favors small and deeply nested loops by taking the minimum of a depth-based calculation and a maximum unrolling count."
    },
    {
      "name": "maximum_unrollable_size",
      "parameters": [
        "uint32_t depth"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates the maximum size of a loop that is unrollable based on its nesting depth."
    },
    {
      "name": "UnrollLoop",
      "parameters": [
        "Node* loop_node",
        "ZoneUnorderedSet<Node*>* loop",
        "uint32_t depth",
        "TFGraph* graph",
        "CommonOperatorBuilder* common",
        "Zone* tmp_zone",
        "SourcePositionTable* source_positions",
        "NodeOriginTable* node_origins"
      ],
      "return_type": "void",
      "logic": "This function actually performs the loop unrolling.  It takes a loop and its associated data structures, and transforms the graph to effectively execute the loop multiple times per original iteration."
    }
  ]
}