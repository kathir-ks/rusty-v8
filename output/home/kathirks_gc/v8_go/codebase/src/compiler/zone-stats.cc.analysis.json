{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/zone-stats.cc",
  "imports": [
    "<algorithm>",
    "src/compiler/zone-stats.h"
  ],
  "classes": [
    {
      "name": "ZoneStats::StatsScope",
      "properties": [
        "zone_stats_",
        "total_allocated_bytes_at_start_",
        "max_allocated_bytes_",
        "initial_values_"
      ],
      "methods": [
        {
          "name": "StatsScope",
          "parameters": [
            "ZoneStats* zone_stats"
          ],
          "return_type": "void",
          "logic": "Constructor for StatsScope. Initializes the scope with a pointer to ZoneStats, the total allocated bytes at the start of the scope, and an initial value map that stores the allocation size of each zone at the beginning of the scope. Registers the scope in the ZoneStats instance."
        },
        {
          "name": "~StatsScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for StatsScope. Removes the scope from the ZoneStats instance's list of active scopes."
        },
        {
          "name": "GetMaxAllocatedBytes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the maximum allocated bytes within this StatsScope. It compares the current max_allocated_bytes_ and the currently allocated bytes to return the largest."
        },
        {
          "name": "GetCurrentAllocatedBytes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates and returns the currently allocated bytes within this StatsScope.  It iterates through all zones managed by ZoneStats, summing up their allocation sizes, and subtracting the initial allocation sizes recorded when the scope was created."
        },
        {
          "name": "GetTotalAllocatedBytes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates and returns the total allocated bytes during the lifetime of the scope. It subtracts the total allocated bytes at the start of the scope from the current total allocated bytes in ZoneStats."
        },
        {
          "name": "ZoneReturned",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Called when a zone is returned. Updates the maximum allocated bytes for the scope and removes the zone's initial value from the initial_values_ map, indicating it's no longer tracked by this scope."
        }
      ]
    },
    {
      "name": "ZoneStats",
      "properties": [
        "max_allocated_bytes_",
        "total_deleted_bytes_",
        "allocator_",
        "zones_",
        "stats_"
      ],
      "methods": [
        {
          "name": "ZoneStats",
          "parameters": [
            "AccountingAllocator* allocator"
          ],
          "return_type": "void",
          "logic": "Constructor for ZoneStats. Initializes the maximum allocated bytes, total deleted bytes, and the allocator."
        },
        {
          "name": "~ZoneStats",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for ZoneStats. Asserts that there are no zones or stats scopes left."
        },
        {
          "name": "GetMaxAllocatedBytes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the maximum allocated bytes across all zones managed by this ZoneStats instance."
        },
        {
          "name": "GetCurrentAllocatedBytes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates and returns the currently allocated bytes across all zones managed by this ZoneStats instance."
        },
        {
          "name": "GetTotalAllocatedBytes",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates and returns the total allocated bytes, considering both current allocation and deleted bytes."
        },
        {
          "name": "NewEmptyZone",
          "parameters": [
            "const char* zone_name",
            "bool support_zone_compression"
          ],
          "return_type": "Zone*",
          "logic": "Creates a new empty Zone with the given name and support for compression. It adds the zone to the list of managed zones and returns the new zone."
        },
        {
          "name": "ReturnZone",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Deallocates the given Zone. Updates the maximum allocated bytes, notifies active StatsScopes about the returned zone, removes the zone from the list of managed zones, updates the total deleted bytes, and finally deletes the zone."
        }
      ]
    }
  ],
  "functions": []
}