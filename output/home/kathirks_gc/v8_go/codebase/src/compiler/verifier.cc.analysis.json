{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/verifier.cc",
  "imports": [
    "src/compiler/verifier.h",
    "<algorithm>",
    "<deque>",
    "<queue>",
    "<sstream>",
    "<string>",
    "src/compiler/all-nodes.h",
    "src/compiler/common-operator.h",
    "src/compiler/js-operator.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator-properties.h",
    "src/compiler/operator.h",
    "src/compiler/schedule.h",
    "src/compiler/state-values-utils.h",
    "src/compiler/turbofan-graph.h",
    "src/compiler/type-cache.h",
    "src/utils/bit-vector.h"
  ],
  "classes": [
    {
      "name": "Verifier::Visitor",
      "properties": [
        "zone",
        "typing",
        "check_inputs",
        "code_type"
      ],
      "methods": [
        {
          "name": "Visitor",
          "parameters": [
            "Zone* z",
            "Typing typed",
            "CheckInputs check_inputs",
            "CodeType code_type"
          ],
          "return_type": "void",
          "logic": "Constructor for the Visitor class. Initializes the member variables."
        },
        {
          "name": "CheckSwitch",
          "parameters": [
            "Node* node",
            "const AllNodes& all"
          ],
          "return_type": "void",
          "logic": "Checks the validity of a Switch node, including its uses (IfValue and IfDefault)."
        },
        {
          "name": "Check",
          "parameters": [
            "Node* node",
            "const AllNodes& all"
          ],
          "return_type": "void",
          "logic": "Checks the validity of a given node, verifying input counts, types, and operator-specific constraints."
        },
        {
          "name": "CheckNotTyped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Checks if a node should never have a type associated with it.  Skips verification if flag verify_simplified_lowering is set."
        },
        {
          "name": "CheckTypeIs",
          "parameters": [
            "Node* node",
            "Type type"
          ],
          "return_type": "void",
          "logic": "Checks if the type of a node is exactly a given type."
        },
        {
          "name": "CheckTypeMaybe",
          "parameters": [
            "Node* node",
            "Type type"
          ],
          "return_type": "void",
          "logic": "Checks if the type of a node intersects a given type (i.e., the node's type must potentially be that type)."
        },
        {
          "name": "CheckValueInputIs",
          "parameters": [
            "Node* node",
            "int i",
            "Type type"
          ],
          "return_type": "void",
          "logic": "Checks if the type of a specific value input of a node is exactly a given type."
        },
        {
          "name": "CheckOutput",
          "parameters": [
            "Node* node",
            "Node* use",
            "int count",
            "const char* kind"
          ],
          "return_type": "void",
          "logic": "Checks that a node produces a given 'kind' of output that is used by another node."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FailSoon",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Helper function for debugging. Prints debug information about a node just before a DCHECK failure."
    },
    {
      "name": "Verifier::Run",
      "parameters": [
        "TFGraph* graph",
        "Typing typing",
        "CheckInputs check_inputs",
        "CodeType code_type"
      ],
      "return_type": "void",
      "logic": "Runs the verifier on a given graph, using a Visitor to check each node."
    },
    {
      "name": "HasDominatingDef",
      "parameters": [
        "Schedule* schedule",
        "Node* node",
        "BasicBlock* container",
        "BasicBlock* use_block",
        "int use_pos"
      ],
      "return_type": "bool",
      "logic": "Checks if a node has a dominating definition within a given schedule, block and use position."
    },
    {
      "name": "Dominates",
      "parameters": [
        "Schedule* schedule",
        "Node* dominator",
        "Node* dominatee"
      ],
      "return_type": "bool",
      "logic": "Checks if one node dominates another within a given schedule."
    },
    {
      "name": "CheckInputsDominate",
      "parameters": [
        "Schedule* schedule",
        "BasicBlock* block",
        "Node* node",
        "int use_pos"
      ],
      "return_type": "void",
      "logic": "Checks if all inputs of a node are dominated by their definitions within a given schedule and block."
    },
    {
      "name": "ScheduleVerifier::Run",
      "parameters": [
        "Schedule* schedule"
      ],
      "return_type": "void",
      "logic": "Runs the schedule verifier on a given schedule to verify the RPO order, dominance relation and placement of phis."
    },
    {
      "name": "Verifier::VerifyNode",
      "parameters": [
        "Node* node"
      ],
      "return_type": "void",
      "logic": "Verifies the basic properties of a node, such as input counts, effect/control outputs, and frame state inputs."
    },
    {
      "name": "Verifier::VerifyEdgeInputReplacement",
      "parameters": [
        "const Edge& edge",
        "const Node* replacement"
      ],
      "return_type": "void",
      "logic": "Verifies that an edge input replacement is valid."
    }
  ]
}