{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/node.h",
  "imports": [
    "src/common/globals.h",
    "src/compiler/graph-zone-traits.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/compiler/turbofan-types.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "Node",
      "properties": [
        "op_",
        "type_",
        "mark_",
        "bit_field_",
        "first_use_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Zone* zone",
            "NodeId id",
            "const Operator* op",
            "int input_count",
            "Node* const* inputs",
            "bool has_extensible_inputs"
          ],
          "return_type": "Node*",
          "logic": "Creates a new Node object in the given zone."
        },
        {
          "name": "Clone",
          "parameters": [
            "Zone* zone",
            "NodeId id",
            "const Node* node"
          ],
          "return_type": "Node*",
          "logic": "Clones an existing Node object into the given zone."
        },
        {
          "name": "IsDead",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node is dead, meaning its first input is null."
        },
        {
          "name": "Kill",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the node as dead by nulling out the first input."
        },
        {
          "name": "op",
          "parameters": [],
          "return_type": "const Operator*",
          "logic": "Returns the operator associated with the node."
        },
        {
          "name": "opcode",
          "parameters": [],
          "return_type": "IrOpcode::Value",
          "logic": "Returns the opcode of the operator associated with the node."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "NodeId",
          "logic": "Returns the ID of the node."
        },
        {
          "name": "InputCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of inputs to the node. It checks if the inputs are inline or outline and returns the count accordingly."
        },
        {
          "name": "Verify",
          "parameters": [],
          "return_type": "void",
          "logic": "Debug-only method to verify node integrity (empty when DEBUG is not defined)."
        },
        {
          "name": "InputAt",
          "parameters": [
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Returns the input node at the specified index."
        },
        {
          "name": "ReplaceInput",
          "parameters": [
            "int index",
            "Node* new_to"
          ],
          "return_type": "void",
          "logic": "Replaces the input node at the specified index with a new node, updating use chains."
        },
        {
          "name": "AppendInput",
          "parameters": [
            "Zone* zone",
            "Node* new_to"
          ],
          "return_type": "void",
          "logic": "Appends a new input to the node, potentially allocating out-of-line storage if necessary."
        },
        {
          "name": "InsertInput",
          "parameters": [
            "Zone* zone",
            "int index",
            "Node* new_to"
          ],
          "return_type": "void",
          "logic": "Inserts a new input node at the specified index, shifting existing inputs."
        },
        {
          "name": "InsertInputs",
          "parameters": [
            "Zone* zone",
            "int index",
            "int count"
          ],
          "return_type": "void",
          "logic": "Inserts multiple new input nodes at the specified index, shifting existing inputs."
        },
        {
          "name": "RemoveInput",
          "parameters": [
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Removes the input node at the specified index and returns it."
        },
        {
          "name": "NullAllInputs",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets all inputs of the node to null."
        },
        {
          "name": "TrimInputCount",
          "parameters": [
            "int new_input_count"
          ],
          "return_type": "void",
          "logic": "Trims the number of inputs to the specified count."
        },
        {
          "name": "EnsureInputCount",
          "parameters": [
            "Zone* zone",
            "int new_input_count"
          ],
          "return_type": "void",
          "logic": "Ensures the node has the specified number of inputs, trimming, extending, or doing nothing as needed."
        },
        {
          "name": "UseCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of uses of this node."
        },
        {
          "name": "BranchUseCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of branch uses of this node."
        },
        {
          "name": "ReplaceUses",
          "parameters": [
            "Node* replace_to"
          ],
          "return_type": "void",
          "logic": "Replaces all uses of this node with another node."
        },
        {
          "name": "input_edges",
          "parameters": [],
          "return_type": "InputEdges",
          "logic": "Returns an InputEdges object for iterating over the input edges of this node."
        },
        {
          "name": "inputs",
          "parameters": [],
          "return_type": "Inputs",
          "logic": "Returns an Inputs object for iterating over the inputs of this node."
        },
        {
          "name": "inputs_vector",
          "parameters": [],
          "return_type": "base::Vector<Node*>",
          "logic": "Returns a vector containing the input nodes."
        },
        {
          "name": "use_edges",
          "parameters": [],
          "return_type": "UseEdges",
          "logic": "Returns a UseEdges object for iterating over the use edges of this node."
        },
        {
          "name": "uses",
          "parameters": [],
          "return_type": "Uses",
          "logic": "Returns a Uses object for iterating over the uses of this node."
        },
        {
          "name": "OwnedBy",
          "parameters": [
            "Node const* owner"
          ],
          "return_type": "bool",
          "logic": "Checks if the current node is only used by the specified owner node."
        },
        {
          "name": "OwnedBy",
          "parameters": [
            "Node const* owner1",
            "Node const* owner2"
          ],
          "return_type": "bool",
          "logic": "Checks if the current node is only used by the specified owner nodes."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the node's information."
        },
        {
          "name": "Print",
          "parameters": [
            "int depth"
          ],
          "return_type": "void",
          "logic": "Prints the node's information with a specified depth."
        },
        {
          "name": "Print",
          "parameters": [
            "std::ostream&",
            "int depth"
          ],
          "return_type": "void",
          "logic": "Prints the node's information to a given output stream, with a specified depth."
        }
      ]
    },
    {
      "name": "Node::UseEdges",
      "properties": [
        "node_"
      ],
      "methods": [
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the beginning of the use edges."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the end of the use edges."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are no use edges."
        }
      ]
    },
    {
      "name": "Node::Uses",
      "properties": [
        "node_"
      ],
      "methods": [
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns an iterator to the beginning of the uses."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns an iterator to the end of the uses."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are no uses."
        }
      ]
    },
    {
      "name": "NodeWrapper",
      "properties": [
        "node_"
      ],
      "methods": [
        {
          "name": "NodeWrapper",
          "parameters": [
            "Node* node"
          ],
          "return_type": null,
          "logic": "Constructor for NodeWrapper."
        },
        {
          "name": "operator Node*",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Allows implicit conversion to Node*."
        },
        {
          "name": "operator->",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Allows accessing members of the wrapped Node object."
        }
      ]
    },
    {
      "name": "Effect",
      "properties": [],
      "methods": [
        {
          "name": "Effect",
          "parameters": [
            "Node* node"
          ],
          "return_type": null,
          "logic": "Constructor for Effect."
        },
        {
          "name": "operator=",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Assignment operator for Effect."
        }
      ]
    },
    {
      "name": "Control",
      "properties": [],
      "methods": [
        {
          "name": "Control",
          "parameters": [
            "Node* node"
          ],
          "return_type": null,
          "logic": "Constructor for Control."
        },
        {
          "name": "operator=",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Assignment operator for Control."
        }
      ]
    },
    {
      "name": "Node::InputEdges",
      "properties": [
        "input_root_",
        "use_root_",
        "count_"
      ],
      "methods": [
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the beginning of the input edges."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the end of the input edges."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are no input edges."
        },
        {
          "name": "count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of input edges."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int index"
          ],
          "return_type": "value_type",
          "logic": "Returns the input edge at the specified index."
        }
      ]
    },
    {
      "name": "Node::Inputs",
      "properties": [
        "input_root_",
        "count_"
      ],
      "methods": [
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const_iterator to the beginning of the inputs."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const_iterator to the end of the inputs."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are no inputs."
        },
        {
          "name": "count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of inputs."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int index"
          ],
          "return_type": "value_type",
          "logic": "Returns the input at the specified index."
        }
      ]
    },
    {
      "name": "Edge",
      "properties": [
        "use_",
        "input_ptr_"
      ],
      "methods": [
        {
          "name": "from",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the source Node of the edge."
        },
        {
          "name": "to",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the destination Node of the edge."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the index of this edge in the input list of the destination node."
        },
        {
          "name": "operator==",
          "parameters": [
            "const Edge& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two edges are equal."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const Edge& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two edges are not equal."
        },
        {
          "name": "UpdateTo",
          "parameters": [
            "Node* new_to"
          ],
          "return_type": "void",
          "logic": "Updates the destination node of the edge."
        }
      ]
    },
    {
      "name": "Node::InputEdges::iterator",
      "properties": [
        "use_",
        "input_ptr_"
      ],
      "methods": [
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "Edge",
          "logic": "Dereferences the iterator to return the current Edge."
        },
        {
          "name": "operator==",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for inequality."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "iterator&",
          "logic": "Pre-increment operator."
        },
        {
          "name": "operator++",
          "parameters": [
            "int"
          ],
          "return_type": "iterator",
          "logic": "Post-increment operator."
        },
        {
          "name": "operator+=",
          "parameters": [
            "difference_type offset"
          ],
          "return_type": "iterator&",
          "logic": "Adds an offset to the iterator."
        },
        {
          "name": "operator+",
          "parameters": [
            "difference_type offset"
          ],
          "return_type": "iterator",
          "logic": "Adds an offset to the iterator and returns a new iterator."
        },
        {
          "name": "operator-",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "difference_type",
          "logic": "Subtracts two iterators."
        }
      ]
    },
    {
      "name": "Node::Inputs::const_iterator",
      "properties": [
        "input_ptr_"
      ],
      "methods": [
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Dereferences the iterator to return the current Node*."
        },
        {
          "name": "operator==",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for inequality."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "const_iterator&",
          "logic": "Pre-increment operator."
        },
        {
          "name": "operator++",
          "parameters": [
            "int"
          ],
          "return_type": "const_iterator",
          "logic": "Post-increment operator."
        },
        {
          "name": "operator+=",
          "parameters": [
            "difference_type offset"
          ],
          "return_type": "const_iterator&",
          "logic": "Adds an offset to the iterator."
        },
        {
          "name": "operator+",
          "parameters": [
            "difference_type offset"
          ],
          "return_type": "const_iterator",
          "logic": "Adds an offset to the iterator and returns a new iterator."
        },
        {
          "name": "operator-",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "difference_type",
          "logic": "Subtracts two iterators."
        }
      ]
    },
    {
      "name": "Node::UseEdges::iterator",
      "properties": [
        "current_",
        "next_"
      ],
      "methods": [
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "Edge",
          "logic": "Dereferences the iterator to return the current Edge."
        },
        {
          "name": "operator==",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for inequality."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "iterator&",
          "logic": "Pre-increment operator."
        },
        {
          "name": "operator++",
          "parameters": [
            "int"
          ],
          "return_type": "iterator",
          "logic": "Post-increment operator."
        }
      ]
    },
    {
      "name": "Node::Uses::const_iterator",
      "properties": [
        "current_"
      ],
      "methods": [
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Dereferences the iterator to return the current Node*."
        },
        {
          "name": "operator==",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const const_iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for inequality."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "const_iterator&",
          "logic": "Pre-increment operator."
        },
        {
          "name": "operator++",
          "parameters": [
            "int"
          ],
          "return_type": "const_iterator",
          "logic": "Post-increment operator."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const Node& n"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a Node object to an output stream."
    },
    {
      "name": "begin",
      "parameters": [
        "const Node::Uses& uses"
      ],
      "return_type": "Node::Uses::const_iterator",
      "logic": "Returns a const_iterator to the beginning of the uses."
    },
    {
      "name": "end",
      "parameters": [
        "const Node::Uses& uses"
      ],
      "return_type": "Node::Uses::const_iterator",
      "logic": "Returns a const_iterator to the end of the uses."
    }
  ]
}