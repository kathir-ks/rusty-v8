{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/frame-elider.h",
  "imports": [
    "src/compiler/backend/instruction.h"
  ],
  "classes": [
    {
      "name": "FrameElider",
      "properties": [
        "code_",
        "has_dummy_end_block_",
        "is_wasm_to_js_"
      ],
      "methods": [
        {
          "name": "FrameElider",
          "parameters": [
            "InstructionSequence* code",
            "bool has_dummy_end_block",
            "bool is_wasm_to_js"
          ],
          "return_type": "void",
          "logic": "Constructor for the FrameElider class, initializes the internal state."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Main entry point for the frame elision process."
        },
        {
          "name": "MarkBlocks",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks instruction blocks that potentially need a frame."
        },
        {
          "name": "PropagateMarks",
          "parameters": [],
          "return_type": "void",
          "logic": "Propagates the frame marks through the instruction blocks graph."
        },
        {
          "name": "MarkDeConstruction",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks instruction blocks where frame deconstruction (e.g., stack unwinding) is required."
        },
        {
          "name": "PropagateInOrder",
          "parameters": [],
          "return_type": "bool",
          "logic": "Propagates frame requirements in the forward direction through the control flow graph."
        },
        {
          "name": "PropagateReversed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Propagates frame requirements in the reverse direction through the control flow graph."
        },
        {
          "name": "PropagateIntoBlock",
          "parameters": [
            "InstructionBlock* block"
          ],
          "return_type": "bool",
          "logic": "Propagates frame requirements into a specific instruction block."
        },
        {
          "name": "instruction_blocks",
          "parameters": [],
          "return_type": "const InstructionBlocks&",
          "logic": "Returns a const reference to the collection of instruction blocks."
        },
        {
          "name": "InstructionBlockAt",
          "parameters": [
            "RpoNumber rpo_number"
          ],
          "return_type": "InstructionBlock*",
          "logic": "Returns the instruction block at the specified RPO number."
        },
        {
          "name": "InstructionAt",
          "parameters": [
            "int index"
          ],
          "return_type": "Instruction*",
          "logic": "Returns the instruction at the specified index within the instruction sequence."
        }
      ]
    }
  ],
  "functions": []
}