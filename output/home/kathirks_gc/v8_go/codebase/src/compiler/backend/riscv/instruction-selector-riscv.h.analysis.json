{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/instruction-selector-riscv.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/instruction-selector-riscv.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"src/base/bits.h\",\n    \"src/base/logging.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/common/globals.h\",\n    \"src/compiler/backend/instruction-codes.h\",\n    \"src/compiler/backend/instruction-selector-impl.h\",\n    \"src/compiler/backend/instruction-selector.h\",\n    \"src/compiler/machine-operator.h\",\n    \"src/compiler/turboshaft/operation-matcher.h\",\n    \"src/compiler/turboshaft/operations.h\",\n    \"src/compiler/turboshaft/opmasks.h\",\n    \"src/compiler/turboshaft/representations.h\",\n    \"src/flags/flags.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"RiscvOperandGeneratorT\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"RiscvOperandGeneratorT\",\n          \"parameters\": [\n            \"InstructionSelectorT* selector\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor that initializes the base class OperandGeneratorT with the given selector.\"\n        },\n        {\n          \"name\": \"UseOperand\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"InstructionCode opcode\"\n          ],\n          \"return_type\": \"InstructionOperand\",\n          \"logic\": \"Determines whether a node can be used as an immediate, then returns the corresponding operand, or returns a register operand if it can't.\"\n        },\n        {\n          \"name\": \"UseRegisterOrImmediateZero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"InstructionOperand\",\n          \"logic\": \"Use the zero register if the node has the immediate value zero, otherwise assigns a register.\"\n        },\n        {\n          \"name\": \"IsIntegerConstant\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given node is an integer constant.\"\n        },\n        {\n          \"name\": \"IsIntegerConstant\",\n          \"parameters\": [\n            \"OptionalOpIndex node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the optional node has a value and if that value is an integer constant.\"\n        },\n        {\n          \"name\": \"GetOptionalIntegerConstant\",\n          \"parameters\": [\n            \"OpIndex operation\"\n          ],\n          \"return_type\": \"std::optional<int64_t>\",\n          \"logic\": \"Attempts to match the provided node as a signed integral constant, returning a std::optional<int64_t> containing the constant if it is.\"\n        },\n        {\n          \"name\": \"CanBeZero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a node's value is zero.\"\n        },\n        {\n          \"name\": \"CanBeImmediate\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"InstructionCode mode\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if the specified node can be represented as an immediate value for the given instruction mode.\"\n        },\n        {\n          \"name\": \"CanBeImmediate\",\n          \"parameters\": [\n            \"int64_t value\",\n            \"InstructionCode opcode\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if the specified value can be represented as an immediate value for the given instruction opcode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"InstructionSelectorT\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"VisitStackSlot\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Allocates a stack slot for a given node and emits an instruction to access the stack slot.\"\n        },\n        {\n          \"name\": \"VisitAbortCSADcheck\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an instruction to perform an abort check.\"\n        },\n        {\n          \"name\": \"VisitLoadTransform\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects and emits appropriate instructions for Simd128LoadTransformOp operations based on their transform kind.\"\n        },\n        {\n          \"name\": \"VisitSwitch\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"const SwitchInfo& sw\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the switch statement compilation. Decides whether to use a table switch or a binary search switch based on several criteria.\"\n        },\n        {\n          \"name\": \"VisitFloat32Equal\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 equal comparison operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32LessThan\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 less than comparison operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32LessThanOrEqual\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 less than or equal comparison operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Equal\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 equal comparison operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64LessThan\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 less than comparison operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64LessThanOrEqual\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 less than or equal comparison operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64ExtractLowWord32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 extract low word 32 operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64ExtractHighWord32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 extract high word 32 operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64SilenceNaN\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 silence NaN operation.\"\n        },\n        {\n          \"name\": \"VisitBitcastWord32PairToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the bitcast from a pair of 32-bit words to a float64 value.\"\n        },\n        {\n          \"name\": \"VisitFloat64InsertLowWord32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 insert low word 32 operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64InsertHighWord32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 insert high word 32 operation.\"\n        },\n        {\n          \"name\": \"VisitMemoryBarrier\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a memory barrier instruction.\"\n        },\n        {\n          \"name\": \"IsTailCallAddressImmediate\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if a tail call address can be represented as immediate. Always returns false for RISC-V.\"\n        },\n        {\n          \"name\": \"EmitPrepareResults\",\n          \"parameters\": [\n            \"ZoneVector<PushParameter>* results\",\n            \"const CallDescriptor* call_descriptor\",\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits instructions to move function results to the caller's frame.\"\n        },\n        {\n          \"name\": \"EmitMoveParamToFPR\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"A method that currently does nothing, likely a placeholder or unimplemented functionality.\"\n        },\n        {\n          \"name\": \"EmitMoveFPRToParam\",\n          \"parameters\": [\n            \"InstructionOperand* op\",\n            \"LinkageLocation location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"A method that currently does nothing, likely a placeholder or unimplemented functionality.\"\n        },\n        {\n          \"name\": \"VisitFloat32Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 absolute value operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 absolute value operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Sqrt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 square root operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Sqrt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 square root operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32RoundDown\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 round down operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Add\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 add operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Add\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 add operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Sub\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 subtract operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Sub\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 subtract operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Mul\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 multiply operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Mul\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 multiply operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Div\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 divide operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Div\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 divide operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Mod\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 modulo operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Max\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 max operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Max\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 max operation.\"\n        },\n        {\n          \"name\": \"VisitFloat32Min\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float32 min operation.\"\n        },\n        {\n          \"name\": \"VisitFloat64Min\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles float64 min operation.\"\n        },\n        {\n          \"name\": \"VisitTruncateFloat64ToWord32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles truncation of float64 to 32-bit word operation.\"\n        },\n        {\n          \"name\": \"VisitRoundFloat64ToInt32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles rounding of float64 to int32 operation.\"\n        },\n        {\n          \"name\": \"VisitTruncateFloat64ToFloat32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles truncation of float64 to float32 operation.\"\n        },\n        {\n          \"name\": \"VisitWord32Shl\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit word shift left operation.\"\n        },\n        {\n          \"name\": \"VisitWord32Shr\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit word shift right operation.\"\n        },\n        {\n          \"name\": \"VisitWord32Sar\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit word arithmetic shift right operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4ExtAddPairwiseI16x8S\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the I32x4ExtAddPairwiseI16x8S SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4ExtAddPairwiseI16x8U\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the I32x4ExtAddPairwiseI16x8U SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8ExtAddPairwiseI8x16S\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the I16x8ExtAddPairwiseI8x16S SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8ExtAddPairwiseI8x16U\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the I16x8ExtAddPairwiseI8x16U SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitS128AndNot\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the S128AndNot SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitS128Const\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the S128Const SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitS128Zero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the S128Zero SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2ExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2ExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4ExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4ExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4ExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4ExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2ExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2ExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8UExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I16x8UExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8SExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I16x8SExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16UExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16UExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16SExtractLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16SExtractLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2ReplaceLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2ReplaceLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4ReplaceLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4ReplaceLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2ReplaceLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2ReplaceLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4ReplaceLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4ReplaceLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8ReplaceLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I16x8ReplaceLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16ReplaceLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16ReplaceLane SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2Abs SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2Sqrt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2Sqrt SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2ConvertLowI32x4S\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2ConvertLowI32x4S SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2ConvertLowI32x4U\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2ConvertLowI32x4U SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2PromoteLowF32x4\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2PromoteLowF32x4 SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2Ceil\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2Ceil SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2Floor\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2Floor SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2Trunc\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2Trunc SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF64x2NearestInt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F64x2NearestInt SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4SConvertI32x4\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4SConvertI32x4 SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4UConvertI32x4\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4UConvertI32x4 SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4Abs SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4Sqrt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4Sqrt SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4DemoteF64x2Zero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4DemoteF64x2Zero SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4Ceil\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4Ceil SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4Floor\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4Floor SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4Trunc\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4Trunc SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4NearestInt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4NearestInt SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4RelaxedTruncF32x4S\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4RelaxedTruncF32x4S SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4RelaxedTruncF32x4U\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4RelaxedTruncF32x4U SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4RelaxedTruncF64x2SZero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4RelaxedTruncF64x2SZero SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4RelaxedTruncF64x2UZero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4RelaxedTruncF64x2UZero SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2SConvertI32x4Low\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2SConvertI32x4Low SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2SConvertI32x4High\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2SConvertI32x4High SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2UConvertI32x4Low\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2UConvertI32x4Low SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2UConvertI32x4High\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2UConvertI32x4High SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4SConvertF32x4\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4SConvertF32x4 SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4UConvertF32x4\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4UConvertF32x4 SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4TruncSatF64x2SZero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4TruncSatF64x2SZero SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4TruncSatF64x2UZero\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4TruncSatF64x2UZero SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16Popcnt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16Popcnt SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitS128Not\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles S128Not SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitV128AnyTrue\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles V128AnyTrue SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2Abs SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4Abs SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I16x8Abs SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16Abs\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16Abs SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitF32x4Splat\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles F32x4Splat SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16Neg\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16Neg SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8Neg\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I16x8Neg SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI32x4Neg\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I32x4Neg SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI64x2Neg\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I64x2Neg SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI8x16Splat\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles I8x16Splat SIMD operation.\"\n        },\n        {\n          \"name\": \"VisitI16x8Splat\",\n          \""
}