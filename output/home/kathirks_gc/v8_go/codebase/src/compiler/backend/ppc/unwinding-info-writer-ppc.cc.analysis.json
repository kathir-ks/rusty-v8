{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/ppc/unwinding-info-writer-ppc.cc",
  "imports": [
    "src/compiler/backend/ppc/unwinding-info-writer-ppc.h",
    "src/compiler/backend/instruction.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "UnwindingInfoWriter::BeginInstructionBlock",
      "parameters": [
        "int pc_offset",
        "const InstructionBlock* block"
      ],
      "return_type": "void",
      "logic": "This function starts processing an instruction block for unwinding information. It checks if unwinding info generation is enabled and retrieves the initial state of the block.  If the saved link register status (saved_lr_) has changed since the previous block, it records the change in the eh_frame_writer_ by either saving it to stack or using initial rule. It updates the current saved_lr_ to the block's initial state."
    },
    {
      "name": "UnwindingInfoWriter::EndInstructionBlock",
      "parameters": [
        "const InstructionBlock* block"
      ],
      "return_type": "void",
      "logic": "This function finishes processing an instruction block. It iterates through the successors of the block. For each successor, it checks if an initial state is already recorded. If it is, it verifies the saved_lr_ is consistent. If not, it creates a new BlockInitialState for the successor with the current saved_lr_."
    },
    {
      "name": "UnwindingInfoWriter::MarkFrameConstructed",
      "parameters": [
        "int at_pc"
      ],
      "return_type": "void",
      "logic": "This function is called when a stack frame is constructed. It records the fact that the link register (LR) and frame pointer (FP) are saved on the stack using the eh_frame_writer_. It then sets the saved_lr_ flag to true."
    },
    {
      "name": "UnwindingInfoWriter::MarkFrameDeconstructed",
      "parameters": [
        "int at_pc"
      ],
      "return_type": "void",
      "logic": "This function is called when a stack frame is deconstructed. It records that the link register (LR) now follows its initial rule, indicating that it has been restored. It sets the saved_lr_ flag to false."
    },
    {
      "name": "UnwindingInfoWriter::MarkLinkRegisterOnTopOfStack",
      "parameters": [
        "int pc_offset"
      ],
      "return_type": "void",
      "logic": "This function is called when the link register is placed on top of the stack, often as part of a function call. It records this information using eh_frame_writer_ for unwinding purposes, marking the link register as saved at the current stack pointer."
    },
    {
      "name": "UnwindingInfoWriter::MarkPopLinkRegisterFromTopOfStack",
      "parameters": [
        "int pc_offset"
      ],
      "return_type": "void",
      "logic": "This function is called when the link register is popped from the top of the stack, as part of function return sequence. It records that the link register now follows its initial rule, indicating it is restored to its original value, and resets the base address register."
    }
  ]
}