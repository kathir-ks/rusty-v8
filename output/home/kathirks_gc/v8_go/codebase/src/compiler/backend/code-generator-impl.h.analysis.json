{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/code-generator-impl.h",
  "imports": [
    "src/codegen/macro-assembler.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/instruction.h",
    "src/compiler/linkage.h",
    "src/compiler/opcodes.h"
  ],
  "classes": [
    {
      "name": "InstructionOperandConverter",
      "properties": [
        "gen_",
        "instr_"
      ],
      "methods": [
        {
          "name": "InstructionOperandConverter",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the CodeGenerator and Instruction pointers."
        },
        {
          "name": "InputRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Register",
          "logic": "Retrieves an input operand at the given index and converts it to a Register."
        },
        {
          "name": "InputFloatRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "FloatRegister",
          "logic": "Retrieves an input operand at the given index and converts it to a FloatRegister."
        },
        {
          "name": "InputDoubleRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "DoubleRegister",
          "logic": "Retrieves an input operand at the given index and converts it to a DoubleRegister."
        },
        {
          "name": "InputSimd128Register",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Simd128Register",
          "logic": "Retrieves an input operand at the given index and converts it to a Simd128Register."
        },
        {
          "name": "InputDouble",
          "parameters": [
            "size_t index"
          ],
          "return_type": "double",
          "logic": "Retrieves an input operand at the given index and converts it to a double."
        },
        {
          "name": "InputFloat32",
          "parameters": [
            "size_t index"
          ],
          "return_type": "float",
          "logic": "Retrieves an input operand at the given index and converts it to a float."
        },
        {
          "name": "InputInt32",
          "parameters": [
            "size_t index"
          ],
          "return_type": "int32_t",
          "logic": "Retrieves an input operand at the given index, converts it to a Constant, and returns its int32 value."
        },
        {
          "name": "InputUint32",
          "parameters": [
            "size_t index"
          ],
          "return_type": "uint32_t",
          "logic": "Retrieves an input operand at the given index and converts it to a uint32_t."
        },
        {
          "name": "InputInt64",
          "parameters": [
            "size_t index"
          ],
          "return_type": "int64_t",
          "logic": "Retrieves an input operand at the given index, converts it to a Constant, and returns its int64 value."
        },
        {
          "name": "InputInt8",
          "parameters": [
            "size_t index"
          ],
          "return_type": "int8_t",
          "logic": "Retrieves an input operand at the given index and converts it to an int8_t."
        },
        {
          "name": "InputUint8",
          "parameters": [
            "size_t index"
          ],
          "return_type": "uint8_t",
          "logic": "Retrieves an input operand at the given index and converts it to an uint8_t."
        },
        {
          "name": "InputInt16",
          "parameters": [
            "size_t index"
          ],
          "return_type": "int16_t",
          "logic": "Retrieves an input operand at the given index and converts it to an int16_t."
        },
        {
          "name": "InputInt3",
          "parameters": [
            "size_t index"
          ],
          "return_type": "uint8_t",
          "logic": "Retrieves an input operand at the given index and converts it to a uint8_t representing a 3-bit integer."
        },
        {
          "name": "InputInt4",
          "parameters": [
            "size_t index"
          ],
          "return_type": "uint8_t",
          "logic": "Retrieves an input operand at the given index and converts it to a uint8_t representing a 4-bit integer."
        },
        {
          "name": "InputInt5",
          "parameters": [
            "size_t index"
          ],
          "return_type": "uint8_t",
          "logic": "Retrieves an input operand at the given index and converts it to a uint8_t representing a 5-bit integer."
        },
        {
          "name": "InputInt6",
          "parameters": [
            "size_t index"
          ],
          "return_type": "uint8_t",
          "logic": "Retrieves an input operand at the given index and converts it to a uint8_t representing a 6-bit integer."
        },
        {
          "name": "InputCodeEntrypointTag",
          "parameters": [
            "size_t index"
          ],
          "return_type": "CodeEntrypointTag",
          "logic": "Retrieves an input operand at the given index and converts it to a CodeEntrypointTag."
        },
        {
          "name": "InputExternalReference",
          "parameters": [
            "size_t index"
          ],
          "return_type": "ExternalReference",
          "logic": "Retrieves an input operand at the given index and converts it to an ExternalReference."
        },
        {
          "name": "InputCode",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Handle<Code>",
          "logic": "Retrieves an input operand at the given index and converts it to a Handle<Code>."
        },
        {
          "name": "InputLabel",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Label*",
          "logic": "Retrieves an input operand at the given index and converts it to a Label*."
        },
        {
          "name": "InputRpo",
          "parameters": [
            "size_t index"
          ],
          "return_type": "RpoNumber",
          "logic": "Retrieves an input operand at the given index and converts it to an RpoNumber."
        },
        {
          "name": "OutputRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Register",
          "logic": "Retrieves an output operand at the given index and converts it to a Register."
        },
        {
          "name": "TempRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Register",
          "logic": "Retrieves a temporary operand at the given index and converts it to a Register."
        },
        {
          "name": "OutputFloatRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "FloatRegister",
          "logic": "Retrieves an output operand at the given index and converts it to a FloatRegister."
        },
        {
          "name": "OutputDoubleRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "DoubleRegister",
          "logic": "Retrieves an output operand at the given index and converts it to a DoubleRegister."
        },
        {
          "name": "TempDoubleRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "DoubleRegister",
          "logic": "Retrieves a temporary operand at the given index and converts it to a DoubleRegister."
        },
        {
          "name": "OutputSimd128Register",
          "parameters": [],
          "return_type": "Simd128Register",
          "logic": "Retrieves an output operand and converts it to a Simd128Register."
        },
        {
          "name": "TempSimd128Register",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Simd128Register",
          "logic": "Retrieves a temporary operand at the given index and converts it to a Simd128Register."
        },
        {
          "name": "InputSimd256Register",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Simd256Register",
          "logic": "Retrieves an input operand at the given index and converts it to a Simd256Register. (x64 specific)"
        },
        {
          "name": "OutputSimd256Register",
          "parameters": [],
          "return_type": "Simd256Register",
          "logic": "Retrieves an output operand and converts it to a Simd256Register. (x64 specific)"
        },
        {
          "name": "TempSimd256Register",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Simd256Register",
          "logic": "Retrieves a temporary operand at the given index and converts it to a Simd256Register. (x64 specific)"
        },
        {
          "name": "ToLabel",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "Label*",
          "logic": "Converts an InstructionOperand to a Label*."
        },
        {
          "name": "ToRpoNumber",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "RpoNumber",
          "logic": "Converts an InstructionOperand to an RpoNumber."
        },
        {
          "name": "ToRegister",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "Register",
          "logic": "Converts an InstructionOperand to a Register."
        },
        {
          "name": "ToFloatRegister",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "FloatRegister",
          "logic": "Converts an InstructionOperand to a FloatRegister."
        },
        {
          "name": "ToDoubleRegister",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "DoubleRegister",
          "logic": "Converts an InstructionOperand to a DoubleRegister."
        },
        {
          "name": "ToSimd128Register",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "Simd128Register",
          "logic": "Converts an InstructionOperand to a Simd128Register."
        },
        {
          "name": "ToSimd256Register",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "Simd256Register",
          "logic": "Converts an InstructionOperand to a Simd256Register. (x64 specific)"
        },
        {
          "name": "ToConstant",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "Constant",
          "logic": "Converts an InstructionOperand to a Constant."
        },
        {
          "name": "ToDouble",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "double",
          "logic": "Converts an InstructionOperand to a double."
        },
        {
          "name": "ToFloat32",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "float",
          "logic": "Converts an InstructionOperand to a float."
        },
        {
          "name": "ToExternalReference",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "ExternalReference",
          "logic": "Converts an InstructionOperand to an ExternalReference."
        },
        {
          "name": "ToCode",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "Handle<Code>",
          "logic": "Converts an InstructionOperand to a Handle<Code>."
        },
        {
          "name": "frame",
          "parameters": [],
          "return_type": "const Frame*",
          "logic": "Returns the current frame."
        },
        {
          "name": "frame_access_state",
          "parameters": [],
          "return_type": "FrameAccessState*",
          "logic": "Returns the current frame access state."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate."
        },
        {
          "name": "linkage",
          "parameters": [],
          "return_type": "Linkage*",
          "logic": "Returns the Linkage."
        }
      ]
    },
    {
      "name": "DeoptimizationExit",
      "properties": [
        "deoptimization_id_",
        "pos_",
        "bailout_id_",
        "translation_id_",
        "pc_offset_",
        "kind_",
        "reason_",
        "node_id_",
        "immediate_args_",
        "emitted_"
      ],
      "methods": [
        {
          "name": "DeoptimizationExit",
          "parameters": [
            "SourcePosition pos",
            "BytecodeOffset bailout_id",
            "int translation_id",
            "int pc_offset",
            "DeoptimizeKind kind",
            "DeoptimizeReason reason",
            "NodeId node_id"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the deoptimization exit information."
        },
        {
          "name": "has_deoptimization_id",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the deoptimization id has been set."
        },
        {
          "name": "deoptimization_id",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the deoptimization id."
        },
        {
          "name": "set_deoptimization_id",
          "parameters": [
            "int deoptimization_id"
          ],
          "return_type": "void",
          "logic": "Sets the deoptimization id."
        },
        {
          "name": "pos",
          "parameters": [],
          "return_type": "SourcePosition",
          "logic": "Returns the source position of the deoptimization point."
        },
        {
          "name": "label",
          "parameters": [],
          "return_type": "Label*",
          "logic": "Returns the label for the deoptimization call."
        },
        {
          "name": "continue_label",
          "parameters": [],
          "return_type": "Label*",
          "logic": "Returns the label to continue execution after deoptimization."
        },
        {
          "name": "bailout_id",
          "parameters": [],
          "return_type": "BytecodeOffset",
          "logic": "Returns the bytecode offset for the bailout."
        },
        {
          "name": "translation_id",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the translation id."
        },
        {
          "name": "pc_offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the program counter offset."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "DeoptimizeKind",
          "logic": "Returns the deoptimization kind."
        },
        {
          "name": "reason",
          "parameters": [],
          "return_type": "DeoptimizeReason",
          "logic": "Returns the deoptimization reason."
        },
        {
          "name": "node_id",
          "parameters": [],
          "return_type": "NodeId",
          "logic": "Returns the node id associated with the deoptimization."
        },
        {
          "name": "immediate_args",
          "parameters": [],
          "return_type": "const ZoneVector<ImmediateOperand*>*",
          "logic": "Returns the immediate arguments for deoptimization."
        },
        {
          "name": "set_immediate_args",
          "parameters": [
            "ZoneVector<ImmediateOperand*>* immediate_args"
          ],
          "return_type": "void",
          "logic": "Sets the immediate arguments for deoptimization."
        },
        {
          "name": "emitted",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the deoptimization exit has been emitted."
        },
        {
          "name": "set_emitted",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the emitted flag to true."
        }
      ]
    },
    {
      "name": "OutOfLineCode",
      "properties": [
        "entry_",
        "exit_",
        "frame_",
        "masm_",
        "next_"
      ],
      "methods": [
        {
          "name": "OutOfLineCode",
          "parameters": [
            "CodeGenerator* gen"
          ],
          "return_type": "explicit",
          "logic": "Constructor for out-of-line code. Initializes the CodeGenerator pointer."
        },
        {
          "name": "~OutOfLineCode",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual Destructor."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Abstract method to generate the out-of-line code."
        },
        {
          "name": "entry",
          "parameters": [],
          "return_type": "Label*",
          "logic": "Returns the entry label."
        },
        {
          "name": "exit",
          "parameters": [],
          "return_type": "Label*",
          "logic": "Returns the exit label."
        },
        {
          "name": "frame",
          "parameters": [],
          "return_type": "const Frame*",
          "logic": "Returns the frame."
        },
        {
          "name": "masm",
          "parameters": [],
          "return_type": "MacroAssembler*",
          "logic": "Returns the MacroAssembler."
        },
        {
          "name": "next",
          "parameters": [],
          "return_type": "OutOfLineCode*",
          "logic": "Returns the next out-of-line code block."
        }
      ]
    }
  ],
  "functions": []
}