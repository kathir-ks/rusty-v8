{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/instruction-scheduler.cc",
  "imports": [
    "src/compiler/backend/instruction-scheduler.h",
    "<optional>",
    "src/base/iterator.h",
    "src/base/utils/random-number-generator.h",
    "src/compiler/backend/instruction-codes.h"
  ],
  "classes": [
    {
      "name": "InstructionScheduler::SchedulingQueueBase",
      "properties": [
        "nodes_"
      ],
      "methods": [
        {
          "name": "AddNode",
          "parameters": [
            "ScheduleGraphNode* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the scheduling queue, maintaining the sorted order based on total latency (descending)."
        }
      ]
    },
    {
      "name": "InstructionScheduler::CriticalPathFirstQueue",
      "properties": [],
      "methods": [
        {
          "name": "PopBestCandidate",
          "parameters": [
            "int cycle"
          ],
          "return_type": "InstructionScheduler::ScheduleGraphNode*",
          "logic": "Pops the best candidate node from the queue based on the 'cycle' and latency. It iterates through nodes in the queue and returns the first node whose start_cycle is less than or equal to the current 'cycle'. This prioritizes nodes on the critical path that are ready to be scheduled."
        }
      ]
    },
    {
      "name": "InstructionScheduler::StressSchedulerQueue",
      "properties": [],
      "methods": [
        {
          "name": "PopBestCandidate",
          "parameters": [
            "int cycle"
          ],
          "return_type": "InstructionScheduler::ScheduleGraphNode*",
          "logic": "Pops a random candidate node from the queue. This is used for stress testing the instruction scheduler."
        }
      ]
    },
    {
      "name": "InstructionScheduler::ScheduleGraphNode",
      "properties": [
        "instr_",
        "successors_",
        "unscheduled_predecessors_count_",
        "latency_",
        "total_latency_",
        "start_cycle_"
      ],
      "methods": [
        {
          "name": "ScheduleGraphNode",
          "parameters": [
            "Zone* zone",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for the ScheduleGraphNode. Initializes the node with the given instruction, latency and other metadata."
        },
        {
          "name": "AddSuccessor",
          "parameters": [
            "ScheduleGraphNode* node"
          ],
          "return_type": "void",
          "logic": "Adds a successor node to the current node.  Increments the unscheduled_predecessors_count_ of the successor."
        }
      ]
    },
    {
      "name": "InstructionScheduler",
      "properties": [
        "zone_",
        "sequence_",
        "graph_",
        "last_side_effect_instr_",
        "pending_loads_",
        "last_live_in_reg_marker_",
        "last_deopt_or_trap_",
        "operands_map_",
        "random_number_generator_"
      ],
      "methods": [
        {
          "name": "InstructionScheduler",
          "parameters": [
            "Zone* zone",
            "InstructionSequence* sequence"
          ],
          "return_type": "void",
          "logic": "Constructor for the InstructionScheduler. Initializes the scheduler with the given zone and instruction sequence.  Also handles enabling the stress scheduling based on a flag."
        },
        {
          "name": "StartBlock",
          "parameters": [
            "RpoNumber rpo"
          ],
          "return_type": "void",
          "logic": "Starts processing a new basic block. Clears internal state."
        },
        {
          "name": "EndBlock",
          "parameters": [
            "RpoNumber rpo"
          ],
          "return_type": "void",
          "logic": "Ends processing of the current basic block. Schedules the instructions based on the selected strategy (CriticalPathFirstQueue or StressSchedulerQueue) and adds the block end to the InstructionSequence."
        },
        {
          "name": "AddTerminator",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Adds a terminator instruction to the scheduling graph. Terminators are made successors of every instruction to ensure they are scheduled last."
        },
        {
          "name": "AddInstruction",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Adds an instruction to the scheduling graph, considering dependencies and side effects to maintain correct instruction ordering. It handles side effects, loads, and dependencies on deoptimization points. Operands are tracked for virtual register dependencies."
        },
        {
          "name": "Schedule",
          "parameters": [],
          "return_type": "void",
          "logic": "Schedules the instructions in the graph using the provided queue type (either CriticalPathFirstQueue or StressSchedulerQueue).  Computes total latencies, adds ready nodes to the queue, iterates through the queue to schedule nodes, and then resets its internal state."
        },
        {
          "name": "GetInstructionFlags",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "int",
          "logic": "Determines the instruction flags (e.g., kHasSideEffect, kIsLoadOperation, kIsBarrier) based on the instruction's opcode. It uses a switch statement and calls GetTargetInstructionFlags for target specific opcodes."
        },
        {
          "name": "ComputeTotalLatencies",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes the total latency for each node in the graph by traversing the graph in reverse topological order. Total latency is the sum of the node's latency and the maximum total latency of its successors."
        }
      ]
    }
  ],
  "functions": []
}