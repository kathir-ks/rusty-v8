{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/register-allocation.h",
  "imports": [
    "src/codegen/register-configuration.h",
    "src/zone/zone.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "GetRegisterCount",
      "parameters": [
        "const RegisterConfiguration* config",
        "RegisterKind kind"
      ],
      "return_type": "int",
      "logic": "Returns the total number of registers of a given kind (general, double, or SIMD128) from the provided RegisterConfiguration. It uses a switch statement to determine the appropriate count based on the RegisterKind."
    },
    {
      "name": "GetAllocatableRegisterCount",
      "parameters": [
        "const RegisterConfiguration* config",
        "RegisterKind kind"
      ],
      "return_type": "int",
      "logic": "Returns the number of *allocatable* registers of a given kind from the RegisterConfiguration. Allocatable registers are those available for the register allocator to use. It uses a switch statement to determine the appropriate count based on the RegisterKind."
    },
    {
      "name": "GetAllocatableRegisterCodes",
      "parameters": [
        "const RegisterConfiguration* config",
        "RegisterKind kind"
      ],
      "return_type": "const int*",
      "logic": "Returns a pointer to an array of integer codes representing the allocatable registers of a given kind.  This allows the register allocator to iterate over the allocatable registers. It uses a switch statement to return the appropriate array based on the RegisterKind."
    },
    {
      "name": "ByteWidthForStackSlot",
      "parameters": [
        "MachineRepresentation rep"
      ],
      "return_type": "int",
      "logic": "Returns the byte width required for a stack slot based on the given MachineRepresentation. This is used for stack frame layout and determining the size of data stored on the stack. The function uses a switch statement to determine the appropriate size for each representation."
    }
  ]
}