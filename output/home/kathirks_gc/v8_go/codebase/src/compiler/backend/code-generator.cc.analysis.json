{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/code-generator.cc",
  "imports": [
    "src/compiler/backend/code-generator.h",
    "<optional>",
    "src/base/bounds.h",
    "src/base/iterator.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/macro-assembler-inl.h",
    "src/codegen/optimized-compilation-info.h",
    "src/compiler/backend/code-generator-impl.h",
    "src/compiler/globals.h",
    "src/compiler/linkage.h",
    "src/compiler/pipeline.h",
    "src/deoptimizer/translated-state.h",
    "src/diagnostics/eh-frame.h",
    "src/execution/frames.h",
    "src/logging/counters.h",
    "src/logging/log.h",
    "src/objects/code-kind.h",
    "src/objects/smi.h",
    "src/utils/address-map.h",
    "src/utils/utils.h",
    "src/wasm/wasm-deopt-data.h"
  ],
  "classes": [
    {
      "name": "CodeGenerator::JumpTable",
      "properties": [
        "label_",
        "next_",
        "targets_"
      ],
      "methods": [
        {
          "name": "JumpTable",
          "parameters": [
            "JumpTable* next",
            "const base::Vector<Label*>& targets"
          ],
          "return_type": "void",
          "logic": "Constructor for the JumpTable class. Initializes the next_ and targets_ members."
        },
        {
          "name": "label",
          "parameters": [],
          "return_type": "Label*",
          "logic": "Returns a pointer to the internal label_ member."
        },
        {
          "name": "next",
          "parameters": [],
          "return_type": "JumpTable* const",
          "logic": "Returns a pointer to the next JumpTable in the linked list."
        },
        {
          "name": "targets",
          "parameters": [],
          "return_type": "const base::Vector<Label*>&",
          "logic": "Returns a constant reference to the vector of target labels."
        }
      ]
    },
    {
      "name": "CodeGenerator",
      "properties": [
        "zone_",
        "isolate_",
        "frame_access_state_",
        "linkage_",
        "instructions_",
        "unwinding_info_writer_",
        "info_",
        "labels_",
        "current_block_",
        "start_source_position_",
        "current_source_position_",
        "masm_",
        "resolver_",
        "safepoints_",
        "handlers_",
        "deoptimization_exits_",
        "protected_deoptimization_literals_",
        "deoptimization_literals_",
        "translations_",
        "max_unoptimized_frame_height_",
        "max_pushed_argument_count_",
        "caller_registers_saved_",
        "jump_tables_",
        "ools_",
        "osr_helper_",
        "osr_pc_offset_",
        "source_position_table_builder_",
        "protected_instructions_",
        "result_",
        "block_starts_",
        "instr_starts_",
        "debug_name_",
        "parameter_count_",
        "inlined_function_count_",
        "deopt_exit_start_offset_",
        "eager_deopt_count_",
        "lazy_deopt_count_",
        "offsets_info_",
        "jump_deoptimization_entry_labels_",
        "next_deoptimization_id_",
        "jump_optimization_info_"
      ],
      "methods": [
        {
          "name": "CodeGenerator",
          "parameters": [
            "Zone* codegen_zone",
            "Frame* frame",
            "Linkage* linkage",
            "InstructionSequence* instructions",
            "OptimizedCompilationInfo* info",
            "Isolate* isolate",
            "std::optional<OsrHelper> osr_helper",
            "int start_source_position",
            "JumpOptimizationInfo* jump_opt",
            "const AssemblerOptions& options",
            "Builtin builtin",
            "size_t max_unoptimized_frame_height",
            "size_t max_pushed_argument_count",
            "const char* debug_name"
          ],
          "return_type": "void",
          "logic": "Constructor for the CodeGenerator class. Initializes various members including zones, frame access state, linkage, assembler, safepoints, and deoptimization information. It also initializes the label array and sets up the frame."
        },
        {
          "name": "RecordProtectedInstruction",
          "parameters": [
            "uint32_t instr_offset"
          ],
          "return_type": "void",
          "logic": "Records a protected instruction offset (used for WebAssembly)."
        },
        {
          "name": "CreateFrameAccessState",
          "parameters": [
            "Frame* frame"
          ],
          "return_type": "void",
          "logic": "Creates a FrameAccessState object to manage access to the stack frame."
        },
        {
          "name": "ShouldApplyOffsetToStackCheck",
          "parameters": [
            "Instruction* instr",
            "uint32_t* offset"
          ],
          "return_type": "bool",
          "logic": "Determines if an offset should be applied to the stack check instruction and calculates that offset."
        },
        {
          "name": "GetStackCheckOffset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates the offset to be used for stack checks based on the optimized and unoptimized frame heights and pushed argument count."
        },
        {
          "name": "AssembleDeoptimizerCall",
          "parameters": [
            "DeoptimizationExit* exit"
          ],
          "return_type": "CodeGenerator::CodeGenResult",
          "logic": "Assembles a call to the deoptimizer based on the deoptimization kind and reason. Binds exception handlers in the case of lazy deopts."
        },
        {
          "name": "MaybeEmitOutOfLineConstantPool",
          "parameters": [],
          "return_type": "void",
          "logic": "Calls assembler to emit out of line constant pool (if needed)"
        },
        {
          "name": "AssembleCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Assembles the main code by setting up a frame scope, emitting source position information, checking the code start register, checking for deoptimization, defining deoptimization literals, and assembling the instruction blocks."
        },
        {
          "name": "AssembleArchBinarySearchSwitchRange",
          "parameters": [
            "Register input",
            "RpoNumber def_block",
            "std::pair<int32_t, Label*>* begin",
            "std::pair<int32_t, Label*>* end"
          ],
          "return_type": "void",
          "logic": "Assembles a binary search switch range (architecture-specific). Handles the generation of binary search trees for switch statements."
        },
        {
          "name": "AssembleArchJump",
          "parameters": [
            "RpoNumber target"
          ],
          "return_type": "void",
          "logic": "Assembles an architecture-specific jump to a target block if it's not the next block in assembly order."
        },
        {
          "name": "GetSourcePositionTable",
          "parameters": [],
          "return_type": "base::OwnedVector<uint8_t>",
          "logic": "Returns the source position table as a vector of bytes."
        },
        {
          "name": "GetProtectedInstructionsData",
          "parameters": [],
          "return_type": "base::OwnedVector<uint8_t>",
          "logic": "Returns the protected instructions data (used for WebAssembly)."
        },
        {
          "name": "FinalizeCode",
          "parameters": [],
          "return_type": "MaybeHandle<Code>",
          "logic": "Finalizes the generated code by allocating the source position table, getting the code from the assembler, and creating a Code object with the generated data."
        },
        {
          "name": "IsNextInAssemblyOrder",
          "parameters": [
            "RpoNumber block"
          ],
          "return_type": "bool",
          "logic": "Checks if a given block is the next one in assembly order."
        },
        {
          "name": "RecordSafepoint",
          "parameters": [
            "ReferenceMap* references",
            "int pc_offset"
          ],
          "return_type": "void",
          "logic": "Records a safepoint with the given references at the given PC offset. Iterates frame's tagged slots and defines them in the safepoint."
        },
        {
          "name": "IsMaterializableFromRoot",
          "parameters": [
            "Handle<HeapObject> object",
            "RootIndex* index_return"
          ],
          "return_type": "bool",
          "logic": "Checks if a heap object is materializable from the root table."
        },
        {
          "name": "AssembleBlock",
          "parameters": [
            "const InstructionBlock* block"
          ],
          "return_type": "CodeGenerator::CodeGenResult",
          "logic": "Assembles all instructions within a given instruction block."
        },
        {
          "name": "IsValidPush",
          "parameters": [
            "InstructionOperand source",
            "CodeGenerator::PushTypeFlags push_type"
          ],
          "return_type": "bool",
          "logic": "Checks if a source operand is valid for pushing, based on its type and the given push type flags."
        },
        {
          "name": "GetPushCompatibleMoves",
          "parameters": [
            "Instruction* instr",
            "PushTypeFlags push_type",
            "ZoneVector<MoveOperands*>* pushes"
          ],
          "return_type": "void",
          "logic": "Retrieves push compatible moves from the instruction and stores them into pushes vector. It only considers moves from FIRST gap."
        },
        {
          "name": "ComputeBranchInfo",
          "parameters": [
            "BranchInfo* branch",
            "FlagsCondition condition",
            "Instruction* instr"
          ],
          "return_type": "RpoNumber",
          "logic": "Computes branch information (target labels, condition) based on the flags condition and the instruction, potentially swapping true and false blocks for optimization."
        },
        {
          "name": "AssembleInstruction",
          "parameters": [
            "int instruction_index",
            "const InstructionBlock* block"
          ],
          "return_type": "CodeGenerator::CodeGenResult",
          "logic": "Assembles a single instruction, including handling gaps, source positions, architecture-specific code, and conditional branches or deoptimizations."
        },
        {
          "name": "AssembleSourcePosition",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Assembles the source position information from the instruction."
        },
        {
          "name": "AssembleSourcePosition",
          "parameters": [
            "SourcePosition source_position"
          ],
          "return_type": "void",
          "logic": "Assembles the source position and adds to the SourcePositionTableBuilder."
        },
        {
          "name": "GetSlotAboveSPBeforeTailCall",
          "parameters": [
            "Instruction* instr",
            "int* slot"
          ],
          "return_type": "bool",
          "logic": "Retrieves the slot number if the instruction is a tail call. "
        },
        {
          "name": "DetermineStubCallMode",
          "parameters": [],
          "return_type": "StubCallMode",
          "logic": "Determines the stub call mode based on code kind."
        },
        {
          "name": "AssembleGaps",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Resolves the parallel moves (gaps) associated with an instruction."
        },
        {
          "name": "GenerateDeoptimizationData",
          "parameters": [],
          "return_type": "Handle<DeoptimizationData>",
          "logic": "Generates the deoptimization data used for lazy and eager deoptimizations, populating information such as frame translations, inlined function count, optimization id, and deoptimization exits."
        },
        {
          "name": "GenerateWasmDeoptimizationData",
          "parameters": [],
          "return_type": "base::OwnedVector<uint8_t>",
          "logic": "Generates the WebAssembly deoptimization data used for eager deoptimizations, populating information such as frame translations, and deoptimization exits. It returns the serialized version of this data."
        },
        {
          "name": "AddJumpTable",
          "parameters": [
            "base::Vector<Label*> targets"
          ],
          "return_type": "Label*",
          "logic": "Adds a jump table to the code generator's list of jump tables."
        },
        {
          "name": "AssemblePlaceHolderForLazyDeopt",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Assembles a placeholder instruction for lazy deoptimization."
        },
        {
          "name": "RecordCallPosition",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Records call position information, including safepoints and handler tables."
        },
        {
          "name": "RecordDeoptInfo",
          "parameters": [
            "Instruction* instr",
            "int pc_offset"
          ],
          "return_type": "void",
          "logic": "Records deoptimization information for call sites"
        },
        {
          "name": "DefineProtectedDeoptimizationLiteral",
          "parameters": [
            "IndirectHandle<TrustedObject> object"
          ],
          "return_type": "int",
          "logic": "Defines a deoptimization literal that is protected from garbage collection."
        },
        {
          "name": "DefineDeoptimizationLiteral",
          "parameters": [
            "DeoptimizationLiteral literal"
          ],
          "return_type": "int",
          "logic": "Defines a deoptimization literal. Used to store constants for deoptimization."
        },
        {
          "name": "HasProtectedDeoptimizationLiteral",
          "parameters": [
            "IndirectHandle<TrustedObject> object"
          ],
          "return_type": "bool",
          "logic": "Checks if a protected deoptimization literal is already defined."
        },
        {
          "name": "GetDeoptimizationEntry",
          "parameters": [
            "Instruction* instr",
            "size_t frame_state_offset"
          ],
          "return_type": "DeoptimizationEntry const&",
          "logic": "Gets the deoptimization entry from the instruction's deoptimization environment."
        },
        {
          "name": "TranslateStateValueDescriptor",
          "parameters": [
            "StateValueDescriptor* desc",
            "StateValueList* nested",
            "InstructionOperandIterator* iter"
          ],
          "return_type": "void",
          "logic": "Translates the state value descriptors to the translation buffer. Handles nested objects and special state values."
        },
        {
          "name": "TranslateFrameStateDescriptorOperands",
          "parameters": [
            "FrameStateDescriptor* desc",
            "InstructionOperandIterator* iter"
          ],
          "return_type": "void",
          "logic": "Iterates over the StateValueDescriptors and translates them individually."
        },
        {
          "name": "BuildTranslationForFrameStateDescriptor",
          "parameters": [
            "FrameStateDescriptor* descriptor",
            "InstructionOperandIterator* iter",
            "OutputFrameStateCombine state_combine"
          ],
          "return_type": "void",
          "logic": "Builds the translation for a frame state descriptor, including handling outer states and shared function info."
        },
        {
          "name": "BuildTranslation",
          "parameters": [
            "Instruction* instr",
            "int pc_offset",
            "size_t frame_state_offset",
            "size_t immediate_args_count",
            "OutputFrameStateCombine state_combine"
          ],
          "return_type": "DeoptimizationExit*",
          "logic": "Builds the translation for deoptimization, based on frame state descriptors and the PC offset. Returns a deoptimization exit."
        },
        {
          "name": "AddTranslationForOperand",
          "parameters": [
            "Instruction* instr",
            "InstructionOperand* op",
            "MachineType type"
          ],
          "return_type": "void",
          "logic": "Adds a translation for a single operand, storing its value in the translation buffer based on the operand type and machine type."
        },
        {
          "name": "AddDeoptimizationExit",
          "parameters": [
            "Instruction* instr",
            "size_t frame_state_offset",
            "size_t immediate_args_count"
          ],
          "return_type": "DeoptimizationExit*",
          "logic": "Adds a deoptimization exit to the list, building its translation."
        }
      ]
    },
    {
      "name": "CodeGenerator::MoveType",
      "properties": [],
      "methods": [],
      "logic": "Namespace for MoveType enumeration."
    },
    {
      "name": "OutOfLineCode",
      "properties": [
        "frame_",
        "masm_",
        "next_",
        "entry_",
        "exit_"
      ],
      "methods": [
        {
          "name": "OutOfLineCode",
          "parameters": [
            "CodeGenerator* gen"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineCode class. Links itself into the CodeGenerator's list of OOLs."
        },
        {
          "name": "~OutOfLineCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CreateInliningPositions",
      "parameters": [
        "OptimizedCompilationInfo* info",
        "Isolate* isolate"
      ],
      "return_type": "DirectHandle<TrustedPodArray<InliningPosition>>",
      "logic": "Creates an inlining positions array from optimized compilation info."
    }
  ]
}