{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/instruction.cc",
  "imports": [
    "src/compiler/backend/instruction.h",
    "<cstddef>",
    "<iomanip>",
    "src/base/iterator.h",
    "src/codegen/aligned-slot-allocator.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/machine-type.h",
    "src/codegen/register-configuration.h",
    "src/codegen/source-position.h",
    "src/compiler/backend/instruction-codes.h",
    "src/compiler/common-operator.h",
    "src/compiler/frame-states.h",
    "src/compiler/node.h",
    "src/compiler/schedule.h",
    "src/compiler/turbofan-graph.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/loop-finder.h",
    "src/compiler/turboshaft/operations.h",
    "src/deoptimizer/deoptimizer.h",
    "src/execution/frames.h",
    "src/execution/isolate-utils-inl.h",
    "src/objects/heap-object-inl.h",
    "src/objects/instance-type-inl.h",
    "src/utils/ostreams.h",
    "src/wasm/value-type.h"
  ],
  "classes": [
    {
      "name": "InstructionOperand",
      "properties": [],
      "methods": [
        {
          "name": "InterferesWith",
          "parameters": [
            "const InstructionOperand& other"
          ],
          "return_type": "bool",
          "logic": "Determines whether two instruction operands interfere with each other based on register or stack slot allocation, considering FP aliasing."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the instruction operand to standard output."
        }
      ]
    },
    {
      "name": "LocationOperand",
      "properties": [],
      "methods": [
        {
          "name": "IsCompatible",
          "parameters": [
            "LocationOperand* op"
          ],
          "return_type": "bool",
          "logic": "Determines if two location operands are compatible (e.g., register vs stack slot, FP type compatibility)."
        }
      ]
    },
    {
      "name": "MoveOperands",
      "properties": [],
      "methods": [
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the move operands (destination and source) to standard output."
        }
      ]
    },
    {
      "name": "ParallelMove",
      "properties": [],
      "methods": [
        {
          "name": "IsRedundant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all move operands in this ParallelMove are redundant."
        },
        {
          "name": "PrepareInsertAfter",
          "parameters": [
            "MoveOperands* move",
            "ZoneVector<MoveOperands*>* to_eliminate"
          ],
          "return_type": "void",
          "logic": "Prepares to insert a move operation after the current parallel move by replacing its source with the appropriate destination operand and eliminating interfering moves."
        },
        {
          "name": "Equals",
          "parameters": [
            "const ParallelMove& that"
          ],
          "return_type": "bool",
          "logic": "Compares this ParallelMove with another ParallelMove for equality."
        },
        {
          "name": "Eliminate",
          "parameters": [],
          "return_type": "void",
          "logic": "Eliminates all move operands in this parallel move."
        }
      ]
    },
    {
      "name": "Instruction",
      "properties": [],
      "methods": [
        {
          "name": "AreMovesRedundant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the parallel moves at the gap positions in this instruction are redundant."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the instruction to standard output."
        }
      ]
    },
    {
      "name": "ReferenceMap",
      "properties": [],
      "methods": [
        {
          "name": "RecordReference",
          "parameters": [
            "const AllocatedOperand& op"
          ],
          "return_type": "void",
          "logic": "Records a reference to an allocated operand (typically a stack slot) for garbage collection purposes."
        }
      ]
    },
    {
      "name": "Constant",
      "properties": [],
      "methods": [
        {
          "name": "ToHeapObject",
          "parameters": [],
          "return_type": "IndirectHandle<HeapObject>",
          "logic": "Converts the constant to a HeapObject."
        },
        {
          "name": "ToCode",
          "parameters": [],
          "return_type": "IndirectHandle<Code>",
          "logic": "Converts the constant to a Code object."
        }
      ]
    },
    {
      "name": "PhiInstruction",
      "properties": [],
      "methods": [
        {
          "name": "SetInput",
          "parameters": [
            "size_t offset",
            "int virtual_register"
          ],
          "return_type": "void",
          "logic": "Sets the input virtual register for a given offset in the phi instruction."
        },
        {
          "name": "RenameInput",
          "parameters": [
            "size_t offset",
            "int virtual_register"
          ],
          "return_type": "void",
          "logic": "Renames the input virtual register for a given offset in the phi instruction."
        }
      ]
    },
    {
      "name": "InstructionBlock",
      "properties": [],
      "methods": [
        {
          "name": "PredecessorIndexOf",
          "parameters": [
            "RpoNumber rpo_number"
          ],
          "return_type": "size_t",
          "logic": "Finds the index of a predecessor in the predecessor list, based on its RPO number."
        }
      ]
    },
    {
      "name": "PrintableInstructionBlock",
      "properties": [],
      "methods": []
    },
    {
      "name": "FrameStateDescriptor",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "CommuteFlagsCondition",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "FlagsCondition",
      "logic": "Commutes a flags condition (e.g., changes kSignedLessThan to kSignedGreaterThan)."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const InstructionOperand& op"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an InstructionOperand to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const MoveOperands& mo"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print MoveOperands to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const ParallelMove& pm"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a ParallelMove to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const ReferenceMap& pm"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a ReferenceMap to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const ArchOpcode& ao"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an ArchOpcode to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const AddressingMode& am"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an AddressingMode to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const FlagsMode& fm"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a FlagsMode to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const FlagsCondition& fc"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a FlagsCondition to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const Instruction& instr"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an Instruction to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const Constant& constant"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a Constant to an output stream."
    },
    {
      "name": "InstructionBlockFor",
      "parameters": [
        "Zone* zone",
        "const BasicBlock* block"
      ],
      "return_type": "InstructionBlock*",
      "logic": "Creates an InstructionBlock from a BasicBlock."
    },
    {
      "name": "InstructionBlockFor",
      "parameters": [
        "Zone* zone",
        "const turboshaft::Graph& graph",
        "const turboshaft::Block* block",
        "const turboshaft::Block* loop_header"
      ],
      "return_type": "InstructionBlock*",
      "logic": "Creates an InstructionBlock from a turboshaft Block."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const PrintableInstructionBlock& printable_block"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a PrintableInstructionBlock to an output stream."
    },
    {
      "name": "GetConservativeFrameSizeInBytes",
      "parameters": [
        "FrameStateType type",
        "size_t parameters_count",
        "size_t locals_count",
        "BytecodeOffset bailout_id",
        "uint32_t wasm_liftoff_frame_size"
      ],
      "return_type": "size_t",
      "logic": "Calculates a conservative estimate for the frame size in bytes, considering the frame type and various parameters."
    },
    {
      "name": "GetTotalConservativeFrameSizeInBytes",
      "parameters": [
        "FrameStateType type",
        "size_t parameters_count",
        "size_t locals_count",
        "BytecodeOffset bailout_id",
        "uint32_t wasm_liftoff_frame_size",
        "FrameStateDescriptor* outer_state"
      ],
      "return_type": "size_t",
      "logic": "Calculates the total conservative frame size in bytes, including the sizes of outer frames if present."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const RpoNumber& rpo"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an RpoNumber to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const InstructionSequence& code"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an InstructionSequence to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "StateValueKind kind"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a StateValueKind to an output stream."
    }
  ]
}