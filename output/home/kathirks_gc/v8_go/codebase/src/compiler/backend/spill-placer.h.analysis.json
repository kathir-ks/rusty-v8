{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/spill-placer.h",
  "imports": [
    "src/compiler/backend/instruction.h"
  ],
  "classes": [
    {
      "name": "SpillPlacer",
      "properties": [
        "RegisterAllocationData* data_",
        "Zone* zone_",
        "Entry* entries_",
        "int* vreg_numbers_",
        "int assigned_indices_",
        "RpoNumber first_block_",
        "RpoNumber last_block_"
      ],
      "methods": [
        {
          "name": "SpillPlacer",
          "parameters": [
            "RegisterAllocationData* data",
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the SpillPlacer class. Initializes the SpillPlacer with the register allocation data and zone."
        },
        {
          "name": "~SpillPlacer",
          "parameters": [],
          "return_type": "destructor",
          "logic": "Destructor for the SpillPlacer class."
        },
        {
          "name": "SpillPlacer",
          "parameters": [
            "const SpillPlacer&"
          ],
          "return_type": "deleted copy constructor",
          "logic": "Deleted copy constructor to prevent copying."
        },
        {
          "name": "operator=",
          "parameters": [
            "const SpillPlacer&"
          ],
          "return_type": "deleted assignment operator",
          "logic": "Deleted assignment operator to prevent assignment."
        },
        {
          "name": "Add",
          "parameters": [
            "TopLevelLiveRange* range"
          ],
          "return_type": "void",
          "logic": "Adds a TopLevelLiveRange to the SpillPlacer's state.  It will commit spill moves for that range and mark the range to indicate whether its value is spilled at the definition or some later point."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "RegisterAllocationData*",
          "logic": "Returns the RegisterAllocationData pointer."
        },
        {
          "name": "GetOrCreateIndexForLatestVreg",
          "parameters": [
            "int vreg"
          ],
          "return_type": "int",
          "logic": "While initializing data for a range, returns the index within each Entry where data about that range should be stored. May cause data about previous ranges to be committed to make room if the table is full."
        },
        {
          "name": "IsLatestVreg",
          "parameters": [
            "int vreg"
          ],
          "return_type": "bool",
          "logic": "Checks if the given vreg is the latest vreg number."
        },
        {
          "name": "CommitSpills",
          "parameters": [],
          "return_type": "void",
          "logic": "Processes all of the ranges which have been added, inserts spill moves for them to the instruction sequence, and marks the ranges with whether they are spilled at the definition or later."
        },
        {
          "name": "ClearData",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears internal data structures."
        },
        {
          "name": "ExpandBoundsToInclude",
          "parameters": [
            "RpoNumber block"
          ],
          "return_type": "void",
          "logic": "Updates the iteration bounds first_block_ and last_block_ so that they include the new value."
        },
        {
          "name": "SetSpillRequired",
          "parameters": [
            "InstructionBlock* block",
            "int vreg",
            "RpoNumber top_start_block"
          ],
          "return_type": "void",
          "logic": "Sets the spill required flag for a given block and virtual register."
        },
        {
          "name": "SetDefinition",
          "parameters": [
            "RpoNumber block",
            "int vreg"
          ],
          "return_type": "void",
          "logic": "Marks the given block as the definition point for the given virtual register."
        },
        {
          "name": "FirstBackwardPass",
          "parameters": [],
          "return_type": "void",
          "logic": "The first backward pass is responsible for marking blocks which do not themselves need the value to be on the stack, but which do have successors requiring the value to be on the stack."
        },
        {
          "name": "ForwardPass",
          "parameters": [],
          "return_type": "void",
          "logic": "The forward pass is responsible for selecting merge points that should require the value to be on the stack."
        },
        {
          "name": "SecondBackwardPass",
          "parameters": [],
          "return_type": "void",
          "logic": "The second backward pass is responsible for propagating the spill requirements to the earliest block where all successors can agree a spill is required. It also emits the actual spill instructions."
        },
        {
          "name": "CommitSpill",
          "parameters": [
            "int vreg",
            "InstructionBlock* predecessor",
            "InstructionBlock* successor"
          ],
          "return_type": "void",
          "logic": "Commits a spill move between the predecessor and successor blocks for the given virtual register."
        }
      ]
    },
    {
      "name": "Entry",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [],
  "constants": [
    {
      "name": "kValueIndicesPerEntry",
      "value": "64"
    }
  ]
}