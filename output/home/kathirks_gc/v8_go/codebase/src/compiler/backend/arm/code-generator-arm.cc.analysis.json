{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/arm/code-generator-arm.cc",
  "imports": [
    "src/base/numbers/double.h",
    "src/codegen/arm/assembler-arm.h",
    "src/codegen/arm/constants-arm.h",
    "src/codegen/arm/register-arm.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/machine-type.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/common/globals.h",
    "src/compiler/backend/code-generator-impl.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/gap-resolver.h",
    "src/compiler/backend/instruction-codes.h",
    "src/compiler/node-matchers.h",
    "src/compiler/osr.h",
    "src/heap/mutable-page-metadata.h",
    "src/utils/boxed-float.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "ArmOperandConverter",
      "properties": [],
      "methods": [
        {
          "name": "ArmOperandConverter",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for ArmOperandConverter, initializes the base class."
        },
        {
          "name": "OutputSBit",
          "parameters": [],
          "return_type": "SBit",
          "logic": "Determines the S bit setting based on the instruction's flags mode."
        },
        {
          "name": "InputImmediate",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Operand",
          "logic": "Converts the instruction input at the given index to an immediate operand."
        },
        {
          "name": "InputOperand2",
          "parameters": [
            "size_t first_index"
          ],
          "return_type": "Operand",
          "logic": "Decodes the addressing mode of the instruction and returns the appropriate Operand2. It handles immediate, register, and register with shift operations."
        },
        {
          "name": "InputOffset",
          "parameters": [
            "size_t* first_index"
          ],
          "return_type": "MemOperand",
          "logic": "Decodes the addressing mode and returns a MemOperand representing a memory access. It handles offset addressing with immediate or register offsets and root register addressing."
        },
        {
          "name": "InputOffset",
          "parameters": [
            "size_t first_index = 0"
          ],
          "return_type": "MemOperand",
          "logic": "Overload for InputOffset. Calls the other version with a pointer to first_index set to 0."
        },
        {
          "name": "ToImmediate",
          "parameters": [
            "InstructionOperand* operand"
          ],
          "return_type": "Operand",
          "logic": "Converts an InstructionOperand to an immediate Operand by extracting its Constant value."
        },
        {
          "name": "ToMemOperand",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "MemOperand",
          "logic": "Converts an InstructionOperand representing a stack slot to a MemOperand."
        },
        {
          "name": "SlotToMemOperand",
          "parameters": [
            "int slot"
          ],
          "return_type": "MemOperand",
          "logic": "Converts a stack slot index to a MemOperand using the frame access state."
        },
        {
          "name": "NeonInputOperand",
          "parameters": [
            "size_t first_index"
          ],
          "return_type": "NeonMemOperand",
          "logic": "Returns a NeonMemOperand, for neon instructions using a register address. "
        }
      ]
    },
    {
      "name": "OutOfLineRecordWrite",
      "properties": [
        "object_",
        "offset_",
        "value_",
        "mode_",
        "stub_mode_",
        "must_save_lr_",
        "unwinding_info_writer_",
        "zone_"
      ],
      "methods": [
        {
          "name": "OutOfLineRecordWrite",
          "parameters": [
            "CodeGenerator* gen",
            "Register object",
            "Operand offset",
            "Register value",
            "RecordWriteMode mode",
            "StubCallMode stub_mode",
            "UnwindingInfoWriter* unwinding_info_writer"
          ],
          "return_type": "void",
          "logic": "Constructor for OutOfLineRecordWrite, initializes the member variables."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates the out-of-line code for a record write barrier, including checking page flags and calling the appropriate stub."
        }
      ]
    },
    {
      "name": "OutOfLineFloatMin",
      "properties": [
        "result_",
        "left_",
        "right_"
      ],
      "methods": [
        {
          "name": "OutOfLineFloatMin",
          "parameters": [
            "CodeGenerator* gen",
            "T result",
            "T left",
            "T right"
          ],
          "return_type": "void",
          "logic": "Constructor for OutOfLineFloatMin, initializes the registers."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates the out-of-line code for FloatMin."
        }
      ]
    },
    {
      "name": "OutOfLineFloatMax",
      "properties": [
        "result_",
        "left_",
        "right_"
      ],
      "methods": [
        {
          "name": "OutOfLineFloatMax",
          "parameters": [
            "CodeGenerator* gen",
            "T result",
            "T left",
            "T right"
          ],
          "return_type": "void",
          "logic": "Constructor for OutOfLineFloatMax, initializes the registers."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates the out-of-line code for FloatMax."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FlagsConditionToCondition",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "Condition",
      "logic": "Converts a FlagsCondition enum to an ARM Condition enum."
    },
    {
      "name": "FlushPendingPushRegisters",
      "parameters": [
        "MacroAssembler* masm",
        "FrameAccessState* frame_access_state",
        "ZoneVector<Register>* pending_pushes"
      ],
      "return_type": "void",
      "logic": "Pushes pending registers onto the stack and updates the stack pointer delta."
    },
    {
      "name": "AdjustStackPointerForTailCall",
      "parameters": [
        "MacroAssembler* masm",
        "FrameAccessState* state",
        "int new_slot_above_sp",
        "ZoneVector<Register>* pending_pushes",
        "bool allow_shrinkage"
      ],
      "return_type": "void",
      "logic": "Adjusts the stack pointer for a tail call to match the expected stack layout."
    },
    {
      "name": "VerifyOutputOfAtomicPairInstr",
      "parameters": [
        "ArmOperandConverter* converter",
        "const Instruction* instr",
        "Register low",
        "Register high"
      ],
      "return_type": "bool",
      "logic": "Debug function to check that the output register pairs of an atomic instruction are correct."
    },
    {
      "name": "CodeGenerator::AssembleDeconstructFrame",
      "parameters": [],
      "return_type": "void",
      "logic": "Assembles code to deconstruct the stack frame."
    },
    {
      "name": "CodeGenerator::AssemblePrepareTailCall",
      "parameters": [],
      "return_type": "void",
      "logic": "Prepares the stack frame and frame access state for a tail call."
    },
    {
      "name": "CodeGenerator::AssembleTailCallBeforeGap",
      "parameters": [
        "Instruction* instr",
        "int first_unused_slot_offset"
      ],
      "return_type": "void",
      "logic": "Assembles code for a tail call before a gap in the instruction sequence. Handles pushing registers if necessary."
    },
    {
      "name": "CodeGenerator::AssembleTailCallAfterGap",
      "parameters": [
        "Instruction* instr",
        "int first_unused_slot_offset"
      ],
      "return_type": "void",
      "logic": "Assembles code for a tail call after a gap in the instruction sequence."
    },
    {
      "name": "CodeGenerator::AssembleCodeStartRegisterCheck",
      "parameters": [],
      "return_type": "void",
      "logic": "Assembles code to check if the code object start register is correct."
    },
    {
      "name": "CodeGenerator::AssembleDispatchHandleRegisterCheck",
      "parameters": [],
      "return_type": "void",
      "logic": "Assembles code to check if dispatch handle register is correct. Only available when V8_ENABLE_LEAPTIERING is true."
    },
    {
      "name": "CodeGenerator::BailoutIfDeoptimized",
      "parameters": [],
      "return_type": "void",
      "logic": "Assembles code to bailout if the code object is marked for deoptimization."
    },
    {
      "name": "CodeGenerator::AssembleArchInstruction",
      "parameters": [
        "Instruction* instr"
      ],
      "return_type": "CodeGenerator::CodeGenResult",
      "logic": "Assembles an architecture-specific instruction after register allocation. This is the main function to convert instructions into machine code."
    }
  ]
}