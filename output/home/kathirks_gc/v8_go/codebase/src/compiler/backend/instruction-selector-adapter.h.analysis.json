{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/instruction-selector-adapter.h",
  "imports": [
    "<optional>",
    "src/codegen/machine-type.h",
    "src/compiler/backend/instruction.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/operation-matcher.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/opmasks.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/use-map.h"
  ],
  "classes": [
    {
      "name": "TurboshaftAdapter",
      "properties": [
        "IsTurbofan",
        "IsTurboshaft",
        "AllowsImplicitWord64ToWord32Truncation",
        "graph_"
      ],
      "methods": [
        {
          "name": "TurboshaftAdapter",
          "parameters": [
            "turboshaft::Graph* graph"
          ],
          "return_type": "explicit",
          "logic": "Constructor that initializes the TurboshaftAdapter with a turboshaft::Graph."
        },
        {
          "name": "turboshaft_graph",
          "parameters": [],
          "return_type": "turboshaft::Graph*",
          "logic": "Returns the underlying Turboshaft graph."
        },
        {
          "name": "block",
          "parameters": [
            "turboshaft::Graph* schedule",
            "turboshaft::OpIndex node"
          ],
          "return_type": "turboshaft::Block*",
          "logic": "Returns the block to which a node belongs within the schedule."
        },
        {
          "name": "rpo_number",
          "parameters": [
            "const turboshaft::Block* block"
          ],
          "return_type": "RpoNumber",
          "logic": "Returns the reverse postorder number of a block."
        },
        {
          "name": "rpo_order",
          "parameters": [
            "turboshaft::Graph* schedule"
          ],
          "return_type": "const ZoneVector<turboshaft::Block*>&",
          "logic": "Returns the reverse postorder of blocks in the schedule."
        },
        {
          "name": "IsLoopHeader",
          "parameters": [
            "const turboshaft::Block* block"
          ],
          "return_type": "bool",
          "logic": "Checks if a block is a loop header."
        },
        {
          "name": "PredecessorCount",
          "parameters": [
            "const turboshaft::Block* block"
          ],
          "return_type": "size_t",
          "logic": "Returns the number of predecessors of a block."
        },
        {
          "name": "PredecessorAt",
          "parameters": [
            "const turboshaft::Block* block",
            "size_t index"
          ],
          "return_type": "turboshaft::Block*",
          "logic": "Returns the predecessor block at the specified index."
        },
        {
          "name": "nodes",
          "parameters": [
            "const turboshaft::Block* block"
          ],
          "return_type": "base::iterator_range<turboshaft::Graph::OpIndexIterator>",
          "logic": "Returns an iterator range of the operation indices within a given block."
        },
        {
          "name": "IsPhi",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node is a phi node."
        },
        {
          "name": "phi_representation_of",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "MachineRepresentation",
          "logic": "Returns the machine representation of a phi node."
        },
        {
          "name": "IsRetain",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node is a Retain node."
        },
        {
          "name": "IsHeapConstant",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents a heap constant."
        },
        {
          "name": "IsExternalConstant",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents an external constant."
        },
        {
          "name": "IsRelocatableWasmConstant",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents a relocatable wasm constant."
        },
        {
          "name": "IsLoadOrLoadImmutable",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents a load or load immutable operation."
        },
        {
          "name": "IsProtectedLoad",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a load operation is protected by a trap handler."
        },
        {
          "name": "value_input_count",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "int",
          "logic": "Returns the number of value inputs for a given node."
        },
        {
          "name": "input_at",
          "parameters": [
            "turboshaft::OpIndex node",
            "size_t index"
          ],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the input node at the specified index."
        },
        {
          "name": "inputs",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "base::Vector<const turboshaft::OpIndex>",
          "logic": "Returns all the input nodes of the given node."
        },
        {
          "name": "opcode",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "turboshaft::Opcode",
          "logic": "Returns the opcode of a given node."
        },
        {
          "name": "is_exclusive_user_of",
          "parameters": [
            "turboshaft::OpIndex user",
            "turboshaft::OpIndex value"
          ],
          "return_type": "bool",
          "logic": "Checks if a user node is the exclusive user of a value node."
        },
        {
          "name": "id",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the id of the node"
        },
        {
          "name": "value",
          "parameters": [
            "turboshaft::OptionalOpIndex node"
          ],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the value from an OptionalOpIndex."
        },
        {
          "name": "block_terminator",
          "parameters": [
            "const turboshaft::Block* block"
          ],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the terminator of the block"
        },
        {
          "name": "parent_frame_state",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the parent frame state of a node (FrameStateOp)."
        },
        {
          "name": "IsRequiredWhenUnused",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Returns if operation is required even if it is unused."
        },
        {
          "name": "IsCommutative",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Returns whether operation is commutative."
        },
        {
          "name": "is_load",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents a Load operation."
        },
        {
          "name": "is_load_root_register",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if the node is loading from a root register"
        },
        {
          "name": "call_view",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "CallView",
          "logic": "Returns a CallView for a call node."
        },
        {
          "name": "load_view",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "LoadView",
          "logic": "Returns a LoadView for a load node."
        },
        {
          "name": "store_view",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "StoreView",
          "logic": "Returns a StoreView for a store node."
        },
        {
          "name": "atomic_rmw_view",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "AtomicRMWView",
          "logic": "Returns a AtomicRMWView for a atomic read-modify-write node."
        },
        {
          "name": "word32_atomic_pair_store_view",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "Word32AtomicPairStoreView",
          "logic": "Returns a view for an atomic 32-bit pair store operation."
        },
        {
          "name": "simd_shuffle_view",
          "parameters": [
            "turboshaft::OpIndex node"
          ],
          "return_type": "SimdShuffleView",
          "logic": "Returns a SimdShuffleView for a simd shuffle node."
        }
      ]
    },
    {
      "name": "TurboshaftAdapter::CallView",
      "properties": [
        "node_",
        "call_op_",
        "tail_call_op_"
      ],
      "methods": [
        {
          "name": "CallView",
          "parameters": [
            "turboshaft::Graph* graph",
            "turboshaft::OpIndex node"
          ],
          "return_type": "explicit",
          "logic": "Constructor for CallView, identifies the underlying call operation."
        },
        {
          "name": "return_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of return values from the call."
        },
        {
          "name": "callee",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the callee node."
        },
        {
          "name": "frame_state",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the frame state node."
        },
        {
          "name": "arguments",
          "parameters": [],
          "return_type": "base::Vector<const turboshaft::OpIndex>",
          "logic": "Returns the arguments to the call."
        },
        {
          "name": "call_descriptor",
          "parameters": [],
          "return_type": "const CallDescriptor*",
          "logic": "Returns the call descriptor."
        },
        {
          "name": "ts_call_descriptor",
          "parameters": [],
          "return_type": "const turboshaft::TSCallDescriptor*",
          "logic": "Returns the turboshaft call descriptor."
        },
        {
          "name": "operator turboshaft::OpIndex",
          "parameters": [],
          "return_type": "implicit",
          "logic": "Allows implicit conversion to turboshaft::OpIndex."
        }
      ]
    },
    {
      "name": "TurboshaftAdapter::LoadView",
      "properties": [
        "node_",
        "load_",
        "load_transform_",
        "load_transform256_"
      ],
      "methods": [
        {
          "name": "LoadView",
          "parameters": [
            "turboshaft::Graph* graph",
            "turboshaft::OpIndex node"
          ],
          "return_type": "explicit",
          "logic": "Constructor for LoadView, identifies the underlying load operation."
        },
        {
          "name": "loaded_rep",
          "parameters": [],
          "return_type": "LoadRepresentation",
          "logic": "Returns the loaded representation."
        },
        {
          "name": "ts_loaded_rep",
          "parameters": [],
          "return_type": "turboshaft::MemoryRepresentation",
          "logic": "Returns the turboshaft loaded representation."
        },
        {
          "name": "ts_result_rep",
          "parameters": [],
          "return_type": "turboshaft::RegisterRepresentation",
          "logic": "Returns the turboshaft register representation."
        },
        {
          "name": "is_protected",
          "parameters": [
            "bool* traps_on_null"
          ],
          "return_type": "bool",
          "logic": "Checks if the load is protected and sets the traps_on_null flag."
        },
        {
          "name": "is_atomic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the load is atomic."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the base node for the load."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the index node for the load."
        },
        {
          "name": "displacement",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the displacement/offset of the load."
        },
        {
          "name": "element_size_log2",
          "parameters": [],
          "return_type": "uint8_t",
          "logic": "Returns the log2 of the element size of the load."
        },
        {
          "name": "operator turboshaft::OpIndex",
          "parameters": [],
          "return_type": "implicit",
          "logic": "Allows implicit conversion to turboshaft::OpIndex."
        }
      ]
    },
    {
      "name": "TurboshaftAdapter::StoreView",
      "properties": [
        "node_",
        "op_"
      ],
      "methods": [
        {
          "name": "StoreView",
          "parameters": [
            "turboshaft::Graph* graph",
            "turboshaft::OpIndex node"
          ],
          "return_type": "explicit",
          "logic": "Constructor for StoreView, identifies the underlying store operation."
        },
        {
          "name": "stored_rep",
          "parameters": [],
          "return_type": "StoreRepresentation",
          "logic": "Returns the stored representation."
        },
        {
          "name": "ts_stored_rep",
          "parameters": [],
          "return_type": "turboshaft::MemoryRepresentation",
          "logic": "Returns the turboshaft stored representation."
        },
        {
          "name": "memory_order",
          "parameters": [],
          "return_type": "std::optional<AtomicMemoryOrder>",
          "logic": "Returns the memory order of the store."
        },
        {
          "name": "access_kind",
          "parameters": [],
          "return_type": "MemoryAccessKind",
          "logic": "Returns the access kind of the store (protected or normal)."
        },
        {
          "name": "is_atomic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the store is atomic."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the base node for the store."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "turboshaft::OptionalOpIndex",
          "logic": "Returns the index node for the store."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the value node being stored."
        },
        {
          "name": "indirect_pointer_tag",
          "parameters": [],
          "return_type": "IndirectPointerTag",
          "logic": "Returns the indirect pointer tag."
        },
        {
          "name": "displacement",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the displacement/offset of the store."
        },
        {
          "name": "element_size_log2",
          "parameters": [],
          "return_type": "uint8_t",
          "logic": "Returns the log2 of the element size being stored."
        },
        {
          "name": "is_store_trap_on_null",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the store operation should trap on a null pointer."
        },
        {
          "name": "operator turboshaft::OpIndex",
          "parameters": [],
          "return_type": "implicit",
          "logic": "Allows implicit conversion to turboshaft::OpIndex."
        }
      ]
    },
    {
      "name": "TurboshaftAdapter::AtomicRMWView",
      "properties": [
        "node_",
        "op_"
      ],
      "methods": [
        {
          "name": "AtomicRMWView",
          "parameters": [
            "const turboshaft::Graph* graph",
            "turboshaft::OpIndex node"
          ],
          "return_type": "explicit",
          "logic": "Constructor for AtomicRMWView, identifies the underlying atomic read-modify-write operation."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the base node for the atomic operation."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the index node for the atomic operation."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the value node for the atomic operation."
        },
        {
          "name": "expected",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the expected value node (for CompareExchange)."
        },
        {
          "name": "operator turboshaft::OpIndex",
          "parameters": [],
          "return_type": "implicit",
          "logic": "Allows implicit conversion to turboshaft::OpIndex."
        }
      ]
    },
    {
      "name": "TurboshaftAdapter::Word32AtomicPairStoreView",
      "properties": [
        "store_"
      ],
      "methods": [
        {
          "name": "Word32AtomicPairStoreView",
          "parameters": [
            "const turboshaft::Graph* graph",
            "turboshaft::OpIndex node"
          ],
          "return_type": "explicit",
          "logic": "Constructor for Word32AtomicPairStoreView, identifies the underlying atomic word32 pair operation."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the base node for the atomic operation."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the index node for the atomic operation."
        },
        {
          "name": "value_low",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the low value node for the atomic operation."
        },
        {
          "name": "value_high",
          "parameters": [],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the high value node for the atomic operation."
        }
      ]
    },
    {
      "name": "TurboshaftAdapter::SimdShuffleView",
      "properties": [
        "node_",
        "input_mapping_",
        "op128_"
      ],
      "methods": [
        {
          "name": "SimdShuffleView",
          "parameters": [
            "const turboshaft::Graph* graph",
            "turboshaft::OpIndex node"
          ],
          "return_type": "explicit",
          "logic": "Constructor for SimdShuffleView, identifies the underlying Simd128Shuffle operation."
        },
        {
          "name": "isSimd128",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the operation is simd128."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "const uint8_t*",
          "logic": "Returns the shuffle data."
        },
        {
          "name": "input",
          "parameters": [
            "int index"
          ],
          "return_type": "turboshaft::OpIndex",
          "logic": "Returns the input at the given index."
        },
        {
          "name": "SwapInputs",
          "parameters": [],
          "return_type": "void",
          "logic": "Swaps the first two inputs."
        },
        {
          "name": "DuplicateFirstInput",
          "parameters": [],
          "return_type": "void",
          "logic": "Duplicates the first input to the second input slot."
        },
        {
          "name": "operator turboshaft::OpIndex",
          "parameters": [],
          "return_type": "implicit",
          "logic": "Allows implicit conversion to turboshaft::OpIndex."
        }
      ]
    }
  ],
  "functions": []
}