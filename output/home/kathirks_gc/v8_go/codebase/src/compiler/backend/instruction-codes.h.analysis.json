{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/instruction-codes.h",
  "imports": [
    "<iosfwd>",
    "src/compiler/backend/arm/instruction-codes-arm.h",
    "src/compiler/backend/arm64/instruction-codes-arm64.h",
    "src/compiler/backend/ia32/instruction-codes-ia32.h",
    "src/compiler/backend/mips64/instruction-codes-mips64.h",
    "src/compiler/backend/loong64/instruction-codes-loong64.h",
    "src/compiler/backend/x64/instruction-codes-x64.h",
    "src/compiler/backend/ppc/instruction-codes-ppc.h",
    "src/compiler/backend/s390/instruction-codes-s390.h",
    "src/compiler/backend/riscv/instruction-codes-riscv.h",
    "src/base/bit-field.h",
    "src/codegen/atomic-memory-order.h",
    "src/compiler/write-barrier-kind.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "WriteBarrierKindToRecordWriteMode",
      "parameters": [
        "WriteBarrierKind write_barrier_kind"
      ],
      "return_type": "RecordWriteMode",
      "logic": "Converts a WriteBarrierKind enum to a RecordWriteMode enum. This determines the type of write barrier required based on the kind of pointer being written."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const ArchOpcode& ao"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for ArchOpcode, allowing it to be printed to an output stream.  This likely provides a human-readable representation of the ArchOpcode."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const AddressingMode& am"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for AddressingMode, allowing it to be printed to an output stream. This likely provides a human-readable representation of the AddressingMode."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const FlagsMode& fm"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for FlagsMode, allowing it to be printed to an output stream. This likely provides a human-readable representation of FlagsMode."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const FlagsCondition& fc"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for FlagsCondition, allowing it to be printed to an output stream. This likely provides a human-readable representation of FlagsCondition."
    },
    {
      "name": "NegateFlagsCondition",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "FlagsCondition",
      "logic": "Negates a FlagsCondition.  Used for inverting the condition of a branch or other conditional operation."
    },
    {
      "name": "CommuteFlagsCondition",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "FlagsCondition",
      "logic": "Commutes a FlagsCondition, potentially swapping operands or adjusting the condition to maintain the same logical meaning.  For example, transforming a < b to b > a."
    },
    {
      "name": "AtomicWidthSize",
      "parameters": [
        "AtomicWidth width"
      ],
      "return_type": "size_t",
      "logic": "Returns the size in bytes of the given AtomicWidth. This is used to determine the size of memory operations involving atomic types."
    },
    {
      "name": "HasMemoryAccessMode",
      "parameters": [
        "ArchOpcode opcode"
      ],
      "return_type": "bool",
      "logic": "Checks if a given ArchOpcode has a memory access mode associated with it.  This is used to determine if the instruction requires additional handling related to memory access (e.g., out-of-bounds checks)."
    }
  ]
}