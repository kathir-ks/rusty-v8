{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/spill-placer.cc",
  "imports": [
    "src/compiler/backend/spill-placer.h",
    "src/base/bits-iterator.h",
    "src/compiler/backend/register-allocator.h"
  ],
  "classes": [
    {
      "name": "SpillPlacer",
      "properties": [
        "data_",
        "zone_",
        "assigned_indices_",
        "entries_",
        "vreg_numbers_",
        "first_block_",
        "last_block_"
      ],
      "methods": [
        {
          "name": "SpillPlacer",
          "parameters": [
            "RegisterAllocationData* data",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the SpillPlacer with register allocation data and a zone allocator."
        },
        {
          "name": "~SpillPlacer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that commits spills if any indices have been assigned."
        },
        {
          "name": "Add",
          "parameters": [
            "TopLevelLiveRange* range"
          ],
          "return_type": "void",
          "logic": "Adds a live range to the spill placer, determining whether to spill at the definition or later based on various heuristics including loop nesting, deferred blocks, and flag settings. Marks blocks where spill is required and manages insertion locations."
        },
        {
          "name": "GetOrCreateIndexForLatestVreg",
          "parameters": [
            "int vreg"
          ],
          "return_type": "int",
          "logic": "Gets or creates an index for a virtual register (vreg). If the vreg is new, it's added to the list. Returns the index of the vreg."
        },
        {
          "name": "CommitSpills",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the three passes (FirstBackwardPass, ForwardPass, SecondBackwardPass) to determine the optimal spill locations."
        },
        {
          "name": "ClearData",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the internal data structures, resetting the assigned indices and clearing the entries array."
        },
        {
          "name": "ExpandBoundsToInclude",
          "parameters": [
            "RpoNumber block"
          ],
          "return_type": "void",
          "logic": "Expands the range of blocks being processed to include the given block."
        },
        {
          "name": "SetSpillRequired",
          "parameters": [
            "InstructionBlock* block",
            "int vreg",
            "RpoNumber top_start_block"
          ],
          "return_type": "void",
          "logic": "Sets a flag indicating that a spill is required for a virtual register in a given block, potentially adjusting the block based on loop nesting."
        },
        {
          "name": "SetDefinition",
          "parameters": [
            "RpoNumber block",
            "int vreg"
          ],
          "return_type": "void",
          "logic": "Marks a block as the definition point for a virtual register."
        },
        {
          "name": "FirstBackwardPass",
          "parameters": [],
          "return_type": "void",
          "logic": "Propagates spill requirements backward through the control flow graph, considering deferred and non-deferred successors."
        },
        {
          "name": "ForwardPass",
          "parameters": [],
          "return_type": "void",
          "logic": "Propagates spill requirements forward through the control flow graph, considering non-deferred predecessors and successors."
        },
        {
          "name": "SecondBackwardPass",
          "parameters": [],
          "return_type": "void",
          "logic": "Final backward pass to commit spill moves at definition points and insert spills before blocks that require them."
        },
        {
          "name": "CommitSpill",
          "parameters": [
            "int vreg",
            "InstructionBlock* predecessor",
            "InstructionBlock* successor"
          ],
          "return_type": "void",
          "logic": "Inserts a spill move at the beginning of a successor block, moving the value from a register to the spill slot."
        }
      ]
    },
    {
      "name": "SpillPlacer::Entry",
      "properties": [
        "first_bit_",
        "second_bit_",
        "third_bit_"
      ],
      "methods": [
        {
          "name": "SetSpillRequiredSingleValue",
          "parameters": [
            "int value_index"
          ],
          "return_type": "void",
          "logic": "Sets the spill required bit for a single value (vreg) within the entry."
        },
        {
          "name": "SetDefinitionSingleValue",
          "parameters": [
            "int value_index"
          ],
          "return_type": "void",
          "logic": "Sets the definition bit for a single value (vreg) within the entry."
        },
        {
          "name": "SpillRequired",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns a bitmask indicating which values require spilling."
        },
        {
          "name": "SetSpillRequired",
          "parameters": [
            "uint64_t mask"
          ],
          "return_type": "void",
          "logic": "Sets the spill required bits using a provided mask."
        },
        {
          "name": "SpillRequiredInNonDeferredSuccessor",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns a bitmask of values that require spilling in a non-deferred successor."
        },
        {
          "name": "SetSpillRequiredInNonDeferredSuccessor",
          "parameters": [
            "uint64_t mask"
          ],
          "return_type": "void",
          "logic": "Sets the spill required bits for non-deferred successors using a mask."
        },
        {
          "name": "SpillRequiredInDeferredSuccessor",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns a bitmask indicating which values need to be spilled in deferred successors."
        },
        {
          "name": "SetSpillRequiredInDeferredSuccessor",
          "parameters": [
            "uint64_t mask"
          ],
          "return_type": "void",
          "logic": "Sets the spill required bits for deferred successors using a mask."
        },
        {
          "name": "Definition",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns a bitmask of values that are defined in the block."
        },
        {
          "name": "SetDefinition",
          "parameters": [
            "uint64_t mask"
          ],
          "return_type": "void",
          "logic": "Sets the definition bits using a mask."
        },
        {
          "name": "GetValuesInState",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Retrieves values in a given state(kUnmarked, kSpillRequired, kSpillRequiredInNonDeferredSuccessor,kSpillRequiredInDeferredSuccessor, kDefinition)."
        },
        {
          "name": "UpdateValuesToState",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates the bitfields corresponding to a provided state mask."
        },
        {
          "name": "UpdateBitDataWithMask",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Utility function used for conditional bit manipulation in SetSpillRequired/SetDefinition for a given block"
        }
      ]
    }
  ],
  "functions": []
}