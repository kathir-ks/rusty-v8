{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/escape-analysis-reducer.cc",
  "imports": [
    "src/compiler/escape-analysis-reducer.h",
    "src/compiler/all-nodes.h",
    "src/compiler/node-matchers.h",
    "src/compiler/operation-typer.h",
    "src/compiler/simplified-operator.h",
    "src/execution/frame-constants.h"
  ],
  "classes": [
    {
      "name": "EscapeAnalysisReducer",
      "properties": [
        "jsgraph_",
        "broker_",
        "analysis_result_",
        "object_id_cache_",
        "node_cache_",
        "arguments_elements_",
        "zone_"
      ],
      "methods": [
        {
          "name": "EscapeAnalysisReducer",
          "parameters": [
            "Editor* editor",
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "EscapeAnalysisResult analysis_result",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the EscapeAnalysisReducer class. Initializes member variables."
        },
        {
          "name": "ReplaceNode",
          "parameters": [
            "Node* original",
            "Node* replacement"
          ],
          "return_type": "Reduction",
          "logic": "Replaces a node with another node in the graph, taking into account type information and escape analysis results. Adds type guards when necessary."
        },
        {
          "name": "ObjectIdNode",
          "parameters": [
            "const VirtualObject* vobject"
          ],
          "return_type": "Node*",
          "logic": "Returns a node representing the object ID of a virtual object. Caches the nodes to avoid creating duplicates."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "The main reduction method. Performs escape analysis based reductions on a given node, such as replacing nodes with their replacements or relaxing effects and controls on unescaped nodes."
        },
        {
          "name": "ReduceFrameStateInputs",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Reduces the FrameState inputs of a node, by potentially replacing them with more optimized values derived from escape analysis."
        },
        {
          "name": "ReduceDeoptState",
          "parameters": [
            "Node* node",
            "Node* effect",
            "Deduplicator* deduplicator"
          ],
          "return_type": "Node*",
          "logic": "Recursively reduces a deoptimization state node (FrameState or StateValues), using escape analysis information. Deduplicates virtual objects to avoid infinite recursion."
        },
        {
          "name": "VerifyReplacement",
          "parameters": [],
          "return_type": "void",
          "logic": "Verifies that the escape analysis has successfully removed unescaped allocation nodes. Fails if any such nodes are found."
        },
        {
          "name": "Finalize",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes the escape analysis by performing post-processing steps such as optimizing uses of ArgumentsElements nodes by replacing them with direct memory loads (LoadStackArgument)."
        }
      ]
    },
    {
      "name": "Deduplicator",
      "properties": [
        "zone_",
        "is_duplicate_"
      ],
      "methods": [
        {
          "name": "Deduplicator",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "explicit Deduplicator",
          "logic": "Constructor for the Deduplicator class, takes a Zone pointer as argument."
        },
        {
          "name": "SeenBefore",
          "parameters": [
            "const VirtualObject* vobject"
          ],
          "return_type": "bool",
          "logic": "Checks if a virtual object has been seen before during the DFS traversal of FrameState tree."
        }
      ]
    },
    {
      "name": "NodeHashCache",
      "properties": [
        "cache_",
        "temp_nodes_",
        "graph_"
      ],
      "methods": [
        {
          "name": "Query",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Queries the cache for a node and returns it if found, otherwise returns nullptr."
        }
      ]
    },
    {
      "name": "NodeHashCache::Constructor",
      "properties": [
        "node_cache_",
        "from_",
        "tmp_"
      ],
      "methods": [
        {
          "name": "Constructor",
          "parameters": [
            "NodeHashCache* cache",
            "const Operator* op",
            "int input_count",
            "Node** inputs",
            "Type type"
          ],
          "return_type": "void",
          "logic": "Constructor for the NodeHashCache Constructor helper class."
        },
        {
          "name": "Get",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Retrieves the node created or retrieved from the cache."
        },
        {
          "name": "MutableNode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns a mutable copy of the node. Clones if not already mutable."
        }
      ]
    }
  ],
  "functions": []
}