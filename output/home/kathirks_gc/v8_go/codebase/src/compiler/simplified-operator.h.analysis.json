{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/simplified-operator.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/simplified-operator.h\",\n  \"imports\": [\n    \"<iosfwd>\",\n    \"src/base/compiler-specific.h\",\n    \"src/base/container-utils.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/codegen/tnode.h\",\n    \"src/common/globals.h\",\n    \"src/compiler/common-operator.h\",\n    \"src/compiler/feedback-source.h\",\n    \"src/compiler/globals.h\",\n    \"src/compiler/node-properties.h\",\n    \"src/compiler/operator.h\",\n    \"src/compiler/turbofan-types.h\",\n    \"src/compiler/write-barrier-kind.h\",\n    \"src/deoptimizer/deoptimize-reason.h\",\n    \"src/handles/handles.h\",\n    \"src/handles/maybe-handles.h\",\n    \"src/objects/objects.h\",\n    \"src/compiler/wasm-compiler-definitions.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"ConstFieldInfo\",\n      \"properties\": [\n        \"owner_map\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ConstFieldInfo\",\n          \"parameters\": [],\n          \"return_type\": \"ConstFieldInfo\",\n          \"logic\": \"Default constructor, initializes owner_map with an empty OptionalMapRef.\"\n        },\n        {\n          \"name\": \"ConstFieldInfo\",\n          \"parameters\": [\n            \"owner_map\"\n          ],\n          \"return_type\": \"ConstFieldInfo\",\n          \"logic\": \"Constructor that initializes owner_map with a given MapRef.\"\n        },\n        {\n          \"name\": \"IsConst\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the field is constant by checking if owner_map has a value.\"\n        },\n        {\n          \"name\": \"None\",\n          \"parameters\": [],\n          \"return_type\": \"ConstFieldInfo\",\n          \"logic\": \"Static method that returns a ConstFieldInfo representing a mutable field (no owner).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FieldAccess\",\n      \"properties\": [\n        \"base_is_tagged\",\n        \"offset\",\n        \"name\",\n        \"map\",\n        \"type\",\n        \"machine_type\",\n        \"write_barrier_kind\",\n        \"creator_mnemonic\",\n        \"const_field_info\",\n        \"is_store_in_literal\",\n        \"external_pointer_tag\",\n        \"maybe_initializing_or_transitioning_store\",\n        \"is_bounded_size_access\",\n        \"is_immutable\",\n        \"indirect_pointer_tag\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FieldAccess\",\n          \"parameters\": [],\n          \"return_type\": \"FieldAccess\",\n          \"logic\": \"Default constructor, initializes fields with default values.\"\n        },\n        {\n          \"name\": \"FieldAccess\",\n          \"parameters\": [\n            \"base_is_tagged\",\n            \"offset\",\n            \"name\",\n            \"map\",\n            \"type\",\n            \"machine_type\",\n            \"write_barrier_kind\",\n            \"creator_mnemonic\",\n            \"const_field_info\",\n            \"is_store_in_literal\",\n            \"external_pointer_tag\",\n            \"maybe_initializing_or_transitioning_store\",\n            \"is_immutable\",\n            \"indirect_pointer_tag\"\n          ],\n          \"return_type\": \"FieldAccess\",\n          \"logic\": \"Constructor that initializes fields with given values.\"\n        },\n        {\n          \"name\": \"tag\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the tag (kHeapObjectTag or 0) based on base_is_tagged.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ElementAccess\",\n      \"properties\": [\n        \"base_is_tagged\",\n        \"header_size\",\n        \"type\",\n        \"machine_type\",\n        \"write_barrier_kind\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ElementAccess\",\n          \"parameters\": [],\n          \"return_type\": \"ElementAccess\",\n          \"logic\": \"Default constructor, initializes fields with default values.\"\n        },\n        {\n          \"name\": \"ElementAccess\",\n          \"parameters\": [\n            \"base_is_tagged\",\n            \"header_size\",\n            \"type\",\n            \"machine_type\",\n            \"write_barrier_kind\"\n          ],\n          \"return_type\": \"ElementAccess\",\n          \"logic\": \"Constructor that initializes fields with given values.\"\n        },\n        {\n          \"name\": \"tag\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the tag (kHeapObjectTag or 0) based on base_is_tagged.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ObjectAccess\",\n      \"properties\": [\n        \"machine_type\",\n        \"write_barrier_kind\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ObjectAccess\",\n          \"parameters\": [],\n          \"return_type\": \"ObjectAccess\",\n          \"logic\": \"Default constructor, initializes fields with default values.\"\n        },\n        {\n          \"name\": \"ObjectAccess\",\n          \"parameters\": [\n            \"machine_type\",\n            \"write_barrier_kind\"\n          ],\n          \"return_type\": \"ObjectAccess\",\n          \"logic\": \"Constructor that initializes fields with given values.\"\n        },\n        {\n          \"name\": \"tag\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns kHeapObjectTag.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckParameters\",\n      \"properties\": [\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckParameters\",\n          \"parameters\": [\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for CheckParameters, initializing the feedback source.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckBoundsParameters\",\n      \"properties\": [\n        \"check_parameters_\",\n        \"flags_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckBoundsParameters\",\n          \"parameters\": [\n            \"feedback\",\n            \"flags\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor that initializes feedback and flags\"\n        },\n        {\n          \"name\": \"flags\",\n          \"parameters\": [],\n          \"return_type\": \"CheckBoundsFlags\",\n          \"logic\": \"Returns the check bound flags.\"\n        },\n        {\n          \"name\": \"check_parameters\",\n          \"parameters\": [],\n          \"return_type\": \"const CheckParameters&\",\n          \"logic\": \"Returns a constant reference to the internal check_parameters_ object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckIfParameters\",\n      \"properties\": [\n        \"reason_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckIfParameters\",\n          \"parameters\": [\n            \"reason\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for CheckIfParameters, initializing the deoptimization reason and feedback source.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"reason\",\n          \"parameters\": [],\n          \"return_type\": \"DeoptimizeReason\",\n          \"logic\": \"Returns the deoptimization reason.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckFloat64HoleParameters\",\n      \"properties\": [\n        \"mode_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckFloat64HoleParameters\",\n          \"parameters\": [\n            \"mode\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor that stores the mode and the feedback source.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"CheckFloat64HoleMode\",\n          \"logic\": \"Returns the mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckTaggedInputParameters\",\n      \"properties\": [\n        \"mode_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckTaggedInputParameters\",\n          \"parameters\": [\n            \"mode\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor that initializes mode and feedback.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"CheckTaggedInputMode\",\n          \"logic\": \"Returns the mode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckMinusZeroParameters\",\n      \"properties\": [\n        \"mode_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckMinusZeroParameters\",\n          \"parameters\": [\n            \"mode\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for the CheckMinusZeroParameters class.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"CheckForMinusZeroMode\",\n          \"logic\": \"Gets the CheckForMinusZeroMode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Gets the FeedbackSource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckMapsParameters\",\n      \"properties\": [\n        \"flags_\",\n        \"maps_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CheckMapsParameters\",\n          \"parameters\": [\n            \"flags\",\n            \"maps\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for CheckMapsParameters, initializing the flags, maps and feedback source.\"\n        },\n        {\n          \"name\": \"flags\",\n          \"parameters\": [],\n          \"return_type\": \"CheckMapsFlags\",\n          \"logic\": \"Returns the check maps flags.\"\n        },\n        {\n          \"name\": \"maps\",\n          \"parameters\": [],\n          \"return_type\": \"ZoneRefSet<Map> const&\",\n          \"logic\": \"Returns the ZoneRefSet of Maps.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GrowFastElementsParameters\",\n      \"properties\": [\n        \"mode_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GrowFastElementsParameters\",\n          \"parameters\": [\n            \"mode\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor initializing the grow mode and feedback source.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"GrowFastElementsMode\",\n          \"logic\": \"Returns the GrowFastElementsMode.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the FeedbackSource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ElementsTransition\",\n      \"properties\": [\n        \"mode_\",\n        \"source_\",\n        \"target_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ElementsTransition\",\n          \"parameters\": [\n            \"mode\",\n            \"source\",\n            \"target\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for ElementsTransition, initializing the mode, source map and target map.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"Mode\",\n          \"logic\": \"Returns the transition mode.\"\n        },\n        {\n          \"name\": \"source\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the source map.\"\n        },\n        {\n          \"name\": \"target\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the target map.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ElementsTransitionWithMultipleSources\",\n      \"properties\": [\n        \"sources_\",\n        \"target_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ElementsTransitionWithMultipleSources\",\n          \"parameters\": [\n            \"sources\",\n            \"target\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for ElementsTransitionWithMultipleSources, initializing the source maps, target map and feedback source.\"\n        },\n        {\n          \"name\": \"sources\",\n          \"parameters\": [],\n          \"return_type\": \"const ZoneRefSet<Map>&\",\n          \"logic\": \"Returns the ZoneRefSet of source maps.\"\n        },\n        {\n          \"name\": \"target\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the target map.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the feedback source.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NumberOperationParameters\",\n      \"properties\": [\n        \"hint_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NumberOperationParameters\",\n          \"parameters\": [\n            \"hint\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for NumberOperationParameters, initializing the hint and feedback source.\"\n        },\n        {\n          \"name\": \"hint\",\n          \"parameters\": [],\n          \"return_type\": \"NumberOperationHint\",\n          \"logic\": \"Returns the NumberOperationHint.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the FeedbackSource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BigIntOperationParameters\",\n      \"properties\": [\n        \"hint_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BigIntOperationParameters\",\n          \"parameters\": [\n            \"hint\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for BigIntOperationParameters, initializing the hint and feedback source.\"\n        },\n        {\n          \"name\": \"hint\",\n          \"parameters\": [],\n          \"return_type\": \"BigIntOperationHint\",\n          \"logic\": \"Returns the BigIntOperationHint.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the FeedbackSource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SpeculativeBigIntAsNParameters\",\n      \"properties\": [\n        \"bits_\",\n        \"feedback_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SpeculativeBigIntAsNParameters\",\n          \"parameters\": [\n            \"bits\",\n            \"feedback\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for SpeculativeBigIntAsNParameters, initializing the bits and feedback source.\"\n        },\n        {\n          \"name\": \"bits\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the bits.\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"const FeedbackSource&\",\n          \"logic\": \"Returns the FeedbackSource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AllocateParameters\",\n      \"properties\": [\n        \"type_\",\n        \"allocation_type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AllocateParameters\",\n          \"parameters\": [\n            \"type\",\n            \"allocation_type\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for AllocateParameters, initializing the type and allocation type.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns the type.\"\n        },\n        {\n          \"name\": \"allocation_type\",\n          \"parameters\": [],\n          \"return_type\": \"AllocationType\",\n          \"logic\": \"Returns the allocation type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NewArgumentsElementsParameters\",\n      \"properties\": [\n        \"type_\",\n        \"formal_parameter_count_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NewArgumentsElementsParameters\",\n          \"parameters\": [\n            \"type\",\n            \"formal_parameter_count\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for NewArgumentsElementsParameters, initializing the create arguments type and formal parameter count.\"\n        },\n        {\n          \"name\": \"arguments_type\",\n          \"parameters\": [],\n          \"return_type\": \"CreateArgumentsType\",\n          \"logic\": \"Returns the create arguments type.\"\n        },\n        {\n          \"name\": \"formal_parameter_count\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the formal parameter count.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FastApiCallFunction\",\n      \"properties\": [\n        \"address\",\n        \"signature\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"rhs\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality operator for FastApiCallFunction, comparing the address and signature.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FastApiCallParameters\",\n      \"properties\": [\n        \"c_function_\",\n        \"feedback_\",\n        \"descriptor_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FastApiCallParameters\",\n          \"parameters\": [\n            \"c_function\",\n            \"feedback\",\n            \"descriptor\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Initializes FastApiCallParameters with function details, feedback and call descriptor.\"\n        },\n        {\n          \"name\": \"c_function\",\n          \"parameters\": [],\n          \"return_type\": \"FastApiCallFunction\",\n          \"logic\": \"Returns the FastApiCallFunction\"\n        },\n        {\n          \"name\": \"feedback\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackSource const&\",\n          \"logic\": \"Returns the feedback source.\"\n        },\n        {\n          \"name\": \"descriptor\",\n          \"parameters\": [],\n          \"return_type\": \"CallDescriptor*\",\n          \"logic\": \"Returns the call descriptor.\"\n        },\n        {\n          \"name\": \"signature\",\n          \"parameters\": [],\n          \"return_type\": \"const CFunctionInfo*\",\n          \"logic\": \"Returns the signature.\"\n        },\n        {\n          \"name\": \"argument_count\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned int\",\n          \"logic\": \"Returns the argument count based on the signature.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimplifiedOperatorBuilder\",\n      \"properties\": [\n        \"cache_\",\n        \"zone_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SimplifiedOperatorBuilder\",\n          \"parameters\": [\n            \"zone\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for SimplifiedOperatorBuilder, initializing the zone.\"\n        },\n        {\n          \"name\": \"BooleanNot\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BooleanNot operator.\"\n        },\n        {\n          \"name\": \"NumberEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberEqual operator.\"\n        },\n        {\n          \"name\": \"NumberSameValue\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSameValue operator.\"\n        },\n        {\n          \"name\": \"NumberLessThan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberLessThan operator.\"\n        },\n        {\n          \"name\": \"NumberLessThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberLessThanOrEqual operator.\"\n        },\n        {\n          \"name\": \"NumberAdd\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAdd operator.\"\n        },\n        {\n          \"name\": \"NumberSubtract\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSubtract operator.\"\n        },\n        {\n          \"name\": \"NumberMultiply\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberMultiply operator.\"\n        },\n        {\n          \"name\": \"NumberDivide\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberDivide operator.\"\n        },\n        {\n          \"name\": \"NumberModulus\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberModulus operator.\"\n        },\n        {\n          \"name\": \"NumberBitwiseOr\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberBitwiseOr operator.\"\n        },\n        {\n          \"name\": \"NumberBitwiseXor\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberBitwiseXor operator.\"\n        },\n        {\n          \"name\": \"NumberBitwiseAnd\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberBitwiseAnd operator.\"\n        },\n        {\n          \"name\": \"NumberShiftLeft\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberShiftLeft operator.\"\n        },\n        {\n          \"name\": \"NumberShiftRight\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberShiftRight operator.\"\n        },\n        {\n          \"name\": \"NumberShiftRightLogical\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberShiftRightLogical operator.\"\n        },\n        {\n          \"name\": \"NumberImul\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberImul operator.\"\n        },\n        {\n          \"name\": \"NumberAbs\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAbs operator.\"\n        },\n        {\n          \"name\": \"NumberClz32\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberClz32 operator.\"\n        },\n        {\n          \"name\": \"NumberCeil\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberCeil operator.\"\n        },\n        {\n          \"name\": \"NumberFloor\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberFloor operator.\"\n        },\n        {\n          \"name\": \"NumberFround\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberFround operator.\"\n        },\n        {\n          \"name\": \"NumberAcos\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAcos operator.\"\n        },\n        {\n          \"name\": \"NumberAcosh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAcosh operator.\"\n        },\n        {\n          \"name\": \"NumberAsin\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAsin operator.\"\n        },\n        {\n          \"name\": \"NumberAsinh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAsinh operator.\"\n        },\n        {\n          \"name\": \"NumberAtan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAtan operator.\"\n        },\n        {\n          \"name\": \"NumberAtan2\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAtan2 operator.\"\n        },\n        {\n          \"name\": \"NumberAtanh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberAtanh operator.\"\n        },\n        {\n          \"name\": \"NumberCbrt\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberCbrt operator.\"\n        },\n        {\n          \"name\": \"NumberCos\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberCos operator.\"\n        },\n        {\n          \"name\": \"NumberCosh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberCosh operator.\"\n        },\n        {\n          \"name\": \"NumberExp\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberExp operator.\"\n        },\n        {\n          \"name\": \"NumberExpm1\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberExpm1 operator.\"\n        },\n        {\n          \"name\": \"NumberLog\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberLog operator.\"\n        },\n        {\n          \"name\": \"NumberLog1p\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberLog1p operator.\"\n        },\n        {\n          \"name\": \"NumberLog10\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberLog10 operator.\"\n        },\n        {\n          \"name\": \"NumberLog2\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberLog2 operator.\"\n        },\n        {\n          \"name\": \"NumberMax\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberMax operator.\"\n        },\n        {\n          \"name\": \"NumberMin\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberMin operator.\"\n        },\n        {\n          \"name\": \"NumberPow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberPow operator.\"\n        },\n        {\n          \"name\": \"NumberRound\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberRound operator.\"\n        },\n        {\n          \"name\": \"NumberSign\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSign operator.\"\n        },\n        {\n          \"name\": \"NumberSin\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSin operator.\"\n        },\n        {\n          \"name\": \"NumberSinh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSinh operator.\"\n        },\n        {\n          \"name\": \"NumberSqrt\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSqrt operator.\"\n        },\n        {\n          \"name\": \"NumberTan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberTan operator.\"\n        },\n        {\n          \"name\": \"NumberTanh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberTanh operator.\"\n        },\n        {\n          \"name\": \"NumberTrunc\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberTrunc operator.\"\n        },\n        {\n          \"name\": \"NumberToBoolean\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberToBoolean operator.\"\n        },\n        {\n          \"name\": \"NumberToInt32\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberToInt32 operator.\"\n        },\n        {\n          \"name\": \"NumberToString\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberToString operator.\"\n        },\n        {\n          \"name\": \"NumberToUint32\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberToUint32 operator.\"\n        },\n        {\n          \"name\": \"NumberToUint8Clamped\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberToUint8Clamped operator.\"\n        },\n        {\n          \"name\": \"Integral32OrMinusZeroToBigInt\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the Integral32OrMinusZeroToBigInt operator.\"\n        },\n        {\n          \"name\": \"NumberSilenceNaN\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSilenceNaN operator.\"\n        },\n        {\n          \"name\": \"BigIntAdd\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntAdd operator.\"\n        },\n        {\n          \"name\": \"BigIntSubtract\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntSubtract operator.\"\n        },\n        {\n          \"name\": \"BigIntMultiply\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntMultiply operator.\"\n        },\n        {\n          \"name\": \"BigIntDivide\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntDivide operator.\"\n        },\n        {\n          \"name\": \"BigIntModulus\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntModulus operator.\"\n        },\n        {\n          \"name\": \"BigIntBitwiseAnd\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntBitwiseAnd operator.\"\n        },\n        {\n          \"name\": \"BigIntBitwiseOr\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntBitwiseOr operator.\"\n        },\n        {\n          \"name\": \"BigIntBitwiseXor\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntBitwiseXor operator.\"\n        },\n        {\n          \"name\": \"BigIntShiftLeft\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntShiftLeft operator.\"\n        },\n        {\n          \"name\": \"BigIntShiftRight\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntShiftRight operator.\"\n        },\n        {\n          \"name\": \"BigIntNegate\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntNegate operator.\"\n        },\n        {\n          \"name\": \"BigIntEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the BigIntEqual"
}