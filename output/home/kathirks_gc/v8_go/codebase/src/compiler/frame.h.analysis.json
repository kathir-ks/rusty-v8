{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/frame.h",
  "imports": [
    "src/base/bits.h",
    "src/codegen/aligned-slot-allocator.h",
    "src/execution/frame-constants.h",
    "src/utils/bit-vector.h"
  ],
  "classes": [
    {
      "name": "Frame",
      "properties": [
        "fixed_slot_count_",
        "spill_slot_count_",
        "return_slot_count_",
        "slot_allocator_",
        "allocated_registers_",
        "allocated_double_registers_",
        "zone_",
        "tagged_slots_bits_"
      ],
      "methods": [
        {
          "name": "Frame",
          "parameters": [
            "int fixed_frame_size_in_slots",
            "Zone* zone"
          ],
          "return_type": "Frame",
          "logic": "Constructor for the Frame class. Initializes the fixed frame size and zone."
        },
        {
          "name": "GetTotalFrameSlotCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the total number of frame slots (spill slots + return slots)."
        },
        {
          "name": "GetFixedSlotCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of fixed frame slots."
        },
        {
          "name": "GetSpillSlotCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of spill slots."
        },
        {
          "name": "GetReturnSlotCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of return slots."
        },
        {
          "name": "SetAllocatedRegisters",
          "parameters": [
            "BitVector* regs"
          ],
          "return_type": "void",
          "logic": "Sets the bit vector of allocated registers."
        },
        {
          "name": "SetAllocatedDoubleRegisters",
          "parameters": [
            "BitVector* regs"
          ],
          "return_type": "void",
          "logic": "Sets the bit vector of allocated double registers."
        },
        {
          "name": "DidAllocateDoubleRegisters",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if double registers have been allocated."
        },
        {
          "name": "AlignSavedCalleeRegisterSlots",
          "parameters": [
            "int alignment"
          ],
          "return_type": "void",
          "logic": "Aligns saved callee register slots to a specified alignment."
        },
        {
          "name": "AllocateSavedCalleeRegisterSlots",
          "parameters": [
            "int count"
          ],
          "return_type": "void",
          "logic": "Allocates a given number of slots for saved callee registers."
        },
        {
          "name": "AllocateSpillSlot",
          "parameters": [
            "int width",
            "int alignment",
            "bool is_tagged"
          ],
          "return_type": "int",
          "logic": "Allocates a spill slot with a given width and alignment, and returns the slot index."
        },
        {
          "name": "EnsureReturnSlots",
          "parameters": [
            "int count"
          ],
          "return_type": "void",
          "logic": "Ensures that there are at least a given number of return slots."
        },
        {
          "name": "AlignFrame",
          "parameters": [
            "int alignment"
          ],
          "return_type": "void",
          "logic": "Aligns the frame to a specific boundary.  The implementation of this function is not within this header file."
        },
        {
          "name": "ReserveSpillSlots",
          "parameters": [
            "size_t slot_count"
          ],
          "return_type": "int",
          "logic": "Reserves a block of spill slots and returns the index of the last slot."
        },
        {
          "name": "tagged_slots",
          "parameters": [],
          "return_type": "const GrowableBitVector&",
          "logic": "Returns a reference to the bit vector that tracks tagged spill slots."
        }
      ]
    },
    {
      "name": "FrameOffset",
      "properties": [
        "offset_"
      ],
      "methods": [
        {
          "name": "from_stack_pointer",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the offset is from the stack pointer."
        },
        {
          "name": "from_frame_pointer",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the offset is from the frame pointer."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the offset value."
        },
        {
          "name": "FromStackPointer",
          "parameters": [
            "int offset"
          ],
          "return_type": "FrameOffset",
          "logic": "Creates a FrameOffset from the stack pointer with the given offset."
        },
        {
          "name": "FromFramePointer",
          "parameters": [
            "int offset"
          ],
          "return_type": "FrameOffset",
          "logic": "Creates a FrameOffset from the frame pointer with the given offset."
        }
      ]
    },
    {
      "name": "FrameAccessState",
      "properties": [
        "frame_",
        "access_frame_with_fp_",
        "fp_relative_only_",
        "sp_delta_",
        "has_frame_"
      ],
      "methods": [
        {
          "name": "FrameAccessState",
          "parameters": [
            "const Frame* const frame"
          ],
          "return_type": "FrameAccessState",
          "logic": "Constructor for the FrameAccessState class. Initializes the frame and access state."
        },
        {
          "name": "frame",
          "parameters": [],
          "return_type": "const Frame*",
          "logic": "Returns the Frame associated with this state."
        },
        {
          "name": "MarkHasFrame",
          "parameters": [
            "bool state"
          ],
          "return_type": "void",
          "logic": "Marks whether a frame is present or not."
        },
        {
          "name": "SetFPRelativeOnly",
          "parameters": [
            "bool state"
          ],
          "return_type": "void",
          "logic": "Sets whether frame access should be frame pointer relative only."
        },
        {
          "name": "FPRelativeOnly",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether frame access is frame pointer relative only."
        },
        {
          "name": "sp_delta",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the stack pointer delta."
        },
        {
          "name": "ClearSPDelta",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the stack pointer delta."
        },
        {
          "name": "IncreaseSPDelta",
          "parameters": [
            "int amount"
          ],
          "return_type": "void",
          "logic": "Increases the stack pointer delta by a given amount."
        },
        {
          "name": "access_frame_with_fp",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the frame is accessed with the frame pointer."
        },
        {
          "name": "has_frame",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether a frame exists at the current stage."
        },
        {
          "name": "SetFrameAccessToDefault",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the frame access to its default state (implementation not in the header)."
        },
        {
          "name": "SetFrameAccessToFP",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets frame access to use the frame pointer."
        },
        {
          "name": "SetFrameAccessToSP",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets frame access to use the stack pointer."
        },
        {
          "name": "GetSPToFPSlotCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates and returns the slot count between the stack pointer and the frame pointer."
        },
        {
          "name": "GetSPToFPOffset",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates and returns the offset between the stack pointer and the frame pointer."
        },
        {
          "name": "GetFrameOffset",
          "parameters": [
            "int spill_slot"
          ],
          "return_type": "FrameOffset",
          "logic": "Gets the frame offset for a given spill slot (implementation not in the header)."
        }
      ]
    }
  ],
  "functions": []
}