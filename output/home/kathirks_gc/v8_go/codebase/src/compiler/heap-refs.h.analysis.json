{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/heap-refs.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/heap-refs.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"<type_traits>\",\n    \"src/ic/call-optimization.h\",\n    \"src/objects/elements-kind.h\",\n    \"src/objects/feedback-vector.h\",\n    \"src/objects/instance-type.h\",\n    \"src/objects/object-list-macros.h\",\n    \"src/utils/boxed-float.h\",\n    \"src/zone/zone-compact-set.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"compiler::HeapObjectType\",\n      \"properties\": [\n        \"instance_type_\",\n        \"elements_kind_\",\n        \"oddball_type_\",\n        \"hole_type_\",\n        \"flags_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"HeapObjectType\",\n          \"parameters\": [\n            \"InstanceType instance_type\",\n            \"ElementsKind elements_kind\",\n            \"Flags flags\",\n            \"OddballType oddball_type\",\n            \"HoleType hole_type\"\n          ],\n          \"return_type\": \"HeapObjectType\",\n          \"logic\": \"Constructor for HeapObjectType. Initializes the instance type, elements kind, oddball type, hole type and flags.\"\n        },\n        {\n          \"name\": \"oddball_type\",\n          \"parameters\": [],\n          \"return_type\": \"OddballType\",\n          \"logic\": \"Returns the oddball type of the HeapObjectType.\"\n        },\n        {\n          \"name\": \"hole_type\",\n          \"parameters\": [],\n          \"return_type\": \"HoleType\",\n          \"logic\": \"Returns the hole type of the HeapObjectType.\"\n        },\n        {\n          \"name\": \"oddball_type\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"OddballType\",\n          \"logic\": \"Returns the oddball type of the HeapObjectType (JSHeapBroker version).\"\n        },\n        {\n          \"name\": \"hole_type\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"HoleType\",\n          \"logic\": \"Returns the hole type of the HeapObjectType (JSHeapBroker version).\"\n        },\n        {\n          \"name\": \"instance_type\",\n          \"parameters\": [],\n          \"return_type\": \"InstanceType\",\n          \"logic\": \"Returns the instance type of the HeapObjectType.\"\n        },\n        {\n          \"name\": \"flags\",\n          \"parameters\": [],\n          \"return_type\": \"Flags\",\n          \"logic\": \"Returns the flags of the HeapObjectType.\"\n        },\n        {\n          \"name\": \"elements_kind\",\n          \"parameters\": [],\n          \"return_type\": \"ElementsKind\",\n          \"logic\": \"Returns the elements kind of the HeapObjectType.\"\n        },\n        {\n          \"name\": \"is_callable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the HeapObjectType is callable based on the flags.\"\n        },\n        {\n          \"name\": \"is_undetectable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the HeapObjectType is undetectable based on the flags.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"compiler::OptionalRef\",\n      \"properties\": [\n        \"data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ArrowOperatorHelper::operator->\",\n          \"parameters\": [],\n          \"return_type\": \"TRef*\",\n          \"logic\": \"Dereferences the internal TRef object and returns a pointer to it.\"\n        },\n        {\n          \"name\": \"OptionalRef\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalRef\",\n          \"logic\": \"Default constructor. Initializes the data_ pointer to null.\"\n        },\n        {\n          \"name\": \"OptionalRef\",\n          \"parameters\": [\"std::nullopt_t\"],\n          \"return_type\": \"OptionalRef\",\n          \"logic\": \"Constructor taking std::nullopt_t. Initializes the data_ pointer to null.\"\n        },\n        {\n          \"name\": \"OptionalRef\",\n          \"parameters\": [\"OptionalRef<SRef> ref\"],\n          \"return_type\": \"OptionalRef\",\n          \"logic\": \"Template constructor to allow implicit upcasting from compatible OptionalRefs. Copies the data pointer from the source OptionalRef.\"\n        },\n        {\n          \"name\": \"OptionalRef\",\n          \"parameters\": [\"SRef ref\"],\n          \"return_type\": \"OptionalRef\",\n          \"logic\": \"Template constructor to allow implicit upcasting from compatible refs. Sets the data pointer to ref.data_.\"\n        },\n        {\n          \"name\": \"has_value\",\n          \"parameters\": [],\n          \"return_type\": \"constexpr bool\",\n          \"logic\": \"Checks if the OptionalRef has a value. Returns true if the data pointer is not null.\"\n        },\n        {\n          \"name\": \"operator bool\",\n          \"parameters\": [],\n          \"return_type\": \"constexpr explicit operator bool\",\n          \"logic\": \"Explicit conversion to bool. Returns true if the OptionalRef has a value.\"\n        },\n        {\n          \"name\": \"value\",\n          \"parameters\": [],\n          \"return_type\": \"TRef\",\n          \"logic\": \"Returns the value held by the OptionalRef. Asserts that the OptionalRef has a value.\"\n        },\n        {\n          \"name\": \"operator*\",\n          \"parameters\": [],\n          \"return_type\": \"TRef\",\n          \"logic\": \"Dereferences the OptionalRef and returns the value.\"\n        },\n        {\n          \"name\": \"operator->\",\n          \"parameters\": [],\n          \"return_type\": \"ArrowOperatorHelper\",\n          \"logic\": \"Returns an ArrowOperatorHelper to enable member access to the underlying TRef object.\"\n        },\n        {\n          \"name\": \"equals\",\n          \"parameters\": [\"OptionalRef other\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the OptionalRef is equal to another OptionalRef. Returns true if their data pointers are equal.\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the OptionalRef. If it has a value, it returns the hash value of the value. Otherwise, it returns the hash value of 0.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"compiler::ObjectRef\",\n      \"properties\": [\n        \"data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ObjectRef\",\n          \"parameters\": [\"ObjectData* data\", \"bool check_type = true\"],\n          \"return_type\": \"ObjectRef\",\n          \"logic\": \"Constructor for ObjectRef. Initializes the data_ pointer and optionally checks the type.\"\n        },\n        {\n          \"name\": \"object\",\n          \"parameters\": [],\n          \"return_type\": \"IndirectHandle<Object>\",\n          \"logic\": \"Returns an IndirectHandle to the Object.\"\n        },\n        {\n          \"name\": \"equals\",\n          \"parameters\": [\"ObjectRef other\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef is equal to another ObjectRef. Returns true if their data pointers are equal.\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the ObjectRef based on the object's address.\"\n        },\n        {\n          \"name\": \"IsSmi\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Smi.\"\n        },\n        {\n          \"name\": \"AsSmi\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the value of the referenced object as a Smi (integer).\"\n        },\n        {\n          \"name\": \"IsJSArray\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSArray.\"\n        },\n        {\n          \"name\": \"IsJSBoundFunction\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSBoundFunction.\"\n        },\n        {\n          \"name\": \"IsJSDataView\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSDataView.\"\n        },\n        {\n          \"name\": \"IsJSFunction\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSFunction.\"\n        },\n        {\n          \"name\": \"IsJSGlobalObject\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSGlobalObject.\"\n        },\n        {\n          \"name\": \"IsJSGlobalProxy\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSGlobalProxy.\"\n        },\n        {\n          \"name\": \"IsJSTypedArray\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSTypedArray.\"\n        },\n        {\n          \"name\": \"IsJSPrimitiveWrapper\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSPrimitiveWrapper.\"\n        },\n        {\n          \"name\": \"IsNativeContext\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a NativeContext.\"\n        },\n        {\n          \"name\": \"IsObjectBoilerplateDescription\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a ObjectBoilerplateDescription.\"\n        },\n        {\n          \"name\": \"IsScriptContextTable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a ScriptContextTable.\"\n        },\n        {\n          \"name\": \"IsInternalizedString\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a InternalizedString.\"\n        },\n        {\n          \"name\": \"IsFixedArray\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a FixedArray.\"\n        },\n        {\n          \"name\": \"IsFixedDoubleArray\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a FixedDoubleArray.\"\n        },\n        {\n          \"name\": \"IsString\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a String.\"\n        },\n        {\n          \"name\": \"IsSymbol\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Symbol.\"\n        },\n        {\n          \"name\": \"IsJSObject\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSObject.\"\n        },\n        {\n          \"name\": \"IsAccessorInfo\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is an AccessorInfo.\"\n        },\n        {\n          \"name\": \"IsAllocationSite\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is an AllocationSite.\"\n        },\n        {\n          \"name\": \"IsArrayBoilerplateDescription\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is an ArrayBoilerplateDescription.\"\n        },\n        {\n          \"name\": \"IsBigInt\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a BigInt.\"\n        },\n        {\n          \"name\": \"IsBytecodeArray\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a BytecodeArray.\"\n        },\n        {\n          \"name\": \"IsCell\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Cell.\"\n        },\n        {\n          \"name\": \"IsCode\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Code.\"\n        },\n        {\n          \"name\": \"IsContext\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Context.\"\n        },\n        {\n          \"name\": \"IsDescriptorArray\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a DescriptorArray.\"\n        },\n        {\n          \"name\": \"IsFeedbackCell\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a FeedbackCell.\"\n        },\n        {\n          \"name\": \"IsFeedbackVector\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a FeedbackVector.\"\n        },\n        {\n          \"name\": \"IsFixedArrayBase\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a FixedArrayBase.\"\n        },\n        {\n          \"name\": \"IsFunctionTemplateInfo\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a FunctionTemplateInfo.\"\n        },\n        {\n          \"name\": \"IsHeapNumber\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a HeapNumber.\"\n        },\n        {\n          \"name\": \"IsJSReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a JSReceiver.\"\n        },\n        {\n          \"name\": \"IsMap\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Map.\"\n        },\n        {\n          \"name\": \"IsName\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a Name.\"\n        },\n        {\n          \"name\": \"IsPropertyCell\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a PropertyCell.\"\n        },\n        {\n          \"name\": \"IsRegExpBoilerplateDescription\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a RegExpBoilerplateDescription.\"\n        },\n        {\n          \"name\": \"IsScopeInfo\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a ScopeInfo.\"\n        },\n        {\n          \"name\": \"IsSharedFunctionInfo\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a SharedFunctionInfo.\"\n        },\n        {\n          \"name\": \"IsSourceTextModule\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a SourceTextModule.\"\n        },\n        {\n          \"name\": \"IsTemplateObjectDescription\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a TemplateObjectDescription.\"\n        },\n        {\n          \"name\": \"IsAccessorInfo\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the referenced object is a AccessorInfo.\"\n        },\n        {\n          \"name\": \"AsJSArray\",\n          \"parameters\": [],\n          \"return_type\": \"JSArrayRef\",\n          \"logic\": \"Casts the ObjectRef to a JSArrayRef.\"\n        },\n        {\n          \"name\": \"AsJSBoundFunction\",\n          \"parameters\": [],\n          \"return_type\": \"JSBoundFunctionRef\",\n          \"logic\": \"Casts the ObjectRef to a JSBoundFunctionRef.\"\n        },\n        {\n          \"name\": \"AsJSDataView\",\n          \"parameters\": [],\n          \"return_type\": \"JSDataViewRef\",\n          \"logic\": \"Casts the ObjectRef to a JSDataViewRef.\"\n        },\n        {\n          \"name\": \"AsJSFunction\",\n          \"parameters\": [],\n          \"return_type\": \"JSFunctionRef\",\n          \"logic\": \"Casts the ObjectRef to a JSFunctionRef.\"\n        },\n        {\n          \"name\": \"AsJSGlobalObject\",\n          \"parameters\": [],\n          \"return_type\": \"JSGlobalObjectRef\",\n          \"logic\": \"Casts the ObjectRef to a JSGlobalObjectRef.\"\n        },\n        {\n          \"name\": \"AsJSGlobalProxy\",\n          \"parameters\": [],\n          \"return_type\": \"JSGlobalProxyRef\",\n          \"logic\": \"Casts the ObjectRef to a JSGlobalProxyRef.\"\n        },\n        {\n          \"name\": \"AsJSTypedArray\",\n          \"parameters\": [],\n          \"return_type\": \"JSTypedArrayRef\",\n          \"logic\": \"Casts the ObjectRef to a JSTypedArrayRef.\"\n        },\n        {\n          \"name\": \"AsJSPrimitiveWrapper\",\n          \"parameters\": [],\n          \"return_type\": \"JSPrimitiveWrapperRef\",\n          \"logic\": \"Casts the ObjectRef to a JSPrimitiveWrapperRef.\"\n        },\n        {\n          \"name\": \"AsNativeContext\",\n          \"parameters\": [],\n          \"return_type\": \"NativeContextRef\",\n          \"logic\": \"Casts the ObjectRef to a NativeContextRef.\"\n        },\n        {\n          \"name\": \"AsObjectBoilerplateDescription\",\n          \"parameters\": [],\n          \"return_type\": \"ObjectBoilerplateDescriptionRef\",\n          \"logic\": \"Casts the ObjectRef to a ObjectBoilerplateDescriptionRef.\"\n        },\n        {\n          \"name\": \"AsScriptContextTable\",\n          \"parameters\": [],\n          \"return_type\": \"ScriptContextTableRef\",\n          \"logic\": \"Casts the ObjectRef to a ScriptContextTableRef.\"\n        },\n        {\n          \"name\": \"AsInternalizedString\",\n          \"parameters\": [],\n          \"return_type\": \"InternalizedStringRef\",\n          \"logic\": \"Casts the ObjectRef to a InternalizedStringRef.\"\n        },\n        {\n          \"name\": \"AsFixedArray\",\n          \"parameters\": [],\n          \"return_type\": \"FixedArrayRef\",\n          \"logic\": \"Casts the ObjectRef to a FixedArrayRef.\"\n        },\n        {\n          \"name\": \"AsFixedDoubleArray\",\n          \"parameters\": [],\n          \"return_type\": \"FixedDoubleArrayRef\",\n          \"logic\": \"Casts the ObjectRef to a FixedDoubleArrayRef.\"\n        },\n        {\n          \"name\": \"AsString\",\n          \"parameters\": [],\n          \"return_type\": \"StringRef\",\n          \"logic\": \"Casts the ObjectRef to a StringRef.\"\n        },\n        {\n          \"name\": \"AsSymbol\",\n          \"parameters\": [],\n          \"return_type\": \"SymbolRef\",\n          \"logic\": \"Casts the ObjectRef to a SymbolRef.\"\n        },\n        {\n          \"name\": \"AsJSObject\",\n          \"parameters\": [],\n          \"return_type\": \"JSObjectRef\",\n          \"logic\": \"Casts the ObjectRef to a JSObjectRef.\"\n        },\n        {\n          \"name\": \"AsAccessorInfo\",\n          \"parameters\": [],\n          \"return_type\": \"AccessorInfoRef\",\n          \"logic\": \"Casts the ObjectRef to an AccessorInfoRef.\"\n        },\n        {\n          \"name\": \"AsAllocationSite\",\n          \"parameters\": [],\n          \"return_type\": \"AllocationSiteRef\",\n          \"logic\": \"Casts the ObjectRef to an AllocationSiteRef.\"\n        },\n        {\n          \"name\": \"AsArrayBoilerplateDescription\",\n          \"parameters\": [],\n          \"return_type\": \"ArrayBoilerplateDescriptionRef\",\n          \"logic\": \"Casts the ObjectRef to an ArrayBoilerplateDescriptionRef.\"\n        },\n        {\n          \"name\": \"AsBigInt\",\n          \"parameters\": [],\n          \"return_type\": \"BigIntRef\",\n          \"logic\": \"Casts the ObjectRef to a BigIntRef.\"\n        },\n        {\n          \"name\": \"AsBytecodeArray\",\n          \"parameters\": [],\n          \"return_type\": \"BytecodeArrayRef\",\n          \"logic\": \"Casts the ObjectRef to a BytecodeArrayRef.\"\n        },\n        {\n          \"name\": \"AsCell\",\n          \"parameters\": [],\n          \"return_type\": \"CellRef\",\n          \"logic\": \"Casts the ObjectRef to a CellRef.\"\n        },\n        {\n          \"name\": \"AsCode\",\n          \"parameters\": [],\n          \"return_type\": \"CodeRef\",\n          \"logic\": \"Casts the ObjectRef to a CodeRef.\"\n        },\n        {\n          \"name\": \"AsContext\",\n          \"parameters\": [],\n          \"return_type\": \"ContextRef\",\n          \"logic\": \"Casts the ObjectRef to a ContextRef.\"\n        },\n        {\n          \"name\": \"AsDescriptorArray\",\n          \"parameters\": [],\n          \"return_type\": \"DescriptorArrayRef\",\n          \"logic\": \"Casts the ObjectRef to a DescriptorArrayRef.\"\n        },\n        {\n          \"name\": \"AsFeedbackCell\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackCellRef\",\n          \"logic\": \"Casts the ObjectRef to a FeedbackCellRef.\"\n        },\n        {\n          \"name\": \"AsFeedbackVector\",\n          \"parameters\": [],\n          \"return_type\": \"FeedbackVectorRef\",\n          \"logic\": \"Casts the ObjectRef to a FeedbackVectorRef.\"\n        },\n        {\n          \"name\": \"AsFixedArrayBase\",\n          \"parameters\": [],\n          \"return_type\": \"FixedArrayBaseRef\",\n          \"logic\": \"Casts the ObjectRef to a FixedArrayBaseRef.\"\n        },\n        {\n          \"name\": \"AsFunctionTemplateInfo\",\n          \"parameters\": [],\n          \"return_type\": \"FunctionTemplateInfoRef\",\n          \"logic\": \"Casts the ObjectRef to a FunctionTemplateInfoRef.\"\n        },\n        {\n          \"name\": \"AsHeapNumber\",\n          \"parameters\": [],\n          \"return_type\": \"HeapNumberRef\",\n          \"logic\": \"Casts the ObjectRef to a HeapNumberRef.\"\n        },\n        {\n          \"name\": \"AsJSReceiver\",\n          \"parameters\": [],\n          \"return_type\": \"JSReceiverRef\",\n          \"logic\": \"Casts the ObjectRef to a JSReceiverRef.\"\n        },\n        {\n          \"name\": \"AsMap\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Casts the ObjectRef to a MapRef.\"\n        },\n        {\n          \"name\": \"AsName\",\n          \"parameters\": [],\n          \"return_type\": \"NameRef\",\n          \"logic\": \"Casts the ObjectRef to a NameRef.\"\n        },\n        {\n          \"name\": \"AsPropertyCell\",\n          \"parameters\": [],\n          \"return_type\": \"PropertyCellRef\",\n          \"logic\": \"Casts the ObjectRef to a PropertyCellRef.\"\n        },\n        {\n          \"name\": \"AsRegExpBoilerplateDescription\",\n          \"parameters\": [],\n          \"return_type\": \"RegExpBoilerplateDescriptionRef\",\n          \"logic\": \"Casts the ObjectRef to a RegExpBoilerplateDescriptionRef.\"\n        },\n        {\n          \"name\": \"AsScopeInfo\",\n          \"parameters\": [],\n          \"return_type\": \"ScopeInfoRef\",\n          \"logic\": \"Casts the ObjectRef to a ScopeInfoRef.\"\n        },\n        {\n          \"name\": \"AsSharedFunctionInfo\",\n          \"parameters\": [],\n          \"return_type\": \"SharedFunctionInfoRef\",\n          \"logic\": \"Casts the ObjectRef to a SharedFunctionInfoRef.\"\n        },\n        {\n          \"name\": \"AsSourceTextModule\",\n          \"parameters\": [],\n          \"return_type\": \"SourceTextModuleRef\",\n          \"logic\": \"Casts the ObjectRef to a SourceTextModuleRef.\"\n        },\n        {\n          \"name\": \"AsTemplateObjectDescription\",\n          \"parameters\": [],\n          \"return_type\": \"TemplateObjectDescriptionRef\",\n          \"logic\": \"Casts the ObjectRef to a TemplateObjectDescriptionRef.\"\n        },\n        {\n          \"name\": \"IsNull\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef represents a Null value.\"\n        },\n        {\n          \"name\": \"IsUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef represents an Undefined value.\"\n        },\n        {\n          \"name\": \"HoleType\",\n          \"parameters\": [],\n          \"return_type\": \"enum HoleType\",\n          \"logic\": \"Returns the HoleType of the ObjectRef.\"\n        },\n        {\n          \"name\": \"IsTheHole\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef represents the Hole value.\"\n        },\n        {\n          \"name\": \"IsPropertyCellHole\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef is a PropertyCell Hole.\"\n        },\n        {\n          \"name\": \"IsHashTableHole\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef is a HashTable Hole.\"\n        },\n        {\n          \"name\": \"IsPromiseHole\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef is a Promise Hole.\"\n        },\n        {\n          \"name\": \"IsNullOrUndefined\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the ObjectRef is either Null or Undefined.\"\n        },\n        {\n          \"name\": \"TryGetBooleanValue\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"std::optional<bool>\",\n          \"logic\": \"Tries to get the boolean value of the ObjectRef.\"\n        },\n        {\n          \"name\": \"OddballToNumber\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"Maybe<double>\",\n          \"logic\": \"Converts an Oddball ObjectRef to a number.\"\n        },\n        {\n          \"name\": \"should_access_heap\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if access to the heap is required.\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"ObjectData*\",\n          \"logic\": \"Returns the underlying ObjectData*.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"compiler::HeapObjectRef\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"HeapObjectRef\",\n          \"parameters\": [\"ObjectData* data\", \"bool check_type = true\"],\n          \"return_type\": \"HeapObjectRef\",\n          \"logic\": \"Constructor for HeapObjectRef. Calls ObjectRef's constructor and checks the type.\"\n        },\n        {\n          \"name\": \"object\",\n          \"parameters\": [],\n          \"return_type\": \"IndirectHandle<HeapObject>\",\n          \"logic\": \"Returns an IndirectHandle to the HeapObject.\"\n        },\n        {\n          \"name\": \"map\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the MapRef associated with the HeapObject.\"\n        },\n        {\n          \"name\": \"map_direct_read\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"OptionalMapRef\",\n          \"logic\": \"Directly reads the map of the HeapObject without caching. Use with care.\"\n        },\n        {\n          \"name\": \"GetHeapObjectType\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"HeapObjectType\",\n          \"logic\": \"Returns a HeapObjectType that describes certain properties of the object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"compiler::PropertyCellRef\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PropertyCellRef\",\n          \"parameters\": [\"ObjectData* data\", \"bool check_type = true\"],\n          \"return_type\": \"PropertyCellRef\",\n          \"logic\": \"Constructor for PropertyCellRef. Calls HeapObjectRef's constructor and checks the type.\"\n        },\n        {\n          \"name\": \"object\",\n          \"parameters\": [],\n          \"return_type\": \"IndirectHandle<PropertyCell>\",\n          \"logic\": \"Returns an IndirectHandle to the PropertyCell.\"\n        },\n        {\n          \"name\": \"Cache\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"V8_WARN_UNUSED_RESULT bool\",\n          \"logic\": \"Caches the PropertyCell in the JSHeapBroker.\"\n        },\n        {\n          \"name\": \"CacheAsProtector\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Caches the PropertyCell in the JSHeapBroker as a protector.\"\n        },\n        {\n          \"name\": \"property_details\",\n          \"parameters\": [],\n          \"return_type\": \"PropertyDetails\",\n          \"logic\": \"Returns the PropertyDetails of the PropertyCell.\"\n        },\n        {\n          \"name\": \"value\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"ObjectRef\",\n          \"logic\": \"Returns the value stored in the PropertyCell.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"compiler::JSReceiverRef\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"JSReceiverRef\",\n          \"parameters\": [\"ObjectData* data\", \"bool check_type = true\"],\n          \"return_type\": \"JSReceiverRef\",\n          \"logic\": \"Constructor for JSReceiverRef. Calls HeapObjectRef's constructor and checks the type.\"\n        },\n        {\n          \"name\": \"object\",\n          \"parameters\": [],\n          \"return_type\": \"IndirectHandle<JSReceiver>\",\n          \"logic\": \"Returns an IndirectHandle to the JSReceiver.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"compiler::JSObjectRef\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"JSObjectRef\",\n          \"parameters\": [\"ObjectData* data\", \"bool check_type = true\"],\n          \"return_type\": \"JSObjectRef\",\n          \"logic\": \"Constructor for JSObjectRef. Calls JSReceiverRef's constructor and checks the type.\"\n        },\n        {\n          \"name\": \"object\",\n          \"parameters\": [],\n          \"return_type\": \"IndirectHandle<JSObject>\",\n          \"logic\": \"Returns an IndirectHandle to the JSObject.\"\n        },\n        {\n          \"name\": \"raw_properties_or_hash\",\n          \"parameters\": [\"JSHeapBroker* broker\"],\n          \"return_type\": \"OptionalObjectRef\",\n          \"logic\": \"Returns the raw properties or hash of the JSObject.\"\n        },\n        {\n          \"name\": \"RawInobjectPropertyAt\",\n          \"parameters\": [\"JSHeapBroker* broker\", \"FieldIndex index\"],\n          \"return_type\": \"OptionalObjectRef\",\n          \"logic\": \"Returns the raw in-object property at the given index.  Only usable for in-object properties which can be uninitialized-sentinel.\"\n        },\n        {\n          \"name\": \"GetOwnConstantElement\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"FixedArrayBaseRef elements_ref\",\n            \"uint32_t index\",\n            \"CompilationDependencies* dependencies\"\n          ],\n          \"return_type\": \"OptionalObjectRef\",\n          \"logic\": \"Return the element at key {index} if {index} is known to be an own data property of the object that is non-writable and non-configurable.\"\n        },\n        {\n          \"name\": \"GetOwnConstantElementFromHeap\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"Tagged<FixedArrayBase> elements\",\n            \"ElementsKind elements_kind\",\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"std::optional<Tagged<Object>>\",\n          \"logic\": \"Helper function to read elements directly from the heap for constant elements.\"\n        },\n        {\n          \"name\": \"GetOwnFastConstantDataProperty\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"Representation field_representation\",\n            \"FieldIndex index\",\n            \"CompilationDependencies* dependencies\"\n          ],\n          \"return_type\": \"OptionalObjectRef\",\n          \"logic\": \"Return the value of the property identified by the field {index} if {index} is known to be an own data property of the object and the field is constant.\"\n        },\n        {\n          \"name\": \"GetOwnFastConstantDoubleProperty\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"FieldIndex index\",\n            \"CompilationDependencies* dependencies\"\n          ],\n          \"return_type\": \"std::optional<Float64>\",\n          \"logic\": \"Return the value of the double property identified by the field {index} if {index} is known to be an own"
}