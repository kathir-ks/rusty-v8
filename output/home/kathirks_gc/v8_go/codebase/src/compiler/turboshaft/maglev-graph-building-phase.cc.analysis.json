{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/maglev-graph-building-phase.cc",
  "imports": [
    "src/compiler/turboshaft/maglev-graph-building-phase.h",
    "<limits>",
    "<memory>",
    "<optional>",
    "<type_traits>",
    "src/base/logging.h",
    "src/base/small-vector.h",
    "src/base/vector.h",
    "src/codegen/bailout-reason.h",
    "src/codegen/optimized-compilation-info.h",
    "src/common/globals.h",
    "src/compiler/access-builder.h",
    "src/compiler/bytecode-analysis.h",
    "src/compiler/bytecode-liveness-map.h",
    "src/compiler/frame-states.h",
    "src/compiler/globals.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/turboshaft/access-builder.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/machine-optimization-reducer.h",
    "src/compiler/turboshaft/maglev-early-lowering-reducer-inl.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/required-optimization-reducer.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/utils.h",
    "src/compiler/turboshaft/value-numbering-reducer.h",
    "src/compiler/turboshaft/variable-reducer.h",
    "src/compiler/write-barrier-kind.h",
    "src/deoptimizer/deoptimize-reason.h",
    "src/handles/global-handles-inl.h",
    "src/handles/handles.h",
    "src/interpreter/bytecode-register.h",
    "src/maglev/maglev-basic-block.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-compilation-unit.h",
    "src/maglev/maglev-graph-builder.h",
    "src/maglev/maglev-graph-labeller.h",
    "src/maglev/maglev-graph-processor.h",
    "src/maglev/maglev-graph-verifier.h",
    "src/maglev/maglev-inlining.h",
    "src/maglev/maglev-ir-inl.h",
    "src/maglev/maglev-ir.h",
    "src/maglev/maglev-phi-representation-selector.h",
    "src/maglev/maglev-post-hoc-optimizations-processors.h",
    "src/objects/elements-kind.h",
    "src/objects/heap-object.h",
    "src/objects/js-array-buffer.h",
    "src/objects/map.h",
    "src/objects/objects.h",
    "src/objects/property-cell.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "BlockOriginTrackingReducer",
      "properties": [
        "maglev_input_block_",
        "turboshaft_block_origins_"
      ],
      "methods": [
        {
          "name": "SetMaglevInputBlock",
          "parameters": [
            "block"
          ],
          "return_type": "void",
          "logic": "Sets the Maglev basic block associated with the current Turboshaft block."
        },
        {
          "name": "maglev_input_block",
          "parameters": [],
          "return_type": "const maglev::BasicBlock*",
          "logic": "Returns the Maglev basic block associated with the reducer."
        },
        {
          "name": "Bind",
          "parameters": [
            "block"
          ],
          "return_type": "void",
          "logic": "Binds a Turboshaft block and stores the corresponding Maglev basic block origin. Handles the special case for the start block where no Maglev origin exists."
        },
        {
          "name": "GetMaglevOrigin",
          "parameters": [
            "block"
          ],
          "return_type": "const maglev::BasicBlock*",
          "logic": "Retrieves the Maglev basic block corresponding to the provided Turboshaft block."
        }
      ]
    },
    {
      "name": "GeneratorAnalyzer",
      "properties": [
        "labeller_",
        "block_to_header_",
        "visit_queue_",
        "block_to_innermost_bypassed_header_",
        "bypassed_headers_"
      ],
      "methods": [
        {
          "name": "Analyze",
          "parameters": [
            "graph"
          ],
          "return_type": "void",
          "logic": "Analyzes the Maglev graph to identify loop header bypasses caused by generator resumes."
        },
        {
          "name": "JumpBypassesHeader",
          "parameters": [
            "target"
          ],
          "return_type": "bool",
          "logic": "Checks if a jump to the given target block bypasses a loop header."
        },
        {
          "name": "GetInnermostBypassedHeader",
          "parameters": [
            "target"
          ],
          "return_type": "const maglev::BasicBlock*",
          "logic": "Returns the innermost loop header bypassed by a jump to the target block."
        },
        {
          "name": "HeaderIsBypassed",
          "parameters": [
            "header"
          ],
          "return_type": "bool",
          "logic": "Checks if the given loop header is bypassed by any generator resumes."
        },
        {
          "name": "GetLoopHeader",
          "parameters": [
            "node"
          ],
          "return_type": "const maglev::BasicBlock*",
          "logic": "Returns the loop header for a given node, if the node is inside a loop."
        },
        {
          "name": "has_header_bypasses",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if any loop headers are bypassed."
        }
      ]
    },
    {
      "name": "GraphBuildingNodeProcessor",
      "properties": [
        "data_",
        "temp_zone_",
        "assembler_",
        "maglev_compilation_unit_",
        "node_mapping_",
        "block_mapping_",
        "regs_to_vars_",
        "loop_single_edge_predecessors_",
        "maglev_representations_",
        "generator_analyzer_",
        "bailout_",
        "undefined_value_",
        "new_target_param_",
        "dummy_object_input_",
        "dummy_word32_input_",
        "dummy_float64_input_",
        "header_switch_input_",
        "loop_default_generator_value_",
        "generator_context_",
        "native_context_",
        "predecessor_permutation_",
        "loop_phis_first_input_",
        "loop_phis_first_input_index_",
        "catch_block_begin_",
        "on_generator_switch_loop_",
        "pre_loop_generator_blocks_",
        "second_return_value_"
      ],
      "methods": [
        {
          "name": "PreProcessGraph",
          "parameters": [
            "graph"
          ],
          "return_type": "void",
          "logic": "Preprocesses the Maglev graph by creating Turboshaft blocks corresponding to Maglev basic blocks, initializing constants, and handling generator-related data structures. Sets up the initial undefined constant and parameters."
        },
        {
          "name": "PostProcessGraph",
          "parameters": [
            "graph"
          ],
          "return_type": "void",
          "logic": "Postprocesses the generated Turboshaft graph by converting loop headers into regular merge blocks if they are not actually loop headers."
        },
        {
          "name": "IsMaglevMainGeneratorSwitchBlock",
          "parameters": [
            "maglev_block"
          ],
          "return_type": "bool",
          "logic": "Checks if the given Maglev block is the main generator dispatch switch block."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "maglev_block"
          ],
          "return_type": "void",
          "logic": "An empty placeholder function. This function is called after processing each basic block."
        },
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "maglev_block"
          ],
          "return_type": "maglev::BlockProcessResult",
          "logic": "Preprocesses a Maglev basic block, binding the corresponding Turboshaft block, handling exception blocks, and computing predecessor permutations for Phi inputs."
        },
        {
          "name": "ComputePredecessorPermutations",
          "parameters": [
            "maglev_block",
            "turboshaft_block",
            "skip_backedge",
            "ignore_last_predecessor"
          ],
          "return_type": "void",
          "logic": "Computes a permutation map from Maglev predecessor indices to Turboshaft predecessor indices for reordering Phi inputs."
        },
        {
          "name": "StartExceptionBlock",
          "parameters": [
            "maglev_catch_handler"
          ],
          "return_type": "void",
          "logic": "Handles the beginning of an exception handler block, potentially inserting tagging operations for Phi inputs."
        },
        {
          "name": "StartSinglePredecessorExceptionBlock",
          "parameters": [
            "maglev_catch_handler",
            "turboshaft_catch_handler"
          ],
          "return_type": "void",
          "logic": "Starts a single-predecessor exception block, binding it and inserting tagging operations for phis"
        },
        {
          "name": "InsertTaggingForPhis",
          "parameters": [
            "maglev_catch_handler"
          ],
          "return_type": "void",
          "logic": "Ensures that all inputs to exception Phis are tagged by inserting tagging nodes where necessary."
        },
        {
          "name": "StartMultiPredecessorExceptionBlock",
          "parameters": [
            "maglev_catch_handler",
            "turboshaft_catch_handler"
          ],
          "return_type": "void",
          "logic": "Handles multiple-predecessor exception blocks, tagging input values to exception phis by inserting new blocks that contain the Tagging operations."
        },
        {
          "name": "TagExceptionPhiInputsForBlock",
          "parameters": [
            "old_block",
            "maglev_catch_handler",
            "turboshaft_catch_handler"
          ],
          "return_type": "void",
          "logic": "Tags exception phi inputs for a given block by patching in-place the Goto of {old_block} to a new block, adding tagging and then jumping to the catch_handler"
        },
        {
          "name": "EmitLoopSinglePredecessorBlock",
          "parameters": [
            "maglev_loop_header"
          ],
          "return_type": "void",
          "logic": "Emits the Turboshaft block that acts as a single predecessor for a loop, handling both regular loops and loops with generator resume edges bypassing the header. Includes generating and setting header phi variables. Also handles the creation of a switch for resumed generator functions."
        },
        {
          "name": "PostPhiProcessing",
          "parameters": [],
          "return_type": "void",
          "logic": "Post-processes phi emission, inserting a switch block for loop headers bypassed by generator resumes."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Constant node by creating a corresponding Turboshaft HeapConstant node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev RootConstant node by creating a corresponding Turboshaft HeapConstant node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Int32Constant node by creating a corresponding Turboshaft Word32Constant node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Uint32Constant node by creating a corresponding Turboshaft Word32Constant node with sign hint unsigned."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Float64Constant node by creating a corresponding Turboshaft Float64Constant node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev SmiConstant node by creating a corresponding Turboshaft SmiConstant node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev TaggedIndexConstant node by creating a corresponding Turboshaft SmiConstant."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev TrustedConstant node by creating a corresponding Turboshaft TrustedHeapConstant node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev InitialValue node by creating a corresponding Turboshaft Parameter or OsrValue node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev RegisterInput node by creating a corresponding Turboshaft Parameter node for the new.target."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev FunctionEntryStackCheck node by creating a corresponding Turboshaft JSFunctionEntryStackCheck node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Phi node by creating a corresponding Turboshaft Phi or PendingLoopPhi node, considering loop headers, generator resumes and exception phis."
        },
        {
          "name": "MakePhiMaybePermuteInputs",
          "parameters": [
            "maglev_node",
            "maglev_input_count",
            "additional_input"
          ],
          "return_type": "V<Any>",
          "logic": "Helper function to create a Phi operation, which reorders the inputs in accordance to predecessor_permutation_."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Call node by creating a corresponding Turboshaft Call builtin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallKnownJSFunction node by creating a corresponding Turboshaft Call builtin or call node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallKnownApiFunction node by creating a corresponding Turboshaft Call builtin node."
        },
        {
          "name": "GenerateBuiltinCall",
          "parameters": [
            "node",
            "builtin",
            "frame_state",
            "arguments",
            "stack_arg_count"
          ],
          "return_type": "V<Any>",
          "logic": "Generates a Turboshaft Call node for a given builtin."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallBuiltin node by creating a corresponding Turboshaft Call builtin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallRuntime node by creating a corresponding Turboshaft Call node to the runtime."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ThrowReferenceErrorIfHole node by creating a call to CallRuntime_ThrowAccessedUninitializedVariable."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ThrowIfNotSuperConstructor node by calling CallRuntime_ThrowNotSuperConstructor if it's not a super constructor."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ThrowSuperAlreadyCalledIfNotHole node by calling CallRuntime_ThrowSuperAlreadyCalledError if the value isn't kTheHoleValue"
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ThrowSuperNotCalledIfHole node, calling CallRuntime_ThrowSuperNotCalled if the value is kTheHoleValue."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ThrowIfNotCallable node, calling CallRuntime_ThrowCalledNonCallable if it's not callable."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateFunctionContext node by creating a call to CallBuiltin_FastNewFunctionContextFunction or CallBuiltin_FastNewFunctionContextEval."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev FastCreateClosure node by creating a call to CallBuiltin_FastNewClosure."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateClosure node by creating a call to CallRuntime_NewClosure or CallRuntime_NewClosure_Tenured."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallWithArrayLike node by creating a call to CallBuiltin_CallWithArrayLike."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallWithSpread node by creating a call to CallBuiltin_CallWithSpread."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CallForwardVarargs node by creating a call to the appropriate builtin call forward varargs function."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev Construct node by creating a corresponding Turboshaft Construct or Construct_WithFeedback builtin call."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ConstructWithSpread node by creating a corresponding Turboshaft ConstructWithSpread builtin call."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CheckConstructResult node by creating a corresponding Turboshaft CheckConstructResult node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CheckDerivedConstructResult node by creating a corresponding Turboshaft CheckDerivedConstructResult node, throwing error if the result is invalid."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev SetKeyedGeneric node by creating a Turboshaft CallBuiltin to KeyedStoreIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev GetKeyedGeneric node by creating a Turboshaft CallBuiltin to KeyedLoadIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev SetNamedGeneric node by creating a Turboshaft CallBuiltin to StoreIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev LoadNamedGeneric node by creating a Turboshaft CallBuiltin to LoadIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev LoadNamedFromSuperGeneric node by creating a Turboshaft CallBuiltin to LoadSuperIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev LoadGlobal node by creating a Turboshaft CallBuiltin to LoadGlobalIC or LoadGlobalICInsideTypeof."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev StoreGlobal node by creating a Turboshaft CallBuiltin to StoreGlobalIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev DefineKeyedOwnGeneric node by creating a Turboshaft CallBuiltin to DefineKeyedOwnIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev DefineNamedOwnGeneric node by creating a Turboshaft CallBuiltin to DefineNamedOwnIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev GetIterator node by creating a Turboshaft CallBuiltin to GetIteratorWithFeedback."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateShallowObjectLiteral node by creating a Turboshaft CallBuiltin to CreateShallowObjectLiteral."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateShallowArrayLiteral node by creating a Turboshaft CallBuiltin to CreateShallowArrayLiteral."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev StoreInArrayLiteralGeneric node by calling kStoreInArrayLiteralIC."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a MapPrototypeGet by using FindOrderedHashMapEntry and loading the elements value from memory if the entry is valid."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev MapPrototypeGetInt32Key node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev TestInstanceOf node by calling the correct built-in function."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev DeleteProperty node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ToName node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateRegExpLiteral node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev GetTemplateObject node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateObjectLiteral node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CreateArrayLiteral node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev StoreInArrayLiteralGeneric node by creating a turboshaft CallBuiltin node."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ForInPrepare node by creating a Turboshaft Call to kForInPrepare."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev ForInNext node by calling built in function and doing appropriate linking."
        },
        {
          "name": "Process",
          "parameters": [
            "node",
            "state"
          ],
          "return_type": "maglev::ProcessResult",
          "logic": "Processes a Maglev CheckSmi by creating a corresponding DeoptimizeIf."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "MachineTypeFor",
      "parameters": [
        "repr"
      ],
      "return_type": "MachineType",
      "logic": "Converts a Maglev ValueRepresentation to a corresponding Turboshaft MachineType."
    }
  ]
}