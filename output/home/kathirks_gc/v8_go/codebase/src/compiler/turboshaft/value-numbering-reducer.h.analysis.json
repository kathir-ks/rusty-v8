{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/value-numbering-reducer.h",
  "imports": [
    "src/base/logging.h",
    "src/base/vector.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/fast-hash.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/reducer-traits.h",
    "src/utils/utils.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "ScopeCounter",
      "properties": [
        "scopes_"
      ],
      "methods": [
        {
          "name": "enter",
          "parameters": [],
          "return_type": "void",
          "logic": "Increments the scope counter. Used to indicate entering a scope where something (like value numbering) might be disabled."
        },
        {
          "name": "leave",
          "parameters": [],
          "return_type": "void",
          "logic": "Decrements the scope counter. Used to indicate leaving a scope where something (like value numbering) might be disabled."
        },
        {
          "name": "is_active",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the scope counter is greater than 0, indicating that we are currently in a disabled scope."
        }
      ]
    },
    {
      "name": "DisableValueNumbering",
      "properties": [
        "scopes_"
      ],
      "methods": [
        {
          "name": "DisableValueNumbering",
          "parameters": [
            "Reducer* reducer"
          ],
          "return_type": "explicit DisableValueNumbering",
          "logic": "Constructor. Disables ValueNumbering by entering a scope in the given reducer's scope counter."
        },
        {
          "name": "~DisableValueNumbering",
          "parameters": [],
          "return_type": "DisableValueNumbering",
          "logic": "Destructor. Enables ValueNumbering by leaving a scope in the given reducer's scope counter."
        }
      ]
    },
    {
      "name": "ValueNumberingReducer",
      "properties": [
        "dominator_path_",
        "table_",
        "mask_",
        "entry_count_",
        "depths_heads_",
        "disabled_scope_"
      ],
      "methods": [
        {
          "name": "CanBeGVNed",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if an operation can be value-numbered. Operations that may throw, or are certain control flow ops, are not value-numbered."
        },
        {
          "name": "Reduce##Name",
          "parameters": [
            "Args... args"
          ],
          "return_type": "OpIndex",
          "logic": "Template macro that generates Reduce functions for each operation. It first reduces the operation using the next reducer in the stack, and then checks if the result can be value-numbered. If it can, it adds the result to the value numbering table or finds an existing equivalent."
        },
        {
          "name": "Bind",
          "parameters": [
            "Block* block"
          ],
          "return_type": "void",
          "logic": "Binds the reducer to a new block. It resets the value numbering table to the dominator of the block and updates the dominator path and depth heads."
        },
        {
          "name": "ResetToBlock",
          "parameters": [
            "Block* block"
          ],
          "return_type": "void",
          "logic": "Resets the value numbering table to the first dominator of {block} that it contains. Clears current depth entries until a common dominator is found."
        },
        {
          "name": "WillGVNOp",
          "parameters": [
            "const Op& op"
          ],
          "return_type": "bool",
          "logic": "Checks if an operation will be value-numbered by looking for the operation in the hash table."
        },
        {
          "name": "gvn_disabled_scope",
          "parameters": [],
          "return_type": "ScopeCounter*",
          "logic": "Returns a pointer to the ScopeCounter used to disable GVN."
        },
        {
          "name": "AddOrFind",
          "parameters": [
            "OpIndex op_idx"
          ],
          "return_type": "OpIndex",
          "logic": "Adds an operation to the value numbering table or finds an existing equivalent. If an equivalent operation is found, the current operation is removed from the graph and the index of the existing operation is returned."
        },
        {
          "name": "Find",
          "parameters": [
            "const Op& op",
            "size_t* hash_ret = nullptr"
          ],
          "return_type": "Entry*",
          "logic": "Finds an operation in the value numbering table. If the operation is not found, returns a pointer to an empty entry where the operation can be inserted."
        },
        {
          "name": "ClearCurrentDepthEntries",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes all of the entries of the current depth (block) from the value numbering table."
        },
        {
          "name": "RehashIfNeeded",
          "parameters": [],
          "return_type": "void",
          "logic": "Doubles the size of the value numbering table and re-inserts the old entries if the table is too full."
        },
        {
          "name": "ComputeHash",
          "parameters": [
            "const Op& op"
          ],
          "return_type": "size_t",
          "logic": "Computes the hash value for an operation. Includes current block index for PhiOps."
        },
        {
          "name": "NextEntryIndex",
          "parameters": [
            "size_t index"
          ],
          "return_type": "size_t",
          "logic": "Calculates the next index in the hash table, handling wrap-around."
        },
        {
          "name": "NextEntry",
          "parameters": [
            "Entry* entry"
          ],
          "return_type": "Entry*",
          "logic": "Returns the next entry in the hash table. Handles wrap-around to the beginning of the table if the current entry is at the end."
        },
        {
          "name": "PrevEntry",
          "parameters": [
            "Entry* entry"
          ],
          "return_type": "Entry*",
          "logic": "Returns the previous entry in the hash table. Handles wrap-around to the end of the table if the current entry is at the beginning."
        },
        {
          "name": "is_disabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if value numbering is currently disabled."
        }
      ]
    }
  ],
  "functions": []
}