{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/loop-unrolling-reducer.cc",
  "imports": [
    "src/compiler/turboshaft/loop-unrolling-reducer.h",
    "<optional>",
    "src/base/bits.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/loop-finder.h"
  ],
  "classes": [
    {
      "name": "LoopUnrollingAnalyzer",
      "properties": [
        "loop_finder_",
        "loop_iteration_count_",
        "can_unroll_at_least_one_loop_",
        "stack_checks_to_remove_",
        "canonical_loop_matcher_",
        "input_graph_"
      ],
      "methods": [
        {
          "name": "DetectUnrollableLoops",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through the loop headers found by the LoopFinder. For each loop, it determines the iteration count using `GetLoopIterationCount`.  It checks if the loop should be fully or partially unrolled. If the loop's iteration count is small enough, it flags stack checks within the loop for removal."
        },
        {
          "name": "GetLoopIterationCount",
          "parameters": [
            "const LoopFinder::LoopInfo& info"
          ],
          "return_type": "IterationCount",
          "logic": "Analyzes a loop to determine its iteration count, attempting to match a canonical for-loop structure. It checks for a branch at the end of the loop header and uses `StaticCanonicalForLoopMatcher` to estimate the iteration count based on the loop's condition and increment."
        }
      ]
    },
    {
      "name": "StaticCanonicalForLoopMatcher",
      "properties": [
        "matcher_",
        "kMaxExactIter"
      ],
      "methods": [
        {
          "name": "MatchPhiCompareCst",
          "parameters": [
            "OpIndex cond_idx",
            "StaticCanonicalForLoopMatcher::CmpOp* cmp_op",
            "OpIndex* phi",
            "uint64_t* cst"
          ],
          "return_type": "bool",
          "logic": "Tries to match a comparison operation between a Phi node and a constant value, commonly found in loop conditions.  It identifies the comparison operator, the Phi node representing the loop counter, and the constant value."
        },
        {
          "name": "MatchCheckedOverflowBinop",
          "parameters": [
            "OpIndex idx",
            "V<Word>* left",
            "V<Word>* right",
            "BinOp* binop_op",
            "WordRepresentation* binop_rep"
          ],
          "return_type": "bool",
          "logic": "Matches an overflow-checked binary operation (e.g., addition, subtraction, multiplication).  It extracts the left and right operands, the operation type, and the word representation from the OverflowCheckedBinopOp."
        },
        {
          "name": "MatchWordBinop",
          "parameters": [
            "OpIndex idx",
            "V<Word>* left",
            "V<Word>* right",
            "BinOp* binop_op",
            "WordRepresentation* binop_rep"
          ],
          "return_type": "bool",
          "logic": "Matches a word-sized binary operation.  It extracts the left and right operands, the operation type, and the word representation from the WordBinopOp."
        },
        {
          "name": "GetIterCountIfStaticCanonicalForLoop",
          "parameters": [
            "const Block* header",
            "OpIndex cond_idx",
            "bool loop_if_cond_is"
          ],
          "return_type": "IterationCount",
          "logic": "Attempts to determine the iteration count of a loop if it conforms to a static canonical form (e.g., a simple for-loop). It matches the loop condition, extracts the initial value, increment, and limit, then calls `CountIterations` to estimate the iteration count."
        },
        {
          "name": "BinopKindIsSupported",
          "parameters": [
            "WordBinopOp::Kind binop_kind"
          ],
          "return_type": "constexpr bool",
          "logic": "Checks if a given WordBinopOp::Kind is supported for loop unrolling analysis."
        },
        {
          "name": "BinopFromWordBinopKind",
          "parameters": [
            "WordBinopOp::Kind kind"
          ],
          "return_type": "constexpr StaticCanonicalForLoopMatcher::BinOp",
          "logic": "Converts a WordBinopOp::Kind to a BinOp enum value used within the StaticCanonicalForLoopMatcher."
        },
        {
          "name": "BinopFromOverflowCheckedBinopKind",
          "parameters": [
            "OverflowCheckedBinopOp::Kind kind"
          ],
          "return_type": "constexpr StaticCanonicalForLoopMatcher::BinOp",
          "logic": "Converts an OverflowCheckedBinopOp::Kind to a BinOp enum value used within the StaticCanonicalForLoopMatcher."
        },
        {
          "name": "CountIterations",
          "parameters": [
            "uint64_t cmp_cst",
            "CmpOp cmp_op",
            "uint64_t initial_input",
            "uint64_t binop_cst",
            "BinOp binop_op",
            "WordRepresentation binop_rep",
            "bool loop_if_cond_is"
          ],
          "return_type": "IterationCount",
          "logic": "Wrapper around `CountIterationsImpl` that handles both 32-bit and 64-bit word representations and signed/unsigned comparisons."
        },
        {
          "name": "ComparisonKindToCmpOp",
          "parameters": [
            "ComparisonOp::Kind kind"
          ],
          "return_type": "constexpr StaticCanonicalForLoopMatcher::CmpOp",
          "logic": "Converts a ComparisonOp::Kind to a CmpOp enum value."
        },
        {
          "name": "InvertComparisonOp",
          "parameters": [
            "CmpOp op"
          ],
          "return_type": "constexpr StaticCanonicalForLoopMatcher::CmpOp",
          "logic": "Inverts a CmpOp (e.g., less than becomes greater than)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const IterationCount& count"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the IterationCount class to provide a string representation of the iteration count (Exact, Approx, or Unknown)."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const CmpOp& cmp"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the CmpOp enum to provide a string representation of the comparison operator."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const BinOp& binop"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the BinOp enum to provide a string representation of the binary operator."
    },
    {
      "name": "Next",
      "parameters": [
        "Int val",
        "Int incr",
        "StaticCanonicalForLoopMatcher::BinOp binop_op",
        "WordRepresentation binop_rep"
      ],
      "return_type": "std::optional<Int>",
      "logic": "Template function to calculate the next value in a loop based on the binary operator and increment. Handles different binary operators and checks for potential overflows."
    },
    {
      "name": "Cmp",
      "parameters": [
        "Int val",
        "Int max",
        "CmpOp cmp_op"
      ],
      "return_type": "bool",
      "logic": "Template function to compare two values based on the comparison operator."
    },
    {
      "name": "SubWillOverflow",
      "parameters": [
        "Int lhs",
        "Int rhs"
      ],
      "return_type": "bool",
      "logic": "Template function to check if subtraction would cause an overflow. Handles different integer types."
    },
    {
      "name": "DivWillOverflow",
      "parameters": [
        "Int dividend",
        "Int divisor"
      ],
      "return_type": "bool",
      "logic": "Template function to check if division would cause an overflow (only relevant for signed integer division)."
    },
    {
      "name": "CountIterationsImpl",
      "parameters": [
        "Int init",
        "Int max",
        "CmpOp cmp_op",
        "Int binop_cst",
        "BinOp binop_op",
        "WordRepresentation binop_rep",
        "bool loop_if_cond_is"
      ],
      "return_type": "IterationCount",
      "logic": "Template function that calculates the iteration count of a loop. It simulates the loop for a limited number of iterations to determine the exact count. If that fails, it attempts to approximate the count, particularly for addition-based loops."
    }
  ]
}