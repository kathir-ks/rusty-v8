{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/dead-code-elimination-reducer.h",
  "imports": [
    "<iomanip>",
    "<optional>",
    "src/common/globals.h",
    "src/compiler/backend/instruction-codes.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h"
  ],
  "classes": [
    {
      "name": "ControlState",
      "properties": [
        "kind",
        "block"
      ],
      "methods": [
        {
          "name": "NotEliminatable",
          "parameters": [],
          "return_type": "ControlState",
          "logic": "Returns a ControlState object representing that a branch cannot be rewritten."
        },
        {
          "name": "Block",
          "parameters": [
            "BlockIndex block"
          ],
          "return_type": "ControlState",
          "logic": "Returns a ControlState object representing that control can be rewritten to go directly to the specified block."
        },
        {
          "name": "Unreachable",
          "parameters": [],
          "return_type": "ControlState",
          "logic": "Returns a ControlState object representing that the control flow is unreachable."
        },
        {
          "name": "ControlState",
          "parameters": [
            "Kind kind",
            "BlockIndex block = BlockIndex::Invalid()"
          ],
          "return_type": "void",
          "logic": "Constructor for ControlState, initializes the kind and block index."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const ControlState& lhs",
            "const ControlState& rhs"
          ],
          "return_type": "ControlState",
          "logic": "Computes the least upper bound of two ControlState objects, according to the lattice defined. This is used to combine control state information from multiple paths."
        }
      ]
    },
    {
      "name": "OperationState",
      "properties": [],
      "methods": [
        {
          "name": "LeastUpperBound",
          "parameters": [
            "Liveness lhs",
            "Liveness rhs"
          ],
          "return_type": "Liveness",
          "logic": "Computes the least upper bound of two Liveness values, effectively ORing them together.  If either is live, the result is live."
        }
      ]
    },
    {
      "name": "DeadCodeAnalysis",
      "properties": [
        "graph_",
        "liveness_",
        "entry_control_state_",
        "rewritable_branch_targets_",
        "is_leaf_function_"
      ],
      "methods": [
        {
          "name": "DeadCodeAnalysis",
          "parameters": [
            "Graph& graph",
            "Zone* phase_zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the DeadCodeAnalysis class. Initializes the graph, liveness map, entry control state map, and rewritable branch targets."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "std::pair<FixedOpIndexSidetable<OperationState::Liveness>,\n            SparseOpIndexSideTable<BlockIndex>>",
          "logic": "Performs the dead code analysis. Iterates through the blocks of the graph and propagates liveness information. Returns the liveness map and rewritable branch targets."
        },
        {
          "name": "ProcessBlock",
          "parameters": [
            "const Block& block",
            "uint32_t* unprocessed_count"
          ],
          "return_type": "void",
          "logic": "Processes a single block, propagating liveness information backwards through the operations in the block and updating the entry control state."
        },
        {
          "name": "is_leaf_function",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether this function is a leaf function (doesn't call other functions)."
        }
      ]
    },
    {
      "name": "DeadCodeEliminationReducer",
      "properties": [
        "liveness_",
        "branch_rewrite_targets_",
        "analyzer_"
      ],
      "methods": [
        {
          "name": "CanAutoInlineBlocksWithSinglePredecessor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns false to prevent automatic inlining of blocks with single predecessors, as dead code elimination can change control flow."
        },
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Runs the dead code analysis and stores the results.  Also calls the Analyze method on the next reducer in the pipeline."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Branch)",
          "parameters": [
            "V<None> ig_index",
            "const BranchOp& branch"
          ],
          "return_type": "V<None>",
          "logic": "Attempts to rewrite a branch instruction based on the analysis results. If successful, returns Invalid(); otherwise calls the next reducer in the pipeline."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Goto)",
          "parameters": [
            "V<None> ig_index",
            "const GotoOp& gto"
          ],
          "return_type": "V<None>",
          "logic": "Attempts to rewrite a goto instruction based on the analysis results. If successful, returns {}; otherwise calls the next reducer in the pipeline."
        },
        {
          "name": "ReduceInputGraphOperation",
          "parameters": [
            "OpIndex ig_index",
            "const Op& op"
          ],
          "return_type": "OpIndex",
          "logic": "Checks if an operation is dead based on the analysis results. If so, returns Invalid(); otherwise, calls the next reducer in the pipeline to process the operation."
        },
        {
          "name": "IsLeafFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the function being compiled is considered a leaf function, based on the dead code analysis."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& stream",
        "const ControlState& state"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for ControlState, allowing ControlState objects to be printed to a stream."
    },
    {
      "name": "operator==",
      "parameters": [
        "const ControlState& lhs",
        "const ControlState& rhs"
      ],
      "return_type": "bool",
      "logic": "Overloads the equality operator for ControlState, allowing comparison of two ControlState objects."
    },
    {
      "name": "operator!=",
      "parameters": [
        "const ControlState& lhs",
        "const ControlState& rhs"
      ],
      "return_type": "bool",
      "logic": "Overloads the inequality operator for ControlState, allowing comparison of two ControlState objects."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& stream",
        "OperationState::Liveness liveness"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for OperationState::Liveness, allowing liveness values to be printed to a stream."
    }
  ]
}