{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/wasm-revec-reducer.h",
  "imports": [
    "<algorithm>",
    "src/base/safe_conversions.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/use-map.h",
    "src/compiler/wasm-graph-assembler.h"
  ],
  "classes": [
    {
      "name": "NodeGroup",
      "properties": [
        "static constexpr int kSize",
        "OpIndex indexes_[kSize]"
      ],
      "methods": [
        {
          "name": "NodeGroup",
          "parameters": [
            "OpIndex a",
            "OpIndex b"
          ],
          "return_type": "NodeGroup",
          "logic": "Constructor. Initializes the NodeGroup with two OpIndex values."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the node group (which is 2)."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int i"
          ],
          "return_type": "OpIndex",
          "logic": "Returns the OpIndex at the specified index."
        },
        {
          "name": "operator==",
          "parameters": [
            "const NodeGroup& other"
          ],
          "return_type": "bool",
          "logic": "Compares two NodeGroup objects for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const NodeGroup& other"
          ],
          "return_type": "bool",
          "logic": "Compares two NodeGroup objects for inequality."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const OpIndex*",
          "logic": "Returns a pointer to the beginning of the indexes array."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const OpIndex*",
          "logic": "Returns a pointer to the end of the indexes array."
        }
      ]
    },
    {
      "name": "PackNode",
      "properties": [
        "NodeGroup nodes_",
        "V<Simd256> revectorized_node_",
        "ZoneVector<PackNode*> operands_",
        "NodeType node_type_"
      ],
      "methods": [
        {
          "name": "PackNode",
          "parameters": [
            "Zone* zone",
            "const NodeGroup& node_group",
            "NodeType node_type"
          ],
          "return_type": "PackNode",
          "logic": "Constructor. Initializes a PackNode with a NodeGroup and node type."
        },
        {
          "name": "nodes",
          "parameters": [],
          "return_type": "const NodeGroup&",
          "logic": "Returns the NodeGroup associated with this PackNode."
        },
        {
          "name": "IsSame",
          "parameters": [
            "const NodeGroup& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if the NodeGroup is the same as the passed in NodeGroup."
        },
        {
          "name": "IsSame",
          "parameters": [
            "const PackNode& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two PackNodes contain the same NodeGroup."
        },
        {
          "name": "RevectorizedNode",
          "parameters": [],
          "return_type": "V<Simd256>",
          "logic": "Returns the revectorized node as a Simd256 value."
        },
        {
          "name": "SetRevectorizedNode",
          "parameters": [
            "V<Simd256> node"
          ],
          "return_type": "void",
          "logic": "Sets the revectorized node to the given Simd256 value."
        },
        {
          "name": "IsDefaultPackNode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node type is the default type."
        },
        {
          "name": "IsForcePackNode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node type is force pack node."
        },
        {
          "name": "IsShufflePackNode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node type is shuffle pack node."
        },
        {
          "name": "IsBundlePackNode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node type is bundle pack node."
        },
        {
          "name": "is_force_packing",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the PackNode will be force-packed, considering both ForcePackNode and IntersectPackNode."
        },
        {
          "name": "AsForcePackNode",
          "parameters": [],
          "return_type": "ForcePackNode*",
          "logic": "Casts the PackNode to a ForcePackNode. Asserts that it is actually of that type."
        },
        {
          "name": "AsShufflePackNode",
          "parameters": [],
          "return_type": "ShufflePackNode*",
          "logic": "Casts the PackNode to a ShufflePackNode. Asserts that it is actually of that type."
        },
        {
          "name": "AsBundlePackNode",
          "parameters": [],
          "return_type": "BundlePackNode*",
          "logic": "Casts the PackNode to a BundlePackNode. Asserts that it is actually of that type."
        },
        {
          "name": "GetOperand",
          "parameters": [
            "int index"
          ],
          "return_type": "PackNode*",
          "logic": "Returns the operand at the given index in the operands_ vector."
        },
        {
          "name": "SetOperand",
          "parameters": [
            "int index",
            "PackNode* pnode"
          ],
          "return_type": "void",
          "logic": "Sets the operand at the given index in the operands_ vector."
        },
        {
          "name": "GetOperandsSize",
          "parameters": [],
          "return_type": "ZoneVector<PackNode*>::size_type",
          "logic": "Returns the number of operands in the operands_ vector."
        },
        {
          "name": "Print",
          "parameters": [
            "Graph* graph"
          ],
          "return_type": "void",
          "logic": "Prints debug information about the pack node. (Implementation not available in the header file.)"
        }
      ]
    },
    {
      "name": "ForcePackNode",
      "properties": [
        "ForcePackType force_pack_type_"
      ],
      "methods": [
        {
          "name": "ForcePackNode",
          "parameters": [
            "Zone* zone",
            "const NodeGroup& node_group",
            "ForcePackType type"
          ],
          "return_type": "ForcePackNode",
          "logic": "Constructor. Initializes a ForcePackNode with a NodeGroup and a force pack type."
        },
        {
          "name": "force_pack_type",
          "parameters": [],
          "return_type": "ForcePackType",
          "logic": "Returns the force pack type of the node."
        }
      ]
    },
    {
      "name": "ShufflePackNode",
      "properties": [
        "SpecificInfo info_"
      ],
      "methods": [
        {
          "name": "ShufflePackNode",
          "parameters": [
            "Zone* zone",
            "const NodeGroup& node_group",
            "SpecificInfo::Kind kind"
          ],
          "return_type": "ShufflePackNode",
          "logic": "Constructor. Initializes a ShufflePackNode with a NodeGroup and specific info."
        },
        {
          "name": "info",
          "parameters": [],
          "return_type": "SpecificInfo&",
          "logic": "Returns the specific info."
        }
      ],
      "classes": [
        {
          "name": "SpecificInfo",
          "properties": [
            "Kind kind_",
            "Param param_"
          ],
          "methods": [
            {
              "name": "kind",
              "parameters": [],
              "return_type": "Kind",
              "logic": "Returns the kind of SpecificInfo."
            },
            {
              "name": "set_kind",
              "parameters": [
                "Kind kind"
              ],
              "return_type": "void",
              "logic": "Sets the kind of SpecificInfo."
            },
            {
              "name": "set_splat_index",
              "parameters": [
                "uint8_t value"
              ],
              "return_type": "void",
              "logic": "Sets the splat index (used for LoadTransform). Asserts valid kind."
            },
            {
              "name": "splat_index",
              "parameters": [],
              "return_type": "int",
              "logic": "Gets the splat index (used for LoadTransform). Asserts valid kind."
            },
            {
              "name": "set_shufd_control",
              "parameters": [
                "uint8_t control"
              ],
              "return_type": "void",
              "logic": "Sets the shufd control byte. (x64 specific). Asserts valid kind."
            },
            {
              "name": "shufd_control",
              "parameters": [],
              "return_type": "uint8_t",
              "logic": "Gets the shufd control byte (x64 specific). Asserts valid kind."
            },
            {
              "name": "set_shufps_control",
              "parameters": [
                "uint8_t control"
              ],
              "return_type": "void",
              "logic": "Sets the shufps control byte (x64 specific). Asserts valid kind."
            },
            {
              "name": "shufps_control",
              "parameters": [],
              "return_type": "uint8_t",
              "logic": "Gets the shufps control byte (x64 specific). Asserts valid kind."
            }
          ]
        }
      ]
    },
    {
      "name": "BundlePackNode",
      "properties": [
        "OpIndex base_",
        "uint8_t offset_",
        "uint8_t lane_size_",
        "bool is_sign_extract_",
        "bool is_sign_convert_"
      ],
      "methods": [
        {
          "name": "BundlePackNode",
          "parameters": [
            "Zone* zone",
            "const NodeGroup& node_group",
            "OpIndex base",
            "int8_t offset",
            "uint8_t lane_size",
            "bool is_sign_extract",
            "bool is_sign_convert"
          ],
          "return_type": "BundlePackNode",
          "logic": "Constructor. Initializes a BundlePackNode, representing an i8x16/i16x8 to f32x4 conversion."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Returns the base OpIndex."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "uint8_t",
          "logic": "Returns the offset."
        },
        {
          "name": "lane_size",
          "parameters": [],
          "return_type": "uint8_t",
          "logic": "Returns the lane size."
        },
        {
          "name": "is_sign_extract",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the lane extract is signed."
        },
        {
          "name": "is_sign_convert",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the conversion to f32x4 is signed."
        }
      ]
    },
    {
      "name": "SLPTree",
      "properties": [
        "Graph& graph_",
        "WasmRevecAnalyzer* analyzer_",
        "Zone* phase_zone_",
        "PackNode* root_",
        "ZoneUnorderedMap<OpIndex, PackNode*> node_to_packnode_",
        "ZoneUnorderedMap<OpIndex, ZoneVector<PackNode*>> node_to_intersect_packnodes_"
      ],
      "methods": [
        {
          "name": "SLPTree",
          "parameters": [
            "Graph& graph",
            "WasmRevecAnalyzer* analyzer",
            "Zone* zone"
          ],
          "return_type": "SLPTree",
          "logic": "Constructor. Initializes an SLPTree with a graph, analyzer, and zone."
        },
        {
          "name": "BuildTree",
          "parameters": [
            "const NodeGroup& roots"
          ],
          "return_type": "PackNode*",
          "logic": "Builds the SLP tree from the given roots."
        },
        {
          "name": "DeleteTree",
          "parameters": [],
          "return_type": "void",
          "logic": "Deletes the tree by iterating and deleting PackNodes. (Implementation not available in header)"
        },
        {
          "name": "GetPackNode",
          "parameters": [
            "OpIndex node"
          ],
          "return_type": "PackNode*",
          "logic": "Retrieves the PackNode associated with the given OpIndex."
        },
        {
          "name": "GetIntersectPackNodes",
          "parameters": [
            "OpIndex node"
          ],
          "return_type": "ZoneVector<PackNode*>*",
          "logic": "Retrieves the ZoneVector of PackNodes associated with the given OpIndex in the intersect map."
        },
        {
          "name": "GetNodeMapping",
          "parameters": [],
          "return_type": "ZoneUnorderedMap<OpIndex, PackNode*>&",
          "logic": "Returns a reference to the node_to_packnode_ map."
        },
        {
          "name": "GetIntersectNodeMapping",
          "parameters": [],
          "return_type": "ZoneUnorderedMap<OpIndex, ZoneVector<PackNode*>>&",
          "logic": "Returns a reference to the node_to_intersect_packnodes_ map."
        },
        {
          "name": "Print",
          "parameters": [
            "const char* info"
          ],
          "return_type": "void",
          "logic": "Prints debug information about the tree. (Implementation not available in header)"
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "Graph&",
          "logic": "Returns a reference to the graph."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns a pointer to the phase zone."
        }
      ],
      "classes": []
    },
    {
      "name": "WasmRevecAnalyzer",
      "properties": [
        "PipelineData* data_",
        "Graph& graph_",
        "Zone* phase_zone_",
        "ZoneVector<std::pair<OpIndex, OpIndex>> store_seeds_",
        "ZoneVector<std::pair<OpIndex, OpIndex>> reduce_seeds_",
        "const wasm::WasmModule* module_",
        "ZoneUnorderedMap<OpIndex, PackNode*> revectorizable_node_",
        "ZoneUnorderedMap<OpIndex, ZoneVector<PackNode*>> revectorizable_intersect_node_",
        "bool should_reduce_",
        "SimdUseMap* use_map_"
      ],
      "methods": [
        {
          "name": "WasmRevecAnalyzer",
          "parameters": [
            "PipelineData* data",
            "Zone* zone",
            "Graph& graph"
          ],
          "return_type": "WasmRevecAnalyzer",
          "logic": "Constructor. Initializes the analyzer with pipeline data, zone, and graph.  Calls Run()."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Analyzes the graph for revectorization opportunities.  Implementation not in header."
        },
        {
          "name": "MergeSLPTree",
          "parameters": [
            "SLPTree& slp_tree"
          ],
          "return_type": "void",
          "logic": "Merges the given SLPTree into the analyzer's internal data structures.  Implementation not in header."
        },
        {
          "name": "ShouldReduce",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the graph should be reduced based on analysis."
        },
        {
          "name": "GetPackNode",
          "parameters": [
            "const OpIndex ig_index"
          ],
          "return_type": "PackNode*",
          "logic": "Returns the pack node associated with the given node index. Returns null if no node is found."
        },
        {
          "name": "GetIntersectPackNodes",
          "parameters": [
            "const OpIndex node"
          ],
          "return_type": "ZoneVector<PackNode*>*",
          "logic": "Returns the intersect pack nodes vector associated with the given node index. Returns null if no node is found."
        },
        {
          "name": "GetReducedInput",
          "parameters": [
            "const PackNode* pnode",
            "const int index"
          ],
          "return_type": "const OpIndex",
          "logic": "Returns the revectorized node (reduced input) for the given PackNode at the specified index."
        },
        {
          "name": "GetStartOperation",
          "parameters": [
            "const PackNode* pnode",
            "const OpIndex node",
            "const Operation& op"
          ],
          "return_type": "const Operation&",
          "logic": "Returns the starting operation from the node list of pack node, based on input op."
        },
        {
          "name": "uses",
          "parameters": [
            "OpIndex node"
          ],
          "return_type": "base::Vector<const OpIndex>",
          "logic": "Returns uses from internal use_map."
        }
      ]
    },
    {
      "name": "WasmRevecReducer",
      "properties": [
        "const wasm::WasmModule* module_",
        "WasmRevecAnalyzer analyzer_"
      ],
      "methods": [
        {
          "name": "GetExtractOpIfNeeded",
          "parameters": [
            "const PackNode* pnode",
            "OpIndex ig_index",
            "OpIndex og_index"
          ],
          "return_type": "OpIndex",
          "logic": "Generates a Simd256Extract128Lane operation if needed after revectorization."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Constant)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128ConstantOp& constant_op"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128Constant operation to a Simd256Constant operation."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128LoadTransform)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128LoadTransformOp& load_transform"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128LoadTransform operation to a Simd256LoadTransform operation."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Load)",
          "parameters": [
            "OpIndex ig_index",
            "const LoadOp& load"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Load operation of size Simd128 to Simd256."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Store)",
          "parameters": [
            "OpIndex ig_index",
            "const StoreOp& store"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Store operation to store Simd256 value."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Phi)",
          "parameters": [
            "OpIndex ig_index",
            "const PhiOp& phi"
          ],
          "return_type": "OpIndex",
          "logic": "Handles phi node updates in revectorization."
        },
        {
          "name": "FixLoopPhi",
          "parameters": [
            "const PhiOp& input_phi",
            "OpIndex output_index",
            "Block* output_graph_loop"
          ],
          "return_type": "void",
          "logic": "Fixes loop phis after revectorization."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Unary)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128UnaryOp& unary"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128Unary operation to Simd256."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Binop)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128BinopOp& op"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128Binop to Simd256."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Shift)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128ShiftOp& op"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces Simd128Shift to Simd256Shift."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Ternary)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128TernaryOp& ternary"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128Ternary operation to a Simd256Ternary operation."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Splat)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128SplatOp& op"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128Splat to Simd256Splat."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Shuffle)",
          "parameters": [
            "V<Simd128> ig_index",
            "const Simd128ShuffleOp& op"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces a Simd128Shuffle to optimized Simd256 operations based on ShufflePackNode specific info. The specific implementation depends on specific pattern of the shuffle array."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128ReplaceLane)",
          "parameters": [
            "OpIndex ig_index",
            "const Simd128ReplaceLaneOp& replace"
          ],
          "return_type": "OpIndex",
          "logic": "Handles the conversion of i8x16/i16x8 lanes to f32x4, using Simd256 operations."
        },
        {
          "name": "ReduceInputsOfOp",
          "parameters": [
            "OpIndex cur_index",
            "OpIndex op_index"
          ],
          "return_type": "void",
          "logic": "Reduces all inputs of the given operation, ensuring DFS traversal and correct node emission order."
        },
        {
          "name": "ReduceForceOrIntersectPackNode",
          "parameters": [
            "PackNode* pnode",
            "const OpIndex ig_index",
            "OpIndex* og_index"
          ],
          "return_type": "void",
          "logic": "Reduces operations within a ForcePackNode or IntersectPackNode, creating the SimdPack128To256 operation."
        },
        {
          "name": "ReduceInputGraphOperation",
          "parameters": [
            "OpIndex ig_index",
            "const Op& op"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces an operation from input graph to output graph with considering ForcePackNode and IntersectPackNode."
        }
      ]
    }
  ],
  "functions": []
}