{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/wasm-shuffle-reducer.cc",
  "imports": [
    "src/compiler/turboshaft/wasm-shuffle-reducer.h"
  ],
  "classes": [
    {
      "name": "DemandedElementAnalysis",
      "properties": [
        "visited_",
        "demanded_elements_"
      ],
      "methods": [
        {
          "name": "AddUnaryOp",
          "parameters": [
            "const Simd128UnaryOp& unop",
            "LaneBitSet lanes"
          ],
          "return_type": "void",
          "logic": "Adds a Simd128UnaryOp to the analysis, potentially recording the operation's input if it's used by only this operation and is a low-half conversion.  It uses a `visited_` set to prevent infinite recursion."
        },
        {
          "name": "AddBinaryOp",
          "parameters": [
            "const Simd128BinopOp& binop",
            "LaneBitSet lanes"
          ],
          "return_type": "void",
          "logic": "Adds a Simd128BinopOp to the analysis, recording its left and right inputs if they are used by only this operation and is a low-half extension multiplication. It uses `visited_` set to prevent infinite recursion."
        },
        {
          "name": "RecordOp",
          "parameters": [
            "const Operation* op",
            "LaneBitSet lanes"
          ],
          "return_type": "void",
          "logic": "Records the demanded elements for an operation.  If the operation is a Simd128UnaryOp, it calls AddUnaryOp. If it's a Simd128BinopOp, it calls AddBinaryOp. If it's a Simd128ShuffleOp, it adds the shuffle and the demanded lanes to the `demanded_elements_` vector."
        }
      ]
    },
    {
      "name": "WasmShuffleAnalyzer",
      "properties": [
        "demanded_element_analysis",
        "shift_shuffles_",
        "low_half_shuffles_",
        "high_half_shuffles_"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through the blocks and operations in reverse order and processes each operation to analyze shuffle patterns."
        },
        {
          "name": "Process",
          "parameters": [
            "const Operation& op"
          ],
          "return_type": "void",
          "logic": "Processes a single operation to analyze shuffle patterns by calling the relevant Process function for the specific operation type."
        },
        {
          "name": "ProcessUnary",
          "parameters": [
            "const Simd128UnaryOp& unop"
          ],
          "return_type": "void",
          "logic": "Processes a Simd128UnaryOp, adding it to the demanded element analysis with all lanes demanded."
        },
        {
          "name": "ProcessBinary",
          "parameters": [
            "const Simd128BinopOp& binop"
          ],
          "return_type": "void",
          "logic": "Processes a Simd128BinopOp, adding it to the demanded element analysis with all lanes demanded."
        },
        {
          "name": "ProcessShuffleOfShuffle",
          "parameters": [
            "const Simd128ShuffleOp& shuffle_op",
            "const Simd128ShuffleOp& shuffle",
            "uint8_t lower_limit",
            "uint8_t upper_limit"
          ],
          "return_type": "void",
          "logic": "Processes a shuffle operation that is the input to another shuffle operation, to see if optimizations are possible by reducing the lanes demanded. It checks if the shuffle's lanes are exclusively from one half of the input shuffle's lanes, and records information needed for potential shuffle shifting.  It adds shuffle_op to either `shift_shuffles_`, `low_half_shuffles_` or `high_half_shuffles_` if specific conditions are met. Also records `shuffle_op` in `demanded_element_analysis` with a reduced lane set."
        },
        {
          "name": "ProcessShuffle",
          "parameters": [
            "const Simd128ShuffleOp& shuffle"
          ],
          "return_type": "void",
          "logic": "Processes a Simd128ShuffleOp, checking if its inputs are also shuffle operations, and if so, calls ProcessShuffleOfShuffle to perform further analysis. It checks if the left and right inputs are shuffle operations and if their `saturated_use_count` is one. Then, calls `ProcessShuffleOfShuffle` with appropriate lower and upper limits."
        }
      ]
    }
  ],
  "functions": []
}