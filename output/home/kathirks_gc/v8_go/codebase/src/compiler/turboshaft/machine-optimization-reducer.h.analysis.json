{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/machine-optimization-reducer.h",
  "imports": [
    "<algorithm>",
    "<cmath>",
    "<cstring>",
    "<limits>",
    "<optional>",
    "<type_traits>",
    "include/v8-internal.h",
    "src/base/bits.h",
    "src/base/division-by-constant.h",
    "src/base/hashing.h",
    "src/base/ieee754.h",
    "src/base/logging.h",
    "src/base/macros.h",
    "src/base/overflowing-math.h",
    "src/base/small-vector.h",
    "src/base/template-utils.h",
    "src/base/vector.h",
    "src/builtins/builtins.h",
    "src/codegen/machine-type.h",
    "src/compiler/backend/instruction.h",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/machine-operator-reducer.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/opmasks.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/reducer-traits.h",
    "src/compiler/turboshaft/representations.h",
    "src/handles/handles.h",
    "src/numbers/conversions.h",
    "src/numbers/ieee754.h",
    "src/wasm/simd-shuffle.h"
  ],
  "classes": [
    {
      "name": "detail::BitfieldCheck",
      "properties": [
        "source",
        "mask",
        "masked_value",
        "truncate_from_64_bit"
      ],
      "methods": [
        {
          "name": "BitfieldCheck",
          "parameters": [
            "V<Word> source",
            "uint32_t mask",
            "uint32_t masked_value",
            "bool truncate_from_64_bit"
          ],
          "return_type": "void",
          "logic": "Constructor for the BitfieldCheck struct. Initializes the member variables."
        },
        {
          "name": "Detect",
          "parameters": [
            "const OperationMatcher& matcher",
            "const Graph& graph",
            "V<Word> index"
          ],
          "return_type": "std::optional<BitfieldCheck>",
          "logic": "Detects a bitfield check pattern in the graph, looking for single-bit checks or equality checks after masking. Returns an optional BitfieldCheck if a pattern is found."
        },
        {
          "name": "TryCombine",
          "parameters": [
            "const BitfieldCheck& other"
          ],
          "return_type": "std::optional<BitfieldCheck>",
          "logic": "Tries to combine two BitfieldCheck instances into one if they operate on the same source and truncation status. Allows combining checks on different bitfields of the same source."
        },
        {
          "name": "TryDetectShiftAndMaskOneBit",
          "parameters": [
            "const OperationMatcher& matcher",
            "V<Word> index"
          ],
          "return_type": "std::optional<BitfieldCheck>",
          "logic": "Template function that tries to detect a shift-and-mask-one-bit pattern like `(val >> shift) & 1`. Handles both Word32 and Word64 types. Used by Detect."
        }
      ]
    },
    {
      "name": "MachineOptimizationReducer",
      "properties": [],
      "methods": [
        {
          "name": "Change",
          "parameters": [
            "V<Untagged> input",
            "ChangeOp::Kind kind",
            "ChangeOp::Assumption assumption",
            "RegisterRepresentation from",
            "RegisterRepresentation to"
          ],
          "return_type": "V<Untagged>",
          "logic": "Reduces Change operations, attempting constant folding and removing unnecessary conversions. Handles various conversions between Word32, Word64, Float32, and Float64."
        },
        {
          "name": "BitcastWord32PairToFloat64",
          "parameters": [
            "V<Word32> hi_word32",
            "V<Word32> lo_word32"
          ],
          "return_type": "V<Float64>",
          "logic": "Reduces BitcastWord32PairToFloat64 operations, combining two Word32 values into a Float64 if they are constant."
        },
        {
          "name": "TaggedBitcast",
          "parameters": [
            "V<Any> input",
            "RegisterRepresentation from",
            "RegisterRepresentation to",
            "TaggedBitcastOp::Kind kind"
          ],
          "return_type": "V<Any>",
          "logic": "Reduces TaggedBitcast operations, shortcutting Tagged->Untagged->Tagged sequences and constant folding conversions between Word, Smi, and Tagged values."
        },
        {
          "name": "FloatUnary",
          "parameters": [
            "V<Float> input",
            "FloatUnaryOp::Kind kind",
            "FloatRepresentation rep"
          ],
          "return_type": "V<Float>",
          "logic": "Reduces FloatUnary operations, performing constant folding for various unary operations like Abs, Negate, Rounding, Log, Sqrt, etc."
        },
        {
          "name": "WordUnary",
          "parameters": [
            "V<Word> input",
            "WordUnaryOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "V<Word>",
          "logic": "Reduces WordUnary operations, performing constant folding for operations like ReverseBytes, CountLeadingZeros, SignExtend, etc."
        },
        {
          "name": "FloatBinop",
          "parameters": [
            "V<Float> lhs",
            "V<Float> rhs",
            "FloatBinopOp::Kind kind",
            "FloatRepresentation rep"
          ],
          "return_type": "V<Float>",
          "logic": "Reduces FloatBinop operations, performing constant folding and algebraic simplifications for operations like Add, Mul, Sub, Div, Min, Max, Pow, etc."
        },
        {
          "name": "WordBinop",
          "parameters": [
            "V<Word> left",
            "V<Word> right",
            "WordBinopOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "V<Word>",
          "logic": "Reduces WordBinop operations, performing constant folding and algebraic simplifications for operations like Add, Mul, And, Or, Xor, Sub, Div, Mod, etc. Also detects and combines BitfieldChecks and reduces rotate operations."
        },
        {
          "name": "TryMatchHeapObject",
          "parameters": [
            "V<Any> idx",
            "int depth"
          ],
          "return_type": "bool",
          "logic": "Tries to determine if a given OpIndex represents a HeapObject."
        },
        {
          "name": "TryReduceToRor",
          "parameters": [
            "V<Word> left",
            "V<Word> right",
            "WordBinopOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "std::optional<V<Word>>",
          "logic": "Tries to reduce a bitwise OR or XOR of a left shift and a logical right shift to a rotate right (ROR) operation."
        },
        {
          "name": "OverflowCheckedBinop",
          "parameters": [
            "V<Word> left",
            "V<Word> right",
            "OverflowCheckedBinopOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "V<Tuple<Word, Word32>>",
          "logic": "Reduces OverflowCheckedBinop operations, performing constant folding and simplifications for operations like SignedAdd, SignedMul, and SignedSub, returning a tuple of the result and an overflow flag."
        },
        {
          "name": "Comparison",
          "parameters": [
            "V<Any> left",
            "V<Any> right",
            "ComparisonOp::Kind kind",
            "RegisterRepresentation rep"
          ],
          "return_type": "V<Word32>",
          "logic": "Reduces Comparison operations, performing constant folding and simplifications for operations like Equal, LessThan, LessThanOrEqual. Also attempts to map 64-bit to 32-bit comparisons if possible."
        },
        {
          "name": "Shift",
          "parameters": [
            "V<Word> left",
            "V<Word32> right",
            "ShiftOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "V<Word>",
          "logic": "Reduces Shift operations, performing constant folding and algebraic simplifications for operations like ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, RotateRight, RotateLeft. Also handles shift amount masking"
        },
        {
          "name": "Branch",
          "parameters": [
            "OpIndex condition",
            "Block* if_true",
            "Block* if_false",
            "BranchHint hint"
          ],
          "return_type": "V<None>",
          "logic": "Reduces Branch operations, replacing them with Gotos if the condition is a constant boolean or simplifying the branch condition."
        },
        {
          "name": "DeoptimizeIf",
          "parameters": [
            "V<Word32> condition",
            "V<FrameState> frame_state",
            "bool negated",
            "const DeoptimizeParameters* parameters"
          ],
          "return_type": "V<None>",
          "logic": "Reduces DeoptimizeIf operations, potentially triggering a deoptimization if the condition is a constant boolean or simplifying the condition."
        },
        {
          "name": "TrapIf",
          "parameters": [
            "V<Word32> condition",
            "OptionalV<FrameState> frame_state",
            "bool negated",
            "TrapId trap_id"
          ],
          "return_type": "V<None>",
          "logic": "Reduces TrapIf operations, potentially triggering a trap if the condition is a constant boolean, or simplifying the condition."
        },
        {
          "name": "Select",
          "parameters": [
            "V<Word32> cond",
            "V<Any> vtrue",
            "V<Any> vfalse",
            "RegisterRepresentation rep",
            "BranchHint hint",
            "SelectOp::Implementation implem"
          ],
          "return_type": "V<Any>",
          "logic": "Reduces Select operations, replacing them with the `vtrue` or `vfalse` value if the condition is a constant boolean."
        },
        {
          "name": "StaticAssert",
          "parameters": [
            "V<Word32> condition",
            "const char* source"
          ],
          "return_type": "V<None>",
          "logic": "Reduces StaticAssert operations. If the condition is true, the assert is removed."
        },
        {
          "name": "Switch",
          "parameters": [
            "V<Word32> input",
            "base::Vector<SwitchOp::Case> cases",
            "Block* default_case",
            "BranchHint default_hint"
          ],
          "return_type": "V<None>",
          "logic": "Reduces Switch operations. If the input is a constant integer, the control flow jumps to the matching case or the default case."
        },
        {
          "name": "Store",
          "parameters": [
            "OpIndex base_idx",
            "OptionalOpIndex index",
            "OpIndex value",
            "StoreOp::Kind kind",
            "MemoryRepresentation stored_rep",
            "WriteBarrierKind write_barrier",
            "int32_t offset",
            "uint8_t element_scale",
            "bool maybe_initializing_or_transitioning",
            "IndirectPointerTag maybe_indirect_pointer_tag"
          ],
          "return_type": "V<None>",
          "logic": "Reduces Store operations.  It tries to merge constants into the offset and truncates store values if they are larger than the stored representation allows."
        },
        {
          "name": "Load",
          "parameters": [
            "OpIndex base_idx",
            "OptionalOpIndex index",
            "LoadOp::Kind kind",
            "MemoryRepresentation loaded_rep",
            "RegisterRepresentation result_rep",
            "int32_t offset",
            "uint8_t element_scale"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces Load operations. It attempts to fold constants into the offset, constant-fold map loads if possible, and merge base and index if possible."
        },
        {
          "name": "Simd128ExtractLane",
          "parameters": [
            "V<Simd128> input",
            "Simd128ExtractLaneOp::Kind kind",
            "uint8_t lane"
          ],
          "return_type": "V<Any>",
          "logic": "Reduces Simd128ExtractLane operations, especially on ARM64, by attempting to recognize common vector reduction patterns and replacing them with Simd128Reduce operations. Only works for lane 0."
        },
        {
          "name": "ReduceCompareEqual",
          "parameters": [
            "V<Any> left",
            "V<Any> right",
            "RegisterRepresentation rep"
          ],
          "return_type": "V<Word32>",
          "logic": "Helper function to reduce Comparison::Kind::kEqual operations. Performs constant folding and simplifies comparisons based on the register representation."
        },
        {
          "name": "TryAdjustOffset",
          "parameters": [
            "int32_t* offset",
            "const Operation& maybe_constant",
            "uint8_t element_scale",
            "bool tagged_base"
          ],
          "return_type": "bool",
          "logic": "Helper function to try to adjust a load/store offset by adding a constant value."
        },
        {
          "name": "TryAdjustIndex",
          "parameters": [
            "int32_t offset",
            "OpIndex* index",
            "const Operation& maybe_constant",
            "uint8_t element_scale"
          ],
          "return_type": "bool",
          "logic": "Helper function to try to adjust a memory load/store OpIndex by adding a constant value. Note: This changes the OpIndex to constant."
        },
        {
          "name": "MapLoadCanBeConstantFolded",
          "parameters": [
            "OptionalMapRef map"
          ],
          "return_type": "bool",
          "logic": "Determines whether a map load can be constant-folded."
        },
        {
          "name": "CountLeadingSignBits",
          "parameters": [
            "int64_t value",
            "WordRepresentation rep"
          ],
          "return_type": "int",
          "logic": "Counts the number of leading sign bits in a value.  The implementation has been removed as its source has been truncated but in principle it counts leading sign bits in a value."
        },
        {
          "name": "ReduceBranchCondition",
          "parameters": [
            "OpIndex condition",
            "bool* negated"
          ],
          "return_type": "std::optional<OpIndex>",
          "logic": "Attempt to simplify a branch condition by negating parts of the condition."
        },
        {
          "name": "MatchBoolConstant",
          "parameters": [
            "OpIndex condition"
          ],
          "return_type": "std::optional<bool>",
          "logic": "Attempt to match a boolean constant (Word32Equal with 0 or 1)."
        },
        {
          "name": "ReduceMemoryIndex",
          "parameters": [
            "OpIndex index",
            "int32_t* offset",
            "uint8_t* element_scale",
            "bool tagged_base"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a memory index expression, simplifying it by combining constants. Returns `OpIndex::Invalid()` if the index can be folded into the offset."
        },
        {
          "name": "ReduceWithTruncation",
          "parameters": [
            "OpIndex value",
            "uint32_t max_value",
            "WordRepresentation rep"
          ],
          "return_type": "OpIndex",
          "logic": "Truncates a value by performing a BitwiseAnd with a mask derived from max_value. Returns the resulting index."
        },
        {
          "name": "Abs",
          "parameters": [
            "int64_t value"
          ],
          "return_type": "int64_t",
          "logic": "Returns the absolute value of a 64-bit integer value."
        },
        {
          "name": "IsFloat32ConvertedToFloat64",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "bool",
          "logic": "Check if an op is a FloatConversion from float32 to float64."
        },
        {
          "name": "UndoFloat32ToFloat64Conversion",
          "parameters": [
            "V<Float64> op"
          ],
          "return_type": "V<Float32>",
          "logic": "Removes the FloatConversion from float32 to float64"
        },
        {
          "name": "IsBit",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents the 'bit' type (0 or 1)."
        },
        {
          "name": "IsInt8",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents an 8-bit integer."
        },
        {
          "name": "IsInt16",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents a 16-bit integer."
        },
        {
          "name": "IsWord32ConvertedToWord64",
          "parameters": [
            "OpIndex op",
            "std::optional<bool>* sign_extended = nullptr"
          ],
          "return_type": "bool",
          "logic": "Checks if a node represents a Word32 converted to Word64, and optionally sets if the conversion was sign-extending."
        },
        {
          "name": "UndoWord32ToWord64Conversion",
          "parameters": [
            "V<Word64> op"
          ],
          "return_type": "OpIndex",
          "logic": "Removes the Word32 to Word64 conversion"
        },
        {
          "name": "TryRemoveWord32ToWord64Conversion",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "OpIndex",
          "logic": "Remove Word32 to Word64 conversion"
        },
        {
          "name": "IsNegativePowerOfTwo",
          "parameters": [
            "int64_t val"
          ],
          "return_type": "bool",
          "logic": "Determine whether a given value is a negative power of two"
        },
        {
          "name": "ReduceSignedDiv",
          "parameters": [
            "V<Word> left",
            "int64_t right_value_signed",
            "WordRepresentation rep"
          ],
          "return_type": "V<Word>",
          "logic": "Attempts to reduce signed division operations by replacing divisions with right shifts where possible."
        },
        {
          "name": "ReduceUnsignedDiv",
          "parameters": [
            "V<Word> left",
            "uint64_t right_value",
            "WordRepresentation rep"
          ],
          "return_type": "V<Word>",
          "logic": "Attempts to reduce unsigned division operations by replacing divisions with right shifts where possible."
        }
      ]
    }
  ],
  "functions": []
}