{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/int64-lowering-reducer.h",
  "imports": [
    "src/codegen/machine-type.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/wasm-compiler.h",
    "src/compiler/wasm-graph-assembler.h",
    "src/wasm/wasm-engine.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "Int64LoweringReducer",
      "properties": [
        "sig_",
        "zone_",
        "param_index_map_",
        "returns_i64_",
        "matcher_"
      ],
      "methods": [
        {
          "name": "Int64LoweringReducer",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor. Initializes the machine signature (`sig_`) based on whether the compilation originates from JS or WebAssembly. It also initializes index maps for parameters and determines if the function returns any i64 values."
        },
        {
          "name": "REDUCE(WordBinop)",
          "parameters": [
            "Word32OrWord32Pair left",
            "Word32OrWord32Pair right",
            "WordBinopOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "Word32OrWord32Pair",
          "logic": "Reduces word binary operations. If the representation is Word64, it lowers the operation to equivalent Word32Pair operations. Otherwise, it calls the `ReduceWordBinop` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Shift)",
          "parameters": [
            "Word32OrWord32Pair left",
            "V<Word32> right",
            "ShiftOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "Word32OrWord32Pair",
          "logic": "Reduces shift operations. If the representation is Word64, it lowers the operation to equivalent Word32Pair shift operations. Otherwise, it calls the `ReduceShift` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Comparison)",
          "parameters": [
            "V<Any> left",
            "V<Any> right",
            "ComparisonOp::Kind kind",
            "RegisterRepresentation rep"
          ],
          "return_type": "V<Word32>",
          "logic": "Reduces comparison operations. If the representation is Word64, it lowers the comparison to equivalent Word32 comparisons using the high and low parts of the 64-bit values. Otherwise, it calls the `ReduceComparison` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Call)",
          "parameters": [
            "V<CallTarget> callee",
            "OptionalV<FrameState> frame_state",
            "base::Vector<const OpIndex> arguments",
            "const TSCallDescriptor* descriptor",
            "OpEffects effects"
          ],
          "return_type": "V<Any>",
          "logic": "Reduces call operations. It lowers 64-bit parameters and return types to 32-bit pairs by modifying the call descriptor and arguments. It then calls the `ReduceCall` method of the next reducer in the chain with the lowered representation."
        },
        {
          "name": "REDUCE(TailCall)",
          "parameters": [
            "OpIndex callee",
            "base::Vector<const OpIndex> arguments",
            "const TSCallDescriptor* descriptor"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces tail call operations. It lowers 64-bit parameters to 32-bit pairs by modifying the call descriptor and arguments. It then calls the `ReduceTailCall` method of the next reducer in the chain with the lowered representation."
        },
        {
          "name": "REDUCE(Constant)",
          "parameters": [
            "ConstantOp::Kind kind",
            "ConstantOp::Storage value"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces constant operations. If the kind is Word64, it splits the 64-bit constant into two 32-bit constants and creates a tuple of them. Otherwise, it calls the `ReduceConstant` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Parameter)",
          "parameters": [
            "int32_t parameter_index",
            "RegisterRepresentation rep",
            "const char* debug_name"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces parameter operations. If the representation is Word64, it lowers the parameter to two 32-bit parameters and creates a tuple of them.  Manages parameter index remapping when 64-bit parameters are split into two 32-bit parameters. Otherwise, it calls the `ReduceParameter` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Return)",
          "parameters": [
            "V<Word32> pop_count",
            "base::Vector<const OpIndex> return_values",
            "bool spill_caller_frame_slots"
          ],
          "return_type": "V<None>",
          "logic": "Reduces return operations. If the function returns a Word64 value, it splits the 64-bit value into two 32-bit values and modifies the return values. It then calls the `ReduceReturn` method of the next reducer in the chain with the lowered representation."
        },
        {
          "name": "REDUCE(WordUnary)",
          "parameters": [
            "Word32OrWord32Pair input",
            "WordUnaryOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "Word32OrWord32Pair",
          "logic": "Reduces word unary operations. If the representation is Word64, it lowers the operation to equivalent Word32Pair operations. Otherwise, it calls the `ReduceWordUnary` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Change)",
          "parameters": [
            "OpIndex input",
            "ChangeOp::Kind kind",
            "ChangeOp::Assumption assumption",
            "RegisterRepresentation from",
            "RegisterRepresentation to"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces change operations (type conversions). Handles conversions to and from Word64 by creating or extracting Word32 pairs. Otherwise, it calls the `ReduceChange` method of the next reducer in the chain."
        },
        {
          "name": "IncreaseOffset",
          "parameters": [
            "OptionalV<Word32> index",
            "int32_t offset",
            "int32_t add_offset",
            "bool tagged_base"
          ],
          "return_type": "std::pair<OptionalV<Word32>, int32_t>",
          "logic": "Increases a memory access offset. If the new offset is not valid (e.g., exceeds the maximum offset for tagged memory), it adjusts the offset and adds the extra offset to the index."
        },
        {
          "name": "REDUCE(Load)",
          "parameters": [
            "OpIndex base",
            "OptionalOpIndex index",
            "LoadOp::Kind kind",
            "MemoryRepresentation loaded_rep",
            "RegisterRepresentation result_rep",
            "int32_t offset",
            "uint8_t element_scale"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces load operations. If the loaded representation is Int64 or Uint64, it lowers the load to two 32-bit loads (one for the low part and one for the high part of the 64-bit value) and creates a tuple of them. It uses the IncreaseOffset to get the index and offset for the high word load. Otherwise, it calls the `ReduceLoad` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Store)",
          "parameters": [
            "OpIndex base",
            "OptionalOpIndex index",
            "OpIndex value",
            "StoreOp::Kind kind",
            "MemoryRepresentation stored_rep",
            "WriteBarrierKind write_barrier",
            "int32_t offset",
            "uint8_t element_size_log2",
            "bool maybe_initializing_or_transitioning",
            "IndirectPointerTag maybe_indirect_pointer_tag"
          ],
          "return_type": "V<None>",
          "logic": "Reduces store operations. If the stored representation is Int64 or Uint64, it lowers the store to two 32-bit stores (one for the low part and one for the high part of the 64-bit value). It uses IncreaseOffset to get the index and offset for the high word store. Otherwise, it calls the `ReduceStore` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(AtomicRMW)",
          "parameters": [
            "OpIndex base",
            "OpIndex index",
            "OpIndex value",
            "OptionalOpIndex expected",
            "AtomicRMWOp::BinOp bin_op",
            "RegisterRepresentation in_out_rep",
            "MemoryRepresentation memory_rep",
            "MemoryAccessKind kind"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces atomic read-modify-write operations. If the in/out representation is Word64 and the memory representation is Int64 or Uint64, it lowers the operation to equivalent Word32Pair atomic operations. Otherwise, it calls the `ReduceAtomicRMW` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Phi)",
          "parameters": [
            "base::Vector<const OpIndex> inputs",
            "RegisterRepresentation rep"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces phi operations. If the representation is Word64, it lowers the phi to two 32-bit phis (one for the low part and one for the high part of the 64-bit value) and creates a tuple of them. Otherwise, it calls the `ReducePhi` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(PendingLoopPhi)",
          "parameters": [
            "OpIndex input",
            "RegisterRepresentation rep"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces pending loop phi operations. If the representation is Word64, it lowers the pending loop phi to two 32-bit pending loop phis (one for the low part and one for the high part of the 64-bit value) and creates a tuple of them. Otherwise, it calls the `ReducePendingLoopPhi` method of the next reducer in the chain."
        },
        {
          "name": "FixLoopPhi",
          "parameters": [
            "const PhiOp& input_phi",
            "OpIndex output_index",
            "Block* output_graph_loop"
          ],
          "return_type": "void",
          "logic": "Fixes loop phi operations. Updates the loop phi nodes in the graph when the input phi is a 64-bit value that has been lowered to a tuple of two 32-bit values."
        },
        {
          "name": "REDUCE(Simd128Splat)",
          "parameters": [
            "V<Any> input",
            "Simd128SplatOp::Kind kind"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces SIMD128 splat operations. For I64x2 splat, the input i64 is unpacked to two i32. The i32 splat is applied twice via SIMD128ReplaceLane to generate a splat for two i64 values, Otherwise, it calls the `ReduceSimd128Splat` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Simd128ExtractLane)",
          "parameters": [
            "V<Simd128> input",
            "Simd128ExtractLaneOp::Kind kind",
            "uint8_t lane"
          ],
          "return_type": "V<Any>",
          "logic": "Reduces SIMD128 extract lane operations. For I64x2 extract, the lane is extracted using two I32x4 extractions. Otherwise, it calls the `ReduceSimd128ExtractLane` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(Simd128ReplaceLane)",
          "parameters": [
            "V<Simd128> into",
            "V<Any> new_lane",
            "Simd128ReplaceLaneOp::Kind kind",
            "uint8_t lane"
          ],
          "return_type": "V<Simd128>",
          "logic": "Reduces SIMD128 replace lane operations. For I64x2 replacement, the lane is replaced using two I32x4 replacements. Otherwise, it calls the `ReduceSimd128ReplaceLane` method of the next reducer in the chain."
        },
        {
          "name": "REDUCE(FrameState)",
          "parameters": [
            "base::Vector<const OpIndex> inputs",
            "bool inlined",
            "const FrameStateData* data"
          ],
          "return_type": "V<turboshaft::FrameState>",
          "logic": "Reduces frame state operations. Modifies frame state data to accommodate 64-bit values by splitting them into 32-bit pairs. It updates the frame state information, parameter count, and local count accordingly. Otherwise, it calls the `ReduceFrameState` method of the next reducer in the chain."
        },
        {
          "name": "CheckPairOrPairOp",
          "parameters": [
            "V<Word32Pair> input"
          ],
          "return_type": "bool",
          "logic": "Debug-only helper function to check if an input is a valid Word32Pair. It validates that either the input is a TupleOp with two Word32 inputs, a DidntThrowOp wrapping a Call that returns two i32's, or a Word32PairBinopOp."
        },
        {
          "name": "Unpack",
          "parameters": [
            "V<Word32Pair> input"
          ],
          "return_type": "std::pair<V<Word32>, V<Word32>>",
          "logic": "Unpacks a Word32Pair into its two constituent Word32 values."
        },
        {
          "name": "LowerSignExtend",
          "parameters": [
            "V<Word32> input"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a sign extension operation. Creates a Word32Pair where the high word is the sign-extended version of the low word."
        },
        {
          "name": "LowerClz",
          "parameters": [
            "V<Word32Pair> input"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a count leading zeros (CLZ) operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerCtz",
          "parameters": [
            "V<Word32Pair> input"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a count trailing zeros (CTZ) operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerPopCount",
          "parameters": [
            "V<Word32Pair> input"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a population count (popcnt) operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerPairBinOp",
          "parameters": [
            "V<Word32Pair> left",
            "V<Word32Pair> right",
            "Word32PairBinopOp::Kind kind"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a pair binary operation (add, sub, mul) to a `Word32PairBinop`."
        },
        {
          "name": "LowerPairShiftOp",
          "parameters": [
            "V<Word32Pair> left",
            "V<Word32> right",
            "Word32PairBinopOp::Kind kind"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a pair shift operation to a `Word32PairBinop`."
        },
        {
          "name": "LowerBitwiseAnd",
          "parameters": [
            "V<Word32Pair> left",
            "V<Word32Pair> right"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a bitwise AND operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerBitwiseOr",
          "parameters": [
            "V<Word32Pair> left",
            "V<Word32Pair> right"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a bitwise OR operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerBitwiseXor",
          "parameters": [
            "V<Word32Pair> left",
            "V<Word32Pair> right"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a bitwise XOR operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerRotateRight",
          "parameters": [
            "V<Word32Pair> left",
            "V<Word32> right"
          ],
          "return_type": "V<Word32Pair>",
          "logic": "Lowers a rotate right operation for 64-bit values to 32 bit operations."
        },
        {
          "name": "LowerCall",
          "parameters": [
            "V<CallTarget> callee",
            "OptionalV<FrameState> frame_state",
            "base::Vector<const OpIndex> arguments",
            "const TSCallDescriptor* descriptor",
            "OpEffects effects",
            "bool is_tail_call"
          ],
          "return_type": "V<Any>",
          "logic": "Lowers a call operation to use 32 bit operations instead of 64 bit operations."
        },
        {
          "name": "InitializeIndexMaps",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the index maps used for mapping parameter indices when splitting 64-bit parameters into two 32-bit parameters."
        }
      ]
    }
  ],
  "functions": []
}