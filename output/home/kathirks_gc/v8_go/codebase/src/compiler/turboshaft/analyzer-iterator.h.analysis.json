{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/analyzer-iterator.h",
  "imports": [
    "src/base/logging.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/loop-finder.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/sidetable.h"
  ],
  "classes": [
    {
      "name": "AnalyzerIterator",
      "properties": [
        "graph_",
        "loop_finder_",
        "current_generation_",
        "curr_",
        "visited_",
        "stack_"
      ],
      "methods": [
        {
          "name": "AnalyzerIterator",
          "parameters": [
            "Zone* phase_zone",
            "const Graph& graph",
            "const LoopFinder& loop_finder"
          ],
          "return_type": "void",
          "logic": "Constructor for AnalyzerIterator. Initializes the graph, loop finder, visited sidetable, and stack with the start block of the graph."
        },
        {
          "name": "HasNext",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are more blocks to visit in the graph. Returns true if the stack is not empty, false otherwise."
        },
        {
          "name": "Next",
          "parameters": [],
          "return_type": "const Block*",
          "logic": "Pops the next block from the stack to visit, taking into account revisits of loops.  It manages the generation number to determine if a block has already been visited at the current generation."
        },
        {
          "name": "MarkLoopForRevisit",
          "parameters": [],
          "return_type": "void",
          "logic": "Schedules the loop pointed to by the current block (as a backedge) to be revisited on the next iteration. Marks the corresponding loop in loop_finder_ for revisiting."
        },
        {
          "name": "MarkLoopForRevisitSkipHeader",
          "parameters": [],
          "return_type": "void",
          "logic": "Schedules the loop pointed to by the current block (as a backedge) to be revisited on the next iteration, skipping the loop header. Marks the corresponding loop in loop_finder_ for revisiting, skipping the header."
        },
        {
          "name": "PopOutdated",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops nodes from the stack until a non-outdated node is found or the stack becomes empty."
        },
        {
          "name": "IsOutdated",
          "parameters": [
            "StackNode node"
          ],
          "return_type": "bool",
          "logic": "Checks if a block has already been visited at the current generation or later. It returns true if the generation number stored in 'visited_' for the block is greater than or equal to the generation number in the 'StackNode', otherwise false."
        }
      ]
    }
  ],
  "functions": []
}