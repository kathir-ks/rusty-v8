{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/late-load-elimination-reducer.h",
  "imports": [
    "<optional>",
    "src/base/doubly-threaded-list.h",
    "src/compiler/turboshaft/analyzer-iterator.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/loop-finder.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/opmasks.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/snapshot-table-opindex.h",
    "src/compiler/turboshaft/utils.h",
    "src/zone/zone-containers.h",
    "src/zone/zone.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "LoadEliminationReplacement",
      "properties": [
        "kind_",
        "replacement_"
      ],
      "methods": [
        {
          "name": "None",
          "parameters": [],
          "return_type": "LoadEliminationReplacement",
          "logic": "Returns a LoadEliminationReplacement object with Kind::kNone."
        },
        {
          "name": "LoadElimination",
          "parameters": [
            "OpIndex replacement"
          ],
          "return_type": "LoadEliminationReplacement",
          "logic": "Returns a LoadEliminationReplacement object with Kind::kLoadElimination and the specified replacement index."
        },
        {
          "name": "TaggedLoadToInt32Load",
          "parameters": [],
          "return_type": "LoadEliminationReplacement",
          "logic": "Returns a LoadEliminationReplacement object with Kind::kTaggedLoadToInt32Load."
        },
        {
          "name": "TaggedBitcastElimination",
          "parameters": [],
          "return_type": "LoadEliminationReplacement",
          "logic": "Returns a LoadEliminationReplacement object with Kind::kTaggedBitcastElimination."
        },
        {
          "name": "Int32TruncationElimination",
          "parameters": [
            "OpIndex replacement"
          ],
          "return_type": "LoadEliminationReplacement",
          "logic": "Returns a LoadEliminationReplacement object with Kind::kInt32TruncationElimination and the specified replacement index."
        },
        {
          "name": "IsNone",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the kind is kNone."
        },
        {
          "name": "IsLoadElimination",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the kind is kLoadElimination."
        },
        {
          "name": "IsTaggedLoadToInt32Load",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the kind is kTaggedLoadToInt32Load."
        },
        {
          "name": "IsTaggedBitcastElimination",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the kind is kTaggedBitcastElimination."
        },
        {
          "name": "IsInt32TruncationElimination",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the kind is kInt32TruncationElimination."
        },
        {
          "name": "replacement",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Returns the replacement OpIndex."
        }
      ]
    },
    {
      "name": "MemoryContentTable",
      "properties": [
        "non_aliasing_objects_",
        "object_maps_",
        "replacements_",
        "all_keys_",
        "base_keys_",
        "offset_keys_",
        "index_keys_"
      ],
      "methods": [
        {
          "name": "OnNewKey",
          "parameters": [
            "Key key",
            "OpIndex value"
          ],
          "return_type": "void",
          "logic": "Called when a new key is created. Adds the key to the base and offset maps."
        },
        {
          "name": "OnValueChange",
          "parameters": [
            "Key key",
            "OpIndex old_value",
            "OpIndex new_value"
          ],
          "return_type": "void",
          "logic": "Called when the value of a key changes. Updates the base and offset maps accordingly."
        },
        {
          "name": "Invalidate",
          "parameters": [
            "const StoreOp& store"
          ],
          "return_type": "void",
          "logic": "Invalidates memory based on a StoreOp."
        },
        {
          "name": "Invalidate",
          "parameters": [
            "OpIndex base",
            "OptionalOpIndex index",
            "int32_t offset"
          ],
          "return_type": "void",
          "logic": "Invalidates memory based on a base, index, and offset."
        },
        {
          "name": "InvalidateMaybeAliasing",
          "parameters": [],
          "return_type": "void",
          "logic": "Invalidates all memory that might alias."
        },
        {
          "name": "Find",
          "parameters": [
            "const LoadOp& load"
          ],
          "return_type": "OpIndex",
          "logic": "Finds the value at the address specified by the LoadOp."
        },
        {
          "name": "Insert",
          "parameters": [
            "const StoreOp& store"
          ],
          "return_type": "void",
          "logic": "Inserts the value of a StoreOp into the memory table."
        },
        {
          "name": "Insert",
          "parameters": [
            "const LoadOp& load",
            "OpIndex load_idx"
          ],
          "return_type": "void",
          "logic": "Inserts the result of a LoadOp into the memory table."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the contents of the memory table (DEBUG only)."
        }
      ]
    },
    {
      "name": "LateLoadEliminationAnalyzer",
      "properties": [
        "data_",
        "graph_",
        "phase_zone_",
        "broker_",
        "raw_base_assumption_",
        "replacements_",
        "int32_truncated_loads_",
        "non_aliasing_objects_",
        "object_maps_",
        "memory_",
        "block_to_snapshot_mapping_",
        "predecessor_alias_snapshots_",
        "predecessor_maps_snapshots_",
        "predecessor_memory_snapshots_"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Runs the late load elimination analysis."
        },
        {
          "name": "GetReplacement",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "Replacement",
          "logic": "Returns the replacement for the given OpIndex."
        },
        {
          "name": "ProcessBlock",
          "parameters": [
            "const Block& block",
            "bool compute_start_snapshot"
          ],
          "return_type": "void",
          "logic": "Processes a block in the graph."
        },
        {
          "name": "ProcessLoad",
          "parameters": [
            "OpIndex op_idx",
            "const LoadOp& op"
          ],
          "return_type": "void",
          "logic": "Processes a Load operation."
        },
        {
          "name": "ProcessStore",
          "parameters": [
            "OpIndex op_idx",
            "const StoreOp& op"
          ],
          "return_type": "void",
          "logic": "Processes a Store operation."
        },
        {
          "name": "ProcessAllocate",
          "parameters": [
            "OpIndex op_idx",
            "const AllocateOp& op"
          ],
          "return_type": "void",
          "logic": "Processes an Allocate operation."
        },
        {
          "name": "ProcessCall",
          "parameters": [
            "OpIndex op_idx",
            "const CallOp& op"
          ],
          "return_type": "void",
          "logic": "Processes a Call operation."
        },
        {
          "name": "ProcessAssumeMap",
          "parameters": [
            "OpIndex op_idx",
            "const AssumeMapOp& op"
          ],
          "return_type": "void",
          "logic": "Processes an AssumeMap operation."
        },
        {
          "name": "ProcessChange",
          "parameters": [
            "OpIndex op_idx",
            "const ChangeOp& change"
          ],
          "return_type": "void",
          "logic": "Processes a Change operation."
        },
        {
          "name": "DcheckWordBinop",
          "parameters": [
            "OpIndex op_idx",
            "const WordBinopOp& binop"
          ],
          "return_type": "void",
          "logic": "Performs checks on WordBinop operations (DEBUG only)."
        },
        {
          "name": "BeginBlock",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "bool",
          "logic": "Initializes SnapshotTables for block and returns true if the loop should be revisited."
        },
        {
          "name": "FinishBlock",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "void",
          "logic": "Finishes processing a block."
        },
        {
          "name": "SealAndDiscard",
          "parameters": [],
          "return_type": "void",
          "logic": "Seals and discards current snapshot."
        },
        {
          "name": "StoreLoopSnapshotInForwardPredecessor",
          "parameters": [
            "const Block& loop_header"
          ],
          "return_type": "void",
          "logic": "Store loop snapshot in forward predecessor"
        },
        {
          "name": "BackedgeHasSnapshot",
          "parameters": [
            "const Block& loop_header"
          ],
          "return_type": "bool",
          "logic": "Returns true if the loop's backedge already has snapshot data"
        },
        {
          "name": "InvalidateAllNonAliasingInputs",
          "parameters": [
            "const Operation& op"
          ],
          "return_type": "void",
          "logic": "Invalidates all non-aliasing inputs of the given operation."
        },
        {
          "name": "InvalidateIfAlias",
          "parameters": [
            "OpIndex op_idx"
          ],
          "return_type": "void",
          "logic": "Invalidates if alias of given OpIndex"
        }
      ]
    },
    {
      "name": "LateLoadEliminationReducer",
      "properties": [
        "is_wasm_",
        "raw_base_assumption_",
        "analyzer_"
      ],
      "methods": [
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Runs the LateLoadEliminationAnalyzer."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Load)",
          "parameters": [
            "OpIndex ig_index",
            "const LoadOp& load"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Load operation in the input graph.  Replaces the Load if a replacement is found by the analyzer."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Change)",
          "parameters": [
            "OpIndex ig_index",
            "const ChangeOp& change"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Change operation in the input graph. Replaces the Change if a replacement is found by the analyzer."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(TaggedBitcast)",
          "parameters": [
            "OpIndex ig_index",
            "const TaggedBitcastOp& bitcast"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a TaggedBitcast operation in the input graph.  Eliminates the TaggedBitcast if a replacement is found by the analyzer."
        },
        {
          "name": "REDUCE(AssumeMap)",
          "parameters": [
            "V<HeapObject>",
            "ZoneRefSet<Map>"
          ],
          "return_type": "V<None>",
          "logic": "Reduces an AssumeMap operation by removing it."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_empty",
      "parameters": [
        "MapMaskAndOr minmax"
      ],
      "return_type": "bool",
      "logic": "Checks if a MapMaskAndOr is empty (both or_ and and_ have default values)."
    },
    {
      "name": "ComputeMapHash",
      "parameters": [
        "MapRef map"
      ],
      "return_type": "MapMask",
      "logic": "Computes a hash value for a MapRef."
    },
    {
      "name": "ComputeMinMaxHash",
      "parameters": [
        "ZoneRefSet<Map> maps"
      ],
      "return_type": "MapMaskAndOr",
      "logic": "Computes the minimum and maximum hash values for a set of maps."
    },
    {
      "name": "CombineMinMax",
      "parameters": [
        "MapMaskAndOr a",
        "MapMaskAndOr b"
      ],
      "return_type": "MapMaskAndOr",
      "logic": "Combines two MapMaskAndOr values."
    },
    {
      "name": "CouldHaveSameMap",
      "parameters": [
        "MapMaskAndOr a",
        "MapMaskAndOr b"
      ],
      "return_type": "bool",
      "logic": "Checks if two MapMaskAndOr values could have a map in common."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const MemoryAddress& mem"
      ],
      "return_type": "std::ostream&",
      "logic": "Stream insertion operator for MemoryAddress struct."
    },
    {
      "name": "hash_value",
      "parameters": [
        "MemoryAddress const& mem"
      ],
      "return_type": "size_t",
      "logic": "Computes a hash value for a MemoryAddress."
    },
    {
      "name": "IsInt32TruncatedLoadPattern",
      "parameters": [
        "const Graph& graph",
        "OpIndex change_idx",
        "const ChangeOp& change",
        "OpIndex* bitcast_idx",
        "OpIndex* load_idx"
      ],
      "return_type": "bool",
      "logic": "Checks if a given ChangeOp matches the Int32TruncatedLoadPattern"
    }
  ]
}