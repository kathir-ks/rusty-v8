{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/assert-types-reducer.h",
  "imports": [
    "<limits>",
    "src/base/logging.h",
    "src/base/template-utils.h",
    "src/base/vector.h",
    "src/compiler/common-operator.h",
    "src/compiler/frame.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/type-inference-reducer.h",
    "src/compiler/turboshaft/types.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h",
    "src/heap/parked-scope.h"
  ],
  "classes": [
    {
      "name": "AssertTypesReducer",
      "properties": [
        "isolate_",
        "type_assertions_allowed_"
      ],
      "methods": [
        {
          "name": "NoContextConstant",
          "parameters": [],
          "return_type": "i::Tagged<Smi>",
          "logic": "Returns a Smi representing Context::kNoContext."
        },
        {
          "name": "ReduceInputGraphOperation",
          "parameters": [
            "OpIndex ig_index",
            "const Op& operation"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces an input graph operation by first calling the next reducer, then potentially inserting a type assertion after the operation based on the operation's output type.  It skips assertion for specific operations like LoadRootRegister and Constants, block terminators, and operations that cannot be typed or if assertions are disabled."
        },
        {
          "name": "InsertTypeAssert",
          "parameters": [
            "RegisterRepresentation rep",
            "OpIndex value",
            "const Type& type"
          ],
          "return_type": "void",
          "logic": "Inserts a call to a builtin to assert that the given `value` (an OpIndex) has the specified `type`, based on the `RegisterRepresentation`. It dispatches to different builtins depending on the representation. It does nothing if assertions are disabled or if the type is invalid/none/any."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns a pointer to the V8 Factory associated with the current isolate."
        }
      ]
    }
  ],
  "functions": [],
  "additional_notes": "The class `AssertTypesReducer` is a template class inheriting from `UniformReducerAdapter`. The clang static_assert ensures that `TypeInferenceReducer` is included in the reducer chain before this reducer. The `TURBOSHAFT_REDUCER_BOILERPLATE` macro likely defines common methods required for a Turboshaft reducer.  Assembler macros are used, and their definitions/undefinitions are handled at the beginning and end of the namespace respectively."
}