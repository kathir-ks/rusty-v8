{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/type-parser.h",
  "imports": [
    "<optional>",
    "src/compiler/turboshaft/types.h"
  ],
  "classes": [
    {
      "name": "TypeParser",
      "properties": [
        "str_",
        "zone_",
        "pos_"
      ],
      "methods": [
        {
          "name": "TypeParser",
          "parameters": [
            "const std::string_view& str",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the TypeParser class. Initializes the string view and zone."
        },
        {
          "name": "Parse",
          "parameters": [],
          "return_type": "std::optional<Type>",
          "logic": "Parses the string representation of a type. Skips trailing whitespace and returns an optional Type."
        },
        {
          "name": "ParseType",
          "parameters": [],
          "return_type": "std::optional<Type>",
          "logic": "Parses the type from the input string. (Implementation not in the header file)."
        },
        {
          "name": "ParseRange",
          "parameters": [],
          "return_type": "std::optional<T>",
          "logic": "Parses a range (e.g., '[30, 100]') for Word32Type or Word64Type. Returns an optional range type object."
        },
        {
          "name": "ParseSet",
          "parameters": [],
          "return_type": "std::optional<T>",
          "logic": "Parses a set (e.g., '{3.2, 17.8}') for Float32Type or Float64Type. Returns an optional set type object."
        },
        {
          "name": "ParseSetElements",
          "parameters": [],
          "return_type": "std::optional<std::vector<T>>",
          "logic": "Parses the elements of a set. Sorts the elements and removes duplicates."
        },
        {
          "name": "ConsumeIf",
          "parameters": [
            "const std::string_view& prefix"
          ],
          "return_type": "bool",
          "logic": "Consumes the given prefix if it is the next characters in the string. Advances the position if found."
        },
        {
          "name": "IsNext",
          "parameters": [
            "const std::string_view& prefix"
          ],
          "return_type": "bool",
          "logic": "Checks if the given prefix is the next characters in the string, skipping leading whitespace. Does not consume the prefix."
        },
        {
          "name": "ReadValue",
          "parameters": [],
          "return_type": "std::optional<T>",
          "logic": "Reads a value of type T (uint32_t, uint64_t, float, or double) from the input string. Converts the substring to the given type. Returns an optional value."
        }
      ]
    }
  ],
  "functions": []
}