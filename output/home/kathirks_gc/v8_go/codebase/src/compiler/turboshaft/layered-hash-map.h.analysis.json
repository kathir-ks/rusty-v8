{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/layered-hash-map.h",
  "imports": [
    "<cstddef>",
    "<iostream>",
    "<limits>",
    "<optional>",
    "src/base/bits.h",
    "src/compiler/turboshaft/fast-hash.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "LayeredHashMap",
      "properties": [
        "mask_",
        "entry_count_",
        "table_",
        "depths_heads_",
        "zone_"
      ],
      "methods": [
        {
          "name": "LayeredHashMap",
          "parameters": [
            "Zone* zone",
            "uint32_t initial_capacity"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for LayeredHashMap. Initializes the hash table with a given initial capacity, making sure the capacity is a power of 2."
        },
        {
          "name": "StartLayer",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts a new layer in the hash map by adding a new entry to the 'depths_heads_' vector, representing the head of the linked list for the new layer."
        },
        {
          "name": "DropLastLayer",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes all elements from the last inserted layer. It iterates through the linked list of entries in that layer and removes them from the main hash table.  It also decrements the entry_count and cleans the entry."
        },
        {
          "name": "InsertNewKey",
          "parameters": [
            "Key key",
            "Value value"
          ],
          "return_type": "void",
          "logic": "Inserts a new key-value pair into the hash map. It first resizes the table if needed, computes the hash of the key, finds an empty slot, and inserts the entry.  It also adds the entry to the linked list of the current layer."
        },
        {
          "name": "Contains",
          "parameters": [
            "Key key"
          ],
          "return_type": "bool",
          "logic": "Checks if a given key exists in the hash map by calling Get() and checking if it returns a value."
        },
        {
          "name": "Get",
          "parameters": [
            "Key key"
          ],
          "return_type": "std::optional<Value>",
          "logic": "Retrieves the value associated with a given key.  If the key is not found, it returns std::nullopt."
        },
        {
          "name": "NextEntryIndex",
          "parameters": [
            "size_t index"
          ],
          "return_type": "size_t",
          "logic": "Calculates the next index in the hash table, handling wrap-around using a bitmask. This is used in collision resolution."
        },
        {
          "name": "FindEntryForKey",
          "parameters": [
            "Key key",
            "size_t hash"
          ],
          "return_type": "Entry*",
          "logic": "Finds an entry for the given key in the hash table. It uses linear probing to resolve collisions. If the key is found, returns a pointer to the entry; if not found (an empty slot is reached), it returns a pointer to the empty slot. Uses the provided hash or computes it if not provided"
        },
        {
          "name": "ComputeHash",
          "parameters": [
            "Key key"
          ],
          "return_type": "size_t",
          "logic": "Computes the hash value of a given key using a fast hashing algorithm."
        },
        {
          "name": "ResizeIfNeeded",
          "parameters": [],
          "return_type": "void",
          "logic": "Resizes the hash table if it is too full (i.e., the load factor exceeds a threshold). It creates a new, larger table and rehashes all existing elements into the new table, preserving depth order."
        }
      ]
    }
  ],
  "functions": []
}