{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/index.h",
  "imports": [
    "<stdint.h>",
    "<cstddef>",
    "<optional>",
    "<type_traits>",
    "src/base/logging.h",
    "src/codegen/tnode.h",
    "src/compiler/turboshaft/fast-hash.h",
    "src/compiler/turboshaft/representations.h",
    "src/objects/heap-number.h",
    "src/objects/js-function.h",
    "src/objects/oddball.h",
    "src/objects/string.h",
    "src/objects/tagged.h"
  ],
  "classes": [
    {
      "name": "OpIndex",
      "properties": [
        "offset_"
      ],
      "methods": [
        {
          "name": "OpIndex",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "OpIndex",
          "logic": "Protected constructor, initializes the offset_ member.  Used for internal construction of OpIndex."
        },
        {
          "name": "FromOffset",
          "parameters": [
            "uint32_t offset"
          ],
          "return_type": "OpIndex",
          "logic": "Static method to create an OpIndex from an offset."
        },
        {
          "name": "OpIndex",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Default constructor, initializes to Invalid (max uint32_t)."
        },
        {
          "name": "OpIndex",
          "parameters": [
            "const ConstOrV<T, C>&"
          ],
          "return_type": "OpIndex",
          "logic": "Constructor from ConstOrV, triggers a static assertion that should fail if resolve() has not been called."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates and returns the operation ID from the offset."
        },
        {
          "name": "hash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates and returns a hash value based on the offset, which is the same as the ID."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the offset of the operation, masking off debug bits in debug mode."
        },
        {
          "name": "valid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the OpIndex is valid (not equal to Invalid())."
        },
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Static method returning an invalid OpIndex."
        },
        {
          "name": "EncodeTurbofanNodeId",
          "parameters": [
            "uint32_t id"
          ],
          "return_type": "OpIndex",
          "logic": "Encodes a Turbofan node ID into the OpIndex by setting the `kTurbofanNodeIdFlag`."
        },
        {
          "name": "DecodeTurbofanNodeId",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Decodes the Turbofan node ID from the OpIndex, assuming it's a Turbofan node ID."
        },
        {
          "name": "IsTurbofanNodeId",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the OpIndex represents a Turbofan node ID."
        },
        {
          "name": "operator==",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "bool",
          "logic": "Equality operator."
        },
        {
          "name": "operator!=",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "bool",
          "logic": "Inequality operator."
        },
        {
          "name": "operator<",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "bool",
          "logic": "Less-than operator."
        },
        {
          "name": "operator>",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "bool",
          "logic": "Greater-than operator."
        },
        {
          "name": "operator<=",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "bool",
          "logic": "Less-than-or-equal-to operator."
        },
        {
          "name": "operator>=",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "bool",
          "logic": "Greater-than-or-equal-to operator."
        },
        {
          "name": "generation_mod2",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the generation modulo 2, stored in the offset in DEBUG mode."
        },
        {
          "name": "set_generation_mod2",
          "parameters": [
            "int generation_mod2"
          ],
          "return_type": "void",
          "logic": "Sets the generation modulo 2 in the offset, in DEBUG mode."
        },
        {
          "name": "CheckInvariants",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Debugging method to check internal invariants of the OpIndex."
        }
      ]
    },
    {
      "name": "OptionalOpIndex",
      "properties": [],
      "methods": [
        {
          "name": "OptionalOpIndex",
          "parameters": [
            "OpIndex other"
          ],
          "return_type": "OptionalOpIndex",
          "logic": "Constructor from an OpIndex."
        },
        {
          "name": "Nullopt",
          "parameters": [],
          "return_type": "OptionalOpIndex",
          "logic": "Static method returning an empty OptionalOpIndex."
        },
        {
          "name": "hash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the hash of the wrapped OpIndex."
        },
        {
          "name": "has_value",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if the OptionalOpIndex holds a value."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Returns the wrapped OpIndex, asserts if empty."
        },
        {
          "name": "value_or_invalid",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Returns the wrapped OpIndex or Invalid() if empty."
        }
      ]
    },
    {
      "name": "nullrep_t",
      "properties": [],
      "methods": []
    },
    {
      "name": "Any",
      "properties": [],
      "methods": []
    },
    {
      "name": "None",
      "properties": [],
      "methods": []
    },
    {
      "name": "WordWithBits",
      "properties": [
        "bits"
      ],
      "methods": []
    },
    {
      "name": "FloatWithBits",
      "properties": [
        "bits"
      ],
      "methods": []
    },
    {
      "name": "Compressed",
      "properties": [],
      "methods": []
    },
    {
      "name": "InternalTag",
      "properties": [],
      "methods": []
    },
    {
      "name": "FrameState",
      "properties": [],
      "methods": []
    },
    {
      "name": "UntaggedUnion",
      "properties": [],
      "methods": []
    },
    {
      "name": "Tuple",
      "properties": [],
      "methods": []
    },
    {
      "name": "v_traits",
      "properties": [],
      "methods": []
    },
    {
      "name": "ShadowyOpIndex",
      "properties": [],
      "methods": [
        {
          "name": "ShadowyOpIndex",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "ShadowyOpIndex",
          "logic": "Constructor that takes an OpIndex."
        },
        {
          "name": "operator V<T>",
          "parameters": [],
          "return_type": "V<T>",
          "logic": "Implicit conversion operator to V<T>."
        }
      ]
    },
    {
      "name": "ShadowyOpIndexVectorWrapper",
      "properties": [
        "indices_"
      ],
      "methods": [
        {
          "name": "ShadowyOpIndexVectorWrapper",
          "parameters": [
            "base::Vector<const V<T>> indices"
          ],
          "return_type": "ShadowyOpIndexVectorWrapper",
          "logic": "Constructor from vector of V<T>."
        },
        {
          "name": "ShadowyOpIndexVectorWrapper",
          "parameters": [
            "base::Vector<const OpIndex> indices"
          ],
          "return_type": "ShadowyOpIndexVectorWrapper",
          "logic": "Constructor from vector of OpIndex."
        },
        {
          "name": "ShadowyOpIndexVectorWrapper",
          "parameters": [
            "base::Vector<V<T>> indices"
          ],
          "return_type": "ShadowyOpIndexVectorWrapper",
          "logic": "Constructor from vector of V<T>."
        },
        {
          "name": "ShadowyOpIndexVectorWrapper",
          "parameters": [
            "base::Vector<OpIndex> indices"
          ],
          "return_type": "ShadowyOpIndexVectorWrapper",
          "logic": "Constructor from vector of OpIndex."
        },
        {
          "name": "operator base::Vector<const OpIndex>",
          "parameters": [],
          "return_type": "base::Vector<const OpIndex>",
          "logic": "Implicit conversion operator to base::Vector<const OpIndex>."
        },
        {
          "name": "operator base::Vector<V<U>>",
          "parameters": [],
          "return_type": "base::Vector<V<U>>",
          "logic": "Implicit conversion operator to base::Vector<V<U>>."
        },
        {
          "name": "operator base::Vector<const V<U>>",
          "parameters": [],
          "return_type": "base::Vector<const V<U>>",
          "logic": "Implicit conversion operator to base::Vector<const V<U>>."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the wrapped vector."
        }
      ]
    },
    {
      "name": "BlockIndex",
      "properties": [
        "id_"
      ],
      "methods": [
        {
          "name": "BlockIndex",
          "parameters": [
            "uint32_t id"
          ],
          "return_type": "BlockIndex",
          "logic": "Explicit constructor with an ID."
        },
        {
          "name": "BlockIndex",
          "parameters": [],
          "return_type": "BlockIndex",
          "logic": "Default constructor, initializes with max uint32_t."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the block ID."
        },
        {
          "name": "valid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the BlockIndex is valid."
        },
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "BlockIndex",
          "logic": "Returns an invalid BlockIndex."
        },
        {
          "name": "operator==",
          "parameters": [
            "BlockIndex other"
          ],
          "return_type": "bool",
          "logic": "Equality operator."
        },
        {
          "name": "operator!=",
          "parameters": [
            "BlockIndex other"
          ],
          "return_type": "bool",
          "logic": "Inequality operator."
        },
        {
          "name": "operator<",
          "parameters": [
            "BlockIndex other"
          ],
          "return_type": "bool",
          "logic": "Less-than operator."
        },
        {
          "name": "operator>",
          "parameters": [
            "BlockIndex other"
          ],
          "return_type": "bool",
          "logic": "Greater-than operator."
        },
        {
          "name": "operator<=",
          "parameters": [
            "BlockIndex other"
          ],
          "return_type": "bool",
          "logic": "Less-than-or-equal-to operator."
        },
        {
          "name": "operator>=",
          "parameters": [
            "BlockIndex other"
          ],
          "return_type": "bool",
          "logic": "Greater-than-or-equal-to operator."
        }
      ]
    },
    {
      "name": "V",
      "properties": [],
      "methods": [
        {
          "name": "V",
          "parameters": [],
          "return_type": "V",
          "logic": "Default constructor"
        },
        {
          "name": "V",
          "parameters": [
            "V<U> index"
          ],
          "return_type": "V",
          "logic": "Implicit constructor from another V if convertible"
        },
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "V",
          "logic": "Returns an Invalid V"
        },
        {
          "name": "Cast",
          "parameters": [
            "V<U> index"
          ],
          "return_type": "V<T>",
          "logic": "Casts from another V"
        },
        {
          "name": "Cast",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "V<T>",
          "logic": "Casts from an OpIndex"
        },
        {
          "name": "allows_representation",
          "parameters": [
            "RegisterRepresentation maybe_allowed_rep"
          ],
          "return_type": "bool",
          "logic": "Check that the desired representation is allowed"
        },
        {
          "name": "V",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "V",
          "logic": "Implicit constructor from OpIndex"
        }
      ]
    },
    {
      "name": "OptionalV",
      "properties": [],
      "methods": [
        {
          "name": "OptionalV",
          "parameters": [],
          "return_type": "OptionalV",
          "logic": "Default constructor."
        },
        {
          "name": "OptionalV",
          "parameters": [
            "OptionalV<U> index"
          ],
          "return_type": "OptionalV",
          "logic": "Implicit constructor from another OptionalV if convertible."
        },
        {
          "name": "OptionalV",
          "parameters": [
            "V<U> index"
          ],
          "return_type": "OptionalV",
          "logic": "Implicit constructor from another V if convertible."
        },
        {
          "name": "Nullopt",
          "parameters": [],
          "return_type": "OptionalV",
          "logic": "Returns an empty OptionalV."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "V<T>",
          "logic": "Returns the value if present, asserts otherwise."
        },
        {
          "name": "value_or_invalid",
          "parameters": [],
          "return_type": "V<T>",
          "logic": "Returns the value if present, or an invalid V otherwise."
        },
        {
          "name": "Cast",
          "parameters": [
            "OptionalV<U> index"
          ],
          "return_type": "OptionalV<T>",
          "logic": "Casts from another OptionalV."
        },
        {
          "name": "Cast",
          "parameters": [
            "OptionalOpIndex index"
          ],
          "return_type": "OptionalV<T>",
          "logic": "Casts from an OptionalOpIndex."
        },
        {
          "name": "OptionalV",
          "parameters": [
            "U index"
          ],
          "return_type": "OptionalV",
          "logic": "Implicit constructor from plain OptionalOpIndex or OpIndex"
        }
      ]
    },
    {
      "name": "ConstOrV",
      "properties": [
        "constant_value_",
        "value_"
      ],
      "methods": [
        {
          "name": "ConstOrV",
          "parameters": [
            "constant_type value"
          ],
          "return_type": "ConstOrV",
          "logic": "Constructor from a constant value."
        },
        {
          "name": "ConstOrV",
          "parameters": [
            "V<U> index"
          ],
          "return_type": "ConstOrV",
          "logic": "Constructor from a V."
        },
        {
          "name": "is_constant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a constant value is stored."
        },
        {
          "name": "constant_value",
          "parameters": [],
          "return_type": "constant_type",
          "logic": "Returns the constant value. Asserts if not constant."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "V<type>",
          "logic": "Returns the SSA value. Asserts if constant."
        },
        {
          "name": "ConstOrV",
          "parameters": [
            "U index"
          ],
          "return_type": "ConstOrV",
          "logic": "Implicit constructor from OpIndex"
        }
      ]
    },
    {
      "name": "fast_hash<OpIndex>",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "size_t",
          "logic": "Hash function for OpIndex."
        }
      ]
    },
    {
      "name": "ConstOrVTypeHelper",
      "properties": [],
      "methods": []
    },
    {
      "name": "std::hash<v8::internal::compiler::turboshaft::OpIndex>",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const v8::internal::compiler::turboshaft::OpIndex& index"
          ],
          "return_type": "std::size_t",
          "logic": "Calls the OpIndex's own hash function."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "OpIndex idx"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for OpIndex, allowing it to be printed to an ostream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "OptionalOpIndex idx"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for OptionalOpIndex, printing the underlying OpIndex."
    },
    {
      "name": "operator==",
      "parameters": [
        "nullrep_t",
        "nullrep_t"
      ],
      "return_type": "inline bool",
      "logic": "Compares two nullrep_t objects for equality.  Always returns true."
    },
    {
      "name": "operator==",
      "parameters": [
        "nullrep_t",
        "RegisterRepresentation"
      ],
      "return_type": "inline bool",
      "logic": "Compares nullrep_t to a RegisterRepresentation. Always returns false."
    },
    {
      "name": "operator==",
      "parameters": [
        "RegisterRepresentation",
        "nullrep_t"
      ],
      "return_type": "inline bool",
      "logic": "Compares a RegisterRepresentation to nullrep_t. Always returns false."
    },
    {
      "name": "operator!=",
      "parameters": [
        "nullrep_t",
        "nullrep_t"
      ],
      "return_type": "inline bool",
      "logic": "Compares two nullrep_t objects for inequality. Always returns false."
    },
    {
      "name": "operator!=",
      "parameters": [
        "nullrep_t",
        "RegisterRepresentation"
      ],
      "return_type": "inline bool",
      "logic": "Compares nullrep_t to a RegisterRepresentation. Always returns true."
    },
    {
      "name": "operator!=",
      "parameters": [
        "RegisterRepresentation",
        "nullrep_t"
      ],
      "return_type": "inline bool",
      "logic": "Compares a RegisterRepresentation to nullrep_t. Always returns true."
    },
    {
      "name": "hash_value",
      "parameters": [
        "OpIndex op"
      ],
      "return_type": "size_t",
      "logic": "Computes the hash value of an OpIndex."
    },
    {
      "name": "hash_value",
      "parameters": [
        "OptionalOpIndex op"
      ],
      "return_type": "size_t",
      "logic": "Computes the hash value of an OptionalOpIndex."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "BlockIndex b"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for BlockIndex, allowing it to be printed to an ostream."
    },
    {
      "name": "operator==",
      "parameters": [
        "OptionalOpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Equality operator for OptionalOpIndex"
    },
    {
      "name": "operator!=",
      "parameters": [
        "OptionalOpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Inequality operator for OptionalOpIndex"
    },
    {
      "name": "operator<",
      "parameters": [
        "OptionalOpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Less than operator for OptionalOpIndex"
    },
    {
      "name": "operator<=",
      "parameters": [
        "OptionalOpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Less than or equal operator for OptionalOpIndex"
    },
    {
      "name": "operator>",
      "parameters": [
        "OptionalOpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Greater than operator for OptionalOpIndex"
    },
    {
      "name": "operator>=",
      "parameters": [
        "OptionalOpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Greater than or equal operator for OptionalOpIndex"
    },
    {
      "name": "operator==",
      "parameters": [
        "OpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Equality operator for OpIndex and OptionalOpIndex"
    },
    {
      "name": "operator!=",
      "parameters": [
        "OpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Inequality operator for OpIndex and OptionalOpIndex"
    },
    {
      "name": "operator<",
      "parameters": [
        "OpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Less than operator for OpIndex and OptionalOpIndex"
    },
    {
      "name": "operator<=",
      "parameters": [
        "OpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Less than or equal operator for OpIndex and OptionalOpIndex"
    },
    {
      "name": "operator>",
      "parameters": [
        "OpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Greater than operator for OpIndex and OptionalOpIndex"
    },
    {
      "name": "operator>=",
      "parameters": [
        "OpIndex l",
        "OptionalOpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Greater than or equal operator for OpIndex and OptionalOpIndex"
    },
    {
      "name": "operator==",
      "parameters": [
        "OptionalOpIndex l",
        "OpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Equality operator for OptionalOpIndex and OpIndex"
    },
    {
      "name": "operator!=",
      "parameters": [
        "OptionalOpIndex l",
        "OpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Inequality operator for OptionalOpIndex and OpIndex"
    },
    {
      "name": "operator<",
      "parameters": [
        "OptionalOpIndex l",
        "OpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Less than operator for OptionalOpIndex and OpIndex"
    },
    {
      "name": "operator<=",
      "parameters": [
        "OptionalOpIndex l",
        "OpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Less than or equal operator for OptionalOpIndex and OpIndex"
    },
    {
      "name": "operator>",
      "parameters": [
        "OptionalOpIndex l",
        "OpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Greater than operator for OptionalOpIndex and OpIndex"
    },
    {
      "name": "operator>=",
      "parameters": [
        "OptionalOpIndex l",
        "OpIndex r"
      ],
      "return_type": "constexpr bool",
      "logic": "Greater than or equal operator for OptionalOpIndex and OpIndex"
    }
  ]
}