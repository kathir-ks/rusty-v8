{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/type-inference-reducer.h",
  "imports": [
    "<limits>",
    "<optional>",
    "src/base/logging.h",
    "src/base/vector.h",
    "src/compiler/common-operator.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/copying-phase.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/snapshot-table.h",
    "src/compiler/turboshaft/tracing.h",
    "src/compiler/turboshaft/type-inference-analysis.h",
    "src/compiler/turboshaft/typer.h",
    "src/compiler/turboshaft/types.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h"
  ],
  "classes": [
    {
      "name": "TypeInferenceReducerArgs",
      "properties": [
        "input_graph_typing",
        "output_graph_typing"
      ],
      "methods": [
        {
          "name": "TypeInferenceReducerArgs",
          "parameters": [
            "InputGraphTyping input_graph_typing",
            "OutputGraphTyping output_graph_typing"
          ],
          "return_type": "TypeInferenceReducerArgs",
          "logic": "Constructor for TypeInferenceReducerArgs. Initializes the input_graph_typing and output_graph_typing members."
        }
      ]
    },
    {
      "name": "TypeInferenceReducer",
      "properties": [
        "args_",
        "input_graph_types_",
        "output_graph_types_",
        "table_",
        "current_block_",
        "op_to_key_mapping_",
        "block_to_snapshot_mapping_",
        "predecessors_",
        "analyzer_"
      ],
      "methods": [
        {
          "name": "TypeInferenceReducer",
          "parameters": [],
          "return_type": "TypeInferenceReducer",
          "logic": "Constructor. Checks that it's not reasonable to reuse input graph types if there aren't any."
        },
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs type inference analysis based on the configured options for input and output graphs. Calls the Analyze method of the next reducer in the stack."
        },
        {
          "name": "GetInputGraphType",
          "parameters": [
            "OpIndex ig_index"
          ],
          "return_type": "Type",
          "logic": "Retrieves the type associated with a given operation index in the input graph."
        },
        {
          "name": "GetOutputGraphType",
          "parameters": [
            "OpIndex og_index"
          ],
          "return_type": "Type",
          "logic": "Retrieves the type associated with a given operation index in the output graph."
        },
        {
          "name": "ReduceOperation",
          "parameters": [
            "Ts... args"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces an operation by delegating to the next reducer, then attempts to infer and set a type for the resulting operation based on its representation."
        },
        {
          "name": "ReduceInputGraphOperation",
          "parameters": [
            "OpIndex ig_index",
            "const Op& operation"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces an input graph operation by delegating to the next reducer, then attempts to refine its type based on the input graph's type, if available and more precise."
        },
        {
          "name": "Bind",
          "parameters": [
            "Block* new_block"
          ],
          "return_type": "void",
          "logic": "Binds a new block, managing snapshot creation and merging of predecessor types for type inference across blocks. Handles loop phis and branch refinements."
        },
        {
          "name": "RefineTypesAfterBranch",
          "parameters": [
            "const BranchOp* branch",
            "Block* new_block",
            "bool then_branch"
          ],
          "return_type": "void",
          "logic": "Refines types of operations after a branch instruction, based on the branch condition and the taken branch (then/else)."
        },
        {
          "name": "RefineOperationType",
          "parameters": [
            "Block* new_block",
            "OpIndex op",
            "const Type& type",
            "char case_for_tracing"
          ],
          "return_type": "void",
          "logic": "Refines the type of an operation within a specific block. Updates the type table and records the refinement for debugging."
        },
        {
          "name": "REDUCE(PendingLoopPhi)",
          "parameters": [
            "OpIndex first",
            "RegisterRepresentation rep"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a pending loop phi operation. Sets the type to a maximal type or refines it using the input graph's type, if available."
        },
        {
          "name": "REDUCE(Phi)",
          "parameters": [
            "base::Vector<const OpIndex> inputs",
            "RegisterRepresentation rep"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Phi operation. Computes the least upper bound of the types of the inputs and sets it as the type of the Phi."
        },
        {
          "name": "REDUCE(Constant)",
          "parameters": [
            "ConstantOp::Kind kind",
            "ConstantOp::Storage value"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Constant operation. Determines the type of the constant and sets it."
        },
        {
          "name": "REDUCE(Comparison)",
          "parameters": [
            "V<Any> left",
            "V<Any> right",
            "ComparisonOp::Kind kind",
            "RegisterRepresentation rep"
          ],
          "return_type": "V<Word32>",
          "logic": "Reduces a Comparison operation. Determines the type based on the types of the operands and the comparison kind, then sets it."
        },
        {
          "name": "REDUCE(Projection)",
          "parameters": [
            "V<Any> input",
            "uint16_t idx",
            "RegisterRepresentation rep"
          ],
          "return_type": "V<Any>",
          "logic": "Reduces a Projection operation. Determines the type based on the type of the input and the projection index, then sets it."
        },
        {
          "name": "REDUCE(WordBinop)",
          "parameters": [
            "V<Word> left",
            "V<Word> right",
            "WordBinopOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "V<Word>",
          "logic": "Reduces a WordBinop operation. Determines the type based on the types of the operands and the operation kind, then sets it."
        },
        {
          "name": "REDUCE(OverflowCheckedBinop)",
          "parameters": [
            "V<Word> left",
            "V<Word> right",
            "OverflowCheckedBinopOp::Kind kind",
            "WordRepresentation rep"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces an OverflowCheckedBinop operation. Determines the type based on the types of the operands and the operation kind, then sets it."
        },
        {
          "name": "REDUCE(FloatBinop)",
          "parameters": [
            "V<Float> left",
            "V<Float> right",
            "FloatBinopOp::Kind kind",
            "FloatRepresentation rep"
          ],
          "return_type": "V<Float>",
          "logic": "Reduces a FloatBinop operation. Determines the type based on the types of the operands and the operation kind, then sets it."
        },
        {
          "name": "REDUCE(CheckTurboshaftTypeOf)",
          "parameters": [
            "OpIndex input",
            "RegisterRepresentation rep",
            "Type type",
            "bool successful"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a CheckTurboshaftTypeOf operation.  If the input type is a subtype of the checked type, the operation is reduced successfully.  Otherwise, the check fails and the op is reduced accordingly"
        },
        {
          "name": "RemoveLast",
          "parameters": [
            "OpIndex index_of_last_operation"
          ],
          "return_type": "void",
          "logic": "Removes the type associated with the last operation."
        },
        {
          "name": "RefineTypeFromInputGraph",
          "parameters": [
            "OpIndex index",
            "const Type& og_type",
            "const Type& ig_type"
          ],
          "return_type": "void",
          "logic": "Refines the type of an operation in the output graph using a more precise type from the input graph."
        },
        {
          "name": "GetTypeOrInvalid",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "Type",
          "logic": "Retrieves the type associated with a given operation index or returns Type::Invalid() if no type exists for it."
        },
        {
          "name": "GetTupleType",
          "parameters": [
            "const TupleOp& tuple"
          ],
          "return_type": "Type",
          "logic": "Retrieves or creates the type associated with a TupleOp."
        },
        {
          "name": "GetType",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "Type",
          "logic": "Retrieves the type associated with a given operation index. If a type is not already set, attempts to determine the type from the operation's properties. Handles TupleOp specifically"
        },
        {
          "name": "SetType",
          "parameters": [
            "OpIndex index",
            "const Type& result_type",
            "bool is_fallback_for_unsupported_operation"
          ],
          "return_type": "void",
          "logic": "Sets the type for an operation. It uses a table to keep track of types. Traces the type setting for debugging purposes."
        },
        {
          "name": "NeedsTyping",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "bool",
          "logic": "Determines if an operation needs type inference based on the configured output graph typing option."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CanBeTyped",
      "parameters": [
        "const Op& operation"
      ],
      "return_type": "bool",
      "logic": "Determines if an operation can be typed based on whether it has output representations."
    }
  ]
}