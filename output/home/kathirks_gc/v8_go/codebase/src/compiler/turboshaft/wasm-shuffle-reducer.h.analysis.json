{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/wasm-shuffle-reducer.h",
  "imports": [
    "<optional>",
    "src/base/template-utils.h",
    "src/builtins/builtins.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/opmasks.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/utils.h",
    "src/zone/zone-containers.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "DemandedElementAnalysis",
      "properties": [
        "phase_zone_",
        "input_graph_",
        "demanded_elements_",
        "visited_"
      ],
      "methods": [
        {
          "name": "AddUnaryOp",
          "parameters": [
            "const Simd128UnaryOp& unop",
            "LaneBitSet lanes"
          ],
          "return_type": "void",
          "logic": "Adds a unary operation and its demanded lanes to the demanded elements map."
        },
        {
          "name": "AddBinaryOp",
          "parameters": [
            "const Simd128BinopOp& binop",
            "LaneBitSet lanes"
          ],
          "return_type": "void",
          "logic": "Adds a binary operation and its demanded lanes to the demanded elements map."
        },
        {
          "name": "RecordOp",
          "parameters": [
            "const Operation* op",
            "LaneBitSet lanes"
          ],
          "return_type": "void",
          "logic": "Records an operation and its demanded lanes to the demanded elements map."
        },
        {
          "name": "demanded_elements",
          "parameters": [],
          "return_type": "const DemandedElementMap&",
          "logic": "Returns the demanded elements map."
        },
        {
          "name": "input_graph",
          "parameters": [],
          "return_type": "const Graph&",
          "logic": "Returns the input graph."
        },
        {
          "name": "Visited",
          "parameters": [
            "const Operation* op"
          ],
          "return_type": "bool",
          "logic": "Checks if an operation has already been visited."
        },
        {
          "name": "DemandedElementAnalysis",
          "parameters": [
            "Zone* phase_zone",
            "const Graph& input_graph"
          ],
          "return_type": "DemandedElementAnalysis",
          "logic": "Constructor for DemandedElementAnalysis, initializes the zone and graph."
        }
      ]
    },
    {
      "name": "WasmShuffleAnalyzer",
      "properties": [
        "phase_zone_",
        "input_graph_",
        "demanded_element_analysis",
        "shift_shuffles_",
        "low_half_shuffles_",
        "high_half_shuffles_"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Main function that executes the analysis."
        },
        {
          "name": "Process",
          "parameters": [
            "const Operation& op"
          ],
          "return_type": "void",
          "logic": "Processes a generic operation, dispatching to specific handlers."
        },
        {
          "name": "ProcessUnary",
          "parameters": [
            "const Simd128UnaryOp& unop"
          ],
          "return_type": "void",
          "logic": "Processes a Simd128UnaryOp to determine demanded lanes."
        },
        {
          "name": "ProcessBinary",
          "parameters": [
            "const Simd128BinopOp& binop"
          ],
          "return_type": "void",
          "logic": "Processes a Simd128BinopOp to determine demanded lanes."
        },
        {
          "name": "ProcessShuffle",
          "parameters": [
            "const Simd128ShuffleOp& shuffle_op"
          ],
          "return_type": "void",
          "logic": "Processes a Simd128ShuffleOp to determine demanded lanes."
        },
        {
          "name": "ProcessShuffleOfShuffle",
          "parameters": [
            "const Simd128ShuffleOp& shuffle_op",
            "const Simd128ShuffleOp& shuffle",
            "uint8_t lower_limit",
            "uint8_t upper_limit"
          ],
          "return_type": "void",
          "logic": "Processes a shuffle which is the input to another shuffle, and determine which lanes it uses, used to reduce it."
        },
        {
          "name": "ShouldReduce",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if any shuffles can be reduced."
        },
        {
          "name": "ops_to_reduce",
          "parameters": [],
          "return_type": "const DemandedElementAnalysis::DemandedElementMap&",
          "logic": "Returns the map of operations to reduce, along with their demanded lanes."
        },
        {
          "name": "DemandedByteLanes",
          "parameters": [
            "const Operation* op"
          ],
          "return_type": "std::optional<DemandedElementAnalysis::LaneBitSet>",
          "logic": "Returns the demanded byte lanes for a given operation, if it's in the ops_to_reduce map."
        },
        {
          "name": "ShouldRewriteShuffleToLow",
          "parameters": [
            "const Simd128ShuffleOp* shuffle"
          ],
          "return_type": "bool",
          "logic": "Checks if a shuffle operation needs to be rewritten to write its output to the lower lanes."
        },
        {
          "name": "ShouldRewriteShuffleToLow",
          "parameters": [
            "OpIndex op"
          ],
          "return_type": "bool",
          "logic": "Checks if a shuffle operation needs to be rewritten to write its output to the lower lanes (debug version)."
        },
        {
          "name": "DoesShuffleIntoLowHalf",
          "parameters": [
            "const Simd128ShuffleOp* shuffle"
          ],
          "return_type": "bool",
          "logic": "Checks if a shuffle operation only uses the high half of its operands when writing into the low half of its output."
        },
        {
          "name": "DoesShuffleIntoHighHalf",
          "parameters": [
            "const Simd128ShuffleOp* shuffle"
          ],
          "return_type": "bool",
          "logic": "Checks if a shuffle operation only uses the high half of its operands when writing into the high half of its output."
        },
        {
          "name": "input_graph",
          "parameters": [],
          "return_type": "const Graph&",
          "logic": "Returns the input graph."
        },
        {
          "name": "WasmShuffleAnalyzer",
          "parameters": [
            "Zone* phase_zone",
            "const Graph& input_graph"
          ],
          "return_type": "WasmShuffleAnalyzer",
          "logic": "Constructor for WasmShuffleAnalyzer, initializes the zone and graph and calls Run()."
        }
      ]
    },
    {
      "name": "WasmShuffleReducer",
      "properties": [
        "analyzer_"
      ],
      "methods": [
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the WasmShuffleAnalyzer and runs the analysis."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Simd128Shuffle)",
          "parameters": [
            "OpIndex ig_index",
            "const Simd128ShuffleOp& shuffle"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces Simd128Shuffle operations by narrowing them based on usage. If the shuffle is only used by operations requiring a smaller number of lanes, the shuffle is converted to a smaller one."
        }
      ]
    }
  ],
  "functions": []
}