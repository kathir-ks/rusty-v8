{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/wasm-gc-typed-optimization-reducer.cc",
  "imports": [
    "src/compiler/turboshaft/wasm-gc-typed-optimization-reducer.h",
    "src/base/logging.h",
    "src/compiler/turboshaft/analyzer-iterator.h",
    "src/compiler/turboshaft/loop-finder.h"
  ],
  "classes": [
    {
      "name": "WasmGCTypeAnalyzer",
      "properties": [
        "phase_zone_",
        "graph_",
        "types_table_",
        "block_to_snapshot_",
        "block_is_unreachable_",
        "current_block_",
        "is_first_loop_header_evaluation_",
        "signature_",
        "module_",
        "input_type_map_"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Runs the type analysis on the graph. Iterates through blocks, processes each block, and handles loop reprocessing. Marks blocks as unreachable and revisits loop headers based on type information updates."
        },
        {
          "name": "ProcessBlock",
          "parameters": [
            "const Block& block"
          ],
          "return_type": "void",
          "logic": "Processes a single block in the graph. Starts a new snapshot for the block and processes all operations within the block."
        },
        {
          "name": "StartNewSnapshotFor",
          "parameters": [
            "const Block& block"
          ],
          "return_type": "void",
          "logic": "Starts a new type snapshot for a block, taking into account predecessor information (forward and back edges). It handles different block types like initial blocks, loop headers, branch targets, and merge blocks. It is responsible for setting up the correct type context for the block."
        },
        {
          "name": "ProcessOperations",
          "parameters": [
            "const Block& block"
          ],
          "return_type": "void",
          "logic": "Processes all operations within a block. Dispatches to specific handler methods based on the opcode of each operation. Includes handlers for type casts, type checks, assert not null, null, is null, parameters, struct get/set, array get/length, global get, ref func, allocate array/struct, phi, type annotation and branch operations."
        },
        {
          "name": "ProcessTypeCast",
          "parameters": [
            "const WasmTypeCastOp& type_cast"
          ],
          "return_type": "void",
          "logic": "Processes a type cast operation. Refines the type knowledge of the object being cast."
        },
        {
          "name": "ProcessTypeCheck",
          "parameters": [
            "const WasmTypeCheckOp& type_check"
          ],
          "return_type": "void",
          "logic": "Processes a type check operation. Stores type information about the checked object."
        },
        {
          "name": "ProcessAssertNotNull",
          "parameters": [
            "const AssertNotNullOp& assert_not_null"
          ],
          "return_type": "void",
          "logic": "Processes an assert not null operation. Refines the type knowledge to indicate the object is not null."
        },
        {
          "name": "ProcessIsNull",
          "parameters": [
            "const IsNullOp& is_null"
          ],
          "return_type": "void",
          "logic": "Processes an is null operation. Stores type information about the checked object."
        },
        {
          "name": "ProcessParameter",
          "parameters": [
            "const ParameterOp& parameter"
          ],
          "return_type": "void",
          "logic": "Processes a parameter operation. Refines type knowledge based on the parameter's type."
        },
        {
          "name": "ProcessStructGet",
          "parameters": [
            "const StructGetOp& struct_get"
          ],
          "return_type": "void",
          "logic": "Processes a struct get operation. Refines type knowledge, handles null checks, and infers the type of the field."
        },
        {
          "name": "ProcessStructSet",
          "parameters": [
            "const StructSetOp& struct_set"
          ],
          "return_type": "void",
          "logic": "Processes a struct set operation. Refines type knowledge and handles null checks."
        },
        {
          "name": "ProcessArrayGet",
          "parameters": [
            "const ArrayGetOp& array_get"
          ],
          "return_type": "void",
          "logic": "Processes an array get operation. Refines type knowledge, handles null checks, and infers the element type."
        },
        {
          "name": "ProcessArrayLength",
          "parameters": [
            "const ArrayLengthOp& array_length"
          ],
          "return_type": "void",
          "logic": "Processes an array length operation. Refines type knowledge and handles null checks."
        },
        {
          "name": "ProcessGlobalGet",
          "parameters": [
            "const GlobalGetOp& global_get"
          ],
          "return_type": "void",
          "logic": "Processes a global get operation. Refines the type knowledge based on the global's type."
        },
        {
          "name": "ProcessRefFunc",
          "parameters": [
            "const WasmRefFuncOp& ref_func"
          ],
          "return_type": "void",
          "logic": "Processes a ref func operation. Refines type knowledge based on the function's signature."
        },
        {
          "name": "ProcessAllocateArray",
          "parameters": [
            "const WasmAllocateArrayOp& allocate_array"
          ],
          "return_type": "void",
          "logic": "Processes an allocate array operation. Refines type knowledge based on the array's type."
        },
        {
          "name": "ProcessAllocateStruct",
          "parameters": [
            "const WasmAllocateStructOp& allocate_struct"
          ],
          "return_type": "void",
          "logic": "Processes an allocate struct operation. Refines type knowledge based on the struct's type."
        },
        {
          "name": "GetTypeForPhiInput",
          "parameters": [
            "const PhiOp& phi",
            "int input_index"
          ],
          "return_type": "wasm::ValueType",
          "logic": "Determines the type for a specific input to a phi node. It handles cases where the input is also a phi within the same loop block, ensuring correct type propagation for back edges."
        },
        {
          "name": "ProcessPhi",
          "parameters": [
            "const PhiOp& phi"
          ],
          "return_type": "void",
          "logic": "Processes a phi operation. Computes the union type of all its inputs. Special handling for loop headers and unreachable inputs."
        },
        {
          "name": "ProcessTypeAnnotation",
          "parameters": [
            "const WasmTypeAnnotationOp& type_annotation"
          ],
          "return_type": "void",
          "logic": "Processes a type annotation operation. Refines the type knowledge based on the annotation."
        },
        {
          "name": "ProcessBranchOnTarget",
          "parameters": [
            "const BranchOp& branch",
            "const Block& target"
          ],
          "return_type": "void",
          "logic": "Processes type information based on branch conditions.  Handles cases where the branch is based on type checks or is null checks, inferring types on the taken or not-taken branch. Can mark a block as unreachable based on the branch condition."
        },
        {
          "name": "ProcessNull",
          "parameters": [
            "const NullOp& null"
          ],
          "return_type": "void",
          "logic": "Processes a null operation. Refines type knowledge to the null type."
        },
        {
          "name": "CreateMergeSnapshot",
          "parameters": [
            "const Block& block"
          ],
          "return_type": "void",
          "logic": "Creates a merged type snapshot for a block by merging the snapshots of its predecessors. Handles unreachable predecessors correctly."
        },
        {
          "name": "CreateMergeSnapshot",
          "parameters": [
            "base::Vector<const Snapshot> predecessors",
            "base::Vector<const bool> reachable"
          ],
          "return_type": "bool",
          "logic": "Creates a new snapshot by merging the type information from multiple predecessor snapshots, based on their reachability. Determines if the types are equivalent between predecessors, and returns true if they're not (i.e. a revisit is necessary)."
        },
        {
          "name": "RefineTypeKnowledge",
          "parameters": [
            "OpIndex object",
            "wasm::ValueType new_type",
            "const Operation& op"
          ],
          "return_type": "wasm::ValueType",
          "logic": "Refines the type knowledge of an object by intersecting the current known type with a new type. Updates the types table and returns the previous value. Marks blocks as unreachable if an operation becomes unreachable after type refinement."
        },
        {
          "name": "RefineTypeKnowledgeNotNull",
          "parameters": [
            "OpIndex object",
            "const Operation& op"
          ],
          "return_type": "wasm::ValueType",
          "logic": "Refines the type knowledge of an object to be non-nullable. Marks blocks as unreachable if an operation becomes unreachable after type refinement."
        },
        {
          "name": "ResolveAliases",
          "parameters": [
            "OpIndex object"
          ],
          "return_type": "OpIndex",
          "logic": "Resolves aliases for an object by following type casts and assert not null operations until the base object is found."
        },
        {
          "name": "IsReachable",
          "parameters": [
            "const Block& block"
          ],
          "return_type": "bool",
          "logic": "Checks if a block is reachable based on the `block_is_unreachable_` set."
        },
        {
          "name": "GetResolvedType",
          "parameters": [
            "OpIndex object"
          ],
          "return_type": "wasm::ValueType",
          "logic": "Gets the resolved type of an object by first resolving any aliases."
        }
      ]
    }
  ],
  "functions": []
}