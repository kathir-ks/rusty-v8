{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/assembler.h",
  "imports": [
    "<cstring>",
    "<iomanip>",
    "<iterator>",
    "<limits>",
    "<memory>",
    "<optional>",
    "<type_traits>",
    "<utility>",
    "include/v8-source-location.h",
    "src/base/logging.h",
    "src/base/macros.h",
    "src/base/small-vector.h",
    "src/base/string-format.h",
    "src/base/template-utils.h",
    "src/base/vector.h",
    "src/codegen/callable.h",
    "src/codegen/code-factory.h",
    "src/codegen/heap-object-list.h",
    "src/codegen/reloc-info.h",
    "src/compiler/access-builder.h",
    "src/compiler/code-assembler.h",
    "src/compiler/common-operator.h",
    "src/compiler/globals.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/turboshaft/access-builder.h",
    "src/compiler/turboshaft/builtin-call-descriptors.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operation-matcher.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/reducer-traits.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/runtime-call-descriptors.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/snapshot-table.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h",
    "src/compiler/turboshaft/utils.h",
    "src/compiler/write-barrier-kind.h",
    "src/flags/flags.h",
    "src/logging/runtime-call-stats.h",
    "src/objects/dictionary.h",
    "src/objects/elements-kind.h",
    "src/objects/fixed-array.h",
    "src/objects/heap-number.h",
    "src/objects/oddball.h",
    "src/objects/property-cell.h",
    "src/objects/scope-info.h",
    "src/objects/swiss-name-dictionary.h",
    "src/objects/tagged.h",
    "src/objects/turbofan-types.h",
    "v8-primitive.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "Range",
      "properties": [
        "ConstOrV<T> begin_",
        "ConstOrV<T> end_",
        "ConstOrV<T> stride_"
      ],
      "methods": [
        {
          "name": "Range",
          "parameters": [
            "ConstOrV<T> begin",
            "ConstOrV<T> end",
            "ConstOrV<T> stride = 1"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Initializes a Range object with begin, end, and stride values."
        },
        {
          "name": "Begin",
          "parameters": [
            "A& assembler"
          ],
          "return_type": "iterator_type",
          "logic": "Returns the starting iterator value by resolving the begin_ value through the assembler."
        },
        {
          "name": "IsEnd",
          "parameters": [
            "A& assembler",
            "iterator_type current_iterator"
          ],
          "return_type": "OptionalV<Word32>",
          "logic": "Checks if the current iterator is at or past the end of the range.  Uses assembler to resolve the end value and performs a comparison."
        },
        {
          "name": "Advance",
          "parameters": [
            "A& assembler",
            "iterator_type current_iterator"
          ],
          "return_type": "iterator_type",
          "logic": "Advances the iterator by adding the stride to the current iterator value, using the assembler."
        },
        {
          "name": "Dereference",
          "parameters": [
            "A& assembler",
            "iterator_type current_iterator"
          ],
          "return_type": "value_type",
          "logic": "Returns the value at the current iterator, which is the iterator itself (for Range)."
        }
      ]
    },
    {
      "name": "IndexRange",
      "properties": [],
      "methods": [
        {
          "name": "IndexRange",
          "parameters": [
            "ConstOrV<T> count"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs an IndexRange that iterates from 0 up to (but not including) count with a stride of 1."
        }
      ]
    },
    {
      "name": "Sequence",
      "properties": [],
      "methods": [
        {
          "name": "Sequence",
          "parameters": [
            "ConstOrV<T> begin",
            "ConstOrV<T> stride = 1"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs a Sequence iterator that starts at begin and increments by stride."
        },
        {
          "name": "IsEnd",
          "parameters": [
            "A&",
            "iterator_type"
          ],
          "return_type": "OptionalV<Word32>",
          "logic": "Always returns nullopt, as a Sequence iterator has no termination condition."
        }
      ]
    },
    {
      "name": "Zip",
      "properties": [
        "std::tuple<Iterables...> iterables_"
      ],
      "methods": [
        {
          "name": "Zip",
          "parameters": [
            "Iterables... iterables"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs a Zip iterator by taking a tuple of iterable objects"
        },
        {
          "name": "Begin",
          "parameters": [
            "A& assembler"
          ],
          "return_type": "iterator_type",
          "logic": "Returns a tuple of the starting iterators from all the zipped iterables."
        },
        {
          "name": "IsEnd",
          "parameters": [
            "A& assembler",
            "iterator_type current_iterator"
          ],
          "return_type": "OptionalV<Word32>",
          "logic": "Checks if any of the zipped iterables have reached their end. If any reach the end, iteration is terminated."
        },
        {
          "name": "Advance",
          "parameters": [
            "A& assembler",
            "iterator_type current_iterator"
          ],
          "return_type": "iterator_type",
          "logic": "Advances each of the zipped iterators and returns the result as a tuple"
        },
        {
          "name": "Dereference",
          "parameters": [
            "A& assembler",
            "iterator_type current_iterator"
          ],
          "return_type": "value_type",
          "logic": "Returns a tuple of dereferenced values from all the zipped iterables"
        }
      ]
    },
    {
      "name": "ConditionWithHint",
      "properties": [
        "V<Word32> condition_",
        "BranchHint hint_"
      ],
      "methods": [
        {
          "name": "ConditionWithHint",
          "parameters": [
            "V<Word32> condition",
            "BranchHint hint = BranchHint::kNone"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs a ConditionWithHint object with a condition and optional hint."
        },
        {
          "name": "ConditionWithHint",
          "parameters": [
            "T condition",
            "BranchHint hint = BranchHint::kNone"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs a ConditionWithHint object with a condition (from OpIndex) and optional hint."
        },
        {
          "name": "condition",
          "parameters": [],
          "return_type": "V<Word32>",
          "logic": "Returns the condition."
        },
        {
          "name": "hint",
          "parameters": [],
          "return_type": "BranchHint",
          "logic": "Returns the branch hint."
        }
      ]
    },
    {
      "name": "LabelBase",
      "properties": [
        "BlockData data_",
        "bool has_incoming_jump_ = false"
      ],
      "methods": [
        {
          "name": "block",
          "parameters": [],
          "return_type": "Block*",
          "logic": "Returns the associated Block."
        },
        {
          "name": "has_incoming_jump",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates if there's an incoming jump."
        },
        {
          "name": "Goto",
          "parameters": [
            "A& assembler",
            "const values_t& values"
          ],
          "return_type": "void",
          "logic": "Performs a goto operation to the label's block. Records values passed to this point"
        },
        {
          "name": "GotoIf",
          "parameters": [
            "A& assembler",
            "OpIndex condition",
            "BranchHint hint",
            "const values_t& values"
          ],
          "return_type": "void",
          "logic": "Performs a conditional goto operation. Records values only if the goto occurs"
        },
        {
          "name": "GotoIfNot",
          "parameters": [
            "A& assembler",
            "OpIndex condition",
            "BranchHint hint",
            "const values_t& values"
          ],
          "return_type": "void",
          "logic": "Performs a conditional goto operation if condition is false. Records values only if the goto occurs"
        },
        {
          "name": "Bind",
          "parameters": [
            "A& assembler"
          ],
          "return_type": "base::prepend_tuple_type<bool, values_t>",
          "logic": "Binds this Label to the current assembler position. Materializes any Phi operations necessary based on recorded input values. Returns a boolean to indicate whether the binding was successful, prepended to the values that have been bound to the label."
        }
      ]
    },
    {
      "name": "Label",
      "properties": [],
      "methods": [
        {
          "name": "Label",
          "parameters": [
            "Reducer* reducer"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs a Label instance, associating it with a new basic block in the assembler."
        }
      ]
    },
    {
      "name": "LoopLabel",
      "properties": [
        "BlockData loop_header_data_",
        "std::optional<values_t> pending_loop_phis_"
      ],
      "methods": [
        {
          "name": "LoopLabel",
          "parameters": [
            "Reducer* reducer"
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructs a LoopLabel instance, initializing both a loop header block and a backedge block."
        },
        {
          "name": "loop_header",
          "parameters": [],
          "return_type": "Block*",
          "logic": "Returns the loop's header Block"
        },
        {
          "name": "Goto",
          "parameters": [
            "A& assembler",
            "const values_t& values"
          ],
          "return_type": "void",
          "logic": "If the loop header is not bound, this represents the forward edge, jumps to the header. Otherwise, it performs a jump back to the backedge block."
        },
        {
          "name": "GotoIf",
          "parameters": [
            "A& assembler",
            "OpIndex condition",
            "BranchHint hint",
            "const values_t& values"
          ],
          "return_type": "void",
          "logic": "Performs a conditional goto to the loop header, accounting for the possibility that it is the forward edge"
        },
        {
          "name": "GotoIfNot",
          "parameters": [
            "A& assembler",
            "OpIndex condition",
            "BranchHint hint",
            "const values_t& values"
          ],
          "return_type": "void",
          "logic": "Performs a conditional goto (inverted logic) to the loop header, accounting for forward edge."
        },
        {
          "name": "BindLoop",
          "parameters": [
            "A& assembler"
          ],
          "return_type": "base::prepend_tuple_type<bool, values_t>",
          "logic": "Binds the loop header, materializing phis. Returns boolean result and the constructed phi values."
        },
        {
          "name": "EndLoop",
          "parameters": [
            "A& assembler"
          ],
          "return_type": "void",
          "logic": "Finishes the loop by binding the backedge block, performing the actual jump to the loop header, and finalizing Phis"
        }
      ]
    },
    {
      "name": "Uninitialized",
      "properties": [
        "std::optional<V<T>> object_"
      ],
      "methods": []
    },
    {
      "name": "GenericReducerBase",
      "properties": [],
      "methods": [
        {
          "name": "Bind",
          "parameters": [
            "Block* block"
          ],
          "return_type": "void",
          "logic": "A no-op used as a base for reducers."
        },
        {
          "name": "CanAutoInlineBlocksWithSinglePredecessor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true indicating that the CopyingPhase is allowed to auto inline blocks."
        },
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "A no-op used as a base for reducers."
        },
        {
          "name": "RemoveLast",
          "parameters": [
            "OpIndex index_of_last_operation"
          ],
          "return_type": "void",
          "logic": "Removes the last operation from the output graph."
        },
        {
          "name": "FixLoopPhi",
          "parameters": [
            "const PhiOp& input_phi",
            "OpIndex output_index",
            "Block* output_graph_loop"
          ],
          "return_type": "void",
          "logic": "If `output_index` corresponds to a `PendingLoopPhiOp`, fix it to a proper `PhiOp` in `output_graph_loop`."
        }
      ]
    },
    {
      "name": "ReducerBaseForwarder",
      "properties": [],
      "methods": []
    },
    {
      "name": "TurboshaftAssemblerOpInterface",
      "properties": [
        "OperationMatcher matcher_"
      ],
      "methods": []
    },
    {
      "name": "GenericAssemblerOpInterface",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "BuiltinCodeHandle",
      "parameters": [
        "Builtin builtin",
        "Isolate* isolate"
      ],
      "return_type": "Handle<Code>",
      "logic": "Retrieves a handle to the code object associated with a builtin function in the V8 isolate."
    },
    {
      "name": "SuppressUnusedWarning",
      "parameters": [
        "bool b"
      ],
      "return_type": "bool",
      "logic": "This function simply returns its input. Its purpose is to avoid \"unused variable\" warnings in situations where a variable must be declared but is intentionally unused."
    }
  ]
}