{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-graph-assembler.cc",
  "imports": [
    "src/compiler/wasm-graph-assembler.h",
    "src/common/globals.h",
    "src/compiler/access-builder.h",
    "src/compiler/diamond.h",
    "src/compiler/node-matchers.h",
    "src/compiler/wasm-compiler-definitions.h",
    "src/objects/string.h",
    "src/wasm/object-access.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "WasmGraphAssembler",
      "properties": [],
      "methods": [
        {
          "name": "Branch",
          "parameters": [
            "Node* cond",
            "Node** true_node",
            "Node** false_node",
            "BranchHint hint"
          ],
          "return_type": "Node*",
          "logic": "Creates a branch node in the graph based on the condition `cond`. Sets `true_node` and `false_node` to the respective output nodes of the branch. Returns the branch node."
        },
        {
          "name": "BuildTruncateIntPtrToInt32",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Truncates an IntPtr to an Int32 if the machine is 64-bit, otherwise returns the original value."
        },
        {
          "name": "BuildChangeInt32ToIntPtr",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Changes an Int32 to an IntPtr if the machine is 64-bit, otherwise returns the original value."
        },
        {
          "name": "BuildChangeIntPtrToInt64",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Changes an IntPtr to an Int64 if the machine is 32-bit, otherwise returns the original value."
        },
        {
          "name": "BuildChangeUint32ToUintPtr",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Converts a Uint32 to a UintPtr.  If the architecture is 32-bit, it returns the input node directly. Handles the case where the node is a constant to directly fold the constant."
        },
        {
          "name": "BuildSmiShiftBitsConstant",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns an IntPtr constant representing the number of bits to shift for SMI tagging."
        },
        {
          "name": "BuildSmiShiftBitsConstant32",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns an Int32 constant representing the number of bits to shift for SMI tagging."
        },
        {
          "name": "BuildChangeInt32ToSmi",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Converts an Int32 value to a SMI (Small Integer) value. Uses bit shifting for tagging. Handles pointer compression."
        },
        {
          "name": "BuildChangeUint31ToSmi",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Converts a Uint31 value to a SMI (Small Integer) value. Uses bit shifting for tagging. Handles pointer compression."
        },
        {
          "name": "BuildChangeSmiToInt32",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Converts a SMI (Small Integer) value to an Int32 value. Uses bit shifting to remove the SMI tag. Handles pointer compression."
        },
        {
          "name": "BuildConvertUint32ToSmiWithSaturation",
          "parameters": [
            "Node* value",
            "uint32_t maxval"
          ],
          "return_type": "Node*",
          "logic": "Converts a Uint32 value to a SMI, saturating at a maximum value to prevent SMI overflows."
        },
        {
          "name": "BuildChangeSmiToIntPtr",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Converts a SMI to an IntPtr. Uses bit shifting to remove the SMI tag. Handles pointer compression."
        },
        {
          "name": "Allocate",
          "parameters": [
            "int size"
          ],
          "return_type": "Node*",
          "logic": "Allocates a raw block of memory of the given size.  Overload taking integer constant for size."
        },
        {
          "name": "Allocate",
          "parameters": [
            "Node* size"
          ],
          "return_type": "Node*",
          "logic": "Allocates a raw block of memory of the given size. Takes a Node representing the size."
        },
        {
          "name": "LoadFromObject",
          "parameters": [
            "MachineType type",
            "Node* base",
            "Node* offset"
          ],
          "return_type": "Node*",
          "logic": "Loads a value of the specified `type` from an object at the given `base` and `offset`."
        },
        {
          "name": "LoadProtectedPointerFromObject",
          "parameters": [
            "Node* object",
            "Node* offset"
          ],
          "return_type": "Node*",
          "logic": "Loads a protected pointer from an object at the given offset. The machine type used for the load depends on whether the sandbox is enabled."
        },
        {
          "name": "LoadImmutableProtectedPointerFromObject",
          "parameters": [
            "Node* object",
            "Node* offset"
          ],
          "return_type": "Node*",
          "logic": "Loads an immutable protected pointer from an object at the given offset. The machine type used for the load depends on whether the sandbox is enabled."
        },
        {
          "name": "LoadImmutableFromObject",
          "parameters": [
            "MachineType type",
            "Node* base",
            "Node* offset"
          ],
          "return_type": "Node*",
          "logic": "Loads an immutable value of the specified `type` from an object at the given `base` and `offset`."
        },
        {
          "name": "LoadImmutable",
          "parameters": [
            "LoadRepresentation rep",
            "Node* base",
            "Node* offset"
          ],
          "return_type": "Node*",
          "logic": "Loads an immutable value of the specified `rep` from an object at the given `base` and `offset`."
        },
        {
          "name": "LoadWasmCodePointer",
          "parameters": [
            "Node* code_pointer"
          ],
          "return_type": "Node*",
          "logic": "Loads a wasm code pointer from the code pointer table."
        },
        {
          "name": "StoreToObject",
          "parameters": [
            "ObjectAccess access",
            "Node* base",
            "Node* offset",
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Stores a `value` into an object at the given `base` and `offset`, using the specified `access` parameters."
        },
        {
          "name": "InitializeImmutableInObject",
          "parameters": [
            "ObjectAccess access",
            "Node* base",
            "Node* offset",
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Initializes an immutable field in an object at the given `base` and `offset` with `value`, using the specified `access` parameters."
        },
        {
          "name": "BuildDecodeSandboxedExternalPointer",
          "parameters": [
            "Node* handle",
            "ExternalPointerTagRange tag_range",
            "Node* isolate_root"
          ],
          "return_type": "Node*",
          "logic": "Decodes a sandboxed external pointer from a handle, given the tag range and isolate root. It retrieves the pointer from the external pointer table."
        },
        {
          "name": "BuildDecodeTrustedPointer",
          "parameters": [
            "Node* handle",
            "IndirectPointerTag tag"
          ],
          "return_type": "Node*",
          "logic": "Decodes a trusted pointer (an indirect pointer kept in a table)."
        },
        {
          "name": "BuildLoadExternalPointerFromObject",
          "parameters": [
            "Node* object",
            "int field_offset",
            "ExternalPointerTagRange tag_range",
            "Node* isolate_root"
          ],
          "return_type": "Node*",
          "logic": "Loads an external pointer from an object at the given `field_offset` and decodes it using `BuildDecodeSandboxedExternalPointer` if sandboxing is enabled."
        },
        {
          "name": "IsSmi",
          "parameters": [
            "Node* object"
          ],
          "return_type": "Node*",
          "logic": "Checks if a given object is a SMI (Small Integer)."
        },
        {
          "name": "LoadMap",
          "parameters": [
            "Node* object"
          ],
          "return_type": "Node*",
          "logic": "Loads the map of a heap object."
        },
        {
          "name": "StoreMap",
          "parameters": [
            "Node* heap_object",
            "Node* map"
          ],
          "return_type": "void",
          "logic": "Stores the map of a heap object."
        },
        {
          "name": "LoadInstanceType",
          "parameters": [
            "Node* map"
          ],
          "return_type": "Node*",
          "logic": "Loads the instance type from a map object."
        },
        {
          "name": "LoadWasmTypeInfo",
          "parameters": [
            "Node* map"
          ],
          "return_type": "Node*",
          "logic": "Loads the Wasm type info from a map object."
        },
        {
          "name": "LoadFixedArrayLengthAsSmi",
          "parameters": [
            "Node* fixed_array"
          ],
          "return_type": "Node*",
          "logic": "Loads the length of a fixed array as a SMI."
        },
        {
          "name": "LoadFixedArrayElement",
          "parameters": [
            "Node* fixed_array",
            "Node* index_intptr",
            "MachineType type"
          ],
          "return_type": "Node*",
          "logic": "Loads an element from a fixed array at the given index (as an IntPtr) with the specified machine type."
        },
        {
          "name": "LoadWeakFixedArrayElement",
          "parameters": [
            "Node* fixed_array",
            "Node* index_intptr"
          ],
          "return_type": "Node*",
          "logic": "Loads an element from a weak fixed array at the given index (as an IntPtr)."
        },
        {
          "name": "LoadImmutableFixedArrayElement",
          "parameters": [
            "Node* fixed_array",
            "Node* index_intptr",
            "MachineType type"
          ],
          "return_type": "Node*",
          "logic": "Loads an immutable element from a fixed array at the given index (as an IntPtr) with the specified machine type."
        },
        {
          "name": "LoadFixedArrayElement",
          "parameters": [
            "Node* array",
            "int index",
            "MachineType type"
          ],
          "return_type": "Node*",
          "logic": "Loads an element from a fixed array at a given index (integer constant) with a specified MachineType."
        },
        {
          "name": "LoadProtectedFixedArrayElement",
          "parameters": [
            "Node* array",
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Loads a protected element from a fixed array at a given index (integer constant)."
        },
        {
          "name": "LoadProtectedFixedArrayElement",
          "parameters": [
            "Node* array",
            "Node* index_intptr"
          ],
          "return_type": "Node*",
          "logic": "Loads a protected element from a fixed array at a given index (as an IntPtr)."
        },
        {
          "name": "LoadByteArrayElement",
          "parameters": [
            "Node* byte_array",
            "Node* index_intptr",
            "MachineType type"
          ],
          "return_type": "Node*",
          "logic": "Loads an element from a byte array at the given index (as an IntPtr) with the specified machine type."
        },
        {
          "name": "LoadImmutableTrustedPointerFromObject",
          "parameters": [
            "Node* object",
            "int field_offset",
            "IndirectPointerTag tag"
          ],
          "return_type": "Node*",
          "logic": "Loads an immutable trusted pointer from an object at the given field offset, using the provided tag."
        },
        {
          "name": "LoadTrustedPointerFromObject",
          "parameters": [
            "Node* object",
            "int field_offset",
            "IndirectPointerTag tag"
          ],
          "return_type": "Node*",
          "logic": "Loads a trusted pointer from an object at the given field offset, using the provided tag."
        },
        {
          "name": "LoadTrustedPointerFromObjectTrapOnNull",
          "parameters": [
            "Node* object",
            "int field_offset",
            "IndirectPointerTag tag"
          ],
          "return_type": "std::pair<Node*, Node*>",
          "logic": "Loads a trusted pointer from an object at the given field offset, using the provided tag. Traps if the pointer is null."
        },
        {
          "name": "StoreFixedArrayElement",
          "parameters": [
            "Node* array",
            "int index",
            "Node* value",
            "ObjectAccess access"
          ],
          "return_type": "Node*",
          "logic": "Stores a value to an element in a fixed array at the given index (integer constant) with the specified access."
        },
        {
          "name": "LoadSharedFunctionInfo",
          "parameters": [
            "Node* js_function"
          ],
          "return_type": "Node*",
          "logic": "Loads the SharedFunctionInfo from a JSFunction object."
        },
        {
          "name": "LoadContextFromJSFunction",
          "parameters": [
            "Node* js_function"
          ],
          "return_type": "Node*",
          "logic": "Loads the context from a JSFunction object."
        },
        {
          "name": "LoadFunctionDataFromJSFunction",
          "parameters": [
            "Node* js_function"
          ],
          "return_type": "Node*",
          "logic": "Loads the FunctionData (trusted) from a JSFunction object. It loads the SharedFunctionInfo first, then the trusted FunctionData from the SharedFunctionInfo."
        },
        {
          "name": "LoadExportedFunctionIndexAsSmi",
          "parameters": [
            "Node* exported_function_data"
          ],
          "return_type": "Node*",
          "logic": "Loads the exported function index (as a SMI) from WasmExportedFunctionData."
        },
        {
          "name": "LoadExportedFunctionInstanceData",
          "parameters": [
            "Node* exported_function_data"
          ],
          "return_type": "Node*",
          "logic": "Loads the instance data (protected) from WasmExportedFunctionData."
        },
        {
          "name": "LoadJSArrayElements",
          "parameters": [
            "Node* js_array"
          ],
          "return_type": "Node*",
          "logic": "Loads the elements array from a JSArray object."
        },
        {
          "name": "FieldOffset",
          "parameters": [
            "const wasm::StructType* type",
            "uint32_t field_index"
          ],
          "return_type": "Node*",
          "logic": "Calculates the field offset within a Wasm struct."
        },
        {
          "name": "WasmArrayElementOffset",
          "parameters": [
            "Node* index",
            "wasm::ValueType element_type"
          ],
          "return_type": "Node*",
          "logic": "Calculates the element offset within a Wasm array."
        },
        {
          "name": "IsDataRefMap",
          "parameters": [
            "Node* map"
          ],
          "return_type": "Node*",
          "logic": "Checks if a given map is a DataRef map. Checks if the instance type falls within the WASM_OBJECT range."
        },
        {
          "name": "WasmTypeCheck",
          "parameters": [
            "Node* object",
            "Node* rtt",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "Node*",
          "logic": "Performs a Wasm type check, verifying that an object conforms to a given RTT (Runtime Type)."
        },
        {
          "name": "WasmTypeCheckAbstract",
          "parameters": [
            "Node* object",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "Node*",
          "logic": "Performs an abstract Wasm type check, verifying that an object is of some wasm type at all."
        },
        {
          "name": "WasmTypeCast",
          "parameters": [
            "Node* object",
            "Node* rtt",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "Node*",
          "logic": "Performs a Wasm type cast, casting an object to a given RTT (Runtime Type)."
        },
        {
          "name": "WasmTypeCastAbstract",
          "parameters": [
            "Node* object",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "Node*",
          "logic": "Performs an abstract Wasm type cast, casting an object to some wasm type. Likely used with `anyref`."
        },
        {
          "name": "Null",
          "parameters": [
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Creates a null value of the given Wasm value type."
        },
        {
          "name": "IsNull",
          "parameters": [
            "Node* object",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Checks if an object is null, based on the Wasm value type."
        },
        {
          "name": "IsNotNull",
          "parameters": [
            "Node* object",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Checks if an object is not null, based on the Wasm value type."
        },
        {
          "name": "AssertNotNull",
          "parameters": [
            "Node* object",
            "wasm::ValueType type",
            "TrapId trap_id"
          ],
          "return_type": "Node*",
          "logic": "Asserts that an object is not null, and triggers a trap if it is.  The trap is identified by TrapId."
        },
        {
          "name": "WasmAnyConvertExtern",
          "parameters": [
            "Node* object"
          ],
          "return_type": "Node*",
          "logic": "Converts a Wasm anyref value to an externref."
        },
        {
          "name": "WasmExternConvertAny",
          "parameters": [
            "Node* object"
          ],
          "return_type": "Node*",
          "logic": "Converts a Wasm externref value to an anyref."
        },
        {
          "name": "StructGet",
          "parameters": [
            "Node* object",
            "const wasm::StructType* type",
            "int field_index",
            "bool is_signed",
            "CheckForNull null_check"
          ],
          "return_type": "Node*",
          "logic": "Gets a field from a Wasm struct."
        },
        {
          "name": "StructSet",
          "parameters": [
            "Node* object",
            "Node* value",
            "const wasm::StructType* type",
            "int field_index",
            "CheckForNull null_check"
          ],
          "return_type": "void",
          "logic": "Sets a field in a Wasm struct."
        },
        {
          "name": "ArrayGet",
          "parameters": [
            "Node* array",
            "Node* index",
            "const wasm::ArrayType* type",
            "bool is_signed"
          ],
          "return_type": "Node*",
          "logic": "Gets an element from a Wasm array."
        },
        {
          "name": "ArraySet",
          "parameters": [
            "Node* array",
            "Node* index",
            "Node* value",
            "const wasm::ArrayType* type"
          ],
          "return_type": "void",
          "logic": "Sets an element in a Wasm array."
        },
        {
          "name": "ArrayLength",
          "parameters": [
            "Node* array",
            "CheckForNull null_check"
          ],
          "return_type": "Node*",
          "logic": "Gets the length of a Wasm array."
        },
        {
          "name": "ArrayInitializeLength",
          "parameters": [
            "Node* array",
            "Node* length"
          ],
          "return_type": "void",
          "logic": "Initializes the length of a Wasm array."
        },
        {
          "name": "LoadStringLength",
          "parameters": [
            "Node* string"
          ],
          "return_type": "Node*",
          "logic": "Loads the length of a String."
        },
        {
          "name": "StringAsWtf16",
          "parameters": [
            "Node* string"
          ],
          "return_type": "Node*",
          "logic": "Converts a String to WTF16 format."
        },
        {
          "name": "StringPrepareForGetCodeunit",
          "parameters": [
            "Node* string"
          ],
          "return_type": "Node*",
          "logic": "Prepares a String for getting a code unit."
        },
        {
          "name": "LoadTrustedDataFromInstanceObject",
          "parameters": [
            "Node* instance_object"
          ],
          "return_type": "Node*",
          "logic": "Loads the trusted data from a Wasm instance object."
        },
        {
          "name": "HasInstanceType",
          "parameters": [
            "Node* heap_object",
            "InstanceType type"
          ],
          "return_type": "Node*",
          "logic": "Checks if a given heap object has a specific instance type."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetBuiltinCallDescriptor",
      "parameters": [
        "Builtin name",
        "Zone* zone",
        "StubCallMode stub_mode",
        "bool needs_frame_state",
        "Operator::Properties properties"
      ],
      "return_type": "CallDescriptor*",
      "logic": "Creates a CallDescriptor for a builtin function call, configuring parameters like the calling convention, stack parameters, and frame state requirements."
    },
    {
      "name": "ObjectAccessForGCStores",
      "parameters": [
        "wasm::ValueType type"
      ],
      "return_type": "ObjectAccess",
      "logic": "Determines the ObjectAccess parameters for a GC store operation based on the given wasm value type."
    }
  ]
}