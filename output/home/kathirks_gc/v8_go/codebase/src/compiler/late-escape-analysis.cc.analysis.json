{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/late-escape-analysis.cc",
  "imports": [
    "src/compiler/late-escape-analysis.h",
    "<optional>",
    "src/compiler/js-graph.h",
    "src/compiler/node-properties.h"
  ],
  "classes": [
    {
      "name": "LateEscapeAnalysis",
      "properties": [
        "dead_",
        "all_allocations_",
        "escaping_allocations_",
        "revisit_"
      ],
      "methods": [
        {
          "name": "LateEscapeAnalysis",
          "parameters": [
            "Editor* editor",
            "TFGraph* graph",
            "CommonOperatorBuilder* common",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the LateEscapeAnalysis class. Initializes the dead_ node, allocation sets, and worklist."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a node. If the node is an AllocateRaw node, it's added to the set of all allocations.  It also checks if any of the node's input edges are escaping allocation witnesses, and if so, records the allocation as escaping."
        },
        {
          "name": "Finalize",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes the escape analysis. It iterates through all allocated nodes and removes those that are not escaping. It also revisits allocations in the revisit_ list."
        },
        {
          "name": "IsEscaping",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given allocation node is considered escaping."
        },
        {
          "name": "RemoveAllocation",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Removes an allocation node by replacing its uses with the dead_ node and killing the node. It also handles the potential removal of other allocations that were stored into this one."
        },
        {
          "name": "RecordEscapingAllocation",
          "parameters": [
            "Node* allocation"
          ],
          "return_type": "void",
          "logic": "Records an allocation as escaping by incrementing its escape count."
        },
        {
          "name": "RemoveWitness",
          "parameters": [
            "Node* allocation"
          ],
          "return_type": "void",
          "logic": "Decrements the escape count of an allocation."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsStore",
      "parameters": [
        "Edge edge"
      ],
      "return_type": "bool",
      "logic": "Checks if a given edge represents a store operation to an AllocateRaw node. It examines the opcode of the node that the edge originates from (e.g., Store, StoreElement) and checks the edge index to confirm it is the value edge."
    },
    {
      "name": "IsEscapingAllocationWitness",
      "parameters": [
        "Edge edge"
      ],
      "return_type": "bool",
      "logic": "Checks if a given edge is an escaping allocation witness, meaning it is a value edge going to an AllocateRaw node but is not a store."
    },
    {
      "name": "TryGetStoredValue",
      "parameters": [
        "Node* node"
      ],
      "return_type": "std::optional<Node*>",
      "logic": "Attempts to retrieve the value that is being stored by a given store node (Store, StoreElement, etc.). Returns std::nullopt if the node is not a store operation."
    }
  ]
}