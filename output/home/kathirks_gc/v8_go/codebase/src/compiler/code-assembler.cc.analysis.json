{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/code-assembler.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/code-assembler.cc\",\n  \"imports\": [\n    \"src/compiler/code-assembler.h\",\n    \"<optional>\",\n    \"<ostream>\",\n    \"<thread>\",\n    \"src/builtins/builtins-inl.h\",\n    \"src/builtins/constants-table-builder.h\",\n    \"src/codegen/compiler.h\",\n    \"src/codegen/interface-descriptors-inl.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/codegen/tnode.h\",\n    \"src/compiler-dispatcher/optimizing-compile-dispatcher.h\",\n    \"src/compiler/backend/instruction-selector.h\",\n    \"src/compiler/js-graph.h\",\n    \"src/compiler/linkage.h\",\n    \"src/compiler/node-matchers.h\",\n    \"src/compiler/pipeline.h\",\n    \"src/compiler/raw-machine-assembler.h\",\n    \"src/compiler/schedule.h\",\n    \"src/compiler/turbofan-graph.h\",\n    \"src/handles/handles-inl.h\",\n    \"src/heap/factory-inl.h\",\n    \"src/numbers/conversions-inl.h\",\n    \"src/objects/smi.h\",\n    \"src/utils/memcopy.h\",\n    \"src/zone/zone.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CodeAssemblerState\",\n      \"properties\": [\n        \"raw_assembler_\",\n        \"kind_\",\n        \"name_\",\n        \"builtin_\",\n        \"code_generated_\",\n        \"variables_\",\n        \"jsgraph_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CodeAssemblerState\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Zone* zone\",\n            \"const CallInterfaceDescriptor& descriptor\",\n            \"CodeKind kind\",\n            \"const char* name\",\n            \"Builtin builtin\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the state using a CallInterfaceDescriptor. Used for stubs and bytecode handlers.\"\n        },\n        {\n          \"name\": \"CodeAssemblerState\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Zone* zone\",\n            \"CallDescriptor* call_descriptor\",\n            \"CodeKind kind\",\n            \"const char* name\",\n            \"Builtin builtin\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the state with a CallDescriptor, RawMachineAssembler and other components.\"\n        },\n        {\n          \"name\": \"~CodeAssemblerState\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor for CodeAssemblerState, defaults to standard destructor.\"\n        },\n        {\n          \"name\": \"parameter_count\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of parameters based on the raw assembler.\"\n        },\n        {\n          \"name\": \"PrintCurrentBlock\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the current block in the RawMachineAssembler (only in DEBUG mode).\"\n        },\n        {\n          \"name\": \"InsideBlock\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the raw assembler is inside a block.\"\n        },\n        {\n          \"name\": \"SetInitialDebugInformation\",\n          \"parameters\": [\n            \"const char* msg\",\n            \"const char* file\",\n            \"int line\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets initial debug information (message, file, line) for the raw assembler. Only in DEBUG mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BreakOnNodeDecorator\",\n      \"properties\": [\n        \"node_id_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BreakOnNodeDecorator\",\n          \"parameters\": [\n            \"NodeId node_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the class that sets the node id to break on\"\n        },\n        {\n          \"name\": \"Decorate\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"If the provided node has the target ID, trigger a debug break.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CodeAssembler\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~CodeAssembler\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor for CodeAssembler, defaults to standard destructor.\"\n        },\n        {\n          \"name\": \"BreakOnNode\",\n          \"parameters\": [\n            \"int node_id\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a GraphDecorator to break execution when a specific node id is reached.\"\n        },\n        {\n          \"name\": \"RegisterCallGenerationCallbacks\",\n          \"parameters\": [\n            \"const CodeAssemblerCallback& call_prologue\",\n            \"const CodeAssemblerCallback& call_epilogue\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers callbacks to be executed at the beginning and end of each call.\"\n        },\n        {\n          \"name\": \"UnregisterCallGenerationCallbacks\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Unregisters previously registered call generation callbacks.\"\n        },\n        {\n          \"name\": \"CallPrologue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes the prologue callback if it is registered.\"\n        },\n        {\n          \"name\": \"CallEpilogue\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes the epilogue callback if it is registered.\"\n        },\n        {\n          \"name\": \"Word32ShiftIsSafe\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if word32 shift operation is safe (doesn't shift more than word size).\"\n        },\n        {\n          \"name\": \"Is64\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the target architecture is 64-bit.\"\n        },\n        {\n          \"name\": \"Is32\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the target architecture is 32-bit.\"\n        },\n        {\n          \"name\": \"IsFloat64RoundUpSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Float64RoundUp operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsFloat64RoundDownSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Float64RoundDown operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsFloat64RoundTiesEvenSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Float64RoundTiesEven operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsFloat64RoundTruncateSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Float64RoundTruncate operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsTruncateFloat64ToFloat16RawBitsSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if TruncateFloat64ToFloat16RawBits operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsInt32AbsWithOverflowSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Int32AbsWithOverflow operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsInt64AbsWithOverflowSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Int64AbsWithOverflow operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsIntPtrAbsWithOverflowSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if IntPtrAbsWithOverflow operation is supported by machine, depending on the architecture (32/64 bit).\"\n        },\n        {\n          \"name\": \"IsWord32PopcntSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Word32Popcnt operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsWord64PopcntSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Word64Popcnt operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsWord32CtzSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Word32Ctz operation is supported by machine\"\n        },\n        {\n          \"name\": \"IsWord64CtzSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if Word64Ctz operation is supported by machine\"\n        },\n        {\n          \"name\": \"UniqueInt32Constant\",\n          \"parameters\": [\n            \"int32_t value\"\n          ],\n          \"return_type\": \"TNode<Int32T>\",\n          \"logic\": \"Creates a unique Int32 constant node in the graph.\"\n        },\n        {\n          \"name\": \"Int32Constant\",\n          \"parameters\": [\n            \"int32_t value\"\n          ],\n          \"return_type\": \"TNode<Int32T>\",\n          \"logic\": \"Creates a Int32 constant node in the graph.\"\n        },\n        {\n          \"name\": \"UniqueInt64Constant\",\n          \"parameters\": [\n            \"int64_t value\"\n          ],\n          \"return_type\": \"TNode<Int64T>\",\n          \"logic\": \"Creates a unique Int64 constant node in the graph.\"\n        },\n        {\n          \"name\": \"Int64Constant\",\n          \"parameters\": [\n            \"int64_t value\"\n          ],\n          \"return_type\": \"TNode<Int64T>\",\n          \"logic\": \"Creates a Int64 constant node in the graph.\"\n        },\n        {\n          \"name\": \"UniqueIntPtrConstant\",\n          \"parameters\": [\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"TNode<IntPtrT>\",\n          \"logic\": \"Creates a unique IntPtr constant node in the graph.\"\n        },\n        {\n          \"name\": \"IntPtrConstant\",\n          \"parameters\": [\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"TNode<IntPtrT>\",\n          \"logic\": \"Creates a IntPtr constant node in the graph.\"\n        },\n        {\n          \"name\": \"TaggedIndexConstant\",\n          \"parameters\": [\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"TNode<TaggedIndex>\",\n          \"logic\": \"Creates a TaggedIndex constant node in the graph.\"\n        },\n        {\n          \"name\": \"NumberConstant\",\n          \"parameters\": [\n            \"double value\"\n          ],\n          \"return_type\": \"TNode<Number>\",\n          \"logic\": \"Creates a Number constant node (Smi or HeapNumber) in the graph.\"\n        },\n        {\n          \"name\": \"SmiConstant\",\n          \"parameters\": [\n            \"Tagged<Smi> value\"\n          ],\n          \"return_type\": \"TNode<Smi>\",\n          \"logic\": \"Creates a Smi constant node in the graph.\"\n        },\n        {\n          \"name\": \"SmiConstant\",\n          \"parameters\": [\n            \"int value\"\n          ],\n          \"return_type\": \"TNode<Smi>\",\n          \"logic\": \"Creates a Smi constant node in the graph, from integer input.\"\n        },\n        {\n          \"name\": \"CanonicalizeEmbeddedBuiltinsConstantIfNeeded\",\n          \"parameters\": [\n            \"Handle<HeapObject> object\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"This function avoids emitting duplicate constants into the embedded constants table.\"\n        },\n        {\n          \"name\": \"UntypedHeapConstantNoHole\",\n          \"parameters\": [\n            \"Handle<HeapObject> object\"\n          ],\n          \"return_type\": \"TNode<HeapObject>\",\n          \"logic\": \"Creates a HeapObject constant node (not hole) in the graph.\"\n        },\n        {\n          \"name\": \"UntypedHeapConstantMaybeHole\",\n          \"parameters\": [\n            \"Handle<HeapObject> object\"\n          ],\n          \"return_type\": \"TNode<HeapObject>\",\n          \"logic\": \"Creates a HeapObject constant node (maybe hole) in the graph.\"\n        },\n        {\n          \"name\": \"UntypedHeapConstantHole\",\n          \"parameters\": [\n            \"Handle<HeapObject> object\"\n          ],\n          \"return_type\": \"TNode<HeapObject>\",\n          \"logic\": \"Creates a HeapObject constant node (Hole) in the graph.\"\n        },\n        {\n          \"name\": \"StringConstant\",\n          \"parameters\": [\n            \"const char* str\"\n          ],\n          \"return_type\": \"TNode<String>\",\n          \"logic\": \"Creates a String constant node in the graph.\"\n        },\n        {\n          \"name\": \"BooleanConstant\",\n          \"parameters\": [\n            \"bool value\"\n          ],\n          \"return_type\": \"TNode<Boolean>\",\n          \"logic\": \"Creates a Boolean constant node in the graph.\"\n        },\n        {\n          \"name\": \"ExternalConstant\",\n          \"parameters\": [\n            \"ExternalReference address\"\n          ],\n          \"return_type\": \"TNode<ExternalReference>\",\n          \"logic\": \"Creates an ExternalReference constant node in the graph.\"\n        },\n        {\n          \"name\": \"IsolateField\",\n          \"parameters\": [\n            \"IsolateFieldId id\"\n          ],\n          \"return_type\": \"TNode<ExternalReference>\",\n          \"logic\": \"Creates an ExternalReference node for an isolate field.\"\n        },\n        {\n          \"name\": \"Float32Constant\",\n          \"parameters\": [\n            \"double value\"\n          ],\n          \"return_type\": \"TNode<Float32T>\",\n          \"logic\": \"Creates a Float32 constant node in the graph.\"\n        },\n        {\n          \"name\": \"Float64Constant\",\n          \"parameters\": [\n            \"double value\"\n          ],\n          \"return_type\": \"TNode<Float64T>\",\n          \"logic\": \"Creates a Float64 constant node in the graph.\"\n        },\n        {\n          \"name\": \"IsMapOffsetConstant\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the given node is a Map offset constant.\"\n        },\n        {\n          \"name\": \"TryToInt32Constant\",\n          \"parameters\": [\n            \"TNode<IntegralT> node\",\n            \"int32_t* out_value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tries to convert a node to an int32 constant.\"\n        },\n        {\n          \"name\": \"TryToInt64Constant\",\n          \"parameters\": [\n            \"TNode<IntegralT> node\",\n            \"int64_t* out_value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tries to convert a node to an int64 constant.\"\n        },\n        {\n          \"name\": \"TryToSmiConstant\",\n          \"parameters\": [\n            \"TNode<Smi> tnode\",\n            \"Tagged<Smi>* out_value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tries to convert a node to a Smi constant.\"\n        },\n        {\n          \"name\": \"TryToSmiConstant\",\n          \"parameters\": [\n            \"TNode<IntegralT> node\",\n            \"Tagged<Smi>* out_value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tries to convert a node to a Smi constant (Integral version).\"\n        },\n        {\n          \"name\": \"TryToIntPtrConstant\",\n          \"parameters\": [\n            \"TNode<Smi> tnode\",\n            \"intptr_t* out_value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tries to convert a node to an intptr_t constant.\"\n        },\n        {\n          \"name\": \"TryToIntPtrConstant\",\n          \"parameters\": [\n            \"TNode<IntegralT> node\",\n            \"intptr_t* out_value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tries to convert a node to an intptr_t constant (Integral version).\"\n        },\n        {\n          \"name\": \"IsUndefinedConstant\",\n          \"parameters\": [\n            \"TNode<Object> node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a node represents the 'undefined' value.\"\n        },\n        {\n          \"name\": \"IsNullConstant\",\n          \"parameters\": [\n            \"TNode<Object> node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a node represents the 'null' value.\"\n        },\n        {\n          \"name\": \"UntypedParameter\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Returns a parameter node for a given index.\"\n        },\n        {\n          \"name\": \"IsJSFunctionCall\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the current call descriptor is a JS function call.\"\n        },\n        {\n          \"name\": \"GetJSContextParameter\",\n          \"parameters\": [],\n          \"return_type\": \"TNode<Context>\",\n          \"logic\": \"Returns the context parameter node for a JS function call.\"\n        },\n        {\n          \"name\": \"HasDynamicJSParameterCount\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this CodeAssembler has dynamic JS parameter counts.\"\n        },\n        {\n          \"name\": \"DynamicJSParameterCount\",\n          \"parameters\": [],\n          \"return_type\": \"TNode<Uint16T>\",\n          \"logic\": \"Get the node that represents dynamic JS parameter counts.\"\n        },\n        {\n          \"name\": \"SetDynamicJSParameterCount\",\n          \"parameters\": [\n            \"TNode<Uint16T> parameter_count\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Set the node that represents dynamic JS parameter counts.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Object> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a value (single) from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Object> value1\",\n            \"TNode<Object> value2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns two values from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Object> value1\",\n            \"TNode<Object> value2\",\n            \"TNode<Object> value3\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns three values from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Int32T> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns an Int32 value from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Uint32T> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns an Uint32 value from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<WordT> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a WordT value from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Float32T> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a Float32 value from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Float64T> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a Float64 value from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<WordT> value1\",\n            \"TNode<WordT> value2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns two WordT values from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Word32T> value1\",\n            \"TNode<Word32T> value2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns two Word32T values from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<WordT> value1\",\n            \"TNode<Object> value2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a WordT value and an object from the generated code.\"\n        },\n        {\n          \"name\": \"Return\",\n          \"parameters\": [\n            \"TNode<Word32T> value1\",\n            \"TNode<Object> value2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a Word32T value and an Object from the generated code.\"\n        },\n        {\n          \"name\": \"PopAndReturn\",\n          \"parameters\": [\n            \"Node* pop\",\n            \"Node* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pops a value from the stack and then returns a single value.\"\n        },\n        {\n          \"name\": \"PopAndReturn\",\n          \"parameters\": [\n            \"Node* pop\",\n            \"Node* value1\",\n            \"Node* value2\",\n            \"Node* value3\",\n            \"Node* value4\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pops a value from the stack and then returns four values.\"\n        },\n        {\n          \"name\": \"ReturnIf\",\n          \"parameters\": [\n            \"TNode<BoolT> condition\",\n            \"TNode<Object> value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Returns a value if a given condition is met.\"\n        },\n        {\n          \"name\": \"AbortCSADcheck\",\n          \"parameters\": [\n            \"Node* message\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Aborts a CSA check and reports a given message.\"\n        },\n        {\n          \"name\": \"DebugBreak\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Inserts a debugger breakpoint.\"\n        },\n        {\n          \"name\": \"Unreachable\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Marks a code path as unreachable (triggers debug break and unreachable marker).\"\n        },\n        {\n          \"name\": \"EmitComment\",\n          \"parameters\": [\n            \"std::string str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits a comment into the generated code (if code comments are enabled).\"\n        },\n        {\n          \"name\": \"StaticAssert\",\n          \"parameters\": [\n            \"TNode<BoolT> value\",\n            \"const char* source\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a static assertion (compile-time) based on a boolean value.\"\n        },\n        {\n          \"name\": \"SetSourcePosition\",\n          \"parameters\": [\n            \"const char* file\",\n            \"int line\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the current source position (file, line) in the raw assembler.\"\n        },\n        {\n          \"name\": \"PushSourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes the current source position onto the stack.\"\n        },\n        {\n          \"name\": \"PopSourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Pops the source position from the stack.\"\n        },\n        {\n          \"name\": \"GetMacroSourcePositionStack\",\n          \"parameters\": [],\n          \"return_type\": \"const std::vector<FileAndLine>&\",\n          \"logic\": \"Gets a stack of FileAndLine information related to macros.\"\n        },\n        {\n          \"name\": \"Bind\",\n          \"parameters\": [\n            \"Label* label\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Binds a label to the current code position.\"\n        },\n        {\n          \"name\": \"Bind\",\n          \"parameters\": [\n            \"Label* label\",\n            \"AssemblerDebugInfo debug_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Binds a label to the current code position with debug information (DEBUG mode only).\"\n        },\n        {\n          \"name\": \"LoadFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"TNode<RawPtrT>\",\n          \"logic\": \"Loads the current frame pointer.\"\n        },\n        {\n          \"name\": \"LoadParentFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"TNode<RawPtrT>\",\n          \"logic\": \"Loads the parent frame pointer.\"\n        },\n        {\n          \"name\": \"LoadStackPointer\",\n          \"parameters\": [],\n          \"return_type\": \"TNode<RawPtrT>\",\n          \"logic\": \"Loads the stack pointer.\"\n        },\n        {\n          \"name\": \"SetStackPointer\",\n          \"parameters\": [\n            \"TNode<RawPtrT> ptr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the stack pointer.\"\n        },\n        {\n          \"name\": \"LoadPointerFromRootRegister\",\n          \"parameters\": [\n            \"TNode<IntPtrT> offset\"\n          ],\n          \"return_type\": \"TNode<RawPtrT>\",\n          \"logic\": \"Loads a pointer from the root register at a given offset.\"\n        },\n        {\n          \"name\": \"LoadUint8FromRootRegister\",\n          \"parameters\": [\n            \"TNode<IntPtrT> offset\"\n          ],\n          \"return_type\": \"TNode<Uint8T>\",\n          \"logic\": \"Loads a Uint8 from the root register at a given offset.\"\n        },\n        {\n          \"name\": \"StackSlotPtr\",\n          \"parameters\": [\n            \"int size\",\n            \"int alignment\"\n          ],\n          \"return_type\": \"TNode<RawPtrT>\",\n          \"logic\": \"Creates a pointer to a stack slot with a specified size and alignment.\"\n        },\n        {\n          \"name\": \"IntPtrEqual\",\n          \"parameters\": [\n            \"TNode<WordT> left\",\n            \"TNode<WordT> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for integer pointer equality.\"\n        },\n        {\n          \"name\": \"WordEqual\",\n          \"parameters\": [\n            \"TNode<WordT> left\",\n            \"TNode<WordT> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for word equality.\"\n        },\n        {\n          \"name\": \"WordNotEqual\",\n          \"parameters\": [\n            \"TNode<WordT> left\",\n            \"TNode<WordT> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for word inequality.\"\n        },\n        {\n          \"name\": \"Word32Equal\",\n          \"parameters\": [\n            \"TNode<Word32T> left\",\n            \"TNode<Word32T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for 32-bit word equality.\"\n        },\n        {\n          \"name\": \"Word32NotEqual\",\n          \"parameters\": [\n            \"TNode<Word32T> left\",\n            \"TNode<Word32T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for 32-bit word inequality.\"\n        },\n        {\n          \"name\": \"Word64Equal\",\n          \"parameters\": [\n            \"TNode<Word64T> left\",\n            \"TNode<Word64T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for 64-bit word equality.\"\n        },\n        {\n          \"name\": \"Word64NotEqual\",\n          \"parameters\": [\n            \"TNode<Word64T> left\",\n            \"TNode<Word64T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Checks for 64-bit word inequality.\"\n        },\n        {\n          \"name\": \"ChangeUint32ToWord\",\n          \"parameters\": [\n            \"TNode<Word32T> value\"\n          ],\n          \"return_type\": \"TNode<UintPtrT>\",\n          \"logic\": \"Changes a Word32T value to UintPtrT, considering architecture.\"\n        },\n        {\n          \"name\": \"ChangeInt32ToIntPtr\",\n          \"parameters\": [\n            \"TNode<Word32T> value\"\n          ],\n          \"return_type\": \"TNode<IntPtrT>\",\n          \"logic\": \"Changes a Word32T value to IntPtrT, considering architecture.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToIntPtr\",\n          \"parameters\": [\n            \"TNode<Float64T> value\"\n          ],\n          \"return_type\": \"TNode<IntPtrT>\",\n          \"logic\": \"Changes Float64T to IntPtrT, depending on the architecture.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToUintPtr\",\n          \"parameters\": [\n            \"TNode<Float64T> value\"\n          ],\n          \"return_type\": \"TNode<UintPtrT>\",\n          \"logic\": \"Changes Float64T to UintPtrT, depending on the architecture.\"\n        },\n        {\n          \"name\": \"ChangeUintPtrToFloat64\",\n          \"parameters\": [\n            \"TNode<UintPtrT> value\"\n          ],\n          \"return_type\": \"TNode<Float64T>\",\n          \"logic\": \"Changes UintPtrT to Float64T, depending on the architecture.\"\n        },\n        {\n          \"name\": \"RoundIntPtrToFloat64\",\n          \"parameters\": [\n            \"Node* value\"\n          ],\n          \"return_type\": \"TNode<Float64T>\",\n          \"logic\": \"Rounds IntPtr to Float64.\"\n        },\n        {\n          \"name\": \"TruncateFloat32ToInt32\",\n          \"parameters\": [\n            \"TNode<Float32T> value\"\n          ],\n          \"return_type\": \"TNode<Int32T>\",\n          \"logic\": \"Truncates Float32T to Int32T.\"\n        },\n        {\n          \"name\": \"TruncateFloat64ToInt64\",\n          \"parameters\": [\n            \"TNode<Float64T> value\"\n          ],\n          \"return_type\": \"TNode<Int64T>\",\n          \"logic\": \"Truncates Float64T to Int64T.\"\n        },\n        {\n          \"name\": \"Load\",\n          \"parameters\": [\n            \"MachineType type\",\n            \"Node* base\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Loads a value of a given machine type from a given base address.\"\n        },\n        {\n          \"name\": \"Load\",\n          \"parameters\": [\n            \"MachineType type\",\n            \"Node* base\",\n            \"Node* offset\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Loads a value of a given machine type from a given base address with offset.\"\n        },\n        {\n          \"name\": \"LoadFullTagged\",\n          \"parameters\": [\n            \"Node* base\"\n          ],\n          \"return_type\": \"TNode<Object>\",\n          \"logic\": \"Loads a full tagged value from a given base address.\"\n        },\n        {\n          \"name\": \"LoadFullTagged\",\n          \"parameters\": [\n            \"Node* base\",\n            \"TNode"
}