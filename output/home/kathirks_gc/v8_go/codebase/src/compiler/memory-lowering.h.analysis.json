{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/memory-lowering.h",
  "imports": [
    "src/compiler/graph-assembler.h",
    "src/compiler/graph-reducer.h"
  ],
  "classes": [
    {
      "name": "MemoryLowering",
      "properties": [
        "allocate_operator_",
        "wasm_instance_node_",
        "isolate_",
        "zone_",
        "graph_",
        "common_",
        "machine_",
        "graph_assembler_",
        "is_wasm_",
        "allocation_folding_",
        "write_barrier_assert_failed_",
        "function_debug_name_"
      ],
      "methods": [
        {
          "name": "MemoryLowering",
          "parameters": [
            "JSGraph* jsgraph",
            "Zone* zone",
            "JSGraphAssembler* graph_assembler",
            "bool is_wasm",
            "AllocationFolding allocation_folding",
            "WriteBarrierAssertFailedCallback callback",
            "const char* function_debug_name"
          ],
          "return_type": "void",
          "logic": "Constructor for MemoryLowering class. Initializes member variables and sets up the lowering process."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer, which is \"MemoryReducer\"."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "The main entry point for reducing a node. Determines the specific reduction based on the node's operator."
        },
        {
          "name": "ReduceAllocateRaw",
          "parameters": [
            "Node* node",
            "AllocationType allocation_type",
            "AllocationState const** state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an AllocateRaw node, considering allocation type and state for possible allocation folding."
        },
        {
          "name": "ReduceLoadFromObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadFromObject node, potentially inserting guards and converting to machine loads."
        },
        {
          "name": "ReduceLoadElement",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadElement node, converting it to a machine load with appropriate index calculation."
        },
        {
          "name": "ReduceLoadField",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadField node, converting it to a machine load."
        },
        {
          "name": "ReduceStoreToObject",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreToObject node, inserting write barriers if necessary and converting to machine stores."
        },
        {
          "name": "ReduceStoreElement",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreElement node, converting it to a machine store with appropriate index calculation and inserting write barriers."
        },
        {
          "name": "ReduceStoreField",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreField node, inserting write barriers if necessary and converting to machine stores."
        },
        {
          "name": "ReduceStore",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a generic Store node, inserting write barriers if necessary and converting to machine stores."
        },
        {
          "name": "ReduceAllocateRaw",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an AllocateRaw node, converting it to machine-level allocation operations."
        },
        {
          "name": "ComputeWriteBarrierKind",
          "parameters": [
            "Node* node",
            "Node* object",
            "Node* value",
            "AllocationState const* state",
            "WriteBarrierKind"
          ],
          "return_type": "WriteBarrierKind",
          "logic": "Determines the appropriate write barrier kind based on object and value types."
        },
        {
          "name": "ReduceLoadExternalPointerField",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadExternalPointerField node."
        },
        {
          "name": "ReduceLoadBoundedSize",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadBoundedSize node."
        },
        {
          "name": "ReduceLoadMap",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadMap node."
        },
        {
          "name": "ComputeIndex",
          "parameters": [
            "ElementAccess const& access",
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Computes the index for element access based on the access information."
        },
        {
          "name": "EnsureAllocateOperator",
          "parameters": [],
          "return_type": "void",
          "logic": "Ensures that the allocate operator is initialized."
        },
        {
          "name": "GetWasmInstanceNode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Retrieves the WASM instance node."
        },
        {
          "name": "AlignToAllocationAlignment",
          "parameters": [
            "Node* address"
          ],
          "return_type": "Node*",
          "logic": "Aligns the memory address according to kObjectAlignment8GbHeap when the V8_COMPRESS_POINTERS_8GB is set."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph associated with this lowering."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate associated with this lowering."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone associated with this lowering."
        },
        {
          "name": "graph_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the graph's zone."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder associated with this lowering."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the MachineOperatorBuilder associated with this lowering."
        },
        {
          "name": "gasm",
          "parameters": [],
          "return_type": "JSGraphAssembler*",
          "logic": "Returns the JSGraphAssembler associated with this lowering."
        }
      ]
    },
    {
      "name": "AllocationState",
      "properties": [
        "group_",
        "size_",
        "top_",
        "effect_"
      ],
      "methods": [
        {
          "name": "Empty",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "AllocationState const*",
          "logic": "Returns an empty AllocationState, indicating no allocation has occurred yet."
        },
        {
          "name": "Closed",
          "parameters": [
            "AllocationGroup* group",
            "Node* effect",
            "Zone* zone"
          ],
          "return_type": "AllocationState const*",
          "logic": "Returns an AllocationState indicating that an allocation group is closed."
        },
        {
          "name": "Open",
          "parameters": [
            "AllocationGroup* group",
            "intptr_t size",
            "Node* top",
            "Node* effect",
            "Zone* zone"
          ],
          "return_type": "AllocationState const*",
          "logic": "Returns an AllocationState indicating that an allocation group is open."
        },
        {
          "name": "IsYoungGenerationAllocation",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the allocation is in the young generation."
        },
        {
          "name": "group",
          "parameters": [],
          "return_type": "AllocationGroup*",
          "logic": "Returns the AllocationGroup associated with this allocation state."
        },
        {
          "name": "top",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the top node of the allocation."
        },
        {
          "name": "effect",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the effect node representing the allocation."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "intptr_t",
          "logic": "Returns the size of the allocated object."
        }
      ]
    },
    {
      "name": "AllocationGroup",
      "properties": [],
      "methods": []
    }
  ],
  "functions": []
}