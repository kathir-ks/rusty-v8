{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/typed-optimization.cc",
  "imports": [
    "src/compiler/typed-optimization.h",
    "<optional>",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/js-graph.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-properties.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/type-cache.h",
    "src/execution/isolate-inl.h"
  ],
  "classes": [
    {
      "name": "TypedOptimization",
      "properties": [
        "dependencies_",
        "jsgraph_",
        "broker_",
        "true_type_",
        "false_type_",
        "type_cache_"
      ],
      "methods": [
        {
          "name": "TypedOptimization",
          "parameters": [
            "Editor* editor",
            "CompilationDependencies* dependencies",
            "JSGraph* jsgraph",
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the TypedOptimization reducer with the given editor, dependencies, JSGraph, and JSHeapBroker."
        },
        {
          "name": "~TypedOptimization",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a given node based on its opcode. This is the main entry point for the typed optimization reducer, and it dispatches to specific reduction methods based on the node's type."
        },
        {
          "name": "ReduceConvertReceiver",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a ConvertReceiver node based on the type of its input. If the input is already a receiver, it's replaced with the input. If the input is NullOrUndefined, it's replaced with the global proxy."
        },
        {
          "name": "ReduceCheckHeapObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckHeapObject node.  If the input is known to be a heap object, the check is removed."
        },
        {
          "name": "ReduceMaybeGrowFastElements",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a MaybeGrowFastElements node by adding a CheckBounds node or removing the node if the index is known to be within bounds."
        },
        {
          "name": "ReduceCheckBounds",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckBounds node by removing certain conversions depending on types."
        },
        {
          "name": "ReduceCheckNotTaggedHole",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckNotTaggedHole node. If the input is known not to be a tagged hole, the check is removed."
        },
        {
          "name": "ReduceCheckMaps",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckMaps node based on the stability of the object's map. If the object's map is stable and matches one of the expected maps, and that map is not allowed to transition, the check is removed."
        },
        {
          "name": "ReduceTransitionElementsKindOrCheckMap",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TransitionElementsKindOrCheckMap node based on the stability of the object's map. If the object's map is stable and matches the target map, the check is removed."
        },
        {
          "name": "ReduceCheckNumber",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckNumber node. If the input is known to be a number, the check is removed."
        },
        {
          "name": "ReduceCheckNumberFitsInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckNumberFitsInt32 node. If the input is known to be a signed 32-bit integer, the check is removed."
        },
        {
          "name": "ReduceCheckString",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckString node. If the input is known to be a string, the check is removed."
        },
        {
          "name": "ReduceCheckStringOrStringWrapper",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckStringOrStringWrapper node. If the input is known to be a string or string wrapper, the check is removed."
        },
        {
          "name": "ReduceCheckEqualsInternalizedString",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckEqualsInternalizedString node if the val and exp types match."
        },
        {
          "name": "ReduceCheckEqualsSymbol",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckEqualsSymbol node if the val and exp types match."
        },
        {
          "name": "ReduceLoadField",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadField node if the field being loaded is the map of a stable object. The LoadField is replaced with the stable map constant."
        },
        {
          "name": "ReduceNumberFloor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberFloor node. If the input is known to be an integer, minus zero, or NaN, the floor operation is removed. Attempts to reduce NumberFloor(NumberDivide) to Unsigned32Divide."
        },
        {
          "name": "ReduceNumberRoundop",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberCeil/Round/Trunc node. If the input is known to be an integer, minus zero, or NaN, the operation is removed."
        },
        {
          "name": "ReduceNumberSilenceNaN",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberSilenceNaN node. If the input is an ordered number, the operation is removed."
        },
        {
          "name": "ReduceNumberToUint8Clamped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberToUint8Clamped node. If the input is already a uint8, the operation is removed."
        },
        {
          "name": "ReducePhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Phi node by refining its type based on the types of its inputs. This tries to narrow the type."
        },
        {
          "name": "ReduceReferenceEqual",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a ReferenceEqual node. If the inputs' types are incompatible, it returns false. Tries to further reduce if types are boolean."
        },
        {
          "name": "TryReduceStringComparisonOfStringFromSingleCharCodeToConstant",
          "parameters": [
            "Node* comparison",
            "StringRef string",
            "bool inverted"
          ],
          "return_type": "Reduction",
          "logic": "Helper function for ReduceStringComparison. Try to reduces a string comparison of the form String.fromCharCode(x) {comparison} {constant} if inverted is false, and {constant} {comparison} String.fromCharCode(x) if inverted is true. Comparison can be resolved statically."
        },
        {
          "name": "TryReduceStringComparisonOfStringFromSingleCharCode",
          "parameters": [
            "Node* comparison",
            "Node* from_char_code",
            "Type constant_type",
            "bool inverted"
          ],
          "return_type": "Reduction",
          "logic": "Helper function for ReduceStringComparison. Try to reduces a string comparison of the form String.fromCharCode(x) {comparison} {constant} if inverted is false, and {constant} {comparison} String.fromCharCode(x) if inverted is true."
        },
        {
          "name": "ReduceStringComparison",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StringEqual, StringLessThan, or StringLessThanOrEqual node.  Tries to statically resolve comparisons involving String.fromCharCode and constants.  Otherwise, simplifies based on types."
        },
        {
          "name": "ReduceStringLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StringLength node.  If the input is a constant string, returns the constant length.  If the input is a StringConcat, returns the concatenated length. If the input is StringFromSingleCharCode, returns 1."
        },
        {
          "name": "ReduceSameValue",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a SameValue node.  If the inputs are the same node, it returns true. Simplifies to ReferenceEqual, StringEqual, NumberEqual, or ObjectIsMinusZero based on types. Simplifies to ObjectIsNaN if either input is NaN or MinusZero."
        },
        {
          "name": "ReduceSelect",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Select node. If the condition is known to be true or false, it returns the corresponding value. If the true and false values are true and false, respectively, it returns the condition.  This function also attempts to narrow the type of the select node."
        },
        {
          "name": "ReduceSpeculativeToNumber",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a SpeculativeToNumber node. If the input is known to be a number, the operation is removed."
        },
        {
          "name": "ReduceTypeOf",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TypeOf node. If the input type is known, it returns the appropriate constant string (e.g., \"number\", \"string\", etc.)."
        },
        {
          "name": "ReduceTypedArrayLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TypedArrayLength node. If the input is a known typed array, the length is constant-folded."
        },
        {
          "name": "ReduceToBoolean",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a ToBoolean node based on the input type. Simplifies based on types and replaces with BooleanNot, NumberEqual, ReferenceEqual, ObjectIsUndetectable."
        },
        {
          "name": "ReduceSpeculativeNumberAdd",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a SpeculativeNumberAdd node. If both inputs are known to be numbers or oddballs, converts plain primitives to numbers and replaces the node with a NumberAdd node."
        },
        {
          "name": "ReduceJSToNumberInput",
          "parameters": [
            "Node* input"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSToNumber operation. Constant folds to number or NaN when String, Undefined, and Null is input. Removes when Number is input."
        },
        {
          "name": "ConvertPlainPrimitiveToNumber",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Converts a plain primitive to a number using JSToNumber node unless the input is already a Number type."
        },
        {
          "name": "ReduceSpeculativeNumberBinop",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative number binary operation node.  If both inputs are numbers or oddballs, converts plain primitives to numbers and replaces the node with the corresponding non-speculative number operation node (e.g., NumberAdd, NumberSubtract, etc.)."
        },
        {
          "name": "ReduceSpeculativeNumberComparison",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative number comparison node. If both inputs are known to be Signed32 or Unsigned32, replaces the node with the corresponding non-speculative number comparison operation node (e.g., NumberEqual, NumberLessThan, etc.)."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns the factory from the JSGraph's isolate."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the graph from the JSGraph."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder from the JSGraph."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetStableMapFromObjectType",
      "parameters": [
        "JSHeapBroker* broker",
        "Type object_type"
      ],
      "return_type": "OptionalMapRef",
      "logic": "Returns the stable map from an object type, if it's a HeapConstant and the map is stable."
    },
    {
      "name": "ResolveSameValueRenames",
      "parameters": [
        "Node* node"
      ],
      "return_type": "Node*",
      "logic": "Resolves SameValue renames by traversing through CheckHeapObject, CheckNumber, CheckNumberFitsInt32, CheckSmi, FinishRegion, and TypeGuard nodes to find the ultimate input. Returns the node at the end of the chain or the original node if no such chain exists."
    },
    {
      "name": "CheckMapsHelper",
      "parameters": [
        "OptionalMapRef object_map",
        "ZoneRefSet<Map> maps",
        "CompilationDependencies* dependencies"
      ],
      "return_type": "bool",
      "logic": "A helper function for CheckMaps. It verifies if the object map matches one of the input maps. If matched, depend on stable map if it can transition."
    },
    {
      "name": "NumberComparisonFor",
      "parameters": [
        "const Operator* op"
      ],
      "return_type": "const Operator*",
      "logic": "Returns simplified comparison operator from speculative operator."
    },
    {
      "name": "BothAre",
      "parameters": [
        "Type t1",
        "Type t2",
        "Type t3"
      ],
      "return_type": "bool",
      "logic": "Checks if both type t1 and t2 Is(t3)."
    },
    {
      "name": "NeitherCanBe",
      "parameters": [
        "Type t1",
        "Type t2",
        "Type t3"
      ],
      "return_type": "bool",
      "logic": "Checks if Neither type t1 or t2 Maybe(t3)."
    },
    {
      "name": "NumberOpFromSpeculativeNumberOp",
      "parameters": [
        "SimplifiedOperatorBuilder* simplified",
        "const Operator* op"
      ],
      "return_type": "const Operator*",
      "logic": "Returns the simplified number operator corresponding to a speculative number operator."
    }
  ]
}