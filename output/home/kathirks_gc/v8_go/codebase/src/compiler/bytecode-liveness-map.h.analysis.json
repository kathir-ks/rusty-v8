{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/bytecode-liveness-map.h",
  "imports": [
    "src/utils/bit-vector.h",
    "src/zone/zone.h",
    "<string>"
  ],
  "classes": [
    {
      "name": "BytecodeLivenessState",
      "properties": [
        "bit_vector_"
      ],
      "methods": [
        {
          "name": "BytecodeLivenessState",
          "parameters": [
            "int register_count",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the bit_vector_ with a size of register_count + 1."
        },
        {
          "name": "BytecodeLivenessState",
          "parameters": [
            "const BytecodeLivenessState&"
          ],
          "return_type": "void",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const BytecodeLivenessState&"
          ],
          "return_type": "BytecodeLivenessState&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "BytecodeLivenessState",
          "parameters": [
            "const BytecodeLivenessState& other",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Copy constructor that allocates a new BitVector in the provided zone."
        },
        {
          "name": "RegisterIsLive",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Checks if the register at the given index is live."
        },
        {
          "name": "AccumulatorIsLive",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the accumulator is live."
        },
        {
          "name": "Equals",
          "parameters": [
            "const BytecodeLivenessState& other"
          ],
          "return_type": "bool",
          "logic": "Compares this liveness state with another for equality."
        },
        {
          "name": "MarkRegisterLive",
          "parameters": [
            "int index"
          ],
          "return_type": "void",
          "logic": "Marks the register at the given index as live."
        },
        {
          "name": "MarkRegisterDead",
          "parameters": [
            "int index"
          ],
          "return_type": "void",
          "logic": "Marks the register at the given index as dead."
        },
        {
          "name": "MarkAccumulatorLive",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the accumulator as live."
        },
        {
          "name": "MarkAccumulatorDead",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the accumulator as dead."
        },
        {
          "name": "MarkAllLive",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks all registers and the accumulator as live."
        },
        {
          "name": "Union",
          "parameters": [
            "const BytecodeLivenessState& other"
          ],
          "return_type": "void",
          "logic": "Performs a union operation with another liveness state."
        },
        {
          "name": "UnionIsChanged",
          "parameters": [
            "const BytecodeLivenessState& other"
          ],
          "return_type": "bool",
          "logic": "Performs a union operation with another liveness state and returns true if the liveness state changed."
        },
        {
          "name": "CopyFrom",
          "parameters": [
            "const BytecodeLivenessState& other"
          ],
          "return_type": "void",
          "logic": "Copies the liveness state from another liveness state."
        },
        {
          "name": "register_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the register count (size of the bit vector - 1)."
        },
        {
          "name": "live_value_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of live values, including the accumulator."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "Iterator",
          "logic": "Returns an iterator to the beginning of the live register set."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "Iterator",
          "logic": "Returns an iterator to the end of the live register set."
        }
      ]
    },
    {
      "name": "BytecodeLivenessState::Iterator",
      "properties": [
        "it_"
      ],
      "methods": [
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "int",
          "logic": "Dereferences the iterator to get the register index (subtracting 1 to account for the accumulator)."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "void",
          "logic": "Increments the iterator."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const Iterator& other"
          ],
          "return_type": "bool",
          "logic": "Checks if the iterator is not equal to another iterator."
        }
      ]
    },
    {
      "name": "BytecodeLivenessMap",
      "properties": [
        "liveness_",
        "size_"
      ],
      "methods": [
        {
          "name": "BytecodeLivenessMap",
          "parameters": [
            "int bytecode_size",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Allocates an array of BytecodeLiveness structures."
        },
        {
          "name": "InsertNewLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "BytecodeLiveness&",
          "logic": "Inserts a new BytecodeLiveness structure at the given offset."
        },
        {
          "name": "GetLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "BytecodeLiveness&",
          "logic": "Returns a reference to the BytecodeLiveness structure at the given offset."
        },
        {
          "name": "GetLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "const BytecodeLiveness&",
          "logic": "Returns a const reference to the BytecodeLiveness structure at the given offset."
        },
        {
          "name": "GetInLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "BytecodeLivenessState*",
          "logic": "Returns a pointer to the in liveness state at the given offset."
        },
        {
          "name": "GetInLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "const BytecodeLivenessState*",
          "logic": "Returns a const pointer to the in liveness state at the given offset."
        },
        {
          "name": "GetOutLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "BytecodeLivenessState*",
          "logic": "Returns a pointer to the out liveness state at the given offset."
        },
        {
          "name": "GetOutLiveness",
          "parameters": [
            "int offset"
          ],
          "return_type": "const BytecodeLivenessState*",
          "logic": "Returns a const pointer to the out liveness state at the given offset."
        }
      ]
    },
    {
      "name": "BytecodeLiveness",
      "properties": [
        "in",
        "out"
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "ToString",
      "parameters": [
        "const BytecodeLivenessState& liveness"
      ],
      "return_type": "std::string",
      "logic": "Converts a BytecodeLivenessState to a string representation (implementation not in header)."
    }
  ]
}