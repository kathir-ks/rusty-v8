{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/frame-states.cc",
  "imports": [
    "src/compiler/frame-states.h",
    "<optional>",
    "src/base/hashing.h",
    "src/codegen/callable.h",
    "src/compiler/js-graph.h",
    "src/compiler/node.h",
    "src/compiler/turbofan-graph.h",
    "src/handles/handles-inl.h",
    "src/objects/objects-inl.h",
    "src/wasm/value-type.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "hash_value",
      "parameters": [
        "OutputFrameStateCombine const& sc"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value for an OutputFrameStateCombine object based on its parameter_ member."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "OutputFrameStateCombine const& sc"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to provide a string representation of an OutputFrameStateCombine object, either 'Ignore' or 'PokeAt(parameter_)'."
    },
    {
      "name": "operator==",
      "parameters": [
        "FrameStateFunctionInfo const& lhs",
        "FrameStateFunctionInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Compares two FrameStateFunctionInfo objects for equality. Checks type, parameter count, max arguments, local count, shared info, wasm specific data and bytecode array."
    },
    {
      "name": "operator==",
      "parameters": [
        "FrameStateInfo const& lhs",
        "FrameStateInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Compares two FrameStateInfo objects for equality. Checks type, bailout id, state combine and function info."
    },
    {
      "name": "operator!=",
      "parameters": [
        "FrameStateInfo const& lhs",
        "FrameStateInfo const& rhs"
      ],
      "return_type": "bool",
      "logic": "Compares two FrameStateInfo objects for inequality, returning the opposite of the equality operator."
    },
    {
      "name": "hash_value",
      "parameters": [
        "FrameStateInfo const& info"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a FrameStateInfo object, using its type, bailout id, and state combine."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "FrameStateType type"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to provide a string representation of a FrameStateType enum value."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "FrameStateInfo const& info"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to provide a string representation of a FrameStateInfo object, including its type, bailout id, state combine, and brief shared function info."
    },
    {
      "name": "DeoptimizerParameterCountFor",
      "parameters": [
        "ContinuationFrameStateMode mode"
      ],
      "return_type": "uint8_t",
      "logic": "Returns the number of additional parameters added by the deoptimizer based on the ContinuationFrameStateMode (EAGER, LAZY, LAZY_WITH_CATCH)."
    },
    {
      "name": "CreateBuiltinContinuationFrameStateCommon",
      "parameters": [
        "JSGraph* jsgraph",
        "FrameStateType frame_type",
        "Builtin name",
        "Node* closure",
        "Node* context",
        "Node** parameters",
        "int parameter_count",
        "Node* outer_frame_state",
        "Handle<SharedFunctionInfo> shared",
        "const wasm::CanonicalSig* signature"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState node for builtin continuations, handling parameters, context, closure, and shared function info. It also handles optional wasm signatures."
    },
    {
      "name": "CreateStubBuiltinContinuationFrameState",
      "parameters": [
        "JSGraph* jsgraph",
        "Builtin name",
        "Node* context",
        "Node* const* parameters",
        "int parameter_count",
        "Node* outer_frame_state",
        "ContinuationFrameStateMode mode",
        "const wasm::CanonicalSig* signature"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState node for stub builtin continuations. Constructs the parameter list based on the call interface descriptor and continuation frame state mode."
    },
    {
      "name": "CreateJSWasmCallBuiltinContinuationFrameState",
      "parameters": [
        "JSGraph* jsgraph",
        "Node* context",
        "Node* outer_frame_state",
        "const wasm::CanonicalSig* signature"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState for a JavaScript to WebAssembly call builtin continuation, handling the return type."
    },
    {
      "name": "CreateJavaScriptBuiltinContinuationFrameState",
      "parameters": [
        "JSGraph* jsgraph",
        "SharedFunctionInfoRef shared",
        "Builtin name",
        "Node* target",
        "Node* context",
        "Node* const* stack_parameters",
        "int stack_parameter_count",
        "Node* outer_frame_state",
        "ContinuationFrameStateMode mode"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState node for JavaScript builtin continuations, handling target, context, and stack parameters. It's used for lazy deoptimization."
    },
    {
      "name": "CreateGenericLazyDeoptContinuationFrameState",
      "parameters": [
        "JSGraph* graph",
        "SharedFunctionInfoRef shared",
        "Node* target",
        "Node* context",
        "Node* receiver",
        "Node* outer_frame_state"
      ],
      "return_type": "FrameState",
      "logic": "Creates a FrameState node for a generic lazy deoptimization continuation, handling target, context, and receiver."
    },
    {
      "name": "CreateInlinedApiFunctionFrameState",
      "parameters": [
        "JSGraph* graph",
        "SharedFunctionInfoRef shared",
        "Node* target",
        "Node* context",
        "Node* receiver",
        "Node* outer_frame_state"
      ],
      "return_type": "Node*",
      "logic": "Creates or returns the outer_frame_state for inlined API functions. In current implementation, it simply returns the outer_frame_state."
    },
    {
      "name": "CloneFrameState",
      "parameters": [
        "JSGraph* jsgraph",
        "FrameState frame_state",
        "OutputFrameStateCombine changed_state_combine"
      ],
      "return_type": "FrameState",
      "logic": "Clones an existing FrameState node with a potentially changed OutputFrameStateCombine."
    }
  ]
}