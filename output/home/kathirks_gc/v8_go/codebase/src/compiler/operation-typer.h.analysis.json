{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/operation-typer.h",
  "imports": [
    "src/base/flags.h",
    "src/compiler/opcodes.h",
    "src/compiler/turbofan-types.h"
  ],
  "classes": [
    {
      "name": "OperationTyper",
      "properties": [
        "zone_",
        "cache_",
        "infinity_",
        "minus_infinity_",
        "singleton_NaN_string_",
        "singleton_zero_string_",
        "singleton_false_",
        "singleton_true_",
        "signed32ish_",
        "unsigned32ish_",
        "singleton_empty_string_",
        "truish_",
        "falsish_"
      ],
      "methods": [
        {
          "name": "OperationTyper",
          "parameters": [
            "JSHeapBroker* broker",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for OperationTyper, initializes the object with a JSHeapBroker and a Zone."
        },
        {
          "name": "Merge",
          "parameters": [
            "Type left",
            "Type right"
          ],
          "return_type": "Type",
          "logic": "Merges two types, likely used in Phi node typing."
        },
        {
          "name": "ToPrimitive",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to its primitive form."
        },
        {
          "name": "ToNumber",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to a number type."
        },
        {
          "name": "ToNumberConvertBigInt",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to a number type, allowing BigInt conversion."
        },
        {
          "name": "ToBigInt",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to a BigInt type."
        },
        {
          "name": "ToBigIntConvertNumber",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to a BigInt type, allowing Number conversion."
        },
        {
          "name": "ToNumeric",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to a numeric type (Number or BigInt)."
        },
        {
          "name": "ToBoolean",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to a boolean type."
        },
        {
          "name": "WeakenRange",
          "parameters": [
            "Type current_range",
            "Type previous_range"
          ],
          "return_type": "Type",
          "logic": "Weakens the range of a type based on a previous range."
        },
        {
          "name": "NumberAbs",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform absolute value operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberAcos",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform arccosine operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberAsin",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform arcsine operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberAtan",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform arctangent operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberCeil",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform ceiling operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberCos",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform cosine operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberExp",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform exponential operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberFloor",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform floor operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberLog",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform logarithm operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberSign",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform sign operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberSin",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform sine operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberSqrt",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform square root operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberTan",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform tangent operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberTrunc",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform truncate operation on Number type. (Generated by macro)"
        },
        {
          "name": "BigIntAbs",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform absolute value operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberAbs",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative absolute value operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberCeil",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative ceiling operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberFloor",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative floor operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberRound",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative round operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberTrunc",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative truncate operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntAbs",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative absolute value operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "ConvertReceiver",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts the receiver type."
        },
        {
          "name": "NumberAdd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform addition operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberSubtract",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform subtraction operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberMultiply",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform multiplication operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberDivide",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform division operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberModulus",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform modulus operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberBitwiseAnd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform bitwise AND operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberBitwiseOr",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform bitwise OR operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberBitwiseXor",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform bitwise XOR operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberShiftLeft",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform left shift operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberShiftRight",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform right shift operation on Number type. (Generated by macro)"
        },
        {
          "name": "NumberShiftRightLogical",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform unsigned right shift operation on Number type. (Generated by macro)"
        },
        {
          "name": "BigIntAdd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform addition operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntSubtract",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform subtraction operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntMultiply",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform multiplication operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntDivide",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform division operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntModulus",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform modulus operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntBitwiseAnd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform bitwise AND operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntBitwiseOr",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform bitwise OR operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntBitwiseXor",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform bitwise XOR operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntShiftLeft",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform left shift operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "BigIntShiftRight",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform right shift operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberAdd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative addition operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberSubtract",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative subtraction operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberMultiply",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative multiplication operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberDivide",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative division operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberModulus",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative modulus operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberBitwiseAnd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative bitwise AND operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberBitwiseOr",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative bitwise OR operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberBitwiseXor",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative bitwise XOR operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberShiftLeft",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative left shift operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberShiftRight",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative right shift operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeNumberShiftRightLogical",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative unsigned right shift operation on Number type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntAdd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative addition operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntSubtract",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative subtraction operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntMultiply",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative multiplication operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntDivide",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative division operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntModulus",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative modulus operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntBitwiseAnd",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative bitwise AND operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntBitwiseOr",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative bitwise OR operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntBitwiseXor",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative bitwise XOR operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntShiftLeft",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative left shift operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "SpeculativeBigIntShiftRight",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform speculative right shift operation on BigInt type. (Generated by macro)"
        },
        {
          "name": "Int32Add",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit integer addition operation. (Generated by macro)"
        },
        {
          "name": "Int32LessThanOrEqual",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit integer less than or equal comparison. (Generated by macro)"
        },
        {
          "name": "Int64Add",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit integer addition operation. (Generated by macro)"
        },
        {
          "name": "Int32Sub",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit integer subtraction operation. (Generated by macro)"
        },
        {
          "name": "Int64Sub",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit integer subtraction operation. (Generated by macro)"
        },
        {
          "name": "Load",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform load operation. (Generated by macro)"
        },
        {
          "name": "Uint32Div",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit unsigned integer division operation. (Generated by macro)"
        },
        {
          "name": "Uint64Div",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit unsigned integer division operation. (Generated by macro)"
        },
        {
          "name": "Uint32LessThan",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit unsigned integer less than comparison. (Generated by macro)"
        },
        {
          "name": "Uint32LessThanOrEqual",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit unsigned integer less than or equal comparison. (Generated by macro)"
        },
        {
          "name": "Uint64LessThan",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit unsigned integer less than comparison. (Generated by macro)"
        },
        {
          "name": "Uint64LessThanOrEqual",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit unsigned integer less than or equal comparison. (Generated by macro)"
        },
        {
          "name": "Word32And",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit word-wise AND operation. (Generated by macro)"
        },
        {
          "name": "Word32Equal",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit word-wise equality comparison. (Generated by macro)"
        },
        {
          "name": "Word32Or",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit word-wise OR operation. (Generated by macro)"
        },
        {
          "name": "Word32Shl",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit word-wise left shift operation. (Generated by macro)"
        },
        {
          "name": "Word32Shr",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 32-bit word-wise right shift operation. (Generated by macro)"
        },
        {
          "name": "Word64And",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit word-wise AND operation. (Generated by macro)"
        },
        {
          "name": "Word64Shl",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit word-wise left shift operation. (Generated by macro)"
        },
        {
          "name": "Word64Shr",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Abstract method to perform 64-bit word-wise right shift operation. (Generated by macro)"
        },
        {
          "name": "ChangeUint32ToUint64",
          "parameters": [
            "Type input"
          ],
          "return_type": "Type",
          "logic": "Changes a uint32 type to a uint64 type."
        },
        {
          "name": "SameValue",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Performs a SameValue comparison between two types."
        },
        {
          "name": "SameValueNumbersOnly",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Performs a SameValue comparison between two types, considering only numbers."
        },
        {
          "name": "StrictEqual",
          "parameters": [
            "Type lhs",
            "Type rhs"
          ],
          "return_type": "Type",
          "logic": "Performs a StrictEqual comparison between two types."
        },
        {
          "name": "CheckBounds",
          "parameters": [
            "Type index",
            "Type length"
          ],
          "return_type": "Type",
          "logic": "Checks if an index is within the bounds of a length."
        },
        {
          "name": "CheckFloat64Hole",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Checks if a Float64 type is a hole."
        },
        {
          "name": "CheckNumber",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Checks if a type is a number."
        },
        {
          "name": "CheckNumberFitsInt32",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Checks if a number type fits within an Int32."
        },
        {
          "name": "ConvertTaggedHoleToUndefined",
          "parameters": [
            "Type type"
          ],
          "return_type": "Type",
          "logic": "Converts a tagged hole type to undefined."
        },
        {
          "name": "TypeTypeGuard",
          "parameters": [
            "const Operator* sigma_op",
            "Type input"
          ],
          "return_type": "Type",
          "logic": "Performs a type guard based on the sigma operator."
        },
        {
          "name": "singleton_false",
          "parameters": [],
          "return_type": "Type",
          "logic": "Returns the singleton false type."
        },
        {
          "name": "singleton_true",
          "parameters": [],
          "return_type": "Type",
          "logic": "Returns the singleton true type."
        },
        {
          "name": "Invert",
          "parameters": [
            "ComparisonOutcome"
          ],
          "return_type": "ComparisonOutcome",
          "logic": "Inverts a ComparisonOutcome."
        },
        {
          "name": "Invert",
          "parameters": [
            "Type"
          ],
          "return_type": "Type",
          "logic": "Inverts a Type."
        },
        {
          "name": "FalsifyUndefined",
          "parameters": [
            "ComparisonOutcome"
          ],
          "return_type": "Type",
          "logic": "Falsifies a type to undefined, based on comparison outcome."
        },
        {
          "name": "Rangify",
          "parameters": [
            "Type"
          ],
          "return_type": "Type",
          "logic": "Converts a type to its range representation."
        },
        {
          "name": "AddRanger",
          "parameters": [
            "double lhs_min",
            "double lhs_max",
            "double rhs_min",
            "double rhs_max"
          ],
          "return_type": "Type",
          "logic": "Calculates the range after addition of two values."
        },
        {
          "name": "SubtractRanger",
          "parameters": [
            "double lhs_min",
            "double lhs_max",
            "double rhs_min",
            "double rhs_max"
          ],
          "return_type": "Type",
          "logic": "Calculates the range after subtraction of two values."
        },
        {
          "name": "MultiplyRanger",
          "parameters": [
            "double lhs_min",
            "double lhs_max",
            "double rhs_min",
            "double rhs_max"
          ],
          "return_type": "Type",
          "logic": "Calculates the range after multiplication of two values."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone."
        }
      ]
    }
  ],
  "functions": []
}