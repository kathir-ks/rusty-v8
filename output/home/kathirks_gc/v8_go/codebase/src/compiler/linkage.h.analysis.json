{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/linkage.h",
  "imports": [
    "<optional>",
    "src/base/compiler-specific.h",
    "src/base/flags.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/linkage-location.h",
    "src/codegen/machine-type.h",
    "src/codegen/register.h",
    "src/codegen/reglist.h",
    "src/codegen/signature.h",
    "src/common/globals.h",
    "src/compiler/frame.h",
    "src/compiler/globals.h",
    "src/compiler/operator.h",
    "src/execution/encoded-c-signature.h",
    "src/runtime/runtime.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "CallDescriptor",
      "properties": [
        "kind_",
        "tag_",
        "target_type_",
        "target_loc_",
        "location_sig_",
        "param_slot_count_",
        "return_slot_count_",
        "properties_",
        "callee_saved_registers_",
        "callee_saved_fp_registers_",
        "allocatable_registers_",
        "flags_",
        "stack_order_",
        "debug_name_",
        "signature_hash_",
        "gp_param_count_",
        "fp_param_count_"
      ],
      "methods": [
        {
          "name": "CallDescriptor",
          "parameters": [
            "Kind kind",
            "CodeEntrypointTag tag",
            "MachineType target_type",
            "LinkageLocation target_loc",
            "LocationSignature* location_sig",
            "size_t param_slot_count",
            "Operator::Properties properties",
            "RegList callee_saved_registers",
            "DoubleRegList callee_saved_fp_registers",
            "Flags flags",
            "const char* debug_name",
            "StackArgumentOrder stack_order",
            "const RegList allocatable_registers",
            "size_t return_slot_count",
            "uint64_t signature_hash"
          ],
          "return_type": "void",
          "logic": "Constructor for the CallDescriptor class, initializes its member variables."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "Kind",
          "logic": "Returns the kind of the call."
        },
        {
          "name": "tag",
          "parameters": [],
          "return_type": "CodeEntrypointTag",
          "logic": "Returns the entrypoint tag for the call."
        },
        {
          "name": "signature_hash",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the signature hash for the call."
        },
        {
          "name": "shifted_tag",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the shifted entrypoint tag for the call."
        },
        {
          "name": "IsCodeObjectCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is to a Code object."
        },
        {
          "name": "IsCFunctionCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is to a C function."
        },
        {
          "name": "IsJSFunctionCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is to a JSFunction."
        },
        {
          "name": "IsDirectWasmFunctionCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is a direct call to a WebAssembly function."
        },
        {
          "name": "IsIndirectWasmFunctionCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is an indirect call to a WebAssembly function."
        },
        {
          "name": "IsAnyWasmFunctionCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is either a direct or an indirect call to a WebAssembly function."
        },
        {
          "name": "IsWasmImportWrapper",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is to a WebAssembly import wrapper."
        },
        {
          "name": "IsWasmCapiFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is to a Wasm C API function."
        },
        {
          "name": "IsBuiltinPointerCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the call is to a builtin pointer."
        },
        {
          "name": "RequiresFrameAsIncoming",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this call requires a frame as incoming."
        },
        {
          "name": "RequiresEntrypointTagForCall",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this call requires an entrypoint tag."
        },
        {
          "name": "ReturnCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of return values from the call."
        },
        {
          "name": "ParameterCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of C parameters to the call."
        },
        {
          "name": "GPParameterCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of general purpose C parameters to the call."
        },
        {
          "name": "FPParameterCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of floating point C parameters to the call."
        },
        {
          "name": "ParameterSlotCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of stack parameter slots to the call."
        },
        {
          "name": "ReturnSlotCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of stack return value slots from the call."
        },
        {
          "name": "JSParameterCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of parameters to the JS function call."
        },
        {
          "name": "GetStackIndexFromSlot",
          "parameters": [
            "int slot_index"
          ],
          "return_type": "int",
          "logic": "Calculates stack index from slot index based on stack argument order."
        },
        {
          "name": "InputCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total number of inputs to this call."
        },
        {
          "name": "FrameStateCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of frame states for this call."
        },
        {
          "name": "flags",
          "parameters": [],
          "return_type": "Flags",
          "logic": "Returns the flags for the call."
        },
        {
          "name": "NeedsFrameState",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this call needs a frame state."
        },
        {
          "name": "InitializeRootRegister",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this call initializes the root register."
        },
        {
          "name": "NeedsCallerSavedRegisters",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if caller saved registers are needed."
        },
        {
          "name": "NeedsCallerSavedFPRegisters",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if caller saved FP registers are needed."
        },
        {
          "name": "IsTailCallForTierUp",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this call is a tail call for tier up."
        },
        {
          "name": "NoFunctionDescriptor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the function descriptor is not needed."
        },
        {
          "name": "GetReturnLocation",
          "parameters": [
            "size_t index"
          ],
          "return_type": "LinkageLocation",
          "logic": "Returns the location for the return value at the given index."
        },
        {
          "name": "GetInputLocation",
          "parameters": [
            "size_t index"
          ],
          "return_type": "LinkageLocation",
          "logic": "Returns the location for the input at the given index."
        },
        {
          "name": "GetMachineSignature",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "MachineSignature*",
          "logic": "Returns the machine signature for the call."
        },
        {
          "name": "GetReturnType",
          "parameters": [
            "size_t index"
          ],
          "return_type": "MachineType",
          "logic": "Returns the machine type of the return value at the given index."
        },
        {
          "name": "GetInputType",
          "parameters": [
            "size_t index"
          ],
          "return_type": "MachineType",
          "logic": "Returns the machine type of the input at the given index."
        },
        {
          "name": "GetParameterType",
          "parameters": [
            "size_t index"
          ],
          "return_type": "MachineType",
          "logic": "Returns the machine type of the parameter at the given index."
        },
        {
          "name": "GetStackArgumentOrder",
          "parameters": [],
          "return_type": "StackArgumentOrder",
          "logic": "Returns the stack argument order."
        },
        {
          "name": "properties",
          "parameters": [],
          "return_type": "Operator::Properties",
          "logic": "Returns the operator properties."
        },
        {
          "name": "CalleeSavedRegisters",
          "parameters": [],
          "return_type": "RegList",
          "logic": "Returns the callee-saved registers."
        },
        {
          "name": "CalleeSavedFPRegisters",
          "parameters": [],
          "return_type": "DoubleRegList",
          "logic": "Returns the callee-saved FP registers."
        },
        {
          "name": "debug_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the debug name."
        },
        {
          "name": "GetStackParameterDelta",
          "parameters": [
            "const CallDescriptor* tail_caller"
          ],
          "return_type": "int",
          "logic": "Calculates the difference in stack parameter slots between this and a tail caller."
        },
        {
          "name": "GetOffsetToFirstUnusedStackSlot",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates the offset to the first unused stack slot below parameters."
        },
        {
          "name": "GetOffsetToReturns",
          "parameters": [],
          "return_type": "int",
          "logic": "Calculates the offset to the area above the return slots on the stack."
        },
        {
          "name": "GetTaggedParameterSlots",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the tagged parameter slots."
        },
        {
          "name": "CanTailCall",
          "parameters": [
            "const CallDescriptor* callee"
          ],
          "return_type": "bool",
          "logic": "Determines if a tail call is possible to the given callee."
        },
        {
          "name": "CalculateFixedFrameSize",
          "parameters": [
            "CodeKind code_kind"
          ],
          "return_type": "int",
          "logic": "Calculates the fixed frame size."
        },
        {
          "name": "AllocatableRegisters",
          "parameters": [],
          "return_type": "RegList",
          "logic": "Returns the list of allocatable registers."
        },
        {
          "name": "HasRestrictedAllocatableRegisters",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if there are restricted allocatable registers."
        },
        {
          "name": "ToEncodedCSignature",
          "parameters": [],
          "return_type": "EncodedCSignature",
          "logic": "Converts to EncodedCSignature representation."
        },
        {
          "name": "ComputeParamCounts",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes parameter counts (GP and FP)."
        }
      ]
    },
    {
      "name": "Linkage",
      "properties": [
        "incoming_"
      ],
      "methods": [
        {
          "name": "Linkage",
          "parameters": [
            "CallDescriptor* incoming"
          ],
          "return_type": "void",
          "logic": "Constructor for the Linkage class, initializes its member variables."
        },
        {
          "name": "ComputeIncoming",
          "parameters": [
            "Zone* zone",
            "OptimizedCompilationInfo* info"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Computes the incoming call descriptor for a compilation unit."
        },
        {
          "name": "GetIncomingDescriptor",
          "parameters": [],
          "return_type": "CallDescriptor*",
          "logic": "Returns the call descriptor for incoming parameters and outgoing return values."
        },
        {
          "name": "GetJSCallDescriptor",
          "parameters": [
            "Zone* zone",
            "bool is_osr",
            "int parameter_count",
            "CallDescriptor::Flags flags",
            "Operator::Properties properties"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Returns a call descriptor for calls to JSFunctions."
        },
        {
          "name": "GetRuntimeCallDescriptor",
          "parameters": [
            "Zone* zone",
            "Runtime::FunctionId function",
            "int js_parameter_count",
            "Operator::Properties properties",
            "CallDescriptor::Flags flags",
            "LazyDeoptOnThrow lazy_deopt_on_throw"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Returns a call descriptor for calls to Runtime functions."
        },
        {
          "name": "GetCEntryStubCallDescriptor",
          "parameters": [
            "Zone* zone",
            "int return_count",
            "int js_parameter_count",
            "const char* debug_name",
            "Operator::Properties properties",
            "CallDescriptor::Flags flags",
            "StackArgumentOrder stack_order"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Returns a call descriptor for C entry stubs."
        },
        {
          "name": "GetStubCallDescriptor",
          "parameters": [
            "Zone* zone",
            "const CallInterfaceDescriptor& descriptor",
            "int stack_parameter_count",
            "CallDescriptor::Flags flags",
            "Operator::Properties properties",
            "StubCallMode stub_mode"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Returns a call descriptor for stubs."
        },
        {
          "name": "GetBytecodeDispatchCallDescriptor",
          "parameters": [
            "Zone* zone",
            "const CallInterfaceDescriptor& descriptor",
            "int stack_parameter_count"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Returns a call descriptor for bytecode dispatch."
        },
        {
          "name": "GetSimplifiedCDescriptor",
          "parameters": [
            "Zone* zone",
            "const MachineSignature* sig",
            "CallDescriptor::Flags flags",
            "Operator::Properties properties"
          ],
          "return_type": "CallDescriptor*",
          "logic": "Creates a call descriptor for simplified C calls."
        },
        {
          "name": "GetParameterLocation",
          "parameters": [
            "int index"
          ],
          "return_type": "LinkageLocation",
          "logic": "Returns the location of an incoming parameter."
        },
        {
          "name": "GetParameterType",
          "parameters": [
            "int index"
          ],
          "return_type": "MachineType",
          "logic": "Returns the machine type of an incoming parameter."
        },
        {
          "name": "GetReturnLocation",
          "parameters": [
            "size_t index"
          ],
          "return_type": "LinkageLocation",
          "logic": "Returns the location where the function should place its return value."
        },
        {
          "name": "GetReturnType",
          "parameters": [
            "size_t index"
          ],
          "return_type": "MachineType",
          "logic": "Returns the machine type of the function's return value."
        },
        {
          "name": "ParameterHasSecondaryLocation",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Checks if parameter has a secondary location."
        },
        {
          "name": "GetParameterSecondaryLocation",
          "parameters": [
            "int index"
          ],
          "return_type": "LinkageLocation",
          "logic": "Returns the secondary location of a parameter."
        },
        {
          "name": "NeedsFrameStateInput",
          "parameters": [
            "Runtime::FunctionId function"
          ],
          "return_type": "bool",
          "logic": "Determines if a function needs a frame state input."
        },
        {
          "name": "GetOsrValueLocation",
          "parameters": [
            "int index"
          ],
          "return_type": "LinkageLocation",
          "logic": "Returns the location where an incoming OSR value is stored."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetI32WasmCallDescriptor",
      "parameters": [
        "Zone* zone",
        "const CallDescriptor* call_descriptor"
      ],
      "return_type": "CallDescriptor*",
      "logic": "Lowers a wasm CallDescriptor for 32 bit platforms by replacing i64 parameters and returns with two i32s each."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const CallDescriptor& d"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for CallDescriptor objects to print its data"
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const CallDescriptor::Kind& k"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for CallDescriptor::Kind enum to print its values"
    }
  ]
}