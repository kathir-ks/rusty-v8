{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/representation-change.h",
  "imports": [
    "src/compiler/feedback-source.h",
    "src/compiler/js-graph.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/use-info.h"
  ],
  "classes": [
    {
      "name": "RepresentationChanger",
      "properties": [
        "cache_",
        "jsgraph_",
        "broker_",
        "verifier_",
        "testing_type_errors_",
        "type_error_",
        "ieee754_fp16_raw_bits_to_fp32_raw_bits_code_",
        "ieee754_fp64_to_fp16_raw_bits_code_",
        "ieee754_fp16_raw_bits_to_fp32_raw_bits_operator_",
        "ieee754_fp64_to_fp16_raw_bits_operator_"
      ],
      "methods": [
        {
          "name": "RepresentationChanger",
          "parameters": [
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "SimplifiedLoweringVerifier* verifier"
          ],
          "return_type": "void",
          "logic": "Constructor for the RepresentationChanger class. Initializes internal state, including the JSGraph, JSHeapBroker, and SimplifiedLoweringVerifier."
        },
        {
          "name": "GetRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node from its output type to the desired representation (use_rep). It handles various conversions and checks for signedness."
        },
        {
          "name": "Int32OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 32-bit integer representation."
        },
        {
          "name": "Int32OverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 32-bit integer representation with overflow check."
        },
        {
          "name": "AdditiveSafeIntegerOverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode for additive operations, assuming integer representation with overflow check, using safe integers."
        },
        {
          "name": "Int64OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 64-bit integer representation."
        },
        {
          "name": "Int64OverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 64-bit integer representation with overflow check."
        },
        {
          "name": "BigIntOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming BigInt representation."
        },
        {
          "name": "TaggedSignedOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming TaggedSigned representation."
        },
        {
          "name": "Uint32OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 32-bit unsigned integer representation."
        },
        {
          "name": "Uint32OverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 32-bit unsigned integer representation with overflow check."
        },
        {
          "name": "Float64OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for the given opcode, assuming 64-bit floating-point representation."
        },
        {
          "name": "TypeForBasePointer",
          "parameters": [
            "const FieldAccess& access"
          ],
          "return_type": "MachineType",
          "logic": "Determines the MachineType for a base pointer based on the tag of the FieldAccess."
        },
        {
          "name": "TypeForBasePointer",
          "parameters": [
            "const ElementAccess& access"
          ],
          "return_type": "MachineType",
          "logic": "Determines the MachineType for a base pointer based on the tag of the ElementAccess."
        },
        {
          "name": "verification_enabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the verifier is enabled (not null)."
        },
        {
          "name": "GetTaggedSignedRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to TaggedSigned representation."
        },
        {
          "name": "GetTaggedPointerRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to TaggedPointer representation."
        },
        {
          "name": "GetTaggedRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Truncation truncation"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Tagged representation."
        },
        {
          "name": "GetFloat16RawBitsRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Float16RawBits representation."
        },
        {
          "name": "GetFloat32RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Truncation truncation"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Float32 representation."
        },
        {
          "name": "GetFloat64RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Float64 representation."
        },
        {
          "name": "GetWord32RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Word32 representation."
        },
        {
          "name": "GetBitRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Bit representation."
        },
        {
          "name": "GetWord64RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Handles representation changes to Word64 representation."
        },
        {
          "name": "TypeError",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "MachineRepresentation use"
          ],
          "return_type": "Node*",
          "logic": "Handles type errors during representation changes."
        },
        {
          "name": "MakeTruncatedInt32Constant",
          "parameters": [
            "double value"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 constant node from a double, truncating the double value to an Int32."
        },
        {
          "name": "InsertChangeBitToTagged",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Bit representation to Tagged representation."
        },
        {
          "name": "InsertChangeFloat32ToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Float32 representation to Float64 representation."
        },
        {
          "name": "InsertChangeFloat64ToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Float64 representation to Int32 representation."
        },
        {
          "name": "InsertChangeFloat64ToUint32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Float64 representation to Uint32 representation."
        },
        {
          "name": "InsertChangeInt32ToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Int32 representation to Float64 representation."
        },
        {
          "name": "InsertChangeTaggedSignedToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from TaggedSigned representation to Int32 representation."
        },
        {
          "name": "InsertChangeTaggedToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Tagged representation to Float64 representation."
        },
        {
          "name": "InsertChangeUint32ToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a change from Uint32 representation to Float64 representation."
        },
        {
          "name": "InsertCheckedFloat64ToInt32",
          "parameters": [
            "Node* node",
            "CheckForMinusZeroMode check",
            "const FeedbackSource& feedback",
            "Node* use_node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a checked conversion from Float64 to Int32, with an optional check for minus zero."
        },
        {
          "name": "InsertChangeFloat16RawBitsToFloat64Fallback",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a fallback change from Float16RawBits to Float64."
        },
        {
          "name": "InsertTruncateFloat64ToFloat16RawBitsFallback",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a fallback truncation from Float64 to Float16RawBits."
        },
        {
          "name": "InsertConversion",
          "parameters": [
            "Node* node",
            "const Operator* op",
            "Node* use_node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a general conversion operator for the given node."
        },
        {
          "name": "InsertTruncateInt64ToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a truncation from Int64 to Int32."
        },
        {
          "name": "InsertUnconditionalDeopt",
          "parameters": [
            "Node* node",
            "DeoptimizeReason reason",
            "const FeedbackSource& feedback"
          ],
          "return_type": "Node*",
          "logic": "Inserts an unconditional deoptimization point."
        },
        {
          "name": "InsertTypeOverrideForVerifier",
          "parameters": [
            "const Type& type",
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a type override for the verifier."
        },
        {
          "name": "Ieee754Fp16RawBitsToFp32RawBitsCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the code for converting IEEE754 Float16 raw bits to Float32 raw bits."
        },
        {
          "name": "Ieee754Fp64ToFp16RawBitsCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the code for converting IEEE754 Float64 to Float16 raw bits."
        },
        {
          "name": "Ieee754Fp16RawBitsToFp32RawBitsOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Returns the operator for converting IEEE754 Float16 raw bits to Float32 raw bits."
        },
        {
          "name": "Ieee754Fp64ToFp16RawBitsOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Returns the operator for converting IEEE754 Float64 to Float16 raw bits."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph associated with this RepresentationChanger."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns the Factory associated with the Isolate."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder from the JSGraph."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the MachineOperatorBuilder from the JSGraph."
        }
      ]
    }
  ],
  "functions": []
}