{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/loop-variable-optimizer.h",
  "imports": [
    "src/compiler/functional-list.h",
    "src/compiler/node-aux-data.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "InductionVariable",
      "properties": [
        "phi_",
        "effect_phi_",
        "arith_",
        "increment_",
        "init_value_",
        "lower_bounds_",
        "upper_bounds_",
        "arithmeticType_"
      ],
      "methods": [
        {
          "name": "phi",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the phi node associated with the induction variable."
        },
        {
          "name": "effect_phi",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the effect phi node associated with the induction variable."
        },
        {
          "name": "arith",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the arithmetic node associated with the induction variable."
        },
        {
          "name": "increment",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the increment node associated with the induction variable."
        },
        {
          "name": "init_value",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the initial value node associated with the induction variable."
        },
        {
          "name": "lower_bounds",
          "parameters": [],
          "return_type": "const ZoneVector<Bound>&",
          "logic": "Returns the lower bounds of the induction variable."
        },
        {
          "name": "upper_bounds",
          "parameters": [],
          "return_type": "const ZoneVector<Bound>&",
          "logic": "Returns the upper bounds of the induction variable."
        },
        {
          "name": "Type",
          "parameters": [],
          "return_type": "ArithmeticType",
          "logic": "Returns the arithmetic type of the induction variable (addition or subtraction)."
        },
        {
          "name": "AddUpperBound",
          "parameters": [
            "Node* bound",
            "ConstraintKind kind"
          ],
          "return_type": "void",
          "logic": "Adds an upper bound to the induction variable's bounds."
        },
        {
          "name": "AddLowerBound",
          "parameters": [
            "Node* bound",
            "ConstraintKind kind"
          ],
          "return_type": "void",
          "logic": "Adds a lower bound to the induction variable's bounds."
        },
        {
          "name": "InductionVariable",
          "parameters": [
            "Node* phi",
            "Node* effect_phi",
            "Node* arith",
            "Node* increment",
            "Node* init_value",
            "Zone* zone",
            "ArithmeticType arithmeticType"
          ],
          "return_type": "InductionVariable",
          "logic": "Constructor for the InductionVariable class. Initializes the member variables."
        }
      ]
    },
    {
      "name": "LoopVariableOptimizer",
      "properties": [
        "graph_",
        "common_",
        "zone_",
        "limits_",
        "reduced_",
        "induction_vars_"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "The main function that performs the loop variable optimization."
        },
        {
          "name": "LoopVariableOptimizer",
          "parameters": [
            "TFGraph* graph",
            "CommonOperatorBuilder* common",
            "Zone* zone"
          ],
          "return_type": "LoopVariableOptimizer",
          "logic": "Constructor for the LoopVariableOptimizer class. Initializes the member variables."
        },
        {
          "name": "induction_variables",
          "parameters": [],
          "return_type": "const ZoneMap<int, InductionVariable*>&",
          "logic": "Returns the map of induction variables found in the graph."
        },
        {
          "name": "ChangeToInductionVariablePhis",
          "parameters": [],
          "return_type": "void",
          "logic": "Changes loop phis to induction variable phis."
        },
        {
          "name": "ChangeToPhisAndInsertGuards",
          "parameters": [],
          "return_type": "void",
          "logic": "Changes certain operations to phis and inserts guards for safety."
        },
        {
          "name": "VisitBackedge",
          "parameters": [
            "Node* from",
            "Node* loop"
          ],
          "return_type": "void",
          "logic": "Visits a backedge in the control flow graph."
        },
        {
          "name": "VisitNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a generic node in the graph."
        },
        {
          "name": "VisitMerge",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a merge node in the control flow graph."
        },
        {
          "name": "VisitLoop",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a loop node in the control flow graph."
        },
        {
          "name": "VisitIf",
          "parameters": [
            "Node* node",
            "bool polarity"
          ],
          "return_type": "void",
          "logic": "Visits an if node in the control flow graph."
        },
        {
          "name": "VisitStart",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a start node in the control flow graph."
        },
        {
          "name": "VisitLoopExit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a loop exit node in the control flow graph."
        },
        {
          "name": "VisitOtherControl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits other control nodes in the control flow graph."
        },
        {
          "name": "AddCmpToLimits",
          "parameters": [
            "VariableLimits* limits",
            "Node* node",
            "InductionVariable::ConstraintKind kind",
            "bool polarity"
          ],
          "return_type": "void",
          "logic": "Adds comparison results as limits to the induction variable."
        },
        {
          "name": "TakeConditionsFromFirstControl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Takes loop condition limits from the first control input of a node."
        },
        {
          "name": "FindInductionVariable",
          "parameters": [
            "Node* node"
          ],
          "return_type": "const InductionVariable*",
          "logic": "Finds the induction variable associated with a given node."
        },
        {
          "name": "TryGetInductionVariable",
          "parameters": [
            "Node* phi"
          ],
          "return_type": "InductionVariable*",
          "logic": "Attempts to get an induction variable given a phi node. Returns null if not found."
        },
        {
          "name": "DetectInductionVariables",
          "parameters": [
            "Node* loop"
          ],
          "return_type": "void",
          "logic": "Detects induction variables within a given loop."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the graph associated with the optimizer."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the common operator builder."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with the optimizer."
        }
      ]
    }
  ],
  "functions": []
}