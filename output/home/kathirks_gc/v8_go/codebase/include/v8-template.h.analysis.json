{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-template.h",
  "imports": [
    "<cstddef>",
    "<string_view>",
    "v8-data.h",
    "v8-exception.h",
    "v8-function-callback.h",
    "v8-local-handle.h",
    "v8-memory-span.h",
    "v8-object.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Template",
      "properties": [],
      "methods": [
        {
          "name": "Set",
          "parameters": [
            "Local<Name> name",
            "Local<Data> value",
            "PropertyAttribute attributes"
          ],
          "return_type": "void",
          "logic": "Adds a property to each instance created by this template. The property must be defined either as a primitive value, or a template."
        },
        {
          "name": "SetPrivate",
          "parameters": [
            "Local<Private> name",
            "Local<Data> value",
            "PropertyAttribute attributes"
          ],
          "return_type": "void",
          "logic": "Adds a private property to each instance created by this template. The property must be defined either as a primitive value, or a template."
        },
        {
          "name": "Set",
          "parameters": [
            "Isolate* isolate",
            "const char* name",
            "Local<Data> value",
            "PropertyAttribute attributes"
          ],
          "return_type": "void",
          "logic": "Adds a property (given as const char*) to each instance created by this template. The property must be defined either as a primitive value, or a template."
        },
        {
          "name": "SetAccessorProperty",
          "parameters": [
            "Local<Name> name",
            "Local<FunctionTemplate> getter",
            "Local<FunctionTemplate> setter",
            "PropertyAttribute attribute"
          ],
          "return_type": "void",
          "logic": "Sets an accessor property on the object template.  Whenever the property with the given name is accessed, the getter and setter functions are called."
        },
        {
          "name": "SetNativeDataProperty",
          "parameters": [
            "Local<Name> name",
            "AccessorNameGetterCallback getter",
            "AccessorNameSetterCallback setter",
            "Local<Value> data",
            "PropertyAttribute attribute",
            "SideEffectType getter_side_effect_type",
            "SideEffectType setter_side_effect_type"
          ],
          "return_type": "void",
          "logic": "Sets a native data property on the object template.  Whenever the property with the given name is accessed, the getter and setter callbacks are called."
        },
        {
          "name": "SetLazyDataProperty",
          "parameters": [
            "Local<Name> name",
            "AccessorNameGetterCallback getter",
            "Local<Value> data",
            "PropertyAttribute attribute",
            "SideEffectType getter_side_effect_type",
            "SideEffectType setter_side_effect_type"
          ],
          "return_type": "void",
          "logic": "Like SetNativeDataProperty, but V8 will replace the native data property with a real data property on first access."
        },
        {
          "name": "SetIntrinsicDataProperty",
          "parameters": [
            "Local<Name> name",
            "Intrinsic intrinsic",
            "PropertyAttribute attribute"
          ],
          "return_type": "void",
          "logic": "During template instantiation, sets the value with the intrinsic property from the correct context."
        }
      ]
    },
    {
      "name": "FunctionTemplate",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "FunctionCallback callback",
            "Local<Value> data",
            "Local<Signature> signature",
            "int length",
            "ConstructorBehavior behavior",
            "SideEffectType side_effect_type",
            "const CFunction* c_function",
            "uint16_t instance_type",
            "uint16_t allowed_receiver_instance_type_range_start",
            "uint16_t allowed_receiver_instance_type_range_end"
          ],
          "return_type": "Local<FunctionTemplate>",
          "logic": "Creates a function template."
        },
        {
          "name": "NewWithCFunctionOverloads",
          "parameters": [
            "Isolate* isolate",
            "FunctionCallback callback",
            "Local<Value> data",
            "Local<Signature> signature",
            "int length",
            "ConstructorBehavior behavior",
            "SideEffectType side_effect_type",
            "const MemorySpan<const CFunction>& c_function_overloads"
          ],
          "return_type": "Local<FunctionTemplate>",
          "logic": "Creates a function template for multiple overloaded fast API calls."
        },
        {
          "name": "NewWithCache",
          "parameters": [
            "Isolate* isolate",
            "FunctionCallback callback",
            "Local<Private> cache_property",
            "Local<Value> data",
            "Local<Signature> signature",
            "int length",
            "SideEffectType side_effect_type"
          ],
          "return_type": "Local<FunctionTemplate>",
          "logic": "Creates a function template backed/cached by a private property."
        },
        {
          "name": "GetFunction",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Function>",
          "logic": "Returns the unique function instance in the current execution context."
        },
        {
          "name": "NewRemoteInstance",
          "parameters": [],
          "return_type": "MaybeLocal<Object>",
          "logic": "Creates a new instance that isn't backed by an actual object."
        },
        {
          "name": "SetCallHandler",
          "parameters": [
            "FunctionCallback callback",
            "Local<Value> data",
            "SideEffectType side_effect_type",
            "const MemorySpan<const CFunction>& c_function_overloads"
          ],
          "return_type": "void",
          "logic": "Set the call-handler callback for a FunctionTemplate."
        },
        {
          "name": "SetLength",
          "parameters": [
            "int length"
          ],
          "return_type": "void",
          "logic": "Set the predefined length property for the FunctionTemplate."
        },
        {
          "name": "InstanceTemplate",
          "parameters": [],
          "return_type": "Local<ObjectTemplate>",
          "logic": "Get the InstanceTemplate."
        },
        {
          "name": "Inherit",
          "parameters": [
            "Local<FunctionTemplate> parent"
          ],
          "return_type": "void",
          "logic": "Causes the function template to inherit from a parent function template."
        },
        {
          "name": "PrototypeTemplate",
          "parameters": [],
          "return_type": "Local<ObjectTemplate>",
          "logic": "Returns the prototype template."
        },
        {
          "name": "SetPrototypeProviderTemplate",
          "parameters": [
            "Local<FunctionTemplate> prototype_provider"
          ],
          "return_type": "void",
          "logic": "A PrototypeProviderTemplate is another function template whose prototype property is used for this template."
        },
        {
          "name": "SetClassName",
          "parameters": [
            "Local<String> name"
          ],
          "return_type": "void",
          "logic": "Set the class name of the FunctionTemplate."
        },
        {
          "name": "SetInterfaceName",
          "parameters": [
            "Local<String> name"
          ],
          "return_type": "void",
          "logic": "Set the interface name of the FunctionTemplate."
        },
        {
          "name": "SetExceptionContext",
          "parameters": [
            "ExceptionContext context"
          ],
          "return_type": "void",
          "logic": "Provides information on the type of FunctionTemplate for embedder exception handling."
        },
        {
          "name": "SetAcceptAnyReceiver",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "When set to true, no access check will be performed on the receiver of a function call."
        },
        {
          "name": "ReadOnlyPrototype",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the ReadOnly flag in the attributes of the 'prototype' property of functions created from this FunctionTemplate to true."
        },
        {
          "name": "RemovePrototype",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes the prototype property from functions created from this FunctionTemplate."
        },
        {
          "name": "HasInstance",
          "parameters": [
            "Local<Value> object"
          ],
          "return_type": "bool",
          "logic": "Returns true if the given object is an instance of this function template."
        },
        {
          "name": "IsLeafTemplateForApiObject",
          "parameters": [
            "v8::Local<v8::Value> value"
          ],
          "return_type": "bool",
          "logic": "Returns true if the given value is an API object that was constructed by an instance of this function template (without checking for inheriting function templates)."
        }
      ]
    },
    {
      "name": "ObjectTemplate",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "Local<FunctionTemplate> constructor"
          ],
          "return_type": "Local<ObjectTemplate>",
          "logic": "Creates an ObjectTemplate."
        },
        {
          "name": "NewInstance",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Object>",
          "logic": "Creates a new instance of this template."
        },
        {
          "name": "SetHandler",
          "parameters": [
            "const NamedPropertyHandlerConfiguration& configuration"
          ],
          "return_type": "void",
          "logic": "Sets a named property handler on the object template."
        },
        {
          "name": "SetHandler",
          "parameters": [
            "const IndexedPropertyHandlerConfiguration& configuration"
          ],
          "return_type": "void",
          "logic": "Sets an indexed property handler on the object template."
        },
        {
          "name": "SetCallAsFunctionHandler",
          "parameters": [
            "FunctionCallback callback",
            "Local<Value> data"
          ],
          "return_type": "void",
          "logic": "Sets the callback to be used when calling instances created from this template as a function."
        },
        {
          "name": "MarkAsUndetectable",
          "parameters": [],
          "return_type": "void",
          "logic": "Mark object instances of the template as undetectable."
        },
        {
          "name": "SetAccessCheckCallback",
          "parameters": [
            "AccessCheckCallback callback",
            "Local<Value> data"
          ],
          "return_type": "void",
          "logic": "Sets access check callback on the object template and enables access checks."
        },
        {
          "name": "SetAccessCheckCallbackAndHandler",
          "parameters": [
            "AccessCheckCallback callback",
            "const NamedPropertyHandlerConfiguration& named_handler",
            "const IndexedPropertyHandlerConfiguration& indexed_handler",
            "Local<Value> data"
          ],
          "return_type": "void",
          "logic": "Like SetAccessCheckCallback but invokes an interceptor on failed access checks instead of looking up all-can-read properties."
        },
        {
          "name": "InternalFieldCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Gets the number of internal fields for objects generated from this template."
        },
        {
          "name": "SetInternalFieldCount",
          "parameters": [
            "int value"
          ],
          "return_type": "void",
          "logic": "Sets the number of internal fields for objects generated from this template."
        },
        {
          "name": "IsImmutableProto",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the object will be an immutable prototype exotic object."
        },
        {
          "name": "SetImmutableProto",
          "parameters": [],
          "return_type": "void",
          "logic": "Makes the ObjectTemplate for an immutable prototype exotic object, with an immutable __proto__."
        },
        {
          "name": "SetCodeLike",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks object instances as code-like, for dynamic code brand checks."
        },
        {
          "name": "IsCodeLike",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the objects created from this template are marked as code-like."
        }
      ]
    },
    {
      "name": "DictionaryTemplate",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "MemorySpan<const std::string_view> names"
          ],
          "return_type": "Local<DictionaryTemplate>",
          "logic": "Creates a new template for dictionary objects with predefined data properties."
        },
        {
          "name": "NewInstance",
          "parameters": [
            "Local<Context> context",
            "MemorySpan<MaybeLocal<Value>> property_values"
          ],
          "return_type": "Local<Object>",
          "logic": "Creates a new instance of this template."
        }
      ]
    },
    {
      "name": "Signature",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "Local<FunctionTemplate> receiver"
          ],
          "return_type": "Local<Signature>",
          "logic": "Creates a Signature specifying valid receivers for a function."
        }
      ]
    },
    {
      "name": "NamedPropertyHandlerConfiguration",
      "properties": [
        "getter",
        "setter",
        "query",
        "deleter",
        "enumerator",
        "definer",
        "descriptor",
        "data",
        "flags"
      ],
      "methods": [
        {
          "name": "NamedPropertyHandlerConfiguration",
          "parameters": [
            "NamedPropertyGetterCallback getter",
            "NamedPropertySetterCallback setter",
            "NamedPropertyQueryCallback query",
            "NamedPropertyDeleterCallback deleter",
            "NamedPropertyEnumeratorCallback enumerator",
            "NamedPropertyDefinerCallback definer",
            "NamedPropertyDescriptorCallback descriptor",
            "Local<Value> data",
            "PropertyHandlerFlags flags"
          ],
          "return_type": null,
          "logic": "Constructor."
        },
        {
          "name": "NamedPropertyHandlerConfiguration",
          "parameters": [
            "NamedPropertyGetterCallback getter",
            "NamedPropertySetterCallback setter",
            "NamedPropertyQueryCallback query",
            "NamedPropertyDeleterCallback deleter",
            "NamedPropertyEnumeratorCallback enumerator",
            "Local<Value> data",
            "PropertyHandlerFlags flags"
          ],
          "return_type": null,
          "logic": "Constructor (without definer and descriptor)."
        },
        {
          "name": "NamedPropertyHandlerConfiguration",
          "parameters": [
            "NamedPropertyGetterCallback getter",
            "NamedPropertySetterCallback setter",
            "NamedPropertyDescriptorCallback descriptor",
            "NamedPropertyDeleterCallback deleter",
            "NamedPropertyEnumeratorCallback enumerator",
            "NamedPropertyDefinerCallback definer",
            "Local<Value> data",
            "PropertyHandlerFlags flags"
          ],
          "return_type": null,
          "logic": "Constructor (without query)."
        }
      ]
    },
    {
      "name": "IndexedPropertyHandlerConfiguration",
      "properties": [
        "getter",
        "setter",
        "query",
        "deleter",
        "enumerator",
        "definer",
        "descriptor",
        "data",
        "flags"
      ],
      "methods": [
        {
          "name": "IndexedPropertyHandlerConfiguration",
          "parameters": [
            "IndexedPropertyGetterCallbackV2 getter",
            "IndexedPropertySetterCallbackV2 setter",
            "IndexedPropertyQueryCallbackV2 query",
            "IndexedPropertyDeleterCallbackV2 deleter",
            "IndexedPropertyEnumeratorCallback enumerator",
            "IndexedPropertyDefinerCallbackV2 definer",
            "IndexedPropertyDescriptorCallbackV2 descriptor",
            "Local<Value> data",
            "PropertyHandlerFlags flags"
          ],
          "return_type": null,
          "logic": "Constructor."
        },
        {
          "name": "IndexedPropertyHandlerConfiguration",
          "parameters": [
            "IndexedPropertyGetterCallbackV2 getter",
            "IndexedPropertySetterCallbackV2 setter",
            "IndexedPropertyQueryCallbackV2 query",
            "IndexedPropertyDeleterCallbackV2 deleter",
            "IndexedPropertyEnumeratorCallback enumerator",
            "Local<Value> data",
            "PropertyHandlerFlags flags"
          ],
          "return_type": null,
          "logic": "Constructor (without definer and descriptor)."
        },
        {
          "name": "IndexedPropertyHandlerConfiguration",
          "parameters": [
            "IndexedPropertyGetterCallbackV2 getter",
            "IndexedPropertySetterCallbackV2 setter",
            "IndexedPropertyDescriptorCallbackV2 descriptor",
            "IndexedPropertyDeleterCallbackV2 deleter",
            "IndexedPropertyEnumeratorCallback enumerator",
            "IndexedPropertyDefinerCallbackV2 definer",
            "Local<Value> data",
            "PropertyHandlerFlags flags"
          ],
          "return_type": null,
          "logic": "Constructor (without query)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Template::Set",
      "parameters": [
        "Isolate* isolate",
        "const char* name",
        "Local<Data> value",
        "PropertyAttribute attributes"
      ],
      "return_type": "void",
      "logic": "Implementation of Template::Set(Isolate*, const char*, Local<Data>, PropertyAttribute)."
    },
    {
      "name": "FunctionTemplate::Cast",
      "parameters": [
        "Data* data"
      ],
      "return_type": "FunctionTemplate*",
      "logic": "Casts a Data* to a FunctionTemplate* (with checks in debug mode)."
    },
    {
      "name": "ObjectTemplate::Cast",
      "parameters": [
        "Data* data"
      ],
      "return_type": "ObjectTemplate*",
      "logic": "Casts a Data* to an ObjectTemplate* (with checks in debug mode)."
    },
    {
      "name": "DictionaryTemplate::Cast",
      "parameters": [
        "Data* data"
      ],
      "return_type": "DictionaryTemplate*",
      "logic": "Casts a Data* to a DictionaryTemplate* (with checks in debug mode)."
    },
    {
      "name": "Signature::Cast",
      "parameters": [
        "Data* data"
      ],
      "return_type": "Signature*",
      "logic": "Casts a Data* to a Signature* (with checks in debug mode)."
    }
  ]
}