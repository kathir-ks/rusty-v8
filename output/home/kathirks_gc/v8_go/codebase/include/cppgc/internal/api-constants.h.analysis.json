{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/internal/api-constants.h",
  "imports": [
    "<cstddef>",
    "<cstdint>",
    "v8config.h"
  ],
  "classes": [],
  "functions": [],
  "constants": [
    {
      "name": "kKB",
      "value": "1024",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Defines a kilobyte in bytes."
    },
    {
      "name": "kMB",
      "value": "kKB * 1024",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Defines a megabyte in bytes."
    },
    {
      "name": "kGB",
      "value": "kMB * 1024",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Defines a gigabyte in bytes."
    },
    {
      "name": "kFullyConstructedBitFieldOffsetFromPayload",
      "value": "2 * sizeof(uint16_t)",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Offset from the payload to the bitfield indicating fully constructed status."
    },
    {
      "name": "kFullyConstructedBitMask",
      "value": "uint16_t{1}",
      "type": "uint16_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Mask for checking/setting the fully constructed bit."
    },
    {
      "name": "kPageSizeBits",
      "value": "17",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Number of bits to represent the page size."
    },
    {
      "name": "kPageSize",
      "value": "size_t{1} << kPageSizeBits",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "The size of a page in bytes."
    },
    {
      "name": "kLargeObjectSizeThreshold",
      "value": "kPageSize / 2",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Threshold above which an object is considered large."
    },
    {
      "name": "kPointerCompressionShift",
      "value": "Conditionally defined to be 3 or 1",
      "type": "unsigned",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Shift value for pointer compression."
    },
    {
      "name": "kCagedHeapDefaultReservationSize",
      "value": "static_cast<size_t>(4) * kGB",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Default size of the caged heap reservation."
    },
    {
      "name": "kCagedHeapMaxReservationSize",
      "value": "Conditionally defined depending on CPPGC_POINTER_COMPRESSION",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Maximum allowed size for the caged heap reservation."
    },
    {
      "name": "kCagedHeapReservationAlignment",
      "value": "kCagedHeapMaxReservationSize",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Alignment requirement for the caged heap reservation."
    },
    {
      "name": "kDefaultAlignment",
      "value": "sizeof(void*)",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "The default alignment requirement for allocations."
    },
    {
      "name": "kMaxSupportedAlignment",
      "value": "2 * kDefaultAlignment",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "Maximum alignment supported by the allocator."
    },
    {
      "name": "kAllocationGranularity",
      "value": "sizeof(void*)",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "The granularity of heap allocations."
    },
    {
      "name": "kCachelineSize",
      "value": "64",
      "type": "size_t",
      "namespace": "cppgc::internal::api_constants",
      "logic": "The default cacheline size."
    }
  ]
}