{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/internal/caged-heap-local-data.h",
  "imports": [
    "<array>",
    "<cstddef>",
    "<cstdint>",
    "cppgc/internal/api-constants.h",
    "cppgc/internal/caged-heap.h",
    "cppgc/internal/logging.h",
    "cppgc/platform.h",
    "v8config.h",
    "<bit>"
  ],
  "classes": [
    {
      "name": "AgeTable",
      "properties": [
        "table_"
      ],
      "methods": [
        {
          "name": "SetAge",
          "parameters": [
            "uintptr_t cage_offset",
            "Age age"
          ],
          "return_type": "void",
          "logic": "Sets the age of a card in the age table given its offset.  Maps the offset to the corresponding entry in the 'table_' array and updates its value with the provided age."
        },
        {
          "name": "GetAge",
          "parameters": [
            "uintptr_t cage_offset"
          ],
          "return_type": "Age",
          "logic": "Retrieves the age of a card in the age table given its offset.  Maps the offset to the corresponding entry in the 'table_' array and returns its value."
        },
        {
          "name": "SetAgeForRange",
          "parameters": [
            "uintptr_t cage_offset_begin",
            "uintptr_t cage_offset_end",
            "Age age",
            "AdjacentCardsPolicy adjacent_cards_policy"
          ],
          "return_type": "void",
          "logic": "Sets the age for a range of cards in the age table.  Iterates through the cards within the specified offset range and updates their age based on the provided policy concerning adjacent cards."
        },
        {
          "name": "GetAgeForRange",
          "parameters": [
            "uintptr_t cage_offset_begin",
            "uintptr_t cage_offset_end"
          ],
          "return_type": "Age",
          "logic": "Gets the combined age of a range of cards, effectively summarizing the ages of the cards in the given range."
        },
        {
          "name": "ResetForTesting",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the age table, likely to a default or initial state, used for testing purposes."
        },
        {
          "name": "card",
          "parameters": [
            "uintptr_t offset"
          ],
          "return_type": "size_t",
          "logic": "Calculates the index (card number) in the age table that corresponds to a given offset within the caged heap. It uses bit shifting to divide the offset by the card size."
        },
        {
          "name": "CalculateAgeTableSizeForHeapSize",
          "parameters": [
            "size_t heap_size"
          ],
          "return_type": "size_t",
          "logic": "Calculates the required size of the age table based on the given heap size."
        }
      ]
    },
    {
      "name": "CagedHeapLocalData",
      "properties": [
        "age_table"
      ],
      "methods": [
        {
          "name": "Get",
          "parameters": [],
          "return_type": "CagedHeapLocalData&",
          "logic": "Returns a reference to the CagedHeapLocalData object. It retrieves a pointer to the base of the caged heap and interprets it as a pointer to CagedHeapLocalData."
        },
        {
          "name": "CalculateLocalDataSizeForHeapSize",
          "parameters": [
            "size_t heap_size"
          ],
          "return_type": "size_t",
          "logic": "Calculates the size needed for local data by calculating age table size."
        }
      ]
    }
  ],
  "functions": []
}