{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/macros.h",
  "imports": [
    "<cstddef>",
    "cppgc/internal/compiler-specific.h"
  ],
  "classes": [],
  "functions": [],
  "macros": [
    {
      "name": "CPPGC_STACK_ALLOCATED",
      "conditional": "defined(__clang__)",
      "definition": "public: using IsStackAllocatedTypeMarker CPPGC_UNUSED = int; private: void* operator new(size_t) = delete; void* operator new(size_t, void*) = delete; static_assert(true, \"Force semicolon.\")",
      "logic": "Marks a class as stack allocated by deleting the global new operators and adding a type alias. This prevents heap allocation. The static_assert forces the user to put a semicolon after the macro, preventing syntax errors."
    },
    {
      "name": "CPPGC_STACK_ALLOCATED",
      "conditional": "!defined(__clang__)",
      "definition": "static_assert(true, \"Force semicolon.\")",
      "logic": "Marks a class as stack allocated. In non-clang compilers, it simply adds a static assertion to force semicolon usage."
    },
    {
      "name": "CPPGC_STACK_ALLOCATED_IGNORE",
      "conditional": "defined(__clang__)",
      "definition": "__attribute__((annotate(\"stack_allocated_ignore\")))",
      "logic": "Used to suppress the stack allocation check for a specific class.  It adds a clang annotation, likely used by static analysis tools to ignore the class."
    },
    {
      "name": "CPPGC_STACK_ALLOCATED_IGNORE",
      "conditional": "!defined(__clang__)",
      "definition": "",
      "logic": "In non-clang compilers, this macro expands to nothing."
    }
  ],
  "concepts": [
    {
      "name": "IsStackAllocatedType",
      "parameters": [
        "typename T"
      ],
      "requires": [
        "typename T::IsStackAllocatedTypeMarker;"
      ],
      "logic": "A concept that checks if a type T has a nested type named IsStackAllocatedTypeMarker. This is used to determine if a type is marked as stack-allocated using the CPPGC_STACK_ALLOCATED macro."
    }
  ]
}