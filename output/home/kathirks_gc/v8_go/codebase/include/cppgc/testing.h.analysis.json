{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/testing.h",
  "imports": [
    "cppgc/common.h",
    "cppgc/macros.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "OverrideEmbedderStackStateScope",
      "properties": [
        "heap_handle_"
      ],
      "methods": [
        {
          "name": "OverrideEmbedderStackStateScope",
          "parameters": [
            "HeapHandle& heap_handle",
            "EmbedderStackState state"
          ],
          "return_type": "void",
          "logic": "Constructor that enters the scope and overrides the stack state. Associates itself with a heap handle and a stack state."
        },
        {
          "name": "~OverrideEmbedderStackStateScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that leaves the scope, presumably reverting the stack state override."
        },
        {
          "name": "OverrideEmbedderStackStateScope",
          "parameters": [
            "const OverrideEmbedderStackStateScope&"
          ],
          "return_type": "OverrideEmbedderStackStateScope&",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const OverrideEmbedderStackStateScope&"
          ],
          "return_type": "OverrideEmbedderStackStateScope&",
          "logic": "Deleted assignment operator."
        }
      ]
    },
    {
      "name": "StandaloneTestingHeap",
      "properties": [
        "heap_handle_"
      ],
      "methods": [
        {
          "name": "StandaloneTestingHeap",
          "parameters": [
            "HeapHandle&"
          ],
          "return_type": "void",
          "logic": "Constructor that associates the testing heap with the given heap handle."
        },
        {
          "name": "StartGarbageCollection",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts an incremental garbage collection cycle."
        },
        {
          "name": "PerformMarkingStep",
          "parameters": [
            "EmbedderStackState stack_state"
          ],
          "return_type": "bool",
          "logic": "Performs a single incremental marking step of the garbage collection cycle, considering the provided stack state. Returns if the step completed successfully."
        },
        {
          "name": "FinalizeGarbageCollection",
          "parameters": [
            "EmbedderStackState stack_state"
          ],
          "return_type": "void",
          "logic": "Finalizes the current garbage collection cycle atomically, taking the provided stack state into account."
        },
        {
          "name": "ToggleMainThreadMarking",
          "parameters": [
            "bool should_mark"
          ],
          "return_type": "void",
          "logic": "Enables or disables main thread marking during garbage collection, allowing for stress testing of concurrent marking."
        },
        {
          "name": "ForceCompactionForNextGarbageCollection",
          "parameters": [],
          "return_type": "void",
          "logic": "Forces compaction to be performed during the next garbage collection cycle."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsHeapObjectOld",
      "parameters": [
        "void*"
      ],
      "return_type": "bool",
      "logic": "Checks if a given pointer points to an old heap object."
    }
  ]
}