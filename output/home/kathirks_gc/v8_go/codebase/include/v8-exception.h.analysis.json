{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-exception.h",
  "imports": [
    "<stddef.h>",
    "v8-local-handle.h",
    "v8-object.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Exception",
      "properties": [],
      "methods": [
        {
          "name": "RangeError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new RangeError object."
        },
        {
          "name": "ReferenceError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new ReferenceError object."
        },
        {
          "name": "SyntaxError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new SyntaxError object."
        },
        {
          "name": "TypeError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new TypeError object."
        },
        {
          "name": "WasmCompileError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new WasmCompileError object."
        },
        {
          "name": "WasmLinkError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new WasmLinkError object."
        },
        {
          "name": "WasmRuntimeError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new WasmRuntimeError object."
        },
        {
          "name": "WasmSuspendError",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new WasmSuspendError object."
        },
        {
          "name": "Error",
          "parameters": [
            "Local<String> message",
            "Local<Value> options = {}"
          ],
          "return_type": "Local<Value>",
          "logic": "Creates a new Error object."
        },
        {
          "name": "CreateMessage",
          "parameters": [
            "Isolate* isolate",
            "Local<Value> exception"
          ],
          "return_type": "Local<Message>",
          "logic": "Creates an error message for the given exception.  Tries to reconstruct stack trace or capture it."
        },
        {
          "name": "GetStackTrace",
          "parameters": [
            "Local<Value> exception"
          ],
          "return_type": "Local<StackTrace>",
          "logic": "Returns the original stack trace of an exception, or an empty handle if not available."
        },
        {
          "name": "CaptureStackTrace",
          "parameters": [
            "Local<Context> context",
            "Local<Object> object"
          ],
          "return_type": "Maybe<bool>",
          "logic": "Captures the current stack trace and attaches it to the given object as a `stack` property."
        }
      ]
    },
    {
      "name": "ExceptionPropagationMessage",
      "properties": [
        "Isolate* isolate_",
        "Local<Object> exception_",
        "Local<String> interface_name_",
        "Local<String> property_name_",
        "ExceptionContext exception_context_"
      ],
      "methods": [
        {
          "name": "ExceptionPropagationMessage",
          "parameters": [
            "v8::Isolate* isolate",
            "Local<Object> exception",
            "Local<String> interface_name",
            "Local<String> property_name",
            "ExceptionContext exception_context"
          ],
          "return_type": "void",
          "logic": "Constructor for the ExceptionPropagationMessage class."
        },
        {
          "name": "GetIsolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with the exception."
        },
        {
          "name": "GetException",
          "parameters": [],
          "return_type": "Local<Object>",
          "logic": "Returns the exception object."
        },
        {
          "name": "GetInterfaceName",
          "parameters": [],
          "return_type": "Local<String>",
          "logic": "Returns the interface name where the exception occurred."
        },
        {
          "name": "GetPropertyName",
          "parameters": [],
          "return_type": "Local<String>",
          "logic": "Returns the property name where the exception occurred."
        },
        {
          "name": "GetExceptionContext",
          "parameters": [],
          "return_type": "ExceptionContext",
          "logic": "Returns the context in which the exception occurred (e.g., constructor, getter, setter)."
        }
      ]
    },
    {
      "name": "TryCatch",
      "properties": [
        "internal::Isolate* i_isolate_",
        "TryCatch* next_",
        "void* exception_",
        "void* message_obj_",
        "internal::Address js_stack_comparable_address_",
        "bool is_verbose_ : 1",
        "bool can_continue_ : 1",
        "bool capture_message_ : 1",
        "bool rethrow_ : 1"
      ],
      "methods": [
        {
          "name": "TryCatch",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "explicit",
          "logic": "Constructor. Creates a new try/catch block and registers it with v8."
        },
        {
          "name": "~TryCatch",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Unregisters and deletes this try/catch block."
        },
        {
          "name": "HasCaught",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if an exception has been caught by this try/catch block."
        },
        {
          "name": "CanContinue",
          "parameters": [],
          "return_type": "bool",
          "logic": "For certain types of exceptions, it makes no sense to continue execution. Returns true if execution can continue."
        },
        {
          "name": "HasTerminated",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if an exception has been caught due to script execution being terminated."
        },
        {
          "name": "ReThrow",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Throws the exception caught by this TryCatch in a way that avoids it being caught again by this same TryCatch."
        },
        {
          "name": "Exception",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Returns the exception caught by this try/catch block. If no exception has been caught an empty handle is returned."
        },
        {
          "name": "StackTrace",
          "parameters": [
            "Local<Context> context",
            "Local<Value> exception"
          ],
          "return_type": "MaybeLocal<Value>",
          "logic": "Returns the .stack property of an object.  If no .stack property is present an empty handle is returned."
        },
        {
          "name": "StackTrace",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Value>",
          "logic": "Returns the .stack property of the thrown object if the try/catch has caught an exception. Otherwise, returns an empty handle."
        },
        {
          "name": "Message",
          "parameters": [],
          "return_type": "Local<v8::Message>",
          "logic": "Returns the message associated with this exception. If there is no message associated an empty handle is returned."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears any exceptions that may have been caught by this try/catch block.  HasCaught() will return false after this."
        },
        {
          "name": "SetVerbose",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "Set verbosity of the external exception handler."
        },
        {
          "name": "IsVerbose",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if verbosity is enabled."
        },
        {
          "name": "SetCaptureMessage",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "Set whether or not this TryCatch should capture a Message object. True by default."
        },
        {
          "name": "JSStackComparableAddressPrivate",
          "parameters": [],
          "return_type": "internal::Address",
          "logic": "Returns address that can be used for comparisons with addresses into the JS stack"
        },
        {
          "name": "ResetInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Internal method to reset the state of the TryCatch object."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "ExceptionContext",
      "values": [
        "kUnknown",
        "kConstructor",
        "kOperation",
        "kAttributeGet",
        "kAttributeSet",
        "kIndexedQuery",
        "kIndexedGetter",
        "kIndexedDescriptor",
        "kIndexedSetter",
        "kIndexedDefiner",
        "kIndexedDeleter",
        "kNamedQuery",
        "kNamedGetter",
        "kNamedDescriptor",
        "kNamedSetter",
        "kNamedDefiner",
        "kNamedDeleter",
        "kNamedEnumerator"
      ]
    }
  ]
}