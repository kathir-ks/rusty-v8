{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-maybe.h",
  "imports": [
    "<type_traits>",
    "<utility>",
    "cppgc/internal/conditional-stack-allocated.h",
    "v8-internal.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Maybe<T>",
      "properties": [
        "has_value_",
        "value_"
      ],
      "methods": [
        {
          "name": "IsNothing",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the Maybe<> has no value."
        },
        {
          "name": "IsJust",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the Maybe<> has a value."
        },
        {
          "name": "ToChecked",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the value of the Maybe<>. Crashes if the Maybe<> is nothing (empty)."
        },
        {
          "name": "Check",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks if the Maybe has a value, if not calls FromJustIsNothing which crashes the program"
        },
        {
          "name": "To",
          "parameters": [
            "T* out"
          ],
          "return_type": "bool",
          "logic": "If the Maybe<> has a value, copies it to |out| and returns true. Otherwise, returns false and leaves |out| untouched."
        },
        {
          "name": "FromJust",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the value of the Maybe<>. Crashes if the Maybe<> is nothing (empty). Provides a const& overload."
        },
        {
          "name": "FromJust",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the value of the Maybe<>. Crashes if the Maybe<> is nothing (empty). Provides an && overload."
        },
        {
          "name": "FromMaybe",
          "parameters": [
            "const T& default_value"
          ],
          "return_type": "T",
          "logic": "Returns the value of the Maybe<>, or the provided default value if the Maybe<> is nothing (empty)."
        },
        {
          "name": "operator==",
          "parameters": [
            "const Maybe& other"
          ],
          "return_type": "bool",
          "logic": "Compares this Maybe<> to another Maybe<>. Returns true if both are either just or nothing, and if both are just, their values are equal."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const Maybe& other"
          ],
          "return_type": "bool",
          "logic": "Compares this Maybe<> to another Maybe<>. Returns true if the two Maybe<> objects are not equal."
        }
      ]
    },
    {
      "name": "Maybe<void>",
      "properties": [
        "is_valid_"
      ],
      "methods": [
        {
          "name": "IsNothing",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the Maybe<void> has no value."
        },
        {
          "name": "IsJust",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the Maybe<void> has a value."
        },
        {
          "name": "operator==",
          "parameters": [
            "const Maybe& other"
          ],
          "return_type": "bool",
          "logic": "Compares this Maybe<void> to another Maybe<void>. Returns true if both are either just or nothing."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const Maybe& other"
          ],
          "return_type": "bool",
          "logic": "Compares this Maybe<void> to another Maybe<void>. Returns true if the two Maybe<void> objects are not equal."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FromJustIsNothing",
      "parameters": [],
      "return_type": "void",
      "logic": "Called when ToChecked or FromJust is called on an empty Maybe. Likely terminates the program."
    },
    {
      "name": "Nothing",
      "parameters": [],
      "return_type": "Maybe<T>",
      "logic": "Creates a Maybe<> that has no value (a Nothing)."
    },
    {
      "name": "Just",
      "parameters": [
        "const T& t"
      ],
      "return_type": "Maybe<T>",
      "logic": "Creates a Maybe<> that has a value (a Just), copying the provided value."
    },
    {
      "name": "Just",
      "parameters": [
        "T&& t"
      ],
      "return_type": "Maybe<T>",
      "logic": "Creates a Maybe<> that has a value (a Just), moving the provided value."
    },
    {
      "name": "JustVoid",
      "parameters": [],
      "return_type": "Maybe<void>",
      "logic": "Creates a Maybe<void> that has a value (a Just)."
    }
  ]
}