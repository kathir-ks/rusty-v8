{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-local-handle.h",
  "imports": [
    "<stddef.h>",
    "<type_traits>",
    "<vector>",
    "v8-handle-base.h",
    "v8-internal.h"
  ],
  "classes": [
    {
      "name": "HandleScope",
      "properties": [
        "i_isolate_",
        "prev_next_",
        "prev_limit_",
        "scope_level_"
      ],
      "methods": [
        {
          "name": "HandleScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "HandleScope",
          "logic": "Constructor. Initializes the handle scope with an isolate."
        },
        {
          "name": "~HandleScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Cleans up the handle scope."
        },
        {
          "name": "NumberOfHandles",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "int",
          "logic": "Counts the number of allocated handles in the isolate."
        },
        {
          "name": "GetIsolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with this handle scope."
        },
        {
          "name": "CreateHandleForCurrentIsolate",
          "parameters": [
            "internal::Address value"
          ],
          "return_type": "internal::Address*",
          "logic": "Creates a handle in the current isolate's handle scope.  This function is static."
        },
        {
          "name": "Initialize",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Initializes the handle scope with an isolate."
        },
        {
          "name": "CreateHandle",
          "parameters": [
            "internal::Isolate* i_isolate",
            "internal::Address value"
          ],
          "return_type": "internal::Address*",
          "logic": "Creates a handle in the given isolate's handle scope.  This function is static and internal."
        }
      ]
    },
    {
      "name": "LocalBase",
      "properties": [],
      "methods": [
        {
          "name": "LocalBase",
          "parameters": [],
          "return_type": "LocalBase<T>",
          "logic": "Default constructor."
        },
        {
          "name": "LocalBase",
          "parameters": [
            "internal::Address ptr"
          ],
          "return_type": "LocalBase<T>",
          "logic": "Constructor. Initializes with an address."
        },
        {
          "name": "LocalBase",
          "parameters": [
            "const LocalBase<S>& other"
          ],
          "return_type": "LocalBase<T>",
          "logic": "Copy constructor. Initializes from another LocalBase."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "internal::Address value"
          ],
          "return_type": "LocalBase<T>",
          "logic": "Creates a new LocalBase instance with the given isolate and address. Static method."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "T* that"
          ],
          "return_type": "LocalBase<T>",
          "logic": "Creates a new LocalBase instance with the given isolate and pointer. Static method."
        },
        {
          "name": "FromSlot",
          "parameters": [
            "internal::Address* slot"
          ],
          "return_type": "LocalBase<T>",
          "logic": "Creates a new LocalBase instance from a slot (memory location). Static method."
        },
        {
          "name": "FromRepr",
          "parameters": [
            "internal::ValueHelper::InternalRepresentationType repr"
          ],
          "return_type": "LocalBase<T>",
          "logic": "Creates a new LocalBase instance from an internal representation. Static method."
        }
      ]
    },
    {
      "name": "Local",
      "properties": [],
      "methods": [
        {
          "name": "Local",
          "parameters": [],
          "return_type": "Local<T>",
          "logic": "Default constructor."
        },
        {
          "name": "Local",
          "parameters": [
            "Local<S> that"
          ],
          "return_type": "Local<T>",
          "logic": "Constructor for up casting. Enables assigning Local<Object> to Local<Value>."
        },
        {
          "name": "operator->",
          "parameters": [],
          "return_type": "T*",
          "logic": "Overloads the -> operator to allow direct access to the underlying object."
        },
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "T*",
          "logic": "Overloads the * operator to allow direct access to the underlying object."
        },
        {
          "name": "operator==",
          "parameters": [
            "const Local<S>& that"
          ],
          "return_type": "bool",
          "logic": "Compares two Local handles for equality. Checks if they both point to the same object."
        },
        {
          "name": "operator==",
          "parameters": [
            "const PersistentBase<S>& that"
          ],
          "return_type": "bool",
          "logic": "Compares a Local handle and a PersistentBase handle for equality. Checks if they both point to the same object."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const Local<S>& that"
          ],
          "return_type": "bool",
          "logic": "Compares two Local handles for inequality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const Persistent<S>& that"
          ],
          "return_type": "bool",
          "logic": "Compares a Local handle and a Persistent handle for inequality."
        },
        {
          "name": "Cast",
          "parameters": [
            "Local<S> that"
          ],
          "return_type": "Local<T>",
          "logic": "Casts a handle to a subclass, performing type checking in debug mode. Static method."
        },
        {
          "name": "As",
          "parameters": [],
          "return_type": "Local<S>",
          "logic": "Calls Cast() to cast a handle to a subclass."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "Local<T> that"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a new local handle pointing to the same object as the given local handle. Static method."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "const PersistentBase<T>& that"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a new local handle pointing to the same object as the given persistent handle. Static method."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "const BasicTracedReference<T>& that"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a new local handle pointing to the same object as the given traced reference. Static method."
        },
        {
          "name": "FromRepr",
          "parameters": [
            "internal::ValueHelper::InternalRepresentationType repr"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a local from an internal representation. Static method."
        },
        {
          "name": "FromSlot",
          "parameters": [
            "internal::Address* slot"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a local from an address slot. Static method."
        },
        {
          "name": "FromAddress",
          "parameters": [
            "internal::Address ptr"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a local from an address (only when V8_ENABLE_DIRECT_HANDLE is defined). Static method."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "internal::Address value"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a local from an address and isolate. Static method."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "T* that"
          ],
          "return_type": "Local<T>",
          "logic": "Creates a local from a pointer and isolate. Static method."
        },
        {
          "name": "UnsafeAs",
          "parameters": [],
          "return_type": "Local<S>",
          "logic": "Unsafely casts a local to another type without checks."
        }
      ]
    },
    {
      "name": "LocalUnchecked",
      "properties": [],
      "methods": [
        {
          "name": "LocalUnchecked",
          "parameters": [],
          "return_type": "LocalUnchecked<T>",
          "logic": "Default constructor that skips type checking."
        },
        {
          "name": "LocalUnchecked",
          "parameters": [
            "const LocalUnchecked& other"
          ],
          "return_type": "LocalUnchecked<T>",
          "logic": "Copy constructor that skips type checking."
        },
        {
          "name": "LocalUnchecked",
          "parameters": [
            "const Local<T>& other"
          ],
          "return_type": "LocalUnchecked<T>",
          "logic": "Conversion constructor from Local that skips type checking."
        }
      ]
    },
    {
      "name": "StrongRootAllocator",
      "properties": [],
      "methods": [
        {
          "name": "StrongRootAllocator",
          "parameters": [
            "HeapOrIsolateT* heap_or_isolate"
          ],
          "return_type": "StrongRootAllocator<LocalUnchecked<T>>",
          "logic": "Constructor. Initializes the allocator with a heap or isolate."
        },
        {
          "name": "StrongRootAllocator",
          "parameters": [
            "const StrongRootAllocator<U>& other"
          ],
          "return_type": "StrongRootAllocator<LocalUnchecked<T>>",
          "logic": "Copy constructor."
        },
        {
          "name": "allocate",
          "parameters": [
            "size_t n"
          ],
          "return_type": "value_type*",
          "logic": "Allocates memory for n elements."
        },
        {
          "name": "deallocate",
          "parameters": [
            "value_type* p",
            "size_t n"
          ],
          "return_type": "void",
          "logic": "Deallocates memory for n elements."
        }
      ]
    },
    {
      "name": "LocalVector",
      "properties": [
        "backing_"
      ],
      "methods": [
        {
          "name": "LocalVector",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "LocalVector",
          "logic": "Constructor that initializes the underlying vector with the given isolate."
        },
        {
          "name": "LocalVector",
          "parameters": [
            "Isolate* isolate",
            "size_t n"
          ],
          "return_type": "LocalVector",
          "logic": "Constructor that initializes the underlying vector with the given isolate and size."
        },
        {
          "name": "LocalVector",
          "parameters": [
            "Isolate* isolate",
            "std::initializer_list<Local<T>> init"
          ],
          "return_type": "LocalVector",
          "logic": "Constructor that initializes the underlying vector with the given isolate and an initializer list."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the beginning of the vector."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const iterator to the beginning of the vector."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the end of the vector."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const iterator to the end of the vector."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the vector."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the vector is empty."
        },
        {
          "name": "reserve",
          "parameters": [
            "size_t n"
          ],
          "return_type": "void",
          "logic": "Reserves space for n elements in the vector."
        },
        {
          "name": "shrink_to_fit",
          "parameters": [],
          "return_type": "void",
          "logic": "Shrinks the vector to fit the current size."
        },
        {
          "name": "operator[]",
          "parameters": [
            "size_t n"
          ],
          "return_type": "Local<T>&",
          "logic": "Returns a reference to the element at index n."
        },
        {
          "name": "operator[]",
          "parameters": [
            "size_t n"
          ],
          "return_type": "const Local<T>&",
          "logic": "Returns a const reference to the element at index n."
        },
        {
          "name": "at",
          "parameters": [
            "size_t n"
          ],
          "return_type": "Local<T>&",
          "logic": "Returns a reference to the element at index n with bounds checking."
        },
        {
          "name": "at",
          "parameters": [
            "size_t n"
          ],
          "return_type": "const Local<T>&",
          "logic": "Returns a const reference to the element at index n with bounds checking."
        },
        {
          "name": "front",
          "parameters": [],
          "return_type": "Local<T>&",
          "logic": "Returns a reference to the first element."
        },
        {
          "name": "front",
          "parameters": [],
          "return_type": "const Local<T>&",
          "logic": "Returns a const reference to the first element."
        },
        {
          "name": "back",
          "parameters": [],
          "return_type": "Local<T>&",
          "logic": "Returns a reference to the last element."
        },
        {
          "name": "back",
          "parameters": [],
          "return_type": "const Local<T>&",
          "logic": "Returns a const reference to the last element."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "Local<T>*",
          "logic": "Returns a pointer to the underlying data."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "const Local<T>*",
          "logic": "Returns a const pointer to the underlying data."
        },
        {
          "name": "insert",
          "parameters": [
            "const_iterator pos",
            "const Local<T>& value"
          ],
          "return_type": "iterator",
          "logic": "Inserts a value at the given position."
        },
        {
          "name": "insert",
          "parameters": [
            "const_iterator pos",
            "InputIt first",
            "InputIt last"
          ],
          "return_type": "iterator",
          "logic": "Inserts a range of values at the given position."
        },
        {
          "name": "insert",
          "parameters": [
            "const_iterator pos",
            "std::initializer_list<Local<T>> init"
          ],
          "return_type": "iterator",
          "logic": "Inserts an initializer list of values at the given position."
        },
        {
          "name": "operator=",
          "parameters": [
            "std::initializer_list<Local<T>> init"
          ],
          "return_type": "LocalVector<T>&",
          "logic": "Assigns the vector with values from an initializer list."
        },
        {
          "name": "push_back",
          "parameters": [
            "const Local<T>& x"
          ],
          "return_type": "void",
          "logic": "Appends a value to the end of the vector."
        },
        {
          "name": "pop_back",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes the last element from the vector."
        },
        {
          "name": "emplace_back",
          "parameters": [
            "Args&&... args"
          ],
          "return_type": "void",
          "logic": "Constructs an element in-place at the end of the vector."
        },
        {
          "name": "clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes all elements from the vector."
        },
        {
          "name": "resize",
          "parameters": [
            "size_t n"
          ],
          "return_type": "void",
          "logic": "Resizes the vector."
        },
        {
          "name": "swap",
          "parameters": [
            "LocalVector<T>& other"
          ],
          "return_type": "void",
          "logic": "Swaps the contents of two LocalVector objects."
        },
        {
          "name": "operator==",
          "parameters": [
            "const LocalVector<T>& x",
            "const LocalVector<T>& y"
          ],
          "return_type": "bool",
          "logic": "Compares two LocalVector objects for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const LocalVector<T>& x",
            "const LocalVector<T>& y"
          ],
          "return_type": "bool",
          "logic": "Compares two LocalVector objects for inequality."
        },
        {
          "name": "operator<",
          "parameters": [
            "const LocalVector<T>& x",
            "const LocalVector<T>& y"
          ],
          "return_type": "bool",
          "logic": "Compares two LocalVector objects for less than."
        },
        {
          "name": "operator>",
          "parameters": [
            "const LocalVector<T>& x",
            "const LocalVector<T>& y"
          ],
          "return_type": "bool",
          "logic": "Compares two LocalVector objects for greater than."
        },
        {
          "name": "operator<=",
          "parameters": [
            "const LocalVector<T>& x",
            "const LocalVector<T>& y"
          ],
          "return_type": "bool",
          "logic": "Compares two LocalVector objects for less than or equal to."
        },
        {
          "name": "operator>=",
          "parameters": [
            "const LocalVector<T>& x",
            "const LocalVector<T>& y"
          ],
          "return_type": "bool",
          "logic": "Compares two LocalVector objects for greater than or equal to."
        }
      ]
    },
    {
      "name": "MaybeLocal",
      "properties": [
        "local_"
      ],
      "methods": [
        {
          "name": "MaybeLocal",
          "parameters": [],
          "return_type": "MaybeLocal<T>",
          "logic": "Default constructor.  Creates an empty MaybeLocal."
        },
        {
          "name": "MaybeLocal",
          "parameters": [
            "Local<S> that"
          ],
          "return_type": "MaybeLocal<T>",
          "logic": "Constructor.  Creates a MaybeLocal from a Local."
        },
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the MaybeLocal is empty."
        },
        {
          "name": "ToLocal",
          "parameters": [
            "Local<S>* out"
          ],
          "return_type": "bool",
          "logic": "Converts this MaybeLocal<> to a Local<>. If this MaybeLocal<> is empty, |false| is returned and |out| is assigned with nullptr."
        },
        {
          "name": "ToLocalChecked",
          "parameters": [],
          "return_type": "Local<T>",
          "logic": "Converts this MaybeLocal<> to a Local<>. If this MaybeLocal<> is empty, V8 will crash the process."
        },
        {
          "name": "FromMaybe",
          "parameters": [
            "Local<S> default_value"
          ],
          "return_type": "Local<S>",
          "logic": "Converts this MaybeLocal<> to a Local<>, using a default value if this MaybeLocal<> is empty."
        },
        {
          "name": "Cast",
          "parameters": [
            "MaybeLocal<S> that"
          ],
          "return_type": "MaybeLocal<T>",
          "logic": "Cast a handle to a subclass, e.g. MaybeLocal<Value> to MaybeLocal<Object>."
        },
        {
          "name": "As",
          "parameters": [],
          "return_type": "MaybeLocal<S>",
          "logic": "Calling this is equivalent to MaybeLocal<S>::Cast()."
        }
      ]
    },
    {
      "name": "EscapableHandleScopeBase",
      "properties": [
        "escape_slot_"
      ],
      "methods": [
        {
          "name": "EscapableHandleScopeBase",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "EscapableHandleScopeBase",
          "logic": "Constructor. Initializes the escapable handle scope with an isolate."
        },
        {
          "name": "~EscapableHandleScopeBase",
          "parameters": [],
          "return_type": "EscapableHandleScopeBase",
          "logic": "Default Destructor."
        },
        {
          "name": "EscapeSlot",
          "parameters": [
            "internal::Address* escape_value"
          ],
          "return_type": "internal::Address*",
          "logic": "Pushes the value into the previous scope and returns a handle to it. Cannot be called twice."
        }
      ]
    },
    {
      "name": "EscapableHandleScope",
      "properties": [],
      "methods": [
        {
          "name": "EscapableHandleScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "EscapableHandleScope",
          "logic": "Constructor. Initializes the escapable handle scope with an isolate."
        },
        {
          "name": "~EscapableHandleScope",
          "parameters": [],
          "return_type": "EscapableHandleScope",
          "logic": "Default Destructor."
        },
        {
          "name": "Escape",
          "parameters": [
            "Local<T> value"
          ],
          "return_type": "Local<T>",
          "logic": "Escapes a local handle from the current scope. Pushes the value into the previous scope and returns a handle to it."
        },
        {
          "name": "EscapeMaybe",
          "parameters": [
            "MaybeLocal<T> value"
          ],
          "return_type": "MaybeLocal<T>",
          "logic": "Escapes a maybe local handle from the current scope. Pushes the value into the previous scope and returns a handle to it."
        }
      ]
    },
    {
      "name": "SealHandleScope",
      "properties": [
        "i_isolate_",
        "prev_limit_",
        "prev_sealed_level_"
      ],
      "methods": [
        {
          "name": "SealHandleScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "SealHandleScope",
          "logic": "Constructor. Initializes the seal handle scope with an isolate."
        },
        {
          "name": "~SealHandleScope",
          "parameters": [],
          "return_type": "SealHandleScope",
          "logic": "Destructor. Restores the previous handle scope limit."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ToLocalEmpty",
      "parameters": [],
      "return_type": "void",
      "logic": "Called when ToLocalChecked is called on an empty Local.  This function is external."
    }
  ]
}