{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-value.h",
  "imports": [
    "v8-data.h",
    "v8-internal.h",
    "v8-local-handle.h",
    "v8-maybe.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Value",
      "properties": [],
      "methods": [
        {
          "name": "IsUndefined",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is the undefined value (value === undefined in JS)."
        },
        {
          "name": "IsNull",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is the null value (value === null in JS)."
        },
        {
          "name": "IsNullOrUndefined",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is either the null or the undefined value (value == null in JS)."
        },
        {
          "name": "IsTrue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is true (value === true in JS)."
        },
        {
          "name": "IsFalse",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is false (value === false in JS)."
        },
        {
          "name": "IsName",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a symbol or a string (typeof value === 'string' || typeof value === 'symbol' in JS)."
        },
        {
          "name": "IsString",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a string (typeof value === 'string' in JS)."
        },
        {
          "name": "IsSymbol",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a symbol (typeof value === 'symbol' in JS)."
        },
        {
          "name": "IsFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a function (typeof value === 'function' in JS)."
        },
        {
          "name": "IsArray",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an array."
        },
        {
          "name": "IsObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an object."
        },
        {
          "name": "IsBigInt",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a bigint (typeof value === 'bigint' in JS)."
        },
        {
          "name": "IsBoolean",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is boolean (typeof value === 'boolean' in JS)."
        },
        {
          "name": "IsNumber",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a number (typeof value === 'number' in JS)."
        },
        {
          "name": "IsExternal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an External object."
        },
        {
          "name": "IsInt32",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a 32-bit signed integer."
        },
        {
          "name": "IsUint32",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a 32-bit unsigned integer."
        },
        {
          "name": "IsDate",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Date."
        },
        {
          "name": "IsArgumentsObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Arguments object."
        },
        {
          "name": "IsBigIntObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a BigInt object."
        },
        {
          "name": "IsBooleanObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Boolean object."
        },
        {
          "name": "IsNumberObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Number object."
        },
        {
          "name": "IsStringObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a String object."
        },
        {
          "name": "IsSymbolObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Symbol object."
        },
        {
          "name": "IsNativeError",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a NativeError."
        },
        {
          "name": "IsRegExp",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a RegExp."
        },
        {
          "name": "IsAsyncFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an async function."
        },
        {
          "name": "IsGeneratorFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Generator function."
        },
        {
          "name": "IsGeneratorObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Generator object (iterator)."
        },
        {
          "name": "IsPromise",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Promise."
        },
        {
          "name": "IsMap",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Map."
        },
        {
          "name": "IsSet",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Set."
        },
        {
          "name": "IsMapIterator",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Map Iterator."
        },
        {
          "name": "IsSetIterator",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Set Iterator."
        },
        {
          "name": "IsWeakMap",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a WeakMap."
        },
        {
          "name": "IsWeakSet",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a WeakSet."
        },
        {
          "name": "IsWeakRef",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a WeakRef."
        },
        {
          "name": "IsArrayBuffer",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an ArrayBuffer."
        },
        {
          "name": "IsArrayBufferView",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an ArrayBufferView."
        },
        {
          "name": "IsTypedArray",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is one of TypedArrays."
        },
        {
          "name": "IsUint8Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Uint8Array."
        },
        {
          "name": "IsUint8ClampedArray",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Uint8ClampedArray."
        },
        {
          "name": "IsInt8Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Int8Array."
        },
        {
          "name": "IsUint16Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Uint16Array."
        },
        {
          "name": "IsInt16Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Int16Array."
        },
        {
          "name": "IsUint32Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Uint32Array."
        },
        {
          "name": "IsInt32Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is an Int32Array."
        },
        {
          "name": "IsFloat16Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Float16Array."
        },
        {
          "name": "IsFloat32Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Float32Array."
        },
        {
          "name": "IsFloat64Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a Float64Array."
        },
        {
          "name": "IsBigInt64Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a BigInt64Array."
        },
        {
          "name": "IsBigUint64Array",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a BigUint64Array."
        },
        {
          "name": "IsDataView",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a DataView."
        },
        {
          "name": "IsSharedArrayBuffer",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a SharedArrayBuffer."
        },
        {
          "name": "IsProxy",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a JavaScript Proxy."
        },
        {
          "name": "IsWasmMemoryObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a WasmMemoryObject."
        },
        {
          "name": "IsWasmMemoryMapDescriptor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a WasmMemoryMapDescriptor."
        },
        {
          "name": "IsWasmModuleObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is a WasmModuleObject."
        },
        {
          "name": "IsWasmNull",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this value is the WasmNull object."
        },
        {
          "name": "IsModuleNamespaceObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the value is a Module Namespace Object."
        },
        {
          "name": "IsPrimitive",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the value is a primitive."
        },
        {
          "name": "ToPrimitive",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Primitive>",
          "logic": "Performs ToPrimitive(value) as specified in the ECMAScript specification."
        },
        {
          "name": "ToNumeric",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Numeric>",
          "logic": "Performs ToNumeric(value) as specified in the ECMAScript specification."
        },
        {
          "name": "ToBigInt",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<BigInt>",
          "logic": "Performs the equivalent of BigInt(value) in JS."
        },
        {
          "name": "ToNumber",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Number>",
          "logic": "Performs the equivalent of Number(value) in JS."
        },
        {
          "name": "ToString",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<String>",
          "logic": "Performs the equivalent of String(value) in JS."
        },
        {
          "name": "ToDetailString",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<String>",
          "logic": "Provides a string representation of this value usable for debugging."
        },
        {
          "name": "ToObject",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Object>",
          "logic": "Performs the equivalent of Tagged<Object>(value) in JS."
        },
        {
          "name": "ToInteger",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Integer>",
          "logic": "Performs the equivalent of Number(value) in JS and converts the result to an integer."
        },
        {
          "name": "ToUint32",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Uint32>",
          "logic": "Performs the equivalent of Number(value) in JS and converts the result to an unsigned 32-bit integer."
        },
        {
          "name": "ToInt32",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Int32>",
          "logic": "Performs the equivalent of Number(value) in JS and converts the result to a signed 32-bit integer."
        },
        {
          "name": "ToBoolean",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Local<Boolean>",
          "logic": "Performs the equivalent of Boolean(value) in JS."
        },
        {
          "name": "ToArrayIndex",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Uint32>",
          "logic": "Attempts to convert a string to an array index. Returns an empty handle if the conversion fails."
        },
        {
          "name": "BooleanValue",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Returns the equivalent of ToBoolean()->Value()."
        },
        {
          "name": "NumberValue",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "Maybe<double>",
          "logic": "Returns the equivalent of ToNumber()->Value()."
        },
        {
          "name": "IntegerValue",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "Maybe<int64_t>",
          "logic": "Returns the equivalent of ToInteger()->Value()."
        },
        {
          "name": "Uint32Value",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "Maybe<uint32_t>",
          "logic": "Returns the equivalent of ToUint32()->Value()."
        },
        {
          "name": "Int32Value",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "Maybe<int32_t>",
          "logic": "Returns the equivalent of ToInt32()->Value()."
        },
        {
          "name": "Equals",
          "parameters": [
            "Local<Context> context",
            "Local<Value> that"
          ],
          "return_type": "Maybe<bool>",
          "logic": "Implements JS ==."
        },
        {
          "name": "StrictEquals",
          "parameters": [
            "Local<Value> that"
          ],
          "return_type": "bool",
          "logic": "Checks for strict equality (===)."
        },
        {
          "name": "SameValue",
          "parameters": [
            "Local<Value> that"
          ],
          "return_type": "bool",
          "logic": "Checks if the two values are the same value (SameValueZero)."
        },
        {
          "name": "Cast",
          "parameters": [
            "T* value"
          ],
          "return_type": "Value*",
          "logic": "Casts a pointer to a Value*."
        },
        {
          "name": "TypeOf",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "Local<String>",
          "logic": "Returns the type of the value as a string."
        },
        {
          "name": "InstanceOf",
          "parameters": [
            "Local<Context> context",
            "Local<Object> object"
          ],
          "return_type": "Maybe<bool>",
          "logic": "Checks if the value is an instance of the given object."
        },
        {
          "name": "GetHash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Get the hash of this value."
        }
      ]
    },
    {
      "name": "TypecheckWitness",
      "properties": [
        "cached_map_"
      ],
      "methods": [
        {
          "name": "TypecheckWitness",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": null,
          "logic": "Constructor for TypecheckWitness."
        },
        {
          "name": "Matches",
          "parameters": [
            "Local<Value> candidate"
          ],
          "return_type": "bool",
          "logic": "Checks whether {candidate} can cheaply be identified as being \"similar\" to the {baseline} that was passed to {Update} earlier."
        },
        {
          "name": "Update",
          "parameters": [
            "Local<Value> baseline"
          ],
          "return_type": "void",
          "logic": "Remembers a new baseline for future {Matches} queries."
        }
      ]
    }
  ],
  "functions": []
}