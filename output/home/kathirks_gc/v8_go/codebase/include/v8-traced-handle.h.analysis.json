{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-traced-handle.h",
  "imports": [
    "<stddef.h>",
    "<stdint.h>",
    "<stdio.h>",
    "<atomic>",
    "<memory>",
    "<type_traits>",
    "<utility>",
    "\"v8-internal.h\"",
    "\"v8-local-handle.h\"",
    "\"v8-weak-callback-info.h\"",
    "\"v8config.h\""
  ],
  "classes": [
    {
      "name": "TracedReferenceBase",
      "properties": [],
      "methods": [
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Destroys the underlying storage cell. After this call, IsEmpty will return true."
        },
        {
          "name": "Get",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Local<Data>",
          "logic": "Constructs a Local<Data> from this handle.  Returns an empty Local if the TracedReference is empty."
        },
        {
          "name": "IsEmptyThreadSafe",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this TracedReference is empty in a thread-safe way."
        },
        {
          "name": "SetSlotThreadSafe",
          "parameters": [
            "internal::Address* new_val"
          ],
          "return_type": "void",
          "logic": "Updates the slot in a thread-safe way."
        },
        {
          "name": "GetSlotThreadSafe",
          "parameters": [],
          "return_type": "const internal::Address*",
          "logic": "Gets the slot in a thread-safe way."
        },
        {
          "name": "CheckValue",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks the validity of the handle's value."
        }
      ]
    },
    {
      "name": "BasicTracedReference",
      "properties": [],
      "methods": [
        {
          "name": "Get",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Local<T>",
          "logic": "Constructs a Local<T> from this handle."
        },
        {
          "name": "As",
          "parameters": [],
          "return_type": "BasicTracedReference<S>&",
          "logic": "Casts the BasicTracedReference to a BasicTracedReference of a different type."
        }
      ]
    },
    {
      "name": "TracedReference",
      "properties": [],
      "methods": [
        {
          "name": "TracedReference",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor for TracedReference."
        },
        {
          "name": "TracedReference",
          "parameters": [
            "Isolate* isolate",
            "Local<S> that"
          ],
          "return_type": "void",
          "logic": "Constructs a TracedReference from a Local. Creates a new storage cell pointing to the same object if the Local is non-empty."
        },
        {
          "name": "TracedReference",
          "parameters": [
            "Isolate* isolate",
            "Local<S> that",
            "IsDroppable"
          ],
          "return_type": "void",
          "logic": "Constructs a droppable TracedReference from a Local. Creates a new storage cell pointing to the same object if the Local is non-empty. 'Droppable' means that V8 is free to reclaim the pointee if it is unmodified and otherwise unreachable"
        },
        {
          "name": "TracedReference",
          "parameters": [
            "TracedReference&& other"
          ],
          "return_type": "void",
          "logic": "Move constructor initializing TracedReference from an existing one."
        },
        {
          "name": "TracedReference",
          "parameters": [
            "TracedReference<S>&& other"
          ],
          "return_type": "void",
          "logic": "Move constructor initializing TracedReference from an existing one."
        },
        {
          "name": "TracedReference",
          "parameters": [
            "const TracedReference& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor initializing TracedReference from an existing one."
        },
        {
          "name": "TracedReference",
          "parameters": [
            "const TracedReference<S>& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor initializing TracedReference from an existing one."
        },
        {
          "name": "operator=",
          "parameters": [
            "TracedReference&& rhs"
          ],
          "return_type": "TracedReference&",
          "logic": "Move assignment operator."
        },
        {
          "name": "operator=",
          "parameters": [
            "TracedReference<S>&& rhs"
          ],
          "return_type": "TracedReference&",
          "logic": "Move assignment operator."
        },
        {
          "name": "operator=",
          "parameters": [
            "const TracedReference& rhs"
          ],
          "return_type": "TracedReference&",
          "logic": "Copy assignment operator."
        },
        {
          "name": "operator=",
          "parameters": [
            "const TracedReference<S>& rhs"
          ],
          "return_type": "TracedReference&",
          "logic": "Copy assignment operator."
        },
        {
          "name": "Reset",
          "parameters": [
            "Isolate* isolate",
            "const Local<S>& other"
          ],
          "return_type": "void",
          "logic": "Resets the reference and creates a new reference from `other` if it is non-empty."
        },
        {
          "name": "Reset",
          "parameters": [
            "Isolate* isolate",
            "const Local<S>& other",
            "IsDroppable"
          ],
          "return_type": "void",
          "logic": "Resets the reference and creates a new droppable reference from `other` if it is non-empty."
        },
        {
          "name": "As",
          "parameters": [],
          "return_type": "TracedReference<S>&",
          "logic": "Casts the TracedReference to a TracedReference of a different type."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GlobalizeTracedReference",
      "parameters": [
        "Isolate* isolate",
        "Address value",
        "Address* slot",
        "TracedReferenceStoreMode store_mode",
        "TracedReferenceHandling reference_handling"
      ],
      "return_type": "Address*",
      "logic": "Globalizes a traced reference."
    },
    {
      "name": "MoveTracedReference",
      "parameters": [
        "Address** from",
        "Address** to"
      ],
      "return_type": "void",
      "logic": "Moves a traced reference."
    },
    {
      "name": "CopyTracedReference",
      "parameters": [
        "const Address* const* from",
        "Address** to"
      ],
      "return_type": "void",
      "logic": "Copies a traced reference."
    },
    {
      "name": "DisposeTracedReference",
      "parameters": [
        "Address* global_handle"
      ],
      "return_type": "void",
      "logic": "Disposes of a traced reference."
    }
  ]
}