{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8config.h",
  "imports": [
    "memory",
    "sys/cdefs.h",
    "TargetConditionals.h",
    "features.h",
    "zos-base.h",
    "v8-gn.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "V8_GLIBC_PREREQ",
      "parameters": [
        "major",
        "minor"
      ],
      "return_type": "int",
      "logic": "Macro to check if the GNU C library (or compatible) version is greater than or equal to the specified major and minor version. Returns 1 if true, 0 otherwise."
    },
    {
      "name": "V8_GNUC_PREREQ",
      "parameters": [
        "major",
        "minor",
        "patchlevel"
      ],
      "return_type": "int",
      "logic": "Macro to check if the GNU C++ compiler (or compatible) version is greater than or equal to the specified major, minor, and patchlevel version. Returns 1 if true, 0 otherwise."
    },
    {
      "name": "V8_INLINE",
      "parameters": [],
      "return_type": "inline",
      "logic": "Macro to hint to the compiler to inline the function. Expands to 'inline __attribute__((always_inline))' if not in debug mode and if the compiler supports the always_inline attribute.  Expands to '__forceinline' for MSVC when not in debug mode, otherwise just 'inline'."
    },
    {
      "name": "V8_INLINE_STATEMENT",
      "parameters": [],
      "return_type": "inline",
      "logic": "Macro used to force better inlining of calls in a statement. Expands to `[[clang::always_inline]]` when using Clang and the always_inline attribute is available, and not in DEBUG mode."
    },
    {
      "name": "V8_ASSUME",
      "parameters": [
        "condition"
      ],
      "return_type": "void",
      "logic": "Macro to provide branch prediction information and potentially mark code as unreachable if the condition is false. Uses __builtin_assume, __builtin_unreachable or DCHECK depending on compiler support and build configuration."
    },
    {
      "name": "V8_ASSUME_ALIGNED",
      "parameters": [
        "ptr",
        "alignment"
      ],
      "return_type": "void",
      "logic": "Macro to provide alignment information to the compiler. Uses std::assume_aligned or __builtin_assume_aligned if available, otherwise no-op."
    },
    {
      "name": "V8_CONST",
      "parameters": [],
      "return_type": "const",
      "logic": "Macro to mark a function as const, allowing the compiler to hoist and fold multiple calls together. Uses the 'const' attribute if supported by the compiler."
    },
    {
      "name": "V8_CONSTINIT",
      "parameters": [],
      "return_type": "require_constant_initialization",
      "logic": "Macro to mark a declaration as requiring constant initialization.Uses the 'require_constant_initialization' attribute if supported by the compiler."
    },
    {
      "name": "V8_NONNULL",
      "parameters": [
        "..."
      ],
      "return_type": "nonnull",
      "logic": "Macro to mark function arguments as non-null. Uses the 'nonnull' attribute if supported by the compiler."
    },
    {
      "name": "V8_NOINLINE",
      "parameters": [],
      "return_type": "noinline",
      "logic": "Macro to tell the compiler to never inline a particular function. Uses the 'noinline' attribute or '__declspec(noinline)' if supported by the compiler."
    },
    {
      "name": "V8_PRESERVE_MOST",
      "parameters": [],
      "return_type": "preserve_most",
      "logic": "Macro to change the calling conventions to preserve all registers.  Uses `__attribute__((preserve_most))` if supported by the compiler and target architecture."
    },
    {
      "name": "V8_DEPRECATED",
      "parameters": [
        "message"
      ],
      "return_type": "deprecated",
      "logic": "Macro to mark classes or functions as deprecated. Uses [[deprecated(message)]] attribute if `V8_DEPRECATION_WARNINGS` is defined."
    },
    {
      "name": "V8_DEPRECATE_SOON",
      "parameters": [
        "message"
      ],
      "return_type": "deprecated",
      "logic": "Macro to mark classes or functions as soon to be deprecated. Uses [[deprecated(message)]] attribute if `V8_IMMINENT_DEPRECATION_WARNINGS` is defined."
    },
    {
      "name": "START_ALLOW_USE_DEPRECATED",
      "parameters": [],
      "return_type": "pragma",
      "logic": "Macro that starts a block of code where deprecated warnings are disabled."
    },
    {
      "name": "END_ALLOW_USE_DEPRECATED",
      "parameters": [],
      "return_type": "pragma",
      "logic": "Macro that ends a block of code where deprecated warnings are disabled."
    },
    {
      "name": "ALLOW_COPY_AND_MOVE_WITH_DEPRECATED_FIELDS",
      "parameters": [
        "ClassName"
      ],
      "return_type": "void",
      "logic": "Macro to create default copy and move constructors / assignment operators, while disabling deprecated warnings. `ClassName` is the name of the type/class for the operator."
    },
    {
      "name": "V8_ENUM_DEPRECATED",
      "parameters": [
        "message"
      ],
      "return_type": "void",
      "logic": "Macro to mark enum as deprecated. Uses V8_DEPRECATED(message) if it supports."
    },
    {
      "name": "V8_ENUM_DEPRECATE_SOON",
      "parameters": [
        "message"
      ],
      "return_type": "void",
      "logic": "Macro to mark enum as deprecated soon. Uses V8_DEPRECATE_SOON(message) if it supports."
    },
    {
      "name": "V8_UNLIKELY",
      "parameters": [
        "condition"
      ],
      "return_type": "bool",
      "logic": "Macro to provide branch prediction information to the compiler that the condition is unlikely to be true. Uses __builtin_expect if supported, otherwise just returns the condition."
    },
    {
      "name": "V8_LIKELY",
      "parameters": [
        "condition"
      ],
      "return_type": "bool",
      "logic": "Macro to provide branch prediction information to the compiler that the condition is likely to be true. Uses __builtin_expect if supported, otherwise just returns the condition."
    },
    {
      "name": "V8_WARN_UNUSED_RESULT",
      "parameters": [],
      "return_type": "warn_unused_result",
      "logic": "Macro to annotate a function indicating the caller must examine the return value.  Uses the 'warn_unused_result' attribute if supported."
    },
    {
      "name": "V8_WEAK",
      "parameters": [],
      "return_type": "weak",
      "logic": "Macro to annotate functions/variables as weak to allow overriding the symbol.  Uses the 'weak' attribute if supported."
    },
    {
      "name": "V8_NODISCARD",
      "parameters": [],
      "return_type": "nodiscard",
      "logic": "Macro to annotate a class or constructor indicating the caller must assign the constructed instances. Uses [[nodiscard]] attribute if supported."
    },
    {
      "name": "V8_NO_UNIQUE_ADDRESS",
      "parameters": [],
      "return_type": "no_unique_address",
      "logic": "Macro to annotate a data member allowing tail padding to overlap other members of the enclosing class.  Uses [[no_unique_address]] or [[msvc::no_unique_address]] attribute if supported."
    },
    {
      "name": "V8_TRIVIAL_ABI",
      "parameters": [],
      "return_type": "trivial_abi",
      "logic": "Macro to mark a type as being eligible for the \"trivial\" ABI despite having a non-trivial destructor or copy/move constructor. Uses the [[clang::trivial_abi]] attribute if supported."
    },
    {
      "name": "V8_CLANG_NO_SANITIZE",
      "parameters": [
        "what"
      ],
      "return_type": "no_sanitize",
      "logic": "Helper macro to define no_sanitize attributes only with clang."
    }
  ]
}