{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-context.h",
  "imports": [
    "<stdint.h>",
    "<vector>",
    "v8-data.h",
    "v8-local-handle.h",
    "v8-maybe.h",
    "v8-snapshot.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "ExtensionConfiguration",
      "properties": [
        "name_count_",
        "names_"
      ],
      "methods": [
        {
          "name": "ExtensionConfiguration",
          "parameters": [],
          "return_type": "ExtensionConfiguration",
          "logic": "Constructor that initializes name_count_ to 0 and names_ to nullptr."
        },
        {
          "name": "ExtensionConfiguration",
          "parameters": [
            "int name_count",
            "const char* names[]"
          ],
          "return_type": "ExtensionConfiguration",
          "logic": "Constructor that initializes name_count_ and names_ with the given parameters."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const char**",
          "logic": "Returns a pointer to the beginning of the names_ array."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const char**",
          "logic": "Returns a pointer to the end of the names_ array."
        }
      ]
    },
    {
      "name": "Context",
      "properties": [],
      "methods": [
        {
          "name": "Global",
          "parameters": [],
          "return_type": "Local<Object>",
          "logic": "Returns the global proxy object associated with this context."
        },
        {
          "name": "DetachGlobal",
          "parameters": [],
          "return_type": "void",
          "logic": "Detaches the global object from its context so it can be reused."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "ExtensionConfiguration* extensions",
            "MaybeLocal<ObjectTemplate> global_template",
            "MaybeLocal<Value> global_object",
            "DeserializeInternalFieldsCallback internal_fields_deserializer",
            "MicrotaskQueue* microtask_queue",
            "DeserializeContextDataCallback context_data_deserializer",
            "DeserializeAPIWrapperCallback api_wrapper_deserializer"
          ],
          "return_type": "Local<Context>",
          "logic": "Creates a new context with the specified isolate, extensions, global template, global object, deserialization callbacks and microtask queue."
        },
        {
          "name": "FromSnapshot",
          "parameters": [
            "Isolate* isolate",
            "size_t context_snapshot_index",
            "DeserializeInternalFieldsCallback internal_fields_deserializer",
            "ExtensionConfiguration* extensions",
            "MaybeLocal<Value> global_object",
            "MicrotaskQueue* microtask_queue",
            "DeserializeContextDataCallback context_data_deserializer",
            "DeserializeAPIWrapperCallback api_wrapper_deserializer"
          ],
          "return_type": "MaybeLocal<Context>",
          "logic": "Creates a new context from a context snapshot."
        },
        {
          "name": "NewRemoteContext",
          "parameters": [
            "Isolate* isolate",
            "Local<ObjectTemplate> global_template",
            "MaybeLocal<Value> global_object"
          ],
          "return_type": "MaybeLocal<Object>",
          "logic": "Returns a global object that isn't backed by an actual context."
        },
        {
          "name": "SetSecurityToken",
          "parameters": [
            "Local<Value> token"
          ],
          "return_type": "void",
          "logic": "Sets the security token for the context."
        },
        {
          "name": "UseDefaultSecurityToken",
          "parameters": [],
          "return_type": "void",
          "logic": "Restores the security token to the default value."
        },
        {
          "name": "GetSecurityToken",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Returns the security token of this context."
        },
        {
          "name": "Enter",
          "parameters": [],
          "return_type": "void",
          "logic": "Enters this context, making it the current context."
        },
        {
          "name": "Exit",
          "parameters": [],
          "return_type": "void",
          "logic": "Exits this context, restoring the previous context."
        },
        {
          "name": "DeepFreezeDelegate",
          "properties": [],
          "methods": [
            {
              "name": "FreezeEmbedderObjectAndGetChildren",
              "parameters": [
                "Local<Object> obj",
                "LocalVector<Object>& children_out"
              ],
              "return_type": "bool",
              "logic": "Performs embedder-specific operations to freeze the provided embedder object."
            }
          ]
        },
        {
          "name": "DeepFreeze",
          "parameters": [
            "DeepFreezeDelegate* delegate"
          ],
          "return_type": "Maybe<void>",
          "logic": "Attempts to recursively freeze all objects reachable from this context."
        },
        {
          "name": "GetIsolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with this context."
        },
        {
          "name": "GetMicrotaskQueue",
          "parameters": [],
          "return_type": "MicrotaskQueue*",
          "logic": "Returns the microtask queue associated with a current context."
        },
        {
          "name": "SetMicrotaskQueue",
          "parameters": [
            "MicrotaskQueue* queue"
          ],
          "return_type": "void",
          "logic": "Sets the microtask queue associated with a current context."
        },
        {
          "name": "GetNumberOfEmbedderDataFields",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Return the number of fields allocated for embedder data."
        },
        {
          "name": "GetEmbedderData",
          "parameters": [
            "int index"
          ],
          "return_type": "Local<Value>",
          "logic": "Gets the embedder data with the given index."
        },
        {
          "name": "GetExtrasBindingObject",
          "parameters": [],
          "return_type": "Local<Object>",
          "logic": "Gets the binding object used by V8 extras."
        },
        {
          "name": "SetEmbedderData",
          "parameters": [
            "int index",
            "Local<Value> value"
          ],
          "return_type": "void",
          "logic": "Sets the embedder data with the given index."
        },
        {
          "name": "GetAlignedPointerFromEmbedderData",
          "parameters": [
            "Isolate* isolate",
            "int index"
          ],
          "return_type": "void*",
          "logic": "Gets a 2-byte-aligned native pointer from the embedder data with the given index."
        },
        {
          "name": "GetAlignedPointerFromEmbedderData",
          "parameters": [
            "int index"
          ],
          "return_type": "void*",
          "logic": "Gets a 2-byte-aligned native pointer from the embedder data with the given index."
        },
        {
          "name": "SetAlignedPointerInEmbedderData",
          "parameters": [
            "int index",
            "void* value"
          ],
          "return_type": "void",
          "logic": "Sets a 2-byte-aligned native pointer in the embedder data with the given index."
        },
        {
          "name": "AllowCodeGenerationFromStrings",
          "parameters": [
            "bool allow"
          ],
          "return_type": "void",
          "logic": "Controls whether code generation from strings is allowed."
        },
        {
          "name": "IsCodeGenerationFromStringsAllowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if code generation from strings is allowed for the context."
        },
        {
          "name": "SetErrorMessageForCodeGenerationFromStrings",
          "parameters": [
            "Local<String> message"
          ],
          "return_type": "void",
          "logic": "Sets the error description for the exception that is thrown when code generation from strings is not allowed."
        },
        {
          "name": "SetErrorMessageForWasmCodeGeneration",
          "parameters": [
            "Local<String> message"
          ],
          "return_type": "void",
          "logic": "Sets the error description for the exception that is thrown when wasm code generation is not allowed."
        },
        {
          "name": "GetDataFromSnapshotOnce",
          "parameters": [
            "size_t index"
          ],
          "return_type": "MaybeLocal<T>",
          "logic": "Return data that was previously attached to the context snapshot."
        },
        {
          "name": "SetAbortScriptExecution",
          "parameters": [
            "AbortScriptExecutionCallback callback"
          ],
          "return_type": "void",
          "logic": "If callback is set, abort any attempt to execute JavaScript in this context, call the specified callback, and throw an exception."
        },
        {
          "name": "SetPromiseHooks",
          "parameters": [
            "Local<Function> init_hook",
            "Local<Function> before_hook",
            "Local<Function> after_hook",
            "Local<Function> resolve_hook"
          ],
          "return_type": "void",
          "logic": "Set or clear hooks to be invoked for promise lifecycle operations."
        },
        {
          "name": "HasTemplateLiteralObject",
          "parameters": [
            "Local<Value> object"
          ],
          "return_type": "bool",
          "logic": "Checks if the given object is a template literal object."
        },
        {
          "name": "Scope",
          "properties": [],
          "methods": [
            {
              "name": "Scope",
              "parameters": [
                "Local<Context> context"
              ],
              "return_type": "Scope",
              "logic": "Constructor that enters the context."
            },
            {
              "name": "~Scope",
              "parameters": [],
              "return_type": "Scope",
              "logic": "Destructor that exits the context."
            }
          ]
        },
        {
          "name": "BackupIncumbentScope",
          "properties": [
            "backup_incumbent_context_",
            "js_stack_comparable_address_",
            "prev_"
          ],
          "methods": [
            {
              "name": "BackupIncumbentScope",
              "parameters": [
                "Local<Context> backup_incumbent_context"
              ],
              "return_type": "BackupIncumbentScope",
              "logic": "Pushes |backup_incumbent_context| onto the backup incumbent settings object stack."
            },
            {
              "name": "~BackupIncumbentScope",
              "parameters": [],
              "return_type": "BackupIncumbentScope",
              "logic": "Destructor for BackupIncumbentScope."
            },
            {
              "name": "JSStackComparableAddressPrivate",
              "parameters": [],
              "return_type": "uintptr_t",
              "logic": "Returns js_stack_comparable_address_."
            }
          ]
        },
        {
          "name": "Cast",
          "parameters": [
            "Data* data"
          ],
          "return_type": "Context*",
          "logic": "Casts a Data* to a Context*."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Context::GetEmbedderData",
      "parameters": [
        "int index"
      ],
      "return_type": "Local<Value>",
      "logic": "Gets the embedder data at the given index.  Optimized version with inlined access."
    },
    {
      "name": "Context::GetAlignedPointerFromEmbedderData",
      "parameters": [
        "Isolate* isolate",
        "int index"
      ],
      "return_type": "void*",
      "logic": "Gets the aligned pointer from embedder data at a specified index.  Optimized version with inlined access."
    },
    {
      "name": "Context::GetAlignedPointerFromEmbedderData",
      "parameters": [
        "int index"
      ],
      "return_type": "void*",
      "logic": "Gets the aligned pointer from embedder data at a specified index.  Optimized version with inlined access. Uses isolate from context."
    },
    {
      "name": "Context::GetDataFromSnapshotOnce",
      "parameters": [
        "size_t index"
      ],
      "return_type": "MaybeLocal<T>",
      "logic": "Return data from the context snapshot at the given index, and removes the reference to it.  Uses templates."
    },
    {
      "name": "Context::Cast",
      "parameters": [
        "v8::Data* data"
      ],
      "return_type": "Context*",
      "logic": "Casts a v8::Data* to a Context*."
    }
  ]
}