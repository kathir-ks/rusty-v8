// Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#![allow(dead_code)]
#![allow(non_camel_case_types)]

// TODO: Add a feature flag to enable/disable WebAssembly.
// #[cfg(feature = "webassembly")]

use std::array;

// Placeholder for base::template_utils (Rust doesn't have direct template utils,
// rely on standard library and custom implementations).
// Placeholder for codegen::signature (Define a struct for Signature)
#[derive(Debug, Clone, Copy)]
pub struct FunctionSig {
    returns_count: usize,
    parameter_count: usize,
    types: &'static [ValueType],
}

impl FunctionSig {
    pub const fn new(returns_count: usize, parameter_count: usize, types: &'static [ValueType]) -> Self {
        FunctionSig {
            returns_count,
            parameter_count,
            types,
        }
    }
}

// Placeholder for execution::messages
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum MessageTemplate {
    kWasmUnreachable,
    kWasmIllegalOperation,
    kWasmInvalidTrap,
    kWasmStackOverflow,
    kWasmOutOfBounds,
    kWasmIntegerOverflow,
    kWasmIntegerDivideByZero,
    kWasmBadHintTable,
    kWasmInvalidReference,
    kWasmInvalidAssignToConst,
    kWasmIndirectCallSignatureMismatch,
    kWasmUninitializedTableElement,
    kWasmModuleTooLarge,
    kWasmTrapCount
}

// Placeholder for wasm_opcodes.h (Define the WasmOpcode enum and related constants)
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum WasmOpcode {
    kExprUnreachable = 0x00,
    kExprNop = 0x01,
    kExprBlock = 0x02,
    kExprLoop = 0x03,
    kExprIf = 0x04,
    kExprElse = 0x05,
    kExprTry = 0x06,
    kExprCatch = 0x07,
    kExprThrow = 0x08,
    kExprRethrow = 0x09,
    kExprBr = 0x0c,
    kExprBrIf = 0x0d,
    kExprBrTable = 0x0e,
    kExprReturn = 0x0f,
    kExprCallFunction = 0x10,
    kExprCallIndirect = 0x11,
    kExprReturnCall = 0x12,
    kExprReturnCallIndirect = 0x13,
    kExprDrop = 0x1a,
    kExprSelect = 0x1b,
    kExprLocalGet = 0x20,
    kExprLocalSet = 0x21,
    kExprLocalTee = 0x22,
    kExprGlobalGet = 0x23,
    kExprGlobalSet = 0x24,
    kExprTableGet = 0x25,
    kExprTableSet = 0x26,
    kExprI32LoadMem = 0x28,
    kExprI64LoadMem = 0x29,
    kExprF32LoadMem = 0x2a,
    kExprF64LoadMem = 0x2b,
    kExprI32LoadMem8S = 0x2c,
    kExprI32LoadMem8U = 0x2d,
    kExprI32LoadMem16S = 0x2e,
    kExprI32LoadMem16U = 0x2f,
    kExprI64LoadMem8S = 0x30,
    kExprI64LoadMem8U = 0x31,
    kExprI64LoadMem16S = 0x32,
    kExprI64LoadMem16U = 0x33,
    kExprI64LoadMem32S = 0x34,
    kExprI64LoadMem32U = 0x35,
    kExprI32StoreMem = 0x36,
    kExprI64StoreMem = 0x37,
    kExprF32StoreMem = 0x38,
    kExprF64StoreMem = 0x39,
    kExprI32StoreMem8 = 0x3a,
    kExprI32StoreMem16 = 0x3b,
    kExprI64StoreMem8 = 0x3c,
    kExprI64StoreMem16 = 0x3d,
    kExprI64StoreMem32 = 0x3e,
    kExprMemorySize = 0x3f,
    kExprMemoryGrow = 0x40,
    kExprI32Const = 0x41,
    kExprI64Const = 0x42,
    kExprF32Const = 0x43,
    kExprF64Const = 0x44,
    kExprRefNull = 0xd0,
    kExprRefIsNull = 0xd1,
    kExprRefFunc = 0xd2,
    kExprRefAsNonNull = 0xd3,
    kExprI32Eqz = 0x45,
    kExprI32Eq = 0x46,
    kExprI32Ne = 0x47,
    kExprI32LtS = 0x48,
    kExprI32LtU = 0x49,
    kExprI32GtS = 0x4a,
    kExprI32GtU = 0x4b,
    kExprI32LeS = 0x4c,
    kExprI32LeU = 0x4d,
    kExprI32GeS = 0x4e,
    kExprI32GeU = 0x4f,
    kExprI64Eqz = 0x50,
    kExprI64Eq = 0x51,
    kExprI64Ne = 0x52,
    kExprI64LtS = 0x53,
    kExprI64LtU = 0x54,
    kExprI64GtS = 0x55,
    kExprI64GtU = 0x56,
    kExprI64LeS = 0x57,
    kExprI64LeU = 0x58,
    kExprI64GeS = 0x59,
    kExprI64GeU = 0x5a,
    kExprF32Eq = 0x5b,
    kExprF32Ne = 0x5c,
    kExprF32Lt = 0x5d,
    kExprF32Gt = 0x5e,
    kExprF32Le = 0x5f,
    kExprF32Ge = 0x60,
    kExprF64Eq = 0x61,
    kExprF64Ne = 0x62,
    kExprF64Lt = 0x63,
    kExprF64Gt = 0x64,
    kExprF64Le = 0x65,
    kExprF64Ge = 0x66,
    kExprI32Clz = 0x67,
    kExprI32Ctz = 0x68,
    kExprI32Popcnt = 0x69,
    kExprI64Clz = 0x6a,
    kExprI64Ctz = 0x6b,
    kExprI64Popcnt = 0x6c,
    kExprF32Abs = 0x6d,
    kExprF32Neg = 0x6e,
    kExprF32Ceil = 0x6f,
    kExprF32Floor = 0x70,
    kExprF32Trunc = 0x71,
    kExprF32Nearest = 0x72,
    kExprF32Sqrt = 0x73,
    kExprF64Abs = 0x74,
    kExprF64Neg = 0x75,
    kExprF64Ceil = 0x76,
    kExprF64Floor = 0x77,
    kExprF64Trunc = 0x78,
    kExprF64Nearest = 0x79,
    kExprF64Sqrt = 0x7a,
    kExprI32Add = 0x7c,
    kExprI32Sub = 0x7d,
    kExprI32Mul = 0x7e,
    kExprI32DivS = 0x7f,
    kExprI32DivU = 0x80,
    kExprI32RemS = 0x81,
    kExprI32RemU = 0x82,
    kExprI32And = 0x83,
    kExprI32Ior = 0x84,
    kExprI32Xor = 0x85,
    kExprI32Shl = 0x86,
    kExprI32ShrS = 0x87,
    kExprI32ShrU = 0x88,
    kExprI32Rotl = 0x89,
    kExprI32Rotr = 0x8a,
    kExprI64Add = 0x8b,
    kExprI64Sub = 0x8c,
    kExprI64Mul = 0x8d,
    kExprI64DivS = 0x8e,
    kExprI64DivU = 0x8f,
    kExprI64RemS = 0x90,
    kExprI64RemU = 0x91,
    kExprI64And = 0x92,
    kExprI64Ior = 0x93,
    kExprI64Xor = 0x94,
    kExprI64Shl = 0x95,
    kExprI64ShrS = 0x96,
    kExprI64ShrU = 0x97,
    kExprI64Rotl = 0x98,
    kExprI64Rotr = 0x99,
    kExprF32Add = 0x9a,
    kExprF32Sub = 0x9b,
    kExprF32Mul = 0x9c,
    kExprF32Div = 0x9d,
    kExprF32Min = 0x9e,
    kExprF32Max = 0x9f,
    kExprF32Copysign = 0xa0,
    kExprF64Add = 0xa1,
    kExprF64Sub = 0xa2,
    kExprF64Mul = 0xa3,
    kExprF64Div = 0xa4,
    kExprF64Min = 0xa5,
    kExprF64Max = 0xa6,
    kExprF64Copysign = 0xa7,
    kExprI32ConvertF32S = 0xa8,
    kExprI32ConvertF32U = 0xa9,
    kExprI32ConvertF64S = 0xaa,
    kExprI32ConvertF64U = 0xab,
    kExprI64ConvertF32S = 0xac,
    kExprI64ConvertF32U = 0xad,
    kExprI64ConvertF64S = 0xae,
    kExprI64ConvertF64U = 0xaf,
    kExprF32ConvertI32S = 0xb0,
    kExprF32ConvertI32U = 0xb1,
    kExprF32ConvertI64S = 0xb2,
    kExprF32ConvertI64U = 0xb3,
    kExprF64ConvertI32S = 0xb4,
    kExprF64ConvertI32U = 0xb5,
    kExprF64ConvertI64S = 0xb6,
    kExprF64ConvertI64U = 0xb7,
    kExprI32ReinterpretF32 = 0xb8,
    kExprI64ReinterpretF64 = 0xb9,
    kExprF32ReinterpretI32 = 0xba,
    kExprF64ReinterpretI64 = 0xbb,
    kExprI32Extend8S = 0xbc,
    kExprI32Extend16S = 0xbd,
    kExprI64Extend8S = 0xbe,
    kExprI64Extend16S = 0xbf,
    kExprI64Extend32S = 0xc0,
    kExprI32WrapI64 = 0xc1,
    kExprI64TruncF32S = 0xc2,
    kExprI64TruncF32U = 0xc3,
    kExprI64TruncF64S = 0xc4,
    kExprI64TruncF64U = 0xc5,
    kExprF32DemoteF64 = 0xc6,
    kExprF64PromoteF32 = 0xc7,
    kExprMemoryInit = 0xfc08,
    kExprDataDrop = 0xfc09,
    kExprMemoryCopy = 0xfc0a,
    kExprMemoryFill = 0xfc0b,
    kExprTableCreate = 0xfc0c,
    kExprTableCopy = 0xfc0d,
    kExprTableGrow = 0xfc0e,
    kExprTableSize = 0xfc0f,
    kExprTableFill = 0xfc10,
    kExprElemDrop = 0xfc11,
    kExprTableInit = 0xfc12,
    kSimdPrefix = 0xfd,
    kNumericPrefix = 0xfe,
    kAtomicPrefix = 0xbf,
    kGCPrefix = 0xfa,
    kAsmJsPrefix = 0xfb,
    kExprI8x16Splat = 0xfd00,
    kExprI8x16ExtractLaneS = 0xfd01,
    kExprI8x16ExtractLaneU = 0xfd02,
    kExprI8x16ReplaceLane = 0xfd03,
    kExprI16x8Splat = 0xfd04,
    kExprI16x8ExtractLaneS = 0xfd05,
    kExprI16x8ExtractLaneU = 0xfd06,
    kExprI16x8ReplaceLane = 0xfd07,
    kExprI32x4Splat = 0xfd08,
    kExprI32x4ExtractLane = 0xfd09,
    kExprI32x4ReplaceLane = 0xfd0a,
    kExprI64x2Splat = 0xfd0b,
    kExprI64x2ExtractLane = 0xfd0c,
    kExprI64x2ReplaceLane = 0xfd0d,
    kExprF32x4Splat = 0xfd0e,
    kExprF32x4ExtractLane = 0xfd0f,
    kExprF32x4ReplaceLane = 0xfd10,
    kExprF64x2Splat = 0xfd11,
    kExprF64x2ExtractLane = 0xfd12,
    kExprF64x2ReplaceLane = 0xfd13,
    kExprI8x16Shuffle = 0xfd14,
    kExprI8x16Swizzle = 0xfd15,
    kExprI8x16LoadSplat = 0xfd16,
    kExprI16x8LoadSplat = 0xfd17,
    kExprI32x4LoadSplat = 0xfd18,
    kExprI64x2LoadSplat = 0xfd19,
    kExprV128Load = 0xfd1a,
    kExprV128Store = 0xfd1b,
    kExprI8x16Eq = 0xfd1c,
    kExprI8x16Ne = 0xfd1d,
    kExprI8x16LtS = 0xfd1e,
    kExprI8x16LtU = 0xfd1f,
    kExprI8x16GtS = 0xfd20,
    kExprI8x16GtU = 0xfd21,
    kExprI8x16LeS = 0xfd22,
    kExprI8x16LeU = 0xfd23,
    kExprI8x16GeS = 0xfd24,
    kExprI8x16GeU = 0xfd25,
    kExprI16x8Eq = 0xfd26,
    kExprI16x8Ne = 0xfd27,
    kExprI16x8LtS = 0xfd28,
    kExprI16x8LtU = 0xfd29,
    kExprI16x8GtS = 0xfd2a,
    kExprI16x8GtU = 0xfd2b,
    kExprI16x8LeS = 0xfd2c,
    kExprI16x8LeU = 0xfd2d,
    kExprI16x8GeS = 0xfd2e,
    kExprI16x8GeU = 0xfd2f,
    kExprI32x4Eq = 0xfd30,
    kExprI32x4Ne = 0xfd31,
    kExprI32x4LtS = 0xfd32,
    kExprI32x4LtU = 0xfd33,
    kExprI32x4GtS = 0xfd34,
    kExprI32x4GtU = 0xfd35,
    kExprI32x4LeS = 0xfd36,
    kExprI32x4LeU = 0xfd37,
    kExprI32x4GeS = 0xfd38,
    kExprI32x4GeU = 0xfd39,
    kExprF32x4Eq = 0xfd3a,
    kExprF32x4Ne = 0xfd3b,
    kExprF32x4Lt = 0xfd3c,
    kExprF32x4Gt = 0xfd3d,
    kExprF32x4Le = 0xfd3e,
    kExprF32x4Ge = 0xfd3f,
    kExprF64x2Eq = 0xfd40,
    kExprF64x2Ne = 0xfd41,
    kExprF64x2Lt = 0xfd42,
    kExprF64x2Gt = 0xfd43,
    kExprF64x2Le = 0xfd44,
    kExprF64x2Ge = 0xfd45,
    kExprV128Not = 0xfd46,
    kExprV128And = 0xfd47,
    kExprV128AndNot = 0xfd48,
    kExprV128Or = 0xfd49,
    kExprV128Xor = 0xfd4a,
    kExprV128Bitselect = 0xfd4b,
    kExprI8x16Neg = 0xfd4c,
    kExprI8x16AnyTrue = 0xfd4d,
    kExprI8x16AllTrue = 0xfd4e,
    kExprI8x16Bitmask = 0xfd4f,
    kExprI8x16NarrowI16x8S = 0xfd50,
    kExprI8x16NarrowI16x8U = 0xfd51,
    kExprI8x16ShrS = 0xfd52,
    kExprI8x16ShrU = 0xfd53,
    kExprI8x16Add = 0xfd54,
    kExprI8x16AddSaturateS = 0xfd55,
    kExprI8x16AddSaturateU = 0xfd56,
    kExprI8x16Sub = 0xfd57,
    kExprI8x16SubSaturateS = 0xfd58,
    kExprI8x16SubSaturateU = 0xfd59,
    kExprI8x16MinS = 0xfd5a,
    kExprI8x16MinU = 0xfd5b,
    kExprI8x16MaxS = 0xfd5c,
    kExprI8x16MaxU = 0xfd5d,
    kExprI8x16AvgrU = 0xfd5e,
    kExprI16x8Neg = 0xfd5f,
    kExprI16x8AnyTrue = 0xfd60,
    kExprI16x8AllTrue = 0xfd61,
    kExprI16x8Bitmask = 0xfd62,
    kExprI16x8NarrowI32x4S = 0xfd63,
    kExprI16x8NarrowI32x4U = 0xfd64,
    kExprI16x8ShrS = 0xfd65,
    kExprI16x8ShrU = 0xfd66,
    kExprI16x8Add = 0xfd67,
    kExprI16x8AddSaturateS = 0xfd68,
    kExprI16x8AddSaturateU = 0xfd69,
    kExprI16x8Sub = 0xfd6a,
    kExprI16x8SubSaturateS = 0xfd6b,
    kExprI16x8SubSaturateU = 0xfd6c,
    kExprI16x8Mul = 0xfd6d,
    kExprI16x8MinS = 0xfd6e,
    kExprI16x8MinU = 0xfd6f,
    kExprI16x8MaxS = 0xfd70,
    kExprI16x8MaxU = 0xfd71,
    kExprI16x8AvgrU = 0xfd72,
    kExprI32x4Neg = 0xfd73,
    kExprI32x4AnyTrue = 0xfd74,
    kExprI32x4AllTrue = 0xfd75,
    kExprI32x4Bitmask = 0xfd76,
    kExprI32x4Add = 0xfd77,
    kExprI32x4Sub = 0xfd78,
    kExprI32x4Mul = 0xfd79,
    kExprI32x4MinS = 0xfd7a,
    kExprI32x4MinU = 0xfd7b,
    kExprI32x4MaxS = 0xfd7c,
    kExprI32x4MaxU = 0xfd7d,
    kExprI64x2Neg = 0xfd7e,
    kExprI64x2AnyTrue = 0xfd7f,
    kExprI64x2AllTrue = 0xfd80,
    kExprI64x2Bitmask = 0xfd81,
    kExprI64x2Add = 0xfd82,
    kExprI64x2Sub = 0xfd83,
    kExprI64x2Mul = 0xfd84,
    kExprF32x4Abs = 0xfd85,
    kExprF32x4Neg = 0xfd86,
    kExprF32x4Sqrt = 0xfd87,
    kExprF32x4Add = 0xfd88,
    kExprF32x4Sub = 0xfd89,
    kExprF32x4Mul = 0xfd8a,
    kExprF32x4Div = 0xfd8b,
    kExprF32x4Min = 0xfd8c,
    kExprF32x4Max = 0xfd8d,
    kExprF64x2Abs = 0xfd8e,
    kExprF64x2Neg = 0xfd8f,
    kExprF64x2Sqrt = 0xfd90,
    kExprF64x2Add = 0xfd91,
    kExprF64x2Sub = 0xfd92,
    kExprF64x2Mul = 0xfd93,
    kExprF64x2Div = 0xfd94,
    kExprF64x2Min = 0xfd95,
    kExprF64x2Max = 0xfd96,
    kExprI32x4TruncSatF32x4S = 0xfd97,
    kExprI32x4TruncSatF32x4U = 0xfd98,
    kExprF32x4ConvertI32x4S = 0xfd99,
    kExprF32x4ConvertI32x4U = 0xfd9a,
    kExprI32x4TruncSatF64x2SZero = 0xfd9b,
    kExprI32x4TruncSatF64x2UZero = 0xfd9c,
    kExprF64x2ConvertLowI32x4S = 0xfd9d,
    kExprF64x2ConvertLowI32x4U = 0xfd9e,
    kExprF32x4DemoteF64x2Zero = 0xfd9f,
    kExprF64x2PromoteLowF32x4 = 0xfda0,
    kExprI8x16RelaxedSwizzle = 0xfd100,
    kExprI32x4RelaxedTruncSF32x4 = 0xfd101,
    kExprI32x4RelaxedTruncUF32x4 = 0xfd102,
    kExprI32x4RelaxedTruncSatSF32x4 = 0xfd103,
    kExprI32x4RelaxedTruncSatUF32x4 = 0xfd104,
    kExprF32x4RelaxedMadd = 0xfd105,
    kExprF32x4RelaxedMin = 0xfd106,
    kExprF32x4RelaxedMax = 0xfd107,
    kExprF64x2RelaxedMadd = 0xfd108,
    kExprF64x2RelaxedMin = 0xfd109,
    kExprF64x2RelaxedMax = 0xfd10a,
    kExprI16x8RelaxedQ15mulrS = 0xfd10b,
    kExprI16x8RelaxedDotI8x16I7x16S = 0xfd10c,
    kExprF16x8Splat = 0xfd200,
    kExprF16x8ExtractLane = 0xfd201,
    kExprF16x8ReplaceLane = 0xfd202,
    kExprF16x8Abs = 0xfd203,
    kExprF16x8Neg = 0xfd204,
    kExprF16x8Add = 0xfd205,
    kExprF16x8Sub = 0xfd206,
    kExprF16x8Mul = 0xfd207,
    kExprF16x8Div = 0xfd208,
    kExprF16x8Min = 0xfd209,
    kExprF16x8Max = 0xfd20a,
    kExprF16x8Qfma = 0xfd20b,
    kExprF16x8Qfms = 0xfd20c,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ValueType {
    kWasmI32,
    kWasmI64,
    kWasmF32,
    kWasmF64,
    kWasmVoid,
    kWasmAnyRef,
    kWasmFuncRef,
    kWasmExternRef,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum TrapReason {
    kUnreachable,
    kIllegalOperation,
    kInvalidTrap,
    kStackOverflow,
    kOutOfBounds,
    kIntegerOverflow,
    kIntegerDivideByZero,
    kBadHintTable,
    kInvalidReference,
    kInvalidAssignToConst,
    kIndirectCallSignatureMismatch,
    kUninitializedTableElement,
    kModuleTooLarge,
    kTrapCount,
}

pub mod wasm {
    use super::*;
    pub struct WasmOpcodes {}

    impl WasmOpcodes {
        /// Returns the name of the given opcode as a string literal.
        pub const fn opcode_name(opcode: WasmOpcode) -> &'static str {
            match opcode {
                WasmOpcode::kExprUnreachable => "Unreachable",
                WasmOpcode::kExprNop => "Nop",
                WasmOpcode::kExprBlock => "Block",
                WasmOpcode::kExprLoop => "Loop",
                WasmOpcode::kExprIf => "If",
                WasmOpcode::kExprElse => "Else",
                WasmOpcode::kExprTry => "Try",
                WasmOpcode::kExprCatch => "Catch",
                WasmOpcode::kExprThrow => "Throw",
                WasmOpcode::kExprRethrow => "Rethrow",
                WasmOpcode::kExprBr => "Br",
                WasmOpcode::kExprBrIf => "BrIf",
                WasmOpcode::kExprBrTable => "BrTable",
                WasmOpcode::kExprReturn => "Return",
                WasmOpcode::kExprCallFunction => "CallFunction",
                WasmOpcode::kExprCallIndirect => "CallIndirect",
                WasmOpcode::kExprReturnCall => "ReturnCall",
                WasmOpcode::kExprReturnCallIndirect => "ReturnCallIndirect",
                WasmOpcode::kExprDrop => "Drop",
                WasmOpcode::kExprSelect => "Select",
                WasmOpcode::kExprLocalGet => "LocalGet",
                WasmOpcode::kExprLocalSet => "LocalSet",
                WasmOpcode::kExprLocalTee => "LocalTee",
                WasmOpcode::kExprGlobalGet => "GlobalGet",
                WasmOpcode::kExprGlobalSet => "GlobalSet",
                WasmOpcode::kExprTableGet => "TableGet",
                WasmOpcode::kExprTableSet => "TableSet",
                WasmOpcode::kExprI32LoadMem => "I32LoadMem",
                WasmOpcode::kExprI64LoadMem => "I64LoadMem",
                WasmOpcode::kExprF32LoadMem => "F32LoadMem",
                WasmOpcode::kExprF64LoadMem => "F64LoadMem",
                WasmOpcode::kExprI32LoadMem8S => "I32LoadMem8S",
                WasmOpcode::kExprI32LoadMem8U => "I32LoadMem8U",
                WasmOpcode::kExprI32LoadMem16S => "I32LoadMem16S",
                WasmOpcode::kExprI32LoadMem16U => "I32LoadMem16U",
                WasmOpcode::kExprI64LoadMem8S => "I64LoadMem8S