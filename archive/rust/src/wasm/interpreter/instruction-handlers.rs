// Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This header should only be included if WebAssembly is enabled.
// In Rust, we use conditional compilation to achieve this.
#![cfg(feature = "wasm")]

macro_rules! generate_mem64_instr_handler {
    ($v:ident, $name:ident) => {
        $v($name##_Idx64);
    };
}

macro_rules! foreach_mem64_load_store_instr_handler {
    ($v:ident) => {
        foreach_load_store_instr_handler!(generate_mem64_instr_handler, $v);
    };
}

macro_rules! foreach_load_store_instr_handler {
    ($generator:ident, $v:ident) => {
        /* LoadMem */
        $v($generator!(, r2r_I32LoadMem8S));
        $v($generator!(, r2r_I32LoadMem8U));
        $v($generator!(, r2r_I32LoadMem16S));
        $v($generator!(, r2r_I32LoadMem16U));
        $v($generator!(, r2r_I64LoadMem8S));
        $v($generator!(, r2r_I64LoadMem8U));
        $v($generator!(, r2r_I64LoadMem16S));
        $v($generator!(, r2r_I64LoadMem16U));
        $v($generator!(, r2r_I64LoadMem32S));
        $v($generator!(, r2r_I64LoadMem32U));
        $v($generator!(, r2r_I32LoadMem));
        $v($generator!(, r2r_I64LoadMem));
        $v($generator!(, r2r_F32LoadMem));
        $v($generator!(, r2r_F64LoadMem));
        $v($generator!(, r2s_I32LoadMem8S));
        $v($generator!(, r2s_I32LoadMem8U));
        $v($generator!(, r2s_I32LoadMem16S));
        $v($generator!(, r2s_I32LoadMem16U));
        $v($generator!(, r2s_I64LoadMem8S));
        $v($generator!(, r2s_I64LoadMem8U));
        $v($generator!(, r2s_I64LoadMem16S));
        $v($generator!(, r2s_I64LoadMem16U));
        $v($generator!(, r2s_I64LoadMem32S));
        $v($generator!(, r2s_I64LoadMem32U));
        $v($generator!(, r2s_I32LoadMem));
        $v($generator!(, r2s_I64LoadMem));
        $v($generator!(, r2s_F32LoadMem));
        $v($generator!(, r2s_F64LoadMem));
        $v($generator!(, s2r_I32LoadMem8S));
        $v($generator!(, s2r_I32LoadMem8U));
        $v($generator!(, s2r_I32LoadMem16S));
        $v($generator!(, s2r_I32LoadMem16U));
        $v($generator!(, s2r_I64LoadMem8S));
        $v($generator!(, s2r_I64LoadMem8U));
        $v($generator!(, s2r_I64LoadMem16S));
        $v($generator!(, s2r_I64LoadMem16U));
        $v($generator!(, s2r_I64LoadMem32S));
        $v($generator!(, s2r_I64LoadMem32U));
        $v($generator!(, s2r_I32LoadMem));
        $v($generator!(, s2r_I64LoadMem));
        $v($generator!(, s2r_F32LoadMem));
        $v($generator!(, s2r_F64LoadMem));
        $v($generator!(, s2s_I32LoadMem8S));
        $v($generator!(, s2s_I32LoadMem8U));
        $v($generator!(, s2s_I32LoadMem16S));
        $v($generator!(, s2s_I32LoadMem16U));
        $v($generator!(, s2s_I64LoadMem8S));
        $v($generator!(, s2s_I64LoadMem8U));
        $v($generator!(, s2s_I64LoadMem16S));
        $v($generator!(, s2s_I64LoadMem16U));
        $v($generator!(, s2s_I64LoadMem32S));
        $v($generator!(, s2s_I64LoadMem32U));
        $v($generator!(, s2s_I32LoadMem));
        $v($generator!(, s2s_I64LoadMem));
        $v($generator!(, s2s_F32LoadMem));
        $v($generator!(, s2s_F64LoadMem));
        /* LoadMem_LocalSet */
        $v($generator!(, s2s_I32LoadMem8S_LocalSet));
        $v($generator!(, s2s_I32LoadMem8U_LocalSet));
        $v($generator!(, s2s_I32LoadMem16S_LocalSet));
        $v($generator!(, s2s_I32LoadMem16U_LocalSet));
        $v($generator!(, s2s_I64LoadMem8S_LocalSet));
        $v($generator!(, s2s_I64LoadMem8U_LocalSet));
        $v($generator!(, s2s_I64LoadMem16S_LocalSet));
        $v($generator!(, s2s_I64LoadMem16U_LocalSet));
        $v($generator!(, s2s_I64LoadMem32S_LocalSet));
        $v($generator!(, s2s_I64LoadMem32U_LocalSet));
        $v($generator!(, s2s_I32LoadMem_LocalSet));
        $v($generator!(, s2s_I64LoadMem_LocalSet));
        $v($generator!(, s2s_F32LoadMem_LocalSet));
        $v($generator!(, s2s_F64LoadMem_LocalSet));
        /* StoreMem */
        $v($generator!(, r2s_I32StoreMem8));
        $v($generator!(, r2s_I32StoreMem16));
        $v($generator!(, r2s_I64StoreMem8));
        $v($generator!(, r2s_I64StoreMem16));
        $v($generator!(, r2s_I64StoreMem32));
        $v($generator!(, r2s_I32StoreMem));
        $v($generator!(, r2s_I64StoreMem));
        $v($generator!(, r2s_F32StoreMem));
        $v($generator!(, r2s_F64StoreMem));
        $v($generator!(, s2s_I32StoreMem8));
        $v($generator!(, s2s_I32StoreMem16));
        $v($generator!(, s2s_I64StoreMem8));
        $v($generator!(, s2s_I64StoreMem16));
        $v($generator!(, s2s_I64StoreMem32));
        $v($generator!(, s2s_I32StoreMem));
        $v($generator!(, s2s_I64StoreMem));
        $v($generator!(, s2s_F32StoreMem));
        $v($generator!(, s2s_F64StoreMem));
        /* LoadStoreMem */
        $v($generator!(, r2s_I32LoadStoreMem));
        $v($generator!(, r2s_I64LoadStoreMem));
        $v($generator!(, r2s_F32LoadStoreMem));
        $v($generator!(, r2s_F64LoadStoreMem));
        $v($generator!(, s2s_I32LoadStoreMem));
        $v($generator!(, s2s_I64LoadStoreMem));
        $v($generator!(, s2s_F32LoadStoreMem));
        $v($generator!(, s2s_F64LoadStoreMem));
    };
}

macro_rules! foreach_load_store_duplicated_instr_handler {
    ($v:ident) => {
        /* LoadMem_LocalSet */
        $v(r2s_I32LoadMem8S_LocalSet);
        $v(r2s_I32LoadMem8U_LocalSet);
        $v(r2s_I32LoadMem16S_LocalSet);
        $v(r2s_I32LoadMem16U_LocalSet);
        $v(r2s_I64LoadMem8S_LocalSet);
        $v(r2s_I64LoadMem8U_LocalSet);
        $v(r2s_I64LoadMem16S_LocalSet);
        $v(r2s_I64LoadMem16U_LocalSet);
        $v(r2s_I64LoadMem32S_LocalSet);
        $v(r2s_I64LoadMem32U_LocalSet);
        $v(r2s_I32LoadMem_LocalSet);
        $v(r2s_I64LoadMem_LocalSet);
        $v(r2s_F32LoadMem_LocalSet);
        $v(r2s_F64LoadMem_LocalSet);
        /* LocalGet_StoreMem */
        $v(s2s_LocalGet_I32StoreMem8);
        $v(s2s_LocalGet_I32StoreMem16);
        $v(s2s_LocalGet_I64StoreMem8);
        $v(s2s_LocalGet_I64StoreMem16);
        $v(s2s_LocalGet_I64StoreMem32);
        $v(s2s_LocalGet_I32StoreMem);
        $v(s2s_LocalGet_I64StoreMem);
        $v(s2s_LocalGet_F32StoreMem);
        $v(s2s_LocalGet_F64StoreMem);
    };
}

macro_rules! foreach_no_boundscheck_instr_handler {
    ($v:ident) => {
        /* GlobalGet */
        $v(s2r_I32GlobalGet);
        $v(s2r_I64GlobalGet);
        $v(s2r_F32GlobalGet);
        $v(s2r_F64GlobalGet);
        $v(s2s_I32GlobalGet);
        $v(s2s_I64GlobalGet);
        $v(s2s_F32GlobalGet);
        $v(s2s_F64GlobalGet);
        $v(s2s_S128GlobalGet);
        $v(s2s_RefGlobalGet);
        /* GlobalSet */
        $v(r2s_I32GlobalSet);
        $v(r2s_I64GlobalSet);
        $v(r2s_F32GlobalSet);
        $v(r2s_F64GlobalSet);
        $v(s2s_I32GlobalSet);
        $v(s2s_I64GlobalSet);
        $v(s2s_F32GlobalSet);
        $v(s2s_F64GlobalSet);
        $v(s2s_S128GlobalSet);
        $v(s2s_RefGlobalSet);
        /* Drop */
        $v(r2s_I32Drop);
        $v(r2s_I64Drop);
        $v(r2s_F32Drop);
        $v(r2s_F64Drop);
        $v(r2s_RefDrop);
        $v(s2s_I32Drop);
        $v(s2s_I64Drop);
        $v(s2s_F32Drop);
        $v(s2s_F64Drop);
        $v(s2s_S128Drop);
        $v(s2s_RefDrop);
        /* Select */
        $v(r2r_I32Select);
        $v(r2r_I64Select);
        $v(r2r_F32Select);
        $v(r2r_F64Select);
        $v(r2s_I32Select);
        $v(r2s_I64Select);
        $v(r2s_F32Select);
        $v(r2s_F64Select);
        $v(r2s_S128Select);
        $v(r2s_RefSelect);
        $v(s2r_I32Select);
        $v(s2r_I64Select);
        $v(s2r_F32Select);
        $v(s2r_F64Select);
        $v(s2s_I32Select);
        $v(s2s_I64Select);
        $v(s2s_F32Select);
        $v(s2s_F64Select);
        $v(s2s_S128Select);
        $v(s2s_RefSelect);
        /* Binary arithmetic operators. */
        $v(r2r_I32Add);
        $v(r2r_I32Sub);
        $v(r2r_I32Mul);
        $v(r2r_I32And);
        $v(r2r_I32Ior);
        $v(r2r_I32Xor);
        $v(r2r_I64Add);
        $v(r2r_I64Sub);
        $v(r2r_I64Mul);
        $v(r2r_I64And);
        $v(r2r_I64Ior);
        $v(r2r_I64Xor);
        $v(r2r_F32Add);
        $v(r2r_F32Sub);
        $v(r2r_F32Mul);
        $v(r2r_F64Add);
        $v(r2r_F64Sub);
        $v(r2r_F64Mul);
        $v(r2r_I32DivS);
        $v(r2r_I64DivS);
        $v(r2r_I32DivU);
        $v(r2r_I64DivU);
        $v(r2r_F32Div);
        $v(r2r_F64Div);
        $v(r2r_I32RemS);
        $v(r2r_I64RemS);
        $v(r2r_I32RemU);
        $v(r2r_I64RemU);
        $v(r2s_I32Add);
        $v(r2s_I32Sub);
        $v(r2s_I32Mul);
        $v(r2s_I32And);
        $v(r2s_I32Ior);
        $v(r2s_I32Xor);
        $v(r2s_I64Add);
        $v(r2s_I64Sub);
        $v(r2s_I64Mul);
        $v(r2s_I64And);
        $v(r2s_I64Ior);
        $v(r2s_I64Xor);
        $v(r2s_F32Add);
        $v(r2s_F32Sub);
        $v(r2s_F32Mul);
        $v(r2s_F64Add);
        $v(r2s_F64Sub);
        $v(r2s_F64Mul);
        $v(r2s_I32DivS);
        $v(r2s_I64DivS);
        $v(r2s_I32DivU);
        $v(r2s_I64DivU);
        $v(r2s_F32Div);
        $v(r2s_F64Div);
        $v(r2s_I32RemS);
        $v(r2s_I64RemS);
        $v(r2s_I32RemU);
        $v(r2s_I64RemU);
        $v(s2r_I32Add);
        $v(s2r_I32Sub);
        $v(s2r_I32Mul);
        $v(s2r_I32And);
        $v(s2r_I32Ior);
        $v(s2r_I32Xor);
        $v(s2r_I64Add);
        $v(s2r_I64Sub);
        $v(s2r_I64Mul);
        $v(s2r_I64And);
        $v(s2r_I64Ior);
        $v(s2r_I64Xor);
        $v(s2r_F32Add);
        $v(s2r_F32Sub);
        $v(s2r_F32Mul);
        $v(s2r_F64Add);
        $v(s2r_F64Sub);
        $v(s2r_F64Mul);
        $v(s2r_I32DivS);
        $v(s2r_I64DivS);
        $v(s2r_I32DivU);
        $v(s2r_I64DivU);
        $v(s2r_F32Div);
        $v(s2r_F64Div);
        $v(s2r_I32RemS);
        $v(s2r_I64RemS);
        $v(s2r_I32RemU);
        $v(s2r_I64RemU);
        $v(s2s_I32Add);
        $v(s2s_I32Sub);
        $v(s2s_I32Mul);
        $v(s2s_I32And);
        $v(s2s_I32Ior);
        $v(s2s_I32Xor);
        $v(s2s_I64Add);
        $v(s2s_I64Sub);
        $v(s2s_I64Mul);
        $v(s2s_I64And);
        $v(s2s_I64Ior);
        $v(s2s_I64Xor);
        $v(s2s_F32Add);
        $v(s2s_F32Sub);
        $v(s2s_F32Mul);
        $v(s2s_F64Add);
        $v(s2s_F64Sub);
        $v(s2s_F64Mul);
        $v(s2s_I32DivS);
        $v(s2s_I64DivS);
        $v(s2s_I32DivU);
        $v(s2s_I64DivU);
        $v(s2s_F32Div);
        $v(s2s_F64Div);
        $v(s2s_I32RemS);
        $v(s2s_I64RemS);
        $v(s2s_I32RemU);
        $v(s2s_I64RemU);
        /* Comparison operators. */
        $v(r2r_I32Eq);
        $v(r2r_I32Ne);
        $v(r2r_I32LtU);
        $v(r2r_I32LeU);
        $v(r2r_I32GtU);
        $v(r2r_I32GeU);
        $v(r2r_I32LtS);
        $v(r2r_I32LeS);
        $v(r2r_I32GtS);
        $v(r2r_I32GeS);
        $v(r2r_I64Eq);
        $v(r2r_I64Ne);
        $v(r2r_I64LtU);
        $v(r2r_I64LeU);
        $v(r2r_I64GtU);
        $v(r2r_I64GeU);
        $v(r2r_I64LtS);
        $v(r2r_I64LeS);
        $v(r2r_I64GtS);
        $v(r2r_I64GeS);
        $v(r2r_F32Eq);
        $v(r2r_F32Ne);
        $v(r2r_F32Lt);
        $v(r2r_F32Le);
        $v(r2r_F32Gt);
        $v(r2r_F32Ge);
        $v(r2r_F64Eq);
        $v(r2r_F64Ne);
        $v(r2r_F64Lt);
        $v(r2r_F64Le);
        $v(r2r_F64Gt);
        $v(r2r_F64Ge);
        $v(r2s_I32Eq);
        $v(r2s_I32Ne);
        $v(r2s_I32LtU);
        $v(r2s_I32LeU);
        $v(r2s_I32GtU);
        $v(r2s_I32GeU);
        $v(r2s_I32LtS);
        $v(r2s_I32LeS);
        $v(r2s_I32GtS);
        $v(r2s_I32GeS);
        $v(r2s_I64Eq);
        $v(r2s_I64Ne);
        $v(r2s_I64LtU);
        $v(r2s_I64LeU);
        $v(r2s_I64GtU);
        $v(r2s_I64GeU);
        $v(r2s_I64LtS);
        $v(r2s_I64LeS);
        $v(r2s_I64GtS);
        $v(r2s_I64GeS);
        $v(r2s_F32Eq);
        $v(r2s_F32Ne);
        $v(r2s_F32Lt);
        $v(r2s_F32Le);
        $v(r2s_F32Gt);
        $v(r2s_F32Ge);
        $v(r2s_F64Eq);
        $v(r2s_F64Ne);
        $v(r2s_F64Lt);
        $v(r2s_F64Le);
        $v(r2s_F64Gt);
        $v(r2s_F64Ge);
        $v(s2r_I32Eq);
        $v(s2r_I32Ne);
        $v(s2r_I32LtU);
        $v(s2r_I32LeU);
        $v(s2r_I32GtU);
        $v(s2r_I32GeU);
        $v(s2r_I32LtS);
        $v(s2r_I32LeS);
        $v(s2r_I32GtS);
        $v(s2r_I32GeS);
        $v(s2r_I64Eq);
        $v(s2r_I64Ne);
        $v(s2r_I64LtU);
        $v(s2r_I64LeU);
        $v(s2r_I64GtU);
        $v(s2r_I64GeU);
        $v(s2r_I64LtS);
        $v(s2r_I64LeS);
        $v(s2r_I64GtS);
        $v(s2r_I64GeS);
        $v(s2r_F32Eq);
        $v(s2r_F32Ne);
        $v(s2r_F32Lt);
        $v(s2r_F32Le);
        $v(s2r_F32Gt);
        $v(s2r_F32Ge);
        $v(s2r_F64Eq);
        $v(s2r_F64Ne);
        $v(s2r_F64Lt);
        $v(s2r_F64Le);
        $v(s2r_F64Gt);
        $v(s2r_F64Ge);
        $v(s2s_I32Eq);
        $v(s2s_I32Ne);
        $v(s2s_I32LtU);
        $v(s2s_I32LeU);
        $v(s2s_I32GtU);
        $v(s2s_I32GeU);
        $v(s2s_I32LtS);
        $v(s2s_I32LeS);
        $v(s2s_I32GtS);
        $v(s2s_I32GeS);
        $v(s2s_I64Eq);
        $v(s2s_I64Ne);
        $v(s2s_I64LtU);
        $v(s2s_I64LeU);
        $v(s2s_I64GtU);
        $v(s2s_I64GeU);
        $v(s2s_I64LtS);
        $v(s2s_I64LeS);
        $v(s2s_I64GtS);
        $v(s2s_I64GeS);
        $v(s2s_F32Eq);
        $v(s2s_F32Ne);
        $v(s2s_F32Lt);
        $v(s2s_F32Le);
        $v(s2s_F32Gt);
        $v(s2s_F32Ge);
        $v(s2s_F64Eq);
        $v(s2s_F64Ne);
        $v(s2s_F64Lt);
        $v(s2s_F64Le);
        $v(s2s_F64Gt);
        $v(s2s_F64Ge);
        /* More binary operators. */
        $v(r2r_I32Shl);
        $v(r2r_I32ShrU);
        $v(r2r_I32ShrS);
        $v(r2r_I64Shl);
        $v(r2r_I64ShrU);
        $v(r2r_I64ShrS);
        $v(r2r_I32Rol);
        $v(r2r_I32Ror);
        $v(r2r_I64Rol);
        $v(r2r_I64Ror);
        $v(r2r_F32Min);
        $v(r2r_F32Max);
        $v(r2r_F64Min);
        $v(r2r_F64Max);
        $v(r2r_F32CopySign);
        $v(r2r_F64CopySign);
        $v(r2s_I32Shl);
        $v(r2s_I32ShrU);
        $v(r2s_I32ShrS);
        $v(r2s_I64Shl);
        $v(r2s_I64ShrU);
        $v(r2s_I64ShrS);
        $v(r2s_I32Rol);
        $v(r2s_I32Ror);
        $v(r2s_I64Rol);
        $v(r2s_I64Ror);
        $v(r2s_F32Min);
        $v(r2s_F32Max);
        $v(r2s_F64Min);
        $v(r2s_F64Max);
        $v(r2s_F32CopySign);
        $v(r2s_F64CopySign);
        $v(s2r_I32Shl);
        $v(s2r_I32ShrU);
        $v(s2r_I32ShrS);
        $v(s2r_I64Shl);
        $v(s2r_I64ShrU);
        $v(s2r_I64ShrS);
        $v(s2r_I32Rol);
        $v(s2r_I32Ror);
        $v(s2r_I64Rol);
        $v(s2r_I64Ror);
        $v(s2r_F32Min);
        $v(s2r_F32Max);
        $v(s2r_F64Min);
        $v(s2r_F64Max);
        $v(s2r_F32CopySign);
        $v(s2r_F64CopySign);
        $v(s2s_I32Shl);
        $v(s2s_I32ShrU);
        $v(s2s_I32ShrS);
        $v(s2s_I64Shl);
        $v(s2s_I64ShrU);
        $v(s2s_I64ShrS);
        $v(s2s_I32Rol);
        $v(s2s_I32Ror);
        $v(s2s_I64Rol);
        $v(s2s_I64Ror);
        $v(s2s_F32Min);
        $v(s2s_F32Max);
        $v(s2s_F64Min);
        $v(s2s_F64Max);
        $v(s2s_F32CopySign);
        $v(s2s_F64CopySign);
        /* Unary operators. */
        $v(r2r_F32Abs);
        $v(r2r_F32Neg);
        $v(r2r_F32Ceil);
        $v(r2r_F32Floor);
        $v(r2r_F32Trunc);
        $v(r2r_F32NearestInt);
        $v(r2r_F32Sqrt);
        $v(r2r_F64Abs);
        $v(r2r_F64Neg);
        $v(r2r_F64Ceil);
        $v(r2r_F64Floor);
        $v(r2r_F64Trunc);
        $v(r2r_F64NearestInt);
        $v(r2r_F64Sqrt);
        $v(r2s_F32Abs);
        $v(r2s_F32Neg);
        $v(r2s_F32Ceil);
        $v(r2s_F32Floor);
        $v(r2s_F32Trunc);
        $v(r2s_F32NearestInt);
        $v(r2s_F32Sqrt);
        $v(r2s_F