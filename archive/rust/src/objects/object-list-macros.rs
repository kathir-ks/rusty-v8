pub mod object_list_macros {
    // src/base/macros.h: The IF_WASM macro is architecture/feature-dependent.
    // In this translation, we assume WASM is always enabled for demonstration.
    // In a real-world scenario, this should be controlled by a feature flag
    // or conditional compilation.
    macro_rules! if_wasm {
        ($($tokens:tt)*) => {
            $($tokens)*
        };
    }

    // torque-generated/instance-types.h:  This file would normally contain
    // enums defining the various InstanceTypes.  We represent these with a simplified
    // enum for this example, since the actual content of that file is autogenerated
    // and not available.
    #[derive(Debug, Copy, Clone, PartialEq, Eq)]
    pub enum InstanceType {
        ArrayList,
        ByteArray,
        ClosureFeedbackCellArray,
        FixedArray,
        FixedDoubleArray,
        ObjectBoilerplateDescription,
        RegExpMatchInfo,
        ScriptContextTable,
        WeakFixedArray,
        BigInt,
        BytecodeArray,
        Code,
        Context,
        ExternalString,
        FeedbackMetadata,
        FeedbackVector,
        FreeSpace,
        InstructionStream,
        PreparseData,
        PropertyArray,
        ProtectedFixedArray,
        ProtectedWeakFixedArray,
        ScopeInfo,
        SeqString,
        SloppyArgumentsElements,
        SwissNameDictionary,
        ThinString,
        TrustedByteArray,
        TrustedFixedArray,
        TrustedWeakFixedArray,
        UncompiledDataWithoutPreparseData,
        WeakArrayList,
        WasmArray,
        WasmDispatchTable,
        WasmStruct,
        AbstractCode,
        AccessorInfo,
        AllocationSite,
        BigIntBase,
        Boolean,
        Cell,
        CompilationCacheTable,
        ConsString,
        ContextSidePropertyCell,
        CoverageInfo,
        DataHandler,
        DeoptimizationData,
        DependentCode,
        DescriptorArray,
        DictionaryTemplateInfo,
        EmbedderDataArray,
        EphemeronHashTable,
        ExternalOneByteString,
        ExternalTwoByteString,
        FeedbackCell,
        FunctionTemplateInfo,
        FixedArrayBase,
        FixedArrayExact,
        Foreign,
        GcSafeCode,
        GlobalDictionary,
        HeapNumber,
        InternalizedString,
        JSArgumentsObject,
        JSArray,
        JSArrayBuffer,
        JSArrayBufferView,
        JSArrayIterator,
        JSAsyncFromSyncIterator,
        JSAsyncFunctionObject,
        JSAsyncGeneratorObject,
        JSAtomicsCondition,
        JSAtomicsMutex,
        JSBoundFunction,
        JSCollection,
        JSCollectionIterator,
        JSCustomElementsObject,
        JSDataView,
        JSDataViewOrRabGsabDataView,
        JSDate,
        JSDisposableStackBase,
        JSSyncDisposableStack,
        JSAsyncDisposableStack,
        JSExternalObject,
        JSFinalizationRegistry,
        JSFunction,
        JSFunctionOrBoundFunctionOrWrappedFunction,
        JSGeneratorObject,
        JSGlobalObject,
        JSGlobalProxy,
        JSIteratorHelper,
        JSIteratorFilterHelper,
        JSIteratorMapHelper,
        JSIteratorTakeHelper,
        JSIteratorDropHelper,
        JSIteratorFlatMapHelper,
        JSMap,
        JSMapIterator,
        JSMessageObject,
        JSModuleNamespace,
        JSObject,
        JSAPIObjectWithEmbedderSlots,
        JSObjectWithEmbedderSlots,
        JSPrimitiveWrapper,
        JSPromise,
        JSProxy,
        JSRabGsabDataView,
        JSRawJson,
        JSReceiver,
        JSRegExp,
        JSRegExpStringIterator,
        JSSet,
        JSSetIterator,
        JSShadowRealm,
        JSSharedArray,
        JSSharedStruct,
        JSSpecialObject,
        JSStringIterator,
        JSSynchronizationPrimitive,
        JSTemporalCalendar,
        JSTemporalDuration,
        JSTemporalInstant,
        JSTemporalPlainDate,
        JSTemporalPlainTime,
        JSTemporalPlainDateTime,
        JSTemporalPlainMonthDay,
        JSTemporalPlainYearMonth,
        JSTemporalTimeZone,
        JSTemporalZonedDateTime,
        JSTypedArray,
        JSValidIteratorWrapper,
        JSWeakCollection,
        JSWeakRef,
        JSWeakMap,
        JSWeakSet,
        JSWrappedFunction,
        LoadHandler,
        Map,
        MegaDomHandler,
        Module,
        Microtask,
        Name,
        NameDictionary,
        NameToIndexHashTable,
        NativeContext,
        NormalizedMapCache,
        NumberDictionary,
        ObjectHashSet,
        ObjectHashTable,
        ObjectTemplateInfo,
        ObjectTwoHashTable,
        Oddball,
        Hole,
        OrderedHashMap,
        OrderedHashSet,
        OrderedNameDictionary,
        PrimitiveHeapObject,
        PromiseReactionJobTask,
        PropertyCell,
        ScopeInfo,
        SeqOneByteString,
        SharedFunctionInfo,
        SimpleNumberDictionary,
        SlicedString,
        SmallOrderedHashMap,
        SmallOrderedHashSet,
        SmallOrderedNameDictionary,
        SourceTextModule,
        SourceTextModuleInfo,
        StoreHandler,
        String,
        StringSet,
        RegisteredSymbolTable,
        Struct,
        Symbol,
        SyntheticModule,
        TemplateInfo,
        TemplateInfoWithProperties,
        TemplateLiteralObject,
        TransitionArray,
        TurboshaftFloat64RangeType,
        TurboshaftFloat64SetType,
        TurboshaftFloat64Type,
        TurboshaftType,
        TurboshaftWord32RangeType,
        TurboshaftWord32SetType,
        TurboshaftWord32Type,
        TurboshaftWord64RangeType,
        TurboshaftWord64SetType,
        TurboshaftWord64Type,
        WasmContinuationObject,
        WasmExceptionPackage,
        WasmFuncRef,
        WasmGlobalObject,
        WasmInstanceObject,
        WasmMemoryObject,
        WasmMemoryMapDescriptor,
        WasmModuleObject,
        WasmNull,
        WasmObject,
        WasmResumeData,
        WasmSuspenderObject,
        WasmSuspendingObject,
        WasmTableObject,
        WasmTagObject,
        WasmTypeInfo,
        WasmValueObject,
        WeakCell,
        HashTable,
        AwaitContext,
        BlockContext,
        CallableApiObject,
        CallableJSFunction,
        CallableJSProxy,
        CatchContext,
        DebugEvaluateContext,
        EvalContext,
        FreeSpaceOrFiller,
        FunctionContext,
        JSApiObject,
        JSClassConstructor,
        JSLastDummyApiObject,
        JSPromiseConstructor,
        JSArrayConstructor,
        JSRegExpConstructor,
        JSMapKeyIterator,
        JSMapKeyValueIterator,
        JSMapValueIterator,
        JSSetKeyValueIterator,
        JSSetValueIterator,
        JSSpecialApiObject,
        MaybeReadOnlyJSObject,
        ModuleContext,
        NonNullForeign,
        ScriptContext,
        WithContext,
        JSInternalPrototypeBase,
        JSObjectPrototype,
        JSRegExpPrototype,
        JSPromisePrototype,
        JSSetPrototype,
        JSIteratorPrototype,
        JSArrayIteratorPrototype,
        JSMapIteratorPrototype,
        JSTypedArrayPrototype,
        JSSetIteratorPrototype,
        JSStringIteratorPrototype,
        TypedArrayConstructor,
        Uint8TypedArrayConstructor,
        Int8TypedArrayConstructor,
        Uint16TypedArrayConstructor,
        Int16TypedArrayConstructor,
        Uint32TypedArrayConstructor,
        Int32TypedArrayConstructor,
        Float16TypedArrayConstructor,
        Float32TypedArrayConstructor,
        Float64TypedArrayConstructor,
        Uint8ClampedTypedArrayConstructor,
        Biguint64TypedArrayConstructor,
        Bigint64TypedArrayConstructor,
        JSV8BreakIterator,
        JSCollator,
        JSDateTimeFormat,
        JSDisplayNames,
        JSDurationFormat,
        JSListFormat,
        JSLocale,
        JSNumberFormat,
        JSPluralRules,
        JSRelativeTimeFormat,
        JSSegmentDataObject,
        JSSegmentDataObjectWithIsWordLike,
        JSSegmentIterator,
        JSSegmenter,
        JSSegments,
        TrustedObject,
        ExposedTrustedObject,
        UncompiledData,
        WasmFunctionData,
        UncompiledDataWithPreparseData,
        UncompiledDataWithPreparseDataAndJob,
        UncompiledDataWithoutPreparseDataWithJob,
        SharedFunctionInfoWrapper,
        TrustedForeign,
        AtomRegExpData,
        IrRegExpData,
        RegExpData,
        WasmImportData,
        WasmCapiFunctionData,
        WasmExportedFunctionData,
        WasmJSFunctionData,
        WasmInternalFunction,
        WasmTrustedInstanceData,
        AccessCheckNeeded,
        AlwaysSharedSpaceJSObject,
        BigIntWrapper,
        BooleanWrapper,
        Callable,
        Constructor,
        Filler,
        HandlerTable,
        JSContextExtensionObject,
        JSError,
        MapCache,
        NumberWrapper,
        OSROptimizedCodeCache,
        ScriptWrapper,
        StringWrapper,
        SymbolWrapper,
        UniqueName,
        Undetectable,
    }

    // SIMPLE_HEAP_OBJECT_LIST1 and SIMPLE_HEAP_OBJECT_LIST2 are implemented using
    // a procedural macro for code generation in a real-world scenario.  Here,
    // we define the lists manually for brevity.
    //
    // In a more complete translation, we would use a procedural macro to
    // generate the SIMPLE_HEAP_OBJECT_LIST1 and SIMPLE_HEAP_OBJECT_LIST2
    // based on the SIMPLE_HEAP_OBJECT_LIST_GENERATOR.

    // Adapted SIMPLE_HEAP_OBJECT_LIST_GENERATOR
    macro_rules! simple_heap_object_list_generator {
        ($apply:ident, $v:ident) => {
            $apply!($v, ArrayList, ArrayList);
            $apply!($v, ByteArray, ByteArray);
            $apply!($v, ClosureFeedbackCellArray, ClosureFeedbackCellArray);
            $apply!($v, FixedArray, FixedArray);
            $apply!($v, FixedDoubleArray, FixedDoubleArray);
            $apply!($v, ObjectBoilerplateDescription, ObjectBoilerplateDescription);
            $apply!($v, RegExpMatchInfo, RegExpMatchInfo);
            $apply!($v, ScriptContextTable, ScriptContextTable);
            $apply!($v, WeakFixedArray, WeakFixedArray);
        };
    }

    // Adapted SIMPLE_HEAP_OBJECT_LIST1
    macro_rules! simple_heap_object_list1 {
        ($v:ident) => {
            simple_heap_object_list_generator!(simple_heap_object_list1_adapter, $v);
        };
    }

    macro_rules! simple_heap_object_list1_adapter {
        ($v:ident, $name:ident, $name_uppercase:ident) => {
            $v!($name)
        };
    }

    // Adapted SIMPLE_HEAP_OBJECT_LIST2
    macro_rules! simple_heap_object_list2 {
        ($v:ident) => {
            simple_heap_object_list_generator!(simple_heap_object_list2_adapter, $v);
        };
    }

    macro_rules! simple_heap_object_list2_adapter {
        ($v:ident, $name:ident, $name_uppercase:ident) => {
            $v!($name, $name_uppercase)
        };
    }

    // Adapted DYNAMICALLY_SIZED_HEAP_OBJECT_LIST
    macro_rules! dynamically_sized_heap_object_list {
        ($v:ident) => {
            $v!(ArrayList);
            $v!(BigInt);
            $v!(ByteArray);
            $v!(BytecodeArray);
            $v!(ClosureFeedbackCellArray);
            $v!(Code);
            $v!(Context);
            $v!(ExternalString);
            $v!(FeedbackMetadata);
            $v!(FeedbackVector);
            $v!(FixedArray);
            $v!(FixedDoubleArray);
            $v!(FreeSpace);
            $v!(InstructionStream);
            $v!(ObjectBoilerplateDescription);
            $v!(PreparseData);
            $v!(PropertyArray);
            $v!(ProtectedFixedArray);
            $v!(ProtectedWeakFixedArray);
            $v!(RegExpMatchInfo);
            $v!(ScopeInfo);
            $v!(ScriptContextTable);
            $v!(SeqString);
            $v!(SloppyArgumentsElements);
            $v!(SwissNameDictionary);
            $v!(ThinString);
            $v!(TrustedByteArray);
            $v!(TrustedFixedArray);
            $v!(TrustedWeakFixedArray);
            $v!(UncompiledDataWithoutPreparseData);
            $v!(WeakArrayList);
            $v!(WeakFixedArray);
            if_wasm!($v!(WasmArray));
            if_wasm!($v!(WasmDispatchTable));
            if_wasm!($v!(WasmStruct));
        };
    }

    // Adapted HEAP_OBJECT_ORDINARY_TYPE_LIST_BASE
    macro_rules! heap_object_ordinary_type_list_base {
        ($v:ident) => {
            $v!(AbstractCode);
            $v!(AccessorInfo);
            $v!(AllocationSite);
            $v!(BigInt);
            $v!(BigIntBase);
            $v!(Boolean);
            $v!(Cell);
            $v!(CompilationCacheTable);
            $v!(ConsString);
            $v!(ContextSidePropertyCell);
            $v!(Context);
            $v!(CoverageInfo);
            $v!(DataHandler);
            $v!(DeoptimizationData);
            $v!(DependentCode);
            $v!(DescriptorArray);
            $v!(DictionaryTemplateInfo);
            $v!(EmbedderDataArray);
            $v!(EphemeronHashTable);
            $v!(ExternalOneByteString);
            $v!(ExternalString);
            $v!(ExternalTwoByteString);
            $v!(FeedbackCell);
            $v!(FeedbackMetadata);
            $v!(FeedbackVector);
            $v!(FunctionTemplateInfo);
            $v!(FixedArrayBase);
            $v!(FixedArrayExact);
            $v!(Foreign);
            $v!(FreeSpace);
            $v!(GcSafeCode);
            $v!(GlobalDictionary);
            $v!(HeapNumber);
            $v!(InternalizedString);
            $v!(JSArgumentsObject);
            $v!(JSArray);
            $v!(JSArrayBuffer);
            $v!(JSArrayBufferView);
            $v!(JSArrayIterator);
            $v!(JSAsyncFromSyncIterator);
            $v!(JSAsyncFunctionObject);
            $v!(JSAsyncGeneratorObject);
            $v!(JSAtomicsCondition);
            $v!(JSAtomicsMutex);
            $v!(JSBoundFunction);
            $v!(JSCollection);
            $v!(JSCollectionIterator);
            $v!(JSCustomElementsObject);
            $v!(JSDataView);
            $v!(JSDataViewOrRabGsabDataView);
            $v!(JSDate);
            $v!(JSDisposableStackBase);
            $v!(JSSyncDisposableStack);
            $v!(JSAsyncDisposableStack);
            $v!(JSExternalObject);
            $v!(JSFinalizationRegistry);
            $v!(JSFunction);
            $v!(JSFunctionOrBoundFunctionOrWrappedFunction);
            $v!(JSGeneratorObject);
            $v!(JSGlobalObject);
            $v!(JSGlobalProxy);
            $v!(JSIteratorHelper);
            $v!(JSIteratorFilterHelper);
            $v!(JSIteratorMapHelper);
            $v!(JSIteratorTakeHelper);
            $v!(JSIteratorDropHelper);
            $v!(JSIteratorFlatMapHelper);
            $v!(JSMap);
            $v!(JSMapIterator);
            $v!(JSMessageObject);
            $v!(JSModuleNamespace);
            $v!(JSObject);
            $v!(JSAPIObjectWithEmbedderSlots);
            $v!(JSObjectWithEmbedderSlots);
            $v!(JSPrimitiveWrapper);
            $v!(JSPromise);
            $v!(JSProxy);
            $v!(JSRabGsabDataView);
            $v!(JSRawJson);
            $v!(JSReceiver);
            $v!(JSRegExp);
            $v!(JSRegExpStringIterator);
            $v!(JSSet);
            $v!(JSSetIterator);
            $v!(JSShadowRealm);
            $v!(JSSharedArray);
            $v!(JSSharedStruct);
            $v!(JSSpecialObject);
            $v!(JSStringIterator);
            $v!(JSSynchronizationPrimitive);
            $v!(JSTemporalCalendar);
            $v!(JSTemporalDuration);
            $v!(JSTemporalInstant);
            $v!(JSTemporalPlainDate);
            $v!(JSTemporalPlainTime);
            $v!(JSTemporalPlainDateTime);
            $v!(JSTemporalPlainMonthDay);
            $v!(JSTemporalPlainYearMonth);
            $v!(JSTemporalTimeZone);
            $v!(JSTemporalZonedDateTime);
            $v!(JSTypedArray);
            $v!(JSValidIteratorWrapper);
            $v!(JSWeakCollection);
            $v!(JSWeakRef);
            $v!(JSWeakMap);
            $v!(JSWeakSet);
            $v!(JSWrappedFunction);
            $v!(LoadHandler);
            $v!(Map);
            $v!(MegaDomHandler);
            $v!(Module);
            $v!(Microtask);
            $v!(Name);
            $v!(NameDictionary);
            $v!(NameToIndexHashTable);
            $v!(NativeContext);
            $v!(NormalizedMapCache);
            $v!(NumberDictionary);
            $v!(ObjectHashSet);
            $v!(ObjectHashTable);
            $v!(ObjectTemplateInfo);
            $v!(ObjectTwoHashTable);
            $v!(Oddball);
            $v!(Hole);
            $v!(OrderedHashMap);
            $v!(OrderedHashSet);
            $v!(OrderedNameDictionary);
            $v!(PreparseData);
            $v!(PrimitiveHeapObject);
            $v!(PromiseReactionJobTask);
            $v!(PropertyArray);
            $v!(PropertyCell);
            $v!(ScopeInfo);
            $v!(SeqOneByteString);
            $v!(SeqString);
            $v!(SeqTwoByteString);
            $v!(SharedFunctionInfo);
            $v!(SimpleNumberDictionary);
            $v!(SlicedString);
            $v!(SmallOrderedHashMap);
            $v!(SmallOrderedHashSet);
            $v!(SmallOrderedNameDictionary);
            $v!(SourceTextModule);
            $v!(SourceTextModuleInfo);
            $v!(StoreHandler);
            $v!(String);
            $v!(StringSet);
            $v!(RegisteredSymbolTable);
            $v!(Struct);
            $v!(Symbol);
            $v!(SyntheticModule);
            $v!(TemplateInfo);
            $v!(TemplateInfoWithProperties);
            $v!(TemplateLiteralObject);
            $v!(ThinString);
            $v!(TransitionArray);
            $v!(TurboshaftFloat64RangeType);
            $v!(TurboshaftFloat64SetType);
            $v!(TurboshaftFloat64Type);
            $v!(TurboshaftType);
            $v!(TurboshaftWord32RangeType);
            $v!(TurboshaftWord32SetType);
            $v!(TurboshaftWord32Type);
            $v!(TurboshaftWord64RangeType);
            $v!(TurboshaftWord64SetType);
            $v!(TurboshaftWord64Type);
            if_wasm!($v!(WasmArray));
            if_wasm!($v!(WasmContinuationObject));
            if_wasm!($v!(WasmExceptionPackage));
            if_wasm!($v!(WasmFuncRef));
            if_wasm!($v!(WasmGlobalObject));
            if_wasm!($v!(WasmInstanceObject));
            if_wasm!($v!(WasmMemoryObject));
            if_wasm!($v!(WasmMemoryMapDescriptor));
            if_wasm!($v!(WasmModuleObject));
            if_wasm!($v!(WasmNull));
            if_wasm!($v!(WasmObject));
            if_wasm!($v!(WasmResumeData));
            if_wasm!($v!(WasmStruct));
            if_wasm!($v!(WasmSuspenderObject));
            if_wasm!($v!(WasmSuspendingObject));
            if_wasm!($v!(WasmTableObject));
            if_wasm!($v!(WasmTagObject));
            if_wasm!($v!(WasmTypeInfo));
            if_wasm!($v!(WasmValueObject));
            $v!(WeakArrayList);
            $v!(WeakCell);
            torque_defined_class_list!($v);
            simple_heap_object_list1!($v);
        };
    }

    //This macro is a placeholder for the torque-generated class list.
    macro_rules! torque_defined_class_list {
        ($v:ident) => {};
    }

    // Adapted VIRTUAL_OBJECT_TYPE_LIST
    macro_rules! virtual_object_type_list {
        ($v:ident) => {
            $v!(AccessCheckNeeded);
            $v!(AlwaysSharedSpaceJSObject);
            $v!(BigIntWrapper);
            $v!(BooleanWrapper);
            $v!(Callable);
            $v!(Constructor);
            $v!(Filler);
            $v!(HandlerTable);
            $v!(JSContextExtensionObject);
            $v!(JSError);
            $v!(MapCache);
            $v!(NumberWrapper);
            $v!(OSROptimizedCodeCache);
            $v!(ScriptWrapper);
            $v!(StringWrapper);
            $v!(SymbolWrapper);
            $v!(UniqueName);
            $v!(Undetectable);
        };
    }

    // Adapted HEAP_OBJECT_ORDINARY_TYPE_LIST
    macro_rules! heap_object_ordinary_type_list {
        ($v:ident) => {
            heap_object_ordinary_type_list_base!($v);
            $v!(JSV8BreakIterator);
            $v!(JSCollator);
            $v!(JSDateTimeFormat);
            $v!(JSDisplayNames);
            $v!(JSDurationFormat);
            $v!(JSListFormat);
            $v!(JSLocale);
            $v!(JSNumberFormat);
            $v!(JSPluralRules);
            $v!(JSRelativeTimeFormat);
            $v!(JSSegmentDataObject);
            $v!(JSSegmentDataObjectWithIsWordLike);
            $v!(JSSegmentIterator);
            $v!(JSSegmenter);
            $v!(JSSegments);
        };
    }

    // Adapted ABSTRACT_TRUSTED_OBJECT_LIST_GENERATOR
    macro_rules! abstract_trusted_object_list_generator {
        ($apply:ident, $v:ident) => {
            $apply!($v, TrustedObject, TrustedObject);
            $apply!($v, ExposedTrustedObject, ExposedTrustedObject);
            $apply!($v, UncompiledData, UncompiledData);
            if_wasm!($apply!($v, WasmFunctionData, WasmFunctionData));
        };
    }

    // Adapted CONCRETE_TRUSTED_OBJECT_LIST_GENERATOR
    macro_rules! concrete_trusted_object_list_generator {
        ($apply:ident, $v:ident) => {
            $apply!($v, BytecodeArray, BytecodeArray);
            $apply!($v, Code, Code);
            $apply!($v, InstructionStream, InstructionStream);
            $apply!($v, InterpreterData, InterpreterData);
            $apply!($v, UncompiledDataWithPreparseData, UncompiledDataWithPreparseData);
            $apply!($v, UncompiledDataWithoutPreparseData, UncompiledDataWithoutPreparseData);
            $apply!($v, UncompiledDataWithPreparseDataAndJob, UncompiledDataWithPreparseDataAndJob);
            $apply!($v, UncompiledDataWithoutPreparseDataWithJob, UncompiledDataWithoutPreparseDataWithJob);
            $apply!($v, SharedFunctionInfoWrapper, SharedFunctionInfoWrapper);
            $apply!($v, ProtectedFixedArray, ProtectedFixedArray);
            $apply!($v, ProtectedWeakFixedArray, ProtectedWeakFixedArray);
            $apply!($v, TrustedByteArray, TrustedByteArray);
            $apply!($v, TrustedFixedArray, TrustedFixedArray);
            $apply!($v, TrustedForeign, TrustedForeign);
            $apply!($v, TrustedWeakFixedArray, TrustedWeakFixedArray);
            $apply!($v, AtomRegExpData, AtomRegExpData);
            $apply!($v, IrRegExpData, IrRegExpData);
            $apply!($v, RegExpData, RegExpData);
            if_wasm!($apply!($v, WasmImportData, WasmImportData));
            if_wasm!($apply!($v, WasmCapiFunctionData, WasmCapiFunctionData));
            if_wasm!($apply!($v, WasmDispatchTable, WasmDispatchTable));
            if_wasm!($apply!($v, WasmExportedFunctionData, WasmExportedFunctionData));
            if_wasm!($apply!($v, WasmJSFunctionData, WasmJSFunctionData));
            if_wasm!($apply!($v, WasmInternalFunction, WasmInternalFunction));
            if_wasm!($apply!($v, WasmTrustedInstanceData, WasmTrustedInstanceData));
        };
    }

    macro_rules! trusted_object_list1_adapter {
        ($v:ident, $name:ident, $name_uppercase:ident) => {
            $v!($name)
        };
    }

    macro_rules! trusted_object_list2_adapter {
        ($v:ident, $name:ident, $name_uppercase:ident) => {
            $v!($name, $name_uppercase)
        };
    }

    // Adapted CONCRETE_TRUSTED_OBJECT_TYPE_LIST1
    macro_rules! concrete_trusted_object_type_list1 {
        ($v:ident) => {
            concrete_trusted_object_list_generator!(trusted_object_list1_adapter, $v);
        };
    }

    // Adapted CONCRETE_TRUSTED_OBJECT_TYPE_LIST2
    macro_rules! concrete_trusted_object_type_list2 {
        ($v:ident) => {
            concrete_trusted_object_list_generator!(trusted_object_list2_adapter, $v);
        };
    }

    // Adapted HEAP_OBJECT_TRUSTED_TYPE_LIST
    macro_rules! heap_object_trusted_type_list {
        ($v:ident) => {
            abstract_trusted_object_list_generator!(trusted_object_list1_adapter, $v);
            concrete_trusted_object_list_generator!(trusted_object_list1_adapter, $v);
        };
    }

    // Adapted HEAP_OBJECT_TEMPLATE_TYPE_LIST
    macro_rules! heap_object_template_type_list {
        ($v:ident) => {
            $v!(HashTable);
        };
    }

    // Adapted HEAP_OBJECT_SPECIALIZED_TYPE_LIST
    macro_rules! heap_object_specialized_type_list {
        ($v:ident) => {
            $v!(AwaitContext);
            $v!(BlockContext);
            $v!(CallableApiObject);
            $v!(CallableJSFunction);
            $v!(CallableJSProxy);
            $v!(CatchContext);
            $v!(DebugEvaluateContext);
            $v!(EvalContext);
            $v!(FreeSpaceOrFiller);
            $v!(FunctionContext);
            $v!(JSApiObject);
            $v!(JSClassConstructor);
            $v!(JSLastDummyApiObject);
            $v!(JSPromiseConstructor);
            $v!(JSArrayConstructor);
            $v!(JSRegExpConstructor);
            $v!(JSMapKeyIterator);
            $v!(JSMapKeyValueIterator);
            $v!(JSMapValueIterator);
            $v!(JSSetKeyValueIterator);
            $v!(JSSetValueIterator);
            $v!(JSSpecialApiObject);
            $v!(MaybeReadOnlyJSObject);
            $v!(ModuleContext);
            $v!(NonNullForeign);
            $v!(ScriptContext);
            $v!(WithContext);
            $v!(JSInternalPrototypeBase);
            $v!(JSObjectPrototype);
            $v!(JSRegExpPrototype);
            $v!(JSPromisePrototype);
            $v!(JSSetPrototype);
            $v!(JSIteratorPrototype);
            $v!(JSArrayIteratorPrototype);
            $v!(JSMapIteratorPrototype);
            $v!(JSTypedArrayPrototype);
            $v!(JSSetIteratorPrototype);
            $v!(JSStringIteratorPrototype);
            $v!(TypedArrayConstructor);
            $v!(Uint8TypedArrayConstructor);
            $v!(Int8TypedArrayConstructor);
            $v!(Uint16TypedArrayConstructor);
            $v!(Int16TypedArrayConstructor);
            $v!(Uint32TypedArrayConstructor);
            $v!(Int32TypedArrayConstructor);
            $v!(Float16TypedArrayConstructor);
            $v!(Float32TypedArrayConstructor);
            $v!(Float64TypedArrayConstructor);
            $v!(Uint8ClampedTypedArrayConstructor);
            $v!(Biguint64TypedArrayConstructor);
            $v!(Bigint64TypedArrayConstructor);
        };
    }

    // Adapted HEAP_OBJECT_TYPE_LIST
    macro_rules! heap_object_type_list {
        ($v:ident) => {
            heap_object_ordinary_type_list!($v);
            virtual_object_type_list!($v);
            heap_object_trusted_type_list!($v);
            heap_object_template_type_list!($v);
            heap_object_specialized_type_list!($v);
        };
    }

    // Adapted ODDBALL_LIST
    macro_rules! oddball_list {
        ($v:ident) => {
            $v!(Undefined, undefined_value, UndefinedValue);
            $v!(Null, null_value, NullValue);
            $v!(True, true_value, TrueValue);
            $v!(False, false_value, FalseValue);
        };
    }

    // Adapted HOLE_LIST
    macro_rules! hole_list {
        ($v:ident) => {
            $v!(TheHole, the_hole_value, TheHoleValue);
            $v!(PropertyCellHole, property_cell_hole_value, PropertyCellHoleValue);
            $v!(HashTableHole, hash_table_hole_value, HashTableHoleValue);
            $v!(PromiseHole, promise_hole_value, PromiseHoleValue);
            $v!(Exception, exception, Exception);
            $v!(TerminationException, termination_exception, TerminationException);
            $v!(Uninitialized, uninitialized_value, UninitializedValue);
            $v!(ArgumentsMarker, arguments_marker, ArgumentsMarker);
            $v!(OptimizedOut, optimized_out, OptimizedOut);
            $v!(StaleRegister, stale_register, StaleRegister);
            $v!(SelfReferenceMarker, self_reference_marker, SelfReferenceMarker);
            $v!(BasicBlockCountersMarker, basic_block_counters_marker, BasicBlockCountersMarker);
        };
    }

    // Adapted OBJECT_TYPE_LIST
    macro_rules! object_type_list {
        ($v:ident) => {
            $v!(Primitive);
            $v!(Number);
            $v!(Numeric);
        };
    }

    //No forward declarations implemented, because Rust doesn't need them.

    // Example usage:
    #[cfg(test)]
    mod tests {
        use super::*;

        #[test]
        fn test_macros() {
            macro_rules! print_type {
                ($type:ident) => {
                    println!("Type: {}", stringify!($type));
                };
            }

            println!("Ordinary Heap Objects:");
            macro_rules! print_instance_type {
                ($type:ident) => {
                    println!("Type: {:?}", InstanceType::$type);
                };
            }

            println!("Simple Heap Objects 1:");
            macro_rules! print_simple_type1 {
                ($type:ident) => {
                    println!("Simple Type 1: {}", stringify!($type));
                };
            }
            simple_heap_object_list1!(print_simple_type1);

            println!("Simple Heap Objects 2:");
            macro_rules! print_simple_type2 {
                ($type:ident, $name:ident) => {
                    println!("Simple Type 2: {}, Name: {}", stringify!($type), stringify!($name));
                };
            }
            simple_heap_object_list2!(print_simple_type2);

            println!("Dynamically Sized Heap Objects:");
            macro_rules! print_dynamic_type {
                ($type:ident) => {
                    println!("Dynamic Type: {}", stringify!($type));
                };
            }
            dynamically_sized_heap_object_list!(print_dynamic_type);

            println!("Heap Object Ordinary Types:");
            heap_object_ordinary_type_list!(print_instance_type);

            println!("Virtual Object Types:");
            macro_rules! print_virtual_type {
                ($type:ident) => {
                    println!("Virtual Type: {}", stringify!($type));
                };
            }
            virtual_object_type_list!(print_virtual_type);

            println!("Heap Object Trusted Types:");
            macro_rules! print_trusted_type {
                ($type:ident) => {
                    println!("Trusted Type: {}", stringify!($type));
                };
            }
            heap_object_trusted_type_