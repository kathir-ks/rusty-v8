// Converted from V8 C++ source files:
// Header: fma-instr.h
// Implementation: N/A
// 
// This file combines both header and implementation into idiomatic Rust code.

pub mod fma_instr {

  #[macro_export]
  macro_rules! create_fma_instructions {
    ($V:ident) => {
      $V!(vfmadd132sd, 0x66, 0x0F, 0x38, W1, 0x99);
      $V!(vfmadd213sd, 0x66, 0x0F, 0x38, W1, 0xA9);
      $V!(vfmadd231sd, 0x66, 0x0F, 0x38, W1, 0xB9);
      $V!(vfmsub132sd, 0x66, 0x0F, 0x38, W1, 0x9B);
      $V!(vfmsub213sd, 0x66, 0x0F, 0x38, W1, 0xAB);
      $V!(vfmsub231sd, 0x66, 0x0F, 0x38, W1, 0xBB);
      $V!(vfnmadd132sd, 0x66, 0x0F, 0x38, W1, 0x9D);
      $V!(vfnmadd213sd, 0x66, 0x0F, 0x38, W1, 0xAD);
      $V!(vfnmadd231sd, 0x66, 0x0F, 0x38, W1, 0xBD);
      $V!(vfnmsub132sd, 0x66, 0x0F, 0x38, W1, 0x9F);
      $V!(vfnmsub213sd, 0x66, 0x0F, 0x38, W1, 0xAF);
      $V!(vfnmsub231sd, 0x66, 0x0F, 0x38, W1, 0xBF);

      $V!(vfmadd132ss, 0x66, 0x0F, 0x38, W0, 0x99);
      $V!(vfmadd213ss, 0x66, 0x0F, 0x38, W0, 0xA9);
      $V!(vfmadd231ss, 0x66, 0x0F, 0x38, W0, 0xB9);
      $V!(vfmsub132ss, 0x66, 0x0F, 0x38, W0, 0x9B);
      $V!(vfmsub213ss, 0x66, 0x0F, 0x38, W0, 0xAB);
      $V!(vfmsub231ss, 0x66, 0x0F, 0x38, W0, 0xBB);
      $V!(vfnmadd132ss, 0x66, 0x0F, 0x38, W0, 0x9D);
      $V!(vfnmadd213ss, 0x66, 0x0F, 0x38, W0, 0xAD);
      $V!(vfnmadd231ss, 0x66, 0x0F, 0x38, W0, 0xBD);
      $V!(vfnmsub132ss, 0x66, 0x0F, 0x38, W0, 0x9F);
      $V!(vfnmsub213ss, 0x66, 0x0F, 0x38, W0, 0xAF);
      $V!(vfnmsub231ss, 0x66, 0x0F, 0x38, W0, 0xBF);

      $V!(vfmadd132ps, 0x66, 0x0F, 0x38, W0, 0x98);
      $V!(vfmadd213ps, 0x66, 0x0F, 0x38, W0, 0xA8);
      $V!(vfmadd231ps, 0x66, 0x0F, 0x38, W0, 0xB8);
      $V!(vfnmadd132ps, 0x66, 0x0F, 0x38, W0, 0x9C);
      $V!(vfnmadd213ps, 0x66, 0x0F, 0x38, W0, 0xAC);
      $V!(vfnmadd231ps, 0x66, 0x0F, 0x38, W0, 0xBC);

      $V!(vfmadd132pd, 0x66, 0x0F, 0x38, W1, 0x98);
      $V!(vfmadd213pd, 0x66, 0x0F, 0x38, W1, 0xA8);
      $V!(vfmadd231pd, 0x66, 0x0F, 0x38, W1, 0xB8);
      $V!(vfnmadd132pd, 0x66, 0x0F, 0x38, W1, 0x9C);
      $V!(vfnmadd213pd, 0x66, 0x0F, 0x38, W1, 0xAC);
      $V!(vfnmadd231pd, 0x66, 0x0F, 0x38, W1, 0xBC);
    };
  }

  // Example usage:
  // create_fma_instructions!(define_instruction);
  //
  // macro_rules! define_instruction {
  //   ($name:ident, $p1:expr, $p2:expr, $p3:expr, $p4:ident, $p5:expr) => {
  //     println!(
  //       "Instruction: {} with params {}, {}, {}, {}, {}",
  //       stringify!($name),
  //       $p1,
  //       $p2,
  //       $p3,
  //       stringify!($p4),
  //       $p5
  //     );
  //   };
  // }

  // Dummy W0 and W1
  #[allow(non_camel_case_types)]
  pub enum W0 {}
  #[allow(non_camel_case_types)]
  pub enum W1 {}
}
