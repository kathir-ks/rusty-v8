// Converted from V8 C++ source files:
// Header: heap-symbols.h
// Implementation: N/A
// 
// This file combines both header and implementation into idiomatic Rust code.

#[cfg(V8_INTL_SUPPORT)]
macro_rules! INTERNALIZED_STRING_LIST_GENERATOR_INTL {
    ($V:ident, $macro_:ident) => {
        $V!($macro_, adoptText_string, "adoptText");
        $V!($macro_, approximatelySign_string, "approximatelySign");
        $V!($macro_, baseName_string, "baseName");
        $V!($macro_, accounting_string, "accounting");
        $V!($macro_, breakType_string, "breakType");
        $V!($macro_, calendars_string, "calendars");
        $V!($macro_, cardinal_string, "cardinal");
        $V!($macro_, caseFirst_string, "caseFirst");
        $V!($macro_, ceil_string, "ceil");
        $V!($macro_, compare_string, "compare");
        $V!($macro_, collation_string, "collation");
        $V!($macro_, collations_string, "collations");
        $V!($macro_, compact_string, "compact");
        $V!($macro_, compactDisplay_string, "compactDisplay");
        $V!($macro_, currency_string, "currency");
        $V!($macro_, currencyDisplay_string, "currencyDisplay");
        $V!($macro_, currencySign_string, "currencySign");
        $V!($macro_, dateStyle_string, "dateStyle");
        $V!($macro_, dateTimeField_string, "dateTimeField");
        $V!($macro_, dayPeriod_string, "dayPeriod");
        $V!($macro_, daysDisplay_string, "daysDisplay");
        $V!($macro_, decimal_string, "decimal");
        $V!($macro_, dialect_string, "dialect");
        $V!($macro_, digital_string, "digital");
        $V!($macro_, direction_string, "direction");
        $V!($macro_, endRange_string, "endRange");
        $V!($macro_, engineering_string, "engineering");
        $V!($macro_, exceptZero_string, "exceptZero");
        $V!($macro_, expand_string, "expand");
        $V!($macro_, exponentInteger_string, "exponentInteger");
        $V!($macro_, exponentMinusSign_string, "exponentMinusSign");
        $V!($macro_, exponentSeparator_string, "exponentSeparator");
        $V!($macro_, fallback_string, "fallback");
        $V!($macro_, first_string, "first");
        $V!($macro_, firstDay_string, "firstDay");
        $V!($macro_, firstDayOfWeek_string, "firstDayOfWeek");
        $V!($macro_, floor_string, "floor");
        $V!($macro_, format_string, "format");
        $V!($macro_, fraction_string, "fraction");
        $V!($macro_, fractionalDigits_string, "fractionalDigits");
        $V!($macro_, fractionalSecond_string, "fractionalSecond");
        $V!($macro_, full_string, "full");
        $V!($macro_, granularity_string, "granularity");
        $V!($macro_, grapheme_string, "grapheme");
        $V!($macro_, group_string, "group");
        $V!($macro_, h11_string, "h11");
        $V!($macro_, h12_string, "h12");
        $V!($macro_, h23_string, "h23");
        $V!($macro_, h24_string, "h24");
        $V!($macro_, halfCeil_string, "halfCeil");
        $V!($macro_, halfEven_string, "halfEven");
        $V!($macro_, halfExpand_string, "halfExpand");
        $V!($macro_, halfFloor_string, "halfFloor");
        $V!($macro_, halfTrunc_string, "halfTrunc");
        $V!($macro_, hour12_string, "hour12");
        $V!($macro_, hourCycle_string, "hourCycle");
        $V!($macro_, hourCycles_string, "hourCycles");
        $V!($macro_, hoursDisplay_string, "hoursDisplay");
        $V!($macro_, ideo_string, "ideo");
        $V!($macro_, ignorePunctuation_string, "ignorePunctuation");
        $V!($macro_, Invalid_Date_string, "Invalid Date");
        $V!($macro_, integer_string, "integer");
        $V!($macro_, isWordLike_string, "isWordLike");
        $V!($macro_, kana_string, "kana");
        $V!($macro_, language_string, "language");
        $V!($macro_, languageDisplay_string, "languageDisplay");
        $V!($macro_, lessPrecision_string, "lessPrecision");
        $V!($macro_, letter_string, "letter");
        $V!($macro_, list_string, "list");
        $V!($macro_, literal_string, "literal");
        $V!($macro_, locale_string, "locale");
        $V!($macro_, loose_string, "loose");
        $V!($macro_, lower_string, "lower");
        $V!($macro_, ltr_string, "ltr");
        $V!($macro_, maximumFractionDigits_string, "maximumFractionDigits");
        $V!($macro_, maximumSignificantDigits_string, "maximumSignificantDigits");
        $V!($macro_, microsecondsDisplay_string, "microsecondsDisplay");
        $V!($macro_, millisecondsDisplay_string, "millisecondsDisplay");
        $V!($macro_, min2_string, "min2");
        $V!($macro_, minimalDays_string, "minimalDays");
        $V!($macro_, minimumFractionDigits_string, "minimumFractionDigits");
        $V!($macro_, minimumIntegerDigits_string, "minimumIntegerDigits");
        $V!($macro_, minimumSignificantDigits_string, "minimumSignificantDigits");
        $V!($macro_, minus_0, "-0");
        $V!($macro_, minusSign_string, "minusSign");
        $V!($macro_, minutesDisplay_string, "minutesDisplay");
        $V!($macro_, monthsDisplay_string, "monthsDisplay");
        $V!($macro_, morePrecision_string, "morePrecision");
        $V!($macro_, nan_string, "nan");
        $V!($macro_, nanosecondsDisplay_string, "nanosecondsDisplay");
        $V!($macro_, narrowSymbol_string, "narrowSymbol");
        $V!($macro_, negative_string, "negative");
        $V!($macro_, never_string, "never");
        $V!($macro_, none_string, "none");
        $V!($macro_, notation_string, "notation");
        $V!($macro_, normal_string, "normal");
        $V!($macro_, numberingSystem_string, "numberingSystem");
        $V!($macro_, numberingSystems_string, "numberingSystems");
        $V!($macro_, numeric_string, "numeric");
        $V!($macro_, ordinal_string, "ordinal");
        $V!($macro_, percentSign_string, "percentSign");
        $V!($macro_, plusSign_string, "plusSign");
        $V!($macro_, quarter_string, "quarter");
        $V!($macro_, region_string, "region");
        $V!($macro_, relatedYear_string, "relatedYear");
        $V!($macro_, roundingMode_string, "roundingMode");
        $V!($macro_, roundingPriority_string, "roundingPriority");
        $V!($macro_, rtl_string, "rtl");
        $V!($macro_, scientific_string, "scientific");
        $V!($macro_, secondsDisplay_string, "secondsDisplay");
        $V!($macro_, segment_string, "segment");
        $V!($macro_, SegmentIterator_string, "Segment Iterator");
        $V!($macro_, Segments_string, "Segments");
        $V!($macro_, sensitivity_string, "sensitivity");
        $V!($macro_, sep_string, "sep");
        $V!($macro_, shared_string, "shared");
        $V!($macro_, signDisplay_string, "signDisplay");
        $V!($macro_, standard_string, "standard");
        $V!($macro_, startRange_string, "startRange");
        $V!($macro_, strict_string, "strict");
        $V!($macro_, stripIfInteger_string, "stripIfInteger");
        $V!($macro_, style_string, "style");
        $V!($macro_, term_string, "term");
        $V!($macro_, textInfo_string, "textInfo");
        $V!($macro_, timeStyle_string, "timeStyle");
        $V!($macro_, timeZones_string, "timeZones");
        $V!($macro_, timeZoneName_string, "timeZoneName");
        $V!($macro_, trailingZeroDisplay_string, "trailingZeroDisplay");
        $V!($macro_, trunc_string, "trunc");
        $V!($macro_, two_digit_string, "2-digit");
        $V!($macro_, type_string, "type");
        $V!($macro_, unknown_string, "unknown");
        $V!($macro_, upper_string, "upper");
        $V!($macro_, usage_string, "usage");
        $V!($macro_, useGrouping_string, "useGrouping");
        $V!($macro_, unitDisplay_string, "unitDisplay");
        $V!($macro_, weekday_string, "weekday");
        $V!($macro_, weekend_string, "weekend");
        $V!($macro_, weeksDisplay_string, "weeksDisplay");
        $V!($macro_, weekInfo_string, "weekInfo");
        $V!($macro_, yearName_string, "yearName");
        $V!($macro_, yearsDisplay_string, "yearsDisplay");
    };
}
#[cfg(not(V8_INTL_SUPPORT))]
macro_rules! INTERNALIZED_STRING_LIST_GENERATOR_INTL {
    ($V:ident, $macro_:ident) => {};
}

macro_rules! EXTRA_IMPORTANT_INTERNALIZED_STRING_LIST_GENERATOR {
    ($V:ident, $macro_:ident) => {
        $V!($macro_, empty_string, "");
    };
}

macro_rules! IMPORTANT_INTERNALIZED_STRING_LIST_GENERATOR {
    ($V:ident, $macro_:ident) => {
        $V!($macro_, prototype_string, "prototype");
        $V!($macro_, name_string, "name");
        $V!($macro_, enumerable_string, "enumerable");
        $V!($macro_, configurable_string, "configurable");
        $V!($macro_, value_string, "value");
        $V!($macro_, writable_string, "writable");
    };
}

macro_rules! SINGLE_CHARACTER_ASCII_INTERNALIZED_STRING_LIST_GENERATOR {
    ($V_:ident, $macro_:ident) => {
        $V_!($macro_, ascii_nul_string, "\0");
        $V_!($macro_, ascii_soh_string, "\x01");
        $V_!($macro_, ascii_stx_string, "\x02");
        $V_!($macro_, ascii_etx_string, "\x03");
        $V_!($macro_, ascii_eot_string, "\x04");
        $V_!($macro_, ascii_enq_string, "\x05");
        $V_!($macro_, ascii_ack_string, "\x06");
        $V_!($macro_, ascii_bel_string, "\x07");
        $V_!($macro_, ascii_bs_string, "\x08");
        $V_!($macro_, ascii_ht_string, "\x09");
        $V_!($macro_, ascii_lf_string, "\x0a");
        $V_!($macro_, ascii_vt_string, "\x0b");
        $V_!($macro_, ascii_ff_string, "\x0c");
        $V_!($macro_, ascii_cr_string, "\x0d");
        $V_!($macro_, ascii_so_string, "\x0e");
        $V_!($macro_, ascii_si_string, "\x0f");
        $V_!($macro_, ascii_dle_string, "\x10");
        $V_!($macro_, ascii_dc1_string, "\x11");
        $V_!($macro_, ascii_dc2_string, "\x12");
        $V_!($macro_, ascii_dc3_string, "\x13");
        $V_!($macro_, ascii_dc4_string, "\x14");
        $V_!($macro_, ascii_nak_string, "\x15");
        $V_!($macro_, ascii_syn_string, "\x16");
        $V_!($macro_, ascii_etb_string, "\x17");
        $V_!($macro_, ascii_can_string, "\x18");
        $V_!($macro_, ascii_em_string, "\x19");
        $V_!($macro_, ascii_sub_string, "\x1a");
        $V_!($macro_, ascii_esc_string, "\x1b");
        $V_!($macro_, ascii_fs_string, "\x1c");
        $V_!($macro_, ascii_gs_string, "\x1d");
        $V_!($macro_, ascii_rs_string, "\x1e");
        $V_!($macro_, ascii_us_string, "\x1f");
        $V_!($macro_, space_string, " ");
        $V_!($macro_, exclamation_mark_string, "!");
        $V_!($macro_, double_quotes_string, "\"");
        $V_!($macro_, hash_string, "#");
        $V_!($macro_, dollar_string, "$");
        $V_!($macro_, percent_sign_string, "%");
        $V_!($macro_, ampersand_string, "&");
        $V_!($macro_, single_quote_string, "\'");
        $V_!($macro_, open_parenthesis_string, "(");
        $V_!($macro_, close_parenthesis_string, ")");
        $V_!($macro_, asterisk_string, "*");
        $V_!($macro_, plus_string, "+");
        $V_!($macro_, comma_string, ",");
        $V_!($macro_, minus_string, "-");
        $V_!($macro_, dot_string, ".");
        $V_!($macro_, slash_string, "/");
        $V_!($macro_, zero_string, "0");
        $V_!($macro_, one_string, "1");
        $V_!($macro_, two_string, "2");
        $V_!($macro_, three_string, "3");
        $V_!($macro_, four_string, "4");
        $V_!($macro_, five_string, "5");
        $V_!($macro_, six_string, "6");
        $V_!($macro_, seven_string, "7");
        $V_!($macro_, eight_string, "8");
        $V_!($macro_, nine_string, "9");
        $V_!($macro_, colon_string, ":");
        $V_!($macro_, semicolon_string, ";");
        $V_!($macro_, less_than_string, "<");
        $V_!($macro_, equals_string, "=");
        $V_!($macro_, greater_than_string, ">");
        $V_!($macro_, question_mark_string, "?");
        $V_!($macro_, at_sign_string, "@");
        $V_!($macro_, A_string, "A");
        $V_!($macro_, B_string, "B");
        $V_!($macro_, C_string, "C");
        $V_!($macro_, D_string, "D");
        $V_!($macro_, E_string, "E");
        $V_!($macro_, F_string, "F");
        $V_!($macro_, G_string, "G");
        $V_!($macro_, H_string, "H");
        $V_!($macro_, I_string, "I");
        $V_!($macro_, J_string, "J");
        $V_!($macro_, K_string, "K");
        $V_!($macro_, L_string, "L");
        $V_!($macro_, M_string, "M");
        $V_!($macro_, N_string, "N");
        $V_!($macro_, O_string, "O");
        $V_!($macro_, P_string, "P");
        $V_!($macro_, Q_string, "Q");
        $V_!($macro_, R_string, "R");
        $V_!($macro_, S_string, "S");
        $V_!($macro_, T_string, "T");
        $V_!($macro_, U_string, "U");
        $V_!($macro_, V_string, "V");
        $V_!($macro_, W_string, "W");
        $V_!($macro_, X_string, "X");
        $V_!($macro_, Y_string, "Y");
        $V_!($macro_, Z_string, "Z");
        $V_!($macro_, open_bracket_string, "[");
        $V_!($macro_, backslash_string, "\\");
        $V_!($macro_, close_bracket_string, "]");
        $V_!($macro_, caret_string, "^");
        $V_!($macro_, underscore_string, "_");
        $V_!($macro_, backtick_string, "`");
        $V_!($macro_, a_string, "a");
        $V_!($macro_, b_string, "b");
        $V_!($macro_, c_string, "c");
        $V_!($macro_, d_string, "d");
        $V_!($macro_, e_string, "e");
        $V_!($macro_, f_string, "f");
        $V_!($macro_, g_string, "g");
        $V_!($macro_, h_string, "h");
        $V_!($macro_, i_string, "i");
        $V_!($macro_, j_string, "j");
        $V_!($macro_, k_string, "k");
        $V_!($macro_, l_string, "l");
        $V_!($macro_, m_string, "m");
        $V_!($macro_, n_string, "n");
        $V_!($macro_, o_string, "o");
        $V_!($macro_, p_string, "p");
        $V_!($macro_, q_string, "q");
        $V_!($macro_, r_string, "r");
        $V_!($macro_, s_string, "s");
        $V_!($macro_, t_string, "t");
        $V_!($macro_, u_string, "u");
        $V_!($macro_, v_string, "v");
        $V_!($macro_, w_string, "w");
        $V_!($macro_, x_string, "x");
        $V_!($macro_, y_string, "y");
        $V_!($macro_, z_string, "z");
        $V_!($macro_, open_brace_string, "{");
        $V_!($macro_, pipe_string, "|");
        $V_!($macro_, close_brace_string, "}");
        $V_!($macro_, tilde_string, "~");
        $V_!($macro_, ascii_del_string, "\x7f");
    };
}

macro_rules! SINGLE_CHARACTER_INTERNALIZED_STRING_LIST_GENERATOR {
    ($V_:ident, $macro_:ident) => {
        SINGLE_CHARACTER_ASCII_INTERNALIZED_STRING_LIST_GENERATOR!($V_, $macro_);
        $V_!($macro_, latin1_80_string, "\x80");
        $V_!($macro_, latin1_81_string, "\x81");
        $V_!($macro_, latin1_82_string, "\x82");
        $V_!($macro_, latin1_83_string, "\x83");
        $V_!($macro_, latin1_84_string, "\x84");
        $V_!($macro_, latin1_85_string, "\x85");
        $V_!($macro_, latin1_86_string, "\x86");
        $V_!($macro_, latin1_87_string, "\x87");
        $V_!($macro_, latin1_88_string, "\x88");
        $V_!($macro_, latin1_89_string, "\x89");
        $V_!($macro_, latin1_8a_string, "\x8a");
        $V_!($macro_, latin1_8b_string, "\x8b");
        $V_!($macro_, latin1_8c_string, "\x8c");
        $V_!($macro_, latin1_8d_string, "\x8d");
        $V_!($macro_, latin1_8e_string, "\x8e");
        $V_!($macro_, latin1_8f_string, "\x8f");
        $V_!($macro_, latin1_90_string, "\x90");
        $V_!($macro_, latin1_91_string, "\x91");
        $V_!($macro_, latin1_92_string, "\x92");
        $V_!($macro_, latin1_93_string, "\x93");
        $V_!($macro_, latin1_94_string, "\x94");
        $V_!($macro_, latin1_95_string, "\x95");
        $V_!($macro_, latin1_96_string, "\x96");
        $V_!($macro_, latin1_97_string, "\x97");
        $V_!($macro_, latin1_98_string, "\x98");
        $V_!($macro_, latin1_99_string, "\x99");
        $V_!($macro_, latin1_9a_string, "\x9a");
        $V_!($macro_, latin1_9b_string, "\x9b");
        $V_!($macro_, latin1_9c_string, "\x9c");
        $V_!($macro_, latin1_9d_string, "\x9d");
        $V_!($macro_, latin1_9e_string, "\x9e");
        $V_!($macro_, latin1_9f_string, "\x9f");
        $V_!($macro_, latin1_a0_string, "\xa0");
        $V_!($macro_, latin1_a1_string, "\xa1");
        $V_!($macro_, latin1_a2_string, "\xa2");
        $V_!($macro_, latin1_a3_string, "\xa3");
        $V_!($macro_, latin1_a4_string, "\xa4");
        $V_!($macro_, latin1_a5_string, "\xa5");
        $V_!($macro_, latin1_a6_string, "\xa6");
        $V_!($macro_, latin1_a7_string, "\xa7");
        $V_!($macro_, latin1_a8_string, "\xa8");
        $V_!($macro_, latin1_a9_string, "\xa9");
        $V_!($macro_, latin1_aa_string, "\xaa");
        $V_!($macro_, latin1_ab_string, "\xab");
        $V_!($macro_, latin1_ac_string, "\xac");
        $V_!($macro_, latin1_ad_string, "\xad");
        $V_!($macro_, latin1_ae_string, "\xae");
        $V_!($macro_, latin1_af_string, "\xaf");
        $V_!($macro_, latin1_b0_string, "\xb0");
        $V_!($macro_, latin1_b1_string, "\xb1");
        $V_!($macro_, latin1_b2_string, "\xb2");
        $V_!($macro_, latin1_b3_string, "\xb3");
        $V_!($macro_, latin1_b4_string, "\xb4");
        $V_!($macro_, latin1_b5_string, "\xb5");
        $V_!($macro_, latin1_b6_string, "\xb6");
        $V_!($macro_, latin1_b7_string, "\xb7");
        $V_!($macro_, latin1_b8_string, "\xb8");
        $V_!($macro_, latin1_b9_string, "\xb9");
        $V_!($macro_, latin1_ba_string, "\xba");
        $V_!($macro_, latin1_bb_string, "\xbb");
        $V_!($macro_, latin1_bc_string, "\xbc");
        $V_!($macro_, latin1_bd_string, "\xbd");
        $V_!($macro_, latin1_be_string, "\xbe");
        $V_!($macro_, latin1_bf_string, "\xbf");
        $V_!($macro_, latin1_c0_string, "\xc0");
        $V_!($macro_, latin1_c1_string, "\xc1");
        $V_!($macro_, latin1_c2_string, "\xc2");
        $V_!($macro_, latin1_c3_string, "\xc3");
        $V_!($macro_, latin1_c4_string, "\xc4");
        $V_!($macro_, latin1_c5_string, "\xc5");
        $V_!($macro_, latin1_c6_string, "\xc6");
        $V_!($macro_, latin1_c7_string, "\xc7");
        $V_!($macro_, latin1_c8_string, "\xc8");
        $V_!($macro_, latin1_c9_string, "\xc9");
        $V_!($macro_, latin1_ca_string, "\xca");
        $V_!($macro_, latin1_cb_string, "\xcb");
        $V_!($macro_, latin1_cc_string, "\xcc");
        $V_!($macro_, latin1_cd_string, "\xcd");
        $V_!($macro_, latin1_ce_string, "\xce");
        $V_!($macro_, latin1_cf_string, "\xcf");
        $V_!($macro_, latin1_d0_string, "\xd0");
        $V_!($macro_, latin1_d1_string, "\xd1");
        $V_!($macro_, latin1_d2_string, "\xd2");
        $V_!($macro_, latin1_d3_string, "\xd3");
        $V_!($macro_, latin1_d4_string, "\xd4");
        $V_!($macro_, latin1_d5_string, "\xd5");
        $V_!($macro_, latin1_d6_string, "\xd6");
        $V_!($macro_, latin1_d7_string, "\xd7");
        $V_!($macro_, latin1_d8_string, "\xd8");
        $V_!($macro_, latin1_d9_string, "\xd9");
        $V_!($macro_, latin1_da_string, "\xda");
        $V_!($macro_, latin1_db_string, "\xdb");
        $V_!($macro_, latin1_dc_string, "\xdc");
        $V_!($macro_, latin1_dd_string, "\xdd");
        $V_!($macro_, latin1_de_string, "\xde");
        $V_!($macro_, latin1_df_string, "\xdf");
        $V_!($macro_, latin1_e0_string, "\xe0");
        $V_!($macro_, latin1_e1_string, "\xe1");
        $V_!($macro_, latin1_e2_string, "\xe2");
        $V_!($macro_, latin1_e3_string, "\xe3");
        $V_!($macro_, latin1_e4_string, "\xe4");
        $V_!($macro_, latin1_e5_string, "\xe5");
        $V_!($macro_, latin1_e6_string, "\xe6");
        $V_!($macro_, latin1_e7_string, "\xe7");
        $V_!($macro_, latin1_e8_string, "\xe8");
        $V_!($macro_, latin1_e9_string, "\xe9");
        $V_!($macro_, latin1_ea_string, "\xea");
        $V_!($macro_, latin1_eb_string, "\xeb");
        $V_!($macro_, latin1_ec_string, "\xec");
        $V_!($macro_, latin1_ed_string, "\xed");
        $V_!($macro_, latin1_ee_string, "\xee");
        $V_!($macro_, latin1_ef_string, "\xef");
        $V_!($macro_, latin1_f0_string, "\xf0");
        $V_!($macro_, latin1_f1_string, "\xf1");
        $V_!($macro_, latin1_f2_string, "\xf2");
        $V_!($macro_, latin1_f3_string, "\xf3");
        $V_!($macro_, latin1_f4_string, "\xf4");
        $V_!($macro_, latin1_f5_string, "\xf5");
        $V_!($macro_, latin1_f6_string, "\xf6");
        $V_!($macro_, latin1_f7_string, "\xf7");
        $V_!($macro_, latin1_f8_string, "\xf8");
        $V_!($macro_, latin1_f9_string, "\xf9");
        $V_!($macro_, latin1_fa_string, "\xfa");
        $V_!($macro_, latin1_fb_string, "\xfb");
        $V_!($macro_, latin1_fc_string, "\xfc");
        $V_!($macro_, latin1_fd_string, "\xfd");
        $V_!($macro_, latin1_fe_string, "\xfe");
        $V_!($macro_, latin1_ff_string, "\xff");
    };
}

macro_rules! NOT_IMPORTANT_INTERNALIZED_STRING_LIST_GENERATOR {
    ($V:ident, $macro_:ident) => {
        INTERNALIZED_STRING_LIST_GENERATOR_INTL!($V, $macro_);
        SINGLE_CHARACTER_INTERNALIZED_STRING_LIST_GENERATOR!($V, $macro_);
        $V!($macro_, add_string, "add");
        $V!($macro_, AggregateError_string, "AggregateError");
        $V!($macro_, alphabet_string, "alphabet");
        $V!($macro_, always_string, "always");
        $V!($macro_, anonymous_string, "anonymous");
        $V!($macro_, apply_string, "apply");
        $V!($macro_, Arguments_string, "Arguments");
        $V!($macro_, arguments_string, "arguments");
        $V!($macro_, arguments_to_string, "[object Arguments]");
        $V!($macro_, Array_string, "Array");
        $V!($macro_, array_to_string, "[object Array]");
        $V!($macro_, ArrayBuffer_string, "ArrayBuffer");
        $V!($macro_, ArrayIterator_string, "Array Iterator");
        $V!($macro_, as_string, "as");
        $V!($macro_, assert_string, "assert");
        $V!($macro_, async_string, "async");
        $V!($macro_, AtomicsCondition_string, "Atomics.Condition");
        $V!($macro_, AtomicsMutex_string, "Atomics.Mutex");
        $V!($macro_, auto_string, "auto");
        $V!($macro_, BigInt_string, "BigInt");
        $V!($macro_, bigint_string, "bigint");
        $V!($macro_, BigInt64Array_string, "BigInt64Array");
        $V!($macro_, BigUint64Array_string, "BigUint64Array");
        $V!($macro_, bind_string, "bind");
        $V!($macro_, blank_string, "blank");
        $V!($macro_, Boolean_string, "Boolean");
        $V!($macro_, boolean_string, "boolean");
        $V!($macro_, boolean_to_string, "[object Boolean]");
        $V!($macro_, bound__string, "bound ");
        $V!($macro_, buffer_string, "buffer");
        $V!($macro_, byte_length_string, "byteLength");
        $V!($macro_, byte_offset
