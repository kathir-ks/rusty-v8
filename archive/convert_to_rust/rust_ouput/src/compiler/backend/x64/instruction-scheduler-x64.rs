// Converted from V8 C++ source files:
// Header: N/A
// Implementation: instruction-scheduler-x64.cc
// 
// This file combines both header and implementation into idiomatic Rust code.

#![allow(dead_code)]
#![allow(unused_variables)]

mod instruction_scheduler {
    use std::collections::HashMap;

    pub struct InstructionScheduler {}

    impl InstructionScheduler {
        pub fn scheduler_supported() -> bool {
            true
        }

        pub fn get_target_instruction_flags(&self, instr: &Instruction) -> i32 {
            match instr.arch_opcode {
                ArchOpcode::kX64TraceInstruction => kHasSideEffect,
                ArchOpcode::kX64Add => kNoOpcodeFlags, // Assuming these are arithmetic and don't have side effects by default
                ArchOpcode::kX64Add32 => kNoOpcodeFlags,
                ArchOpcode::kX64And => kNoOpcodeFlags,
                ArchOpcode::kX64And32 => kNoOpcodeFlags,
                ArchOpcode::kX64Cmp => kNoOpcodeFlags,
                ArchOpcode::kX64Cmp32 => kNoOpcodeFlags,
                ArchOpcode::kX64Cmp16 => kNoOpcodeFlags,
                ArchOpcode::kX64Cmp8 => kNoOpcodeFlags,
                ArchOpcode::kX64Test => kNoOpcodeFlags,
                ArchOpcode::kX64Test32 => kNoOpcodeFlags,
                ArchOpcode::kX64Test16 => kNoOpcodeFlags,
                ArchOpcode::kX64Test8 => kNoOpcodeFlags,
                ArchOpcode::kX64Or => kNoOpcodeFlags,
                ArchOpcode::kX64Or32 => kNoOpcodeFlags,
                ArchOpcode::kX64Xor => kNoOpcodeFlags,
                ArchOpcode::kX64Xor32 => kNoOpcodeFlags,
                ArchOpcode::kX64Sub => kNoOpcodeFlags,
                ArchOpcode::kX64Sub32 => kNoOpcodeFlags,
                ArchOpcode::kX64Imul => kNoOpcodeFlags,
                ArchOpcode::kX64Imul32 => kNoOpcodeFlags,
                ArchOpcode::kX64ImulHigh32 => kNoOpcodeFlags,
                ArchOpcode::kX64UmulHigh32 => kNoOpcodeFlags,
                ArchOpcode::kX64ImulHigh64 => kNoOpcodeFlags,
                ArchOpcode::kX64UmulHigh64 => kNoOpcodeFlags,
                ArchOpcode::kX64Not => kNoOpcodeFlags,
                ArchOpcode::kX64Not32 => kNoOpcodeFlags,
                ArchOpcode::kX64Neg => kNoOpcodeFlags,
                ArchOpcode::kX64Neg32 => kNoOpcodeFlags,
                ArchOpcode::kX64Shl => kNoOpcodeFlags,
                ArchOpcode::kX64Shl32 => kNoOpcodeFlags,
                ArchOpcode::kX64Shr => kNoOpcodeFlags,
                ArchOpcode::kX64Shr32 => kNoOpcodeFlags,
                ArchOpcode::kX64Sar => kNoOpcodeFlags,
                ArchOpcode::kX64Sar32 => kNoOpcodeFlags,
                ArchOpcode::kX64Rol => kNoOpcodeFlags,
                ArchOpcode::kX64Rol32 => kNoOpcodeFlags,
                ArchOpcode::kX64Ror => kNoOpcodeFlags,
                ArchOpcode::kX64Ror32 => kNoOpcodeFlags,
                ArchOpcode::kX64Lzcnt => kNoOpcodeFlags,
                ArchOpcode::kX64Lzcnt32 => kNoOpcodeFlags,
                ArchOpcode::kX64Tzcnt => kNoOpcodeFlags,
                ArchOpcode::kX64Tzcnt32 => kNoOpcodeFlags,
                ArchOpcode::kX64Popcnt => kNoOpcodeFlags,
                ArchOpcode::kX64Popcnt32 => kNoOpcodeFlags,
                ArchOpcode::kX64Bswap => kNoOpcodeFlags,
                ArchOpcode::kX64Bswap32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Cmp => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Add => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Sub => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Mul => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Div => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Sqrt => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Round => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32ToFloat64 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Cmp => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Add => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Sub => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Mul => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Div => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Mod => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Sqrt => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Round => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Max => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Max => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32Min => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64Min => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ToFloat32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ToFloat16RawBits => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat16RawBitsToFloat64 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32ToInt32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32ToUint32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ToInt32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ToUint32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ToInt64 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32ToInt64 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ToUint64 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat32ToUint64 => kNoOpcodeFlags,
                ArchOpcode::kSSEInt32ToFloat64 => kNoOpcodeFlags,
                ArchOpcode::kSSEInt32ToFloat32 => kNoOpcodeFlags,
                ArchOpcode::kSSEInt64ToFloat32 => kNoOpcodeFlags,
                ArchOpcode::kSSEInt64ToFloat64 => kNoOpcodeFlags,
                ArchOpcode::kSSEUint64ToFloat32 => kNoOpcodeFlags,
                ArchOpcode::kSSEUint64ToFloat64 => kNoOpcodeFlags,
                ArchOpcode::kSSEUint32ToFloat64 => kNoOpcodeFlags,
                ArchOpcode::kSSEUint32ToFloat32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ExtractLowWord32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64ExtractHighWord32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64InsertLowWord32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64InsertHighWord32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64LoadLowWord32 => kNoOpcodeFlags,
                ArchOpcode::kSSEFloat64SilenceNaN => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat32Cmp => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat32Add => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat32Sub => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat32Mul => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat32Div => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat64Cmp => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat64Add => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat64Sub => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat64Mul => kNoOpcodeFlags,
                ArchOpcode::kAVXFloat64Div => kNoOpcodeFlags,
                ArchOpcode::kX64Float64Abs => kNoOpcodeFlags,
                ArchOpcode::kX64Float64Neg => kNoOpcodeFlags,
                ArchOpcode::kX64Float32Abs => kNoOpcodeFlags,
                ArchOpcode::kX64Float32Neg => kNoOpcodeFlags,
                ArchOpcode::kX64BitcastFI => kNoOpcodeFlags,
                ArchOpcode::kX64BitcastDL => kNoOpcodeFlags,
                ArchOpcode::kX64BitcastIF => kNoOpcodeFlags,
                ArchOpcode::kX64BitcastLD => kNoOpcodeFlags,
                ArchOpcode::kX64Lea32 => kNoOpcodeFlags,
                ArchOpcode::kX64Lea => kNoOpcodeFlags,
                ArchOpcode::kX64Dec32 => kNoOpcodeFlags,
                ArchOpcode::kX64Inc32 => kNoOpcodeFlags,
                ArchOpcode::kX64Pinsrb => kNoOpcodeFlags,
                ArchOpcode::kX64Pinsrw => kNoOpcodeFlags,
                ArchOpcode::kX64Pinsrd => kNoOpcodeFlags,
                ArchOpcode::kX64Pinsrq => kNoOpcodeFlags,
                ArchOpcode::kX64Cvttps2dq => kNoOpcodeFlags,
                ArchOpcode::kX64Cvttpd2dq => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4TruncF64x2UZero => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4TruncF32x4U => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8TruncF32x8U => kNoOpcodeFlags,
                ArchOpcode::kX64FSplat => kNoOpcodeFlags,
                ArchOpcode::kX64FExtractLane => kNoOpcodeFlags,
                ArchOpcode::kX64FReplaceLane => kNoOpcodeFlags,
                ArchOpcode::kX64FAbs => kNoOpcodeFlags,
                ArchOpcode::kX64FNeg => kNoOpcodeFlags,
                ArchOpcode::kX64FSqrt => kNoOpcodeFlags,
                ArchOpcode::kX64FAdd => kNoOpcodeFlags,
                ArchOpcode::kX64FSub => kNoOpcodeFlags,
                ArchOpcode::kX64FMul => kNoOpcodeFlags,
                ArchOpcode::kX64FDiv => kNoOpcodeFlags,
                ArchOpcode::kX64FMin => kNoOpcodeFlags,
                ArchOpcode::kX64FMax => kNoOpcodeFlags,
                ArchOpcode::kX64FEq => kNoOpcodeFlags,
                ArchOpcode::kX64FNe => kNoOpcodeFlags,
                ArchOpcode::kX64FLt => kNoOpcodeFlags,
                ArchOpcode::kX64FLe => kNoOpcodeFlags,
                ArchOpcode::kX64F64x2Qfma => kNoOpcodeFlags,
                ArchOpcode::kX64F64x2Qfms => kNoOpcodeFlags,
                ArchOpcode::kX64F64x4Qfma => kNoOpcodeFlags,
                ArchOpcode::kX64F64x4Qfms => kNoOpcodeFlags,
                ArchOpcode::kX64Minpd => kNoOpcodeFlags,
                ArchOpcode::kX64Maxpd => kNoOpcodeFlags,
                ArchOpcode::kX64F32x8Pmin => kNoOpcodeFlags,
                ArchOpcode::kX64F32x8Pmax => kNoOpcodeFlags,
                ArchOpcode::kX64F64x4Pmin => kNoOpcodeFlags,
                ArchOpcode::kX64F64x4Pmax => kNoOpcodeFlags,
                ArchOpcode::kX64F64x2Round => kNoOpcodeFlags,
                ArchOpcode::kX64F64x2ConvertLowI32x4S => kNoOpcodeFlags,
                ArchOpcode::kX64F64x4ConvertI32x4S => kNoOpcodeFlags,
                ArchOpcode::kX64F64x2ConvertLowI32x4U => kNoOpcodeFlags,
                ArchOpcode::kX64F64x2PromoteLowF32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4SConvertI32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64F32x8SConvertI32x8 => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4UConvertI32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64F32x8UConvertI32x8 => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4Qfma => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4Qfms => kNoOpcodeFlags,
                ArchOpcode::kX64F32x8Qfma => kNoOpcodeFlags,
                ArchOpcode::kX64F32x8Qfms => kNoOpcodeFlags,
                ArchOpcode::kX64Minps => kNoOpcodeFlags,
                ArchOpcode::kX64Maxps => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4Round => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4DemoteF64x2Zero => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4DemoteF64x4 => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8Round => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8SConvertF16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8UConvertF16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8SConvertI16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8UConvertI16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8DemoteF32x4Zero => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8DemoteF64x2Zero => kNoOpcodeFlags,
                ArchOpcode::kX64F32x4PromoteLowF16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8Qfma => kNoOpcodeFlags,
                ArchOpcode::kX64F16x8Qfms => kNoOpcodeFlags,
                ArchOpcode::kX64Minph => kNoOpcodeFlags,
                ArchOpcode::kX64Maxph => kNoOpcodeFlags,
                ArchOpcode::kX64ISplat => kNoOpcodeFlags,
                ArchOpcode::kX64IExtractLane => kNoOpcodeFlags,
                ArchOpcode::kX64IAbs => kNoOpcodeFlags,
                ArchOpcode::kX64INeg => kNoOpcodeFlags,
                ArchOpcode::kX64IBitMask => kNoOpcodeFlags,
                ArchOpcode::kX64IShl => kNoOpcodeFlags,
                ArchOpcode::kX64IShrS => kNoOpcodeFlags,
                ArchOpcode::kX64IAdd => kNoOpcodeFlags,
                ArchOpcode::kX64ISub => kNoOpcodeFlags,
                ArchOpcode::kX64IMul => kNoOpcodeFlags,
                ArchOpcode::kX64IEq => kNoOpcodeFlags,
                ArchOpcode::kX64IGtS => kNoOpcodeFlags,
                ArchOpcode::kX64IGeS => kNoOpcodeFlags,
                ArchOpcode::kX64INe => kNoOpcodeFlags,
                ArchOpcode::kX64IShrU => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2ExtMulLowI32x4S => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2ExtMulHighI32x4S => kNoOpcodeFlags,
                ArchOpcode::kX64I64x4ExtMulI32x4S => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2ExtMulLowI32x4U => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2ExtMulHighI32x4U => kNoOpcodeFlags,
                ArchOpcode::kX64I64x4ExtMulI32x4U => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2SConvertI32x4Low => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2SConvertI32x4High => kNoOpcodeFlags,
                ArchOpcode::kX64I64x4SConvertI32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2UConvertI32x4Low => kNoOpcodeFlags,
                ArchOpcode::kX64I64x2UConvertI32x4High => kNoOpcodeFlags,
                ArchOpcode::kX64I64x4UConvertI32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4SConvertF32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8SConvertF32x8 => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4SConvertI16x8Low => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4SConvertI16x8High => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8SConvertI16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64IMinS => kNoOpcodeFlags,
                ArchOpcode::kX64IMaxS => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4UConvertF32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8UConvertF32x8 => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4UConvertI16x8Low => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4UConvertI16x8High => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8UConvertI16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64IMinU => kNoOpcodeFlags,
                ArchOpcode::kX64IMaxU => kNoOpcodeFlags,
                ArchOpcode::kX64IGtU => kNoOpcodeFlags,
                ArchOpcode::kX64IGeU => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4DotI16x8S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8DotI16x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4DotI8x16I7x16AddS => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8DotI8x32I7x32AddS => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4ExtMulLowI16x8S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4ExtMulHighI16x8S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8ExtMulI16x8S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4ExtMulLowI16x8U => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4ExtMulHighI16x8U => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8ExtMulI16x8U => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4ExtAddPairwiseI16x8S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8ExtAddPairwiseI16x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4ExtAddPairwiseI16x8U => kNoOpcodeFlags,
                ArchOpcode::kX64I32x8ExtAddPairwiseI16x16U => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4TruncSatF64x2SZero => kNoOpcodeFlags,
                ArchOpcode::kX64I32x4TruncSatF64x2UZero => kNoOpcodeFlags,
                ArchOpcode::kX64I32X4ShiftZeroExtendI8x16 => kNoOpcodeFlags,
                ArchOpcode::kX64IExtractLaneS => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8SConvertI8x16Low => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8SConvertI8x16High => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16SConvertI8x16 => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8SConvertI32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16SConvertI32x8 => kNoOpcodeFlags,
                ArchOpcode::kX64IAddSatS => kNoOpcodeFlags,
                ArchOpcode::kX64ISubSatS => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8UConvertI8x16Low => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8UConvertI8x16High => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16UConvertI8x16 => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8UConvertI32x4 => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16UConvertI32x8 => kNoOpcodeFlags,
                ArchOpcode::kX64IAddSatU => kNoOpcodeFlags,
                ArchOpcode::kX64ISubSatU => kNoOpcodeFlags,
                ArchOpcode::kX64IRoundingAverageU => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8ExtMulLowI8x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8ExtMulHighI8x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16ExtMulI8x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8ExtMulLowI8x16U => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8ExtMulHighI8x16U => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16ExtMulI8x16U => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8ExtAddPairwiseI8x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16ExtAddPairwiseI8x32S => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8ExtAddPairwiseI8x16U => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16ExtAddPairwiseI8x32U => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8Q15MulRSatS => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8RelaxedQ15MulRS => kNoOpcodeFlags,
                ArchOpcode::kX64I16x8DotI8x16I7x16S => kNoOpcodeFlags,
                ArchOpcode::kX64I16x16DotI8x32I7x32S => kNoOpcodeFlags,
                ArchOpcode::kX64I8x16SConvertI16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64I8x32SConvertI16x16 => kNoOpcodeFlags,
                ArchOpcode::kX64I8x16UConvertI16x8 => kNoOpcodeFlags,
                ArchOpcode::kX64I8x32UConvertI16x16 => kNoOpcodeFlags,
                ArchOpcode::kX64SAnd => kNoOpcodeFlags,
                ArchOpcode::kX64SOr => kNoOpcodeFlags,
                ArchOpcode::kX64SXor => kNoOpcodeFlags,
                ArchOpcode::kX64SNot => kNoOpcodeFlags,
                ArchOpcode::kX64SSelect => kNoOpcodeFlags,
                ArchOpcode::kX64S128Const => kNoOpcodeFlags,
                ArchOpcode::kX64S256Const => kNoOpcodeFlags,
                ArchOpcode::kX64SZero => kNoOpcodeFlags,
                ArchOpcode::kX64SAllOnes => kNoOpcodeFlags,
                ArchOpcode::kX64SAndNot => kNoOpcodeFlags,
                ArchOpcode::kX64IAllTrue => kNoOpcodeFlags,
                ArchOpcode::kX64I8x16Swizzle => kNoOpcodeFlags,
                ArchOpcode::kX64Vpshufd => kNoOpcodeFlags,
                ArchOpcode::kX64I8x16Shuffle => kNoOpcodeFlags,
                ArchOpcode::kX64I8x16Popcnt => kNoOpcodeFlags,
                ArchOpcode::kX64Shufps => kNoOpcodeFlags,
                ArchOpcode::kX64S32x4Rotate => kNoOpcodeFlags,
                ArchOpcode::kX64S32x4Swizzle => kNoOpcodeFlags,
                ArchOpcode::kX64S32x4Shuffle => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8Blend => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8HalfShuffle1 => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8HalfShuffle2 => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16Alignr => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8Dup => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16Dup => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8UnzipHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8UnzipLow => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16UnzipHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16UnzipLow => kNoOpcodeFlags,
                ArchOpcode::kX64S64x2UnpackHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S32x4UnpackHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8UnpackHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16UnpackHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S32x8UnpackHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S64x2UnpackLow => kNoOpcodeFlags,
                ArchOpcode::kX64S32x4UnpackLow => kNoOpcodeFlags,
                ArchOpcode::kX64S16x8UnpackLow => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16UnpackLow => kNoOpcodeFlags,
                ArchOpcode::kX64S32x8UnpackLow => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16TransposeLow => kNoOpcodeFlags,
                ArchOpcode::kX64S8x16TransposeHigh => kNoOpcodeFlags,
                ArchOpcode::kX64S8x8Reverse => kNoOpcodeFlags,
                ArchOpcode::kX64S8x4Reverse => kNoOpcodeFlags,
                ArchOpcode::kX64S8x2Reverse => kNoOpcodeFlags,
                ArchOpcode::kX64V128AnyTrue => kNoOpcodeFlags,
                ArchOpcode::kX64Blendvpd => kNoOpcodeFlags,
                ArchOpcode::kX64Blendvps => kNoOpcodeFlags,
                ArchOpcode::kX64Pblendvb => kNoOpcodeFlags,
                ArchOpcode::kX64ExtractF128 => kNoOpcodeFlags,
                ArchOpcode::kX64InsertI128 => kNoOpcodeFlags,

                ArchOpcode::kX64Idiv => {
                    if instr.addressing_mode == AddressingMode::kMode_None {
                        kMayNeedDeoptOrTrapCheck
                    } else {
                        kMayNeedDeoptOrTrapCheck | kIsLoadOperation | kHasSideEffect
                    }
                }
                ArchOpcode::kX64Idiv32 => {
                    if instr.addressing_mode == AddressingMode::kMode_None {
                        kMayNeedDeoptOrTrapCheck
                    } else {
                        kMayNeedDeoptOrTrapCheck | kIsLoadOperation | kHasSideEffect
                    }
                }
                ArchOpcode::kX64Udiv => {
                    if instr.addressing_mode == AddressingMode::kMode_None {
                        kMayNeedDeoptOrTrapCheck
                    } else {
                        kMayNeedDeoptOrTrapCheck | kIsLoadOperation | kHasSideEffect
                    }
                }
                ArchOpcode::kX64Udiv32 => {
                    if instr.addressing_mode == AddressingMode::kMode_None {
                        kMayNeedDeoptOrTrapCheck
                    } else {
                        kMayNeedDeoptOrTrapCheck | kIsLoadOperation | kHasSideEffect
                    }
                }

                ArchOpcode::kX64Movsxbl
                | ArchOpcode::kX64Movzxbl
                | ArchOpcode::kX64Movsxbq
                | ArchOpcode::kX64Movzxbq
                | ArchOpcode::kX64Movsxwl
                | ArchOpcode::kX64Movzxwl
                | ArchOpcode::kX64Movsxwq
                | ArchOpcode::kX64Movzxwq
                | ArchOpcode::kX64Movsxlq => {
                    if instr.inputs.len() >= 1 && instr.inputs[0].is_register {
                        kNoOpcodeFlags
                    } else {
                        kIsLoadOperation
                    }
                }

                ArchOpcode::kX64Movb | ArchOpcode::kX64Movw | ArchOpcode::kX6
