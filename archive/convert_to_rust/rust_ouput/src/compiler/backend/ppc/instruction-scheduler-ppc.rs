// Converted from V8 C++ source files:
// Header: N/A
// Implementation: instruction-scheduler-ppc.cc
// 
// This file combines both header and implementation into idiomatic Rust code.

#![allow(dead_code)]
#![allow(unused_variables)]

use std::sync::Mutex;

pub struct InstructionScheduler {}

impl InstructionScheduler {
    pub fn scheduler_supported() -> bool {
        true
    }

    pub fn get_target_instruction_flags(&self, instr: &Instruction) -> i32 {
        match instr.arch_opcode {
            ArchOpcode::kPPC_And => kNoOpcodeFlags,
            ArchOpcode::kPPC_AndComplement => kNoOpcodeFlags,
            ArchOpcode::kPPC_Or => kNoOpcodeFlags,
            ArchOpcode::kPPC_OrComplement => kNoOpcodeFlags,
            ArchOpcode::kPPC_Xor => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftLeft32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftLeft64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftLeftPair => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftRight32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftRight64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftRightPair => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftRightAlg32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftRightAlg64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ShiftRightAlgPair => kNoOpcodeFlags,
            ArchOpcode::kPPC_RotRight32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_RotRight64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Not => kNoOpcodeFlags,
            ArchOpcode::kPPC_RotLeftAndMask32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_RotLeftAndClear64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_RotLeftAndClearLeft64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_RotLeftAndClearRight64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Add32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Add64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_AddWithOverflow32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_AddPair => kNoOpcodeFlags,
            ArchOpcode::kPPC_AddDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_SubWithOverflow32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_SubPair => kNoOpcodeFlags,
            ArchOpcode::kPPC_SubDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Mul32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Mul32WithHigh32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Mul64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_MulHighS64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_MulHighU64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_MulHigh32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_MulHighU32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_MulPair => kNoOpcodeFlags,
            ArchOpcode::kPPC_MulDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Div32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Div64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DivU32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DivU64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DivDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Mod32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Mod64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ModU32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ModU64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ModDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_NegDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_SqrtDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_FloorDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_CeilDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_TruncateDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_RoundDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_MaxDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_MinDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_AbsDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Cntlz32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Cntlz64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Popcnt32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Popcnt64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Cmp32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Cmp64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_CmpDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Tst32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Tst64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ExtendSignWord8 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ExtendSignWord16 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ExtendSignWord32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Uint32ToUint64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Int64ToInt32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Int64ToFloat32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Int64ToDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Uint64ToFloat32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Uint64ToDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Int32ToFloat32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Int32ToDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Uint32ToFloat32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Uint32ToDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Float32ToInt32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Float32ToUint32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_Float32ToDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_Float64SilenceNaN => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleToInt32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleToUint32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleToInt64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleToUint64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleToFloat32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleExtractLowWord32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleExtractHighWord32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleFromWord32Pair => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleInsertLowWord32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleInsertHighWord32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_DoubleConstruct => kNoOpcodeFlags,
            ArchOpcode::kPPC_BitcastInt32ToFloat32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_BitcastFloat32ToInt32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_BitcastInt64ToDouble => kNoOpcodeFlags,
            ArchOpcode::kPPC_BitcastDoubleToInt64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ByteRev32 => kNoOpcodeFlags,
            ArchOpcode::kPPC_ByteRev64 => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Add => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Mul => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Eq => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Ne => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Le => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Lt => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Abs => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Sqrt => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Qfma => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Qfms => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Div => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Min => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Max => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Ceil => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Floor => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Trunc => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Pmin => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2Pmax => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2ConvertLowI32x4S => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2ConvertLowI32x4U => kNoOpcodeFlags,
            ArchOpcode::kPPC_F64x2PromoteLowF32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Add => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Mul => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Eq => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Ne => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Lt => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Le => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Abs => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Sqrt => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4SConvertI32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4UConvertI32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Qfma => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Qfms => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Div => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Min => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Max => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Ceil => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Floor => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Trunc => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Pmin => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4Pmax => kNoOpcodeFlags,
            ArchOpcode::kPPC_F32x4DemoteF64x2Zero => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Add => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Mul => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Eq => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Ne => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2GtS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2GeS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Shl => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2ShrS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2ShrU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2BitMask => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2SConvertI32x4Low => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2SConvertI32x4High => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2UConvertI32x4Low => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2UConvertI32x4High => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2ExtMulLowI32x4S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2ExtMulHighI32x4S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2ExtMulLowI32x4U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2ExtMulHighI32x4U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2Abs => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Add => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Mul => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4MinS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4MinU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4MaxS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4MaxU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Eq => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Ne => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4GtS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4GeS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4GtU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4GeU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Shl => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ShrS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ShrU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4Abs => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4SConvertF32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4UConvertF32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4SConvertI16x8Low => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4SConvertI16x8High => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4UConvertI16x8Low => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4UConvertI16x8High => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4BitMask => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4DotI16x8S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ExtAddPairwiseI16x8S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ExtAddPairwiseI16x8U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ExtMulLowI16x8S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ExtMulHighI16x8S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ExtMulLowI16x8U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4ExtMulHighI16x8U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4TruncSatF64x2SZero => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4TruncSatF64x2UZero => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4DotI8x16AddS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Add => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Mul => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8MinS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8MinU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8MaxS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8MaxU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Eq => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Ne => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8GtS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8GeS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8GtU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8GeU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Shl => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ShrS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ShrU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Abs => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8SConvertI32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8UConvertI32x4 => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8SConvertI8x16Low => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8SConvertI8x16High => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8UConvertI8x16Low => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8UConvertI8x16High => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8AddSatS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8SubSatS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8AddSatU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8SubSatU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8RoundingAverageU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8BitMask => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ExtAddPairwiseI8x16S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ExtAddPairwiseI8x16U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8Q15MulRSatS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ExtMulLowI8x16S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ExtMulHighI8x16S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ExtMulLowI8x16U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8ExtMulHighI8x16U => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8DotI8x16S => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Add => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Sub => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16MinS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16MinU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16MaxS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16MaxU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Eq => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Ne => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16GtS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16GeS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16GtU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16GeU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Shl => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16ShrS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16ShrU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Neg => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Abs => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16SConvertI16x8 => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16UConvertI16x8 => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16AddSatS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16SubSatS => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16AddSatU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16SubSatU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16RoundingAverageU => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Shuffle => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Swizzle => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16BitMask => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16Popcnt => kNoOpcodeFlags,
            ArchOpcode::kPPC_I64x2AllTrue => kNoOpcodeFlags,
            ArchOpcode::kPPC_I32x4AllTrue => kNoOpcodeFlags,
            ArchOpcode::kPPC_I16x8AllTrue => kNoOpcodeFlags,
            ArchOpcode::kPPC_I8x16AllTrue => kNoOpcodeFlags,
            ArchOpcode::kPPC_V128AnyTrue => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128And => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128Or => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128Xor => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128Const => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128Zero => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128AllOnes => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128Not => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128Select => kNoOpcodeFlags,
            ArchOpcode::kPPC_S128AndNot => kNoOpcodeFlags,
            ArchOpcode::kPPC_FExtractLane => kNoOpcodeFlags,
            ArchOpcode::kPPC_IExtractLane => kNoOpcodeFlags,
            ArchOpcode::kPPC_IExtractLaneU => kNoOpcodeFlags,
            ArchOpcode::kPPC_IExtractLaneS => kNoOpcodeFlags,
            ArchOpcode::kPPC_FReplaceLane => kNoOpcodeFlags,
            ArchOpcode::kPPC_IReplaceLane => kNoOpcodeFlags,
            ArchOpcode::kPPC_FSplat => kNoOpcodeFlags,
            ArchOpcode::kPPC_ISplat => kNoOpcodeFlags,
            ArchOpcode::kPPC_LoadReverseSimd128RR => kNoOpcodeFlags,

            ArchOpcode::kPPC_LoadWordS8 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadWordU8 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadWordS16 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadWordU16 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadWordS32 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadWordU32 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadByteRev32 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadWord64 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadByteRev64 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadFloat32 => kIsLoadOperation,
            ArchOpcode::kPPC_LoadDouble => kIsLoadOperation,
            ArchOpcode::kPPC_LoadSimd128 => kIsLoadOperation,
            ArchOpcode::kPPC_Peek => kIsLoadOperation,
            ArchOpcode::kPPC_LoadDecompressTaggedSigned => kIsLoadOperation,
            ArchOpcode::kPPC_LoadDecompressTagged => kIsLoadOperation,
            ArchOpcode::kPPC_LoadDecodeSandboxedPointer => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load8Splat => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load16Splat => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load32Splat => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load64Splat => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load8x8S => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load8x8U => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load16x4S => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load16x4U => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load32x2S => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load32x2U => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load32Zero => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load64Zero => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load8Lane => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load16Lane => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load32Lane => kIsLoadOperation,
            ArchOpcode::kPPC_S128Load64Lane => kIsLoadOperation,

            ArchOpcode::kPPC_StoreWord8 => kHasSideEffect,
            ArchOpcode::kPPC_StoreWord16 => kHasSideEffect,
            ArchOpcode::kPPC_StoreWord32 => kHasSideEffect,
            ArchOpcode::kPPC_StoreByteRev32 => kHasSideEffect,
            ArchOpcode::kPPC_StoreWord64 => kHasSideEffect,
            ArchOpcode::kPPC_StoreByteRev64 => kHasSideEffect,
            ArchOpcode::kPPC_StoreFloat32 => kHasSideEffect,
            ArchOpcode::kPPC_StoreDouble => kHasSideEffect,
            ArchOpcode::kPPC_StoreSimd128 => kHasSideEffect,
            ArchOpcode::kPPC_StoreCompressTagged => kHasSideEffect,
            ArchOpcode::kPPC_StoreIndirectPointer => kHasSideEffect,
            ArchOpcode::kPPC_StoreEncodeSandboxedPointer => kHasSideEffect,
            ArchOpcode::kPPC_Push => kHasSideEffect,
            ArchOpcode::kPPC_PushFrame => kHasSideEffect,
            ArchOpcode::kPPC_StoreToStackSlot => kHasSideEffect,
            ArchOpcode::kPPC_Sync => kHasSideEffect,
            ArchOpcode::kPPC_S128Store8Lane => kHasSideEffect,
            ArchOpcode::kPPC_S128Store16Lane => kHasSideEffect,
            ArchOpcode::kPPC_S128Store32Lane => kHasSideEffect,
            ArchOpcode::kPPC_S128Store64Lane => kHasSideEffect,

            ArchOpcode::kPPC_AtomicExchangeUint8 => kHasSideEffect,
            ArchOpcode::kPPC_AtomicExchangeUint16 => kHasSideEffect
