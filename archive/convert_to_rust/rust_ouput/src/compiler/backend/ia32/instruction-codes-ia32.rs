// Converted from V8 C++ source files:
// Header: instruction-codes-ia32.h
// Implementation: N/A
// 
// This file combines both header and implementation into idiomatic Rust code.

pub mod instruction_codes_ia32 {
    // IA32-specific opcodes that specify which assembly sequence to emit.
    // Most opcodes specify a single instruction.

    #[derive(Debug, Copy, Clone, PartialEq, Eq)]
    pub enum IA32Opcode {
        IA32Add,
        IA32And,
        IA32Cmp,
        IA32Cmp16,
        IA32Cmp8,
        IA32Test,
        IA32Test16,
        IA32Test8,
        IA32Or,
        IA32Xor,
        IA32Sub,
        IA32Imul,
        IA32ImulHigh,
        IA32UmulHigh,
        IA32Idiv,
        IA32Udiv,
        IA32Not,
        IA32Neg,
        IA32Shl,
        IA32Shr,
        IA32Sar,
        IA32AddPair,
        IA32SubPair,
        IA32MulPair,
        IA32ShlPair,
        IA32ShrPair,
        IA32SarPair,
        IA32Rol,
        IA32Ror,
        IA32Lzcnt,
        IA32Tzcnt,
        IA32Popcnt,
        IA32Bswap,
        IA32MFence,
        IA32LFence,
        IA32Float32Cmp,
        IA32Float32Sqrt,
        IA32Float32Round,
        IA32Float64Cmp,
        IA32Float64Mod,
        IA32Float32Max,
        IA32Float64Max,
        IA32Float32Min,
        IA32Float64Min,
        IA32Float64Sqrt,
        IA32Float64Round,
        IA32Float32ToFloat64,
        IA32Float64ToFloat32,
        IA32Float32ToInt32,
        IA32Float32ToUint32,
        IA32Float64ToInt32,
        IA32Float64ToUint32,
        SSEInt32ToFloat32,
        IA32Uint32ToFloat32,
        SSEInt32ToFloat64,
        IA32Uint32ToFloat64,
        IA32Float64ExtractLowWord32,
        IA32Float64ExtractHighWord32,
        IA32Float64InsertLowWord32,
        IA32Float64InsertHighWord32,
        IA32Float64FromWord32Pair,
        IA32Float64LoadLowWord32,
        IA32Float64SilenceNaN,
        Float32Add,
        Float32Sub,
        Float64Add,
        Float64Sub,
        Float32Mul,
        Float32Div,
        Float64Mul,
        Float64Div,
        Float64Abs,
        Float64Neg,
        Float32Abs,
        Float32Neg,
        IA32Movsxbl,
        IA32Movzxbl,
        IA32Movb,
        IA32Movsxwl,
        IA32Movzxwl,
        IA32Movw,
        IA32Movl,
        IA32Movss,
        IA32Movsd,
        IA32Movdqu,
        IA32Movlps,
        IA32Movhps,
        IA32BitcastFI,
        IA32BitcastIF,
        IA32Blendvpd,
        IA32Blendvps,
        IA32Lea,
        IA32Pblendvb,
        IA32Push,
        IA32Poke,
        IA32Peek,
        IA32Cvttps2dq,
        IA32Cvttpd2dq,
        IA32I32x4TruncF32x4U,
        IA32I32x4TruncF64x2UZero,
        IA32F64x2Splat,
        IA32F64x2ExtractLane,
        IA32F64x2ReplaceLane,
        IA32F64x2Sqrt,
        IA32F64x2Add,
        IA32F64x2Sub,
        IA32F64x2Mul,
        IA32F64x2Div,
        IA32F64x2Min,
        IA32F64x2Max,
        IA32F64x2Eq,
        IA32F64x2Ne,
        IA32F64x2Lt,
        IA32F64x2Le,
        IA32F64x2Qfma,
        IA32F64x2Qfms,
        IA32Minpd,
        IA32Maxpd,
        IA32F64x2Round,
        IA32F64x2ConvertLowI32x4S,
        IA32F64x2ConvertLowI32x4U,
        IA32F64x2PromoteLowF32x4,
        IA32I64x2SplatI32Pair,
        IA32I64x2ReplaceLaneI32Pair,
        IA32I64x2Abs,
        IA32I64x2Neg,
        IA32I64x2Shl,
        IA32I64x2ShrS,
        IA32I64x2Add,
        IA32I64x2Sub,
        IA32I64x2Mul,
        IA32I64x2ShrU,
        IA32I64x2BitMask,
        IA32I64x2Eq,
        IA32I64x2Ne,
        IA32I64x2GtS,
        IA32I64x2GeS,
        IA32I64x2ExtMulLowI32x4S,
        IA32I64x2ExtMulHighI32x4S,
        IA32I64x2ExtMulLowI32x4U,
        IA32I64x2ExtMulHighI32x4U,
        IA32I64x2SConvertI32x4Low,
        IA32I64x2SConvertI32x4High,
        IA32I64x2UConvertI32x4Low,
        IA32I64x2UConvertI32x4High,
        IA32F32x4Splat,
        IA32F32x4ExtractLane,
        IA32Insertps,
        IA32F32x4SConvertI32x4,
        IA32F32x4UConvertI32x4,
        IA32F32x4Sqrt,
        IA32F32x4Add,
        IA32F32x4Sub,
        IA32F32x4Mul,
        IA32F32x4Div,
        IA32F32x4Min,
        IA32F32x4Max,
        IA32F32x4Eq,
        IA32F32x4Ne,
        IA32F32x4Lt,
        IA32F32x4Le,
        IA32F32x4Qfma,
        IA32F32x4Qfms,
        IA32Minps,
        IA32Maxps,
        IA32F32x4Round,
        IA32F32x4DemoteF64x2Zero,
        IA32I32x4Splat,
        IA32I32x4ExtractLane,
        IA32I32x4SConvertF32x4,
        IA32I32x4SConvertI16x8Low,
        IA32I32x4SConvertI16x8High,
        IA32I32x4Neg,
        IA32I32x4Shl,
        IA32I32x4ShrS,
        IA32I32x4Add,
        IA32I32x4Sub,
        IA32I32x4Mul,
        IA32I32x4MinS,
        IA32I32x4MaxS,
        IA32I32x4Eq,
        IA32I32x4Ne,
        IA32I32x4GtS,
        IA32I32x4GeS,
        SSEI32x4UConvertF32x4,
        AVXI32x4UConvertF32x4,
        IA32I32x4UConvertI16x8Low,
        IA32I32x4UConvertI16x8High,
        IA32I32x4ShrU,
        IA32I32x4MinU,
        IA32I32x4MaxU,
        SSEI32x4GtU,
        AVXI32x4GtU,
        SSEI32x4GeU,
        AVXI32x4GeU,
        IA32I32x4Abs,
        IA32I32x4BitMask,
        IA32I32x4DotI16x8S,
        IA32I32x4DotI8x16I7x16AddS,
        IA32I32x4ExtMulLowI16x8S,
        IA32I32x4ExtMulHighI16x8S,
        IA32I32x4ExtMulLowI16x8U,
        IA32I32x4ExtMulHighI16x8U,
        IA32I32x4ExtAddPairwiseI16x8S,
        IA32I32x4ExtAddPairwiseI16x8U,
        IA32I32x4TruncSatF64x2SZero,
        IA32I32x4TruncSatF64x2UZero,
        IA32I16x8Splat,
        IA32I16x8ExtractLaneS,
        IA32I16x8SConvertI8x16Low,
        IA32I16x8SConvertI8x16High,
        IA32I16x8Neg,
        IA32I16x8Shl,
        IA32I16x8ShrS,
        IA32I16x8SConvertI32x4,
        IA32I16x8Add,
        IA32I16x8AddSatS,
        IA32I16x8Sub,
        IA32I16x8SubSatS,
        IA32I16x8Mul,
        IA32I16x8MinS,
        IA32I16x8MaxS,
        IA32I16x8Eq,
        SSEI16x8Ne,
        AVXI16x8Ne,
        IA32I16x8GtS,
        SSEI16x8GeS,
        AVXI16x8GeS,
        IA32I16x8UConvertI8x16Low,
        IA32I16x8UConvertI8x16High,
        IA32I16x8ShrU,
        IA32I16x8UConvertI32x4,
        IA32I16x8AddSatU,
        IA32I16x8SubSatU,
        IA32I16x8MinU,
        IA32I16x8MaxU,
        SSEI16x8GtU,
        AVXI16x8GtU,
        SSEI16x8GeU,
        AVXI16x8GeU,
        IA32I16x8RoundingAverageU,
        IA32I16x8Abs,
        IA32I16x8BitMask,
        IA32I16x8ExtMulLowI8x16S,
        IA32I16x8ExtMulHighI8x16S,
        IA32I16x8ExtMulLowI8x16U,
        IA32I16x8ExtMulHighI8x16U,
        IA32I16x8ExtAddPairwiseI8x16S,
        IA32I16x8ExtAddPairwiseI8x16U,
        IA32I16x8Q15MulRSatS,
        IA32I16x8RelaxedQ15MulRS,
        IA32I8x16Splat,
        IA32I8x16ExtractLaneS,
        IA32Pinsrb,
        IA32Pinsrw,
        IA32Pinsrd,
        IA32Pextrb,
        IA32Pextrw,
        IA32S128Store32Lane,
        IA32I8x16SConvertI16x8,
        IA32I8x16Neg,
        IA32I8x16Shl,
        IA32I8x16ShrS,
        IA32I8x16Add,
        IA32I8x16AddSatS,
        IA32I8x16Sub,
        IA32I8x16SubSatS,
        IA32I8x16MinS,
        IA32I8x16MaxS,
        IA32I8x16Eq,
        SSEI8x16Ne,
        AVXI8x16Ne,
        IA32I8x16GtS,
        SSEI8x16GeS,
        AVXI8x16GeS,
        IA32I8x16UConvertI16x8,
        IA32I8x16AddSatU,
        IA32I8x16SubSatU,
        IA32I8x16ShrU,
        IA32I8x16MinU,
        IA32I8x16MaxU,
        SSEI8x16GtU,
        AVXI8x16GtU,
        SSEI8x16GeU,
        AVXI8x16GeU,
        IA32I8x16RoundingAverageU,
        IA32I8x16Abs,
        IA32I8x16BitMask,
        IA32I8x16Popcnt,
        IA32S128Const,
        IA32S128Zero,
        IA32S128AllOnes,
        IA32S128Not,
        IA32S128And,
        IA32S128Or,
        IA32S128Xor,
        IA32S128Select,
        IA32S128AndNot,
        IA32I8x16Swizzle,
        IA32I8x16Shuffle,
        IA32S128Load8Splat,
        IA32S128Load16Splat,
        IA32S128Load32Splat,
        IA32S128Load64Splat,
        IA32S128Load8x8S,
        IA32S128Load8x8U,
        IA32S128Load16x4S,
        IA32S128Load16x4U,
        IA32S128Load32x2S,
        IA32S128Load32x2U,
        IA32S32x4Rotate,
        IA32S32x4Swizzle,
        IA32S32x4Shuffle,
        IA32S16x8Blend,
        IA32S16x8HalfShuffle1,
        IA32S16x8HalfShuffle2,
        IA32S8x16Alignr,
        IA32S16x8Dup,
        IA32S8x16Dup,
        SSES16x8UnzipHigh,
        AVXS16x8UnzipHigh,
        SSES16x8UnzipLow,
        AVXS16x8UnzipLow,
        SSES8x16UnzipHigh,
        AVXS8x16UnzipHigh,
        SSES8x16UnzipLow,
        AVXS8x16UnzipLow,
        IA32S64x2UnpackHigh,
        IA32S32x4UnpackHigh,
        IA32S16x8UnpackHigh,
        IA32S8x16UnpackHigh,
        IA32S64x2UnpackLow,
        IA32S32x4UnpackLow,
        IA32S16x8UnpackLow,
        IA32S8x16UnpackLow,
        SSES8x16TransposeLow,
        AVXS8x16TransposeLow,
        SSES8x16TransposeHigh,
        AVXS8x16TransposeHigh,
        SSES8x8Reverse,
        AVXS8x8Reverse,
        SSES8x4Reverse,
        AVXS8x4Reverse,
        SSES8x2Reverse,
        AVXS8x2Reverse,
        IA32S128AnyTrue,
        IA32I64x2AllTrue,
        IA32I32x4AllTrue,
        IA32I16x8AllTrue,
        IA32I8x16AllTrue,
        IA32I16x8DotI8x16I7x16S,
        IA32Word32AtomicPairLoad,
        IA32Word32ReleasePairStore,
        IA32Word32SeqCstPairStore,
        IA32Word32AtomicPairAdd,
        IA32Word32AtomicPairSub,
        IA32Word32AtomicPairAnd,
        IA32Word32AtomicPairOr,
        IA32Word32AtomicPairXor,
        IA32Word32AtomicPairExchange,
        IA32Word32AtomicPairCompareExchange,
    }

    // Addressing modes represent the "shape" of inputs to an instruction.
    // Many instructions support multiple addressing modes. Addressing modes
    // are encoded into the InstructionCode of the instruction and tell the
    // code generator after register allocation which assembler method to call.
    //
    // We use the following local notation for addressing modes:
    //
    // M = memory operand
    // R = base register
    // N = index register * N for N in {1, 2, 4, 8}
    // I = immediate displacement (int32_t)

    #[derive(Debug, Copy, Clone, PartialEq, Eq)]
    pub enum AddressingMode {
        MR,   /* [%r1            ] */
        MRI,  /* [%r1         + K] */
        MR1,  /* [%r1 + %r2*1    ] */
        MR2,  /* [%r1 + %r2*2    ] */
        MR4,  /* [%r1 + %r2*4    ] */
        MR8,  /* [%r1 + %r2*8    ] */
        MR1I, /* [%r1 + %r2*1 + K] */
        MR2I, /* [%r1 + %r2*2 + K] */
        MR4I, /* [%r1 + %r2*4 + K] */
        MR8I, /* [%r1 + %r2*8 + K] */
        M1,   /* [      %r2*1    ] */
        M2,   /* [      %r2*2    ] */
        M4,   /* [      %r2*4    ] */
        M8,   /* [      %r2*8    ] */
        M1I,  /* [      %r2*1 + K] */
        M2I,  /* [      %r2*2 + K] */
        M4I,  /* [      %r2*4 + K] */
        M8I,  /* [      %r2*8 + K] */
        MI,   /* [              K] */
        Root, /* [%root       + K] */
    }
}
