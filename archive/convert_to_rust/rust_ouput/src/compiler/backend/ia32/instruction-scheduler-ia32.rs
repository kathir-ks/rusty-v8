// Converted from V8 C++ source files:
// Header: N/A
// Implementation: instruction-scheduler-ia32.cc
// 
// This file combines both header and implementation into idiomatic Rust code.

pub mod instruction_codes {
    pub const kIA32Add: usize = 0;
    pub const kIA32And: usize = 1;
    pub const kIA32Cmp: usize = 2;
    pub const kIA32Cmp16: usize = 3;
    pub const kIA32Cmp8: usize = 4;
    pub const kIA32Test: usize = 5;
    pub const kIA32Test16: usize = 6;
    pub const kIA32Test8: usize = 7;
    pub const kIA32Or: usize = 8;
    pub const kIA32Xor: usize = 9;
    pub const kIA32Sub: usize = 10;
    pub const kIA32Imul: usize = 11;
    pub const kIA32ImulHigh: usize = 12;
    pub const kIA32UmulHigh: usize = 13;
    pub const kIA32Not: usize = 14;
    pub const kIA32Neg: usize = 15;
    pub const kIA32Shl: usize = 16;
    pub const kIA32Shr: usize = 17;
    pub const kIA32Sar: usize = 18;
    pub const kIA32AddPair: usize = 19;
    pub const kIA32SubPair: usize = 20;
    pub const kIA32MulPair: usize = 21;
    pub const kIA32ShlPair: usize = 22;
    pub const kIA32ShrPair: usize = 23;
    pub const kIA32SarPair: usize = 24;
    pub const kIA32Rol: usize = 25;
    pub const kIA32Ror: usize = 26;
    pub const kIA32Lzcnt: usize = 27;
    pub const kIA32Tzcnt: usize = 28;
    pub const kIA32Popcnt: usize = 29;
    pub const kIA32Bswap: usize = 30;
    pub const kIA32Lea: usize = 31;
    pub const kIA32Float32Cmp: usize = 32;
    pub const kIA32Float32Sqrt: usize = 33;
    pub const kIA32Float32Round: usize = 34;
    pub const kIA32Float64Cmp: usize = 35;
    pub const kIA32Float64Mod: usize = 36;
    pub const kIA32Float32Max: usize = 37;
    pub const kIA32Float64Max: usize = 38;
    pub const kIA32Float32Min: usize = 39;
    pub const kIA32Float64Min: usize = 40;
    pub const kIA32Float64Sqrt: usize = 41;
    pub const kIA32Float64Round: usize = 42;
    pub const kIA32Float32ToFloat64: usize = 43;
    pub const kIA32Float64ToFloat32: usize = 44;
    pub const kIA32Float32ToInt32: usize = 45;
    pub const kIA32Float32ToUint32: usize = 46;
    pub const kIA32Float64ToInt32: usize = 47;
    pub const kIA32Float64ToUint32: usize = 48;
    pub const kSSEInt32ToFloat32: usize = 49;
    pub const kIA32Uint32ToFloat32: usize = 50;
    pub const kSSEInt32ToFloat64: usize = 51;
    pub const kIA32Uint32ToFloat64: usize = 52;
    pub const kIA32Float64ExtractLowWord32: usize = 53;
    pub const kIA32Float64ExtractHighWord32: usize = 54;
    pub const kIA32Float64InsertLowWord32: usize = 55;
    pub const kIA32Float64InsertHighWord32: usize = 56;
    pub const kIA32Float64FromWord32Pair: usize = 57;
    pub const kIA32Float64LoadLowWord32: usize = 58;
    pub const kIA32Float64SilenceNaN: usize = 59;
    pub const kFloat32Add: usize = 60;
    pub const kFloat32Sub: usize = 61;
    pub const kFloat64Add: usize = 62;
    pub const kFloat64Sub: usize = 63;
    pub const kFloat32Mul: usize = 64;
    pub const kFloat32Div: usize = 65;
    pub const kFloat64Mul: usize = 66;
    pub const kFloat64Div: usize = 67;
    pub const kFloat64Abs: usize = 68;
    pub const kFloat64Neg: usize = 69;
    pub const kFloat32Abs: usize = 70;
    pub const kFloat32Neg: usize = 71;
    pub const kIA32BitcastFI: usize = 72;
    pub const kIA32BitcastIF: usize = 73;
    pub const kIA32Blendvpd: usize = 74;
    pub const kIA32Blendvps: usize = 75;
    pub const kIA32Pblendvb: usize = 76;
    pub const kIA32Cvttps2dq: usize = 77;
    pub const kIA32Cvttpd2dq: usize = 78;
    pub const kIA32I32x4TruncF32x4U: usize = 79;
    pub const kIA32I32x4TruncF64x2UZero: usize = 80;
    pub const kIA32F64x2Splat: usize = 81;
    pub const kIA32F64x2ExtractLane: usize = 82;
    pub const kIA32F64x2ReplaceLane: usize = 83;
    pub const kIA32F64x2Sqrt: usize = 84;
    pub const kIA32F64x2Add: usize = 85;
    pub const kIA32F64x2Sub: usize = 86;
    pub const kIA32F64x2Mul: usize = 87;
    pub const kIA32F64x2Div: usize = 88;
    pub const kIA32F64x2Min: usize = 89;
    pub const kIA32F64x2Max: usize = 90;
    pub const kIA32F64x2Eq: usize = 91;
    pub const kIA32F64x2Ne: usize = 92;
    pub const kIA32F64x2Lt: usize = 93;
    pub const kIA32F64x2Le: usize = 94;
    pub const kIA32F64x2Qfma: usize = 95;
    pub const kIA32F64x2Qfms: usize = 96;
    pub const kIA32Minpd: usize = 97;
    pub const kIA32Maxpd: usize = 98;
    pub const kIA32F64x2Round: usize = 99;
    pub const kIA32F64x2ConvertLowI32x4S: usize = 100;
    pub const kIA32F64x2ConvertLowI32x4U: usize = 101;
    pub const kIA32F64x2PromoteLowF32x4: usize = 102;
    pub const kIA32I64x2SplatI32Pair: usize = 103;
    pub const kIA32I64x2ReplaceLaneI32Pair: usize = 104;
    pub const kIA32I64x2Abs: usize = 105;
    pub const kIA32I64x2Neg: usize = 106;
    pub const kIA32I64x2Shl: usize = 107;
    pub const kIA32I64x2ShrS: usize = 108;
    pub const kIA32I64x2Add: usize = 109;
    pub const kIA32I64x2Sub: usize = 110;
    pub const kIA32I64x2Mul: usize = 111;
    pub const kIA32I64x2ShrU: usize = 112;
    pub const kIA32I64x2BitMask: usize = 113;
    pub const kIA32I64x2Eq: usize = 114;
    pub const kIA32I64x2Ne: usize = 115;
    pub const kIA32I64x2GtS: usize = 116;
    pub const kIA32I64x2GeS: usize = 117;
    pub const kIA32I64x2ExtMulLowI32x4S: usize = 118;
    pub const kIA32I64x2ExtMulHighI32x4S: usize = 119;
    pub const kIA32I64x2ExtMulLowI32x4U: usize = 120;
    pub const kIA32I64x2ExtMulHighI32x4U: usize = 121;
    pub const kIA32I64x2SConvertI32x4Low: usize = 122;
    pub const kIA32I64x2SConvertI32x4High: usize = 123;
    pub const kIA32I64x2UConvertI32x4Low: usize = 124;
    pub const kIA32I64x2UConvertI32x4High: usize = 125;
    pub const kIA32F32x4Splat: usize = 126;
    pub const kIA32F32x4ExtractLane: usize = 127;
    pub const kIA32Insertps: usize = 128;
    pub const kIA32F32x4SConvertI32x4: usize = 129;
    pub const kIA32F32x4UConvertI32x4: usize = 130;
    pub const kIA32F32x4Sqrt: usize = 131;
    pub const kIA32F32x4Add: usize = 132;
    pub const kIA32F32x4Sub: usize = 133;
    pub const kIA32F32x4Mul: usize = 134;
    pub const kIA32F32x4Div: usize = 135;
    pub const kIA32F32x4Min: usize = 136;
    pub const kIA32F32x4Max: usize = 137;
    pub const kIA32F32x4Eq: usize = 138;
    pub const kIA32F32x4Ne: usize = 139;
    pub const kIA32F32x4Lt: usize = 140;
    pub const kIA32F32x4Le: usize = 141;
    pub const kIA32F32x4Qfma: usize = 142;
    pub const kIA32F32x4Qfms: usize = 143;
    pub const kIA32Minps: usize = 144;
    pub const kIA32Maxps: usize = 145;
    pub const kIA32F32x4Round: usize = 146;
    pub const kIA32F32x4DemoteF64x2Zero: usize = 147;
    pub const kIA32I32x4Splat: usize = 148;
    pub const kIA32I32x4ExtractLane: usize = 149;
    pub const kIA32I32x4SConvertF32x4: usize = 150;
    pub const kIA32I32x4SConvertI16x8Low: usize = 151;
    pub const kIA32I32x4SConvertI16x8High: usize = 152;
    pub const kIA32I32x4Neg: usize = 153;
    pub const kIA32I32x4Shl: usize = 154;
    pub const kIA32I32x4ShrS: usize = 155;
    pub const kIA32I32x4Add: usize = 156;
    pub const kIA32I32x4Sub: usize = 157;
    pub const kIA32I32x4Mul: usize = 158;
    pub const kIA32I32x4MinS: usize = 159;
    pub const kIA32I32x4MaxS: usize = 160;
    pub const kIA32I32x4Eq: usize = 161;
    pub const kIA32I32x4Ne: usize = 162;
    pub const kIA32I32x4GtS: usize = 163;
    pub const kIA32I32x4GeS: usize = 164;
    pub const kSSEI32x4UConvertF32x4: usize = 165;
    pub const kAVXI32x4UConvertF32x4: usize = 166;
    pub const kIA32I32x4UConvertI16x8Low: usize = 167;
    pub const kIA32I32x4UConvertI16x8High: usize = 168;
    pub const kIA32I32x4ShrU: usize = 169;
    pub const kIA32I32x4MinU: usize = 170;
    pub const kIA32I32x4MaxU: usize = 171;
    pub const kSSEI32x4GtU: usize = 172;
    pub const kAVXI32x4GtU: usize = 173;
    pub const kSSEI32x4GeU: usize = 174;
    pub const kAVXI32x4GeU: usize = 175;
    pub const kIA32I32x4Abs: usize = 176;
    pub const kIA32I32x4BitMask: usize = 177;
    pub const kIA32I32x4DotI16x8S: usize = 178;
    pub const kIA32I32x4DotI8x16I7x16AddS: usize = 179;
    pub const kIA32I32x4ExtMulLowI16x8S: usize = 180;
    pub const kIA32I32x4ExtMulHighI16x8S: usize = 181;
    pub const kIA32I32x4ExtMulLowI16x8U: usize = 182;
    pub const kIA32I32x4ExtMulHighI16x8U: usize = 183;
    pub const kIA32I32x4ExtAddPairwiseI16x8S: usize = 184;
    pub const kIA32I32x4ExtAddPairwiseI16x8U: usize = 185;
    pub const kIA32I32x4TruncSatF64x2SZero: usize = 186;
    pub const kIA32I32x4TruncSatF64x2UZero: usize = 187;
    pub const kIA32I16x8Splat: usize = 188;
    pub const kIA32I16x8ExtractLaneS: usize = 189;
    pub const kIA32I16x8SConvertI8x16Low: usize = 190;
    pub const kIA32I16x8SConvertI8x16High: usize = 191;
    pub const kIA32I16x8Neg: usize = 192;
    pub const kIA32I16x8Shl: usize = 193;
    pub const kIA32I16x8ShrS: usize = 194;
    pub const kIA32I16x8SConvertI32x4: usize = 195;
    pub const kIA32I16x8Add: usize = 196;
    pub const kIA32I16x8AddSatS: usize = 197;
    pub const kIA32I16x8Sub: usize = 198;
    pub const kIA32I16x8SubSatS: usize = 199;
    pub const kIA32I16x8Mul: usize = 200;
    pub const kIA32I16x8MinS: usize = 201;
    pub const kIA32I16x8MaxS: usize = 202;
    pub const kIA32I16x8Eq: usize = 203;
    pub const kSSEI16x8Ne: usize = 204;
    pub const kAVXI16x8Ne: usize = 205;
    pub const kIA32I16x8GtS: usize = 206;
    pub const kSSEI16x8GeS: usize = 207;
    pub const kAVXI16x8GeS: usize = 208;
    pub const kIA32I16x8UConvertI8x16Low: usize = 209;
    pub const kIA32I16x8UConvertI8x16High: usize = 210;
    pub const kIA32I16x8ShrU: usize = 211;
    pub const kIA32I16x8UConvertI32x4: usize = 212;
    pub const kIA32I16x8AddSatU: usize = 213;
    pub const kIA32I16x8SubSatU: usize = 214;
    pub const kIA32I16x8MinU: usize = 215;
    pub const kIA32I16x8MaxU: usize = 216;
    pub const kSSEI16x8GtU: usize = 217;
    pub const kAVXI16x8GtU: usize = 218;
    pub const kSSEI16x8GeU: usize = 219;
    pub const kAVXI16x8GeU: usize = 220;
    pub const kIA32I16x8RoundingAverageU: usize = 221;
    pub const kIA32I16x8Abs: usize = 222;
    pub const kIA32I16x8BitMask: usize = 223;
    pub const kIA32I16x8ExtMulLowI8x16S: usize = 224;
    pub const kIA32I16x8ExtMulHighI8x16S: usize = 225;
    pub const kIA32I16x8ExtMulLowI8x16U: usize = 226;
    pub const kIA32I16x8ExtMulHighI8x16U: usize = 227;
    pub const kIA32I16x8ExtAddPairwiseI8x16S: usize = 228;
    pub const kIA32I16x8ExtAddPairwiseI8x16U: usize = 229;
    pub const kIA32I16x8Q15MulRSatS: usize = 230;
    pub const kIA32I16x8RelaxedQ15MulRS: usize = 231;
    pub const kIA32I16x8DotI8x16I7x16S: usize = 232;
    pub const kIA32I8x16Splat: usize = 233;
    pub const kIA32I8x16ExtractLaneS: usize = 234;
    pub const kIA32Pinsrb: usize = 235;
    pub const kIA32Pinsrw: usize = 236;
    pub const kIA32Pinsrd: usize = 237;
    pub const kIA32Pextrb: usize = 238;
    pub const kIA32Pextrw: usize = 239;
    pub const kIA32S128Store32Lane: usize = 240;
    pub const kIA32I8x16SConvertI16x8: usize = 241;
    pub const kIA32I8x16Neg: usize = 242;
    pub const kIA32I8x16Shl: usize = 243;
    pub const kIA32I8x16ShrS: usize = 244;
    pub const kIA32I8x16Add: usize = 245;
    pub const kIA32I8x16AddSatS: usize = 246;
    pub const kIA32I8x16Sub: usize = 247;
    pub const kIA32I8x16SubSatS: usize = 248;
    pub const kIA32I8x16MinS: usize = 249;
    pub const kIA32I8x16MaxS: usize = 250;
    pub const kIA32I8x16Eq: usize = 251;
    pub const kSSEI8x16Ne: usize = 252;
    pub const kAVXI8x16Ne: usize = 253;
    pub const kIA32I8x16GtS: usize = 254;
    pub const kSSEI8x16GeS: usize = 255;
    pub const kAVXI8x16GeS: usize = 256;
    pub const kIA32I8x16UConvertI16x8: usize = 257;
    pub const kIA32I8x16AddSatU: usize = 258;
    pub const kIA32I8x16SubSatU: usize = 259;
    pub const kIA32I8x16ShrU: usize = 260;
    pub const kIA32I8x16MinU: usize = 261;
    pub const kIA32I8x16MaxU: usize = 262;
    pub const kSSEI8x16GtU: usize = 263;
    pub const kAVXI8x16GtU: usize = 264;
    pub const kSSEI8x16GeU: usize = 265;
    pub const kAVXI8x16GeU: usize = 266;
    pub const kIA32I8x16RoundingAverageU: usize = 267;
    pub const kIA32I8x16Abs: usize = 268;
    pub const kIA32I8x16BitMask: usize = 269;
    pub const kIA32I8x16Popcnt: usize = 270;
    pub const kIA32S128Const: usize = 271;
    pub const kIA32S128Zero: usize = 272;
    pub const kIA32S128AllOnes: usize = 273;
    pub const kIA32S128Not: usize = 274;
    pub const kIA32S128And: usize = 275;
    pub const kIA32S128Or: usize = 276;
    pub const kIA32S128Xor: usize = 277;
    pub const kIA32S128Select: usize = 278;
    pub const kIA32S128AndNot: usize = 279;
    pub const kIA32I8x16Swizzle: usize = 280;
    pub const kIA32I8x16Shuffle: usize = 281;
    pub const kIA32S32x4Rotate: usize = 282;
    pub const kIA32S32x4Swizzle: usize = 283;
    pub const kIA32S32x4Shuffle: usize = 284;
    pub const kIA32S16x8Blend: usize = 285;
    pub const kIA32S16x8HalfShuffle1: usize = 286;
    pub const kIA32S16x8HalfShuffle2: usize = 287;
    pub const kIA32S8x16Alignr: usize = 288;
    pub const kIA32S16x8Dup: usize = 289;
    pub const kIA32S8x16Dup: usize = 290;
    pub const kSSES16x8UnzipHigh: usize = 291;
    pub const kAVXS16x8UnzipHigh: usize = 292;
    pub const kSSES16x8UnzipLow: usize = 293;
    pub const kAVXS16x8UnzipLow: usize = 294;
    pub const kSSES8x16UnzipHigh: usize = 295;
    pub const kAVXS8x16UnzipHigh: usize = 296;
    pub const kSSES8x16UnzipLow: usize = 297;
    pub const kAVXS8x16UnzipLow: usize = 298;
    pub const kIA32S64x2UnpackHigh: usize = 299;
    pub const kIA32S32x4UnpackHigh: usize = 300;
    pub const kIA32S16x8UnpackHigh: usize = 301;
    pub const kIA32S8x16UnpackHigh: usize = 302;
    pub const kIA32S64x2UnpackLow: usize = 303;
    pub const kIA32S32x4UnpackLow: usize = 304;
    pub const kIA32S16x8UnpackLow: usize = 305;
    pub const kIA32S8x16UnpackLow: usize = 306;
    pub const kSSES8x16TransposeLow: usize = 307;
    pub const kAVXS8x16TransposeLow: usize = 308;
    pub const kSSES8x16TransposeHigh: usize = 309;
    pub const kAVXS8x16TransposeHigh: usize = 310;
    pub const kSSES8x8Reverse: usize = 311;
    pub const kAVXS8x8Reverse: usize = 312;
    pub const kSSES8x4Reverse: usize = 313;
    pub const kAVXS8x4Reverse: usize = 314;
    pub const kSSES8x2Reverse: usize = 315;
    pub const kAVXS8x2Reverse: usize = 316;
    pub const kIA32S128AnyTrue: usize = 317;
    pub const kIA32I64x2AllTrue: usize = 318;
    pub const kIA32I32x4AllTrue: usize = 319;
    pub const kIA32I16x8AllTrue: usize = 320;
    pub const kIA32I8x16AllTrue: usize = 321;
    pub const kIA32Idiv: usize = 322;
    pub const kIA32Udiv: usize = 323;
    pub const kIA32Movsxbl: usize = 324;
    pub const kIA32Movzxbl: usize = 325;
    pub const kIA32Movb: usize = 326;
    pub const kIA32Movsxwl: usize = 327;
    pub const kIA32Movzxwl: usize = 328;
    pub const kIA32Movw: usize = 329;
    pub const kIA32Movl: usize = 330;
    pub const kIA32Movss: usize = 331;
    pub const kIA32Movsd: usize = 332;
    pub const kIA32Movdqu: usize = 333;
    pub const kIA32Movlps: usize = 334;
    pub const kIA32Movhps: usize = 335;
    pub const kIA32S128Load8Splat: usize = 336;
    pub const kIA32S128Load16Splat: usize = 337;
    pub const kIA32S128Load32Splat: usize = 338;
    pub const kIA32S128Load64Splat: usize = 339;
    pub const kIA32S128Load8x8S: usize = 340;
    pub const kIA32S128Load8x8U: usize = 341;
    pub const kIA32S128Load16x4S: usize = 342;
    pub const kIA32S128Load16x4U: usize = 343;
    pub const kIA32S128Load32x2S: usize = 344;
    pub const kIA32S128Load32x2U: usize = 345;
    pub const kIA32Peek: usize = 346;
    pub const kIA32Push: usize = 347;
    pub const kIA32Poke: usize = 348;
    pub const kIA32MFence: usize = 349;
    pub const kIA32LFence: usize = 350;
    pub const kIA32Word32AtomicPairLoad: usize = 351;
    pub const kIA32Word32ReleasePairStore: usize = 352;
    pub const kIA32Word32SeqCstPairStore: usize = 353;
    pub const kIA32Word32AtomicPairAdd: usize = 354;
    pub const kIA32Word32AtomicPairSub: usize = 355;
    pub const kIA32Word32AtomicPairAnd: usize = 356;
    pub const kIA32Word32AtomicPairOr: usize = 357;
    pub const kIA32Word32AtomicPairXor: usize = 358;
    pub const kIA32Word32AtomicPairExchange: usize = 359;
    pub const kIA32Word32AtomicPairCompareExchange: usize = 360;
    pub const kArchTruncateDoubleToI: usize = 361;
    pub const kNoOpcodeFlags: i32 = 0;
    pub const kIsLoadOperation: i32 = 1;
    pub const kHasSideEffect: i32 = 2;
    pub const kMayNeedDeoptOrTrapCheck: i32 = 4;
    pub const kMode_None: i32 = 0;
}

pub mod instruction_scheduler {
    use super::*;
    use instruction_codes::*;

    pub struct InstructionScheduler {}

    impl InstructionScheduler {
        pub fn new() -> Self {
            InstructionScheduler {}
        }

        pub fn scheduler_supported() -> bool {
            true
        }

        pub fn get_target_instruction_flags(&self, instr: &Instruction) -> i32 {
            match instr.arch_opcode {
                kIA3
