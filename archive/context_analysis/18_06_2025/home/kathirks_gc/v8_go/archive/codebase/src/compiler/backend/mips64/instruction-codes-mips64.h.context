{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/mips64/instruction-codes-mips64.h",
    "file_name": "instruction-codes-mips64.h",
    "language": "cpp",
    "purpose": "Defines MIPS64-specific opcodes and addressing modes used by the V8 compiler backend for code generation."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "No explicit imports, but relies on namespace v8::internal::compiler"
    },
    "code": "// No explicit imports in this header file."
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "v8::internal::compiler",
        "about": "Namespace containing compiler-related code for the V8 JavaScript engine."
      },
      "code": "namespace v8 {\n        namespace internal {\n        namespace compiler {\n        // Content of the namespace follows\n        }  // namespace compiler\n        }  // namespace internal\n        }  // namespace v8"
    }
  ],
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "macro",
        "name": "TARGET_ARCH_OPCODE_LIST",
        "about": "A macro that defines a list of MIPS64-specific opcodes.  The V macro is applied to each opcode.",
        "logic": "This macro takes a macro `V` as an argument. It then invokes `V` with each of the listed MIPS64 instruction opcodes. This is used to generate different lists of opcodes for different purposes (e.g., enum definition, string conversion).",
        "parameters": [
          {
            "name": "V",
            "type": "macro",
            "purpose": "A macro that is invoked for each opcode in the list."
          }
        ],
        "return": {
          "type": "None",
          "description": "The macro expands to a sequence of macro invocations."
        },
        "dependencies": []
      },
      "code": "#define TARGET_ARCH_OPCODE_LIST(V)    \\\n          V(Mips64Add)                        \\\n          V(Mips64Dadd)                       \\\n          V(Mips64DaddOvf)                    \\\n          V(Mips64Sub)                        \\\n          V(Mips64Dsub)                       \\\n          V(Mips64DsubOvf)                    \\\n          V(Mips64Mul)                        \\\n          V(Mips64MulOvf)                     \\\n          V(Mips64DMulOvf)                    \\\n          V(Mips64MulHigh)                    \\\n          V(Mips64DMulHigh)                   \\\n          V(Mips64MulHighU)                   \\\n          V(Mips64DMulHighU)                  \\\n          V(Mips64Dmul)                       \\\n          V(Mips64Div)                        \\\n          V(Mips64Ddiv)                       \\\n          V(Mips64DivU)                       \\\n          V(Mips64DdivU)                      \\\n          V(Mips64Mod)                        \\\n          V(Mips64Dmod)                       \\\n          V(Mips64ModU)                       \\\n          V(Mips64DmodU)                      \\\n          V(Mips64And)                        \\\n          V(Mips64And32)                      \\\n          V(Mips64Or)                         \\\n          V(Mips64Or32)                       \\\n          V(Mips64Nor)                        \\\n          V(Mips64Nor32)                      \\\n          V(Mips64Xor)                        \\\n          V(Mips64Xor32)                      \\\n          V(Mips64Clz)                        \\\n          V(Mips64Lsa)                        \\\n          V(Mips64Dlsa)                       \\\n          V(Mips64Shl)                        \\\n          V(Mips64Shr)                        \\\n          V(Mips64Sar)                        \\\n          V(Mips64Ext)                        \\\n          V(Mips64Ins)                        \\\n          V(Mips64Dext)                       \\\n          V(Mips64Dins)                       \\\n          V(Mips64Dclz)                       \\\n          V(Mips64Ctz)                        \\\n          V(Mips64Dctz)                       \\\n          V(Mips64Popcnt)                     \\\n          V(Mips64Dpopcnt)                    \\\n          V(Mips64Dshl)                       \\\n          V(Mips64Dshr)                       \\\n          V(Mips64Dsar)                       \\\n          V(Mips64Ror)                        \\\n          V(Mips64Dror)                       \\\n          V(Mips64Mov)                        \\\n          V(Mips64Tst)                        \\\n          V(Mips64Cmp)                        \\\n          V(Mips64CmpS)                       \\\n          V(Mips64AddS)                       \\\n          V(Mips64SubS)                       \\\n          V(Mips64MulS)                       \\\n          V(Mips64DivS)                       \\\n          V(Mips64AbsS)                       \\\n          V(Mips64NegS)                       \\\n          V(Mips64SqrtS)                      \\\n          V(Mips64MaxS)                       \\\n          V(Mips64MinS)                       \\\n          V(Mips64CmpD)                       \\\n          V(Mips64AddD)                       \\\n          V(Mips64SubD)                       \\\n          V(Mips64MulD)                       \\\n          V(Mips64DivD)                       \\\n          V(Mips64ModD)                       \\\n          V(Mips64AbsD)                       \\\n          V(Mips64NegD)                       \\\n          V(Mips64SqrtD)                      \\\n          V(Mips64MaxD)                       \\\n          V(Mips64MinD)                       \\\n          V(Mips64Float64RoundDown)           \\\n          V(Mips64Float64RoundTruncate)       \\\n          V(Mips64Float64RoundUp)             \\\n          V(Mips64Float64RoundTiesEven)       \\\n          V(Mips64Float32RoundDown)           \\\n          V(Mips64Float32RoundTruncate)       \\\n          V(Mips64Float32RoundUp)             \\\n          V(Mips64Float32RoundTiesEven)       \\\n          V(Mips64CvtSD)                      \\\n          V(Mips64CvtDS)                      \\\n          V(Mips64TruncWD)                    \\\n          V(Mips64RoundWD)                    \\\n          V(Mips64FloorWD)                    \\\n          V(Mips64CeilWD)                     \\\n          V(Mips64TruncWS)                    \\\n          V(Mips64RoundWS)                    \\\n          V(Mips64FloorWS)                    \\\n          V(Mips64CeilWS)                     \\\n          V(Mips64TruncLS)                    \\\n          V(Mips64TruncLD)                    \\\n          V(Mips64TruncUwD)                   \\\n          V(Mips64TruncUwS)                   \\\n          V(Mips64TruncUlS)                   \\\n          V(Mips64TruncUlD)                   \\\n          V(Mips64CvtDW)                      \\\n          V(Mips64CvtSL)                      \\\n          V(Mips64CvtSW)                      \\\n          V(Mips64CvtSUw)                     \\\n          V(Mips64CvtSUl)                     \\\n          V(Mips64CvtDL)                      \\\n          V(Mips64CvtDUw)                     \\\n          V(Mips64CvtDUl)                     \\\n          V(Mips64Lb)                         \\\n          V(Mips64Lbu)                        \\\n          V(Mips64Sb)                         \\\n          V(Mips64Lh)                         \\\n          V(Mips64Ulh)                        \\\n          V(Mips64Lhu)                        \\\n          V(Mips64Ulhu)                       \\\n          V(Mips64Sh)                         \\\n          V(Mips64Ush)                        \\\n          V(Mips64Ld)                         \\\n          V(Mips64Uld)                        \\\n          V(Mips64Lw)                         \\\n          V(Mips64Ulw)                        \\\n          V(Mips64Lwu)                        \\\n          V(Mips64Ulwu)                       \\\n          V(Mips64Sw)                         \\\n          V(Mips64Usw)                        \\\n          V(Mips64Sd)                         \\\n          V(Mips64Usd)                        \\\n          V(Mips64Lwc1)                       \\\n          V(Mips64Ulwc1)                      \\\n          V(Mips64Swc1)                       \\\n          V(Mips64Uswc1)                      \\\n          V(Mips64Ldc1)                       \\\n          V(Mips64Uldc1)                      \\\n          V(Mips64Sdc1)                       \\\n          V(Mips64Usdc1)                      \\\n          V(Mips64BitcastDL)                  \\\n          V(Mips64BitcastLD)                  \\\n          V(Mips64Float64ExtractLowWord32)    \\\n          V(Mips64Float64ExtractHighWord32)   \\\n          V(Mips64Float64FromWord32Pair)      \\\n          V(Mips64Float64InsertLowWord32)     \\\n          V(Mips64Float64InsertHighWord32)    \\\n          V(Mips64Float32Max)                 \\\n          V(Mips64Float64Max)                 \\\n          V(Mips64Float32Min)                 \\\n          V(Mips64Float64Min)                 \\\n          V(Mips64Float64SilenceNaN)          \\\n          V(Mips64Push)                       \\\n          V(Mips64Peek)                       \\\n          V(Mips64StoreToStackSlot)           \\\n          V(Mips64ByteSwap64)                 \\\n          V(Mips64ByteSwap32)                 \\\n          V(Mips64StackClaim)                 \\\n          V(Mips64Seb)                        \\\n          V(Mips64Seh)                        \\\n          V(Mips64Sync)                       \\\n          V(Mips64AssertEqual)                \\\n          V(Mips64S128Const)                  \\\n          V(Mips64S128Zero)                   \\\n          V(Mips64S128AllOnes)                \\\n          V(Mips64I32x4Splat)                 \\\n          V(Mips64I32x4ExtractLane)           \\\n          V(Mips64I32x4ReplaceLane)           \\\n          V(Mips64I32x4Add)                   \\\n          V(Mips64I32x4Sub)                   \\\n          V(Mips64F64x2Abs)                   \\\n          V(Mips64F64x2Neg)                   \\\n          V(Mips64F32x4Splat)                 \\\n          V(Mips64F32x4ExtractLane)           \\\n          V(Mips64F32x4ReplaceLane)           \\\n          V(Mips64F32x4SConvertI32x4)         \\\n          V(Mips64F32x4UConvertI32x4)         \\\n          V(Mips64I32x4Mul)                   \\\n          V(Mips64I32x4MaxS)                  \\\n          V(Mips64I32x4MinS)                  \\\n          V(Mips64I32x4Eq)                    \\\n          V(Mips64I32x4Ne)                    \\\n          V(Mips64I32x4Shl)                   \\\n          V(Mips64I32x4ShrS)                  \\\n          V(Mips64I32x4ShrU)                  \\\n          V(Mips64I32x4MaxU)                  \\\n          V(Mips64I32x4MinU)                  \\\n          V(Mips64F64x2Sqrt)                  \\\n          V(Mips64F64x2Add)                   \\\n          V(Mips64F64x2Sub)                   \\\n          V(Mips64F64x2Mul)                   \\\n          V(Mips64F64x2Div)                   \\\n          V(Mips64F64x2Min)                   \\\n          V(Mips64F64x2Max)                   \\\n          V(Mips64F64x2Eq)                    \\\n          V(Mips64F64x2Ne)                    \\\n          V(Mips64F64x2Lt)                    \\\n          V(Mips64F64x2Le)                    \\\n          V(Mips64F64x2Splat)                 \\\n          V(Mips64F64x2ExtractLane)           \\\n          V(Mips64F64x2ReplaceLane)           \\\n          V(Mips64F64x2Pmin)                  \\\n          V(Mips64F64x2Pmax)                  \\\n          V(Mips64F64x2Ceil)                  \\\n          V(Mips64F64x2Floor)                 \\\n          V(Mips64F64x2Trunc)                 \\\n          V(Mips64F64x2NearestInt)            \\\n          V(Mips64F64x2ConvertLowI32x4S)      \\\n          V(Mips64F64x2ConvertLowI32x4U)      \\\n          V(Mips64F64x2PromoteLowF32x4)       \\\n          V(Mips64I64x2Splat)                 \\\n          V(Mips64I64x2ExtractLane)           \\\n          V(Mips64I64x2ReplaceLane)           \\\n          V(Mips64I64x2Add)                   \\\n          V(Mips64I64x2Sub)                   \\\n          V(Mips64I64x2Mul)                   \\\n          V(Mips64I64x2Neg)                   \\\n          V(Mips64I64x2Shl)                   \\\n          V(Mips64I64x2ShrS)                  \\\n          V(Mips64I64x2ShrU)                  \\\n          V(Mips64I64x2BitMask)               \\\n          V(Mips64I64x2Eq)                    \\\n          V(Mips64I64x2Ne)                    \\\n          V(Mips64I64x2GtS)                   \\\n          V(Mips64I64x2GeS)                   \\\n          V(Mips64I64x2Abs)                   \\\n          V(Mips64I64x2SConvertI32x4Low)      \\\n          V(Mips64I64x2SConvertI32x4High)     \\\n          V(Mips64I64x2UConvertI32x4Low)      \\\n          V(Mips64I64x2UConvertI32x4High)     \\\n          V(Mips64ExtMulLow)                  \\\n          V(Mips64ExtMulHigh)                 \\\n          V(Mips64ExtAddPairwise)             \\\n          V(Mips64F32x4Abs)                   \\\n          V(Mips64F32x4Neg)                   \\\n          V(Mips64F32x4Sqrt)                  \\\n          V(Mips64F32x4Add)                   \\\n          V(Mips64F32x4Sub)                   \\\n          V(Mips64F32x4Mul)                   \\\n          V(Mips64F32x4Div)                   \\\n          V(Mips64F32x4Max)                   \\\n          V(Mips64F32x4Min)                   \\\n          V(Mips64F32x4Eq)                    \\\n          V(Mips64F32x4Ne)                    \\\n          V(Mips64F32x4Lt)                    \\\n          V(Mips64F32x4Le)                    \\\n          V(Mips64F32x4Pmin)                  \\\n          V(Mips64F32x4Pmax)                  \\\n          V(Mips64F32x4Ceil)                  \\\n          V(Mips64F32x4Floor)                 \\\n          V(Mips64F32x4Trunc)                 \\\n          V(Mips64F32x4NearestInt)            \\\n          V(Mips64F32x4DemoteF64x2Zero)       \\\n          V(Mips64I32x4SConvertF32x4)         \\\n          V(Mips64I32x4UConvertF32x4)         \\\n          V(Mips64I32x4Neg)                   \\\n          V(Mips64I32x4GtS)                   \\\n          V(Mips64I32x4GeS)                   \\\n          V(Mips64I32x4GtU)                   \\\n          V(Mips64I32x4GeU)                   \\\n          V(Mips64I32x4Abs)                   \\\n          V(Mips64I32x4BitMask)               \\\n          V(Mips64I32x4DotI16x8S)             \\\n          V(Mips64I32x4TruncSatF64x2SZero)    \\\n          V(Mips64I32x4TruncSatF64x2UZero)    \\\n          V(Mips64I16x8Splat)                 \\\n          V(Mips64I16x8ExtractLaneU)          \\\n          V(Mips64I16x8ExtractLaneS)          \\\n          V(Mips64I16x8ReplaceLane)           \\\n          V(Mips64I16x8Neg)                   \\\n          V(Mips64I16x8Shl)                   \\\n          V(Mips64I16x8ShrS)                  \\\n          V(Mips64I16x8ShrU)                  \\\n          V(Mips64I16x8Add)                   \\\n          V(Mips64I16x8AddSatS)               \\\n          V(Mips64I16x8Sub)                   \\\n          V(Mips64I16x8SubSatS)               \\\n          V(Mips64I16x8Mul)                   \\\n          V(Mips64I16x8MaxS)                  \\\n          V(Mips64I16x8MinS)                  \\\n          V(Mips64I16x8Eq)                    \\\n          V(Mips64I16x8Ne)                    \\\n          V(Mips64I16x8GtS)                   \\\n          V(Mips64I16x8GeS)                   \\\n          V(Mips64I16x8AddSatU)               \\\n          V(Mips64I16x8SubSatU)               \\\n          V(Mips64I16x8MaxU)                  \\\n          V(Mips64I16x8MinU)                  \\\n          V(Mips64I16x8GtU)                   \\\n          V(Mips64I16x8GeU)                   \\\n          V(Mips64I16x8RoundingAverageU)      \\\n          V(Mips64I16x8Abs)                   \\\n          V(Mips64I16x8BitMask)               \\\n          V(Mips64I16x8Q15MulRSatS)           \\\n          V(Mips64I8x16Splat)                 \\\n          V(Mips64I8x16ExtractLaneU)          \\\n          V(Mips64I8x16ExtractLaneS)          \\\n          V(Mips64I8x16ReplaceLane)           \\\n          V(Mips64I8x16Neg)                   \\\n          V(Mips64I8x16Shl)                   \\\n          V(Mips64I8x16ShrS)                  \\\n          V(Mips64I8x16Add)                   \\\n          V(Mips64I8x16AddSatS)               \\\n          V(Mips64I8x16Sub)                   \\\n          V(Mips64I8x16SubSatS)               \\\n          V(Mips64I8x16MaxS)                  \\\n          V(Mips64I8x16MinS)                  \\\n          V(Mips64I8x16Eq)                    \\\n          V(Mips64I8x16Ne)                    \\\n          V(Mips64I8x16GtS)                   \\\n          V(Mips64I8x16GeS)                   \\\n          V(Mips64I8x16ShrU)                  \\\n          V(Mips64I8x16AddSatU)               \\\n          V(Mips64I8x16SubSatU)               \\\n          V(Mips64I8x16MaxU)                  \\\n          V(Mips64I8x16MinU)                  \\\n          V(Mips64I8x16GtU)                   \\\n          V(Mips64I8x16GeU)                   \\\n          V(Mips64I8x16RoundingAverageU)      \\\n          V(Mips64I8x16Abs)                   \\\n          V(Mips64I8x16Popcnt)                \\\n          V(Mips64I8x16BitMask)               \\\n          V(Mips64S128And)                    \\\n          V(Mips64S128Or)                     \\\n          V(Mips64S128Xor)                    \\\n          V(Mips64S128Not)                    \\\n          V(Mips64S128Select)                 \\\n          V(Mips64S128AndNot)                 \\\n          V(Mips64I64x2AllTrue)               \\\n          V(Mips64I32x4AllTrue)               \\\n          V(Mips64I16x8AllTrue)               \\\n          V(Mips64I8x16AllTrue)               \\\n          V(Mips64V128AnyTrue)                \\\n          V(Mips64S32x4InterleaveRight)       \\\n          V(Mips64S32x4InterleaveLeft)        \\\n          V(Mips64S32x4PackEven)              \\\n          V(Mips64S32x4PackOdd)               \\\n          V(Mips64S32x4InterleaveEven)        \\\n          V(Mips64S32x4InterleaveOdd)         \\\n          V(Mips64S32x4Shuffle)               \\\n          V(Mips64S16x8InterleaveRight)       \\\n          V(Mips64S16x8InterleaveLeft)        \\\n          V(Mips64S16x8PackEven)              \\\n          V(Mips64S16x8PackOdd)               \\\n          V(Mips64S16x8InterleaveEven)        \\\n          V(Mips64S16x8InterleaveOdd)         \\\n          V(Mips64S16x4Reverse)               \\\n          V(Mips64S16x2Reverse)               \\\n          V(Mips64S8x16InterleaveRight)       \\\n          V(Mips64S8x16InterleaveLeft)        \\\n          V(Mips64S8x16PackEven)              \\\n          V(Mips64S8x16PackOdd)               \\\n          V(Mips64S8x16InterleaveEven)        \\\n          V(Mips64S8x16InterleaveOdd)         \\\n          V(Mips64I8x16Shuffle)               \\\n          V(Mips64I8x16Swizzle)               \\\n          V(Mips64S8x16Concat)                \\\n          V(Mips64S8x8Reverse)                \\\n          V(Mips64S8x4Reverse)                \\\n          V(Mips64S8x2Reverse)                \\\n          V(Mips64S128LoadSplat)              \\\n          V(Mips64S128Load8x8S)               \\\n          V(Mips64S128Load8x8U)               \\\n          V(Mips64S128Load16x4S)              \\\n          V(Mips64S128Load16x4U)              \\\n          V(Mips64S128Load32x2S)              \\\n          V(Mips64S128Load32x2U)              \\\n          V(Mips64S128Load32Zero)             \\\n          V(Mips64S128Load64Zero)             \\\n          V(Mips64S128LoadLane)               \\\n          V(Mips64S128StoreLane)              \\\n          V(Mips64MsaLd)                      \\\n          V(Mips64MsaSt)                      \\\n          V(Mips64I32x4SConvertI16x8Low)      \\\n          V(Mips64I32x4SConvertI16x8High)     \\\n          V(Mips64I32x4UConvertI16x8Low)      \\\n          V(Mips64I32x4UConvertI16x8High)     \\\n          V(Mips64I16x8SConvertI8x16Low)      \\\n          V(Mips64I16x8SConvertI8x16High)     \\\n          V(Mips64I16x8SConvertI32x4)         \\\n          V(Mips64I16x8UConvertI32x4)         \\\n          V(Mips64I16x8UConvertI8x16Low)      \\\n          V(Mips64I16x8UConvertI8x16High)     \\\n          V(Mips64I8x16SConvertI16x8)         \\\n          V(Mips64I8x16UConvertI16x8)         \\\n          V(Mips64StoreCompressTagged)        \\\n          V(Mips64Word64AtomicLoadUint64)     \\\n          V(Mips64Word64AtomicStoreWord64)    \\\n          V(Mips64Word64AtomicAddUint64)      \\\n          V(Mips64Word64AtomicSubUint64)      \\\n          V(Mips64Word64AtomicAndUint64)      \\\n          V(Mips64Word64AtomicOrUint64)       \\\n          V(Mips64Word64AtomicXorUint64)      \\\n          V(Mips64Word64AtomicExchangeUint64) \\\n          V(Mips64Word64AtomicCompareExchangeUint64)"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "macro",
        "name": "TARGET_ADDRESSING_MODE_LIST",
        "about": "A macro that defines a list of MIPS64 addressing modes. The V macro is applied to each addressing mode.",
        "logic": "This macro takes a macro `V` as an argument. It then invokes `V` with each of the listed MIPS64 addressing modes. This is used to generate different lists of addressing modes for different purposes (e.g., enum definition, string conversion).",
        "parameters": [
          {
            "name": "V",
            "type": "macro",
            "purpose": "A macro that is invoked for each addressing mode in the list."
          }
        ],
        "return": {
          "type": "None",
          "description": "The macro expands to a sequence of macro invocations."
        },
        "dependencies": []
      },
      "code": "#define TARGET_ADDRESSING_MODE_LIST(V) \\\n          V(MRI)  /* [%r0 + K] */              \\\n          V(MRR)  /* [%r0 + %r1] */            \\\n          V(Root) /* [%rr + K] */"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/mips64/instruction-codes-mips64.h"
}