{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/ppc/instruction-codes-ppc.h",
    "file_name": "instruction-codes-ppc.h",
    "language": "cpp",
    "purpose": "Defines PPC-specific opcodes for the V8 compiler backend, which specify assembly sequences to emit. Also defines addressing modes."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "No explicit imports, but relies on the surrounding V8 codebase for context and definitions."
    },
    "code": "// No explicit import statements. Relies on namespace structure."
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "v8",
        "about": "Google's open source high-performance JavaScript and WebAssembly engine"
      },
      "code": "namespace v8 {\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "internal",
        "about": "V8's internal implementation details"
      },
      "code": "namespace internal {\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "compiler",
        "about": "V8's compiler components"
      },
      "code": "namespace compiler {\n            }"
    }
  ],
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "macro",
        "name": "TARGET_ARCH_OPCODE_LIST",
        "about": "A macro that takes a visitor (V) as input and defines a list of PPC-specific opcodes.",
        "logic": "This macro is used to generate a list of opcodes for different purposes, such as defining an enum or generating a dispatch table.",
        "parameters": [
          {
            "name": "V",
            "type": "macro",
            "purpose": "A visitor macro that is applied to each opcode in the list."
          }
        ],
        "return": {
          "type": "void",
          "description": "Expands to a sequence of macro invocations."
        },
        "dependencies": []
      },
      "code": "#define TARGET_ARCH_OPCODE_LIST(V)   \\\n              V(PPC_Peek)                        \\\n              V(PPC_Sync)                        \\\n              V(PPC_And)                         \\\n              V(PPC_AndComplement)               \\\n              V(PPC_Or)                          \\\n              V(PPC_OrComplement)                \\\n              V(PPC_Xor)                         \\\n              V(PPC_ShiftLeft32)                 \\\n              V(PPC_ShiftLeft64)                 \\\n              V(PPC_ShiftLeftPair)               \\\n              V(PPC_ShiftRight32)                \\\n              V(PPC_ShiftRight64)                \\\n              V(PPC_ShiftRightPair)              \\\n              V(PPC_ShiftRightAlg32)             \\\n              V(PPC_ShiftRightAlg64)             \\\n              V(PPC_ShiftRightAlgPair)           \\\n              V(PPC_RotRight32)                  \\\n              V(PPC_RotRight64)                  \\\n              V(PPC_Not)                         \\\n              V(PPC_RotLeftAndMask32)            \\\n              V(PPC_RotLeftAndClear64)           \\\n              V(PPC_RotLeftAndClearLeft64)       \\\n              V(PPC_RotLeftAndClearRight64)      \\\n              V(PPC_Add32)                       \\\n              V(PPC_Add64)                       \\\n              V(PPC_AddWithOverflow32)           \\\n              V(PPC_AddPair)                     \\\n              V(PPC_AddDouble)                   \\\n              V(PPC_Sub)                         \\\n              V(PPC_SubWithOverflow32)           \\\n              V(PPC_SubPair)                     \\\n              V(PPC_SubDouble)                   \\\n              V(PPC_Mul32)                       \\\n              V(PPC_Mul32WithHigh32)             \\\n              V(PPC_Mul64)                       \\\n              V(PPC_MulHighS64)                  \\\n              V(PPC_MulHighU64)                  \\\n              V(PPC_MulHigh32)                   \\\n              V(PPC_MulHighU32)                  \\\n              V(PPC_MulPair)                     \\\n              V(PPC_MulDouble)                   \\\n              V(PPC_Div32)                       \\\n              V(PPC_Div64)                       \\\n              V(PPC_DivU32)                      \\\n              V(PPC_DivU64)                      \\\n              V(PPC_DivDouble)                   \\\n              V(PPC_Mod32)                       \\\n              V(PPC_Mod64)                       \\\n              V(PPC_ModU32)                      \\\n              V(PPC_ModU64)                      \\\n              V(PPC_ModDouble)                   \\\n              V(PPC_Neg)                         \\\n              V(PPC_NegDouble)                   \\\n              V(PPC_SqrtDouble)                  \\\n              V(PPC_FloorDouble)                 \\\n              V(PPC_CeilDouble)                  \\\n              V(PPC_TruncateDouble)              \\\n              V(PPC_RoundDouble)                 \\\n              V(PPC_MaxDouble)                   \\\n              V(PPC_MinDouble)                   \\\n              V(PPC_AbsDouble)                   \\\n              V(PPC_Cntlz32)                     \\\n              V(PPC_Cntlz64)                     \\\n              V(PPC_Popcnt32)                    \\\n              V(PPC_Popcnt64)                    \\\n              V(PPC_Cmp32)                       \\\n              V(PPC_Cmp64)                       \\\n              V(PPC_CmpDouble)                   \\\n              V(PPC_Tst32)                       \\\n              V(PPC_Tst64)                       \\\n              V(PPC_Push)                        \\\n              V(PPC_PushFrame)                   \\\n              V(PPC_StoreToStackSlot)            \\\n              V(PPC_ExtendSignWord8)             \\\n              V(PPC_ExtendSignWord16)            \\\n              V(PPC_ExtendSignWord32)            \\\n              V(PPC_Uint32ToUint64)              \\\n              V(PPC_Int64ToInt32)                \\\n              V(PPC_Int64ToFloat32)              \\\n              V(PPC_Int64ToDouble)               \\\n              V(PPC_Uint64ToFloat32)             \\\n              V(PPC_Uint64ToDouble)              \\\n              V(PPC_Int32ToFloat32)              \\\n              V(PPC_Int32ToDouble)               \\\n              V(PPC_Uint32ToFloat32)             \\\n              V(PPC_Float32ToInt32)              \\\n              V(PPC_Float32ToUint32)             \\\n              V(PPC_Uint32ToDouble)              \\\n              V(PPC_Float32ToDouble)             \\\n              V(PPC_Float64SilenceNaN)           \\\n              V(PPC_DoubleToInt32)               \\\n              V(PPC_DoubleToUint32)              \\\n              V(PPC_DoubleToInt64)               \\\n              V(PPC_DoubleToUint64)              \\\n              V(PPC_DoubleToFloat32)             \\\n              V(PPC_DoubleExtractLowWord32)      \\\n              V(PPC_DoubleExtractHighWord32)     \\\n              V(PPC_DoubleFromWord32Pair)        \\\n              V(PPC_DoubleInsertLowWord32)       \\\n              V(PPC_DoubleInsertHighWord32)      \\\n              V(PPC_DoubleConstruct)             \\\n              V(PPC_BitcastInt32ToFloat32)       \\\n              V(PPC_BitcastFloat32ToInt32)       \\\n              V(PPC_BitcastInt64ToDouble)        \\\n              V(PPC_BitcastDoubleToInt64)        \\\n              V(PPC_LoadWordS8)                  \\\n              V(PPC_LoadWordU8)                  \\\n              V(PPC_LoadWordS16)                 \\\n              V(PPC_LoadWordU16)                 \\\n              V(PPC_LoadWordS32)                 \\\n              V(PPC_LoadWordU32)                 \\\n              V(PPC_LoadByteRev32)               \\\n              V(PPC_LoadWord64)                  \\\n              V(PPC_LoadByteRev64)               \\\n              V(PPC_LoadFloat32)                 \\\n              V(PPC_LoadDouble)                  \\\n              V(PPC_LoadSimd128)                 \\\n              V(PPC_LoadReverseSimd128RR)        \\\n              V(PPC_StoreWord8)                  \\\n              V(PPC_StoreWord16)                 \\\n              V(PPC_StoreWord32)                 \\\n              V(PPC_StoreByteRev32)              \\\n              V(PPC_StoreWord64)                 \\\n              V(PPC_StoreByteRev64)              \\\n              V(PPC_StoreFloat32)                \\\n              V(PPC_StoreDouble)                 \\\n              V(PPC_StoreSimd128)                \\\n              V(PPC_ByteRev32)                   \\\n              V(PPC_ByteRev64)                   \\\n              V(PPC_AtomicExchangeUint8)         \\\n              V(PPC_AtomicExchangeUint16)        \\\n              V(PPC_AtomicExchangeWord32)        \\\n              V(PPC_AtomicExchangeWord64)        \\\n              V(PPC_AtomicCompareExchangeUint8)  \\\n              V(PPC_AtomicCompareExchangeUint16) \\\n              V(PPC_AtomicCompareExchangeWord32) \\\n              V(PPC_AtomicCompareExchangeWord64) \\\n              V(PPC_AtomicAddUint8)              \\\n              V(PPC_AtomicAddUint16)             \\\n              V(PPC_AtomicAddUint32)             \\\n              V(PPC_AtomicAddUint64)             \\\n              V(PPC_AtomicAddInt8)               \\\n              V(PPC_AtomicAddInt16)              \\\n              V(PPC_AtomicAddInt32)              \\\n              V(PPC_AtomicAddInt64)              \\\n              V(PPC_AtomicSubUint8)              \\\n              V(PPC_AtomicSubUint16)             \\\n              V(PPC_AtomicSubUint32)             \\\n              V(PPC_AtomicSubUint64)             \\\n              V(PPC_AtomicSubInt8)               \\\n              V(PPC_AtomicSubInt16)              \\\n              V(PPC_AtomicSubInt32)              \\\n              V(PPC_AtomicSubInt64)              \\\n              V(PPC_AtomicAndUint8)              \\\n              V(PPC_AtomicAndUint16)             \\\n              V(PPC_AtomicAndUint32)             \\\n              V(PPC_AtomicAndUint64)             \\\n              V(PPC_AtomicAndInt8)               \\\n              V(PPC_AtomicAndInt16)              \\\n              V(PPC_AtomicAndInt32)              \\\n              V(PPC_AtomicAndInt64)              \\\n              V(PPC_AtomicOrUint8)               \\\n              V(PPC_AtomicOrUint16)             \\\n              V(PPC_AtomicOrUint32)             \\\n              V(PPC_AtomicOrUint64)             \\\n              V(PPC_AtomicOrInt8)                \\\n              V(PPC_AtomicOrInt16)               \\\n              V(PPC_AtomicOrInt32)               \\\n              V(PPC_AtomicOrInt64)               \\\n              V(PPC_AtomicXorUint8)              \\\n              V(PPC_AtomicXorUint16)             \\\n              V(PPC_AtomicXorUint32)             \\\n              V(PPC_AtomicXorUint64)             \\\n              V(PPC_AtomicXorInt8)               \\\n              V(PPC_AtomicXorInt16)              \\\n              V(PPC_AtomicXorInt32)              \\\n              V(PPC_AtomicXorInt64)              \\\n              V(PPC_F64x2Add)                    \\\n              V(PPC_F64x2Sub)                    \\\n              V(PPC_F64x2Mul)                    \\\n              V(PPC_F64x2Eq)                     \\\n              V(PPC_F64x2Ne)                     \\\n              V(PPC_F64x2Le)                     \\\n              V(PPC_F64x2Lt)                     \\\n              V(PPC_F64x2Abs)                    \\\n              V(PPC_F64x2Neg)                    \\\n              V(PPC_F64x2Sqrt)                   \\\n              V(PPC_F64x2Qfma)                   \\\n              V(PPC_F64x2Qfms)                   \\\n              V(PPC_F64x2Div)                    \\\n              V(PPC_F64x2Min)                    \\\n              V(PPC_F64x2Max)                    \\\n              V(PPC_F64x2Ceil)                   \\\n              V(PPC_F64x2Floor)                  \\\n              V(PPC_F64x2Trunc)                  \\\n              V(PPC_F64x2Pmin)                   \\\n              V(PPC_F64x2Pmax)                   \\\n              V(PPC_F64x2ConvertLowI32x4S)       \\\n              V(PPC_F64x2ConvertLowI32x4U)       \\\n              V(PPC_F64x2PromoteLowF32x4)        \\\n              V(PPC_F32x4Add)                    \\\n              V(PPC_F32x4Sub)                    \\\n              V(PPC_F32x4Mul)                    \\\n              V(PPC_F32x4Eq)                     \\\n              V(PPC_F32x4Ne)                     \\\n              V(PPC_F32x4Lt)                     \\\n              V(PPC_F32x4Le)                     \\\n              V(PPC_F32x4Abs)                    \\\n              V(PPC_F32x4Neg)                    \\\n              V(PPC_F32x4Sqrt)                   \\\n              V(PPC_F32x4SConvertI32x4)          \\\n              V(PPC_F32x4UConvertI32x4)          \\\n              V(PPC_F32x4Div)                    \\\n              V(PPC_F32x4Min)                    \\\n              V(PPC_F32x4Max)                    \\\n              V(PPC_F32x4Ceil)                   \\\n              V(PPC_F32x4Floor)                  \\\n              V(PPC_F32x4Trunc)                  \\\n              V(PPC_F32x4Pmin)                   \\\n              V(PPC_F32x4Pmax)                   \\\n              V(PPC_F32x4Qfma)                   \\\n              V(PPC_F32x4Qfms)                   \\\n              V(PPC_F32x4DemoteF64x2Zero)        \\\n              V(PPC_I64x2Add)                    \\\n              V(PPC_I64x2Sub)                    \\\n              V(PPC_I64x2Mul)                    \\\n              V(PPC_I64x2Eq)                     \\\n              V(PPC_I64x2Ne)                     \\\n              V(PPC_I64x2GtS)                    \\\n              V(PPC_I64x2GeS)                    \\\n              V(PPC_I64x2Shl)                    \\\n              V(PPC_I64x2ShrS)                   \\\n              V(PPC_I64x2ShrU)                   \\\n              V(PPC_I64x2Neg)                    \\\n              V(PPC_I64x2BitMask)                \\\n              V(PPC_I64x2SConvertI32x4Low)       \\\n              V(PPC_I64x2SConvertI32x4High)      \\\n              V(PPC_I64x2UConvertI32x4Low)       \\\n              V(PPC_I64x2UConvertI32x4High)      \\\n              V(PPC_I64x2ExtMulLowI32x4S)        \\\n              V(PPC_I64x2ExtMulHighI32x4S)       \\\n              V(PPC_I64x2ExtMulLowI32x4U)        \\\n              V(PPC_I64x2ExtMulHighI32x4U)       \\\n              V(PPC_I64x2Abs)                    \\\n              V(PPC_I32x4Add)                    \\\n              V(PPC_I32x4Sub)                    \\\n              V(PPC_I32x4Mul)                    \\\n              V(PPC_I32x4MinS)                   \\\n              V(PPC_I32x4MinU)                   \\\n              V(PPC_I32x4MaxS)                   \\\n              V(PPC_I32x4MaxU)                   \\\n              V(PPC_I32x4Eq)                     \\\n              V(PPC_I32x4Ne)                     \\\n              V(PPC_I32x4GtS)                    \\\n              V(PPC_I32x4GeS)                    \\\n              V(PPC_I32x4GtU)                    \\\n              V(PPC_I32x4GeU)                    \\\n              V(PPC_I32x4Shl)                    \\\n              V(PPC_I32x4ShrS)                   \\\n              V(PPC_I32x4ShrU)                   \\\n              V(PPC_I32x4Neg)                    \\\n              V(PPC_I32x4Abs)                    \\\n              V(PPC_I32x4SConvertF32x4)          \\\n              V(PPC_I32x4UConvertF32x4)          \\\n              V(PPC_I32x4SConvertI16x8Low)       \\\n              V(PPC_I32x4SConvertI16x8High)      \\\n              V(PPC_I32x4UConvertI16x8Low)       \\\n              V(PPC_I32x4UConvertI16x8High)      \\\n              V(PPC_I32x4BitMask)                \\\n              V(PPC_I32x4DotI16x8S)              \\\n              V(PPC_I32x4ExtAddPairwiseI16x8S)   \\\n              V(PPC_I32x4ExtAddPairwiseI16x8U)   \\\n              V(PPC_I32x4ExtMulLowI16x8S)        \\\n              V(PPC_I32x4ExtMulHighI16x8S)       \\\n              V(PPC_I32x4ExtMulLowI16x8U)        \\\n              V(PPC_I32x4ExtMulHighI16x8U)       \\\n              V(PPC_I32x4TruncSatF64x2SZero)     \\\n              V(PPC_I32x4TruncSatF64x2UZero)     \\\n              V(PPC_I32x4DotI8x16AddS)           \\\n              V(PPC_I16x8Add)                    \\\n              V(PPC_I16x8Sub)                    \\\n              V(PPC_I16x8Mul)                    \\\n              V(PPC_I16x8MinS)                   \\\n              V(PPC_I16x8MinU)                   \\\n              V(PPC_I16x8MaxS)                   \\\n              V(PPC_I16x8MaxU)                   \\\n              V(PPC_I16x8Eq)                     \\\n              V(PPC_I16x8Ne)                     \\\n              V(PPC_I16x8GtS)                    \\\n              V(PPC_I16x8GeS)                    \\\n              V(PPC_I16x8GtU)                    \\\n              V(PPC_I16x8GeU)                    \\\n              V(PPC_I16x8Shl)                    \\\n              V(PPC_I16x8ShrS)                   \\\n              V(PPC_I16x8ShrU)                   \\\n              V(PPC_I16x8Neg)                    \\\n              V(PPC_I16x8Abs)                    \\\n              V(PPC_I16x8SConvertI32x4)          \\\n              V(PPC_I16x8UConvertI32x4)          \\\n              V(PPC_I16x8SConvertI8x16Low)       \\\n              V(PPC_I16x8SConvertI8x16High)      \\\n              V(PPC_I16x8UConvertI8x16Low)       \\\n              V(PPC_I16x8UConvertI8x16High)      \\\n              V(PPC_I16x8AddSatS)                \\\n              V(PPC_I16x8SubSatS)                \\\n              V(PPC_I16x8AddSatU)                \\\n              V(PPC_I16x8SubSatU)                \\\n              V(PPC_I16x8RoundingAverageU)       \\\n              V(PPC_I16x8BitMask)                \\\n              V(PPC_I16x8ExtAddPairwiseI8x16S)   \\\n              V(PPC_I16x8ExtAddPairwiseI8x16U)   \\\n              V(PPC_I16x8Q15MulRSatS)            \\\n              V(PPC_I16x8ExtMulLowI8x16S)        \\\n              V(PPC_I16x8ExtMulHighI8x16S)       \\\n              V(PPC_I16x8ExtMulLowI8x16U)        \\\n              V(PPC_I16x8ExtMulHighI8x16U)       \\\n              V(PPC_I16x8DotI8x16S)              \\\n              V(PPC_I8x16Add)                    \\\n              V(PPC_I8x16Sub)                    \\\n              V(PPC_I8x16MinS)                   \\\n              V(PPC_I8x16MinU)                   \\\n              V(PPC_I8x16MaxS)                   \\\n              V(PPC_I8x16MaxU)                   \\\n              V(PPC_I8x16Eq)                     \\\n              V(PPC_I8x16Ne)                     \\\n              V(PPC_I8x16GtS)                    \\\n              V(PPC_I8x16GeS)                    \\\n              V(PPC_I8x16GtU)                    \\\n              V(PPC_I8x16GeU)                    \\\n              V(PPC_I8x16Shl)                    \\\n              V(PPC_I8x16ShrS)                   \\\n              V(PPC_I8x16ShrU)                   \\\n              V(PPC_I8x16Neg)                    \\\n              V(PPC_I8x16Abs)                    \\\n              V(PPC_I8x16SConvertI16x8)          \\\n              V(PPC_I8x16UConvertI16x8)          \\\n              V(PPC_I8x16AddSatS)                \\\n              V(PPC_I8x16SubSatS)                \\\n              V(PPC_I8x16AddSatU)                \\\n              V(PPC_I8x16SubSatU)                \\\n              V(PPC_I8x16RoundingAverageU)       \\\n              V(PPC_I8x16Shuffle)                \\\n              V(PPC_I8x16Swizzle)                \\\n              V(PPC_I8x16BitMask)                \\\n              V(PPC_I8x16Popcnt)                 \\\n              V(PPC_I64x2AllTrue)                \\\n              V(PPC_I32x4AllTrue)                \\\n              V(PPC_I16x8AllTrue)                \\\n              V(PPC_I8x16AllTrue)                \\\n              V(PPC_V128AnyTrue)                 \\\n              V(PPC_S128And)                     \\\n              V(PPC_S128Or)                      \\\n              V(PPC_S128Xor)                     \\\n              V(PPC_S128Const)                   \\\n              V(PPC_S128Zero)                    \\\n              V(PPC_S128AllOnes)                 \\\n              V(PPC_S128Not)                     \\\n              V(PPC_S128Select)                  \\\n              V(PPC_S128AndNot)                  \\\n              V(PPC_S128Load8Splat)              \\\n              V(PPC_S128Load16Splat)             \\\n              V(PPC_S128Load32Splat)             \\\n              V(PPC_S128Load64Splat)             \\\n              V(PPC_S128Load8x8S)                \\\n              V(PPC_S128Load8x8U)                \\\n              V(PPC_S128Load16x4S)               \\\n              V(PPC_S128Load16x4U)               \\\n              V(PPC_S128Load32x2S)               \\\n              V(PPC_S128Load32x2U)               \\\n              V(PPC_S128Load32Zero)              \\\n              V(PPC_S128Load64Zero)              \\\n              V(PPC_S128Load8Lane)               \\\n              V(PPC_S128Load16Lane)              \\\n              V(PPC_S128Load32Lane)              \\\n              V(PPC_S128Load64Lane)              \\\n              V(PPC_S128Store8Lane)              \\\n              V(PPC_S128Store16Lane)             \\\n              V(PPC_S128Store32Lane)             \\\n              V(PPC_S128Store64Lane)             \\\n              V(PPC_FExtractLane)                \\\n              V(PPC_IExtractLane)                \\\n              V(PPC_IExtractLaneU)               \\\n              V(PPC_IExtractLaneS)               \\\n              V(PPC_FReplaceLane)                \\\n              V(PPC_IReplaceLane)                \\\n              V(PPC_FSplat)                      \\\n              V(PPC_ISplat)                      \\\n              V(PPC_StoreCompressTagged)         \\\n              V(PPC_StoreIndirectPointer)        \\\n              V(PPC_LoadDecodeSandboxedPointer)  \\\n              V(PPC_StoreEncodeSandboxedPointer) \\\n              V(PPC_LoadDecompressTaggedSigned)  \\\n              V(PPC_LoadDecompressTagged)"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "macro",
        "name": "TARGET_ADDRESSING_MODE_LIST",
        "about": "A macro that takes a visitor (V) as input and defines a list of PPC-specific addressing modes.",
        "logic": "Similar to TARGET_ARCH_OPCODE_LIST, this macro is used to generate a list of addressing modes.",
        "parameters": [
          {
            "name": "V",
            "type": "macro",
            "purpose": "A visitor macro that is applied to each addressing mode in the list."
          }
        ],
        "return": {
          "type": "void",
          "description": "Expands to a sequence of macro invocations."
        },
        "dependencies": []
      },
      "code": "#define TARGET_ADDRESSING_MODE_LIST(V) \\\n              V(MRI)  /* [%r0 + K] */              \\\n              V(MRR)  /* [%r0 + %r1] */            \\\n              V(Root) /* [%rr + K] */"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/ppc/instruction-codes-ppc.h"
}