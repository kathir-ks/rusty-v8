{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/ia32/instruction-codes-ia32.h",
    "file_name": "instruction-codes-ia32.h",
    "language": "cpp",
    "purpose": "Defines IA32-specific opcodes and addressing modes used by the V8 compiler backend for code generation on IA32 architecture."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "End of namespace and include guard."
    },
    "code": "}  // namespace compiler\n            }  // namespace internal\n            }  // namespace v8\n\n            #endif  // V8_COMPILER_BACKEND_IA32_INSTRUCTION_CODES_IA32_H_"
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "v8",
        "about": "The root namespace for the V8 JavaScript engine.",
        "dependencies": []
      },
      "code": "namespace v8 {"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "internal",
        "about": "Namespace for V8's internal implementation details.",
        "dependencies": [
          "v8"
        ]
      },
      "code": "namespace internal {"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "namespace",
        "name": "compiler",
        "about": "Namespace for the V8 compiler.",
        "dependencies": [
          "v8::internal"
        ]
      },
      "code": "namespace compiler {"
    }
  ],
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "macro",
        "name": "TARGET_ARCH_OPCODE_LIST",
        "about": "Defines a list of IA32-specific opcodes using a macro.",
        "logic": "Takes a macro V as input and applies it to each IA32 opcode. This pattern is used to generate different code based on the opcodes, such as for defining an enum or a string representation.",
        "parameters": [
          {
            "name": "V",
            "type": "macro",
            "purpose": "The macro to be applied to each opcode."
          }
        ],
        "return": {
          "type": "void",
          "description": "This macro doesn't return a value, but expands into a sequence of macro applications."
        },
        "dependencies": []
      },
      "code": "#define TARGET_ARCH_OPCODE_LIST(V) \\\n              V(IA32Add)                       \\\n              V(IA32And)                       \\\n              V(IA32Cmp)                       \\\n              V(IA32Cmp16)                     \\\n              V(IA32Cmp8)                      \\\n              V(IA32Test)                      \\\n              V(IA32Test16)                    \\\n              V(IA32Test8)                     \\\n              V(IA32Or)                        \\\n              V(IA32Xor)                       \\\n              V(IA32Sub)                       \\\n              V(IA32Imul)                      \\\n              V(IA32ImulHigh)                  \\\n              V(IA32UmulHigh)                  \\\n              V(IA32Idiv)                      \\\n              V(IA32Udiv)                      \\\n              V(IA32Not)                       \\\n              V(IA32Neg)                       \\\n              V(IA32Shl)                       \\\n              V(IA32Shr)                       \\\n              V(IA32Sar)                       \\\n              V(IA32AddPair)                   \\\n              V(IA32SubPair)                   \\\n              V(IA32MulPair)                   \\\n              V(IA32ShlPair)                   \\\n              V(IA32ShrPair)                   \\\n              V(IA32SarPair)                   \\\n              V(IA32Rol)                       \\\n              V(IA32Ror)                       \\\n              V(IA32Lzcnt)                     \\\n              V(IA32Tzcnt)                     \\\n              V(IA32Popcnt)                    \\\n              V(IA32Bswap)                     \\\n              V(IA32MFence)                    \\\n              V(IA32LFence)                    \\\n              V(IA32Float32Cmp)                \\\n              V(IA32Float32Sqrt)               \\\n              V(IA32Float32Round)              \\\n              V(IA32Float64Cmp)                \\\n              V(IA32Float64Mod)                \\\n              V(IA32Float32Max)                \\\n              V(IA32Float64Max)                \\\n              V(IA32Float32Min)                \\\n              V(IA32Float64Min)                \\\n              V(IA32Float64Sqrt)               \\\n              V(IA32Float64Round)              \\\n              V(IA32Float32ToFloat64)          \\\n              V(IA32Float64ToFloat32)          \\\n              V(IA32Float32ToInt32)            \\\n              V(IA32Float32ToUint32)           \\\n              V(IA32Float64ToInt32)            \\\n              V(IA32Float64ToUint32)           \\\n              V(SSEInt32ToFloat32)             \\\n              V(IA32Uint32ToFloat32)           \\\n              V(SSEInt32ToFloat64)             \\\n              V(IA32Uint32ToFloat64)           \\\n              V(IA32Float64ExtractLowWord32)   \\\n              V(IA32Float64ExtractHighWord32)  \\\n              V(IA32Float64InsertLowWord32)    \\\n              V(IA32Float64InsertHighWord32)   \\\n              V(IA32Float64FromWord32Pair)     \\\n              V(IA32Float64LoadLowWord32)      \\\n              V(IA32Float64SilenceNaN)         \\\n              V(Float32Add)                    \\\n              V(Float32Sub)                    \\\n              V(Float64Add)                    \\\n              V(Float64Sub)                    \\\n              V(Float32Mul)                    \\\n              V(Float32Div)                    \\\n              V(Float64Mul)                    \\\n              V(Float64Div)                    \\\n              V(Float64Abs)                    \\\n              V(Float64Neg)                    \\\n              V(Float32Abs)                    \\\n              V(Float32Neg)                    \\\n              V(IA32Movsxbl)                   \\\n              V(IA32Movzxbl)                   \\\n              V(IA32Movb)                      \\\n              V(IA32Movsxwl)                   \\\n              V(IA32Movzxwl)                   \\\n              V(IA32Movw)                      \\\n              V(IA32Movl)                      \\\n              V(IA32Movss)                     \\\n              V(IA32Movsd)                     \\\n              V(IA32Movdqu)                    \\\n              V(IA32Movlps)                    \\\n              V(IA32Movhps)                    \\\n              V(IA32BitcastFI)                 \\\n              V(IA32BitcastIF)                 \\\n              V(IA32Blendvpd)                  \\\n              V(IA32Blendvps)                  \\\n              V(IA32Lea)                       \\\n              V(IA32Pblendvb)                  \\\n              V(IA32Push)                      \\\n              V(IA32Poke)                      \\\n              V(IA32Peek)                      \\\n              V(IA32Cvttps2dq)                 \\\n              V(IA32Cvttpd2dq)                 \\\n              V(IA32I32x4TruncF32x4U)          \\\n              V(IA32I32x4TruncF64x2UZero)      \\\n              V(IA32F64x2Splat)                \\\n              V(IA32F64x2ExtractLane)          \\\n              V(IA32F64x2ReplaceLane)          \\\n              V(IA32F64x2Sqrt)                 \\\n              V(IA32F64x2Add)                  \\\n              V(IA32F64x2Sub)                  \\\n              V(IA32F64x2Mul)                  \\\n              V(IA32F64x2Div)                  \\\n              V(IA32F64x2Min)                  \\\n              V(IA32F64x2Max)                  \\\n              V(IA32F64x2Eq)                   \\\n              V(IA32F64x2Ne)                   \\\n              V(IA32F64x2Lt)                   \\\n              V(IA32F64x2Le)                   \\\n              V(IA32F64x2Qfma)                 \\\n              V(IA32F64x2Qfms)                 \\\n              V(IA32Minpd)                     \\\n              V(IA32Maxpd)                     \\\n              V(IA32F64x2Round)                \\\n              V(IA32F64x2ConvertLowI32x4S)     \\\n              V(IA32F64x2ConvertLowI32x4U)     \\\n              V(IA32F64x2PromoteLowF32x4)      \\\n              V(IA32I64x2SplatI32Pair)         \\\n              V(IA32I64x2ReplaceLaneI32Pair)   \\\n              V(IA32I64x2Abs)                  \\\n              V(IA32I64x2Neg)                  \\\n              V(IA32I64x2Shl)                  \\\n              V(IA32I64x2ShrS)                 \\\n              V(IA32I64x2Add)                  \\\n              V(IA32I64x2Sub)                  \\\n              V(IA32I64x2Mul)                  \\\n              V(IA32I64x2ShrU)                 \\\n              V(IA32I64x2BitMask)              \\\n              V(IA32I64x2Eq)                   \\\n              V(IA32I64x2Ne)                   \\\n              V(IA32I64x2GtS)                  \\\n              V(IA32I64x2GeS)                  \\\n              V(IA32I64x2ExtMulLowI32x4S)      \\\n              V(IA32I64x2ExtMulHighI32x4S)     \\\n              V(IA32I64x2ExtMulLowI32x4U)      \\\n              V(IA32I64x2ExtMulHighI32x4U)     \\\n              V(IA32I64x2SConvertI32x4Low)     \\\n              V(IA32I64x2SConvertI32x4High)    \\\n              V(IA32I64x2UConvertI32x4Low)     \\\n              V(IA32I64x2UConvertI32x4High)    \\\n              V(IA32F32x4Splat)                \\\n              V(IA32F32x4ExtractLane)          \\\n              V(IA32Insertps)                  \\\n              V(IA32F32x4SConvertI32x4)        \\\n              V(IA32F32x4UConvertI32x4)        \\\n              V(IA32F32x4Sqrt)                 \\\n              V(IA32F32x4Add)                  \\\n              V(IA32F32x4Sub)                  \\\n              V(IA32F32x4Mul)                  \\\n              V(IA32F32x4Div)                  \\\n              V(IA32F32x4Min)                  \\\n              V(IA32F32x4Max)                  \\\n              V(IA32F32x4Eq)                   \\\n              V(IA32F32x4Ne)                   \\\n              V(IA32F32x4Lt)                   \\\n              V(IA32F32x4Le)                   \\\n              V(IA32F32x4Qfma)                 \\\n              V(IA32F32x4Qfms)                 \\\n              V(IA32Minps)                     \\\n              V(IA32Maxps)                     \\\n              V(IA32F32x4Round)                \\\n              V(IA32F32x4DemoteF64x2Zero)      \\\n              V(IA32I32x4Splat)                \\\n              V(IA32I32x4ExtractLane)          \\\n              V(IA32I32x4SConvertF32x4)        \\\n              V(IA32I32x4SConvertI16x8Low)     \\\n              V(IA32I32x4SConvertI16x8High)    \\\n              V(IA32I32x4Neg)                  \\\n              V(IA32I32x4Shl)                  \\\n              V(IA32I32x4ShrS)                 \\\n              V(IA32I32x4Add)                  \\\n              V(IA32I32x4Sub)                  \\\n              V(IA32I32x4Mul)                  \\\n              V(IA32I32x4MinS)                 \\\n              V(IA32I32x4MaxS)                 \\\n              V(IA32I32x4Eq)                   \\\n              V(IA32I32x4Ne)                   \\\n              V(IA32I32x4GtS)                  \\\n              V(IA32I32x4GeS)                  \\\n              V(SSEI32x4UConvertF32x4)         \\\n              V(AVXI32x4UConvertF32x4)         \\\n              V(IA32I32x4UConvertI16x8Low)     \\\n              V(IA32I32x4UConvertI16x8High)    \\\n              V(IA32I32x4ShrU)                 \\\n              V(IA32I32x4MinU)                 \\\n              V(IA32I32x4MaxU)                 \\\n              V(SSEI32x4GtU)                   \\\n              V(AVXI32x4GtU)                   \\\n              V(SSEI32x4GeU)                   \\\n              V(AVXI32x4GeU)                   \\\n              V(IA32I32x4Abs)                  \\\n              V(IA32I32x4BitMask)              \\\n              V(IA32I32x4DotI16x8S)            \\\n              V(IA32I32x4DotI8x16I7x16AddS)    \\\n              V(IA32I32x4ExtMulLowI16x8S)      \\\n              V(IA32I32x4ExtMulHighI16x8S)     \\\n              V(IA32I32x4ExtMulLowI16x8U)      \\\n              V(IA32I32x4ExtMulHighI16x8U)     \\\n              V(IA32I32x4ExtAddPairwiseI16x8S) \\\n              V(IA32I32x4ExtAddPairwiseI16x8U) \\\n              V(IA32I32x4TruncSatF64x2SZero)   \\\n              V(IA32I32x4TruncSatF64x2UZero)   \\\n              V(IA32I16x8Splat)                \\\n              V(IA32I16x8ExtractLaneS)         \\\n              V(IA32I16x8SConvertI8x16Low)     \\\n              V(IA32I16x8SConvertI8x16High)    \\\n              V(IA32I16x8Neg)                  \\\n              V(IA32I16x8Shl)                  \\\n              V(IA32I16x8ShrS)                 \\\n              V(IA32I16x8SConvertI32x4)        \\\n              V(IA32I16x8Add)                  \\\n              V(IA32I16x8AddSatS)              \\\n              V(IA32I16x8Sub)                  \\\n              V(IA32I16x8SubSatS)              \\\n              V(IA32I16x8Mul)                  \\\n              V(IA32I16x8MinS)                 \\\n              V(IA32I16x8MaxS)                 \\\n              V(IA32I16x8Eq)                   \\\n              V(SSEI16x8Ne)                    \\\n              V(AVXI16x8Ne)                    \\\n              V(IA32I16x8GtS)                  \\\n              V(SSEI16x8GeS)                   \\\n              V(AVXI16x8GeS)                   \\\n              V(IA32I16x8UConvertI8x16Low)     \\\n              V(IA32I16x8UConvertI8x16High)    \\\n              V(IA32I16x8ShrU)                 \\\n              V(IA32I16x8UConvertI32x4)        \\\n              V(IA32I16x8AddSatU)              \\\n              V(IA32I16x8SubSatU)              \\\n              V(IA32I16x8MinU)                 \\\n              V(IA32I16x8MaxU)                 \\\n              V(SSEI16x8GtU)                   \\\n              V(AVXI16x8GtU)                   \\\n              V(SSEI16x8GeU)                   \\\n              V(AVXI16x8GeU)                   \\\n              V(IA32I16x8RoundingAverageU)     \\\n              V(IA32I16x8Abs)                  \\\n              V(IA32I16x8BitMask)              \\\n              V(IA32I16x8ExtMulLowI8x16S)      \\\n              V(IA32I16x8ExtMulHighI8x16S)     \\\n              V(IA32I16x8ExtMulLowI8x16U)      \\\n              V(IA32I16x8ExtMulHighI8x16U)     \\\n              V(IA32I16x8ExtAddPairwiseI8x16S) \\\n              V(IA32I16x8ExtAddPairwiseI8x16U) \\\n              V(IA32I16x8Q15MulRSatS)          \\\n              V(IA32I16x8RelaxedQ15MulRS)      \\\n              V(IA32I8x16Splat)                \\\n              V(IA32I8x16ExtractLaneS)         \\\n              V(IA32Pinsrb)                    \\\n              V(IA32Pinsrw)                    \\\n              V(IA32Pinsrd)                    \\\n              V(IA32Pextrb)                    \\\n              V(IA32Pextrw)                    \\\n              V(IA32S128Store32Lane)           \\\n              V(IA32I8x16SConvertI16x8)        \\\n              V(IA32I8x16Neg)                  \\\n              V(IA32I8x16Shl)                  \\\n              V(IA32I8x16ShrS)                 \\\n              V(IA32I8x16Add)                  \\\n              V(IA32I8x16AddSatS)              \\\n              V(IA32I8x16Sub)                  \\\n              V(IA32I8x16SubSatS)              \\\n              V(IA32I8x16MinS)                 \\\n              V(IA32I8x16MaxS)                 \\\n              V(IA32I8x16Eq)                   \\\n              V(SSEI8x16Ne)                    \\\n              V(AVXI8x16Ne)                    \\\n              V(IA32I8x16GtS)                  \\\n              V(SSEI8x16GeS)                   \\\n              V(AVXI8x16GeS)                   \\\n              V(IA32I8x16UConvertI16x8)        \\\n              V(IA32I8x16AddSatU)              \\\n              V(IA32I8x16SubSatU)              \\\n              V(IA32I8x16ShrU)                 \\\n              V(IA32I8x16MinU)                 \\\n              V(IA32I8x16MaxU)                 \\\n              V(SSEI8x16GtU)                   \\\n              V(AVXI8x16GtU)                   \\\n              V(SSEI8x16GeU)                   \\\n              V(AVXI8x16GeU)                   \\\n              V(IA32I8x16RoundingAverageU)     \\\n              V(IA32I8x16Abs)                  \\\n              V(IA32I8x16BitMask)              \\\n              V(IA32I8x16Popcnt)               \\\n              V(IA32S128Const)                 \\\n              V(IA32S128Zero)                  \\\n              V(IA32S128AllOnes)               \\\n              V(IA32S128Not)                   \\\n              V(IA32S128And)                   \\\n              V(IA32S128Or)                    \\\n              V(IA32S128Xor)                   \\\n              V(IA32S128Select)                \\\n              V(IA32S128AndNot)                \\\n              V(IA32I8x16Swizzle)              \\\n              V(IA32I8x16Shuffle)              \\\n              V(IA32S128Load8Splat)            \\\n              V(IA32S128Load16Splat)           \\\n              V(IA32S128Load32Splat)           \\\n              V(IA32S128Load64Splat)           \\\n              V(IA32S128Load8x8S)              \\\n              V(IA32S128Load8x8U)              \\\n              V(IA32S128Load16x4S)             \\\n              V(IA32S128Load16x4U)             \\\n              V(IA32S128Load32x2S)             \\\n              V(IA32S128Load32x2U)             \\\n              V(IA32S32x4Rotate)               \\\n              V(IA32S32x4Swizzle)              \\\n              V(IA32S32x4Shuffle)              \\\n              V(IA32S16x8Blend)                \\\n              V(IA32S16x8HalfShuffle1)         \\\n              V(IA32S16x8HalfShuffle2)         \\\n              V(IA32S8x16Alignr)               \\\n              V(IA32S16x8Dup)                  \\\n              V(IA32S8x16Dup)                  \\\n              V(SSES16x8UnzipHigh)             \\\n              V(AVXS16x8UnzipHigh)             \\\n              V(SSES16x8UnzipLow)              \\\n              V(AVXS16x8UnzipLow)              \\\n              V(SSES8x16UnzipHigh)             \\\n              V(AVXS8x16UnzipHigh)             \\\n              V(SSES8x16UnzipLow)              \\\n              V(AVXS8x16UnzipLow)              \\\n              V(IA32S64x2UnpackHigh)           \\\n              V(IA32S32x4UnpackHigh)           \\\n              V(IA32S16x8UnpackHigh)           \\\n              V(IA32S8x16UnpackHigh)           \\\n              V(IA32S64x2UnpackLow)            \\\n              V(IA32S32x4UnpackLow)            \\\n              V(IA32S16x8UnpackLow)            \\\n              V(IA32S8x16UnpackLow)            \\\n              V(SSES8x16TransposeLow)          \\\n              V(AVXS8x16TransposeLow)          \\\n              V(SSES8x16TransposeHigh)         \\\n              V(AVXS8x16TransposeHigh)         \\\n              V(SSES8x8Reverse)                \\\n              V(AVXS8x8Reverse)                \\\n              V(SSES8x4Reverse)                \\\n              V(AVXS8x4Reverse)                \\\n              V(SSES8x2Reverse)                \\\n              V(AVXS8x2Reverse)                \\\n              V(IA32S128AnyTrue)               \\\n              V(IA32I64x2AllTrue)              \\\n              V(IA32I32x4AllTrue)              \\\n              V(IA32I16x8AllTrue)              \\\n              V(IA32I8x16AllTrue)              \\\n              V(IA32I16x8DotI8x16I7x16S)       \\\n              V(IA32Word32AtomicPairLoad)      \\\n              V(IA32Word32ReleasePairStore)    \\\n              V(IA32Word32SeqCstPairStore)     \\\n              V(IA32Word32AtomicPairAdd)       \\\n              V(IA32Word32AtomicPairSub)       \\\n              V(IA32Word32AtomicPairAnd)       \\\n              V(IA32Word32AtomicPairOr)        \\\n              V(IA32Word32AtomicPairXor)       \\\n              V(IA32Word32AtomicPairExchange)  \\\n              V(IA32Word32AtomicPairCompareExchange)"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "macro",
        "name": "TARGET_ADDRESSING_MODE_LIST",
        "about": "Defines a list of IA32 addressing modes using a macro.",
        "logic": "Takes a macro V as input and applies it to each IA32 addressing mode. This pattern is used to generate different code based on the addressing modes, such as for defining an enum or a string representation.",
        "parameters": [
          {
            "name": "V",
            "type": "macro",
            "purpose": "The macro to be applied to each addressing mode."
          }
        ],
        "return": {
          "type": "void",
          "description": "This macro doesn't return a value, but expands into a sequence of macro applications."
        },
        "dependencies": []
      },
      "code": "#define TARGET_ADDRESSING_MODE_LIST(V) \\\n              V(MR)   /* [%r1            ] */      \\\n              V(MRI)  /* [%r1         + K] */      \\\n              V(MR1)  /* [%r1 + %r2*1    ] */      \\\n              V(MR2)  /* [%r1 + %r2*2    ] */      \\\n              V(MR4)  /* [%r1 + %r2*4    ] */      \\\n              V(MR8)  /* [%r1 + %r2*8    ] */      \\\n              V(MR1I) /* [%r1 + %r2*1 + K] */      \\\n              V(MR2I) /* [%r1 + %r2*2 + K] */      \\\n              V(MR4I) /* [%r1 + %r2*4 + K] */      \\\n              V(MR8I) /* [%r1 + %r2*8 + K] */      \\\n              V(M1)   /* [      %r2*1    ] */      \\\n              V(M2)   /* [      %r2*2    ] */      \\\n              V(M4)   /* [      %r2*4    ] */      \\\n              V(M8)   /* [      %r2*8    ] */      \\\n              V(M1I)  /* [      %r2*1 + K] */      \\\n              V(M2I)  /* [      %r2*2 + K] */      \\\n              V(M4I)  /* [      %r2*4 + K] */      \\\n              V(M8I)  /* [      %r2*8 + K] */      \\\n              V(MI)   /* [              K] */      \\\n              V(Root) /* [%root       + K] */"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/ia32/instruction-codes-ia32.h"
}