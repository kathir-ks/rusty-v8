{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/s390/frame-constants-s390.h",
    "file_name": "frame-constants-s390.h",
    "language": "cpp",
    "purpose": "Defines constants related to stack frame layout on the s390 architecture for the V8 JavaScript engine."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary headers for bit manipulation, macro definitions, register definitions, and general frame constants."
    },
    "code": "#include \"src/base/bits.h\"\n#include \"src/base/macros.h\"\n#include \"src/codegen/register.h\"\n#include \"src/execution/frame-constants.h\""
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "EntryFrameConstants",
        "extends": "AllStatic",
        "about": "Defines constants for the entry frame, which is used when entering JavaScript code from native code.",
        "attributes": [],
        "dependencies": [
          "AllStatic",
          "kSystemPointerSize"
        ]
      },
      "code": "class EntryFrameConstants : public AllStatic {\n public:\n  static constexpr int kNextExitFrameFPOffset = -3 * kSystemPointerSize;\n\n  static constexpr int kNextFastCallFrameFPOffset =\n      kNextExitFrameFPOffset - kSystemPointerSize;\n  static constexpr int kNextFastCallFramePCOffset =\n      kNextFastCallFrameFPOffset - kSystemPointerSize;\n\n  // Stack offsets for arguments passed to JSEntry.\n  static constexpr int kArgvOffset = 20 * kSystemPointerSize;\n};"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmLiftoffSetupFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants for the Wasm Liftoff setup frame, used during WebAssembly Liftoff compilation setup.",
        "attributes": [],
        "dependencies": [
          "TypedFrameConstants",
          "TYPED_FRAME_PUSHED_VALUE_OFFSET",
          "kSystemPointerSize"
        ]
      },
      "code": "class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {\n public:\n  // Number of gp parameters, without the instance.\n  static constexpr int kNumberOfSavedGpParamRegs = 3;\n  static constexpr int kNumberOfSavedFpParamRegs = 4;\n\n  // There's one spilled value (which doesn't need visiting) below the instance.\n  static constexpr int kInstanceSpillOffset =\n      TYPED_FRAME_PUSHED_VALUE_OFFSET(1);\n\n  // Spilled registers are implicitly sorted backwards by number.\n  static constexpr int kParameterSpillsOffset[] = {\n      TYPED_FRAME_PUSHED_VALUE_OFFSET(4), TYPED_FRAME_PUSHED_VALUE_OFFSET(3),\n      TYPED_FRAME_PUSHED_VALUE_OFFSET(2)};\n\n  // SP-relative.\n  static constexpr int kWasmInstanceDataOffset = 2 * kSystemPointerSize;\n  static constexpr int kDeclaredFunctionIndexOffset = 1 * kSystemPointerSize;\n  static constexpr int kNativeModuleOffset = 0;\n};"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmLiftoffFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants for the Wasm Liftoff frame, used during WebAssembly Liftoff execution.",
        "attributes": [],
        "dependencies": [
          "TypedFrameConstants",
          "kSystemPointerSize"
        ]
      },
      "code": "class WasmLiftoffFrameConstants : public TypedFrameConstants {\n public:\n  static constexpr int kFeedbackVectorOffset = 3 * kSystemPointerSize;\n  static constexpr int kInstanceDataOffset = 2 * kSystemPointerSize;\n};"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmDebugBreakFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants for the Wasm Debug Break frame, used when a debug break occurs in WebAssembly code.",
        "attributes": [],
        "dependencies": [
          "TypedFrameConstants",
          "RegList",
          "DoubleRegList",
          "kSystemPointerSize",
          "kSimd128Size",
          "r2",
          "r3",
          "r4",
          "r5",
          "r6",
          "r7",
          "r8",
          "cp",
          "d0",
          "d1",
          "d2",
          "d3",
          "d4",
          "d5",
          "d6",
          "d7",
          "d8",
          "d9",
          "d10",
          "d11",
          "d12",
          "base::bits::CountPopulation"
        ]
      },
      "code": "class WasmDebugBreakFrameConstants : public TypedFrameConstants {\n public:\n  static constexpr RegList kPushedGpRegs = {r2, r3, r4, r5, r6, r7, r8, cp};\n\n  static constexpr DoubleRegList kPushedFpRegs = {d0, d1, d2, d3,  d4,  d5, d6,\n                                                  d7, d8, d9, d10, d11, d12};\n\n  static constexpr int kNumPushedGpRegisters = kPushedGpRegs.Count();\n  static constexpr int kNumPushedFpRegisters = kPushedFpRegs.Count();\n\n  static constexpr int kLastPushedGpRegisterOffset =\n      -TypedFrameConstants::kFixedFrameSizeFromFp -\n      kSystemPointerSize * kNumPushedGpRegisters;\n  static constexpr int kLastPushedFpRegisterOffset =\n      kLastPushedGpRegisterOffset - kSimd128Size * kNumPushedFpRegisters;\n\n  // Offsets are fp-relative.\n  static int GetPushedGpRegisterOffset(int reg_code) {\n    DCHECK_NE(0, kPushedGpRegs.bits() & (1 << reg_code));\n    uint32_t lower_regs =\n        kPushedGpRegs.bits() & ((uint32_t{1} << reg_code) - 1);\n    return kLastPushedGpRegisterOffset +\n           base::bits::CountPopulation(lower_regs) * kSystemPointerSize;\n  }\n\n  static int GetPushedFpRegisterOffset(int reg_code) {\n    DCHECK_NE(0, kPushedFpRegs.bits() & (1 << reg_code));\n    uint32_t lower_regs =\n        kPushedFpRegs.bits() & ((uint32_t{1} << reg_code) - 1);\n    return kLastPushedFpRegisterOffset +\n           base::bits::CountPopulation(lower_regs) * kSimd128Size;\n  }\n};"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/s390/frame-constants-s390.h"
}