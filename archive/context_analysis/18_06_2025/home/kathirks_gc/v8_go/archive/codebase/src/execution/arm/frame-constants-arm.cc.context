{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/arm/frame-constants-arm.cc",
    "file_name": "frame-constants-arm.cc",
    "language": "cpp",
    "purpose": "Defines frame-related constants and functions specific to the ARM architecture within the V8 JavaScript engine."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary header files for ARM-specific frame handling, assembler functionality, generic frame constants, and frame definitions."
    },
    "code": "#include \"src/execution/arm/frame-constants-arm.h\"\n\n#include \"src/codegen/arm/assembler-arm-inl.h\"\n#include \"src/execution/frame-constants.h\"\n#include \"src/execution/frames.h\""
  },
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "fp_register",
        "parent": "JavaScriptFrame",
        "about": "Returns the frame pointer register for JavaScript frames on ARM.",
        "logic": "Simply returns the ARM frame pointer register (fp).",
        "parameters": [],
        "return": {
          "type": "Register",
          "description": "The frame pointer register."
        },
        "dependencies": []
      },
      "code": "Register JavaScriptFrame::fp_register() { return v8::internal::fp; }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "context_register",
        "parent": "JavaScriptFrame",
        "about": "Returns the context register for JavaScript frames on ARM.",
        "logic": "Returns the ARM context pointer register (cp).",
        "parameters": [],
        "return": {
          "type": "Register",
          "description": "The context register."
        },
        "dependencies": []
      },
      "code": "Register JavaScriptFrame::context_register() { return cp; }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "constant_pool_pointer_register",
        "parent": "JavaScriptFrame",
        "about": "Returns the register used for the constant pool pointer (not used on ARM).",
        "logic": "Calls UNREACHABLE() because ARM architecture doesn't use a dedicated constant pool pointer register.",
        "parameters": [],
        "return": {
          "type": "Register",
          "description": "This function never returns as it always calls UNREACHABLE()."
        },
        "dependencies": []
      },
      "code": "Register JavaScriptFrame::constant_pool_pointer_register() { UNREACHABLE(); }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "RegisterStackSlotCount",
        "parent": "UnoptimizedFrameConstants",
        "about": "Calculates the number of stack slots required for registers in an unoptimized frame.",
        "logic": "Simply returns the register count, indicating each register occupies one stack slot.",
        "parameters": [
          {
            "name": "register_count",
            "type": "int",
            "purpose": "The number of registers."
          }
        ],
        "return": {
          "type": "int",
          "description": "The number of stack slots."
        },
        "dependencies": []
      },
      "code": "int UnoptimizedFrameConstants::RegisterStackSlotCount(int register_count) {\n  return register_count;\n}"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "PaddingSlotCount",
        "parent": "BuiltinContinuationFrameConstants",
        "about": "Calculates the number of padding slots needed in a BuiltinContinuationFrame.",
        "logic": "Always returns 0, indicating no padding slots are required on ARM.",
        "parameters": [
          {
            "name": "register_count",
            "type": "int",
            "purpose": "The number of registers (unused)."
          }
        ],
        "return": {
          "type": "int",
          "description": "The number of padding slots (always 0)."
        },
        "dependencies": []
      },
      "code": "int BuiltinContinuationFrameConstants::PaddingSlotCount(int register_count) {\n  USE(register_count);\n  return 0;\n}"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "StackGuardFrameSize",
        "parent": "MaglevFrame",
        "about": "Determines the size of the stack guard frame for Maglev frames (not supported on ARM).",
        "logic": "Calls UNREACHABLE() as Maglev frames are not currently used on ARM.",
        "parameters": [
          {
            "name": "register_input_count",
            "type": "int",
            "purpose": "The number of register inputs (unused)."
          }
        ],
        "return": {
          "type": "intptr_t",
          "description": "This function never returns as it always calls UNREACHABLE()."
        },
        "dependencies": []
      },
      "code": "// static\nintptr_t MaglevFrame::StackGuardFrameSize(int register_input_count) {\n  USE(register_input_count);\n  UNREACHABLE();\n}"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/arm/frame-constants-arm.cc"
}