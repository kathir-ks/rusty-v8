{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-debug.h",
    "file_name": "v8-debug.h",
    "language": "cpp",
    "purpose": "Declares the StackFrame and StackTrace classes for debugging JavaScript code within V8."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes standard C++ integer types and V8-specific headers."
    },
    "code": "#include <stdint.h>\n\n            #include \"v8-script.h\"  // NOLINT(build/include_directory)\n            #include \"v8config.h\"   // NOLINT(build/include_directory)"
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "StackFrame",
        "about": "Represents a single JavaScript stack frame.",
        "attributes": [],
        "dependencies": [
          "Location",
          "String"
        ]
      },
      "code": "class V8_EXPORT StackFrame {\n            public:\n            /**\n             * Returns the source location, 0-based, for the associated function call.\n             */\n            Location GetLocation() const;\n\n            /**\n             * Returns the number, 1-based, of the line for the associate function call.\n             * This method will return Message::kNoLineNumberInfo if it is unable to\n             * retrieve the line number, or if kLineNumber was not passed as an option\n             * when capturing the StackTrace.\n             */\n            int GetLineNumber() const { return GetLocation().GetLineNumber() + 1; }\n\n            /**\n             * Returns the 1-based column offset on the line for the associated function\n             * call.\n             * This method will return Message::kNoColumnInfo if it is unable to retrieve\n             * the column number, or if kColumnOffset was not passed as an option when\n             * capturing the StackTrace.\n             */\n            int GetColumn() const { return GetLocation().GetColumnNumber() + 1; }\n\n            /**\n             * Returns zero based source position (character offset) for the associated\n             * function.\n             */\n            int GetSourcePosition() const;\n\n            /**\n             * Returns the id of the script for the function for this StackFrame.\n             * This method will return Message::kNoScriptIdInfo if it is unable to\n             * retrieve the script id, or if kScriptId was not passed as an option when\n             * capturing the StackTrace.\n             */\n            int GetScriptId() const;\n\n            /**\n             * Returns the name of the resource that contains the script for the\n             * function for this StackFrame.\n             */\n            Local<String> GetScriptName() const;\n\n            /**\n             * Returns the name of the resource that contains the script for the\n             * function for this StackFrame or sourceURL value if the script name\n             * is undefined and its source ends with //# sourceURL=... string or\n             * deprecated //@ sourceURL=... string.\n             */\n            Local<String> GetScriptNameOrSourceURL() const;\n\n            /**\n             * Returns the source of the script for the function for this StackFrame.\n             */\n            Local<String> GetScriptSource() const;\n\n            /**\n             * Returns the source mapping URL (if one is present) of the script for\n             * the function for this StackFrame.\n             */\n            Local<String> GetScriptSourceMappingURL() const;\n\n            /**\n             * Returns the name of the function associated with this stack frame.\n             */\n            Local<String> GetFunctionName() const;\n\n            /**\n             * Returns whether or not the associated function is compiled via a call to\n             * eval().\n             */\n            bool IsEval() const;\n\n            /**\n             * Returns whether or not the associated function is called as a\n             * constructor via \"new\".\n             */\n            bool IsConstructor() const;\n\n            /**\n             * Returns whether or not the associated functions is defined in wasm.\n             */\n            bool IsWasm() const;\n\n            /**\n             * Returns whether or not the associated function is defined by the user.\n             */\n            bool IsUserJavaScript() const;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "StackTrace",
        "about": "Represents a JavaScript stack trace.",
        "attributes": [],
        "dependencies": [
          "StackFrame",
          "Isolate",
          "String"
        ]
      },
      "code": "class V8_EXPORT StackTrace {\n            public:\n            /**\n             * Flags that determine what information is placed captured for each\n             * StackFrame when grabbing the current stack trace.\n             * Note: these options are deprecated and we always collect all available\n             * information (kDetailed).\n             */\n            enum StackTraceOptions {\n                kLineNumber = 1,\n                kColumnOffset = 1 << 1 | kLineNumber,\n                kScriptName = 1 << 2,\n                kFunctionName = 1 << 3,\n                kIsEval = 1 << 4,\n                kIsConstructor = 1 << 5,\n                kScriptNameOrSourceURL = 1 << 6,\n                kScriptId = 1 << 7,\n                kExposeFramesAcrossSecurityOrigins = 1 << 8,\n                kOverview = kLineNumber | kColumnOffset | kScriptName | kFunctionName,\n                kDetailed = kOverview | kIsEval | kIsConstructor | kScriptNameOrSourceURL\n            };\n\n            /**\n             * Returns the (unique) ID of this stack trace.\n             */\n            int GetID() const;\n\n            /**\n             * Returns a StackFrame at a particular index.\n             */\n            Local<StackFrame> GetFrame(Isolate* isolate, uint32_t index) const;\n\n            /**\n             * Returns the number of StackFrames.\n             */\n            int GetFrameCount() const;\n\n            /**\n             * Grab a snapshot of the current JavaScript execution stack.\n             *\n             * \\param frame_limit The maximum number of stack frames we want to capture.\n             * \\param options Enumerates the set of things we will capture for each\n             *   StackFrame.\n             */\n            static Local<StackTrace> CurrentStackTrace(\n                Isolate* isolate, int frame_limit, StackTraceOptions options = kDetailed);\n\n            /**\n             * Returns the first valid script name or source URL starting at the top of\n             * the JS stack. The returned string is either an empty handle if no script\n             * name/url was found or a non-zero-length string.\n             *\n             * This method is equivalent to calling StackTrace::CurrentStackTrace and\n             * walking the resulting frames from the beginning until a non-empty script\n             * name/url is found. The difference is that this method won't allocate\n             * a stack trace.\n             */\n            static Local<String> CurrentScriptNameOrSourceURL(Isolate* isolate);\n            };"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Isolate",
        "about": "Represents an isolated instance of the V8 JavaScript engine."
      },
      "code": "class Isolate;",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "String",
        "about": "Represents a JavaScript string."
      },
      "code": "class String;",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Location",
        "about": "Represents the location in the source code."
      },
      "code": "class Location {\n                public:\n                    int GetLineNumber() const;\n                    int GetColumnNumber() const;\n                };",
      "type": "class"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-debug.h"
}