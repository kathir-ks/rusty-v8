{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/strings/char-predicates.h",
    "file_name": "char-predicates.h",
    "language": "cpp",
    "purpose": "Defines inline functions for Unicode character predicates used in lexical analysis, conforming to ECMA-262 standards."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary headers for string manipulation and Unicode character handling."
    },
    "code": "#include \"src/base/strings.h\"\n#include \"src/strings/unicode.h\""
  },
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "AsciiAlphaToLower",
        "about": "Converts an ASCII alphabetic character to lowercase.",
        "logic": "Presumably performs a simple arithmetic operation to convert uppercase ASCII characters to lowercase. The exact implementation is not visible.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to convert."
          }
        ],
        "return": {
          "type": "int",
          "description": "The lowercase version of the character, or the original character if it's not an uppercase ASCII letter."
        },
        "dependencies": []
      },
      "code": "inline constexpr int AsciiAlphaToLower(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsCarriageReturn",
        "about": "Checks if a character is a carriage return character.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a carriage return, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsCarriageReturn(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsLineFeed",
        "about": "Checks if a character is a line feed character.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a line feed, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsLineFeed(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsAsciiIdentifier",
        "about": "Checks if a character is a valid ASCII identifier character.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a valid ASCII identifier character, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsAsciiIdentifier(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsAlphaNumeric",
        "about": "Checks if a character is an alphanumeric character.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is alphanumeric, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsAlphaNumeric(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsDecimalDigit",
        "about": "Checks if a character is a decimal digit.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a decimal digit, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsDecimalDigit(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsHexDigit",
        "about": "Checks if a character is a hexadecimal digit.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a hexadecimal digit, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsHexDigit(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsOctalDigit",
        "about": "Checks if a character is an octal digit.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is an octal digit, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsOctalDigit(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsBinaryDigit",
        "about": "Checks if a character is a binary digit.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a binary digit, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsBinaryDigit(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsRegExpWord",
        "about": "Checks if a character is a regular expression word character.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a regular expression word character, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsRegExpWord(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsAsciiLower",
        "about": "Checks if a character is an ASCII lowercase letter.",
        "parameters": [
          {
            "name": "ch",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is an ASCII lowercase letter, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsAsciiLower(base::uc32 ch);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsAsciiUpper",
        "about": "Checks if a character is an ASCII uppercase letter.",
        "parameters": [
          {
            "name": "ch",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is an ASCII uppercase letter, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline constexpr bool IsAsciiUpper(base::uc32 ch);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "ToAsciiUpper",
        "about": "Converts an ASCII character to uppercase.",
        "parameters": [
          {
            "name": "ch",
            "type": "base::uc32",
            "purpose": "The character to convert."
          }
        ],
        "return": {
          "type": "base::uc32",
          "description": "The uppercase version of the ASCII character."
        },
        "dependencies": []
      },
      "code": "inline constexpr base::uc32 ToAsciiUpper(base::uc32 ch);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "ToAsciiLower",
        "about": "Converts an ASCII character to lowercase.",
        "parameters": [
          {
            "name": "ch",
            "type": "base::uc32",
            "purpose": "The character to convert."
          }
        ],
        "return": {
          "type": "base::uc32",
          "description": "The lowercase version of the ASCII character."
        },
        "dependencies": []
      },
      "code": "inline constexpr base::uc32 ToAsciiLower(base::uc32 ch);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsIdentifierStart",
        "about": "Checks if a character can start an identifier, as defined by ECMAScript.",
        "logic": "Checks Unicode categories 'Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl', '_', '$' and '\\', excluding properties 'Pattern_Syntax' or 'Pattern_White_Space'.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character can start an identifier, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline bool IsIdentifierStart(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsIdentifierStartSlow",
        "about": "Checks if a character can start an identifier, with I18N support or a fallback for non-BMP characters.",
        "logic": "With I18N, uses `unibrow::ID_Start::Is(c)`. Without I18N, only BMP characters are supported.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character can start an identifier, false otherwise."
        },
        "dependencies": [
          "unibrow::ID_Start::Is"
        ]
      },
      "code": "#ifdef V8_INTL_SUPPORT\nV8_EXPORT_PRIVATE bool IsIdentifierStartSlow(base::uc32 c);\n#else\ninline bool IsIdentifierStartSlow(base::uc32 c) {\n  // Non-BMP characters are not supported without I18N.\n  return (c <= 0xFFFF) ? unibrow::ID_Start::Is(c) : false;\n}\n#endif"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsIdentifierPart",
        "about": "Checks if a character can be part of an identifier, as defined by ECMAScript.",
        "logic": "Includes ID_Start, categories 'Mn', 'Mc', 'Nd', 'Pc', and characters \\u200c and \\u200d, excluding properties 'Pattern_Syntax' or 'Pattern_White_Space'.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character can be part of an identifier, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline bool IsIdentifierPart(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsIdentifierPartSlow",
        "about": "Checks if a character can be part of an identifier, with I18N support or a fallback for non-BMP characters.",
        "logic": "With I18N, uses `unibrow::ID_Continue::Is(c)`. Without I18N, only BMP characters are supported.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character can be part of an identifier, false otherwise."
        },
        "dependencies": [
          "unibrow::ID_Start::Is",
          "unibrow::ID_Continue::Is"
        ]
      },
      "code": "#ifdef V8_INTL_SUPPORT\nV8_EXPORT_PRIVATE bool IsIdentifierPartSlow(base::uc32 c);\n#else\ninline bool IsIdentifierPartSlow(base::uc32 c) {\n  // Non-BMP charaacters are not supported without I18N.\n  if (c <= 0xFFFF) {\n    return unibrow::ID_Start::Is(c) || unibrow::ID_Continue::Is(c);\n  }\n  return false;\n}\n#endif"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsWhiteSpace",
        "about": "Checks if a character is a whitespace character, as defined by ES6.",
        "logic": "Includes all code points of Unicode category 'Zs', \\u0009, \\u000b, \\u000c, and \\ufeff.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a whitespace character, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline bool IsWhiteSpace(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsWhiteSpaceSlow",
        "about": "Checks if a character is a whitespace character, with I18N support or a fallback.",
        "logic": "With I18N, uses `unibrow::WhiteSpace::Is(c)`. Without I18N, relies on the unibrow data.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a whitespace character, false otherwise."
        },
        "dependencies": [
          "unibrow::WhiteSpace::Is"
        ]
      },
      "code": "#ifdef V8_INTL_SUPPORT\nV8_EXPORT_PRIVATE bool IsWhiteSpaceSlow(base::uc32 c);\n#else\ninline bool IsWhiteSpaceSlow(base::uc32 c) {\n  return unibrow::WhiteSpace::Is(c);\n}\n#endif"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsWhiteSpaceOrLineTerminator",
        "about": "Checks if a character is a whitespace or line terminator character, according to ES6.",
        "logic": "Includes all the characters with Unicode category 'Z' (= Zs+Zl+Zp) as well as \\u0009 - \\u000d and \\ufeff.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a whitespace or line terminator character, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline bool IsWhiteSpaceOrLineTerminator(base::uc32 c);"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsWhiteSpaceOrLineTerminatorSlow",
        "about": "Checks if a character is a whitespace or line terminator character, using the 'slow' versions.",
        "logic": "Combines the results of IsWhiteSpaceSlow and unibrow::IsLineTerminator.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The character to check."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the character is a whitespace or line terminator character, false otherwise."
        },
        "dependencies": [
          "IsWhiteSpaceSlow",
          "unibrow::IsLineTerminator"
        ]
      },
      "code": "inline bool IsWhiteSpaceOrLineTerminatorSlow(base::uc32 c) {\n  return IsWhiteSpaceSlow(c) || unibrow::IsLineTerminator(c);\n}"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "IsLineTerminatorSequence",
        "about": "Checks if a sequence of two characters is a line terminator sequence.",
        "parameters": [
          {
            "name": "c",
            "type": "base::uc32",
            "purpose": "The first character in the sequence."
          },
          {
            "name": "next",
            "type": "base::uc32",
            "purpose": "The second character in the sequence."
          }
        ],
        "return": {
          "type": "bool",
          "description": "True if the sequence is a line terminator sequence, false otherwise."
        },
        "dependencies": []
      },
      "code": "inline bool IsLineTerminatorSequence(base::uc32 c, base::uc32 next);"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "interface",
        "name": "unibrow::ID_Start",
        "about": "Interface to check if a unicode character is a valid Identifier Start",
        "methods": [
          {
            "name": "Is",
            "parameters": [
              {
                "name": "c",
                "type": "base::uc32"
              }
            ],
            "return": "bool",
            "purpose": "Checks if the character is a valid identifier start"
          }
        ],
        "dependencies": []
      },
      "code": "namespace unibrow {\n                    struct ID_Start {\n                        static bool Is(base::uc32 c);\n                    };\n                }",
      "type": "interface"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "interface",
        "name": "unibrow::ID_Continue",
        "about": "Interface to check if a unicode character is a valid Identifier Continue",
        "methods": [
          {
            "name": "Is",
            "parameters": [
              {
                "name": "c",
                "type": "base::uc32"
              }
            ],
            "return": "bool",
            "purpose": "Checks if the character is a valid identifier continue"
          }
        ],
        "dependencies": []
      },
      "code": "namespace unibrow {\n                    struct ID_Continue {\n                        static bool Is(base::uc32 c);\n                    };\n                }",
      "type": "interface"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "interface",
        "name": "unibrow::WhiteSpace",
        "about": "Interface to check if a unicode character is whitespace",
        "methods": [
          {
            "name": "Is",
            "parameters": [
              {
                "name": "c",
                "type": "base::uc32"
              }
            ],
            "return": "bool",
            "purpose": "Checks if the character is whitespace"
          }
        ],
        "dependencies": []
      },
      "code": "namespace unibrow {\n                    struct WhiteSpace {\n                        static bool Is(base::uc32 c);\n                    };\n                }",
      "type": "interface"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "interface",
        "name": "unibrow::IsLineTerminator",
        "about": "Interface to check if a unicode character is a line terminator",
        "methods": [],
        "dependencies": []
      },
      "code": "namespace unibrow {\n                    bool IsLineTerminator(base::uc32 c);\n                }",
      "type": "interface"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/strings/char-predicates.h"
}