{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/bigint/div-helpers.cc",
    "file_name": "div-helpers.cc",
    "language": "cpp",
    "purpose": "Provides helper functions for division operations on BigInts."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary headers for BigInt division helpers and internal BigInt representation."
    },
    "code": "#include \"src/bigint/div-helpers.h\"\n\n#include \"src/bigint/bigint-internal.h\""
  },
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "Copy",
        "parent": "",
        "about": "Copies the digits from one BigInt representation to another.",
        "logic": "Iterates through the digits of the source BigInt (X) and copies them to the destination BigInt (Z). If the destination BigInt has more allocated space, the remaining digits are set to 0.",
        "parameters": [
          {
            "name": "Z",
            "type": "RWDigits",
            "purpose": "The destination BigInt to copy to."
          },
          {
            "name": "X",
            "type": "Digits",
            "purpose": "The source BigInt to copy from."
          }
        ],
        "return": {
          "type": "void",
          "description": "No return value."
        },
        "dependencies": []
      },
      "code": "namespace {\n\nvoid Copy(RWDigits Z, Digits X) {\n  if (Z == X) return;\n  int i = 0;\n  for (; i < X.len(); i++) Z[i] = X[i];\n  for (; i < Z.len(); i++) Z[i] = 0;\n}\n\n}  // namespace"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "LeftShift",
        "parent": "",
        "about": "Performs a left bit shift on a BigInt.",
        "logic": "Shifts the digits of the BigInt X to the left by 'shift' bits. It handles carries between digits.  If Z has more digits than X, remaining digits of Z are set to 0.",
        "parameters": [
          {
            "name": "Z",
            "type": "RWDigits",
            "purpose": "The BigInt to store the shifted result."
          },
          {
            "name": "X",
            "type": "Digits",
            "purpose": "The BigInt to shift."
          },
          {
            "name": "shift",
            "type": "int",
            "purpose": "The number of bits to shift."
          }
        ],
        "return": {
          "type": "void",
          "description": "No return value."
        },
        "dependencies": [
          "Copy"
        ]
      },
      "code": "// Z := X << shift\n// Z and X may alias for an in-place shift.\nvoid LeftShift(RWDigits Z, Digits X, int shift) {\n  DCHECK(shift >= 0);\n  DCHECK(shift < kDigitBits);\n  DCHECK(Z.len() >= X.len());\n  if (shift == 0) return Copy(Z, X);\n  digit_t carry = 0;\n  int i = 0;\n  for (; i < X.len(); i++) {\n    digit_t d = X[i];\n    Z[i] = (d << shift) | carry;\n    carry = d >> (kDigitBits - shift);\n  }\n  if (i < Z.len()) {\n    Z[i++] = carry;\n  } else {\n    DCHECK(carry == 0);\n  }\n  for (; i < Z.len(); i++) Z[i] = 0;\n}"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "RightShift",
        "parent": "",
        "about": "Performs a right bit shift on a BigInt.",
        "logic": "Shifts the digits of the BigInt X to the right by 'shift' bits. It handles carries between digits.  Normalization is called on input X.  If Z has more digits than X, remaining digits of Z are set to 0.",
        "parameters": [
          {
            "name": "Z",
            "type": "RWDigits",
            "purpose": "The BigInt to store the shifted result."
          },
          {
            "name": "X",
            "type": "Digits",
            "purpose": "The BigInt to shift."
          },
          {
            "name": "shift",
            "type": "int",
            "purpose": "The number of bits to shift."
          }
        ],
        "return": {
          "type": "void",
          "description": "No return value."
        },
        "dependencies": [
          "Copy"
        ]
      },
      "code": "// Z := X >> shift\n// Z and X may alias for an in-place shift.\nvoid RightShift(RWDigits Z, Digits X, int shift) {\n  DCHECK(shift >= 0);\n  DCHECK(shift < kDigitBits);\n  X.Normalize();\n  DCHECK(Z.len() >= X.len());\n  if (shift == 0) return Copy(Z, X);\n  int i = 0;\n  if (X.len() > 0) {\n    digit_t carry = X[0] >> shift;\n    int last = X.len() - 1;\n    for (; i < last; i++) {\n      digit_t d = X[i + 1];\n      Z[i] = (d << (kDigitBits - shift)) | carry;\n      carry = d >> shift;\n    }\n    Z[i++] = carry;\n  }\n  for (; i < Z.len(); i++) Z[i] = 0;\n}"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/bigint/div-helpers.cc"
}