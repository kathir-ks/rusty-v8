{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/embedded/embedded-data-inl.h",
    "file_name": "embedded-data-inl.h",
    "language": "cpp",
    "purpose": "Inline implementations for the EmbeddedData class, providing access to embedded instruction and metadata within the V8 snapshot."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes the header file for the EmbeddedData class, defining its structure and interface."
    },
    "code": "#include \"src/snapshot/embedded/embedded-data.h\""
  },
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "InstructionStartOf",
        "parent": "EmbeddedData",
        "about": "Returns the starting address of the instruction code for a given Builtin.",
        "logic": "Calculates the address by adding the instruction offset from the LayoutDescription to the raw code pointer.",
        "parameters": [
          {
            "name": "builtin",
            "type": "Builtin",
            "purpose": "The Builtin enum value identifying the code to retrieve."
          }
        ],
        "return": {
          "type": "Address",
          "description": "The starting address of the instruction code."
        },
        "dependencies": [
          "Builtins",
          "LayoutDescription"
        ]
      },
      "code": "Address EmbeddedData::InstructionStartOf(Builtin builtin) const {\n              DCHECK(Builtins::IsBuiltinId(builtin));\n              const struct LayoutDescription& desc = LayoutDescription(builtin);\n              const uint8_t* result = RawCode() + desc.instruction_offset;\n              DCHECK_LT(result, code_ + code_size_);\n              return reinterpret_cast<Address>(result);\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "InstructionEndOf",
        "parent": "EmbeddedData",
        "about": "Returns the ending address of the instruction code for a given Builtin.",
        "logic": "Calculates the address by adding the instruction offset and length from the LayoutDescription to the raw code pointer.",
        "parameters": [
          {
            "name": "builtin",
            "type": "Builtin",
            "purpose": "The Builtin enum value identifying the code to retrieve."
          }
        ],
        "return": {
          "type": "Address",
          "description": "The ending address of the instruction code."
        },
        "dependencies": [
          "Builtins",
          "LayoutDescription"
        ]
      },
      "code": "Address EmbeddedData::InstructionEndOf(Builtin builtin) const {\n              DCHECK(Builtins::IsBuiltinId(builtin));\n              const struct LayoutDescription& desc = LayoutDescription(builtin);\n              const uint8_t* result =\n                  RawCode() + desc.instruction_offset + desc.instruction_length;\n              DCHECK_LT(result, code_ + code_size_);\n              return reinterpret_cast<Address>(result);\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "InstructionSizeOf",
        "parent": "EmbeddedData",
        "about": "Returns the size of the instruction code for a given Builtin.",
        "logic": "Retrieves the instruction length from the LayoutDescription.",
        "parameters": [
          {
            "name": "builtin",
            "type": "Builtin",
            "purpose": "The Builtin enum value identifying the code to retrieve."
          }
        ],
        "return": {
          "type": "uint32_t",
          "description": "The size of the instruction code in bytes."
        },
        "dependencies": [
          "Builtins",
          "LayoutDescription"
        ]
      },
      "code": "uint32_t EmbeddedData::InstructionSizeOf(Builtin builtin) const {\n              DCHECK(Builtins::IsBuiltinId(builtin));\n              const struct LayoutDescription& desc = LayoutDescription(builtin);\n              return desc.instruction_length;\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "MetadataStartOf",
        "parent": "EmbeddedData",
        "about": "Returns the starting address of the metadata for a given Builtin.",
        "logic": "Calculates the address by adding the metadata offset from the LayoutDescription to the raw metadata pointer.",
        "parameters": [
          {
            "name": "builtin",
            "type": "Builtin",
            "purpose": "The Builtin enum value identifying the metadata to retrieve."
          }
        ],
        "return": {
          "type": "Address",
          "description": "The starting address of the metadata."
        },
        "dependencies": [
          "Builtins",
          "LayoutDescription"
        ]
      },
      "code": "Address EmbeddedData::MetadataStartOf(Builtin builtin) const {\n              DCHECK(Builtins::IsBuiltinId(builtin));\n              const struct LayoutDescription& desc = LayoutDescription(builtin);\n              const uint8_t* result = RawMetadata() + desc.metadata_offset;\n              DCHECK_LE(desc.metadata_offset, data_size_);\n              return reinterpret_cast<Address>(result);\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "InstructionStartOfBytecodeHandlers",
        "parent": "EmbeddedData",
        "about": "Returns the starting address of the instruction code for the bytecode handlers.",
        "logic": "Calls InstructionStartOf with the Builtin::kFirstBytecodeHandler enum value.",
        "parameters": [],
        "return": {
          "type": "Address",
          "description": "The starting address of the bytecode handlers instruction code."
        },
        "dependencies": [
          "InstructionStartOf"
        ]
      },
      "code": "Address EmbeddedData::InstructionStartOfBytecodeHandlers() const {\n              return InstructionStartOf(Builtin::kFirstBytecodeHandler);\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "InstructionEndOfBytecodeHandlers",
        "parent": "EmbeddedData",
        "about": "Returns the ending address of the instruction code for the bytecode handlers.",
        "logic": "Calculates the end address based on the code size.  Includes trailing padding.",
        "parameters": [],
        "return": {
          "type": "Address",
          "description": "The ending address of the bytecode handlers instruction code."
        },
        "dependencies": []
      },
      "code": "Address EmbeddedData::InstructionEndOfBytecodeHandlers() const {\n              static_assert(Builtins::kBytecodeHandlersAreSortedLast);\n              // Note this also includes trailing padding, but that's fine for our purposes.\n              return reinterpret_cast<Address>(code_ + code_size_);\n            }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "method",
        "name": "PaddedInstructionSizeOf",
        "parent": "EmbeddedData",
        "about": "Returns the padded size of the instruction code for a given Builtin.",
        "logic": "Retrieves the unpadded instruction size and then pads and aligns the size.",
        "parameters": [
          {
            "name": "builtin",
            "type": "Builtin",
            "purpose": "The Builtin enum value identifying the code to retrieve."
          }
        ],
        "return": {
          "type": "uint32_t",
          "description": "The padded size of the instruction code in bytes."
        },
        "dependencies": [
          "InstructionSizeOf",
          "PadAndAlignCode"
        ]
      },
      "code": "uint32_t EmbeddedData::PaddedInstructionSizeOf(Builtin builtin) const {\n              uint32_t size = InstructionSizeOf(builtin);\n              CHECK_NE(size, 0);\n              return PadAndAlignCode(size);\n            }"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "EmbeddedData",
        "about": "Provides access to embedded data in the V8 snapshot."
      },
      "code": "class EmbeddedData {\n                public:\n                    Address InstructionStartOf(Builtin builtin) const;\n                    Address InstructionEndOf(Builtin builtin) const;\n                    uint32_t InstructionSizeOf(Builtin builtin) const;\n                    Address MetadataStartOf(Builtin builtin) const;\n                    Address InstructionStartOfBytecodeHandlers() const;\n                    Address InstructionEndOfBytecodeHandlers() const;\n                    uint32_t PaddedInstructionSizeOf(Builtin builtin) const;\n                private:\n                    const uint8_t* code_;\n                    const uint8_t* data_;\n                    size_t code_size_;\n                    size_t data_size_;\n                };",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "interface",
        "name": "Builtins",
        "about": "Provides an enum of Builtin identifiers."
      },
      "code": "class Builtins {\n                public:\n                    enum Builtin {\n                        kFirstBytecodeHandler,\n                        kBytecodeHandlersAreSortedLast\n                    };\n                    static bool IsBuiltinId(Builtin builtin);\n                };",
      "type": "interface"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "struct",
        "name": "LayoutDescription",
        "about": "Describes the layout of embedded data for a given Builtin."
      },
      "code": "struct LayoutDescription {\n                    uint32_t instruction_offset;\n                    uint32_t instruction_length;\n                    uint32_t metadata_offset;\n                };",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "LayoutDescription",
        "about": "Retrieves the LayoutDescription for a given Builtin."
      },
      "code": "const struct LayoutDescription& LayoutDescription(Builtin builtin);",
      "type": "func"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "PadAndAlignCode",
        "about": "Pads and aligns the code size."
      },
      "code": "uint32_t PadAndAlignCode(uint32_t size);",
      "type": "func"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/embedded/embedded-data-inl.h"
}