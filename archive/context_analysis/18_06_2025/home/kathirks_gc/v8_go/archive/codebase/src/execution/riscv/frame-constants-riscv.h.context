{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/riscv/frame-constants-riscv.h",
    "file_name": "frame-constants-riscv.h",
    "language": "cpp",
    "purpose": "Defines constants related to stack frame layout for the RISC-V architecture in the V8 JavaScript engine.  These constants are used for accessing data within different types of stack frames."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary headers for bit manipulation, macros, register definitions, frame constants, and WebAssembly Liftoff assembler definitions."
    },
    "code": "#include \"src/base/bits.h\"\n            #include \"src/base/macros.h\"\n            #include \"src/codegen/register.h\"\n            #include \"src/execution/frame-constants.h\"\n            #include \"src/wasm/baseline/liftoff-assembler-defs.h\""
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "EntryFrameConstants",
        "extends": "AllStatic",
        "about": "Defines constants related to the entry frame, used when entering JavaScript from C++ (JSEntry).",
        "attributes": [],
        "dependencies": []
      },
      "code": "class EntryFrameConstants : public AllStatic {\n            public:\n            // This is the offset to where JSEntry pushes the current value of\n            // Isolate::c_entry_fp onto the stack.\n            static constexpr int kNextExitFrameFPOffset = -3 * kSystemPointerSize;\n            // The offsets for storing the FP and PC of fast API calls.\n            static constexpr int kNextFastCallFrameFPOffset =\n                kNextExitFrameFPOffset - kSystemPointerSize;\n            static constexpr int kNextFastCallFramePCOffset =\n                kNextFastCallFrameFPOffset - kSystemPointerSize;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmLiftoffSetupFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants related to the setup frame for the WebAssembly Liftoff compiler. Used for spilling parameters.",
        "attributes": [],
        "dependencies": []
      },
      "code": "class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {\n            public:\n            // Number of gp parameters, without the instance.\n            // Note that {kNumberOfSavedGpParamRegs} = arraysize(wasm::kGpParamRegisters)\n            // - 1, {kNumberOfSavedFpParamRegs} = arraysize(wasm::kFpParamRegisters). Here\n            // we use immediate values instead to avoid circular references (introduced by\n            // linkage_location.h, issue: v8:14035) and resultant compilation errors.\n            static constexpr int kNumberOfSavedGpParamRegs = 6;\n            static constexpr int kNumberOfSavedFpParamRegs = 8;\n            static constexpr int kNumberOfSavedAllParamRegs =\n                kNumberOfSavedGpParamRegs + kNumberOfSavedFpParamRegs;\n            static constexpr int kInstanceSpillOffset =\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n            static constexpr int kParameterSpillsOffset[] = {\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(1), TYPED_FRAME_PUSHED_VALUE_OFFSET(2),\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(3), TYPED_FRAME_PUSHED_VALUE_OFFSET(4),\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(5), TYPED_FRAME_PUSHED_VALUE_OFFSET(6)};\n\n            // SP-relative.\n            static constexpr int kWasmInstanceDataOffset = 2 * kSystemPointerSize;\n            static constexpr int kDeclaredFunctionIndexOffset = 1 * kSystemPointerSize;\n            static constexpr int kNativeModuleOffset = 0;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmLiftoffFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants related to the standard frame for the WebAssembly Liftoff compiler.",
        "attributes": [],
        "dependencies": []
      },
      "code": "class WasmLiftoffFrameConstants : public TypedFrameConstants {\n            public:\n            static constexpr int kFeedbackVectorOffset = 3 * kSystemPointerSize;\n            static constexpr int kInstanceDataOffset = 2 * kSystemPointerSize;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmDebugBreakFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants related to the frame constructed by the WasmDebugBreak builtin, used for debugging WebAssembly code.",
        "attributes": [],
        "dependencies": []
      },
      "code": "class WasmDebugBreakFrameConstants : public TypedFrameConstants {\n            public:\n            static constexpr RegList kPushedGpRegs = wasm::kLiftoffAssemblerGpCacheRegs;\n\n            static constexpr DoubleRegList kPushedFpRegs =\n                wasm::kLiftoffAssemblerFpCacheRegs;\n\n            static constexpr int kNumPushedGpRegisters = kPushedGpRegs.Count();\n            static constexpr int kNumPushedFpRegisters = kPushedFpRegs.Count();\n\n            static constexpr int kLastPushedGpRegisterOffset =\n                -kFixedFrameSizeFromFp - kNumPushedGpRegisters * kSystemPointerSize;\n            static constexpr int kLastPushedFpRegisterOffset =\n                kLastPushedGpRegisterOffset - kNumPushedFpRegisters * kDoubleSize;\n\n            // Offsets are fp-relative.\n            static int GetPushedGpRegisterOffset(int reg_code) {\n                DCHECK_NE(0, kPushedGpRegs.bits() & (1 << reg_code));\n                uint32_t lower_regs =\n                    kPushedGpRegs.bits() & ((uint32_t{1} << reg_code) - 1);\n                return kLastPushedGpRegisterOffset +\n                    base::bits::CountPopulation(lower_regs) * kSystemPointerSize;\n            }\n\n            static int GetPushedFpRegisterOffset(int reg_code) {\n                DCHECK_NE(0, kPushedFpRegs.bits() & (1 << reg_code));\n                uint32_t lower_regs =\n                    kPushedFpRegs.bits() & ((uint32_t{1} << reg_code) - 1);\n                return kLastPushedFpRegisterOffset +\n                    base::bits::CountPopulation(lower_regs) * kDoubleSize;\n            }\n            };"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "AllStatic",
        "about": "Base class enforcing all methods to be static."
      },
      "code": "class AllStatic {};",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "TypedFrameConstants",
        "about": "Base class for typed frame constants."
      },
      "code": "class TypedFrameConstants {};",
      "type": "class"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/riscv/frame-constants-riscv.h"
}