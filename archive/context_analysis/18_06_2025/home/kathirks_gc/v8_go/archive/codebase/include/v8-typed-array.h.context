{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-typed-array.h",
    "file_name": "v8-typed-array.h",
    "language": "cpp",
    "purpose": "Declares the C++ API for TypedArrays in V8, including Uint8Array, Int16Array, Float32Array, etc. These classes provide a way to work with binary data in a more efficient and type-safe manner within JavaScript."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes standard library and V8 specific headers."
    },
    "code": "#include <limits>\n\n            #include \"v8-array-buffer.h\"  // NOLINT(build/include_directory)\n            #include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n            #include \"v8config.h\"         // NOLINT(build/include_directory)"
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "TypedArray",
        "extends": "ArrayBufferView",
        "about": "Base class for TypedArray instances, providing common functionality like determining the length of the array.",
        "attributes": [
          {
            "name": "kMaxByteLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed byte length for any TypedArray instance. Inherited from ArrayBuffer."
          }
        ],
        "dependencies": [
          "ArrayBufferView",
          "ArrayBuffer"
        ]
      },
      "code": "class V8_EXPORT TypedArray : public ArrayBufferView {\n            public:\n            /*\n             * The largest supported typed array byte size. Each subclass defines a\n             * type-specific kMaxLength for the maximum length that can be passed to New.\n             */\n            static constexpr size_t kMaxByteLength = ArrayBuffer::kMaxByteLength;\n\n            #ifdef V8_ENABLE_SANDBOX\n            static_assert(v8::TypedArray::kMaxByteLength <=\n                            v8::internal::kMaxSafeBufferSizeForSandbox);\n            #endif\n\n            /**\n             * Number of elements in this typed array\n             * (e.g. for Int16Array, |ByteLength|/2).\n             */\n            size_t Length();\n\n            V8_INLINE static TypedArray* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<TypedArray*>(value);\n            }\n\n            private:\n            TypedArray();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Uint8Array",
        "extends": "TypedArray",
        "about": "Represents an array of unsigned 8-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Uint8Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Uint8Array : public TypedArray {\n            public:\n            /*\n             * The largest Uint8Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(uint8_t);\n            static_assert(sizeof(uint8_t) == 1);\n\n            static Local<Uint8Array> New(Local<ArrayBuffer> array_buffer,\n                                        size_t byte_offset, size_t length);\n            static Local<Uint8Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                        size_t byte_offset, size_t length);\n            V8_INLINE static Uint8Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Uint8Array*>(value);\n            }\n\n            private:\n            Uint8Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Uint8ClampedArray",
        "extends": "TypedArray",
        "about": "Represents an array of unsigned 8-bit integers with clamping behavior (values are clamped to the range 0-255).",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Uint8ClampedArray instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Uint8ClampedArray : public TypedArray {\n            public:\n            /*\n             * The largest Uint8ClampedArray size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(uint8_t);\n            static_assert(sizeof(uint8_t) == 1);\n\n            static Local<Uint8ClampedArray> New(Local<ArrayBuffer> array_buffer,\n                                            size_t byte_offset, size_t length);\n            static Local<Uint8ClampedArray> New(\n                Local<SharedArrayBuffer> shared_array_buffer, size_t byte_offset,\n                size_t length);\n            V8_INLINE static Uint8ClampedArray* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Uint8ClampedArray*>(value);\n            }\n\n            private:\n            Uint8ClampedArray();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Int8Array",
        "extends": "TypedArray",
        "about": "Represents an array of signed 8-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for an Int8Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Int8Array : public TypedArray {\n            public:\n            /*\n             * The largest Int8Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(int8_t);\n            static_assert(sizeof(int8_t) == 1);\n\n            static Local<Int8Array> New(Local<ArrayBuffer> array_buffer,\n                                        size_t byte_offset, size_t length);\n            static Local<Int8Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                        size_t byte_offset, size_t length);\n            V8_INLINE static Int8Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Int8Array*>(value);\n            }\n\n            private:\n            Int8Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Uint16Array",
        "extends": "TypedArray",
        "about": "Represents an array of unsigned 16-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Uint16Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Uint16Array : public TypedArray {\n            public:\n            /*\n             * The largest Uint16Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(uint16_t);\n            static_assert(sizeof(uint16_t) == 2);\n\n            static Local<Uint16Array> New(Local<ArrayBuffer> array_buffer,\n                                        size_t byte_offset, size_t length);\n            static Local<Uint16Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                        size_t byte_offset, size_t length);\n            V8_INLINE static Uint16Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Uint16Array*>(value);\n            }\n\n            private:\n            Uint16Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Int16Array",
        "extends": "TypedArray",
        "about": "Represents an array of signed 16-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for an Int16Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Int16Array : public TypedArray {\n            public:\n            /*\n             * The largest Int16Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(int16_t);\n            static_assert(sizeof(int16_t) == 2);\n\n            static Local<Int16Array> New(Local<ArrayBuffer> array_buffer,\n                                        size_t byte_offset, size_t length);\n            static Local<Int16Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                        size_t byte_offset, size_t length);\n            V8_INLINE static Int16Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Int16Array*>(value);\n            }\n\n            private:\n            Int16Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Uint32Array",
        "extends": "TypedArray",
        "about": "Represents an array of unsigned 32-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Uint32Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Uint32Array : public TypedArray {\n            public:\n            /*\n             * The largest Uint32Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(uint32_t);\n            static_assert(sizeof(uint32_t) == 4);\n\n            static Local<Uint32Array> New(Local<ArrayBuffer> array_buffer,\n                                        size_t byte_offset, size_t length);\n            static Local<Uint32Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                        size_t byte_offset, size_t length);\n            V8_INLINE static Uint32Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Uint32Array*>(value);\n            }\n\n            private:\n            Uint32Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Int32Array",
        "extends": "TypedArray",
        "about": "Represents an array of signed 32-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for an Int32Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Int32Array : public TypedArray {\n            public:\n            /*\n             * The largest Int32Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(int32_t);\n            static_assert(sizeof(int32_t) == 4);\n\n            static Local<Int32Array> New(Local<ArrayBuffer> array_buffer,\n                                        size_t byte_offset, size_t length);\n            static Local<Int32Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                        size_t byte_offset, size_t length);\n            V8_INLINE static Int32Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Int32Array*>(value);\n            }\n\n            private:\n            Int32Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Float16Array",
        "extends": "TypedArray",
        "about": "Represents an array of 16-bit floating point numbers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Float16Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Float16Array : public TypedArray {\n            public:\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(uint16_t);\n\n            static Local<Float16Array> New(Local<ArrayBuffer> array_buffer,\n                                            size_t byte_offset, size_t length);\n            static Local<Float16Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                            size_t byte_offset, size_t length);\n            V8_INLINE static Float16Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Float16Array*>(value);\n            }\n\n            private:\n            Float16Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Float32Array",
        "extends": "TypedArray",
        "about": "Represents an array of 32-bit floating point numbers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Float32Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Float32Array : public TypedArray {\n            public:\n            /*\n             * The largest Float32Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(float);\n            static_assert(sizeof(float) == 4);\n\n            static Local<Float32Array> New(Local<ArrayBuffer> array_buffer,\n                                            size_t byte_offset, size_t length);\n            static Local<Float32Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                            size_t byte_offset, size_t length);\n            V8_INLINE static Float32Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Float32Array*>(value);\n            }\n\n            private:\n            Float32Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Float64Array",
        "extends": "TypedArray",
        "about": "Represents an array of 64-bit floating point numbers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a Float64Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT Float64Array : public TypedArray {\n            public:\n            /*\n             * The largest Float64Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(double);\n            static_assert(sizeof(double) == 8);\n\n            static Local<Float64Array> New(Local<ArrayBuffer> array_buffer,\n                                            size_t byte_offset, size_t length);\n            static Local<Float64Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                            size_t byte_offset, size_t length);\n            V8_INLINE static Float64Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<Float64Array*>(value);\n            }\n\n            private:\n            Float64Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "BigInt64Array",
        "extends": "TypedArray",
        "about": "Represents an array of signed 64-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a BigInt64Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT BigInt64Array : public TypedArray {\n            public:\n            /*\n             * The largest BigInt64Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(int64_t);\n            static_assert(sizeof(int64_t) == 8);\n\n            static Local<BigInt64Array> New(Local<ArrayBuffer> array_buffer,\n                                            size_t byte_offset, size_t length);\n            static Local<BigInt64Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                            size_t byte_offset, size_t length);\n            V8_INLINE static BigInt64Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<BigInt64Array*>(value);\n            }\n\n            private:\n            BigInt64Array();\n            static void CheckCast(Value* obj);\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "BigUint64Array",
        "extends": "TypedArray",
        "about": "Represents an array of unsigned 64-bit integers.",
        "attributes": [
          {
            "name": "kMaxLength",
            "type": "size_t",
            "access": "public",
            "purpose": "The maximum allowed length for a BigUint64Array instance, calculated based on kMaxByteLength of TypedArray."
          }
        ],
        "dependencies": [
          "TypedArray",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Local"
        ]
      },
      "code": "class V8_EXPORT BigUint64Array : public TypedArray {\n            public:\n            /*\n             * The largest BigUint64Array size that can be constructed using New.\n             */\n            static constexpr size_t kMaxLength =\n                TypedArray::kMaxByteLength / sizeof(uint64_t);\n            static_assert(sizeof(uint64_t) == 8);\n\n            static Local<BigUint64Array> New(Local<ArrayBuffer> array_buffer,\n                                            size_t byte_offset, size_t length);\n            static Local<BigUint64Array> New(Local<SharedArrayBuffer> shared_array_buffer,\n                                            size_t byte_offset, size_t length);\n            V8_INLINE static BigUint64Array* Cast(Value* value) {\n            #ifdef V8_ENABLE_CHECKS\n                CheckCast(value);\n            #endif\n                return static_cast<BigUint64Array*>(value);\n            }\n\n            private:\n            BigUint64Array();\n            static void CheckCast(Value* obj);\n            };"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "ArrayBufferView",
        "about": "Base class for views on ArrayBuffers."
      },
      "code": "class ArrayBufferView {};",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "ArrayBuffer",
        "about": "Represents a raw buffer of binary data."
      },
      "code": "class ArrayBuffer {\n                public:\n                  static constexpr size_t kMaxByteLength = 2147483647;\n                };",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "SharedArrayBuffer",
        "about": "Represents a raw buffer of binary data shared between threads."
      },
      "code": "class SharedArrayBuffer {};",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "template",
        "name": "Local",
        "about": "A smart pointer for V8 objects."
      },
      "code": "template <typename T> class Local {};",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "Value",
        "about": "The base class for all V8 values."
      },
      "code": "class Value {};",
      "type": "class"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-typed-array.h"
}