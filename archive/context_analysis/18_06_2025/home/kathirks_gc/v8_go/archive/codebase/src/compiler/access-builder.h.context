{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/access-builder.h",
    "file_name": "access-builder.h",
    "language": "cpp",
    "purpose": "Defines the AccessBuilder class, which provides static methods for constructing FieldAccess and ElementAccess descriptors used in simplified load/store operators.  These descriptors describe how to access fields and elements of objects in memory."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary headers for base types, compiler operators, write barriers, element kinds, and JS objects."
    },
    "code": "#include \"src/base/compiler-specific.h\"\n#include \"src/compiler/js-operator.h\"\n#include \"src/compiler/simplified-operator.h\"\n#include \"src/compiler/write-barrier-kind.h\"\n#include \"src/objects/elements-kind.h\"\n#include \"src/objects/js-objects.h\""
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "AccessBuilder",
        "extends": "AllStatic",
        "about": "A utility class providing static methods for constructing FieldAccess and ElementAccess descriptors.",
        "attributes": [],
        "dependencies": [
          "FieldAccess",
          "ElementAccess",
          "WriteBarrierKind",
          "ElementsKind",
          "MapRef",
          "MachineType",
          "JSDate::FieldIndex",
          "ExternalArrayType",
          "ForInMode"
        ]
      },
      "code": "class V8_EXPORT_PRIVATE AccessBuilder final\n    : public NON_EXPORTED_BASE(AllStatic) {\n public:\n  // ===========================================================================\n  // Access to external values (based on external references).\n\n  // Provides access to an IntPtr field identified by an external reference.\n  static FieldAccess ForExternalIntPtr();\n\n  // ===========================================================================\n  // Access to heap object fields and elements (based on tagged pointer).\n\n  // Provides access to HeapObject::map() field.\n  static FieldAccess ForMap(WriteBarrierKind write_barrier = kMapWriteBarrier);\n\n  // Provides access to HeapNumber::value() field.\n  static FieldAccess ForHeapNumberValue();\n  static FieldAccess ForHeapInt32Value();\n  static FieldAccess ForHeapInt32UpperValue();\n\n  // Provides access to HeapNumber::value() and Oddball::to_number_raw() fields.\n  // This is the same as ForHeapNumberValue, except it documents (and static\n  // asserts) that both inputs are valid.\n  static FieldAccess ForHeapNumberOrOddballOrHoleValue();\n\n  // Provides access to BigInt's bit field.\n  static FieldAccess ForBigIntBitfield();\n\n#ifdef BIGINT_NEEDS_PADDING\n  // Provides access to BigInt's 32 bit padding that is placed after the\n  // bitfield on 64 bit architectures without pointer compression.\n  static FieldAccess ForBigIntOptionalPadding();\n#endif\n\n  // Provides access to BigInt's least significant digit on 64 bit\n  // architectures. Do not use this on 32 bit architectures.\n  static FieldAccess ForBigIntLeastSignificantDigit64();\n\n  // Provides access to JSObject::properties() field.\n  static FieldAccess ForJSObjectPropertiesOrHash();\n\n  // Provides access to JSObject::properties() field for known pointers.\n  static FieldAccess ForJSObjectPropertiesOrHashKnownPointer();\n\n  // Provides access to JSObject::elements() field.\n  static FieldAccess ForJSObjectElements();\n\n  // Provides access to JSObject inobject property fields.\n  static FieldAccess ForJSObjectInObjectProperty(\n      MapRef map, int index,\n      MachineType machine_type = MachineType::AnyTagged());\n  static FieldAccess ForJSObjectOffset(\n      int offset, WriteBarrierKind write_barrier_kind = kFullWriteBarrier);\n\n  // Provides access to JSCollecton::table() field.\n  static FieldAccess ForJSCollectionTable();\n\n  // Provides access to JSCollectionIterator::table() field.\n  static FieldAccess ForJSCollectionIteratorTable();\n\n  // Provides access to JSCollectionIterator::index() field.\n  static FieldAccess ForJSCollectionIteratorIndex();\n\n  // Provides access to an ExternalPointer through the JSExternalObject::value()\n  // field.\n  static FieldAccess ForJSExternalObjectValue();\n\n#ifdef V8_ENABLE_SANDBOX\n  // Provides access to JSExternalObject::value() field.\n  static FieldAccess ForJSExternalObjectPointerHandle();\n#endif\n\n  // Provides access to JSFunction::prototype_or_initial_map() field.\n  static FieldAccess ForJSFunctionPrototypeOrInitialMap();\n\n  // Provides access to JSFunction::context() field.\n  static FieldAccess ForJSFunctionContext();\n\n  // Provides access to JSFunction::shared() field.\n  static FieldAccess ForJSFunctionSharedFunctionInfo();\n\n  // Provides access to JSFunction::feedback_cell() field.\n  static FieldAccess ForJSFunctionFeedbackCell();\n\n#ifdef V8_ENABLE_LEAPTIERING\n  // Provides access to JSFunction::dispatch_handle() field.\n  static FieldAccess ForJSFunctionDispatchHandleNoWriteBarrier();\n#else\n  // Provides access to JSFunction::code() field.\n  static FieldAccess ForJSFunctionCode();\n#endif  // V8_ENABLE_LEAPTIERING\n\n  // Provides access to JSBoundFunction::bound_target_function() field.\n  static FieldAccess ForJSBoundFunctionBoundTargetFunction();\n\n  // Provides access to JSBoundFunction::bound_this() field.\n  static FieldAccess ForJSBoundFunctionBoundThis();\n\n  // Provides access to JSBoundFunction::bound_arguments() field.\n  static FieldAccess ForJSBoundFunctionBoundArguments();\n\n  // Provides access to JSGeneratorObject::context() field.\n  static FieldAccess ForJSGeneratorObjectContext();\n\n  // Provides access to JSGeneratorObject::continuation() field.\n  static FieldAccess ForJSGeneratorObjectContinuation();\n\n  // Provides access to JSGeneratorObject::input_or_debug_pos() field.\n  static FieldAccess ForJSGeneratorObjectInputOrDebugPos();\n\n  // Provides access to JSGeneratorObject::parameters_and_registers() field.\n  static FieldAccess ForJSGeneratorObjectParametersAndRegisters();\n\n  // Provides access to JSGeneratorObject::function() field.\n  static FieldAccess ForJSGeneratorObjectFunction();\n\n  // Provides access to JSGeneratorObject::receiver() field.\n  static FieldAccess ForJSGeneratorObjectReceiver();\n\n  // Provides access to JSGeneratorObject::resume_mode() field.\n  static FieldAccess ForJSGeneratorObjectResumeMode();\n\n  // Provides access to JSAsyncFunctionObject::promise() field.\n  static FieldAccess ForJSAsyncFunctionObjectPromise();\n\n  // Provides access to JSAsyncGeneratorObject::queue() field.\n  static FieldAccess ForJSAsyncGeneratorObjectQueue();\n\n  // Provides access to JSAsyncGeneratorObject::is_awaiting() field.\n  static FieldAccess ForJSAsyncGeneratorObjectIsAwaiting();\n\n  // Provides access to JSArray::length() field.\n  static FieldAccess ForJSArrayLength(ElementsKind elements_kind);\n\n  // Provides access to JSArrayBuffer::bit_field() field.\n  static FieldAccess ForJSArrayBufferBitField();\n\n  // Provides access to JSArrayBuffer::byteLength() field.\n  static FieldAccess ForJSArrayBufferByteLength();\n\n  // Provides access to JSArrayBufferView::buffer() field.\n  static FieldAccess ForJSArrayBufferViewBuffer();\n\n  // Provides access to JSArrayBufferView::byteLength() field.\n  static FieldAccess ForJSArrayBufferViewByteLength();\n\n  // Provides access to JSArrayBufferView::byteOffset() field.\n  static FieldAccess ForJSArrayBufferViewByteOffset();\n\n  // Provides access to JSArrayBufferView::bitfield() field\n  static FieldAccess ForJSArrayBufferViewBitField();\n\n  // Provides access to JSTypedArray::length() field.\n  static FieldAccess ForJSTypedArrayLength();\n\n  // Provides access to JSTypedArray::byteLength() field.\n  static FieldAccess ForJSTypedArrayByteLength() {\n    return ForJSArrayBufferViewByteLength();\n  }\n\n  // Provides access to JSTypedArray::base_pointer() field.\n  static FieldAccess ForJSTypedArrayBasePointer();\n\n  // Provides access to JSTypedArray::external_pointer() field.\n  static FieldAccess ForJSTypedArrayExternalPointer();\n\n  // Provides access to JSDataView::data_pointer() field.\n  static FieldAccess ForJSDataViewDataPointer();\n\n  static FieldAccess ForJSDataViewByteLength() {\n    return ForJSArrayBufferViewByteLength();\n  }\n\n  // Provides access to JSDate::value() field.\n  static FieldAccess ForJSDateValue();\n\n  // Provides access to JSDate fields.\n  static FieldAccess ForJSDateField(JSDate::FieldIndex index);\n\n  // Provides access to JSIteratorResult::done() field.\n  static FieldAccess ForJSIteratorResultDone();\n\n  // Provides access to JSIteratorResult::value() field.\n  static FieldAccess ForJSIteratorResultValue();\n\n  static FieldAccess ForJSPrimitiveWrapperValue();\n\n  // Provides access to JSRegExp::data() field.\n  static FieldAccess ForJSRegExpData();\n\n  // Provides access to JSRegExp::flags() field.\n  static FieldAccess ForJSRegExpFlags();\n\n  // Provides access to JSRegExp::last_index() field.\n  static FieldAccess ForJSRegExpLastIndex();\n\n  // Provides access to JSRegExp::source() field.\n  static FieldAccess ForJSRegExpSource();\n\n  // Provides access to FixedArray::length() field.\n  static FieldAccess ForFixedArrayLength();\n\n  // Provides access to WeakFixedArray::length() field.\n  static FieldAccess ForWeakFixedArrayLength();\n\n  // Provides access to SloppyArgumentsElements::context() field.\n  static FieldAccess ForSloppyArgumentsElementsContext();\n\n  // Provides access to SloppyArgumentsElements::arguments() field.\n  static FieldAccess ForSloppyArgumentsElementsArguments();\n\n  // Provides access to PropertyArray::length() field.\n  static FieldAccess ForPropertyArrayLengthAndHash();\n\n  // Provides access to DescriptorArray::enum_cache() field.\n  static FieldAccess ForDescriptorArrayEnumCache();\n\n  // Provides access to Map::bit_field() byte.\n  static FieldAccess ForMapBitField();\n\n  // Provides access to Map::bit_field2() byte.\n  static FieldAccess ForMapBitField2();\n\n  // Provides access to Map::bit_field3() field.\n  static FieldAccess ForMapBitField3();\n\n  // Provides access to Map::descriptors() field.\n  static FieldAccess ForMapDescriptors();\n\n  // Provides access to Map::instance_type() field.\n  static FieldAccess ForMapInstanceType();\n\n  // Provides access to Map::prototype() field.\n  static FieldAccess ForMapPrototype();\n\n  // Provides access to Map::native_context() field.\n  static FieldAccess ForMapNativeContext();\n\n  // Provides access to Module::regular_exports() field.\n  static FieldAccess ForModuleRegularExports();\n\n  // Provides access to Module::regular_imports() field.\n  static FieldAccess ForModuleRegularImports();\n\n  // Provides access to Name::raw_hash_field() field.\n  static FieldAccess ForNameRawHashField();\n\n  // Provides access to FreeSpace::size() field\n  static FieldAccess ForFreeSpaceSize();\n\n  // Provides access to String::length() field.\n  static FieldAccess ForStringLength();\n\n  // Provides access to ConsString::first() field.\n  static FieldAccess ForConsStringFirst();\n\n  // Provides access to ConsString::second() field.\n  static FieldAccess ForConsStringSecond();\n\n  // Provides access to ThinString::actual() field.\n  static FieldAccess ForThinStringActual();\n\n  // Provides access to SlicedString::offset() field.\n  static FieldAccess ForSlicedStringOffset();\n\n  // Provides access to SlicedString::parent() field.\n  static FieldAccess ForSlicedStringParent();\n\n  // Provides access to ExternalString::resource_data() field.\n  static FieldAccess ForExternalStringResourceData();\n\n  // Provides access to SeqOneByteString characters.\n  static ElementAccess ForSeqOneByteStringCharacter();\n\n  // Provides access to SeqTwoByteString characters.\n  static ElementAccess ForSeqTwoByteStringCharacter();\n\n  // Provides access to JSArrayIterator::iterated_object() field.\n  static FieldAccess ForJSArrayIteratorIteratedObject();\n\n  // Provides access to JSArrayIterator::next_index() field.\n  static FieldAccess ForJSArrayIteratorNextIndex();\n\n  // Provides access to JSArrayIterator::kind() field.\n  static FieldAccess ForJSArrayIteratorKind();\n\n  // Provides access to JSStringIterator::string() field.\n  static FieldAccess ForJSStringIteratorString();\n\n  // Provides access to JSStringIterator::index() field.\n  static FieldAccess ForJSStringIteratorIndex();\n\n  // Provides access to Cell::value() field.\n  static FieldAccess ForCellValue();\n\n  // Provides access to arguments object fields.\n  static FieldAccess ForArgumentsLength();\n  static FieldAccess ForArgumentsCallee();\n\n  // Provides access to FixedArray slots.\n  static FieldAccess ForFixedArraySlot(\n      size_t index, WriteBarrierKind write_barrier_kind = kFullWriteBarrier);\n\n  static FieldAccess ForFeedbackVectorSlot(int index);\n\n  // Provides access to PropertyArray slots.\n  static FieldAccess ForPropertyArraySlot(int index);\n\n  // Provides access to ScopeInfo flags.\n  static FieldAccess ForScopeInfoFlags();\n\n  // Provides access to Context slots.\n  static FieldAccess ForContextSlot(size_t index);\n\n  // Provides access to Context slots that are known to be pointers.\n  static FieldAccess ForContextSlotKnownPointer(size_t index);\n\n  // Provides access to Context slots that are known to be Smis.\n  static FieldAccess ForContextSlotSmi(size_t index);\n\n  // Provides access to WeakFixedArray elements.\n  static ElementAccess ForWeakFixedArrayElement();\n  static FieldAccess ForWeakFixedArraySlot(int index);\n\n  // Provides access to FixedArray elements.\n  static ElementAccess ForFixedArrayElement();\n  static ElementAccess ForFixedArrayElement(ElementsKind kind);\n\n  // Provides access to SloppyArgumentsElements elements.\n  static ElementAccess ForSloppyArgumentsElementsMappedEntry();\n\n  // Provides access to FixedDoubleArray elements.\n  static ElementAccess ForFixedDoubleArrayElement();\n\n  // Provides access to EnumCache::keys() field.\n  static FieldAccess ForEnumCacheKeys();\n\n  // Provides access to EnumCache::indices() field.\n  static FieldAccess ForEnumCacheIndices();\n\n  // Provides access to Fixed{type}TypedArray and External{type}Array elements.\n  static ElementAccess ForTypedArrayElement(ExternalArrayType type,\n                                            bool is_external);\n\n  // Provides access to the for-in cache array.\n  static ElementAccess ForJSForInCacheArrayElement(ForInMode mode);\n\n  // Provides access to HashTable fields.\n  static FieldAccess ForHashTableBaseNumberOfElements();\n  static FieldAccess ForHashTableBaseNumberOfDeletedElement();\n  static FieldAccess ForHashTableBaseCapacity();\n\n  // Provides access to OrderedHashMapOrSet fields.\n  static FieldAccess ForOrderedHashMapOrSetNextTable();\n  static FieldAccess ForOrderedHashMapOrSetNumberOfBuckets();\n  static FieldAccess ForOrderedHashMapOrSetNumberOfElements();\n  static FieldAccess ForOrderedHashMapOrSetNumberOfDeletedElements();\n\n  // Provides access to OrderedHashMap elements.\n  static ElementAccess ForOrderedHashMapEntryValue();\n\n  // Provides access to Dictionary fields.\n  static FieldAccess ForDictionaryNextEnumerationIndex();\n  static FieldAccess ForDictionaryObjectHashIndex();\n\n  // Provides access to NameDictionary fields.\n  static FieldAccess ForNameDictionaryFlagsIndex();\n\n  // Provides access to FeedbackCell fields.\n  static FieldAccess ForFeedbackCellInterruptBudget();\n#ifdef V8_ENABLE_LEAPTIERING\n  static FieldAccess ForFeedbackCellDispatchHandleNoWriteBarrier();\n#endif  // V8_ENABLE_LEAPTIERING\n\n  // Provides access to a FeedbackVector fields.\n  static FieldAccess ForFeedbackVectorInvocationCount();\n  static FieldAccess ForFeedbackVectorFlags();\n  static FieldAccess ForFeedbackVectorClosureFeedbackCellArray();\n\n#if V8_ENABLE_WEBASSEMBLY\n  static FieldAccess ForWasmArrayLength();\n  static FieldAccess ForWasmDispatchTableLength();\n#endif\n\n  static FieldAccess ForContextSideProperty();\n\n private:\n  DISALLOW_IMPLICIT_CONSTRUCTORS(AccessBuilder);\n};"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "FieldAccess",
        "about": "A descriptor for accessing fields of objects."
      },
      "code": "class FieldAccess {};",
      "type": "class"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "ElementAccess",
        "about": "A descriptor for accessing elements of arrays or other indexed data structures."
      },
      "code": "class ElementAccess {};",
      "type": "class"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/access-builder.h"
}