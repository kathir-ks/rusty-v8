{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/s390/frame-constants-s390.cc",
    "file_name": "frame-constants-s390.cc",
    "language": "cpp",
    "purpose": "Defines frame-related constants and helper functions specific to the s390x architecture in the V8 JavaScript engine."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary header files for frame management, assembler operations, and code generation."
    },
    "code": "#include \"src/execution/s390/frame-constants-s390.h\"\n\n#include \"src/codegen/assembler-inl.h\"\n#include \"src/codegen/macro-assembler.h\"\n#include \"src/execution/frame-constants.h\""
  },
  "functions": [
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "fp_register",
        "parent": "JavaScriptFrame",
        "about": "Returns the frame pointer register for JavaScript frames on s390x.",
        "logic": "Returns the `fp` register, which is the designated frame pointer register.",
        "parameters": [],
        "return": {
          "type": "Register",
          "description": "The frame pointer register."
        },
        "dependencies": []
      },
      "code": "Register JavaScriptFrame::fp_register() { return v8::internal::fp; }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "context_register",
        "parent": "JavaScriptFrame",
        "about": "Returns the context register for JavaScript frames on s390x.",
        "logic": "Returns the `cp` register, which is the designated context register.",
        "parameters": [],
        "return": {
          "type": "Register",
          "description": "The context register."
        },
        "dependencies": []
      },
      "code": "Register JavaScriptFrame::context_register() { return cp; }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "constant_pool_pointer_register",
        "parent": "JavaScriptFrame",
        "about": "Returns the constant pool pointer register for JavaScript frames (not used on s390x).",
        "logic": "This function is not implemented for s390x and will cause the program to terminate if called.",
        "parameters": [],
        "return": {
          "type": "Register",
          "description": "This function does not return."
        },
        "dependencies": []
      },
      "code": "Register JavaScriptFrame::constant_pool_pointer_register() { UNREACHABLE(); }"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "RegisterStackSlotCount",
        "parent": "UnoptimizedFrameConstants",
        "about": "Calculates the number of stack slots required for registers in an unoptimized frame.",
        "logic": "Returns the register count directly, as each register occupies one stack slot.",
        "parameters": [
          {
            "name": "register_count",
            "type": "int",
            "purpose": "The number of registers to be stored on the stack."
          }
        ],
        "return": {
          "type": "int",
          "description": "The number of stack slots required."
        },
        "dependencies": []
      },
      "code": "int UnoptimizedFrameConstants::RegisterStackSlotCount(int register_count) {\n  return register_count;\n}"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "PaddingSlotCount",
        "parent": "BuiltinContinuationFrameConstants",
        "about": "Calculates the number of padding slots required in a builtin continuation frame.",
        "logic": "Returns 0, indicating no padding slots are needed.",
        "parameters": [
          {
            "name": "register_count",
            "type": "int",
            "purpose": "The number of registers."
          }
        ],
        "return": {
          "type": "int",
          "description": "The number of padding slots required (0)."
        },
        "dependencies": []
      },
      "code": "int BuiltinContinuationFrameConstants::PaddingSlotCount(int register_count) {\n  USE(register_count);\n  return 0;\n}"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "StackGuardFrameSize",
        "parent": "MaglevFrame",
        "about": "Calculates the size of the stack guard frame in Maglev frames.",
        "logic": "Calculates the frame size based on the standard frame size, an extra slot for StackGuardWithGap's argument, and the number of register inputs.",
        "parameters": [
          {
            "name": "register_input_count",
            "type": "int",
            "purpose": "The number of register inputs to the frame."
          }
        ],
        "return": {
          "type": "intptr_t",
          "description": "The size of the stack guard frame in bytes."
        },
        "dependencies": [
          "StandardFrameConstants",
          "kSystemPointerSize"
        ]
      },
      "code": "intptr_t MaglevFrame::StackGuardFrameSize(int register_input_count) {\n  // Include one extra slot for the single argument into StackGuardWithGap +\n  // register input count.\n  return StandardFrameConstants::kFixedFrameSizeFromFp +\n         (1 + register_input_count) * kSystemPointerSize;\n}"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/s390/frame-constants-s390.cc"
}