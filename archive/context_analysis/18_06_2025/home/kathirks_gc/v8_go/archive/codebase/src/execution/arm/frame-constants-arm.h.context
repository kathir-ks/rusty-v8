{
  "metadata": {
    "path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/arm/frame-constants-arm.h",
    "file_name": "frame-constants-arm.h",
    "language": "cpp",
    "purpose": "Defines constants related to stack frame layouts for the ARM architecture in the V8 JavaScript engine."
  },
  "imports": {
    "metadata": {
      "language": "cpp",
      "purpose": "Includes necessary header files for bit manipulation, macros, register definitions, and general frame constants."
    },
    "code": "#include \"src/base/bits.h\"\n            #include \"src/base/macros.h\"\n            #include \"src/codegen/register.h\"\n            #include \"src/execution/frame-constants.h\""
  },
  "classes": [
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "EntryFrameConstants",
        "extends": "AllStatic",
        "about": "Defines constants related to the layout of EntryFrames on the ARM stack. EntryFrames are used when entering the V8 engine from native code.",
        "attributes": [],
        "dependencies": [
          "kSystemPointerSize",
          "kNumDoubleCalleeSaved",
          "kDoubleSize",
          "kNumCalleeSaved"
        ]
      },
      "code": "class EntryFrameConstants : public AllStatic {\n            public:\n            // This is the offset to where JSEntry pushes the current value of\n            // Isolate::c_entry_fp onto the stack.\n            static constexpr int kNextExitFrameFPOffset = -3 * kSystemPointerSize;\n\n            static constexpr int kNextFastCallFrameFPOffset =\n                kNextExitFrameFPOffset - kSystemPointerSize;\n            static constexpr int kNextFastCallFramePCOffset =\n                kNextFastCallFrameFPOffset - kSystemPointerSize;\n\n            // Stack offsets for arguments passed to JSEntry.\n            static constexpr int kArgcOffset = +0 * kSystemPointerSize;\n            static constexpr int kArgvOffset = +1 * kSystemPointerSize;\n\n            // These offsets refer to the immediate caller (i.e a native frame).\n            static constexpr int kDirectCallerFPOffset = 0;\n            static constexpr int kDirectCallerPCOffset =\n                kDirectCallerFPOffset + 1 * kSystemPointerSize;\n            static constexpr int kDirectCallerGeneralRegistersOffset =\n                kDirectCallerPCOffset +\n                /* saved caller PC */\n                kSystemPointerSize +\n                /* d8...d15 */\n                kNumDoubleCalleeSaved * kDoubleSize;\n            static constexpr int kDirectCallerSPOffset =\n                kDirectCallerGeneralRegistersOffset +\n                /* r4...r10 (i.e. callee saved without fp) */\n                (kNumCalleeSaved - 1) * kSystemPointerSize;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmLiftoffSetupFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants related to the layout of Wasm Liftoff setup frames on the ARM stack. These frames are used during the initial setup of WebAssembly Liftoff code.",
        "attributes": [],
        "dependencies": [
          "TypedFrameConstants",
          "TYPED_FRAME_PUSHED_VALUE_OFFSET",
          "kSystemPointerSize"
        ]
      },
      "code": "class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {\n            public:\n            // Number of gp parameters, without the instance.\n            static constexpr int kNumberOfSavedGpParamRegs = 3;\n            static constexpr int kNumberOfSavedFpParamRegs = 8;\n\n            // On arm, spilled registers are implicitly sorted backwards by number.\n            // We spill:\n            //   r3: param0 = instance\n            //   r0, r2, r6: param1, param2, param3\n            //   lr (== r14): internal usage of the caller\n            // in the following FP-relative order: [lr, r6, r3, r2, r0].\n            static constexpr int kInstanceSpillOffset =\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(2);\n\n            static constexpr int kParameterSpillsOffset[] = {\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(4), TYPED_FRAME_PUSHED_VALUE_OFFSET(3),\n                TYPED_FRAME_PUSHED_VALUE_OFFSET(1)};\n\n            // SP-relative.\n            static constexpr int kWasmInstanceDataOffset = 2 * kSystemPointerSize;\n            static constexpr int kDeclaredFunctionIndexOffset = 1 * kSystemPointerSize;\n            static constexpr int kNativeModuleOffset = 0;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmLiftoffFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants related to the layout of Wasm Liftoff frames on the ARM stack.  These frames are used when executing WebAssembly Liftoff code.",
        "attributes": [],
        "dependencies": [
          "TypedFrameConstants",
          "kSystemPointerSize"
        ]
      },
      "code": "class WasmLiftoffFrameConstants : public TypedFrameConstants {\n            public:\n            static constexpr int kFeedbackVectorOffset = 3 * kSystemPointerSize;\n            static constexpr int kInstanceDataOffset = 2 * kSystemPointerSize;\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "WasmDebugBreakFrameConstants",
        "extends": "TypedFrameConstants",
        "about": "Defines constants related to the layout of Wasm Debug Break frames on the ARM stack. These frames are used when a debug break occurs in WebAssembly code.",
        "attributes": [],
        "dependencies": [
          "TypedFrameConstants",
          "RegList",
          "DoubleRegList",
          "kSystemPointerSize",
          "kDoubleSize",
          "r0",
          "r1",
          "r2",
          "r3",
          "r4",
          "r5",
          "r6",
          "r7",
          "r8",
          "r9",
          "d0",
          "d1",
          "d2",
          "d3",
          "d4",
          "d5",
          "d6",
          "d7",
          "d8",
          "d9",
          "d10",
          "d11",
          "d12",
          "base::bits"
        ]
      },
      "code": "class WasmDebugBreakFrameConstants : public TypedFrameConstants {\n            public:\n            // r10: root, r11: fp, r12: ip, r13: sp, r14: lr, r15: pc.\n            static constexpr RegList kPushedGpRegs = {r0, r1, r2, r3, r4,\n                                                        r5, r6, r7, r8, r9};\n\n            // d13: zero, d14-d15: scratch\n            static constexpr DoubleRegList kPushedFpRegs = {d0, d1, d2, d3,  d4,  d5, d6,\n                                                            d7, d8, d9, d10, d11, d12};\n\n            static constexpr int kNumPushedGpRegisters = kPushedGpRegs.Count();\n            static constexpr int kNumPushedFpRegisters = kPushedFpRegs.Count();\n\n            static constexpr int kLastPushedGpRegisterOffset =\n                -TypedFrameConstants::kFixedFrameSizeFromFp -\n                kSystemPointerSize * kNumPushedGpRegisters;\n            static constexpr int kLastPushedFpRegisterOffset =\n                kLastPushedGpRegisterOffset - kDoubleSize * kNumPushedFpRegisters;\n\n            // Offsets are fp-relative.\n            static int GetPushedGpRegisterOffset(int reg_code) {\n                DCHECK_NE(0, kPushedGpRegs.bits() & (1 << reg_code));\n                uint32_t lower_regs =\n                    kPushedGpRegs.bits() & ((uint32_t{1} << reg_code) - 1);\n                return kLastPushedGpRegisterOffset +\n                    base::bits::CountPopulation(lower_regs) * kSystemPointerSize;\n            }\n\n            static int GetPushedFpRegisterOffset(int reg_code) {\n                DCHECK_NE(0, kPushedFpRegs.bits() & (1 << reg_code));\n                uint32_t lower_regs =\n                    kPushedFpRegs.bits() & ((uint32_t{1} << reg_code) - 1);\n                return kLastPushedFpRegisterOffset +\n                    base::bits::CountPopulation(lower_regs) * kDoubleSize;\n            }\n            };"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "AllStatic",
        "about": "Base class indicating that all methods are static",
        "attributes": []
      },
      "code": "class AllStatic {};"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "class",
        "name": "TypedFrameConstants",
        "about": "Base class of frame constants",
        "attributes": []
      },
      "code": "class TypedFrameConstants {};"
    }
  ],
  "dependencies": [
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "DCHECK",
        "about": "A debug check macro",
        "parameters": [],
        "return": {
          "type": "void"
        }
      },
      "code": "void DCHECK(bool condition);",
      "type": "func"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "function",
        "name": "TYPED_FRAME_PUSHED_VALUE_OFFSET",
        "about": "Calculates the offset",
        "parameters": [],
        "return": {
          "type": "int"
        }
      },
      "code": "int TYPED_FRAME_PUSHED_VALUE_OFFSET(int index);",
      "type": "func"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "constant",
        "name": "kSystemPointerSize",
        "about": "The size of a pointer on the system"
      },
      "code": "const int kSystemPointerSize;",
      "type": "const"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "constant",
        "name": "kDoubleSize",
        "about": "The size of a double"
      },
      "code": "const int kDoubleSize;",
      "type": "const"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "constant",
        "name": "kNumCalleeSaved",
        "about": "Number of callee saved registers"
      },
      "code": "const int kNumCalleeSaved;",
      "type": "const"
    },
    {
      "metadata": {
        "language": "cpp",
        "type": "constant",
        "name": "kNumDoubleCalleeSaved",
        "about": "Number of double callee saved registers"
      },
      "code": "const int kNumDoubleCalleeSaved;",
      "type": "const"
    }
  ],
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/arm/frame-constants-arm.h"
}