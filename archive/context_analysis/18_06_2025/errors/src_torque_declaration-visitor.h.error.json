{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/declaration-visitor.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 568, column 47",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/declaration-visitor.h\",\n        \"file_name\": \"declaration-visitor.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines visitors for processing declarations in the Torque language. These visitors handle predeclaration and full declaration processing, creating and resolving type aliases, builtins, and other language constructs.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and Torque-specific headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <optional>\n            #include <string>\n\n            #include \"src/base/macros.h\"\n            #include \"src/torque/declarations.h\"\n            #include \"src/torque/global-context.h\"\n            #include \"src/torque/kythe-data.h\"\n            #include \"src/torque/types.h\"\n            #include \"src/torque/utils.h\"\n        ]]></code>\n    </imports>\n\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Ast\",\n                \"about\": \"Represents the Abstract Syntax Tree of the Torque program.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Ast {\n                 public:\n                  std::vector<Declaration*> declarations() {return {};}\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Declaration\",\n                \"about\": \"Base class for all declarations in Torque.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"NamespaceDeclaration\",\n                \"about\": \"Represents a namespace declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class NamespaceDeclaration : public Declaration {\n                 public:\n                  std::string name;\n                  std::vector<Declaration*> declarations;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TypeDeclaration\",\n                \"about\": \"Represents a type declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TypeDeclaration : public Declaration {\n                 public:\n                  Identifier* name;\n                  SourcePosition pos;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StructDeclaration\",\n                \"about\": \"Represents a struct declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class StructDeclaration : public Declaration {\n                 public:\n                  Identifier* name;\n                  SourcePosition pos;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"GenericTypeDeclaration\",\n                \"about\": \"Represents a generic type declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class GenericTypeDeclaration : public Declaration {\n                 public:\n                  TypeDeclaration* declaration;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"GenericCallableDeclaration\",\n                \"about\": \"Represents a generic callable declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class GenericCallableDeclaration : public Declaration {\n                 public:\n                  CallableDeclaration* declaration;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BuiltinDeclaration\",\n                \"about\": \"Represents a builtin declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class BuiltinDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ExternalBuiltinDeclaration\",\n                \"about\": \"Represents an external builtin declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ExternalBuiltinDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ExternalRuntimeDeclaration\",\n                \"about\": \"Represents an external runtime declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ExternalRuntimeDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ExternalMacroDeclaration\",\n                \"about\": \"Represents an external macro declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ExternalMacroDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueBuiltinDeclaration\",\n                \"about\": \"Represents a Torque builtin declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TorqueBuiltinDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueMacroDeclaration\",\n                \"about\": \"Represents a Torque macro declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TorqueMacroDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"IntrinsicDeclaration\",\n                \"about\": \"Represents an intrinsic declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class IntrinsicDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ConstDeclaration\",\n                \"about\": \"Represents a constant declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ConstDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SpecializationDeclaration\",\n                \"about\": \"Represents a specialization declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class SpecializationDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ExternConstDeclaration\",\n                \"about\": \"Represents an external const declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ExternConstDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CppIncludeDeclaration\",\n                \"about\": \"Represents a C++ include declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class CppIncludeDeclaration : public Declaration {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallableDeclaration\",\n                \"about\": \"Represents a callable declaration.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class CallableDeclaration : public Declaration {\n                public:\n                 Identifier* name;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Signature\",\n                \"about\": \"Represents a function signature.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Signature {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Statement\",\n                \"about\": \"Represents a code statement.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Statement {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Identifier\",\n                \"about\": \"Represents an identifier in the code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Identifier {\n                 public:\n                  SourcePosition pos;\n                  std::string value;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourcePosition\",\n                \"about\": \"Represents a position within a source file.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class SourcePosition {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TypeAlias\",\n                \"about\": \"Represents a type alias.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TypeAlias {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Callable\",\n                \"about\": \"Represents a callable object.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Callable {};\n            ]]></code>\n        </class>\n    </dependencies>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PredeclarationVisitor\",\n            \"about\": \"Visits the AST to perform predeclaration of types and callables.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Ast\",\n                \"Declaration\",\n                \"NamespaceDeclaration\",\n                \"TypeDeclaration\",\n                \"StructDeclaration\",\n                \"GenericTypeDeclaration\",\n                \"GenericCallableDeclaration\",\n                \"Declarations\",\n                \"GlobalContext\",\n                \"KytheData\",\n                \"TypeAlias\",\n                \"CurrentScope\",\n                \"Identifier\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class PredeclarationVisitor {\n            public:\n            static void Predeclare(Ast* ast) {\n                CurrentScope::Scope current_namespace(GlobalContext::GetDefaultNamespace());\n                for (Declaration* child : ast->declarations()) Predeclare(child);\n            }\n            static void ResolvePredeclarations();\n\n            private:\n            static void Predeclare(Declaration* decl);\n            static void Predeclare(NamespaceDeclaration* decl) {\n                CurrentScope::Scope current_scope(GetOrCreateNamespace(decl->name));\n                for (Declaration* child : decl->declarations) Predeclare(child);\n            }\n            static void Predeclare(TypeDeclaration* decl) {\n                TypeAlias* alias =\n                    Declarations::PredeclareTypeAlias(decl->name, decl, false);\n                alias->SetPosition(decl->pos);\n                alias->SetIdentifierPosition(decl->name->pos);\n                if (GlobalContext::collect_kythe_data()) {\n                KytheData::AddTypeDefinition(alias);\n                }\n            }\n            static void Predeclare(StructDeclaration* decl) {\n                TypeAlias* alias =\n                    Declarations::PredeclareTypeAlias(decl->name, decl, false);\n                alias->SetPosition(decl->pos);\n                alias->SetIdentifierPosition(decl->name->pos);\n                if (GlobalContext::collect_kythe_data()) {\n                KytheData::AddTypeDefinition(alias);\n                }\n            }\n            static void Predeclare(GenericTypeDeclaration* generic_decl) {\n                Declarations::DeclareGenericType(generic_decl->declaration->name->value,\n                                                generic_decl);\n            }\n            static void Predeclare(GenericCallableDeclaration* generic_decl) {\n                Declarations::DeclareGenericCallable(generic_decl->declaration->name->value,\n                                                    generic_decl);\n            }\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DeclarationVisitor\",\n            \"about\": \"Visits the AST to process declarations, including type resolution and builtin creation.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Ast\",\n                \"Declaration\",\n                \"NamespaceDeclaration\",\n                \"TypeDeclaration\",\n                \"StructDeclaration\",\n                \"BuiltinDeclaration\",\n                \"ExternalBuiltinDeclaration\",\n                \"ExternalRuntimeDeclaration\",\n                \"ExternalMacroDeclaration\",\n                \"TorqueBuiltinDeclaration\",\n                \"TorqueMacroDeclaration\",\n                \"IntrinsicDeclaration\",\n                \"ConstDeclaration\",\n                \"GenericCallableDeclaration\",\n                \"GenericTypeDeclaration\",\n                \"SpecializationDeclaration\",\n                \"ExternConstDeclaration\",\n                \"CppIncludeDeclaration\",\n                \"Declarations\",\n                \"GlobalContext\",\n                \"Signature\",\n                \"Statement\",\n                \"Callable\",\n                \"CallableDeclaration\",\n                \"Identifier\",\n                \"CurrentScope\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class DeclarationVisitor {\n            public:\n            static void Visit(Ast* ast) {\n                CurrentScope::Scope current_namespace(GlobalContext::GetDefaultNamespace());\n                for (Declaration* child : ast->declarations()) Visit(child);\n            }\n            static void Visit(Declaration* decl);\n            static void Visit(NamespaceDeclaration* decl) {\n                CurrentScope::Scope current_scope(GetOrCreateNamespace(decl->name));\n                for (Declaration* child : decl->declarations) Visit(child);\n            }\n\n            static void Visit(TypeDeclaration* decl) {\n                // Looking up the type will trigger type computation; this ensures errors\n                // are reported even if the type is unused.\n                Declarations::LookupType(decl->name);\n            }\n            static void Visit(StructDeclaration* decl) {\n                Declarations::LookupType(decl->name);\n            }\n\n            static Builtin* CreateBuiltin(BuiltinDeclaration* decl,\n                                            std::string external_name,\n                                            std::string readable_name, Signature signature,\n                                            std::optional<std::string> use_counter_name,\n                                            std::optional<Statement*> body);\n\n            static void Visit(ExternalBuiltinDeclaration* decl);\n            static void Visit(ExternalRuntimeDeclaration* decl);\n            static void Visit(ExternalMacroDeclaration* decl);\n            static void Visit(TorqueBuiltinDeclaration* decl);\n            static void Visit(TorqueMacroDeclaration* decl);\n            static void Visit(IntrinsicDeclaration* decl);\n\n            static void Visit(ConstDeclaration* decl);\n            static void Visit(GenericCallableDeclaration* decl) {\n                // The PredeclarationVisitor already handled this case.\n            }\n            static void Visit(GenericTypeDeclaration* decl) {\n                // The PredeclarationVisitor already handled this case.\n            }\n            static void Visit(SpecializationDeclaration* decl);\n            static void Visit(ExternConstDeclaration* decl);\n            static void Visit(CppIncludeDeclaration* decl);\n\n            static Signature MakeSpecializedSignature(\n                const SpecializationKey<GenericCallable>& key);\n            static Callable* SpecializeImplicit(\n                const SpecializationKey<GenericCallable>& key);\n            static Callable* Specialize(\n                const SpecializationKey<GenericCallable>& key,\n                CallableDeclaration* declaration,\n                std::optional<const SpecializationDeclaration*> explicit_specialization,\n                std::optional<Statement*> body, SourcePosition position);\n\n            private:\n            static void DeclareSpecializedTypes(\n                const SpecializationKey<GenericCallable>& key);\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"GetOrCreateNamespace\",\n            \"about\": \"Retrieves a namespace with the given name, creating it if it doesn't exist.\",\n            \"logic\": \"Uses a global context to manage namespaces. If a namespace with the given name already exists, it is returned; otherwise, a new namespace is created and added to the global context.\",\n            \"parameters\": [\n                {\n                    \"name\": \"name\",\n                    \"type\": \"const std::string&\",\n                    \"purpose\": \"The name of the namespace to retrieve or create.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Namespace*\",\n                \"description\": \"A pointer to the namespace.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            Namespace* GetOrCreateNamespace(const std::string& name);\n        ]]></code>\n    </func>\n\n</file>\n```"
}