{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/object-size-trait.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 87, column 38",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/object-size-trait.h\",\n        \"file_name\": \"object-size-trait.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines traits to determine the size of garbage collected objects in cppgc.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard size_t definition.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <cstddef>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes type traits from cppgc library.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"cppgc/type-traits.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes V8 configuration.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"v8config.h\"  // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"BaseObjectSizeTrait\",\n            \"about\": \"Base class for object size traits, providing protected static methods to get object sizes.\",\n            \"attributes\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct V8_EXPORT BaseObjectSizeTrait {\n            protected:\n                static size_t GetObjectSizeForGarbageCollected(const void*);\n                static size_t GetObjectSizeForGarbageCollectedMixin(const void*);\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ObjectSizeTrait\",\n            \"about\": \"Trait for determining the size of garbage collected objects, specialized based on whether T is a GarbageCollectedMixinType.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"IsGarbageCollectedMixinTypeV\",\n                \"IsGarbageCollectedTypeV\",\n                \"BaseObjectSizeTrait\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename T, bool = IsGarbageCollectedMixinTypeV<T>>\n            struct ObjectSizeTrait;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ObjectSizeTrait<T, false>\",\n            \"about\": \"Specialization of ObjectSizeTrait for non-mixin types.\",\n            \"attributes\": [],\n            \"extends\": \"cppgc::internal::BaseObjectSizeTrait\",\n            \"dependencies\": [\n                \"IsGarbageCollectedTypeV\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename T>\n            struct ObjectSizeTrait<T, false> : cppgc::internal::BaseObjectSizeTrait {\n            static_assert(sizeof(T), \"T must be fully defined\");\n            static_assert(IsGarbageCollectedTypeV<T>,\n                        \"T must be of type GarbageCollected or GarbageCollectedMixin\");\n\n            static size_t GetSize(const T& object) {\n                return GetObjectSizeForGarbageCollected(&object);\n            }\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ObjectSizeTrait<T, true>\",\n            \"about\": \"Specialization of ObjectSizeTrait for mixin types.\",\n            \"attributes\": [],\n            \"extends\": \"cppgc::internal::BaseObjectSizeTrait\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename T>\n            struct ObjectSizeTrait<T, true> : cppgc::internal::BaseObjectSizeTrait {\n            static_assert(sizeof(T), \"T must be fully defined\");\n\n            static size_t GetSize(const T& object) {\n                return GetObjectSizeForGarbageCollectedMixin(&object);\n            }\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <interface>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"IsGarbageCollectedMixinTypeV\",\n                \"about\": \"Type trait to check if a type is a garbage collected mixin type.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T>\n                constexpr bool IsGarbageCollectedMixinTypeV = /* ... */;\n            ]]></code>\n        </interface>\n    </dependencies>\n    <dependencies>\n        <interface>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"IsGarbageCollectedTypeV\",\n                \"about\": \"Type trait to check if a type is garbage collected.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T>\n                constexpr bool IsGarbageCollectedTypeV = /* ... */;\n            ]]></code>\n        </interface>\n    </dependencies>\n</file>\n```"
}