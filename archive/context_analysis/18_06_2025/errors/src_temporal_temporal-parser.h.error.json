{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/temporal/temporal-parser.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 342, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/temporal/temporal-parser.h\",\n        \"file_name\": \"temporal-parser.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the TemporalParser class and related data structures for parsing ISO 8601 date/time strings according to the ECMAScript Temporal proposal.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for optional types and the V8 isolate.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <optional>\n\n            #include \"src/execution/isolate.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ParsedISO8601Result\",\n            \"about\": \"Represents the parsed result of an ISO 8601 date/time string. Stores individual components like year, month, day, hour, minute, second, nanosecond, timezone offset, and calendar name.\",\n            \"attributes\": [\n                {\n                    \"name\": \"date_year\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Year component of the date.\"\n                },\n                {\n                    \"name\": \"date_month\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Month component of the date.\"\n                },\n                {\n                    \"name\": \"date_day\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Day component of the date.\"\n                },\n                {\n                    \"name\": \"time_hour\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Hour component of the time.\"\n                },\n                {\n                    \"name\": \"time_minute\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Minute component of the time.\"\n                },\n                {\n                    \"name\": \"time_second\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Second component of the time.\"\n                },\n                {\n                    \"name\": \"time_nanosecond\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Nanosecond component of the time.\"\n                },\n                {\n                    \"name\": \"tzuo_sign\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Sign of the timezone UTC offset.\"\n                },\n                {\n                    \"name\": \"tzuo_hour\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Hour component of the timezone UTC offset.\"\n                },\n                {\n                    \"name\": \"tzuo_minute\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Minute component of the timezone UTC offset.\"\n                },\n                {\n                    \"name\": \"tzuo_second\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Second component of the timezone UTC offset.\"\n                },\n                {\n                    \"name\": \"tzuo_nanosecond\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Nanosecond component of the timezone UTC offset.\"\n                },\n                {\n                    \"name\": \"utc_designator\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates if the UTC designator ('Z') is present.\"\n                },\n                {\n                    \"name\": \"tzi_name_start\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Starting offset of the TimeZoneIANAName in the input string.\"\n                },\n                {\n                    \"name\": \"tzi_name_length\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Length of the TimeZoneIANAName.\"\n                },\n                {\n                    \"name\": \"calendar_name_start\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Starting offset of the CalendarName in the input string.\"\n                },\n                {\n                    \"name\": \"calendar_name_length\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Length of the CalendarName.\"\n                },\n                 {\n                    \"name\": \"offset_string_start\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Starting offset of TimeZoneNumericUTCOffset in the input string.\"\n                },\n                {\n                    \"name\": \"offset_string_length\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Length of TimeZoneNumericUTCOffset.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct ParsedISO8601Result {\n              int32_t date_year;    // DateYear production\n              int32_t date_month;   // DateMonth production\n              int32_t date_day;     // DateDay production\n              int32_t time_hour;    // TimeHour production\n              int32_t time_minute;  // TimeMinute production\n              int32_t time_second;  // TimeSecond production\n              int32_t\n                  time_nanosecond;  // TimeFractionalPart production stored in nanosecond\n              int32_t tzuo_sign;    // TimeZoneUTCOffsetSign production\n              int32_t tzuo_hour;    // TimeZoneUTCOffsetHour production\n              int32_t tzuo_minute;  // TimeZoneUTCOffsetMinute production\n              int32_t tzuo_second;  // TimeZoneUTCOffsetSecond production\n              int32_t\n                  tzuo_nanosecond;  // TimeZoneUTCOffsetFractionalPart stored in nanosecond\n              bool utc_designator;  // UTCDesignator is presented\n              int32_t tzi_name_start;   // Starting offset of TimeZoneIANAName in the input\n                                        // string.\n              int32_t tzi_name_length;  // Length of TimeZoneIANAName production\n              int32_t calendar_name_start;  // Starting offset of CalendarName production in\n                                            // the input string.\n              int32_t calendar_name_length;  // Length of CalendarName production.\n              int32_t offset_string_start;   // Starting offset of TimeZoneNumericUTCOffset\n                                             // in the input string.\n              int32_t\n                  offset_string_length;  // Length of TimeZoneNumericUTCOffset production\n\n              ParsedISO8601Result()\n                  : date_year(kMinInt31),\n                    date_month(kMinInt31),\n                    date_day(kMinInt31),\n                    time_hour(kMinInt31),\n                    time_minute(kMinInt31),\n                    time_second(kMinInt31),\n                    time_nanosecond(kMinInt31),\n                    tzuo_sign(kMinInt31),\n                    tzuo_hour(kMinInt31),\n                    tzuo_minute(kMinInt31),\n                    tzuo_second(kMinInt31),\n                    tzuo_nanosecond(kMinInt31),\n                    utc_designator(false),\n                    tzi_name_start(0),\n                    tzi_name_length(0),\n                    calendar_name_start(0),\n                    calendar_name_length(0),\n                    offset_string_start(0),\n                    offset_string_length(0) {}\n\n              bool date_year_is_undefined() const { return date_year == kMinInt31; }\n              bool date_month_is_undefined() const { return date_month == kMinInt31; }\n              bool date_day_is_undefined() const { return date_day == kMinInt31; }\n              bool time_hour_is_undefined() const { return time_hour == kMinInt31; }\n              bool time_minute_is_undefined() const { return time_minute == kMinInt31; }\n              bool time_second_is_undefined() const { return time_second == kMinInt31; }\n              bool time_nanosecond_is_undefined() const {\n                return time_nanosecond == kMinInt31;\n              }\n              bool tzuo_hour_is_undefined() const { return tzuo_hour == kMinInt31; }\n              bool tzuo_minute_is_undefined() const { return tzuo_minute == kMinInt31; }\n              bool tzuo_second_is_undefined() const { return tzuo_second == kMinInt31; }\n              bool tzuo_sign_is_undefined() const { return tzuo_sign == kMinInt31; }\n              bool tzuo_nanosecond_is_undefined() const {\n                return tzuo_nanosecond == kMinInt31;\n              }\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ParsedISO8601Duration\",\n            \"about\": \"Represents the parsed result of an ISO 8601 duration string. Stores the sign, years, months, weeks, days, and time components of the duration.\",\n            \"attributes\": [\n                {\n                    \"name\": \"sign\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Sign of the duration (1 or -1).\"\n                },\n                {\n                    \"name\": \"years\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Years component of the duration.\"\n                },\n                {\n                    \"name\": \"months\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Months component of the duration.\"\n                },\n                {\n                    \"name\": \"weeks\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Weeks component of the duration.\"\n                },\n                {\n                    \"name\": \"days\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Days component of the duration.\"\n                },\n                {\n                    \"name\": \"whole_hours\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Whole hours component of the duration.\"\n                },\n                {\n                    \"name\": \"whole_minutes\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Whole minutes component of the duration.\"\n                },\n                {\n                    \"name\": \"whole_seconds\",\n                    \"type\": \"double\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Whole seconds component of the duration.\"\n                },\n                {\n                    \"name\": \"hours_fraction\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Fractional hours component of the duration (in nanoseconds).\"\n                },\n                {\n                    \"name\": \"minutes_fraction\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Fractional minutes component of the duration (in nanoseconds).\"\n                },\n                {\n                    \"name\": \"seconds_fraction\",\n                    \"type\": \"int32_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Fractional seconds component of the duration (in nanoseconds).\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct ParsedISO8601Duration {\n              double sign;               // Sign production\n              double years;              // DurationYears production\n              double months;             // DurationMonths production\n              double weeks;              // DurationWeeks production\n              double days;               // DurationDays production\n              double whole_hours;        // DurationWholeHours production\n              double whole_minutes;      // DurationWholeMinutes production\n              double whole_seconds;      // DurationWholeSeconds production\n              int32_t hours_fraction;    // DurationHoursFraction, in unit of 1e-9 hours\n              int32_t minutes_fraction;  // DurationMinuteFraction, in unit of 1e-9 minutes\n              int32_t seconds_fraction;  // DurationSecondFraction, in unit of nanosecond (\n                                         // 1e-9 seconds).\n\n              static constexpr int32_t kEmpty = -1;\n              ParsedISO8601Duration()\n                  : sign(1),\n                    years(kEmpty),\n                    months(kEmpty),\n                    weeks(kEmpty),\n                    days(kEmpty),\n                    whole_hours(kEmpty),\n                    whole_minutes(kEmpty),\n                    whole_seconds(kEmpty),\n                    hours_fraction(kEmpty),\n                    minutes_fraction(kEmpty),\n                    seconds_fraction(kEmpty) {}\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TemporalParser\",\n            \"about\": \"Provides static methods for parsing various ISO 8601 date/time and duration strings. Serves as a low-level parsing utility for the ECMAScript Temporal proposal.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"ParsedISO8601Result\",\n                \"ParsedISO8601Duration\",\n                \"Isolate\",\n                \"DirectHandle<String>\",\n                \"std::optional\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT_PRIVATE TemporalParser {\n             public:\n            #define DEFINE_PARSE_METHOD(R, NAME)                         \\\n              V8_WARN_UNUSED_RESULT static std::optional<R> Parse##NAME( \\\n                  Isolate* isolate, DirectHandle<String> iso_string)\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalDateString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalDateTimeString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalTimeString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalYearMonthString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalMonthDayString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalInstantString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalZonedDateTimeString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TimeZoneIdentifier);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TemporalRelativeToString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, CalendarName);\n              DEFINE_PARSE_METHOD(ParsedISO8601Duration, TemporalDurationString);\n              DEFINE_PARSE_METHOD(ParsedISO8601Result, TimeZoneNumericUTCOffset);\n            };\n        ]]></code>\n    </class>\n</file>\n```"
}