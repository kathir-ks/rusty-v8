{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/libplatform/libplatform.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 115, column 48",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/libplatform/libplatform.h\",\n        \"file_name\": \"libplatform.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the interface for the default V8 platform implementation, including functions for creating and managing the platform, job handles, and message loops.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and V8 specific headers required for platform initialization and task management.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <memory>\n\n            #include \"libplatform/libplatform-export.h\"\n            #include \"libplatform/v8-tracing.h\"\n            #include \"v8-platform.h\"  // NOLINT(build/include_directory)\n            #include \"v8config.h\"     // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"IdleTaskSupport\",\n            \"about\": \"Enumerates the supported states for IdleTaskSupport (kDisabled, kEnabled).\",\n            \"attributes\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class IdleTaskSupport { kDisabled, kEnabled };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"InProcessStackDumping\",\n            \"about\": \"Enumerates the supported states for InProcessStackDumping (kDisabled, kEnabled).\",\n            \"attributes\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class InProcessStackDumping { kDisabled, kEnabled };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"MessageLoopBehavior\",\n            \"about\": \"Enumerates the supported behaviours for message loops (kDoNotWait, kWaitForWork).\",\n            \"attributes\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class MessageLoopBehavior : bool {\n            kDoNotWait = false,\n            kWaitForWork = true\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"PriorityMode\",\n            \"about\": \"Enumerates the supported priority modes (kDontApply, kApply).\",\n            \"attributes\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class PriorityMode : bool { kDontApply, kApply };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"NewDefaultPlatform\",\n            \"about\": \"Creates a new instance of the default v8::Platform implementation.\",\n            \"logic\": \"Allocates worker threads for background jobs, handles idle tasks if enabled, and creates a tracing controller if one isn't provided. Uses multiple task queues based on system-level priorities if PriorityMode::kApply is used.\",\n            \"parameters\": [\n                {\n                    \"name\": \"thread_pool_size\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of worker threads to allocate for background jobs.\"\n                },\n                {\n                    \"name\": \"idle_task_support\",\n                    \"type\": \"IdleTaskSupport\",\n                    \"purpose\": \"Enables or disables idle task support.\"\n                },\n                {\n                    \"name\": \"in_process_stack_dumping\",\n                    \"type\": \"InProcessStackDumping\",\n                    \"purpose\": \"Enables or disables in-process stack dumping.\"\n                },\n                {\n                    \"name\": \"tracing_controller\",\n                    \"type\": \"std::unique_ptr<v8::TracingController>\",\n                    \"purpose\": \"A unique pointer to a v8::TracingController instance.\"\n                },\n                {\n                    \"name\": \"priority_mode\",\n                    \"type\": \"PriorityMode\",\n                    \"purpose\": \"Specifies whether to apply multiple task queues and thread priorities.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<v8::Platform>\",\n                \"description\": \"A unique pointer to the created v8::Platform instance.\"\n            },\n            \"dependencies\": [\n                \"v8::Platform\",\n                \"IdleTaskSupport\",\n                \"InProcessStackDumping\",\n                \"v8::TracingController\",\n                \"PriorityMode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_PLATFORM_EXPORT std::unique_ptr<v8::Platform> NewDefaultPlatform(\n                int thread_pool_size = 0,\n                IdleTaskSupport idle_task_support = IdleTaskSupport::kDisabled,\n                InProcessStackDumping in_process_stack_dumping =\n                    InProcessStackDumping::kDisabled,\n                std::unique_ptr<v8::TracingController> tracing_controller = {},\n                PriorityMode priority_mode = PriorityMode::kDontApply);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"NewSingleThreadedDefaultPlatform\",\n            \"about\": \"Creates a new instance of the default v8::Platform implementation with worker thread pool disabled.\",\n            \"logic\": \"This function is for use with the --single-threaded V8 flag.\",\n            \"parameters\": [\n                {\n                    \"name\": \"idle_task_support\",\n                    \"type\": \"IdleTaskSupport\",\n                    \"purpose\": \"Enables or disables idle task support.\"\n                },\n                {\n                    \"name\": \"in_process_stack_dumping\",\n                    \"type\": \"InProcessStackDumping\",\n                    \"purpose\": \"Enables or disables in-process stack dumping.\"\n                },\n                {\n                    \"name\": \"tracing_controller\",\n                    \"type\": \"std::unique_ptr<v8::TracingController>\",\n                    \"purpose\": \"A unique pointer to a v8::TracingController instance.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<v8::Platform>\",\n                \"description\": \"A unique pointer to the created v8::Platform instance.\"\n            },\n            \"dependencies\": [\n                \"v8::Platform\",\n                \"IdleTaskSupport\",\n                \"InProcessStackDumping\",\n                \"v8::TracingController\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_PLATFORM_EXPORT std::unique_ptr<v8::Platform>\n            NewSingleThreadedDefaultPlatform(\n                IdleTaskSupport idle_task_support = IdleTaskSupport::kDisabled,\n                InProcessStackDumping in_process_stack_dumping =\n                    InProcessStackDumping::kDisabled,\n                std::unique_ptr<v8::TracingController> tracing_controller = {});\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"NewDefaultJobHandle\",\n            \"about\": \"Creates a new instance of the default v8::JobHandle implementation.\",\n            \"logic\": \"The job will be executed by spawning up to |num_worker_threads| many worker threads on the provided |platform| with the given |priority|.\",\n            \"parameters\": [\n                {\n                    \"name\": \"platform\",\n                    \"type\": \"v8::Platform*\",\n                    \"purpose\": \"The v8::Platform instance to use.\"\n                },\n                {\n                    \"name\": \"priority\",\n                    \"type\": \"v8::TaskPriority\",\n                    \"purpose\": \"The priority of the job.\"\n                },\n                {\n                    \"name\": \"job_task\",\n                    \"type\": \"std::unique_ptr<v8::JobTask>\",\n                    \"purpose\": \"The JobTask to be executed.\"\n                },\n                {\n                    \"name\": \"num_worker_threads\",\n                    \"type\": \"size_t\",\n                    \"purpose\": \"The number of worker threads to use for the job.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<v8::JobHandle>\",\n                \"description\": \"A unique pointer to the created v8::JobHandle instance.\"\n            },\n            \"dependencies\": [\n                \"v8::JobHandle\",\n                \"v8::Platform\",\n                \"v8::TaskPriority\",\n                \"v8::JobTask\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_PLATFORM_EXPORT std::unique_ptr<v8::JobHandle> NewDefaultJobHandle(\n                v8::Platform* platform, v8::TaskPriority priority,\n                std::unique_ptr<v8::JobTask> job_task, size_t num_worker_threads);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PumpMessageLoop\",\n            \"about\": \"Pumps the message loop for the given isolate.\",\n            \"logic\": \"Executes tasks in the message loop.  Only nestable tasks may run if the call is nested within another call to PumpMessageLoop.  Does not block if no task is pending unless requested through the |behavior| parameter.\",\n            \"parameters\": [\n                {\n                    \"name\": \"platform\",\n                    \"type\": \"v8::Platform*\",\n                    \"purpose\": \"The v8::Platform instance to use.\"\n                },\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"v8::Isolate*\",\n                    \"purpose\": \"The v8::Isolate instance to use.\"\n                },\n                {\n                    \"name\": \"behavior\",\n                    \"type\": \"MessageLoopBehavior\",\n                    \"purpose\": \"Specifies whether to wait for work if no task is pending.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if a task was executed, and false otherwise.\"\n            },\n            \"dependencies\": [\n                \"v8::Platform\",\n                \"v8::Isolate\",\n                \"MessageLoopBehavior\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_PLATFORM_EXPORT bool PumpMessageLoop(\n                v8::Platform* platform, v8::Isolate* isolate,\n                MessageLoopBehavior behavior = MessageLoopBehavior::kDoNotWait);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"RunIdleTasks\",\n            \"about\": \"Runs pending idle tasks for at most |idle_time_in_seconds| seconds.\",\n            \"logic\": \"Runs idle tasks.  Does not block if no task is pending.\",\n            \"parameters\": [\n                {\n                    \"name\": \"platform\",\n                    \"type\": \"v8::Platform*\",\n                    \"purpose\": \"The v8::Platform instance to use.\"\n                },\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"v8::Isolate*\",\n                    \"purpose\": \"The v8::Isolate instance to use.\"\n                },\n                {\n                    \"name\": \"idle_time_in_seconds\",\n                    \"type\": \"double\",\n                    \"purpose\": \"The maximum time to run idle tasks for.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"v8::Platform\",\n                \"v8::Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_PLATFORM_EXPORT void RunIdleTasks(v8::Platform* platform,\n                                                v8::Isolate* isolate,\n                                                double idle_time_in_seconds);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"NotifyIsolateShutdown\",\n            \"about\": \"Notifies the given platform about the Isolate getting deleted soon.\",\n            \"logic\": \"Has to be called for all Isolates which are deleted - unless we're shutting down the platform.\",\n            \"parameters\": [\n                {\n                    \"name\": \"platform\",\n                    \"type\": \"v8::Platform*\",\n                    \"purpose\": \"The v8::Platform instance to use.\"\n                },\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The v8::Isolate instance to be shutdown.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"v8::Platform\",\n                \"v8::Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_PLATFORM_EXPORT void NotifyIsolateShutdown(v8::Platform* platform,\n                                                        Isolate* isolate);\n        ]]></code>\n    </func>\n</file>\n```"
}