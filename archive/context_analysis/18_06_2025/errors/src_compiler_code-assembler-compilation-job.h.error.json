{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/code-assembler-compilation-job.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 135, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/code-assembler-compilation-job.h\",\n            \"file_name\": \"code-assembler-compilation-job.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the CodeAssemblerCompilationJob class, which is a base class for compilation jobs that use the CodeAssembler to generate code.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary header files from the V8 codebase for code generation, compilation, and optimization.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/codegen/assembler.h\"\n#include \"src/codegen/compiler.h\"\n#include \"src/codegen/optimized-compilation-info.h\"\n#include \"src/compiler/code-assembler.h\"\n#include \"src/compiler/node-origin-table.h\"\n#include \"src/compiler/pipeline-statistics.h\"\n#include \"src/compiler/zone-stats.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CodeAssemblerCompilationJob\",\n                \"extends\": \"TurbofanCompilationJob\",\n                \"about\": \"A base class for compilation jobs that use the CodeAssembler to generate code. Manages the compilation pipeline and code generation process.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"generator_\",\n                        \"type\": \"CodeAssemblerGenerator\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A function that generates the code using the CodeAssembler.\"\n                    },\n                    {\n                        \"name\": \"installer_\",\n                        \"type\": \"CodeAssemblerInstaller\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A function that installs the generated code.\"\n                    },\n                    {\n                        \"name\": \"profile_data_\",\n                        \"type\": \"const ProfileDataFromFile*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Profiling data used during compilation.\"\n                    },\n                    {\n                        \"name\": \"initial_graph_hash_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Hash of the initial graph state.\"\n                    },\n                    {\n                        \"name\": \"zone_\",\n                        \"type\": \"Zone\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Memory zone for allocating temporary data during compilation.\"\n                    },\n                    {\n                        \"name\": \"zone_stats_\",\n                        \"type\": \"ZoneStats\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Statistics about the memory zone usage.\"\n                    },\n                    {\n                        \"name\": \"code_assembler_state_\",\n                        \"type\": \"CodeAssemblerState\",\n                        \"access\": \"private\",\n                        \"purpose\": \"State of the CodeAssembler.\"\n                    },\n                    {\n                        \"name\": \"assembler_options_\",\n                        \"type\": \"AssemblerOptions\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Options for the assembler.\"\n                    },\n                    {\n                        \"name\": \"compilation_info_\",\n                        \"type\": \"OptimizedCompilationInfo\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Information about the compilation process.\"\n                    },\n                    {\n                        \"name\": \"node_origins_\",\n                        \"type\": \"std::optional<NodeOriginTable>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Optional table to store the origin of nodes.\"\n                    },\n                    {\n                        \"name\": \"jump_opt_\",\n                        \"type\": \"std::unique_ptr<JumpOptimizationInfo>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Optional jump optimization information.\"\n                    },\n                    {\n                        \"name\": \"pipeline_statistics_\",\n                        \"type\": \"std::unique_ptr<TurbofanPipelineStatistics>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Optional statistics about the Turbofan pipeline.\"\n                    },\n                    {\n                        \"name\": \"finalize_order_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Used to deterministically order finalization.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"TurbofanCompilationJob\",\n                    \"CodeAssemblerGenerator\",\n                    \"CodeAssemblerInstaller\",\n                    \"AssemblerOptions\",\n                    \"CallDescriptor\",\n                    \"CodeKind\",\n                    \"ProfileDataFromFile\",\n                    \"TFGraph\",\n                    \"PipelineImpl\",\n                    \"TFPipelineData\",\n                    \"CodeAssemblerState\",\n                    \"OptimizedCompilationInfo\",\n                    \"NodeOriginTable\",\n                    \"JumpOptimizationInfo\",\n                    \"TurbofanPipelineStatistics\",\n                    \"RawMachineAssembler\",\n                    \"JSGraph\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass CodeAssemblerCompilationJob : public TurbofanCompilationJob {\n public:\n  using CodeAssemblerGenerator =\n      std::function<void(compiler::CodeAssemblerState*)>;\n  using CodeAssemblerInstaller =\n      std::function<void(Builtin builtin, Handle<Code> code)>;\n\n  CodeAssemblerCompilationJob(\n      Isolate* isolate, Builtin builtin, CodeAssemblerGenerator generator,\n      CodeAssemblerInstaller installer,\n      const AssemblerOptions& assembler_options,\n      std::function<compiler::CallDescriptor*(Zone*)> get_call_descriptor,\n      CodeKind code_kind, const char* name,\n      const ProfileDataFromFile* profile_data, int finalize_order);\n\n  CodeAssemblerCompilationJob(const CodeAssemblerCompilationJob&) = delete;\n  CodeAssemblerCompilationJob& operator=(const CodeAssemblerCompilationJob&) =\n      delete;\n\n  static constexpr int kNoFinalizeOrder = -1;\n  int FinalizeOrder() const final {\n    DCHECK_NE(kNoFinalizeOrder, finalize_order_);\n    return finalize_order_;\n  }\n\n protected:\n  struct TFDataAndPipeline;\n\n  friend class CodeAssemblerTester;\n  V8_EXPORT_PRIVATE static std::unique_ptr<CodeAssemblerCompilationJob>\n  NewJobForTesting(\n      Isolate* isolate, Builtin builtin, CodeAssemblerGenerator generator,\n      CodeAssemblerInstaller installer,\n      std::function<compiler::CallDescriptor*(Zone*)> get_call_descriptor,\n      CodeKind code_kind, const char* name);\n\n  static bool ShouldOptimizeJumps(Isolate* isolate);\n\n  RawMachineAssembler* raw_assembler() {\n    return code_assembler_state_.raw_assembler_.get();\n  }\n  JSGraph* jsgraph() { return code_assembler_state_.jsgraph_; }\n\n  Status PrepareJobImpl(Isolate* isolate) final;\n  // ExecuteJobImpl is implemented in subclasses, as pipelines differ between\n  // using Turbofan and Turboshaft.\n  Status FinalizeJobImpl(Isolate* isolate) final;\n\n  virtual PipelineImpl* EmplacePipeline(Isolate* isolate) = 0;\n  virtual Handle<Code> FinalizeCode(Isolate* isolate) = 0;\n\n  CodeAssemblerGenerator generator_;\n  CodeAssemblerInstaller installer_;\n  const ProfileDataFromFile* profile_data_;\n  int initial_graph_hash_ = 0;\n\n  Zone zone_;\n  ZoneStats zone_stats_;\n  CodeAssemblerState code_assembler_state_;\n  AssemblerOptions assembler_options_;\n  OptimizedCompilationInfo compilation_info_;\n  std::optional<NodeOriginTable> node_origins_;\n\n  // Conditionally allocated, depending on flags.\n  std::unique_ptr<JumpOptimizationInfo> jump_opt_;\n  std::unique_ptr<TurbofanPipelineStatistics> pipeline_statistics_;\n\n  // Used to deterministically order finalization.\n  int finalize_order_;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TurbofanCompilationJob\",\n                    \"about\": \"Base class for Turbofan compilation jobs.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class TurbofanCompilationJob {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"CodeAssemblerState\",\n                    \"about\": \"Represents the state of the CodeAssembler.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class CodeAssemblerState {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AssemblerOptions\",\n                    \"about\": \"Options for the assembler.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class AssemblerOptions {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"OptimizedCompilationInfo\",\n                    \"about\": \"Information about the optimized compilation process.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class OptimizedCompilationInfo {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"NodeOriginTable\",\n                    \"about\": \"Table to store node origins.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class NodeOriginTable {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JumpOptimizationInfo\",\n                    \"about\": \"Information used for jump optimization.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class JumpOptimizationInfo {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TurbofanPipelineStatistics\",\n                    \"about\": \"Statistics about the Turbofan pipeline.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class TurbofanPipelineStatistics {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"RawMachineAssembler\",\n                    \"about\": \"Raw machine assembler.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class RawMachineAssembler {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSGraph\",\n                    \"about\": \"Represents the JavaScript graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class JSGraph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TFGraph\",\n                    \"about\": \"Represents a Turbofan graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\n              class TFGraph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"PipelineImpl\",\n                    \"about\": \"Abstract interface for pipeline implementations.\"\n                }\n            </metadata>\n            <code><![CDATA[\n              class PipelineImpl {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TFPipelineData\",\n                    \"about\": \"Data structure for the Turbofan pipeline.\"\n                }\n            </metadata>\n            <code><![CDATA[\n              class TFPipelineData {};\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"CallDescriptor\",\n                    \"about\": \"Describes the calling convention.\",\n                    \"return\": {\n                        \"type\": \"pointer\",\n                        \"description\": \"Pointer to a CallDescriptor object.\"\n                    }\n                }\n            </metadata>\n            <code><![CDATA[\n              class CallDescriptor {};\n            ]]></code>\n        </func>\n    </dependencies>\n</file>\n```"
}