{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/machine-operator.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/machine-operator.cc\",\n            \"file_name\": \"machine-operator.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines operators for machine-level operations in the V8 compiler, including arithmetic, memory access, and SIMD operations.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include necessary header files for compiler, base utilities, and optional features.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/machine-operator.h\"\n\n#include <optional>\n\n#include \"src/base/lazy-instance.h\"\n#include \"src/compiler/opcodes.h\"\n#include \"src/compiler/operator.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"StoreRepresentation\",\n                \"about\": \"Compares two StoreRepresentation objects for equality.\",\n                \"logic\": \"Returns true if both the representation and write barrier kind are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"StoreRepresentation\",\n                        \"purpose\": \"Left-hand side StoreRepresentation object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"StoreRepresentation\",\n                        \"purpose\": \"Right-hand side StoreRepresentation object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(StoreRepresentation lhs, StoreRepresentation rhs) {\n  return lhs.representation() == rhs.representation() &&\n         lhs.write_barrier_kind() == rhs.write_barrier_kind();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"StoreRepresentation\",\n                \"about\": \"Compares two StoreRepresentation objects for inequality.\",\n                \"logic\": \"Returns true if the objects are not equal, using the == operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"StoreRepresentation\",\n                        \"purpose\": \"Left-hand side StoreRepresentation object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"StoreRepresentation\",\n                        \"purpose\": \"Right-hand side StoreRepresentation object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(StoreRepresentation lhs, StoreRepresentation rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"StoreRepresentation\",\n                \"about\": \"Calculates the hash value for a StoreRepresentation object.\",\n                \"logic\": \"Combines the hash values of the representation and write barrier kind.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"rep\",\n                        \"type\": \"StoreRepresentation\",\n                        \"purpose\": \"The StoreRepresentation object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the StoreRepresentation object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(StoreRepresentation rep) {\n  return base::hash_combine(rep.representation(), rep.write_barrier_kind());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"StoreRepresentation\",\n                \"about\": \"Overloads the stream insertion operator for StoreRepresentation.\",\n                \"logic\": \"Outputs the representation and write barrier kind to the stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"rep\",\n                        \"type\": \"StoreRepresentation\",\n                        \"purpose\": \"The StoreRepresentation object to output.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, StoreRepresentation rep) {\n  return os << rep.representation() << \", \" << rep.write_barrier_kind();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"AtomicStoreParameters\",\n                \"about\": \"Compares two AtomicStoreParameters objects for equality.\",\n                \"logic\": \"Returns true if the store representation, order, and kind are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"AtomicStoreParameters\",\n                        \"purpose\": \"Left-hand side AtomicStoreParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"AtomicStoreParameters\",\n                        \"purpose\": \"Right-hand side AtomicStoreParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(AtomicStoreParameters lhs, AtomicStoreParameters rhs) {\n  return lhs.store_representation() == rhs.store_representation() &&\n         lhs.order() == rhs.order() && lhs.kind() == rhs.kind();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"AtomicStoreParameters\",\n                \"about\": \"Compares two AtomicStoreParameters objects for inequality.\",\n                \"logic\": \"Returns true if the objects are not equal, using the == operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"AtomicStoreParameters\",\n                        \"purpose\": \"Left-hand side AtomicStoreParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"AtomicStoreParameters\",\n                        \"purpose\": \"Right-hand side AtomicStoreParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(AtomicStoreParameters lhs, AtomicStoreParameters rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"AtomicStoreParameters\",\n                \"about\": \"Calculates the hash value for an AtomicStoreParameters object.\",\n                \"logic\": \"Combines the hash values of the store representation, order, and kind.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"AtomicStoreParameters\",\n                        \"purpose\": \"The AtomicStoreParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the AtomicStoreParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\",\n                    \"hash_value(params.store_representation())\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(AtomicStoreParameters params) {\n  return base::hash_combine(hash_value(params.store_representation()),\n                            params.order(), params.kind());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"AtomicStoreParameters\",\n                \"about\": \"Overloads the stream insertion operator for AtomicStoreParameters.\",\n                \"logic\": \"Outputs the store representation and order to the stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"AtomicStoreParameters\",\n                        \"purpose\": \"The AtomicStoreParameters object to output.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, AtomicStoreParameters params) {\n  return os << params.store_representation() << \", \" << params.order();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"AtomicLoadParameters\",\n                \"about\": \"Compares two AtomicLoadParameters objects for equality.\",\n                \"logic\": \"Returns true if the representation, order, and kind are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"AtomicLoadParameters\",\n                        \"purpose\": \"Left-hand side AtomicLoadParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"AtomicLoadParameters\",\n                        \"purpose\": \"Right-hand side AtomicLoadParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(AtomicLoadParameters lhs, AtomicLoadParameters rhs) {\n  return lhs.representation() == rhs.representation() &&\n         lhs.order() == rhs.order() && lhs.kind() == rhs.kind();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"AtomicLoadParameters\",\n                \"about\": \"Compares two AtomicLoadParameters objects for inequality.\",\n                \"logic\": \"Returns true if the objects are not equal, using the == operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"AtomicLoadParameters\",\n                        \"purpose\": \"Left-hand side AtomicLoadParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"AtomicLoadParameters\",\n                        \"purpose\": \"Right-hand side AtomicLoadParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(AtomicLoadParameters lhs, AtomicLoadParameters rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"AtomicLoadParameters\",\n                \"about\": \"Calculates the hash value for an AtomicLoadParameters object.\",\n                \"logic\": \"Combines the hash values of the representation, order, and kind.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"AtomicLoadParameters\",\n                        \"purpose\": \"The AtomicLoadParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the AtomicLoadParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(AtomicLoadParameters params) {\n  return base::hash_combine(params.representation(), params.order(),\n                            params.kind());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"AtomicLoadParameters\",\n                \"about\": \"Overloads the stream insertion operator for AtomicLoadParameters.\",\n                \"logic\": \"Outputs the representation and order to the stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"AtomicLoadParameters\",\n                        \"purpose\": \"The AtomicLoadParameters object to output.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, AtomicLoadParameters params) {\n  return os << params.representation() << \", \" << params.order();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"AtomicOpParameters\",\n                \"about\": \"Compares two AtomicOpParameters objects for equality.\",\n                \"logic\": \"Returns true if the type and kind are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"AtomicOpParameters\",\n                        \"purpose\": \"Left-hand side AtomicOpParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"AtomicOpParameters\",\n                        \"purpose\": \"Right-hand side AtomicOpParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(AtomicOpParameters lhs, AtomicOpParameters rhs) {\n  return lhs.type() == rhs.type() && lhs.kind() == rhs.kind();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"AtomicOpParameters\",\n                \"about\": \"Compares two AtomicOpParameters objects for inequality.\",\n                \"logic\": \"Returns true if the objects are not equal, using the == operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"AtomicOpParameters\",\n                        \"purpose\": \"Left-hand side AtomicOpParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"AtomicOpParameters\",\n                        \"purpose\": \"Right-hand side AtomicOpParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(AtomicOpParameters lhs, AtomicOpParameters rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"AtomicOpParameters\",\n                \"about\": \"Calculates the hash value for an AtomicOpParameters object.\",\n                \"logic\": \"Combines the hash values of the type and kind.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"AtomicOpParameters\",\n                        \"purpose\": \"The AtomicOpParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the AtomicOpParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(AtomicOpParameters params) {\n  return base::hash_combine(params.type(), params.kind());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"AtomicOpParameters\",\n                \"about\": \"Overloads the stream insertion operator for AtomicOpParameters.\",\n                \"logic\": \"Outputs the type and kind to the stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"AtomicOpParameters\",\n                        \"purpose\": \"The AtomicOpParameters object to output.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, AtomicOpParameters params) {\n  return os << params.type() << \", \" << params.kind();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"MemoryAccessKind\",\n                \"about\": \"Calculates the hash value for a MemoryAccessKind enum.\",\n                \"logic\": \"Casts the enum to a size_t for hashing.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"MemoryAccessKind\",\n                        \"purpose\": \"The MemoryAccessKind enum to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the MemoryAccessKind enum.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(MemoryAccessKind kind) { return static_cast<size_t>(kind); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"MemoryAccessKind\",\n                \"about\": \"Overloads the stream insertion operator for MemoryAccessKind enum.\",\n                \"logic\": \"Outputs a string representation of the MemoryAccessKind to the stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"MemoryAccessKind\",\n                        \"purpose\": \"The MemoryAccessKind enum to output.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, MemoryAccessKind kind) {\n  switch (kind) {\n    case MemoryAccessKind::kNormal:\n      return os << \"kNormal\";\n    case MemoryAccessKind::kUnaligned:\n      return os << \"kUnaligned\";\n    case MemoryAccessKind::kProtectedByTrapHandler:\n      return os << \"kProtected\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"LoadTransformation\",\n                \"about\": \"Calculates the hash value for a LoadTransformation enum.\",\n                \"logic\": \"Casts the enum to a size_t for hashing.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"rep\",\n                        \"type\": \"LoadTransformation\",\n                        \"purpose\": \"The LoadTransformation enum to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the LoadTransformation enum.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(LoadTransformation rep) { return static_cast<size_t>(rep); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"LoadTransformation\",\n                \"about\": \"Overloads the stream insertion operator for LoadTransformation enum.\",\n                \"logic\": \"Outputs a string representation of the LoadTransformation to the stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"rep\",\n                        \"type\": \"LoadTransformation\",\n                        \"purpose\": \"The LoadTransformation enum to output.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, LoadTransformation rep) {\n  switch (rep) {\n    case LoadTransformation::kS128Load8Splat:\n      return os << \"kS128Load8Splat\";\n    case LoadTransformation::kS128Load16Splat:\n      return os << \"kS128Load16Splat\";\n    case LoadTransformation::kS128Load32Splat:\n      return os << \"kS128Load32Splat\";\n    case LoadTransformation::kS128Load64Splat:\n      return os << \"kS128Load64Splat\";\n    case LoadTransformation::kS128Load8x8S:\n      return os << \"kS128Load8x8S\";\n    case LoadTransformation::kS128Load8x8U:\n      return os << \"kS128Load8x8U\";\n    case LoadTransformation::kS128Load16x4S:\n      return os << \"kS128Load16x4S\";\n    case LoadTransformation::kS128Load16x4U:\n      return os << \"kS128Load16x4U\";\n    case LoadTransformation::kS128Load32x2S:\n      return os << \"kS128Load32x2S\";\n    case LoadTransformation::kS128Load32x2U:\n      return os << \"kS128Load32x2U\";\n    case LoadTransformation::kS128Load32Zero:\n      return os << \"kS128Load32Zero\";\n    case LoadTransformation::kS128Load64Zero:\n      return os << \"kS128Load64Zero\";\n    // Simd256\n    case LoadTransformation::kS256Load8Splat:\n      return os << \"kS256Load8Splat\";\n    case LoadTransformation::kS256Load16Splat:\n      return os << \"kS256Load16Splat\";\n    case LoadTransformation::kS256Load32Splat:\n      return os << \"kS256Load32Splat\";\n    case LoadTransformation::kS256Load64Splat:\n      return os << \"kS256Load64Splat\";\n    case LoadTransformation::kS256Load8x16S:\n      return os << \"kS256Load8x16S\";\n    case LoadTransformation::kS256Load8x16U:\n      return os << \"kS256Load8x16U\";\n    case LoadTransformation::kS256Load8x8U:\n      return os << \"kS256Load8x8U\";\n    case LoadTransformation::kS256Load16x8S:\n      return os << \"kS256Load16x8S\";\n    case LoadTransformation::kS256Load16x8U:\n      return os << \"kS256Load16x8U\";\n    case LoadTransformation::kS256Load32x4S:\n      return os << \"kS256Load32x4S\";\n    case LoadTransformation::kS256Load32x4U:\n      return os << \"kS256Load32x4U\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"LoadTransformParameters\",\n                \"about\": \"Calculates the hash value for LoadTransformParameters\",\n                \"logic\": \"Uses base::hash_combine to create hash value\",\n                \"parameters\": [\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"LoadTransformParameters\",\n                        \"purpose\": \"Load transform parameters\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"Returns combined hash\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(LoadTransformParameters params) {\n  return base::hash_combine(params.kind, params.transformation);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"LoadTransformParameters\",\n                \"about\": \"Overloads << operator for LoadTransformParameters\",\n                \"logic\": \"Formats and prints load transform parameters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream\"\n                    },\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"LoadTransformParameters\",\n                        \"purpose\": \"Load transform parameters\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"Returns output stream\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, LoadTransformParameters params) {\n  return os << \"(\" << params.kind << \" \" << params.transformation << \")\";\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"LoadTransformParametersOf\",\n                \"about\": \"Retrieves LoadTransformParameters from operator\",\n                \"logic\": \"Asserts correct opcode and calls OpParameter\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"Operator to extract parameters from\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"LoadTransformParameters const&\",\n                    \"description\": \"LoadTransformParameters\"\n                },\n                \"dependencies\": [\n                    \"IrOpcode::kLoadTransform\",\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nLoadTransformParameters const& LoadTransformParametersOf(Operator const* op) {\n  DCHECK_EQ(IrOpcode::kLoadTransform, op->opcode());\n  return OpParameter<LoadTransformParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"LoadTransformParameters\",\n                \"about\": \"Checks equality of LoadTransformParameters\",\n                \"logic\": \"Compares transformation and kind\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"LoadTransformParameters\",\n                        \"purpose\": \"Left hand side\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"LoadTransformParameters\",\n                        \"purpose\": \"Right hand side\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"Returns true if equal\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(LoadTransformParameters lhs, LoadTransformParameters rhs) {\n  return lhs.transformation == rhs.transformation && lhs.kind == rhs.kind;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"LoadTransformParameters\",\n                \"about\": \"Checks inequality of LoadTransformParameters\",\n                \"logic\": \"Returns negation of equality\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"LoadTransformParameters\",\n                        \"purpose\": \"Left hand side\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"LoadTransformParameters\",\n                        \"purpose\": \"Right hand side\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"Returns true if not equal\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(LoadTransformParameters lhs, LoadTransformParameters rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"LoadLaneParameters\",\n                \"about\": \"Calculates hash value for LoadLaneParameters\",\n                \"logic\": \"Uses base::hash_combine\",\n                \"parameters\": [\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"LoadLaneParameters\",\n                        \"purpose\": \"Load lane parameters\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"Returns the hash value\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(LoadLaneParameters params) {\n  return base::hash_combine(params.kind, params.rep, params.laneidx);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"LoadLaneParameters\",\n                \"about\": \"Overloads << for LoadLaneParameters\",\n                \"logic\": \"Formats output of LoadLaneParameters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream\"\n                    },\n                    {\n                        \"name\": \"params\",\n                        \"type\": \"LoadLaneParameters\",\n                        \"purpose\": \"Load lane parameters\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"Output stream\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, LoadLaneParameters params) {\n  return os << \"(\" << params.kind << \" \" << params.rep << \" \"\n            << static_cast<uint32_t>(params.laneidx) << \")\";\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"LoadLaneParametersOf\",\n                \"about\": \"Retrieves LoadLaneParameters from operator\",\n                \"logic\": \"Asserts correct opcode and retrieves OpParameter\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"Operator to extract from\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"LoadLaneParameters const&\",\n                    \"description\": \"LoadLaneParameters\"\n                },\n                \"dependencies\": [\n                    \"IrOpcode::kLoadLane\",\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nLoadLaneParameters const"
}