{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/baseline/baseline-assembler-inl.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 635, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/baseline/baseline-assembler-inl.h\",\n            \"file_name\": \"baseline-assembler-inl.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Inline implementations for the BaselineAssembler class, providing architecture-specific assembly code generation for the V8 JavaScript engine's baseline compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include necessary headers for baseline assembler functionality, standard library features, code generation, interpreter, and object representation.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/baseline/baseline-assembler.h\"\n\n#include <type_traits>\n#include <unordered_map>\n\n#include \"src/codegen/interface-descriptors-inl.h\"\n#include \"src/interpreter/bytecode-register.h\"\n#include \"src/objects/feedback-cell.h\"\n#include \"src/objects/js-function.h\"\n#include \"src/objects/map.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include architecture-specific assembler implementations based on preprocessor definitions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_TARGET_ARCH_X64\n#include \"src/baseline/x64/baseline-assembler-x64-inl.h\"\n#elif V8_TARGET_ARCH_ARM64\n#include \"src/baseline/arm64/baseline-assembler-arm64-inl.h\"\n#elif V8_TARGET_ARCH_IA32\n#include \"src/baseline/ia32/baseline-assembler-ia32-inl.h\"\n#elif V8_TARGET_ARCH_ARM\n#include \"src/baseline/arm/baseline-assembler-arm-inl.h\"\n#elif V8_TARGET_ARCH_PPC64\n#include \"src/baseline/ppc/baseline-assembler-ppc-inl.h\"\n#elif V8_TARGET_ARCH_S390X\n#include \"src/baseline/s390/baseline-assembler-s390-inl.h\"\n#elif V8_TARGET_ARCH_RISCV32 || V8_TARGET_ARCH_RISCV64\n#include \"src/baseline/riscv/baseline-assembler-riscv-inl.h\"\n#elif V8_TARGET_ARCH_MIPS64\n#include \"src/baseline/mips64/baseline-assembler-mips64-inl.h\"\n#elif V8_TARGET_ARCH_LOONG64\n#include \"src/baseline/loong64/baseline-assembler-loong64-inl.h\"\n#else\n#error Unsupported target architecture.\n#endif\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetCode\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Retrieves the generated code from the assembler.\",\n                \"logic\": \"Calls the GetCode method of the underlying assembler (masm_).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"isolate\",\n                        \"type\": \"LocalIsolate*\",\n                        \"purpose\": \"The isolate to get code from.\"\n                    },\n                    {\n                        \"name\": \"desc\",\n                        \"type\": \"CodeDesc*\",\n                        \"purpose\": \"Pointer to the CodeDesc structure to store code information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::GetCode(LocalIsolate* isolate, CodeDesc* desc) {\n  __ GetCode(isolate, desc);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"pc_offset\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Gets the program counter offset.\",\n                \"logic\": \"Returns the current program counter offset from the underlying assembler.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The program counter offset.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nint BaselineAssembler::pc_offset() const { return __ pc_offset(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CodeEntry\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Marks the code entry point.\",\n                \"logic\": \"Marks the entry point of the generated code in the underlying assembler.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::CodeEntry() const { __ CodeEntry(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ExceptionHandler\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Marks the exception handler.\",\n                \"logic\": \"Marks the exception handler in the generated code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::ExceptionHandler() const { __ ExceptionHandler(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"RecordComment\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Records a comment in the generated code.\",\n                \"logic\": \"Records a comment if code comments are enabled via the v8_flags.code_comments flag.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"string\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"The comment string.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::RecordComment(const char* string) {\n  if (!v8_flags.code_comments) return;\n  __ RecordComment(string);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Trap\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Inserts a trap instruction.\",\n                \"logic\": \"Inserts a trap instruction in the generated code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Trap() { __ Trap(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"DebugBreak\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Inserts a debug break instruction.\",\n                \"logic\": \"Inserts a debug break instruction in the generated code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::DebugBreak() { __ DebugBreak(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CallRuntime\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Calls a runtime function.\",\n                \"logic\": \"Calls a runtime function with a specified number of arguments.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"function\",\n                        \"type\": \"Runtime::FunctionId\",\n                        \"purpose\": \"The ID of the runtime function to call.\"\n                    },\n                    {\n                        \"name\": \"nargs\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of arguments to pass to the function.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::CallRuntime(Runtime::FunctionId function, int nargs) {\n  __ CallRuntime(function, nargs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CallBuiltin\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Calls a builtin function.\",\n                \"logic\": \"Calls a builtin function. The BaselineAssemblerOptions determine how builtin calls are generated.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"builtin\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The builtin function to call.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::CallBuiltin(Builtin builtin) {\n  // BaselineAssemblerOptions defines how builtin calls are generated.\n  __ CallBuiltin(builtin);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TailCallBuiltin\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Tail calls a builtin function.\",\n                \"logic\": \"Tail calls a builtin function. The BaselineAssemblerOptions determine how builtin tail calls are generated.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"builtin\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The builtin function to tail call.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::TailCallBuiltin(Builtin builtin) {\n  // BaselineAssemblerOptions defines how builtin tail calls are generated.\n  __ TailCallBuiltin(builtin);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ContextOperand\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Returns a MemOperand for the current context.\",\n                \"logic\": \"Creates a memory operand that refers to the current context register in the frame.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"MemOperand\",\n                    \"description\": \"A MemOperand representing the current context.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nMemOperand BaselineAssembler::ContextOperand() {\n  return RegisterFrameOperand(interpreter::Register::current_context());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"FunctionOperand\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Returns a MemOperand for the function closure.\",\n                \"logic\": \"Creates a memory operand that refers to the function closure register in the frame.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"MemOperand\",\n                    \"description\": \"A MemOperand representing the function closure.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nMemOperand BaselineAssembler::FunctionOperand() {\n  return RegisterFrameOperand(interpreter::Register::function_closure());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadMap\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads the map of an object into a register.\",\n                \"logic\": \"Loads the map from the given value register into the output register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the map into.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the object whose map is to be loaded.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadMap(Register output, Register value) {\n  __ LoadMap(output, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadRoot\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads a root value into a register.\",\n                \"logic\": \"Loads a root value identified by its index into the output register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the root value into.\"\n                    },\n                    {\n                        \"name\": \"index\",\n                        \"type\": \"RootIndex\",\n                        \"purpose\": \"The index of the root value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadRoot(Register output, RootIndex index) {\n  __ LoadRoot(output, index);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadNativeContextSlot\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads a value from a slot in the native context into a register.\",\n                \"logic\": \"Loads a value from the native context at the specified index into the output register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the value into.\"\n                    },\n                    {\n                        \"name\": \"index\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"The index of the slot in the native context.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadNativeContextSlot(Register output, uint32_t index) {\n  __ LoadNativeContextSlot(output, index);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Move\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Moves a value from an interpreter register to a register.\",\n                \"logic\": \"Moves the value stored in the interpreter register 'source' to the register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The destination register.\"\n                    },\n                    {\n                        \"name\": \"source\",\n                        \"type\": \"interpreter::Register\",\n                        \"purpose\": \"The source interpreter register.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Move(Register output, interpreter::Register source) {\n  return __ Move(output, RegisterFrameOperand(source));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Move\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Moves a root value to a register.\",\n                \"logic\": \"Loads a root value identified by RootIndex 'source' into register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The destination register.\"\n                    },\n                    {\n                        \"name\": \"source\",\n                        \"type\": \"RootIndex\",\n                        \"purpose\": \"The root index to load.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Move(Register output, RootIndex source) {\n  return __ LoadRoot(output, source);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Move\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Moves a value from one register to another.\",\n                \"logic\": \"Copies the value from register 'source' to register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The destination register.\"\n                    },\n                    {\n                        \"name\": \"source\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The source register.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Move(Register output, Register source) {\n  __ Move(output, source);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Move\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Moves a value from memory to a register.\",\n                \"logic\": \"Loads the value from the memory location specified by 'operand' into the register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The destination register.\"\n                    },\n                    {\n                        \"name\": \"operand\",\n                        \"type\": \"MemOperand\",\n                        \"purpose\": \"The memory operand specifying the source location.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Move(Register output, MemOperand operand) {\n  __ Move(output, operand);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Move\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Moves a Smi value to a register.\",\n                \"logic\": \"Moves the Smi value 'value' into the register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The destination register.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Tagged<Smi>\",\n                        \"purpose\": \"The Smi value to move.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Move(Register output, Tagged<Smi> value) {\n  __ Move(output, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SmiUntag\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Untags a Smi value in a register.\",\n                \"logic\": \"Removes the Smi tag from the value in the register 'reg'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"reg\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the Smi value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::SmiUntag(Register reg) { __ SmiUntag(reg); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SmiUntag\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Untags a Smi value from one register to another.\",\n                \"logic\": \"Untags the Smi value in 'value' and stores the result in 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to store the untagged value.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the Smi value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::SmiUntag(Register output, Register value) {\n  __ SmiUntag(output, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadFixedArrayElement\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads an element from a FixedArray into a register.\",\n                \"logic\": \"Loads the element at the given 'index' from the FixedArray 'array' into the 'output' register.  Calculates the memory offset based on the index and kTaggedSize.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the element into.\"\n                    },\n                    {\n                        \"name\": \"array\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the FixedArray.\"\n                    },\n                    {\n                        \"name\": \"index\",\n                        \"type\": \"int32_t\",\n                        \"purpose\": \"The index of the element to load.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadFixedArrayElement(Register output, Register array,\n                                              int32_t index) {\n  LoadTaggedField(output, array,\n                  OFFSET_OF_DATA_START(FixedArray) + index * kTaggedSize);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadPrototype\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads the prototype of an object into a register.\",\n                \"logic\": \"Loads the map of the object, and then loads the prototype from the map.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"prototype\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the prototype into.\"\n                    },\n                    {\n                        \"name\": \"object\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadPrototype(Register prototype, Register object) {\n  __ LoadMap(prototype, object);\n  LoadTaggedField(prototype, prototype, Map::kPrototypeOffset);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadContext\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads the current context into a register.\",\n                \"logic\": \"Loads the current context, which is stored in an interpreter register, into the specified register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the context into.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadContext(Register output) {\n  LoadRegister(output, interpreter::Register::current_context());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadFunction\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads the function closure into a register.\",\n                \"logic\": \"Loads the function closure, which is stored in an interpreter register, into the specified register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the function closure into.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadFunction(Register output) {\n  LoadRegister(output, interpreter::Register::function_closure());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"StoreContext\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Stores a register into the current context.\",\n                \"logic\": \"Stores the value of register 'context' into the current context, which is represented as an interpreter register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register holding the context to store.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::StoreContext(Register context) {\n  StoreRegister(interpreter::Register::current_context(), context);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadRegister\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads an interpreter register into a register.\",\n                \"logic\": \"Loads the value from the interpreter register 'source' into the general purpose register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The destination register.\"\n                    },\n                    {\n                        \"name\": \"source\",\n                        \"type\": \"interpreter::Register\",\n                        \"purpose\": \"The source interpreter register.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadRegister(Register output,\n                                     interpreter::Register source) {\n  Move(output, source);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"StoreRegister\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Stores a register into an interpreter register.\",\n                \"logic\": \"Stores the value from the general purpose register 'value' into the interpreter register 'output'.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"interpreter::Register\",\n                        \"purpose\": \"The destination interpreter register.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The source register.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::StoreRegister(interpreter::Register output,\n                                      Register value) {\n  Move(output, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LoadFeedbackCell\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads a FeedbackCell into a register, asserting that the value is a FeedbackCell.\",\n                \"logic\": \"Loads the FeedbackCell using FeedbackCellOperand() which returns a MemOperand to the feedback cell.  Then it allocates a scratch register and asserts that the loaded value is indeed a FeedbackCell.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"output\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to load the FeedbackCell into.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::LoadFeedbackCell(Register output) {\n  Move(output, FeedbackCellOperand());\n  ScratchRegisterScope scratch_scope(this);\n  Register scratch = scratch_scope.AcquireScratch();\n  __ AssertFeedbackCell(output, scratch);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"DecodeField\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Decodes a field in a register.\",\n                \"logic\": \"Calls the architecture-specific DecodeField instruction.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"reg\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the field to decode.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Field>\nvoid BaselineAssembler::DecodeField(Register reg) {\n  __ DecodeField<Field>(reg);\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"EnsureAccumulatorPreservedScope\",\n                \"about\": \"A class that ensures the interpreter accumulator register is preserved across a scope by pushing it onto the stack and popping it back.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nEnsureAccumulatorPreservedScope::EnsureAccumulatorPreservedScope(\n    BaselineAssembler* assembler)\n    : assembler_(assembler)\n#ifdef V8_CODE_COMMENTS\n      ,\n      comment_(assembler->masm(), \"EnsureAccumulatorPreservedScope\")\n#endif\n{\n  assembler_->Push(kInterpreterAccumulatorRegister);\n}\n\nEnsureAccumulatorPreservedScope::~EnsureAccumulatorPreservedScope() {\n  BaselineAssembler::ScratchRegisterScope scratch(assembler_);\n  Register reg = scratch.AcquireScratch();\n  assembler_->Pop(reg);\n  AssertEqualToAccumulator(reg);\n}\n        ]]></code>\n    </class>\n</file>\n```"
}