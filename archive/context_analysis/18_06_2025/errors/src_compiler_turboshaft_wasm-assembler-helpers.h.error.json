{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/wasm-assembler-helpers.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 55, column 40",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/wasm-assembler-helpers.h\",\n        \"file_name\": \"wasm-assembler-helpers.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides helper functions and macros for generating WebAssembly code within the Turboshaft compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for Turboshaft operations and root table access.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/operations.h\"\n#include \"src/roots/roots.h\"\n        ]]></code>\n    </imports>\n\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"RootTypes\",\n            \"about\": \"Defines type aliases for different root table entries, making it easier to refer to them with their proper types. Uses a macro to define the types based on ROOT_LIST.\",\n            \"dependencies\": [\n                \"ROOT_LIST\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct RootTypes {\n#define DEFINE_TYPE(type, name, CamelName) using k##CamelName##Type = type;\n  ROOT_LIST(DEFINE_TYPE)\n#undef DEFINE_TYPE\n};\n        ]]></code>\n    </struct>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"LoadRootHelper\",\n            \"about\": \"Helper function to load a root from the root table. Handles both immortal immovable roots and other roots that may be collected/moved by the garbage collector.\",\n            \"logic\": \"Checks if the root is immortal and immovable. If so, it loads the root without bitcasting, assuming the value doesn't need tagging. Otherwise, it loads the root and bitcasts it to a tagged pointer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"assembler\",\n                    \"type\": \"AssemblerT&&\",\n                    \"purpose\": \"The assembler object used to generate code.\"\n                },\n                {\n                    \"name\": \"index\",\n                    \"type\": \"RootIndex\",\n                    \"purpose\": \"The index of the root to load.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"OpIndex\",\n                \"description\": \"The OpIndex representing the loaded root value.\"\n            },\n            \"dependencies\": [\n                \"RootsTable\",\n                \"IsolateData\",\n                \"LoadOp\",\n                \"MemoryRepresentation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename AssemblerT>\nOpIndex LoadRootHelper(AssemblerT&& assembler, RootIndex index) {\n  if (RootsTable::IsImmortalImmovable(index)) {\n    // Note that we skip the bit cast here as the value does not need to be\n    // tagged as the object will never be collected / moved.\n    return assembler.Load(\n        assembler.LoadRootRegister(), LoadOp::Kind::RawAligned().Immutable(),\n        MemoryRepresentation::UintPtr(), IsolateData::root_slot_offset(index));\n  } else {\n    return assembler.BitcastWordPtrToTagged(assembler.Load(\n        assembler.LoadRootRegister(), LoadOp::Kind::RawAligned(),\n        MemoryRepresentation::UintPtr(), IsolateData::root_slot_offset(index)));\n  }\n}\n        ]]></code>\n    </func>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"LOAD_INSTANCE_FIELD\",\n            \"about\": \"Macro to load a field from a WebAssembly instance.  Specifies the load kind as TaggedBase.\",\n            \"dependencies\": [\n                \"WasmTrustedInstanceData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define LOAD_INSTANCE_FIELD(instance, name, representation)     \\\n  __ Load(instance, LoadOp::Kind::TaggedBase(), representation, \\\n          WasmTrustedInstanceData::k##name##Offset)\n        ]]></code>\n    </macro>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"LOAD_PROTECTED_INSTANCE_FIELD\",\n            \"about\": \"Macro to load a protected pointer field from a WebAssembly instance. Uses `__LoadProtectedPointerField` which probably performs checks.\",\n            \"dependencies\": [\n                \"WasmTrustedInstanceData\",\n                \"__LoadProtectedPointerField\",\n                \"V\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define LOAD_PROTECTED_INSTANCE_FIELD(instance, name, type) \\\n  V<type>::Cast(__ LoadProtectedPointerField(               \\\n      instance, LoadOp::Kind::TaggedBase(),                 \\\n      WasmTrustedInstanceData::kProtected##name##Offset))\n        ]]></code>\n    </macro>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"LOAD_IMMUTABLE_PROTECTED_INSTANCE_FIELD\",\n            \"about\": \"Macro to load an immutable protected pointer field from a WebAssembly instance.  Specifies the load kind as TaggedBase().Immutable().\",\n            \"dependencies\": [\n                \"WasmTrustedInstanceData\",\n                \"__LoadProtectedPointerField\",\n                \"V\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define LOAD_IMMUTABLE_PROTECTED_INSTANCE_FIELD(instance, name, type) \\\n  V<type>::Cast(__ LoadProtectedPointerField(                         \\\n      instance, LoadOp::Kind::TaggedBase().Immutable(),               \\\n      WasmTrustedInstanceData::kProtected##name##Offset))\n        ]]></code>\n    </macro>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"LOAD_IMMUTABLE_INSTANCE_FIELD\",\n            \"about\": \"Macro to load an immutable field from a WebAssembly instance. Specifies the load kind as TaggedBase().Immutable().\",\n            \"dependencies\": [\n                \"WasmTrustedInstanceData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define LOAD_IMMUTABLE_INSTANCE_FIELD(instance, name, representation)       \\\n  __ Load(instance, LoadOp::Kind::TaggedBase().Immutable(), representation, \\\n          WasmTrustedInstanceData::k##name##Offset)\n        ]]></code>\n    </macro>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"LOAD_ROOT\",\n            \"about\": \"Macro to load a root from the root table using the LoadRootHelper function.\",\n            \"dependencies\": [\n                \"LoadRootHelper\",\n                \"RootIndex\",\n                \"V\",\n                \"compiler::turboshaft::RootTypes\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define LOAD_ROOT(name)                                    \\\n  V<compiler::turboshaft::RootTypes::k##name##Type>::Cast( \\\n      LoadRootHelper(Asm(), RootIndex::k##name))\n        ]]></code>\n    </macro>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RootsTable\",\n                \"about\": \"Provides access to the V8 roots table\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class RootsTable {\n                public:\n                    static bool IsImmortalImmovable(RootIndex index);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"IsolateData\",\n                \"about\": \"Provides access to isolate-specific data\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class IsolateData {\n                public:\n                    static int root_slot_offset(RootIndex index);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LoadOp\",\n                \"about\": \"Represents a load operation in Turboshaft IR\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class LoadOp {\n                public:\n                    enum class Kind {\n                        RawAligned,\n                        TaggedBase\n                    };\n                };\n            ]]></code>\n        </class>\n        <enum>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"MemoryRepresentation\",\n                \"about\": \"Describes how a value is represented in memory\"\n            }\n            </metadata>\n            <code><![CDATA[\n                enum class MemoryRepresentation {\n                    UintPtr\n                };\n            ]]></code>\n        </enum>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"WasmTrustedInstanceData\",\n                \"about\": \"Stores offsets of instance fields\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class WasmTrustedInstanceData {\n            public:\n                static constexpr int kFieldNameOffset = 0;\n                static constexpr int kProtectedFieldNameOffset = 0;\n\n            };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RootIndex\",\n                \"about\": \"An index into the root table\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class RootIndex {\n                public:\n                    static constexpr int kRootName = 0;\n            };\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}