{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/common-operator.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/common-operator.cc\",\n            \"file_name\": \"common-operator.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines common operators used in the V8 compiler's intermediate representation (IR).\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary header files for operator definitions, hashing, and other utility functions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/common-operator.h\"\n\n#include <optional>\n\n#include \"src/base/hashing.h\"\n#include \"src/base/lazy-instance.h\"\n#include \"src/compiler/linkage.h\"\n#include \"src/compiler/node.h\"\n#include \"src/compiler/opcodes.h\"\n#include \"src/compiler/operator.h\"\n#include \"src/handles/handles-inl.h\"\n#include \"src/zone/zone.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for BranchHint enum.\",\n                \"logic\": \"Prints the string representation of the BranchHint enum value to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"hint\",\n                        \"type\": \"BranchHint\",\n                        \"purpose\": \"The BranchHint enum value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, BranchHint hint) {\n  switch (hint) {\n    case BranchHint::kNone:\n      return os << \"None\";\n    case BranchHint::kTrue:\n      return os << \"True\";\n    case BranchHint::kFalse:\n      return os << \"False\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for BranchSemantics enum.\",\n                \"logic\": \"Prints the string representation of the BranchSemantics enum value to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"semantics\",\n                        \"type\": \"BranchSemantics\",\n                        \"purpose\": \"The BranchSemantics enum value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, BranchSemantics semantics) {\n  switch (semantics) {\n    case BranchSemantics::kJS:\n      return os << \"JS\";\n    case BranchSemantics::kMachine:\n      return os << \"Machine\";\n    case BranchSemantics::kUnspecified:\n      return os << \"Unspecified\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for TrapId enum.\",\n                \"logic\": \"Prints the string representation of the TrapId enum value to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"trap_id\",\n                        \"type\": \"TrapId\",\n                        \"purpose\": \"The TrapId enum value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nstd::ostream& operator<<(std::ostream& os, TrapId trap_id) {\n  switch (trap_id) {\n#define TRAP_CASE(Name) \\\n  case TrapId::k##Name: \\\n    return os << #Name;\n    FOREACH_WASM_TRAPREASON(TRAP_CASE)\n#undef TRAP_CASE\n  }\n  UNREACHABLE();\n}\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"TrapIdOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the TrapId parameter from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kTrapIf or kTrapUnless and returns the associated TrapId.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the TrapId from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"TrapId\",\n                    \"description\": \"The TrapId parameter of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nTrapId TrapIdOf(const Operator* const op) {\n  DCHECK(op->opcode() == IrOpcode::kTrapIf ||\n         op->opcode() == IrOpcode::kTrapUnless);\n  return OpParameter<TrapId>(op);\n}\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"global\",\n                \"about\": \"Compares two BranchParameters objects for equality.\",\n                \"logic\": \"Checks if the semantics and hint of the two BranchParameters objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"const BranchParameters&\",\n                        \"purpose\": \"The left-hand side BranchParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"const BranchParameters&\",\n                        \"purpose\": \"The right-hand side BranchParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(const BranchParameters& lhs, const BranchParameters& rhs) {\n  return lhs.semantics() == rhs.semantics() && lhs.hint() == rhs.hint();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"global\",\n                \"about\": \"Computes the hash value for a BranchParameters object.\",\n                \"logic\": \"Combines the hash values of the semantics and hint fields.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"const BranchParameters&\",\n                        \"purpose\": \"The BranchParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the BranchParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(const BranchParameters& p) {\n  return base::hash_combine(p.semantics(), p.hint());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for BranchParameters object.\",\n                \"logic\": \"Prints the semantics and hint of the BranchParameters object to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"const BranchParameters&\",\n                        \"purpose\": \"The BranchParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, const BranchParameters& p) {\n  return os << p.semantics() << \", \" << p.hint();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"BranchParametersOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the BranchParameters from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kBranch and returns the associated BranchParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the BranchParameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const BranchParameters&\",\n                    \"description\": \"The BranchParameters of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nconst BranchParameters& BranchParametersOf(const Operator* const op) {\n  DCHECK_EQ(op->opcode(), IrOpcode::kBranch);\n  return OpParameter<BranchParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"BranchHintOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the BranchHint from an Operator. This function is used for IfValue, IfDefault and Branch operators.\",\n                \"logic\": \"Retrieves the BranchHint depending on the opcode of the Operator.  For IfValue it calls IfValueParametersOf(op).hint(), for IfDefault it calls OpParameter<BranchHint>(op), and for Branch it calls BranchParametersOf(op).hint().\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the BranchHint from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"BranchHint\",\n                    \"description\": \"The BranchHint of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"IfValueParametersOf\",\n                    \"BranchParametersOf\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nBranchHint BranchHintOf(const Operator* const op) {\n  switch (op->opcode()) {\n    case IrOpcode::kIfValue:\n      return IfValueParametersOf(op).hint();\n    case IrOpcode::kIfDefault:\n      return OpParameter<BranchHint>(op);\n    // TODO(nicohartmann@): Should remove all uses of BranchHintOf for branches\n    // and replace with BranchParametersOf.\n    case IrOpcode::kBranch:\n      return BranchParametersOf(op).hint();\n    default:\n      UNREACHABLE();\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"global\",\n                \"about\": \"Compares two AssertParameters objects for equality.\",\n                \"logic\": \"Checks if the semantics, condition_string, file and line of the two AssertParameters objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"const AssertParameters&\",\n                        \"purpose\": \"The left-hand side AssertParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"const AssertParameters&\",\n                        \"purpose\": \"The right-hand side AssertParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(const AssertParameters& lhs, const AssertParameters& rhs) {\n  return lhs.semantics() == rhs.semantics() &&\n         strcmp(lhs.condition_string(), rhs.condition_string()) == 0 &&\n         strcmp(lhs.file(), rhs.file()) == 0 && lhs.line() == rhs.line();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"global\",\n                \"about\": \"Computes the hash value for an AssertParameters object.\",\n                \"logic\": \"Combines the hash values of the semantics, condition_string, file and line fields.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"const AssertParameters&\",\n                        \"purpose\": \"The AssertParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the AssertParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\",\n                    \"base::hash_range\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(const AssertParameters& p) {\n  return base::hash_combine(\n      p.semantics(),\n      base::hash_range(\n          p.condition_string(),\n          p.condition_string() + std::strlen(p.condition_string())),\n      base::hash_range(p.file(), p.file() + std::strlen(p.file())), p.line());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for AssertParameters object.\",\n                \"logic\": \"Prints the semantics, condition_string, file and line of the AssertParameters object to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"const AssertParameters&\",\n                        \"purpose\": \"The AssertParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, const AssertParameters& p) {\n  return os << p.semantics() << \", \" << p.condition_string() << \", \" << p.file()\n            << \", \" << p.line();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"AssertParametersOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the AssertParameters from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kAssert and returns the associated AssertParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the AssertParameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const AssertParameters&\",\n                    \"description\": \"The AssertParameters of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nconst AssertParameters& AssertParametersOf(const Operator* const op) {\n  DCHECK_EQ(op->opcode(), IrOpcode::kAssert);\n  return OpParameter<AssertParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ValueInputCountOfReturn\",\n                \"parent\": \"global\",\n                \"about\": \"Calculates the number of value inputs for a Return operator.\",\n                \"logic\": \"Subtracts 1 from the total number of value inputs to exclude the hidden input at index 0.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const* const\",\n                        \"purpose\": \"The Return operator to analyze.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The number of value inputs to the Return operator.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nint ValueInputCountOfReturn(Operator const* const op) {\n  DCHECK_EQ(IrOpcode::kReturn, op->opcode());\n  // Return nodes have a hidden input at index 0 which we ignore in the value\n  // input count.\n  return op->ValueInputCount() - 1;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"global\",\n                \"about\": \"Compares two DeoptimizeParameters objects for equality.\",\n                \"logic\": \"Checks if the reason and feedback of the two DeoptimizeParameters objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"DeoptimizeParameters\",\n                        \"purpose\": \"The left-hand side DeoptimizeParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"DeoptimizeParameters\",\n                        \"purpose\": \"The right-hand side DeoptimizeParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(DeoptimizeParameters lhs, DeoptimizeParameters rhs) {\n  return lhs.reason() == rhs.reason() && lhs.feedback() == rhs.feedback();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"global\",\n                \"about\": \"Compares two DeoptimizeParameters objects for inequality.\",\n                \"logic\": \"Returns the negation of the equality comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"DeoptimizeParameters\",\n                        \"purpose\": \"The left-hand side DeoptimizeParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"DeoptimizeParameters\",\n                        \"purpose\": \"The right-hand side DeoptimizeParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(DeoptimizeParameters lhs, DeoptimizeParameters rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"global\",\n                \"about\": \"Computes the hash value for a DeoptimizeParameters object.\",\n                \"logic\": \"Combines the hash values of the reason and feedback fields.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"DeoptimizeParameters\",\n                        \"purpose\": \"The DeoptimizeParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the DeoptimizeParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\",\n                    \"FeedbackSource::Hash\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(DeoptimizeParameters p) {\n  FeedbackSource::Hash feebdack_hash;\n  return base::hash_combine(p.reason(), feebdack_hash(p.feedback()));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for DeoptimizeParameters object.\",\n                \"logic\": \"Prints the reason and feedback of the DeoptimizeParameters object to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"DeoptimizeParameters\",\n                        \"purpose\": \"The DeoptimizeParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, DeoptimizeParameters p) {\n  return os << p.reason() << \", \" << p.feedback();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DeoptimizeParametersOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the DeoptimizeParameters from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kDeoptimize, kDeoptimizeIf or kDeoptimizeUnless and returns the associated DeoptimizeParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const* const\",\n                        \"purpose\": \"The Operator to retrieve the DeoptimizeParameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"DeoptimizeParameters const&\",\n                    \"description\": \"The DeoptimizeParameters of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDeoptimizeParameters const& DeoptimizeParametersOf(Operator const* const op) {\n  DCHECK(op->opcode() == IrOpcode::kDeoptimize ||\n         op->opcode() == IrOpcode::kDeoptimizeIf ||\n         op->opcode() == IrOpcode::kDeoptimizeUnless);\n  return OpParameter<DeoptimizeParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"global\",\n                \"about\": \"Compares two SelectParameters objects for equality.\",\n                \"logic\": \"Compares the representation, hint, and semantics fields of the two SelectParameters objects.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"SelectParameters const&\",\n                        \"purpose\": \"The left-hand side SelectParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"SelectParameters const&\",\n                        \"purpose\": \"The right-hand side SelectParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(SelectParameters const& lhs, SelectParameters const& rhs) {\n  return lhs.representation() == rhs.representation() &&\n         lhs.hint() == rhs.hint() && lhs.semantics() == rhs.semantics();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"global\",\n                \"about\": \"Compares two SelectParameters objects for inequality.\",\n                \"logic\": \"Negates the result of the equality comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"SelectParameters const&\",\n                        \"purpose\": \"The left-hand side SelectParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"SelectParameters const&\",\n                        \"purpose\": \"The right-hand side SelectParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(SelectParameters const& lhs, SelectParameters const& rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"global\",\n                \"about\": \"Calculates the hash value for a SelectParameters object.\",\n                \"logic\": \"Combines the hash values of the representation, hint, and semantics fields.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"SelectParameters const&\",\n                        \"purpose\": \"The SelectParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the SelectParameters object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(SelectParameters const& p) {\n  return base::hash_combine(p.representation(), p.hint(), p.semantics());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"global\",\n                \"about\": \"Overloads the output stream operator for SelectParameters object.\",\n                \"logic\": \"Prints the representation, hint, and semantics of the SelectParameters object to the output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"SelectParameters const&\",\n                        \"purpose\": \"The SelectParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, SelectParameters const& p) {\n  return os << p.representation() << \", \" << p.hint() << \", \" << p.semantics();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"SelectParametersOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the SelectParameters from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kSelect and returns the associated SelectParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the SelectParameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"SelectParameters const&\",\n                    \"description\": \"The SelectParameters of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nSelectParameters const& SelectParametersOf(const Operator* const op) {\n  DCHECK_EQ(op->opcode(), IrOpcode::kSelect);\n  return OpParameter<SelectParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallDescriptorOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the CallDescriptor from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kCall or kTailCall and returns the associated CallDescriptor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the CallDescriptor from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"CallDescriptor const*\",\n                    \"description\": \"The CallDescriptor of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nCallDescriptor const* CallDescriptorOf(const Operator* const op) {\n  DCHECK(op->opcode() == IrOpcode::kCall ||\n         op->opcode() == IrOpcode::kTailCall);\n  return OpParameter<CallDescriptor const*>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ProjectionIndexOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the projection index from an Operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kProjection and returns the associated index.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the index from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The index of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t ProjectionIndexOf(const Operator* const op) {\n  DCHECK_EQ(IrOpcode::kProjection, op->opcode());\n  return OpParameter<size_t>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"PhiRepresentationOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the MachineRepresentation of a Phi operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kPhi and returns the associated MachineRepresentation.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the MachineRepresentation from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MachineRepresentation\",\n                    \"description\": \"The MachineRepresentation of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nMachineRepresentation PhiRepresentationOf(const Operator* const op) {\n  DCHECK_EQ(IrOpcode::kPhi, op->opcode());\n  return OpParameter<MachineRepresentation>(op);\n}\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"LoopExitValueRepresentationOf\",\n                \"parent\": \"global\",\n                \"about\": \"Retrieves the MachineRepresentation of a LoopExitValue operator.\",\n                \"logic\": \"Asserts that the Operator's opcode is kLoopExitValue and returns the associated MachineRepresentation.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator* const\",\n                        \"purpose\": \"The Operator to retrieve the MachineRepresentation from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MachineRepresentation\",\n                    \"description\": \"The MachineRepresentation of the Operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nMachineRepresentation LoopExitValueRepresentationOf(const"
}