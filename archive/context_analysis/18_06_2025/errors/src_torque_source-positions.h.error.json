{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/source-positions.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 226, column 45",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/source-positions.h\",\n        \"file_name\": \"source-positions.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines structures and classes for managing source positions in the Torque language, used for error reporting and debugging.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard C++ iostream for output stream operations.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <iostream>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes contextual variable utilities from the V8 base library.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/base/contextual.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourceId\",\n            \"about\": \"Represents a unique identifier for a source file.\",\n            \"attributes\": [\n                {\n                    \"name\": \"id_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the integer ID of the source file.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            class SourceId {\n            public:\n                static SourceId Invalid() { return SourceId(-1); }\n                bool IsValid() const { return id_ != -1; }\n                int operator==(const SourceId& s) const { return id_ == s.id_; }\n                bool operator<(const SourceId& s) const { return id_ < s.id_; }\n\n            private:\n                explicit SourceId(int id) : id_(id) {}\n                int id_;\n                friend struct SourcePosition;\n                friend class SourceFileMap;\n            };\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"LineAndColumn\",\n            \"about\": \"Represents a line and column position within a source file.\",\n            \"attributes\": [\n                {\n                    \"name\": \"offset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset from the beginning of the source\"\n                },\n                {\n                    \"name\": \"line\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The line number in the source file.\"\n                },\n                {\n                    \"name\": \"column\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The column number in the source file.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct LineAndColumn {\n                static constexpr int kUnknownOffset = -1;\n\n                int offset;\n                int line;\n                int column;\n\n                static LineAndColumn Invalid() { return {-1, -1, -1}; }\n                static LineAndColumn WithUnknownOffset(int line, int column) {\n                    return {kUnknownOffset, line, column};\n                }\n\n                bool operator==(const LineAndColumn& other) const {\n                    if (offset == kUnknownOffset || other.offset == kUnknownOffset) {\n                        return line == other.line && column == other.column;\n                    }\n                    DCHECK_EQ(offset == other.offset,\n                              line == other.line && column == other.column);\n                    return offset == other.offset;\n                }\n                bool operator!=(const LineAndColumn& other) const {\n                    return !operator==(other);\n                }\n            };\n        ]]></code>\n    </struct>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"SourcePosition\",\n            \"about\": \"Represents a position in the source code, defined by a source file ID, start line/column, and end line/column.\",\n            \"attributes\": [\n                {\n                    \"name\": \"source\",\n                    \"type\": \"SourceId\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The ID of the source file.\"\n                },\n                {\n                    \"name\": \"start\",\n                    \"type\": \"LineAndColumn\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The starting line and column.\"\n                },\n                {\n                    \"name\": \"end\",\n                    \"type\": \"LineAndColumn\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The ending line and column.\"\n                }\n            ],\n            \"dependencies\": [\n                \"SourceId\",\n                \"LineAndColumn\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            struct SourcePosition {\n                SourceId source;\n                LineAndColumn start;\n                LineAndColumn end;\n\n                static SourcePosition Invalid() {\n                    SourcePosition pos{SourceId::Invalid(), LineAndColumn::Invalid(),\n                                       LineAndColumn::Invalid()};\n                    return pos;\n                }\n\n                bool CompareStartIgnoreColumn(const SourcePosition& pos) const {\n                    return start.line == pos.start.line && source == pos.source;\n                }\n\n                bool Contains(LineAndColumn pos) const {\n                    if (pos.line < start.line || pos.line > end.line) return false;\n\n                    if (pos.line == start.line && pos.column < start.column) return false;\n                    if (pos.line == end.line && pos.column >= end.column) return false;\n                    return true;\n                }\n\n                bool operator==(const SourcePosition& pos) const {\n                    return source == pos.source && start == pos.start && end == pos.end;\n                }\n                bool operator!=(const SourcePosition& pos) const { return !(*this == pos); }\n            };\n        ]]></code>\n    </struct>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"DECLARE_CONTEXTUAL_VARIABLE\",\n            \"about\": \"Declares a contextual variable, which is a thread-local variable with a default value.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            DECLARE_CONTEXTUAL_VARIABLE(CurrentSourceFile, SourceId);\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"DECLARE_CONTEXTUAL_VARIABLE\",\n            \"about\": \"Declares a contextual variable, which is a thread-local variable with a default value.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            DECLARE_CONTEXTUAL_VARIABLE(CurrentSourcePosition, SourcePosition);\n        ]]></code>\n    </macro>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourceFileMap\",\n            \"extends\": \"base::ContextualClass<SourceFileMap>\",\n            \"about\": \"Manages a mapping between source file IDs and their paths.\",\n            \"attributes\": [\n                {\n                    \"name\": \"sources_\",\n                    \"type\": \"std::vector<std::string>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the paths of the source files.\"\n                },\n                {\n                    \"name\": \"v8_root_\",\n                    \"type\": \"std::string\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the root directory of the V8 project.\"\n                }\n            ],\n            \"dependencies\": [\n                \"SourceId\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT_PRIVATE SourceFileMap\n                : public base::ContextualClass<SourceFileMap> {\n            public:\n                explicit SourceFileMap(std::string v8_root) : v8_root_(std::move(v8_root)) {}\n                static const std::string& PathFromV8Root(SourceId file);\n                static std::string PathFromV8RootWithoutExtension(SourceId file);\n                static std::string AbsolutePath(SourceId file);\n                static SourceId AddSource(std::string path);\n                static SourceId GetSourceId(const std::string& path);\n                static std::vector<SourceId> AllSources();\n                static bool FileRelativeToV8RootExists(const std::string& path);\n\n            private:\n                std::vector<std::string> sources_;\n                std::string v8_root_;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PositionAsString\",\n            \"about\": \"Converts a SourcePosition to a human-readable string.\",\n            \"logic\": \"Combines the path from V8 root, line number, and column number into a string representation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"pos\",\n                    \"type\": \"SourcePosition\",\n                    \"purpose\": \"The source position to convert.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::string\",\n                \"description\": \"A string representation of the source position.\"\n            },\n            \"dependencies\": [\n                \"SourcePosition\",\n                \"SourceFileMap\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            inline std::string PositionAsString(SourcePosition pos) {\n                return SourceFileMap::PathFromV8Root(pos.source) + \":\" +\n                       std::to_string(pos.start.line + 1) + \":\" +\n                       std::to_string(pos.start.column + 1);\n            }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the output stream operator to print a SourcePosition as a URL to the Chromium source code.\",\n            \"logic\": \"Constructs a URL pointing to the source code on Chromium's source code browser.\",\n            \"parameters\": [\n                {\n                    \"name\": \"out\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"pos\",\n                    \"type\": \"SourcePosition\",\n                    \"purpose\": \"The source position to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"SourcePosition\",\n                \"SourceFileMap\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            inline std::ostream& operator<<(std::ostream& out, SourcePosition pos) {\n                return out << \"https://source.chromium.org/chromium/chromium/src/+/main:v8/\"\n                           << SourceFileMap::PathFromV8Root(pos.source)\n                           << \"?l=\" << (pos.start.line + 1)\n                           << \"&c=\" << (pos.start.column + 1);\n            }\n        ]]></code>\n    </func>\n</file>\n```"
}