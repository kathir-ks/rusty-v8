{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/deoptimized-frame-info.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 49, column 51",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/deoptimized-frame-info.h\",\n            \"file_name\": \"deoptimized-frame-info.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the DeoptimizedFrameInfo class, used to represent an unoptimized frame for debugger inspection when part of an optimized frame.  It holds copied frame information that is GC safe.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library vector for managing dynamic arrays.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <vector>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes TranslatedState class definition.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/deoptimizer/translated-state.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"DeoptimizedFrameInfo\",\n                \"extends\": \"Malloced\",\n                \"about\": \"Represents an unoptimized frame for debugger inspection. Holds GC-safe copies of frame data from optimized frames.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"context_\",\n                        \"type\": \"Handle<Object>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The frame context.\"\n                    },\n                    {\n                        \"name\": \"parameters_\",\n                        \"type\": \"std::vector<Handle<Object>>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Vector of incoming arguments (parameters).\"\n                    },\n                    {\n                        \"name\": \"expression_stack_\",\n                        \"type\": \"std::vector<Handle<Object>>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Vector representing the expression stack.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Malloced\",\n                    \"TranslatedState\",\n                    \"Handle<Object>\",\n                    \"Isolate\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class DeoptimizedFrameInfo : public Malloced {\n            public:\n            DeoptimizedFrameInfo(TranslatedState* state,\n                                TranslatedState::iterator frame_it, Isolate* isolate);\n\n            // Get the frame context.\n            Handle<Object> GetContext() { return context_; }\n\n            // Get an incoming argument.\n            Handle<Object> GetParameter(int index) {\n                DCHECK(0 <= index && index < parameters_count());\n                return parameters_[index];\n            }\n\n            // Get an expression from the expression stack.\n            Handle<Object> GetExpression(int index) {\n                DCHECK(0 <= index && index < expression_count());\n                return expression_stack_[index];\n            }\n\n            private:\n            // Return the number of incoming arguments.\n            int parameters_count() { return static_cast<int>(parameters_.size()); }\n\n            // Return the height of the expression stack.\n            int expression_count() { return static_cast<int>(expression_stack_.size()); }\n\n            // Set an incoming argument.\n            void SetParameter(int index, Handle<Object> obj) {\n                DCHECK(0 <= index && index < parameters_count());\n                parameters_[index] = obj;\n            }\n\n            // Set an expression on the expression stack.\n            void SetExpression(int index, Handle<Object> obj) {\n                DCHECK(0 <= index && index < expression_count());\n                expression_stack_[index] = obj;\n            }\n\n            Handle<Object> context_;\n            std::vector<Handle<Object>> parameters_;\n            std::vector<Handle<Object>> expression_stack_;\n\n            friend class Deoptimizer;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Malloced\",\n                    \"about\": \"Base class for objects allocated using malloc (likely in the V8 heap).\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Malloced {};\n            ]]></code>\n        </class>\n    </dependencies>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TranslatedState\",\n                    \"about\": \"Represents the state of the translated frame.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class TranslatedState {\n                    public:\n                    typedef int iterator;\n                };\n            ]]></code>\n        </class>\n    </dependencies>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Handle<Object>\",\n                    \"about\": \"Smart pointer to a V8 Object on the heap.  Handles garbage collection.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Handle {};\n                class Object {};\n            ]]></code>\n        </class>\n    </dependencies>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolated instance of the V8 engine.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {};\n            ]]></code>\n        </class>\n    </dependencies>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Deoptimizer\",\n                    \"about\": \"Class responsible for deoptimizing code.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Deoptimizer {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}