{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/access-info.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 58, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/access-info.h\",\n            \"file_name\": \"access-info.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares classes to encapsulate information required to access object properties and array elements, used during compilation.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include standard library headers and V8 specific headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/compiler/heap-refs.h\"\n#include \"src/compiler/turbofan-types.h\"\n#include \"src/zone/zone-containers.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ElementAccessInfo\",\n                \"about\": \"Encapsulates information required to access an element of an array.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"elements_kind_\",\n                        \"type\": \"ElementsKind\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the ElementsKind of the array.\"\n                    },\n                    {\n                        \"name\": \"lookup_start_object_maps_\",\n                        \"type\": \"ZoneVector<MapRef>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the MapRefs of objects where the element access starts.\"\n                    },\n                    {\n                        \"name\": \"transition_sources_\",\n                        \"type\": \"ZoneVector<MapRef>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the MapRefs of objects where the element access transitions.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"MapRef\",\n                    \"ElementsKind\",\n                    \"ZoneVector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass ElementAccessInfo final {\n public:\n  ElementAccessInfo(ZoneVector<MapRef>&& lookup_start_object_maps,\n                    ElementsKind elements_kind, Zone* zone);\n\n  ElementsKind elements_kind() const { return elements_kind_; }\n  ZoneVector<MapRef> const& lookup_start_object_maps() const {\n    return lookup_start_object_maps_;\n  }\n  ZoneVector<MapRef> const& transition_sources() const {\n    return transition_sources_;\n  }\n\n  void AddTransitionSource(MapRef map) {\n    CHECK_EQ(lookup_start_object_maps_.size(), 1);\n    transition_sources_.push_back(map);\n  }\n\n private:\n  ElementsKind elements_kind_;\n  ZoneVector<MapRef> lookup_start_object_maps_;\n  ZoneVector<MapRef> transition_sources_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"PropertyAccessInfo\",\n                \"about\": \"Encapsulates information required to access a property of an object.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"kind_\",\n                        \"type\": \"Kind\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the kind of property access.\"\n                    },\n                    {\n                        \"name\": \"lookup_start_object_maps_\",\n                        \"type\": \"ZoneVector<MapRef>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the MapRefs of objects where the property access starts.\"\n                    },\n                    {\n                        \"name\": \"constant_\",\n                        \"type\": \"OptionalObjectRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the constant value of the property, if it's constant.\"\n                    },\n                    {\n                        \"name\": \"holder_\",\n                        \"type\": \"OptionalJSObjectRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the JSObjectRef of the object that holds the property.\"\n                    },\n                    {\n                        \"name\": \"api_holder_\",\n                        \"type\": \"OptionalJSObjectRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the JSObjectRef of the API object that holds the property.\"\n                    },\n                    {\n                        \"name\": \"unrecorded_dependencies_\",\n                        \"type\": \"ZoneVector<CompilationDependency const*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the dependencies of the property access.\"\n                    },\n                    {\n                        \"name\": \"transition_map_\",\n                        \"type\": \"OptionalMapRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the MapRef of the transition map for the property.\"\n                    },\n                    {\n                        \"name\": \"field_index_\",\n                        \"type\": \"FieldIndex\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the index of the field for the property.\"\n                    },\n                    {\n                        \"name\": \"field_representation_\",\n                        \"type\": \"Representation\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the representation of the field for the property.\"\n                    },\n                    {\n                        \"name\": \"field_type_\",\n                        \"type\": \"Type\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the type of the field for the property.\"\n                    },\n                    {\n                        \"name\": \"field_owner_map_\",\n                        \"type\": \"OptionalMapRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the MapRef of the object that owns the field.\"\n                    },\n                    {\n                        \"name\": \"field_map_\",\n                        \"type\": \"OptionalMapRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the MapRef of the field.\"\n                    },\n                    {\n                        \"name\": \"dictionary_index_\",\n                        \"type\": \"InternalIndex\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the index of the dictionary entry for the property.\"\n                    },\n                    {\n                        \"name\": \"name_\",\n                        \"type\": \"OptionalNameRef\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the NameRef of the property.\"\n                    },\n                    {\n                        \"name\": \"elements_kind_\",\n                        \"type\": \"ElementsKind\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the ElementsKind of the array, if the property is a length property of a TypedArray.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"ZoneVector\",\n                    \"MapRef\",\n                    \"OptionalJSObjectRef\",\n                    \"FieldIndex\",\n                    \"Representation\",\n                    \"Type\",\n                    \"CompilationDependency\",\n                    \"ObjectRef\",\n                    \"NameRef\",\n                    \"InternalIndex\",\n                    \"PropertyDetails\",\n                    \"ElementsKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass PropertyAccessInfo final {\n public:\n  enum Kind {\n    kInvalid,\n    kNotFound,\n    kDataField,\n    kFastDataConstant,\n    kDictionaryProtoDataConstant,\n    kFastAccessorConstant,\n    kDictionaryProtoAccessorConstant,\n    kModuleExport,\n    kStringLength,\n    kStringWrapperLength,\n    kTypedArrayLength\n  };\n\n  static PropertyAccessInfo NotFound(Zone* zone, MapRef receiver_map,\n                                     OptionalJSObjectRef holder);\n  static PropertyAccessInfo DataField(\n      JSHeapBroker* broker, Zone* zone, MapRef receiver_map,\n      ZoneVector<CompilationDependency const*>&& unrecorded_dependencies,\n      FieldIndex field_index, Representation field_representation,\n      Type field_type, MapRef field_owner_map, OptionalMapRef field_map,\n      OptionalJSObjectRef holder, OptionalMapRef transition_map);\n  static PropertyAccessInfo FastDataConstant(\n      Zone* zone, MapRef receiver_map,\n      ZoneVector<CompilationDependency const*>&& unrecorded_dependencies,\n      FieldIndex field_index, Representation field_representation,\n      Type field_type, MapRef field_owner_map, OptionalMapRef field_map,\n      OptionalJSObjectRef holder, OptionalMapRef transition_map);\n  static PropertyAccessInfo FastAccessorConstant(\n      Zone* zone, MapRef receiver_map, OptionalJSObjectRef holder,\n      OptionalObjectRef constant, OptionalJSObjectRef api_holder);\n  static PropertyAccessInfo ModuleExport(Zone* zone, MapRef receiver_map,\n                                         CellRef cell);\n  static PropertyAccessInfo StringLength(Zone* zone, MapRef receiver_map);\n  static PropertyAccessInfo StringWrapperLength(Zone* zone,\n                                                MapRef receiver_map);\n  static PropertyAccessInfo TypedArrayLength(Zone* zone, MapRef receiver_map);\n  static PropertyAccessInfo Invalid(Zone* zone);\n  static PropertyAccessInfo DictionaryProtoDataConstant(\n      Zone* zone, MapRef receiver_map, JSObjectRef holder,\n      InternalIndex dict_index, NameRef name);\n  static PropertyAccessInfo DictionaryProtoAccessorConstant(\n      Zone* zone, MapRef receiver_map, OptionalJSObjectRef holder,\n      ObjectRef constant, OptionalJSObjectRef api_holder, NameRef name);\n\n  bool Merge(PropertyAccessInfo const* that, AccessMode access_mode,\n             Zone* zone) V8_WARN_UNUSED_RESULT;\n\n  void RecordDependencies(CompilationDependencies* dependencies);\n\n  bool IsInvalid() const { return kind() == kInvalid; }\n  bool IsNotFound() const { return kind() == kNotFound; }\n  bool IsDataField() const { return kind() == kDataField; }\n  bool IsFastDataConstant() const { return kind() == kFastDataConstant; }\n  bool IsFastAccessorConstant() const {\n    return kind() == kFastAccessorConstant;\n  }\n  bool IsModuleExport() const { return kind() == kModuleExport; }\n  bool IsStringLength() const { return kind() == kStringLength; }\n  bool IsStringWrapperLength() const { return kind() == kStringWrapperLength; }\n  bool IsTypedArrayLength() const { return kind() == kTypedArrayLength; }\n  bool IsDictionaryProtoDataConstant() const {\n    return kind() == kDictionaryProtoDataConstant;\n  }\n  bool IsDictionaryProtoAccessorConstant() const {\n    return kind() == kDictionaryProtoAccessorConstant;\n  }\n\n  bool HasTransitionMap() const { return transition_map().has_value(); }\n  bool HasDictionaryHolder() const {\n    return kind_ == kDictionaryProtoDataConstant ||\n           kind_ == kDictionaryProtoAccessorConstant;\n  }\n  ConstFieldInfo GetConstFieldInfo() const;\n\n  Kind kind() const { return kind_; }\n\n  // The object where the property definition was found.\n  OptionalJSObjectRef holder() const {\n    // TODO(neis): There was a CHECK here that tries to protect against\n    // using the access info without recording its dependencies first.\n    // Find a more suitable place for it.\n    return holder_;\n  }\n  OptionalMapRef transition_map() const {\n    DCHECK(!HasDictionaryHolder());\n    return transition_map_;\n  }\n  OptionalObjectRef constant() const {\n    DCHECK_IMPLIES(constant_.has_value(),\n                   IsModuleExport() || IsFastAccessorConstant() ||\n                       IsDictionaryProtoAccessorConstant());\n    return constant_;\n  }\n  FieldIndex field_index() const {\n    DCHECK(!HasDictionaryHolder());\n    return field_index_;\n  }\n\n  Type field_type() const {\n    DCHECK(!HasDictionaryHolder());\n    return field_type_;\n  }\n  Representation field_representation() const {\n    DCHECK(!HasDictionaryHolder());\n    return field_representation_;\n  }\n  OptionalMapRef field_map() const {\n    DCHECK(!HasDictionaryHolder());\n    return field_map_;\n  }\n  ZoneVector<MapRef> const& lookup_start_object_maps() const {\n    return lookup_start_object_maps_;\n  }\n\n  InternalIndex dictionary_index() const {\n    DCHECK(HasDictionaryHolder());\n    return dictionary_index_;\n  }\n\n  NameRef name() const {\n    DCHECK(HasDictionaryHolder());\n    return name_.value();\n  }\n\n  void set_elements_kind(ElementsKind elements_kind) {\n    elements_kind_ = elements_kind;\n  }\n  ElementsKind elements_kind() const { return elements_kind_; }\n\n private:\n  explicit PropertyAccessInfo(Zone* zone);\n  PropertyAccessInfo(Zone* zone, Kind kind, OptionalJSObjectRef holder,\n                     ZoneVector<MapRef>&& lookup_start_object_maps);\n  PropertyAccessInfo(Zone* zone, Kind kind, OptionalJSObjectRef holder,\n                     OptionalObjectRef constant, OptionalJSObjectRef api_holder,\n                     OptionalNameRef name,\n                     ZoneVector<MapRef>&& lookup_start_object_maps);\n  PropertyAccessInfo(Kind kind, OptionalJSObjectRef holder,\n                     OptionalMapRef transition_map, FieldIndex field_index,\n                     Representation field_representation, Type field_type,\n                     MapRef field_owner_map, OptionalMapRef field_map,\n                     ZoneVector<MapRef>&& lookup_start_object_maps,\n                     ZoneVector<CompilationDependency const*>&& dependencies);\n  PropertyAccessInfo(Zone* zone, Kind kind, OptionalJSObjectRef holder,\n                     ZoneVector<MapRef>&& lookup_start_object_maps,\n                     InternalIndex dictionary_index, NameRef name);\n\n  // Members used for fast and dictionary mode holders:\n  Kind kind_;\n  ZoneVector<MapRef> lookup_start_object_maps_;\n  OptionalObjectRef constant_;\n  OptionalJSObjectRef holder_;\n  OptionalJSObjectRef api_holder_;\n\n  // Members only used for fast mode holders:\n  ZoneVector<CompilationDependency const*> unrecorded_dependencies_;\n  OptionalMapRef transition_map_;\n  FieldIndex field_index_;\n  Representation field_representation_;\n  Type field_type_;\n  OptionalMapRef field_owner_map_;\n  OptionalMapRef field_map_;\n\n  // Members only used for dictionary mode holders:\n  InternalIndex dictionary_index_;\n  OptionalNameRef name_;\n\n  // Members only used for kTypedArrayLength:\n  ElementsKind elements_kind_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"AccessInfoFactory\",\n                \"about\": \"Factory class for creating ElementAccessInfo and PropertyAccessInfo objects.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"broker_\",\n                        \"type\": \"JSHeapBroker* const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A pointer to the JSHeapBroker.\"\n                    },\n                    {\n                        \"name\": \"type_cache_\",\n                        \"type\": \"TypeCache const* const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A pointer to the TypeCache.\"\n                    },\n                    {\n                        \"name\": \"zone_\",\n                        \"type\": \"Zone* const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A pointer to the Zone.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"ElementAccessInfo\",\n                    \"PropertyAccessInfo\",\n                    \"JSHeapBroker\",\n                    \"Zone\",\n                    \"MapRef\",\n                    \"NameRef\",\n                    \"ElementAccessFeedback\",\n                    \"CompilationDependencies\",\n                    \"PropertyDetails\",\n                    \"JSObjectRef\",\n                    \"InternalIndex\",\n                    \"TypeCache\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass AccessInfoFactory final {\n public:\n  AccessInfoFactory(JSHeapBroker* broker, Zone* zone);\n\n  std::optional<ElementAccessInfo> ComputeElementAccessInfo(\n      MapRef map, AccessMode access_mode) const;\n  bool ComputeElementAccessInfos(\n      ElementAccessFeedback const& feedback,\n      ZoneVector<ElementAccessInfo>* access_infos) const;\n\n  PropertyAccessInfo ComputePropertyAccessInfo(MapRef map, NameRef name,\n                                               AccessMode access_mode) const;\n\n  PropertyAccessInfo ComputeDictionaryProtoAccessInfo(\n      MapRef receiver_map, NameRef name, JSObjectRef holder,\n      InternalIndex dict_index, AccessMode access_mode,\n      PropertyDetails details) const;\n\n  // Merge as many of the given {infos} as possible and record any dependencies.\n  // Return false iff any of them was invalid, in which case no dependencies are\n  // recorded.\n  // TODO(neis): Make access_mode part of access info?\n  bool FinalizePropertyAccessInfos(\n      ZoneVector<PropertyAccessInfo> infos, AccessMode access_mode,\n      ZoneVector<PropertyAccessInfo>* result) const;\n\n  // Merge the given {infos} to a single one and record any dependencies. If the\n  // merge is not possible, the result has kind {kInvalid} and no dependencies\n  // are recorded.\n  PropertyAccessInfo FinalizePropertyAccessInfosAsOne(\n      ZoneVector<PropertyAccessInfo> infos, AccessMode access_mode) const;\n\n private:\n  std::optional<ElementAccessInfo> ConsolidateElementLoad(\n      ElementAccessFeedback const& feedback) const;\n  PropertyAccessInfo LookupSpecialFieldAccessor(MapRef map, NameRef name) const;\n  PropertyAccessInfo LookupTransition(MapRef map, NameRef name,\n                                      OptionalJSObjectRef holder,\n                                      PropertyAttributes attrs) const;\n  PropertyAccessInfo ComputeDataFieldAccessInfo(MapRef receiver_map, MapRef map,\n                                                NameRef name,\n                                                OptionalJSObjectRef holder,\n                                                InternalIndex descriptor,\n                                                AccessMode access_mode) const;\n  PropertyAccessInfo ComputeAccessorDescriptorAccessInfo(\n      MapRef receiver_map, NameRef name, MapRef map, OptionalJSObjectRef holder,\n      InternalIndex descriptor, AccessMode access_mode) const;\n\n  PropertyAccessInfo Invalid() const {\n    return PropertyAccessInfo::Invalid(zone());\n  }\n\n  void MergePropertyAccessInfos(ZoneVector<PropertyAccessInfo> infos,\n                                AccessMode access_mode,\n                                ZoneVector<PropertyAccessInfo>* result) const;\n\n  bool TryLoadPropertyDetails(MapRef map, OptionalJSObjectRef maybe_holder,\n                              NameRef name, InternalIndex* index_out,\n                              PropertyDetails* details_out) const;\n\n  CompilationDependencies* dependencies() const;\n  JSHeapBroker* broker() const { return broker_; }\n  Isolate* isolate() const;\n  Zone* zone() const { return zone_; }\n\n  JSHeapBroker* const broker_;\n  TypeCache const* const type_cache_;\n  Zone* const zone_;\n\n  AccessInfoFactory(const AccessInfoFactory&) = delete;\n  AccessInfoFactory& operator=(const AccessInfoFactory&) = delete;\n};\n        ]]></code>\n    </class>\n</file>\n```"
}