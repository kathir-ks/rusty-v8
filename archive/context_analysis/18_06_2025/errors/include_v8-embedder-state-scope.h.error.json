{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-embedder-state-scope.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 86, column 54",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-embedder-state-scope.h\",\n        \"file_name\": \"v8-embedder-state-scope.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the EmbedderStateScope class for managing embedder state within a V8 isolate.\"\n    }\n    </metadata>\n\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for memory management, V8 internals, and handle management.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <memory>\n\n            #include \"v8-internal.h\"      // NOLINT(build/include_directory)\n            #include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Context\",\n            \"about\": \"Represents a V8 context (execution environment).\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class Context;\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"EmbedderState\",\n            \"about\": \"Represents the state of the embedder within V8.\",\n            \"parent\": \"internal\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class EmbedderState;\n        ]]></code>\n    </class>\n\n    <interface>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"EmbedderStateTag\",\n            \"about\": \"Represents a possible state of the embedder.\",\n            \"methods\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class EmbedderStateTag : uint8_t {\n            // reserved\n            EMPTY = 0,\n            OTHER = 1,\n            // embedder can define any state after\n            };\n        ]]></code>\n    </interface>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"EmbedderStateScope\",\n            \"about\": \"Manages an embedder state on the isolate stack.\",\n            \"attributes\": [\n                {\n                    \"name\": \"embedder_state_\",\n                    \"type\": \"std::unique_ptr<internal::EmbedderState>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A unique pointer to an EmbedderState object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"Local\",\n                \"v8::Context\",\n                \"EmbedderStateTag\",\n                \"internal::EmbedderState\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT EmbedderStateScope {\n            public:\n            EmbedderStateScope(Isolate* isolate, Local<v8::Context> context,\n                                EmbedderStateTag tag);\n\n            ~EmbedderStateScope();\n\n            private:\n            // Declaring operator new and delete as deleted is not spec compliant.\n            // Therefore declare them private instead to disable dynamic alloc\n            void* operator new(size_t size);\n            void* operator new[](size_t size);\n            void operator delete(void*, size_t);\n            void operator delete[](void*, size_t);\n\n            std::unique_ptr<internal::EmbedderState> embedder_state_;\n            };\n        ]]></code>\n    </class>\n\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Local\",\n                \"about\": \"Represents a local handle to a V8 object.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <class T> class Local {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}