{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-message.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 139, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-message.h\",\n            \"file_name\": \"v8-message.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the Message class and related classes for error reporting in the V8 JavaScript engine.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard C++ headers for input/output and forward declarations, as well as V8-specific headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <stdio.h>\n\n            #include <iosfwd>\n\n            #include \"v8-callbacks.h\"     // NOLINT(build/include_directory)\n            #include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n            #include \"v8-maybe.h\"         // NOLINT(build/include_directory)\n            #include \"v8-primitive.h\"     // NOLINT(build/include_directory)\n            #include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ScriptOriginOptions\",\n                \"about\": \"Represents optional attributes for ScriptOrigin, indicating properties like cross-origin sharing, opacity, Wasm status, and module status.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"flags_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the bitwise OR of the enabled options.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            class ScriptOriginOptions {\n            public:\n                V8_INLINE ScriptOriginOptions(bool is_shared_cross_origin = false,\n                                            bool is_opaque = false, bool is_wasm = false,\n                                            bool is_module = false)\n                    : flags_((is_shared_cross_origin ? kIsSharedCrossOrigin : 0) |\n                            (is_wasm ? kIsWasm : 0) | (is_opaque ? kIsOpaque : 0) |\n                            (is_module ? kIsModule : 0)) {}\n                V8_INLINE ScriptOriginOptions(int flags)\n                    : flags_(flags &\n                            (kIsSharedCrossOrigin | kIsOpaque | kIsWasm | kIsModule)) {}\n\n                bool IsSharedCrossOrigin() const {\n                    return (flags_ & kIsSharedCrossOrigin) != 0;\n                }\n                bool IsOpaque() const { return (flags_ & kIsOpaque) != 0; }\n                bool IsWasm() const { return (flags_ & kIsWasm) != 0; }\n                bool IsModule() const { return (flags_ & kIsModule) != 0; }\n\n                int Flags() const { return flags_; }\n\n            private:\n                enum {\n                    kIsSharedCrossOrigin = 1,\n                    kIsOpaque = 1 << 1,\n                    kIsWasm = 1 << 2,\n                    kIsModule = 1 << 3\n                };\n                const int flags_;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ScriptOrigin\",\n                \"about\": \"Represents the origin of a script, including resource name, line and column offsets, script ID, source map URL, and host-defined options.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"resource_name_\",\n                        \"type\": \"Local<Value>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The name or identifier of the script resource.\"\n                    },\n                    {\n                        \"name\": \"resource_line_offset_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The line offset within the resource where the script starts.\"\n                    },\n                    {\n                        \"name\": \"resource_column_offset_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The column offset within the resource where the script starts.\"\n                    },\n                    {\n                        \"name\": \"options_\",\n                        \"type\": \"ScriptOriginOptions\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the various boolean options of the script origin\"\n                    },\n                    {\n                        \"name\": \"script_id_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The unique identifier of the script.\"\n                    },\n                    {\n                        \"name\": \"source_map_url_\",\n                        \"type\": \"Local<Value>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The URL of the source map associated with the script.\"\n                    },\n                    {\n                        \"name\": \"host_defined_options_\",\n                        \"type\": \"Local<Data>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Allows embedding host-specific options within the script origin.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"ScriptOriginOptions\",\n                    \"Local<Value>\",\n                    \"Local<Data>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT ScriptOrigin {\n            public:\n                V8_INLINE ScriptOrigin(Local<Value> resource_name,\n                                    int resource_line_offset = 0,\n                                    int resource_column_offset = 0,\n                                    bool resource_is_shared_cross_origin = false,\n                                    int script_id = -1,\n                                    Local<Value> source_map_url = Local<Value>(),\n                                    bool resource_is_opaque = false, bool is_wasm = false,\n                                    bool is_module = false,\n                                    Local<Data> host_defined_options = Local<Data>())\n                    : resource_name_(resource_name),\n                    resource_line_offset_(resource_line_offset),\n                    resource_column_offset_(resource_column_offset),\n                    options_(resource_is_shared_cross_origin, resource_is_opaque, is_wasm,\n                            is_module),\n                    script_id_(script_id),\n                    source_map_url_(source_map_url),\n                    host_defined_options_(host_defined_options) {\n                    VerifyHostDefinedOptions();\n                }\n\n                V8_INLINE Local<Value> ResourceName() const;\n                V8_INLINE int LineOffset() const;\n                V8_INLINE int ColumnOffset() const;\n                V8_INLINE int ScriptId() const;\n                V8_INLINE Local<Value> SourceMapUrl() const;\n                V8_INLINE Local<Data> GetHostDefinedOptions() const;\n                V8_INLINE ScriptOriginOptions Options() const { return options_; }\n\n            private:\n                void VerifyHostDefinedOptions() const;\n                Local<Value> resource_name_;\n                int resource_line_offset_;\n                int resource_column_offset_;\n                ScriptOriginOptions options_;\n                int script_id_;\n                Local<Value> source_map_url_;\n                Local<Data> host_defined_options_;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Message\",\n                \"about\": \"Represents an error message generated by the V8 engine, providing access to source code information, stack traces, and error levels.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"Local<String>\",\n                    \"Isolate\",\n                    \"Local<Context>\",\n                    \"ScriptOrigin\",\n                    \"Local<Value>\",\n                    \"Local<StackTrace>\",\n                    \"Maybe<int>\",\n                    \"PrintCurrentStackTraceFilterCallback\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT Message {\n            public:\n                Local<String> Get() const;\n\n                /**\n                * Return the isolate to which the Message belongs.\n                */\n                Isolate* GetIsolate() const;\n\n                V8_WARN_UNUSED_RESULT MaybeLocal<String> GetSource(\n                    Local<Context> context) const;\n                V8_WARN_UNUSED_RESULT MaybeLocal<String> GetSourceLine(\n                    Local<Context> context) const;\n\n                /**\n                * Returns the origin for the script from where the function causing the\n                * error originates.\n                */\n                ScriptOrigin GetScriptOrigin() const;\n\n                /**\n                * Returns the resource name for the script from where the function causing\n                * the error originates.\n                */\n                Local<Value> GetScriptResourceName() const;\n\n                /**\n                * Exception stack trace. By default stack traces are not captured for\n                * uncaught exceptions. SetCaptureStackTraceForUncaughtExceptions allows\n                * to change this option.\n                */\n                Local<StackTrace> GetStackTrace() const;\n\n                /**\n                * Returns the number, 1-based, of the line where the error occurred.\n                */\n                V8_WARN_UNUSED_RESULT Maybe<int> GetLineNumber(Local<Context> context) const;\n\n                /**\n                * Returns the index within the script of the first character where\n                * the error occurred.\n                */\n                int GetStartPosition() const;\n\n                /**\n                * Returns the index within the script of the last character where\n                * the error occurred.\n                */\n                int GetEndPosition() const;\n\n                /**\n                * Returns the Wasm function index where the error occurred. Returns -1 if\n                * message is not from a Wasm script.\n                */\n                int GetWasmFunctionIndex() const;\n\n                /**\n                * Returns the error level of the message.\n                */\n                int ErrorLevel() const;\n\n                /**\n                * Returns the index within the line of the first character where\n                * the error occurred.\n                */\n                int GetStartColumn() const;\n                V8_WARN_UNUSED_RESULT Maybe<int> GetStartColumn(Local<Context> context) const;\n\n                /**\n                * Returns the index within the line of the last character where\n                * the error occurred.\n                */\n                int GetEndColumn() const;\n                V8_WARN_UNUSED_RESULT Maybe<int> GetEndColumn(Local<Context> context) const;\n\n                /**\n                * Passes on the value set by the embedder when it fed the script from which\n                * this Message was generated to V8.\n                */\n                bool IsSharedCrossOrigin() const;\n                bool IsOpaque() const;\n\n                /**\n                * If provided, the callback can be used to selectively include\n                * or redact frames based on their script names. (true to include a frame)\n                */\n                static void PrintCurrentStackTrace(\n                    Isolate* isolate, std::ostream& out,\n                    PrintCurrentStackTraceFilterCallback should_include_frame_callback =\n                        nullptr);\n\n                static const int kNoLineNumberInfo = 0;\n                static const int kNoColumnInfo = 0;\n                static const int kNoScriptIdInfo = 0;\n                static const int kNoWasmFunctionIndexInfo = -1;\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ResourceName\",\n                \"parent\": \"ScriptOrigin\",\n                \"about\": \"Returns the resource name associated with the ScriptOrigin.\",\n                \"logic\": \"Simple getter for the resource_name_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Local<Value>\",\n                    \"description\": \"The resource name.\"\n                },\n                \"dependencies\": [\n                    \"Local<Value>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            Local<Value> ScriptOrigin::ResourceName() const { return resource_name_; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetHostDefinedOptions\",\n                \"parent\": \"ScriptOrigin\",\n                \"about\": \"Returns the host-defined options associated with the ScriptOrigin.\",\n                \"logic\": \"Simple getter for the host_defined_options_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Local<Data>\",\n                    \"description\": \"The host-defined options.\"\n                },\n                \"dependencies\": [\n                    \"Local<Data>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            Local<Data> ScriptOrigin::GetHostDefinedOptions() const {\n            return host_defined_options_;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"LineOffset\",\n                \"parent\": \"ScriptOrigin\",\n                \"about\": \"Returns the line offset associated with the ScriptOrigin.\",\n                \"logic\": \"Simple getter for the resource_line_offset_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The line offset.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            int ScriptOrigin::LineOffset() const { return resource_line_offset_; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ColumnOffset\",\n                \"parent\": \"ScriptOrigin\",\n                \"about\": \"Returns the column offset associated with the ScriptOrigin.\",\n                \"logic\": \"Simple getter for the resource_column_offset_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The column offset.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            int ScriptOrigin::ColumnOffset() const { return resource_column_offset_; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ScriptId\",\n                \"parent\": \"ScriptOrigin\",\n                \"about\": \"Returns the script ID associated with the ScriptOrigin.\",\n                \"logic\": \"Simple getter for the script_id_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The script ID.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            int ScriptOrigin::ScriptId() const { return script_id_; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SourceMapUrl\",\n                \"parent\": \"ScriptOrigin\",\n                \"about\": \"Returns the source map URL associated with the ScriptOrigin.\",\n                \"logic\": \"Simple getter for the source_map_url_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Local<Value>\",\n                    \"description\": \"The source map URL.\"\n                },\n                \"dependencies\": [\n                    \"Local<Value>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            Local<Value> ScriptOrigin::SourceMapUrl() const { return source_map_url_; }\n        ]]></code>\n    </func>\n\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Local\",\n                \"about\": \"Represents a local handle to a V8 object. This is a template class.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Local {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Context\",\n                \"about\": \"Represents a JavaScript execution context.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n                class Context {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StackTrace\",\n                \"about\": \"Represents a stack trace.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n                class StackTrace {};\n            ]]></code>\n        </class>\n        <typedef>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"typedef\",\n                \"name\": \"PrintCurrentStackTraceFilterCallback\",\n                \"about\": \"Callback used to filter frames in PrintCurrentStackTrace\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n                typedef bool (*PrintCurrentStackTraceFilterCallback)(const char* script_name);\n            ]]></code>\n        </typedef>\n    </dependencies>\n</file>\n```"
}