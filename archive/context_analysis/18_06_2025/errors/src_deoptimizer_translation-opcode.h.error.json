{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/translation-opcode.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 410, column 34",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/translation-opcode.h\",\n            \"file_name\": \"translation-opcode.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines opcodes used for translation during deoptimization in V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes macros for conditional compilation.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/macros.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"v8\",\n                \"about\": \"V8 namespace\"\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"internal\",\n                \"about\": \"V8 internal namespace\"\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace internal {\n        ]]></code>\n    </class>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum class\",\n                \"name\": \"TranslationOpcode\",\n                \"about\": \"Enumerates different translation opcodes used during deoptimization.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class TranslationOpcode {\n#define CASE(name, ...) name,\n  TRANSLATION_OPCODE_LIST(CASE)\n#undef CASE\n};\n        ]]></code>\n    </enum>\n    <macro>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"TRANSLATION_JS_FRAME_OPCODE_LIST\",\n                \"about\": \"Defines opcodes related to JavaScript frames during translation.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#define TRANSLATION_JS_FRAME_OPCODE_LIST(V)   \\\n  V(INTERPRETED_FRAME_WITH_RETURN, 6)         \\\n  V(INTERPRETED_FRAME_WITHOUT_RETURN, 4)      \\\n  V(JAVASCRIPT_BUILTIN_CONTINUATION_FRAME, 3) \\\n  V(JAVASCRIPT_BUILTIN_CONTINUATION_WITH_CATCH_FRAME, 3)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"TRANSLATION_FRAME_OPCODE_LIST\",\n                \"about\": \"Defines opcodes related to frames during translation.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#define TRANSLATION_FRAME_OPCODE_LIST(V)               \\\n  V(CONSTRUCT_CREATE_STUB_FRAME, 2)                    \\\n  V(CONSTRUCT_INVOKE_STUB_FRAME, 1)                    \\\n  V(BUILTIN_CONTINUATION_FRAME, 3)                     \\\n  IF_WASM(V, JS_TO_WASM_BUILTIN_CONTINUATION_FRAME, 4) \\\n  IF_WASM(V, WASM_INLINED_INTO_JS_FRAME, 3)            \\\n  IF_WASM(V, LIFTOFF_FRAME, 3)                         \\\n  V(INLINED_EXTRA_ARGUMENTS, 3)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"TRANSLATION_OPCODE_LIST\",\n                \"about\": \"Defines all translation opcodes by combining JS frame opcodes and other opcodes.\",\n                \"dependencies\": [\n                    \"TRANSLATION_JS_FRAME_OPCODE_LIST\",\n                    \"TRANSLATION_FRAME_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define TRANSLATION_OPCODE_LIST(V)    \\\n  TRANSLATION_JS_FRAME_OPCODE_LIST(V) \\\n  TRANSLATION_FRAME_OPCODE_LIST(V)    \\\n  V(ARGUMENTS_ELEMENTS, 1)            \\\n  V(ARGUMENTS_LENGTH, 0)              \\\n  V(REST_LENGTH, 0)                   \\\n  V(BEGIN_WITHOUT_FEEDBACK, 3)        \\\n  V(BEGIN_WITH_FEEDBACK, 3)           \\\n  V(BOOL_REGISTER, 1)                 \\\n  V(BOOL_STACK_SLOT, 1)               \\\n  V(CAPTURED_OBJECT, 1)               \\\n  V(STRING_CONCAT, 0)                 \\\n  V(DOUBLE_REGISTER, 1)               \\\n  V(DOUBLE_STACK_SLOT, 1)             \\\n  V(SIMD128_STACK_SLOT, 1)            \\\n  V(HOLEY_DOUBLE_REGISTER, 1)         \\\n  V(HOLEY_DOUBLE_STACK_SLOT, 1)        \\\n  V(SIMD128_REGISTER, 1)              \\\n  V(DUPLICATED_OBJECT, 1)             \\\n  V(FLOAT_REGISTER, 1)                \\\n  V(FLOAT_STACK_SLOT, 1)              \\\n  V(INT32_REGISTER, 1)                \\\n  V(INT32_STACK_SLOT, 1)              \\\n  V(INT64_REGISTER, 1)                \\\n  V(INT64_STACK_SLOT, 1)              \\\n  V(SIGNED_BIGINT64_REGISTER, 1)      \\\n  V(SIGNED_BIGINT64_STACK_SLOT, 1)    \\\n  V(UNSIGNED_BIGINT64_REGISTER, 1)    \\\n  V(UNSIGNED_BIGINT64_STACK_SLOT, 1)  \\\n  V(OPTIMIZED_OUT, 0)                 \\\n  V(LITERAL, 1)                       \\\n  V(REGISTER, 1)                      \\\n  V(TAGGED_STACK_SLOT, 1)             \\\n  V(UINT32_REGISTER, 1)               \\\n  V(UINT32_STACK_SLOT, 1)             \\\n  V(UPDATE_FEEDBACK, 2)               \\\n  V(MATCH_PREVIOUS_TRANSLATION, 1)\n        ]]></code>\n    </macro>\n    <variable>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constexpr int\",\n                \"name\": \"kNumTranslationOpcodes\",\n                \"about\": \"Calculates the number of translation opcodes.\",\n                \"dependencies\": [\n                    \"TRANSLATION_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define PLUS_ONE(...) +1\nstatic constexpr int kNumTranslationOpcodes =\n    0 TRANSLATION_OPCODE_LIST(PLUS_ONE);\n#undef PLUS_ONE\n        ]]></code>\n    </variable>\n    <variable>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constexpr int\",\n                \"name\": \"kNumTranslationJsFrameOpcodes\",\n                \"about\": \"Calculates the number of JavaScript frame opcodes.\",\n                \"dependencies\": [\n                    \"TRANSLATION_JS_FRAME_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstatic constexpr int kNumTranslationJsFrameOpcodes =\n    0 TRANSLATION_JS_FRAME_OPCODE_LIST(PLUS_ONE);\n        ]]></code>\n    </variable>\n    <variable>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constexpr int\",\n                \"name\": \"kNumTranslationFrameOpcodes\",\n                \"about\": \"Calculates the number of frame opcodes.\",\n                \"dependencies\": [\n                    \"kNumTranslationJsFrameOpcodes\",\n                    \"TRANSLATION_FRAME_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstatic constexpr int kNumTranslationFrameOpcodes =\n    kNumTranslationJsFrameOpcodes TRANSLATION_FRAME_OPCODE_LIST(PLUS_ONE);\n        ]]></code>\n    </variable>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"inline function\",\n                \"name\": \"TranslationOpcodeOperandCount\",\n                \"about\": \"Returns the number of operands for a given translation opcode.\",\n                \"logic\": \"Uses a static array to store the operand counts for each opcode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"o\",\n                        \"type\": \"TranslationOpcode\",\n                        \"purpose\": \"The translation opcode to get the operand count for.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The number of operands for the opcode.\"\n                },\n                \"dependencies\": [\n                    \"TranslationOpcode\",\n                    \"TRANSLATION_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline int TranslationOpcodeOperandCount(TranslationOpcode o) {\n#define CASE(name, operand_count) operand_count,\n  static const int counts[] = {TRANSLATION_OPCODE_LIST(CASE)};\n#undef CASE\n  return counts[static_cast<int>(o)];\n}\n        ]]></code>\n    </func>\n    <variable>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constexpr int\",\n                \"name\": \"kMaxTranslationOperandCount\",\n                \"about\": \"Defines the maximum number of operands allowed for a translation opcode.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr int kMaxTranslationOperandCount = 6;\n        ]]></code>\n    </variable>\n    <macro>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"CASE\",\n                \"about\": \"Assertion to check operand count against max operand count\",\n                \"dependencies\": [\n                    \"kMaxTranslationOperandCount\",\n                    \"TRANSLATION_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define CASE(name, operand_count) \\\n  static_assert(operand_count <= kMaxTranslationOperandCount);\nTRANSLATION_OPCODE_LIST(CASE)\n#undef CASE\n        ]]></code>\n    </macro>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"inline function\",\n                \"name\": \"TranslationOpcodeIsBegin\",\n                \"about\": \"Checks if a translation opcode is a 'begin' opcode (BEGIN_WITH_FEEDBACK or BEGIN_WITHOUT_FEEDBACK).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"o\",\n                        \"type\": \"TranslationOpcode\",\n                        \"purpose\": \"The translation opcode to check.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the opcode is a 'begin' opcode, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"TranslationOpcode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline bool TranslationOpcodeIsBegin(TranslationOpcode o) {\n  return o == TranslationOpcode::BEGIN_WITH_FEEDBACK ||\n         o == TranslationOpcode::BEGIN_WITHOUT_FEEDBACK;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"inline function\",\n                \"name\": \"IsTranslationFrameOpcode\",\n                \"about\": \"Checks if a given TranslationOpcode is a frame opcode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"o\",\n                        \"type\": \"TranslationOpcode\",\n                        \"purpose\": \"Opcode to check.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the opcode is a frame opcode, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"TranslationOpcode\",\n                    \"kNumTranslationFrameOpcodes\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline bool IsTranslationFrameOpcode(TranslationOpcode o) {\n  static_assert(\n      0 == static_cast<int>(TranslationOpcode::INTERPRETED_FRAME_WITH_RETURN));\n  static_assert(kNumTranslationJsFrameOpcodes < kNumTranslationFrameOpcodes);\n  return static_cast<int>(o) < kNumTranslationFrameOpcodes;\n}\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"inline function\",\n                \"name\": \"IsTranslationJsFrameOpcode\",\n                \"about\": \"Checks if a given TranslationOpcode is a JS frame opcode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"o\",\n                        \"type\": \"TranslationOpcode\",\n                        \"purpose\": \"Opcode to check.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the opcode is a JS frame opcode, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"TranslationOpcode\",\n                    \"kNumTranslationJsFrameOpcodes\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline bool IsTranslationJsFrameOpcode(TranslationOpcode o) {\n  static_assert(\n      kNumTranslationJsFrameOpcodes ==\n      static_cast<int>(TranslationOpcode::CONSTRUCT_CREATE_STUB_FRAME));\n  return static_cast<int>(o) < kNumTranslationJsFrameOpcodes;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"inline function\",\n                \"name\": \"IsTranslationInterpreterFrameOpcode\",\n                \"about\": \"Checks if the given TranslationOpcode is an interpreter frame opcode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"o\",\n                        \"type\": \"TranslationOpcode\",\n                        \"purpose\": \"The opcode to check.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the opcode is INTERPRETED_FRAME_WITH_RETURN or INTERPRETED_FRAME_WITHOUT_RETURN, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"TranslationOpcode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline bool IsTranslationInterpreterFrameOpcode(TranslationOpcode o) {\n  return o == TranslationOpcode::INTERPRETED_FRAME_WITH_RETURN ||\n         o == TranslationOpcode::INTERPRETED_FRAME_WITHOUT_RETURN;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"inline function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for TranslationOpcode to allow printing opcode names to an output stream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"out\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream to write to.\"\n                    },\n                    {\n                        \"name\": \"opcode\",\n                        \"type\": \"TranslationOpcode\",\n                        \"purpose\": \"The opcode to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"TranslationOpcode\",\n                    \"TRANSLATION_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline std::ostream& operator<<(std::ostream& out, TranslationOpcode opcode) {\n  switch (opcode) {\n#define CASE(name, _)           \\\n  case TranslationOpcode::name: \\\n    out << #name;               \\\n    break;\n    TRANSLATION_OPCODE_LIST(CASE)\n#undef CASE\n    default:\n      out << \"BROKEN_OPCODE_\" << static_cast<uint8_t>(opcode);\n      break;\n  }\n  return out;\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"internal\",\n                \"about\": \"Closing internal namespace\"\n            }\n        </metadata>\n        <code><![CDATA[\n}  // namespace internal\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"v8\",\n                \"about\": \"Closing v8 namespace\"\n            }\n        </metadata>\n        <code><![CDATA[\n}  // namespace v8\n        ]]></code>\n    </class>\n</file>\n```"
}