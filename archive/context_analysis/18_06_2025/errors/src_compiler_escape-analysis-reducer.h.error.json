{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/escape-analysis-reducer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 40, column 54",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/escape-analysis-reducer.h\",\n            \"file_name\": \"escape-analysis-reducer.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the EscapeAnalysisReducer class, which modifies the graph based on escape analysis results.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for base types, globals, escape analysis, and graph reduction.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/compiler-specific.h\"\n#include \"src/common/globals.h\"\n#include \"src/compiler/escape-analysis.h\"\n#include \"src/compiler/graph-reducer.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"NodeHashCache\",\n                \"about\": \"Performs hash-consing to avoid duplicate nodes during ObjectState, StateValues and FrameState creation or mutation.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"graph_\",\n                        \"type\": \"TFGraph*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The graph being manipulated.\"\n                    },\n                    {\n                        \"name\": \"cache_\",\n                        \"type\": \"ZoneUnorderedSet<Node*, NodeHashCode, NodeEquals>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cache of existing nodes.\"\n                    },\n                    {\n                        \"name\": \"temp_nodes_\",\n                        \"type\": \"ZoneVector<Node*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Unused nodes whose memory can be recycled.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"TFGraph\",\n                    \"Zone\",\n                    \"Node\",\n                    \"NodeProperties\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass NodeHashCache {\n public:\n  NodeHashCache(TFGraph* graph, Zone* zone)\n      : graph_(graph), cache_(zone), temp_nodes_(zone) {}\n\n  // Handle to a conceptually new mutable node. Tries to reuse existing nodes\n  // and to recycle memory if possible.\n  class Constructor {\n   public:\n    // Construct a new node as a clone of [from].\n    Constructor(NodeHashCache* cache, Node* from)\n        : node_cache_(cache), from_(from), tmp_(nullptr) {}\n    // Construct a new node from scratch.\n    Constructor(NodeHashCache* cache, const Operator* op, int input_count,\n                Node** inputs, Type type);\n\n    // Modify the new node.\n    void ReplaceValueInput(Node* input, int i) {\n      if (!tmp_ && input == NodeProperties::GetValueInput(from_, i)) return;\n      Node* node = MutableNode();\n      NodeProperties::ReplaceValueInput(node, input, i);\n    }\n    void ReplaceInput(Node* input, int i) {\n      if (!tmp_ && input == from_->InputAt(i)) return;\n      Node* node = MutableNode();\n      node->ReplaceInput(i, input);\n    }\n\n    // Obtain the mutated node or a cached copy. Invalidates the [Constructor].\n    Node* Get();\n\n   private:\n    Node* MutableNode();\n\n    NodeHashCache* node_cache_;\n    // Original node, copied on write.\n    Node* from_;\n    // Temporary node used for mutations, can be recycled if cache is hit.\n    Node* tmp_;\n  };\n\n private:\n  Node* Query(Node* node);\n  void Insert(Node* node) { cache_.insert(node); }\n\n  TFGraph* graph_;\n  struct NodeEquals {\n    bool operator()(Node* a, Node* b) const {\n      return NodeProperties::Equals(a, b);\n    }\n  };\n  struct NodeHashCode {\n    size_t operator()(Node* n) const { return NodeProperties::HashCode(n); }\n  };\n  ZoneUnorderedSet<Node*, NodeHashCode, NodeEquals> cache_;\n  // Unused nodes whose memory can be recycled.\n  ZoneVector<Node*> temp_nodes_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"EscapeAnalysisReducer\",\n                \"extends\": \"AdvancedReducer\",\n                \"about\": \"Modifies the graph according to the information computed during escape analysis.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"jsgraph_\",\n                        \"type\": \"JSGraph* const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The JSGraph being reduced.\"\n                    },\n                    {\n                        \"name\": \"broker_\",\n                        \"type\": \"JSHeapBroker* const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Broker to access JSHeap data.\"\n                    },\n                    {\n                        \"name\": \"analysis_result_\",\n                        \"type\": \"EscapeAnalysisResult\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The result of the escape analysis.\"\n                    },\n                    {\n                        \"name\": \"object_id_cache_\",\n                        \"type\": \"ZoneVector<Node*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cache for object ID nodes.\"\n                    },\n                    {\n                        \"name\": \"node_cache_\",\n                        \"type\": \"NodeHashCache\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cache for nodes to ensure uniqueness (hash consing).\"\n                    },\n                    {\n                        \"name\": \"arguments_elements_\",\n                        \"type\": \"ZoneSet<Node*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Set of nodes representing elements of arguments objects.\"\n                    },\n                    {\n                        \"name\": \"zone_\",\n                        \"type\": \"Zone* const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Memory zone.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"AdvancedReducer\",\n                    \"Editor\",\n                    \"JSGraph\",\n                    \"JSHeapBroker\",\n                    \"EscapeAnalysisResult\",\n                    \"Zone\",\n                    \"Node\",\n                    \"VirtualObject\",\n                    \"Deduplicator\",\n                    \"NodeHashCache\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE EscapeAnalysisReducer final\n    : public NON_EXPORTED_BASE(AdvancedReducer) {\n public:\n  EscapeAnalysisReducer(Editor* editor, JSGraph* jsgraph, JSHeapBroker* broker,\n                        EscapeAnalysisResult analysis_result, Zone* zone);\n  EscapeAnalysisReducer(const EscapeAnalysisReducer&) = delete;\n  EscapeAnalysisReducer& operator=(const EscapeAnalysisReducer&) = delete;\n\n  Reduction Reduce(Node* node) override;\n  const char* reducer_name() const override { return \"EscapeAnalysisReducer\"; }\n  void Finalize() override;\n\n  // Verifies that all virtual allocation nodes have been dealt with. Run it\n  // after this reducer has been applied.\n  void VerifyReplacement() const;\n\n private:\n  void ReduceFrameStateInputs(Node* node);\n  Node* ReduceDeoptState(Node* node, Node* effect, Deduplicator* deduplicator);\n  Node* ObjectIdNode(const VirtualObject* vobject);\n  Reduction ReplaceNode(Node* original, Node* replacement);\n\n  JSGraph* jsgraph() const { return jsgraph_; }\n  Isolate* isolate() const { return jsgraph_->isolate(); }\n  EscapeAnalysisResult analysis_result() const { return analysis_result_; }\n  Zone* zone() const { return zone_; }\n\n  JSGraph* const jsgraph_;\n  JSHeapBroker* const broker_;\n  EscapeAnalysisResult analysis_result_;\n  ZoneVector<Node*> object_id_cache_;\n  NodeHashCache node_cache_;\n  ZoneSet<Node*> arguments_elements_;\n  Zone* const zone_;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Editor\",\n                    \"about\": \"Edits the graph\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Editor {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSGraph\",\n                    \"about\": \"Represents the JavaScript graph\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class JSGraph {\n                public:\n                  Isolate* isolate() const { return nullptr; }\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSHeapBroker\",\n                    \"about\": \"Provides access to the JS heap\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class JSHeapBroker {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"EscapeAnalysisResult\",\n                    \"about\": \"Represents the result of escape analysis\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class EscapeAnalysisResult {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Zone\",\n                    \"about\": \"Memory zone for allocation\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Node\",\n                    \"about\": \"Represents a node in the graph\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Node {\n                 public:\n                  Node* InputAt(int i) { return nullptr; }\n                  void ReplaceInput(int i, Node* input) {}\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"VirtualObject\",\n                    \"about\": \"Represents a virtual object\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class VirtualObject {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Deduplicator\",\n                    \"about\": \"Deduplicates nodes in the graph\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Deduplicator {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolate\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Reduction\",\n                    \"about\": \"Represents a reduction in the graph\"\n                }\n            </metadata>\n            <code><![CDATA[\n              class Reduction {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Type\",\n                    \"about\": \"Represents the type of an object\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Type {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}