{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/heap-state.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 123, column 46",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/heap-state.h\",\n        \"file_name\": \"heap-state.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the HeapState class, which provides access to internal heap state information for the cppgc garbage collector. This allows querying whether the collector is marking, sweeping, in an atomic pause, or whether the previous GC was conservative.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary configurations and definitions.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"v8config.h\"  // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"HeapHandle\",\n            \"about\": \"Forward declaration for the HeapHandle class. Used to refer to a managed heap.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            class HeapHandle;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"HeapState\",\n            \"about\": \"Provides static methods to query the internal state of the cppgc heap. Allows checking if the garbage collector is marking, sweeping, in the atomic pause, or if the last GC was conservative.  These APIs are marked as experimental and subject to removal.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"HeapHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT HeapState final {\n            public:\n              /**\n               * Returns whether the garbage collector is marking. This API is experimental\n               * and is expected to be removed in future.\n               *\n               * \\param heap_handle The corresponding heap.\n               * \\returns true if the garbage collector is currently marking, and false\n               *   otherwise.\n               */\n              static bool IsMarking(const HeapHandle& heap_handle);\n\n              /*\n               * Returns whether the garbage collector is sweeping. This API is experimental\n               * and is expected to be removed in future.\n               *\n               * \\param heap_handle The corresponding heap.\n               * \\returns true if the garbage collector is currently sweeping, and false\n               *   otherwise.\n               */\n              static bool IsSweeping(const HeapHandle& heap_handle);\n\n              /*\n               * Returns whether the garbage collector is currently sweeping on the thread\n               * owning this heap. This API allows the caller to determine whether it has\n               * been called from a destructor of a managed object. This API is experimental\n               * and may be removed in future.\n               *\n               * \\param heap_handle The corresponding heap.\n               * \\returns true if the garbage collector is currently sweeping on this\n               *   thread, and false otherwise.\n               */\n              static bool IsSweepingOnOwningThread(const HeapHandle& heap_handle);\n\n              /**\n               * Returns whether the garbage collector is in the atomic pause, i.e., the\n               * mutator is stopped from running. This API is experimental and is expected\n               * to be removed in future.\n               *\n               * \\param heap_handle The corresponding heap.\n               * \\returns true if the garbage collector is currently in the atomic pause,\n               *   and false otherwise.\n               */\n              static bool IsInAtomicPause(const HeapHandle& heap_handle);\n\n              /**\n               * Returns whether the last garbage collection was finalized conservatively\n               * (i.e., with a non-empty stack). This API is experimental and is expected to\n               * be removed in future.\n               *\n               * \\param heap_handle The corresponding heap.\n               * \\returns true if the last garbage collection was finalized conservatively,\n               * and false otherwise.\n               */\n              static bool PreviousGCWasConservative(const HeapHandle& heap_handle);\n\n             private:\n              HeapState() = delete;\n            };\n        ]]></code>\n    </class>\n    \n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsMarking\",\n            \"parent\": \"HeapState\",\n            \"about\": \"Determines if the garbage collector is currently marking.\",\n            \"logic\": \"Static method that queries the heap to check if the marking phase of garbage collection is active.\",\n            \"parameters\": [\n                {\n                    \"name\": \"heap_handle\",\n                    \"type\": \"const HeapHandle&\",\n                    \"purpose\": \"Reference to the heap to query.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if marking is in progress, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"HeapHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            static bool IsMarking(const HeapHandle& heap_handle);\n        ]]></code>\n    </func>\n    \n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsSweeping\",\n            \"parent\": \"HeapState\",\n            \"about\": \"Determines if the garbage collector is currently sweeping.\",\n            \"logic\": \"Static method that queries the heap to check if the sweeping phase of garbage collection is active.\",\n            \"parameters\": [\n                {\n                    \"name\": \"heap_handle\",\n                    \"type\": \"const HeapHandle&\",\n                    \"purpose\": \"Reference to the heap to query.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if sweeping is in progress, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"HeapHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            static bool IsSweeping(const HeapHandle& heap_handle);\n        ]]></code>\n    </func>\n    \n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsSweepingOnOwningThread\",\n            \"parent\": \"HeapState\",\n            \"about\": \"Determines if the garbage collector is currently sweeping on the thread that owns the heap.\",\n            \"logic\": \"Static method that queries the heap to check if sweeping is occurring on the current thread. Used to determine if a destructor is called during sweeping.\",\n            \"parameters\": [\n                {\n                    \"name\": \"heap_handle\",\n                    \"type\": \"const HeapHandle&\",\n                    \"purpose\": \"Reference to the heap to query.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if sweeping is in progress on the current thread, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"HeapHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            static bool IsSweepingOnOwningThread(const HeapHandle& heap_handle);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsInAtomicPause\",\n            \"parent\": \"HeapState\",\n            \"about\": \"Determines if the garbage collector is in the atomic pause.\",\n            \"logic\": \"Static method that queries the heap to check if the atomic pause is active (mutator is stopped).\",\n            \"parameters\": [\n                {\n                    \"name\": \"heap_handle\",\n                    \"type\": \"const HeapHandle&\",\n                    \"purpose\": \"Reference to the heap to query.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the atomic pause is active, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"HeapHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            static bool IsInAtomicPause(const HeapHandle& heap_handle);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PreviousGCWasConservative\",\n            \"parent\": \"HeapState\",\n            \"about\": \"Determines if the previous garbage collection was finalized conservatively.\",\n            \"logic\": \"Static method that queries the heap to check if the last GC was conservative (stack not empty).\",\n            \"parameters\": [\n                {\n                    \"name\": \"heap_handle\",\n                    \"type\": \"const HeapHandle&\",\n                    \"purpose\": \"Reference to the heap to query.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the previous GC was conservative, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"HeapHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            static bool PreviousGCWasConservative(const HeapHandle& heap_handle);\n        ]]></code>\n    </func>\n</file>\n```"
}