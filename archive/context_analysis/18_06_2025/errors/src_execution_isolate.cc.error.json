{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/isolate.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/execution/isolate.cc\",\n            \"file_name\": \"isolate.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implementation of the Isolate class, the main execution context for V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers and V8-specific headers for various functionalities such as data structures, algorithms, platform abstractions, and V8 internals.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/execution/isolate.h\"\n\n#include <stdlib.h>\n\n#include <atomic>\n#include <cinttypes>\n#include <cstdint>\n#include <fstream>\n#include <memory>\n#include <optional>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n#include <utility>\n\n#include \"include/v8-template.h\"\n#include \"src/api/api-arguments-inl.h\"\n#include \"src/api/api-inl.h\"\n#include \"src/ast/ast-value-factory.h\"\n#include \"src/ast/scopes.h\"\n#include \"src/base/fpu.h\"\n#include \"src/base/hashmap.h\"\n#include \"src/base/logging.h\"\n#include \"src/base/platform/mutex.h\"\n#include \"src/base/platform/platform.h\"\n#include \"src/base/platform/wrappers.h\"\n#include \"src/base/sys-info.h\"\n#include \"src/base/utils/random-number-generator.h\"\n#include \"src/baseline/baseline-batch-compiler.h\"\n#include \"src/bigint/bigint.h\"\n#include \"src/builtins/builtins-promise.h\"\n#include \"src/builtins/builtins.h\"\n#include \"src/builtins/constants-table-builder.h\"\n#include \"src/codegen/assembler-inl.h\"\n#include \"src/codegen/compilation-cache.h\"\n#include \"src/codegen/flush-instruction-cache.h\"\n#include \"src/common/assert-scope.h\"\n#include \"src/common/globals.h\"\n#include \"src/common/ptr-compr-inl.h\"\n#include \"src/common/thread-local-storage.h\"\n#include \"src/compiler-dispatcher/lazy-compile-dispatcher.h\"\n#include \"src/compiler-dispatcher/optimizing-compile-dispatcher.h\"\n#include \"src/date/date.h\"\n#include \"src/debug/debug-frames.h\"\n#include \"src/debug/debug.h\"\n#include \"src/deoptimizer/deoptimizer.h\"\n#include \"src/deoptimizer/materialized-object-store.h\"\n#include \"src/diagnostics/basic-block-profiler.h\"\n#include \"src/diagnostics/compilation-statistics.h\"\n#include \"src/execution/frames-inl.h\"\n#include \"src/execution/frames.h\"\n#include \"src/execution/isolate-inl.h\"\n#include \"src/execution/local-isolate.h\"\n#include \"src/execution/messages.h\"\n#include \"src/execution/microtask-queue.h\"\n#include \"src/execution/protectors-inl.h\"\n#include \"src/execution/simulator.h\"\n#include \"src/execution/tiering-manager.h\"\n#include \"src/execution/v8threads.h\"\n#include \"src/execution/vm-state-inl.h\"\n#include \"src/flags/flags.h\"\n#include \"src/handles/global-handles-inl.h\"\n#include \"src/handles/persistent-handles.h\"\n#include \"src/heap/heap-inl.h\"\n#include \"src/heap/heap-verifier.h\"\n#include \"src/heap/local-heap-inl.h\"\n#include \"src/heap/parked-scope.h\"\n#include \"src/heap/read-only-heap.h\"\n#include \"src/heap/safepoint.h\"\n#include \"src/ic/stub-cache.h\"\n#include \"src/init/bootstrapper.h\"\n#include \"src/init/setup-isolate.h\"\n#include \"src/init/v8.h\"\n#include \"src/interpreter/bytecode-array-iterator.h\"\n#include \"src/interpreter/bytecodes.h\"\n#include \"src/interpreter/interpreter.h\"\n#include \"src/libsampler/sampler.h\"\n#include \"src/logging/counters.h\"\n#include \"src/logging/log.h\"\n#include \"src/logging/metrics.h\"\n#include \"src/logging/runtime-call-stats-scope.h\"\n#include \"src/numbers/hash-seed-inl.h\"\n#include \"src/objects/backing-store.h\"\n#include \"src/objects/call-site-info-inl.h\"\n#include \"src/objects/call-site-info.h\"\n#include \"src/objects/elements.h\"\n#include \"src/objects/feedback-vector.h\"\n#include \"src/objects/hash-table-inl.h\"\n#include \"src/objects/instance-type-inl.h\"\n#include \"src/objects/js-array-buffer-inl.h\"\n#include \"src/objects/js-array-inl.h\"\n#include \"src/objects/js-atomics-synchronization-inl.h\"\n#include \"src/objects/js-function.h\"\n#include \"src/objects/js-generator-inl.h\"\n#include \"src/objects/js-struct-inl.h\"\n#include \"src/objects/js-weak-refs-inl.h\"\n#include \"src/objects/managed-inl.h\"\n#include \"src/objects/module-inl.h\"\n#include \"src/objects/promise-inl.h\"\n#include \"src/objects/property-descriptor.h\"\n#include \"src/objects/prototype.h\"\n#include \"src/objects/slots.h\"\n#include \"src/objects/smi.h\"\n#include \"src/objects/source-text-module-inl.h\"\n#include \"src/objects/string-set-inl.h\"\n#include \"src/objects/visitors.h\"\n#include \"src/objects/waiter-queue-node.h\"\n#include \"src/profiler/heap-profiler.h\"\n#include \"src/profiler/tracing-cpu-profiler.h\"\n#include \"src/regexp/regexp-stack.h\"\n#include \"src/roots/roots.h\"\n#include \"src/roots/static-roots.h\"\n#include \"src/sandbox/js-dispatch-table-inl.h\"\n#include \"src/snapshot/embedded/embedded-data-inl.h\"\n#include \"src/snapshot/embedded/embedded-file-writer-interface.h\"\n#include \"src/snapshot/read-only-deserializer.h\"\n#include \"src/snapshot/shared-heap-deserializer.h\"\n#include \"src/snapshot/snapshot.h\"\n#include \"src/snapshot/startup-deserializer.h\"\n#include \"src/strings/string-builder-inl.h\"\n#include \"src/strings/string-stream.h\"\n#include \"src/tasks/cancelable-task.h\"\n\n#if defined(V8_USE_PERFETTO)\n#include \"src/tracing/perfetto-logger.h\"\n#endif  // defined(V8_USE_PERFETTO)\n\n#include \"src/tracing/tracing-category-observer.h\"\n#include \"src/utils/address-map.h\"\n#include \"src/utils/ostreams.h\"\n#include \"src/utils/version.h\"\n#include \"src/zone/accounting-allocator.h\"\n#include \"src/zone/type-stats.h\"\n#ifdef V8_INTL_SUPPORT\n#include \"src/objects/intl-objects.h\"\n#include \"unicode/locid.h\"\n#include \"unicode/uobject.h\"\n#endif  // V8_INTL_SUPPORT\n\n#if V8_ENABLE_MAGLEV\n#include \"src/maglev/maglev-concurrent-dispatcher.h\"\n#endif  // V8_ENABLE_MAGLEV\n\n#if V8_ENABLE_WEBASSEMBLY\n#include \"src/builtins/builtins-inl.h\"\n#include \"src/debug/debug-wasm-objects.h\"\n#include \"src/trap-handler/trap-handler.h\"\n#include \"src/wasm/stacks.h\"\n#include \"src/wasm/wasm-code-manager.h\"\n#include \"src/wasm/wasm-code-pointer-table-inl.h\"\n#include \"src/wasm/wasm-engine.h\"\n#include \"src/wasm/wasm-module.h\"\n#include \"src/wasm/wasm-objects.h\"\n\n#if V8_ENABLE_DRUMBRAKE\n#include \"src/wasm/interpreter/wasm-interpreter.h\"\n#endif  // V8_ENABLE_DRUMBRAKE\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n#if defined(V8_ENABLE_ETW_STACK_WALKING)\n#include \"src/diagnostics/etw-jit-win.h\"\n#endif  // V8_ENABLE_ETW_STACK_WALKING\n\n#if defined(V8_OS_WIN64)\n#include \"src/diagnostics/unwinding-info-win64.h\"\n#endif  // V8_OS_WIN64\n\n#if USE_SIMULATOR\n#include \"src/execution/simulator-base.h\"\n#endif\n\nextern \"C\" const uint8_t v8_Default_embedded_blob_code_[];\nextern \"C\" uint32_t v8_Default_embedded_blob_code_size_;\nextern \"C\" const uint8_t v8_Default_embedded_blob_data_[];\nextern \"C\" uint32_t v8_Default_embedded_blob_data_size_;\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"The main execution context for V8.  It manages the heap, garbage collector, compilation, and execution of JavaScript code.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\nnamespace internal {\n\n#ifdef DEBUG\n#define TRACE_ISOLATE(tag)                                                  \\\n  do {                                                                      \\\n    if (v8_flags.trace_isolates) {                                          \\\n      PrintF(\"Isolate %p (id %d)\" #tag \"\\n\", reinterpret_cast<void*>(this), \\\n             id());                                                         \\\n    }                                                                       \\\n  } while (false)\n#else\n#define TRACE_ISOLATE(tag)\n#endif\n\nconst uint8_t* DefaultEmbeddedBlobCode() {\n  return v8_Default_embedded_blob_code_;\n}\nuint32_t DefaultEmbeddedBlobCodeSize() {\n  return v8_Default_embedded_blob_code_size_;\n}\nconst uint8_t* DefaultEmbeddedBlobData() {\n  return v8_Default_embedded_blob_data_;\n}\nuint32_t DefaultEmbeddedBlobDataSize() {\n  return v8_Default_embedded_blob_data_size_;\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DefaultEmbeddedBlobCode\",\n                \"about\": \"Returns a pointer to the default embedded blob code.\",\n                \"logic\": \"This function simply returns the address of the statically defined `v8_Default_embedded_blob_code_`.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const uint8_t*\",\n                    \"description\": \"Pointer to the beginning of embedded blob code.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst uint8_t* DefaultEmbeddedBlobCode() {\n  return v8_Default_embedded_blob_code_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DefaultEmbeddedBlobCodeSize\",\n                \"about\": \"Returns the size of the default embedded blob code.\",\n                \"logic\": \"This function returns the value of statically defined `v8_Default_embedded_blob_code_size_`.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"uint32_t\",\n                    \"description\": \"The size of the embedded blob code in bytes.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nuint32_t DefaultEmbeddedBlobCodeSize() {\n  return v8_Default_embedded_blob_code_size_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DefaultEmbeddedBlobData\",\n                \"about\": \"Returns a pointer to the default embedded blob data.\",\n                \"logic\": \"This function simply returns the address of the statically defined `v8_Default_embedded_blob_data_`.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const uint8_t*\",\n                    \"description\": \"Pointer to the beginning of embedded blob data.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst uint8_t* DefaultEmbeddedBlobData() {\n  return v8_Default_embedded_blob_data_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DefaultEmbeddedBlobDataSize\",\n                \"about\": \"Returns the size of the default embedded blob data.\",\n                \"logic\": \"This function returns the value of statically defined `v8_Default_embedded_blob_data_size_`.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"uint32_t\",\n                    \"description\": \"The size of the embedded blob data in bytes.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nuint32_t DefaultEmbeddedBlobDataSize() {\n  return v8_Default_embedded_blob_data_size_;\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"internal\",\n                \"about\": \"V8 internal implementation details\"\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace internal {\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"SetStickyEmbeddedBlob\",\n                \"about\": \"Sets the global static pointers to the sticky embedded blob. This is used to override default embedded blob\",\n                \"logic\": \"This function is used by mksnapshot and serializer tests to override default embedded blobs.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"code\",\n                        \"type\": \"const uint8_t*\",\n                        \"purpose\": \"Pointer to the beginning of embedded blob code.\"\n                    },\n                    {\n                        \"name\": \"code_size\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"The size of the embedded blob code in bytes.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"const uint8_t*\",\n                        \"purpose\": \"Pointer to the beginning of embedded blob data.\"\n                    },\n                    {\n                        \"name\": \"data_size\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"The size of the embedded blob data in bytes.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid SetStickyEmbeddedBlob(const uint8_t* code, uint32_t code_size,\n                           const uint8_t* data, uint32_t data_size) {\n  sticky_embedded_blob_code_ = code;\n  sticky_embedded_blob_code_size_ = code_size;\n  sticky_embedded_blob_data_ = data;\n  sticky_embedded_blob_data_size_ = data_size;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DisableEmbeddedBlobRefcounting\",\n                \"about\": \"Disables the refcounting mechanism for the embedded blob, used to free the embedded blob manually\",\n                \"logic\": \"This function disable refcounting mechanism and allows to free embedded blob manually\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid DisableEmbeddedBlobRefcounting() {\n  base::MutexGuard guard(current_embedded_blob_refcount_mutex_.Pointer());\n  enable_embedded_blob_refcounting_ = false;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"FreeCurrentEmbeddedBlob\",\n                \"about\": \"Frees the current embedded blob if refcounting is disabled.\",\n                \"logic\": \"This function frees the embedded blob's code and data sections. It is used in mksnapshot and serializer tests when refcounting is disabled.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"OffHeapInstructionStream::FreeOffHeapOffHeapInstructionStream\",\n                    \"Isolate::CurrentEmbeddedBlobCode\",\n                    \"Isolate::CurrentEmbeddedBlobCodeSize\",\n                    \"Isolate::CurrentEmbeddedBlobData\",\n                    \"Isolate::CurrentEmbeddedBlobDataSize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid FreeCurrentEmbeddedBlob() {\n  CHECK(!enable_embedded_blob_refcounting_);\n  base::MutexGuard guard(current_embedded_blob_refcount_mutex_.Pointer());\n\n  if (StickyEmbeddedBlobCode() == nullptr) return;\n\n  CHECK_EQ(StickyEmbeddedBlobCode(), Isolate::CurrentEmbeddedBlobCode());\n  CHECK_EQ(StickyEmbeddedBlobData(), Isolate::CurrentEmbeddedBlobData());\n\n  OffHeapInstructionStream::FreeOffHeapOffHeapInstructionStream(\n      const_cast<uint8_t*>(Isolate::CurrentEmbeddedBlobCode()),\n      Isolate::CurrentEmbeddedBlobCodeSize(),\n      const_cast<uint8_t*>(Isolate::CurrentEmbeddedBlobData()),\n      Isolate::CurrentEmbeddedBlobDataSize());\n\n  current_embedded_blob_code_.store(nullptr, std::memory_order_relaxed);\n  current_embedded_blob_code_size_.store(0, std::memory_order_relaxed);\n  current_embedded_blob_data_.store(nullptr, std::memory_order_relaxed);\n  current_embedded_blob_data_size_.store(0, std::memory_order_relaxed);\n  sticky_embedded_blob_code_ = nullptr;\n  sticky_embedded_blob_code_size_ = 0;\n  sticky_embedded_blob_data_ = nullptr;\n  sticky_embedded_blob_data_size_ = 0;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::CurrentEmbeddedBlobIsBinaryEmbedded\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Checks if the current embedded blob is immortal immovable and is binary-embedded.\",\n                \"logic\": \"This function checks to ensure the embedded blob is safe to rely on being immutable. Returns `true` if blob is binary-embedded and not overridden.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if current embedded blob is binary embedded, false otherwise\"\n                },\n                \"dependencies\": [\n                    \"Isolate::CurrentEmbeddedBlobCode\",\n                    \"DefaultEmbeddedBlobCode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nbool Isolate::CurrentEmbeddedBlobIsBinaryEmbedded() {\n  // In some situations, we must be able to rely on the embedded blob being\n  // immortal immovable. This is the case if the blob is binary-embedded.\n  // See blob lifecycle controls above for descriptions of when the current\n  // embedded blob may change (e.g. in tests or mksnapshot). If the blob is\n  // binary-embedded, it is immortal immovable.\n  const uint8_t* code =\n      current_embedded_blob_code_.load(std::memory_order_relaxed);\n  if (code == nullptr) return false;\n  return code == DefaultEmbeddedBlobCode();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::SetEmbeddedBlob\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Sets the embedded blob for the current isolate.\",\n                \"logic\": \"This function sets the embedded blob data for the isolate and updates the static current blob variables. It also performs debug checksum verification.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"code\",\n                        \"type\": \"const uint8_t*\",\n                        \"purpose\": \"Pointer to the start of the embedded blob code.\"\n                    },\n                    {\n                        \"name\": \"code_size\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"Size of the embedded blob code.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"const uint8_t*\",\n                        \"purpose\": \"Pointer to the start of the embedded blob data.\"\n                    },\n                    {\n                        \"name\": \"data_size\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"Size of the embedded blob data.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"EmbeddedData::FromBlob\",\n                    \"EmbeddedData::EmbeddedBlobDataHash\",\n                    \"EmbeddedData::CreateEmbeddedBlobDataHash\",\n                    \"EmbeddedData::EmbeddedBlobCodeHash\",\n                    \"EmbeddedData::CreateEmbeddedBlobCodeHash\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid Isolate::SetEmbeddedBlob(const uint8_t* code, uint32_t code_size,\n                              const uint8_t* data, uint32_t data_size) {\n  CHECK_NOT_NULL(code);\n  CHECK_NOT_NULL(data);\n\n  embedded_blob_code_ = code;\n  embedded_blob_code_size_ = code_size;\n  embedded_blob_data_ = data;\n  embedded_blob_data_size_ = data_size;\n  current_embedded_blob_code_.store(code, std::memory_order_relaxed);\n  current_embedded_blob_code_size_.store(code_size, std::memory_order_relaxed);\n  current_embedded_blob_data_.store(data, std::memory_order_relaxed);\n  current_embedded_blob_data_size_.store(data_size, std::memory_order_relaxed);\n\n#ifdef DEBUG\n  // Verify that the contents of the embedded blob are unchanged from\n  // serialization-time, just to ensure the compiler isn't messing with us.\n  EmbeddedData d = EmbeddedData::FromBlob();\n  if (d.EmbeddedBlobDataHash() != d.CreateEmbeddedBlobDataHash()) {\n    FATAL(\n        \"Embedded blob data section checksum verification failed. This \"\n        \"indicates that the embedded blob has been modified since compilation \"\n        \"time.\");\n  }\n  if (v8_flags.text_is_readable) {\n    if (d.EmbeddedBlobCodeHash() != d.CreateEmbeddedBlobCodeHash()) {\n      FATAL(\n          \"Embedded blob code section checksum verification failed. This \"\n          \"indicates that the embedded blob has been modified since \"\n          \"compilation time. A common cause is a debugging breakpoint set \"\n          \"within builtin code.\");\n    }\n  }\n#endif  // DEBUG\n}\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::ClearEmbeddedBlob\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Clears the embedded blob for the current isolate, setting pointers to null.\",\n                \"logic\": \"This function clears the isolate-specific embedded blob pointers and the statically-held sticky pointers, used during shutdown or when resetting the isolate.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Isolate::CurrentEmbeddedBlobCode\",\n                    \"Isolate::StickyEmbeddedBlobCode\",\n                    \"Isolate::CurrentEmbeddedBlobData\",\n                    \"Isolate::StickyEmbeddedBlobData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid Isolate::ClearEmbeddedBlob() {\n  CHECK(enable_embedded_blob_refcounting_);\n  CHECK_EQ(embedded_blob_code_, CurrentEmbeddedBlobCode());\n  CHECK_EQ(embedded_blob_code_, StickyEmbeddedBlobCode());\n  CHECK_EQ(embedded_blob_data_, CurrentEmbeddedBlobData());\n  CHECK_EQ(embedded_blob_data_, StickyEmbeddedBlobData());\n\n  embedded_blob_code_ = nullptr;\n  embedded_blob_code_size_ = 0;\n  embedded_blob_data_ = nullptr;\n  embedded_blob_data_size_ = 0;\n  current_embedded_blob_code_.store(nullptr, std::memory_order_relaxed);\n  current_embedded_blob_code_size_.store(0, std::memory_order_relaxed);\n  current_embedded_blob_data_.store(nullptr, std::memory_order_relaxed);\n  current_embedded_blob_data_size_.store(0, std::memory_order_relaxed);\n  sticky_embedded_blob_code_ = nullptr;\n  sticky_embedded_blob_code_size_ = 0;\n  sticky_embedded_blob_data_ = nullptr;\n  sticky_embedded_blob_data_size_ = 0;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::embedded_blob_code\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Getter for the isolate's embedded blob code pointer.\",\n                \"logic\": \"Simple getter that returns the `embedded_blob_code_` member variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const uint8_t*\",\n                    \"description\": \"The embedded blob code pointer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst uint8_t* Isolate::embedded_blob_code() const {\n  return embedded_blob_code_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::embedded_blob_code_size\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Getter for the isolate's embedded blob code size.\",\n                \"logic\": \"Simple getter that returns the `embedded_blob_code_size_` member variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"uint32_t\",\n                    \"description\": \"The embedded blob code size.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nuint32_t Isolate::embedded_blob_code_size() const {\n  return embedded_blob_code_size_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::embedded_blob_data\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Getter for the isolate's embedded blob data pointer.\",\n                \"logic\": \"Simple getter that returns the `embedded_blob_data_` member variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const uint8_t*\",\n                    \"description\": \"The embedded blob data pointer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst uint8_t* Isolate::embedded_blob_data() const {\n  return embedded_blob_data_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::embedded_blob_data_size\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Getter for the isolate's embedded blob data size.\",\n                \"logic\": \"Simple getter that returns the `embedded_blob_data_size_` member variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"uint32_t\",\n                    \"description\": \"The embedded blob data size.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nuint32_t Isolate::embedded_blob_data_size() const {\n  return embedded_blob_data_size_;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::CurrentEmbeddedBlobCode\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Static getter for the current embedded blob code pointer.\",\n                \"logic\": \"Returns the current active embedded blob code, pointed to by a static atomic variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const uint8_t*\",\n                    \"description\": \"The current active embedded blob code pointer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nconst uint8_t* Isolate::CurrentEmbeddedBlobCode() {\n  return current_embedded_blob_code_.load(std::memory_order_relaxed);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::CurrentEmbeddedBlobCodeSize\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Static getter for the current embedded blob code size.\",\n                \"logic\": \"Returns the current active embedded blob code's size, from a static atomic variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"uint32_t\",\n                    \"description\": \"The current active embedded blob code size.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nuint32_t Isolate::CurrentEmbeddedBlobCodeSize() {\n  return current_embedded_blob_code_size_.load(std::memory_order_relaxed);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::CurrentEmbeddedBlobData\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Static getter for the current embedded blob data pointer.\",\n                \"logic\": \"Returns the current active embedded blob data, pointed to by a static atomic variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const uint8_t*\",\n                    \"description\": \"The current active embedded blob data pointer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nconst uint8_t* Isolate::CurrentEmbeddedBlobData() {\n  return current_embedded_blob_data_.load(std::memory_order_relaxed);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::CurrentEmbeddedBlobDataSize\",\n                \"parent\": \"Isolate\",\n                \"about\": \"Static getter for the current embedded blob data size.\",\n                \"logic\": \"Returns the current active embedded blob data's size, from a static atomic variable.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"uint32_t\",\n                    \"description\": \"The current active embedded blob data size.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nuint32_t Isolate::CurrentEmbeddedBlobDataSize() {\n  return current_embedded_blob_data_size_.load(std::memory_order_relaxed);\n}\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Isolate::GetShortBuiltinsCallRegion\",\n"
}