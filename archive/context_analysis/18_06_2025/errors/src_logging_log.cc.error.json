{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/logging/log.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/logging/log.cc\",\n        \"file_name\": \"log.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Implements logging functionality for the V8 JavaScript engine, including code creation, movement, and deoptimization events.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Standard C++ libraries and V8-specific headers required for logging, data structures, platform abstraction, and core engine components.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/logging/log.h\"\n\n#include <atomic>\n#include <cstdarg>\n#include <memory>\n#include <sstream>\n\n#include \"include/v8-locker.h\"\n#include \"src/api/api-inl.h\"\n#include \"src/base/hashing.h\"\n#include \"src/base/platform/mutex.h\"\n#include \"src/base/platform/platform.h\"\n#include \"src/base/platform/wrappers.h\"\n#include \"src/builtins/profile-data-reader.h\"\n#include \"src/codegen/bailout-reason.h\"\n#include \"src/codegen/compiler.h\"\n#include \"src/codegen/macro-assembler.h\"\n#include \"src/codegen/source-position-table.h\"\n#include \"src/common/assert-scope.h\"\n#include \"src/deoptimizer/deoptimizer.h\"\n#include \"src/diagnostics/perf-jit.h\"\n#include \"src/execution/isolate.h\"\n#include \"src/execution/v8threads.h\"\n#include \"src/execution/vm-state-inl.h\"\n#include \"src/execution/vm-state.h\"\n#include \"src/handles/global-handles.h\"\n#include \"src/heap/combined-heap.h\"\n#include \"src/heap/heap-inl.h\"\n#include \"src/heap/heap-layout-inl.h\"\n#include \"src/init/bootstrapper.h\"\n#include \"src/interpreter/bytecodes.h\"\n#include \"src/interpreter/interpreter.h\"\n#include \"src/libsampler/sampler.h\"\n#include \"src/logging/code-events.h\"\n#include \"src/logging/counters.h\"\n#include \"src/logging/log-file.h\"\n#include \"src/logging/log-inl.h\"\n#include \"src/objects/api-callbacks.h\"\n#include \"src/objects/code-kind.h\"\n#include \"src/objects/code.h\"\n#include \"src/profiler/tick-sample.h\"\n#include \"src/snapshot/embedded/embedded-data.h\"\n#include \"src/strings/string-stream.h\"\n#include \"src/strings/unicode-inl.h\"\n#include \"src/tracing/tracing-category-observer.h\"\n#include \"src/utils/memcopy.h\"\n#include \"src/utils/version.h\"\n\n#ifdef ENABLE_GDB_JIT_INTERFACE\n#include \"src/diagnostics/gdb-jit.h\"\n#endif  // ENABLE_GDB_JIT_INTERFACE\n\n#if V8_ENABLE_WEBASSEMBLY\n#include \"src/wasm/wasm-code-manager.h\"\n#include \"src/wasm/wasm-engine.h\"\n#include \"src/wasm/wasm-import-wrapper-cache.h\"\n#include \"src/wasm/wasm-objects-inl.h\"\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n#if defined(V8_ENABLE_ETW_STACK_WALKING)\n#include \"src/diagnostics/etw-jit-win.h\"\n#endif  // V8_ENABLE_ETW_STACK_WALKING\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CodeEventLogger\",\n            \"about\": \"Base class for logging code events, providing common functionality like name buffering and logging recorded buffers.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                },\n                {\n                    \"name\": \"name_buffer_\",\n                    \"type\": \"std::unique_ptr<NameBuffer>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Unique pointer to a NameBuffer object used to format code names.\"\n                }\n            ],\n            \"dependencies\": [\n                \"NameBuffer\",\n                \"Isolate\",\n                \"AbstractCode\",\n                \"SharedFunctionInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass CodeEventLogger {\n public:\n  CodeEventLogger(Isolate* isolate)\n    : isolate_(isolate), name_buffer_(std::make_unique<NameBuffer>()) {}\n\n  virtual ~CodeEventLogger() = default;\n\n  virtual void CodeMoveEvent(Tagged<InstructionStream> from,\n                     Tagged<InstructionStream> to) {}\n  virtual void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                         Tagged<BytecodeArray> to) {}\n  virtual void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                           DirectHandle<SharedFunctionInfo> shared) {}\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      const char* comment);\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<Name> name);\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<SharedFunctionInfo> shared,\n                                      DirectHandle<Name> script_name);\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<SharedFunctionInfo> shared,\n                                      DirectHandle<Name> script_name, int line,\n                                      int column);\n\n#if V8_ENABLE_WEBASSEMBLY\n  void CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                                      wasm::WasmName name,\n                                      const char* source_url,\n                                      int /*code_offset*/, int /*script_id*/);\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                            DirectHandle<String> source,\n                                            RegExpFlags flags);\n  virtual void SnapshotPositionEvent(Tagged<HeapObject> obj, int pos) {}\n  virtual void CodeMovingGCEvent() {}\n\n protected:\n  virtual void LogRecordedBuffer(Tagged<AbstractCode> code,\n                         MaybeDirectHandle<SharedFunctionInfo> maybe_shared,\n                         const char* name, size_t length) = 0;\n#if V8_ENABLE_WEBASSEMBLY\n  virtual void LogRecordedBuffer(const wasm::WasmCode* code, const char* name,\n                         size_t length) = 0;\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  Isolate* isolate() const { return isolate_; }\n  bool is_listening_to_code_events() const {\n      return isolate_->logger()->is_listening_to_code_events();\n  }\n\n private:\n  class NameBuffer;\n  Isolate* isolate_;\n  std::unique_ptr<NameBuffer> name_buffer_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CodeEventLogger::NameBuffer\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Helper class for CodeEventLogger to efficiently build code names for logging, avoiding frequent string allocations.\",\n            \"attributes\": [\n                {\n                    \"name\": \"utf8_pos_\",\n                    \"type\": \"size_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Current position in the UTF-8 buffer.\"\n                },\n                {\n                    \"name\": \"utf8_buffer_\",\n                    \"type\": \"char[kUtf8BufferSize]\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Buffer for storing UTF-8 encoded name.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Name\",\n                \"String\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass CodeEventLogger::NameBuffer {\n public:\n  NameBuffer() { Reset(); }\n\n  void Reset() { utf8_pos_ = 0; }\n\n  void Init(CodeTag tag) {\n    Reset();\n    AppendBytes(kCodeTagNames[static_cast<int>(tag)]);\n    AppendByte(':');\n  }\n\n  void AppendName(Tagged<Name> name) {\n    if (IsString(name)) {\n      AppendString(Cast<String>(name));\n    } else {\n      Tagged<Symbol> symbol = Cast<Symbol>(name);\n      AppendBytes(\"symbol(\");\n      if (!IsUndefined(symbol->description())) {\n        AppendBytes(\"\\\"\");\n        AppendString(Cast<String>(symbol->description()));\n        AppendBytes(\"\\\" \");\n      }\n      AppendBytes(\"hash \");\n      AppendHex(symbol->hash());\n      AppendByte(')');\n    }\n  }\n\n  void AppendString(Tagged<String> str) {\n    if (str.is_null()) return;\n    size_t length = 0;\n    std::unique_ptr<char[]> c_str = str->ToCString(&length);\n    AppendBytes(c_str.get(), length);\n  }\n\n  void AppendBytes(const char* bytes, size_t size) {\n    size = std::min(size, kUtf8BufferSize - utf8_pos_);\n    MemCopy(utf8_buffer_ + utf8_pos_, bytes, size);\n    utf8_pos_ += size;\n  }\n\n  void AppendBytes(const char* bytes) {\n    size_t len = strlen(bytes);\n    DCHECK_GE(kMaxInt, len);\n    AppendBytes(bytes, static_cast<int>(len));\n  }\n\n  void AppendByte(char c) {\n    if (utf8_pos_ >= kUtf8BufferSize) return;\n    utf8_buffer_[utf8_pos_++] = c;\n  }\n\n  void AppendInt(int n) {\n    if (utf8_pos_ >= kUtf8BufferSize) return;\n    size_t space = kUtf8BufferSize - utf8_pos_;\n    base::Vector<char> buffer(utf8_buffer_ + utf8_pos_, space);\n    int size = SNPrintF(buffer, \"%d\", n);\n    if (size > 0 && utf8_pos_ + size <= kUtf8BufferSize) {\n      utf8_pos_ += size;\n    }\n  }\n\n  void AppendHex(uint32_t n) {\n    if (utf8_pos_ >= kUtf8BufferSize) return;\n    size_t space = kUtf8BufferSize - utf8_pos_;\n    base::Vector<char> buffer(utf8_buffer_ + utf8_pos_, space);\n    int size = SNPrintF(buffer, \"%x\", n);\n    if (size > 0 && utf8_pos_ + size <= kUtf8BufferSize) {\n      utf8_pos_ += size;\n    }\n  }\n\n  const char* get() { return utf8_buffer_; }\n  size_t size() const { return utf8_pos_; }\n\n private:\n  static const size_t kUtf8BufferSize = 4096;\n  static const size_t kUtf16BufferSize = kUtf8BufferSize;\n\n  size_t utf8_pos_;\n  char utf8_buffer_[kUtf8BufferSize];\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CodeEventLogger::CodeCreateEvent\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Logs a code creation event with a comment.\",\n            \"logic\": \"Initializes the name buffer with the code tag and appends the comment, then logs the recorded buffer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"tag\",\n                    \"type\": \"CodeTag\",\n                    \"purpose\": \"The tag identifying the type of code.\"\n                },\n                {\n                    \"name\": \"code\",\n                    \"type\": \"DirectHandle<AbstractCode>\",\n                    \"purpose\": \"The code object.\"\n                },\n                {\n                    \"name\": \"comment\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"A descriptive comment.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LogRecordedBuffer\",\n                \"NameBuffer\",\n                \"AbstractCode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid CodeEventLogger::CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      const char* comment) {\n  DCHECK(is_listening_to_code_events());\n  name_buffer_->Init(tag);\n  name_buffer_->AppendBytes(comment);\n  DisallowGarbageCollection no_gc;\n  LogRecordedBuffer(*code, MaybeDirectHandle<SharedFunctionInfo>(),\n                    name_buffer_->get(), name_buffer_->size());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CodeEventLogger::CodeCreateEvent\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Logs a code creation event with a name.\",\n            \"logic\": \"Initializes the name buffer with the code tag and appends the name, then logs the recorded buffer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"tag\",\n                    \"type\": \"CodeTag\",\n                    \"purpose\": \"The tag identifying the type of code.\"\n                },\n                {\n                    \"name\": \"code\",\n                    \"type\": \"DirectHandle<AbstractCode>\",\n                    \"purpose\": \"The code object.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"DirectHandle<Name>\",\n                    \"purpose\": \"The name of the code object.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LogRecordedBuffer\",\n                \"NameBuffer\",\n                \"AbstractCode\",\n                \"Name\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid CodeEventLogger::CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<Name> name) {\n  DCHECK(is_listening_to_code_events());\n  name_buffer_->Init(tag);\n  name_buffer_->AppendName(*name);\n  DisallowGarbageCollection no_gc;\n  LogRecordedBuffer(*code, MaybeDirectHandle<SharedFunctionInfo>(),\n                    name_buffer_->get(), name_buffer_->size());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CodeEventLogger::CodeCreateEvent\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Logs a code creation event with a shared function info and script name.\",\n            \"logic\": \"Initializes the name buffer with the code tag, computes a marker based on shared function info and code, appends the script name, then logs the recorded buffer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"tag\",\n                    \"type\": \"CodeTag\",\n                    \"purpose\": \"The tag identifying the type of code.\"\n                },\n                {\n                    \"name\": \"code\",\n                    \"type\": \"DirectHandle<AbstractCode>\",\n                    \"purpose\": \"The code object.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"DirectHandle<SharedFunctionInfo>\",\n                    \"purpose\": \"Shared function info.\"\n                },\n                {\n                    \"name\": \"script_name\",\n                    \"type\": \"DirectHandle<Name>\",\n                    \"purpose\": \"Script name.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LogRecordedBuffer\",\n                \"NameBuffer\",\n                \"AbstractCode\",\n                \"SharedFunctionInfo\",\n                \"Name\",\n                \"ComputeMarker\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid CodeEventLogger::CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<SharedFunctionInfo> shared,\n                                      DirectHandle<Name> script_name) {\n  DCHECK(is_listening_to_code_events());\n  name_buffer_->Init(tag);\n  name_buffer_->AppendBytes(ComputeMarker(*shared, *code));\n  name_buffer_->AppendByte(' ');\n  name_buffer_->AppendName(*script_name);\n  DisallowGarbageCollection no_gc;\n  LogRecordedBuffer(*code, shared, name_buffer_->get(), name_buffer_->size());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CodeEventLogger::CodeCreateEvent\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Logs a code creation event with shared function info, script name, line number, and column number.\",\n            \"logic\": \"Initializes the name buffer with the code tag, computes a marker, appends debug name, script name, line, and column, then logs the recorded buffer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"tag\",\n                    \"type\": \"CodeTag\",\n                    \"purpose\": \"The tag identifying the type of code.\"\n                },\n                {\n                    \"name\": \"code\",\n                    \"type\": \"DirectHandle<AbstractCode>\",\n                    \"purpose\": \"The code object.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"DirectHandle<SharedFunctionInfo>\",\n                    \"purpose\": \"Shared function info.\"\n                },\n                {\n                    \"name\": \"script_name\",\n                    \"type\": \"DirectHandle<Name>\",\n                    \"purpose\": \"Script name.\"\n                },\n                {\n                    \"name\": \"line\",\n                    \"type\": \"int\",\n                    \"purpose\": \"Line number.\"\n                },\n                {\n                    \"name\": \"column\",\n                    \"type\": \"int\",\n                    \"purpose\": \"Column number.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LogRecordedBuffer\",\n                \"NameBuffer\",\n                \"AbstractCode\",\n                \"SharedFunctionInfo\",\n                \"Name\",\n                \"String\",\n                \"ComputeMarker\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid CodeEventLogger::CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<SharedFunctionInfo> shared,\n                                      DirectHandle<Name> script_name, int line,\n                                      int column) {\n  DCHECK(is_listening_to_code_events());\n  name_buffer_->Init(tag);\n  name_buffer_->AppendBytes(ComputeMarker(*shared, *code));\n  name_buffer_->AppendBytes(shared->DebugNameCStr().get());\n  name_buffer_->AppendByte(' ');\n  if (IsString(*script_name)) {\n    name_buffer_->AppendString(Cast<String>(*script_name));\n  } else {\n    name_buffer_->AppendBytes(\"symbol(hash \");\n    name_buffer_->AppendHex(Cast<Name>(*script_name)->hash());\n    name_buffer_->AppendByte(')');\n  }\n  name_buffer_->AppendByte(':');\n  name_buffer_->AppendInt(line);\n  name_buffer_->AppendByte(':');\n  name_buffer_->AppendInt(column);\n  DisallowGarbageCollection no_gc;\n  LogRecordedBuffer(*code, shared, name_buffer_->get(), name_buffer_->size());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CodeEventLogger::CodeCreateEvent\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Logs a code creation event for WebAssembly code.\",\n            \"logic\": \"Initializes the name buffer with the code tag, appends the Wasm name and other information, then logs the recorded buffer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"tag\",\n                    \"type\": \"CodeTag\",\n                    \"purpose\": \"The tag identifying the type of code.\"\n                },\n                {\n                    \"name\": \"code\",\n                    \"type\": \"const wasm::WasmCode*\",\n                    \"purpose\": \"The WebAssembly code object.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"wasm::WasmName\",\n                    \"purpose\": \"The name of the WebAssembly code.\"\n                },\n                {\n                    \"name\": \"source_url\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"Source URL (unused).\"\n                },\n                {\n                    \"name\": \"code_offset\",\n                    \"type\": \"int\",\n                    \"purpose\": \"Code offset (unused).\"\n                },\n                {\n                    \"name\": \"script_id\",\n                    \"type\": \"int\",\n                    \"purpose\": \"Script ID (unused).\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LogRecordedBuffer\",\n                \"NameBuffer\",\n                \"WasmCode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nvoid CodeEventLogger::CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                                      wasm::WasmName name,\n                                      const char* source_url,\n                                      int /*code_offset*/, int /*script_id*/) {\n  DCHECK(is_listening_to_code_events());\n  name_buffer_->Init(tag);\n  DCHECK(!name.empty());\n  name_buffer_->AppendBytes(name.begin(), name.length());\n  name_buffer_->AppendByte('-');\n  if (code->IsAnonymous()) {\n    name_buffer_->AppendBytes(\"<anonymous>\");\n  } else {\n    name_buffer_->AppendInt(code->index());\n  }\n  name_buffer_->AppendByte('-');\n  name_buffer_->AppendBytes(ExecutionTierToString(code->tier()));\n  DisallowGarbageCollection no_gc;\n  LogRecordedBuffer(code, name_buffer_->get(), name_buffer_->size());\n}\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CodeEventLogger::RegExpCodeCreateEvent\",\n            \"parent\": \"CodeEventLogger\",\n            \"about\": \"Logs a regular expression code creation event.\",\n            \"logic\": \"Resets the name buffer, appends the regex pattern and flags (with a pprof demangling hack), and logs the recorded buffer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"code\",\n                    \"type\": \"DirectHandle<AbstractCode>\",\n                    \"purpose\": \"The code object for the RegExp.\"\n                },\n                {\n                    \"name\": \"source\",\n                    \"type\": \"DirectHandle<String>\",\n                    \"purpose\": \"The source string of the RegExp.\"\n                },\n                {\n                    \"name\": \"flags\",\n                    \"type\": \"RegExpFlags\",\n                    \"purpose\": \"The RegExp flags.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LogRecordedBuffer\",\n                \"NameBuffer\",\n                \"AbstractCode\",\n                \"String\",\n                \"RegExpFlags\",\n                \"JSRegExp\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid CodeEventLogger::RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                            DirectHandle<String> source,\n                                            RegExpFlags flags) {\n  DCHECK(is_listening_to_code_events());\n  // Note we don't call Init due to the required pprof demangling hack for\n  // regexp patterns.\n  name_buffer_->Reset();\n  // https://github.com/google/pprof/blob/4cf4322d492d108a9d6526d10844e04792982cbb/internal/symbolizer/symbolizer.go#L312.\n  name_buffer_->AppendBytes(\"RegExp.>\");\n  name_buffer_->AppendBytes(\" src: '\");\n  name_buffer_->AppendString(*source);\n  name_buffer_->AppendBytes(\"' flags: '\");\n  DirectHandle<String> flags_str =\n      JSRegExp::StringFromFlags(isolate_, JSRegExp::AsJSRegExpFlags(flags));\n  name_buffer_->AppendString(*flags_str);\n  name_buffer_->AppendBytes(\"'\");\n  DisallowGarbageCollection no_gc;\n  LogRecordedBuffer(*code, MaybeDirectHandle<SharedFunctionInfo>(),\n                    name_buffer_->get(), name_buffer_->size());\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"LinuxPerfBasicLogger\",\n            \"extends\": \"CodeEventLogger\",\n            \"about\": \"A CodeEventLogger implementation for logging code events in a format suitable for the Linux perf tool.\",\n            \"attributes\": [\n                {\n                    \"name\": \"perf_output_handle_\",\n                    \"type\": \"FILE*\",\n                    \"access\": \"static\",\n                    \"purpose\": \"Static, per-process singleton file handle for perf output.\"\n                },\n                {\n                    \"name\": \"reference_count_\",\n                    \"type\": \"uint64_t\",\n                    \"access\": \"static\",\n                    \"purpose\": \"Reference count to manage the lifecycle of the perf output file.\"\n                }\n            ],\n            \"dependencies\": [\n                \"CodeEventLogger\",\n                \"Isolate\",\n                \"AbstractCode\",\n                \"WasmCode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n// Linux perf tool logging support.\n#if V8_OS_LINUX\nclass LinuxPerfBasicLogger : public CodeEventLogger {\n public:\n  explicit LinuxPerfBasicLogger(Isolate* isolate);\n  ~LinuxPerfBasicLogger() override;\n\n  void CodeMoveEvent(Tagged<InstructionStream> from,\n                     Tagged<InstructionStream> to) override {}\n  void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                         Tagged<BytecodeArray> to) override {}\n  void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                           DirectHandle<SharedFunctionInfo> shared) override {}\n\n private:\n  void LogRecordedBuffer(Tagged<AbstractCode> code,\n                         MaybeDirectHandle<SharedFunctionInfo> maybe_shared,\n                         const char* name, size_t length) override;\n#if V8_ENABLE_WEBASSEMBLY\n  void LogRecordedBuffer(const wasm::WasmCode* code, const char* name,\n                         size_t length) override;\n#endif  // V8_ENABLE_WEBASSEMBLY\n  void WriteLogRecordedBuffer(uintptr_t address, size_t size, const char* name,\n                              size_t name_length);\n\n  static base::LazyRecursiveMutex& GetFileMutex();\n\n  // Extension added to V8 log file name to get the low-level log name.\n  static const char kFilenameFormatString[];\n  static const int kFilenameBufferPadding;\n\n  // Per-process singleton file. We assume that there is one main isolate\n  // to determine when it goes away, we keep the reference count.\n  static FILE* perf_output_handle_;\n  static uint64_t reference_count_;\n};\n#endif  // V8_OS_LINUX\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ExternalLogEventListener\",\n            \"about\": \"A LogEventListener implementation that forwards code events to an external handler.\",\n            \"attributes\": [\n                {\n                    \"name\": \"is_listening_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether the listener is active.\"\n                },\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                },\n                {\n                    \"name\": \"code_event_handler_\",\n                    \"type\": \"CodeEventHandler*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the external code event handler.\"\n                }\n            ],\n            \"dependencies\": [\n                \"LogEventListener\",\n                \"Isolate\",\n                \"CodeEventHandler\",\n                \"AbstractCode\",\n                \"Name\",\n                \"String\",\n                \"SharedFunctionInfo\",\n                \"CodeEvent\",\n                \"WasmCode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n// External LogEventListener\nclass ExternalLogEventListener : public LogEventListener {\n public:\n  ExternalLogEventListener(Isolate* isolate)\n    : is_listening_(false), isolate_(isolate), code_event_handler_(nullptr) {}\n\n  ~ExternalLogEventListener() override;\n\n  void LogExistingCode();\n\n  void StartListening(CodeEventHandler* code_event_handler);\n\n  void StopListening();\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      const char* comment) override;\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<Name> name) override;\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<SharedFunctionInfo> shared,\n                                      DirectHandle<Name> name) override;\n\n  void CodeCreateEvent(CodeTag tag,\n                                      DirectHandle<AbstractCode> code,\n                                      DirectHandle<SharedFunctionInfo> shared,\n                                      DirectHandle<Name> source,\n                                      int line, int column) override;\n\n#if V8_ENABLE_WEBASSEMBLY\n  void CodeCreateEvent(CodeTag tag,\n                                               const wasm::WasmCode* code,\n                                               wasm::WasmName name,\n                                               const char* source_url,\n                                               int code_offset, int script_id) override;\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                            DirectHandle<String> source,\n                                            RegExpFlags flags) override;\n\n  void CodeMoveEvent(Tagged<InstructionStream> from,\n                                             Tagged<InstructionStream> to) override;\n\n  void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                                                 Tagged<BytecodeArray> to) override;\n\n private:\n  bool is_listening_;\n  Isolate* isolate_;\n  CodeEventHandler* code_event_handler_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"LowLevelLogger\",\n            \"extends\": \"CodeEventLogger\",\n            \"about\": \"A CodeEventLogger implementation for generating low-level logs that capture code creation and movement events for debugging and analysis.\",\n            \"attributes\": [\n                {\n                    \"name\": \"ll_output_handle_\",\n                    \"type\": \"FILE*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"File handle for the low-level log file.\"\n                }\n            ],\n            \"dependencies\": [\n                \"CodeEventLogger\",\n                \"Isolate\",\n                \"AbstractCode\",\n                \"InstructionStream\",\n                \"BytecodeArray\",\n                \"WasmCode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n// Low-level logging support.\nclass LowLevelLogger : public CodeEventLogger {\n public:\n  LowLevelLogger(Isolate* isolate, const char* file_name);\n  ~LowLevelLogger() override;\n\n  void CodeMoveEvent(Tagged<InstructionStream> from,\n                     Tagged<InstructionStream> to) override;\n  void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                         Tagged<BytecodeArray> to) override;\n  void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                           DirectHandle<SharedFunctionInfo> shared) override {}\n  void SnapshotPositionEvent(Tagged<HeapObject> obj, int pos);\n  void CodeMovingGCEvent() override;\n\n private:\n  void LogRecordedBuffer(Tagged<AbstractCode> code,\n                         MaybeDirectHandle<SharedFunctionInfo> maybe_shared,\n                         const char* name, size_t length) override;\n#if V8_ENABLE_WEBASSEMBLY\n  void LogRecordedBuffer(const wasm::WasmCode* code, const char* name,\n                         size_t length) override;\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  // Low-level profiling event structures.\n  struct CodeCreateStruct {\n    static const char kTag = 'C';\n\n    int32_t name_size;\n    Address code_address;\n    int32_t code_size;\n  };\n\n  struct CodeMoveStruct {\n    static const char kTag = 'M';\n\n    Address from_address;\n    Address to_address;\n  };\n\n  static const char kCodeMovingGCTag = 'G';\n\n  // Extension added to V8"
}