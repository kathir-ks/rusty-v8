{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/globals.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 141, column 34",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/globals.h\",\n            \"file_name\": \"globals.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines global constants, enums, and inline functions used in the TurboFan compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library and V8 headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <ostream>\n\n#include \"src/common/globals.h\"\n#include \"src/flags/flags.h\"\n#include \"src/objects/js-objects.h\"\n#include \"src/runtime/runtime.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CollectFeedbackInGenericLowering\",\n                \"parent\": null,\n                \"about\": \"Determines whether to collect feedback during generic lowering.\",\n                \"logic\": \"Reads the `turbo_collect_feedback_in_generic_lowering` flag to determine whether to collect feedback.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"Returns true if feedback collection is enabled, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"v8_flags\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline bool CollectFeedbackInGenericLowering() {\n  return v8_flags.turbo_collect_feedback_in_generic_lowering;\n}\n        ]]></code>\n    </func>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"StackCheckKind\",\n                \"about\": \"Defines the different kinds of stack checks that can be performed.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class StackCheckKind : uint8_t {\n  kJSFunctionEntry = 0,\n  kJSIterationBody,\n  kCodeStubAssembler,\n  kWasm,\n};\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"GetBuiltinForStackCheckKind\",\n                \"parent\": null,\n                \"about\": \"Returns the Runtime::FunctionId for a given StackCheckKind.\",\n                \"logic\": \"Maps each StackCheckKind to a corresponding Runtime::FunctionId, effectively selecting a builtin function for stack checking based on context.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"StackCheckKind\",\n                        \"purpose\": \"The kind of stack check to perform.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Runtime::FunctionId\",\n                    \"description\": \"The Runtime::FunctionId corresponding to the stack check kind.\"\n                },\n                \"dependencies\": [\n                    \"Runtime\",\n                    \"StackCheckKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Runtime::FunctionId GetBuiltinForStackCheckKind(StackCheckKind kind) {\n  if (kind == StackCheckKind::kJSFunctionEntry) {\n    return Runtime::kStackGuardWithGap;\n  } else if (kind == StackCheckKind::kJSIterationBody) {\n    return Runtime::kHandleNoHeapWritesInterrupts;\n  } else {\n    return Runtime::kStackGuard;\n  }\n}\n        ]]></code>\n    </func>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"CanThrow\",\n                \"about\": \"Indicates whether an operation can throw an exception.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class CanThrow : uint8_t { kNo, kYes };\n        ]]></code>\n    </enum>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"LazyDeoptOnThrow\",\n                \"about\": \"Indicates whether a deoptimization should be lazy on throw.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class LazyDeoptOnThrow : uint8_t { kNo, kYes };\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": null,\n                \"about\": \"Overloads the << operator for LazyDeoptOnThrow enum for printing.\",\n                \"logic\": \"Provides a human-readable string representation of the LazyDeoptOnThrow enum values.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"lazy_deopt_on_throw\",\n                        \"type\": \"LazyDeoptOnThrow\",\n                        \"purpose\": \"The LazyDeoptOnThrow value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"LazyDeoptOnThrow\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline std::ostream& operator<<(std::ostream& os,\n                                LazyDeoptOnThrow lazy_deopt_on_throw) {\n  switch (lazy_deopt_on_throw) {\n    case LazyDeoptOnThrow::kYes:\n      return os << \"LazyDeoptOnThrow\";\n    case LazyDeoptOnThrow::kNo:\n      return os << \"DoNOTLazyDeoptOnThrow\";\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": null,\n                \"about\": \"Overloads the << operator for StackCheckKind enum for printing.\",\n                \"logic\": \"Provides a human-readable string representation of the StackCheckKind enum values.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"StackCheckKind\",\n                        \"purpose\": \"The StackCheckKind value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"StackCheckKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline std::ostream& operator<<(std::ostream& os, StackCheckKind kind) {\n  switch (kind) {\n    case StackCheckKind::kJSFunctionEntry:\n      return os << \"JSFunctionEntry\";\n    case StackCheckKind::kJSIterationBody:\n      return os << \"JSIterationBody\";\n    case StackCheckKind::kCodeStubAssembler:\n      return os << \"CodeStubAssembler\";\n    case StackCheckKind::kWasm:\n      return os << \"Wasm\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": null,\n                \"about\": \"Specializes the hash_value function for StackCheckKind enum.\",\n                \"logic\": \"Returns the integer value of the enum, allowing it to be used in hash tables.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"StackCheckKind\",\n                        \"purpose\": \"The StackCheckKind to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the StackCheckKind.\"\n                },\n                \"dependencies\": [\n                    \"StackCheckKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline size_t hash_value(StackCheckKind kind) {\n  return static_cast<size_t>(kind);\n}\n        ]]></code>\n    </func>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"CheckForMinusZeroMode\",\n                \"about\": \"Defines whether to check for minus zero.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class CheckForMinusZeroMode : uint8_t {\n  kCheckForMinusZero,\n  kDontCheckForMinusZero,\n};\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": null,\n                \"about\": \"Specializes the hash_value function for CheckForMinusZeroMode enum.\",\n                \"logic\": \"Returns the integer value of the enum, allowing it to be used in hash tables.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"mode\",\n                        \"type\": \"CheckForMinusZeroMode\",\n                        \"purpose\": \"The CheckForMinusZeroMode to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the CheckForMinusZeroMode.\"\n                },\n                \"dependencies\": [\n                    \"CheckForMinusZeroMode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline size_t hash_value(CheckForMinusZeroMode mode) {\n  return static_cast<size_t>(mode);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": null,\n                \"about\": \"Overloads the << operator for CheckForMinusZeroMode enum for printing.\",\n                \"logic\": \"Provides a human-readable string representation of the CheckForMinusZeroMode enum values.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"mode\",\n                        \"type\": \"CheckForMinusZeroMode\",\n                        \"purpose\": \"The CheckForMinusZeroMode value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"CheckForMinusZeroMode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline std::ostream& operator<<(std::ostream& os, CheckForMinusZeroMode mode) {\n  switch (mode) {\n    case CheckForMinusZeroMode::kCheckForMinusZero:\n      return os << \"check-for-minus-zero\";\n    case CheckForMinusZeroMode::kDontCheckForMinusZero:\n      return os << \"dont-check-for-minus-zero\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"CallFeedbackRelation\",\n                \"about\": \"Describes the relation of the call feedback for a TurboFan JSCall operator.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class CallFeedbackRelation { kReceiver, kTarget, kUnrelated };\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": null,\n                \"about\": \"Overloads the << operator for CallFeedbackRelation enum for printing.\",\n                \"logic\": \"Provides a human-readable string representation of the CallFeedbackRelation enum values.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"call_feedback_relation\",\n                        \"type\": \"CallFeedbackRelation\",\n                        \"purpose\": \"The CallFeedbackRelation value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"CallFeedbackRelation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline std::ostream& operator<<(std::ostream& os,\n                                CallFeedbackRelation call_feedback_relation) {\n  switch (call_feedback_relation) {\n    case CallFeedbackRelation::kReceiver:\n      return os << \"CallFeedbackRelation::kReceiver\";\n    case CallFeedbackRelation::kTarget:\n      return os << \"CallFeedbackRelation::kTarget\";\n    case CallFeedbackRelation::kUnrelated:\n      return os << \"CallFeedbackRelation::kUnrelated\";\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMaxFastLiteralDepth\",\n                \"about\": \"Maximum depth for literal graphs to be considered for fast deep-copying.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst int kMaxFastLiteralDepth = 3;\n        ]]></code>\n    </constant>\n    <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMaxFastLiteralProperties\",\n                \"about\": \"Maximum total number of properties for literal graphs to be considered for fast deep-copying.\",\n                \"dependencies\": [\n                    \"JSObject\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nconst int kMaxFastLiteralProperties = JSObject::kMaxInObjectProperties;\n        ]]></code>\n    </constant>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"BaseTaggedness\",\n                \"about\": \"Indicates whether a base is tagged or untagged.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum BaseTaggedness : uint8_t { kUntaggedBase, kTaggedBase };\n        ]]></code>\n    </enum>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"MemoryAccessKind\",\n                \"about\": \"Describes the kind of memory access.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nenum class MemoryAccessKind : uint8_t {\n  kNormal,\n  kUnaligned,\n  kProtectedByTrapHandler,\n};\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": null,\n                \"about\": \"Hash function for MemoryAccessKind.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"arg\",\n                        \"type\": \"MemoryAccessKind\",\n                        \"purpose\": \"Value to hash\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"Hash value of MemoryAccessKind\"\n                },\n                \"dependencies\": [\n                    \"MemoryAccessKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(MemoryAccessKind);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": null,\n                \"about\": \"Overloads the << operator for MemoryAccessKind enum for printing.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream\"\n                    },\n                    {\n                        \"name\": \"arg\",\n                        \"type\": \"MemoryAccessKind\",\n                        \"purpose\": \"Value to print\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream\"\n                },\n                \"dependencies\": [\n                    \"MemoryAccessKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, MemoryAccessKind);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"GetArrayTypeFromElementsKind\",\n                \"parent\": null,\n                \"about\": \"Maps ElementsKind to ExternalArrayType.\",\n                \"logic\": \"A switch statement maps the provided ElementsKind to the corresponding ExternalArrayType.  If the ElementsKind isn't a TypedArray or RAB/GSAB TypedArray, the default case is hit, which causes UNREACHABLE() to be called.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"ElementsKind\",\n                        \"purpose\": \"The ElementsKind to convert.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"ExternalArrayType\",\n                    \"description\": \"The corresponding ExternalArrayType.\"\n                },\n                \"dependencies\": [\n                    \"ElementsKind\",\n                    \"ExternalArrayType\",\n                    \"TYPED_ARRAYS\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline ExternalArrayType GetArrayTypeFromElementsKind(ElementsKind kind) {\n  switch (kind) {\n#define TYPED_ARRAY_CASE(Type, type, TYPE, ctype) \\\n  case TYPE##_ELEMENTS:                           \\\n  case RAB_GSAB_##TYPE##_ELEMENTS:                \\\n    return kExternal##Type##Array;\n    TYPED_ARRAYS(TYPED_ARRAY_CASE)\n#undef TYPED_ARRAY_CASE\n    default:\n      break;\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ExternalArrayElementSize\",\n                \"parent\": null,\n                \"about\": \"Returns the size in bytes of an element in an external array.\",\n                \"logic\": \"A switch statement determines the size of the element based on the ExternalArrayType.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"element_type\",\n                        \"type\": \"ExternalArrayType\",\n                        \"purpose\": \"The type of the external array.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The size of the element in bytes.\"\n                },\n                \"dependencies\": [\n                    \"ExternalArrayType\",\n                    \"TYPED_ARRAYS\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline int ExternalArrayElementSize(const ExternalArrayType element_type) {\n  switch (element_type) {\n#define TYPED_ARRAY_CASE(Type, type, TYPE, ctype) \\\n  case kExternal##Type##Array:                    \\\n    DCHECK_LE(sizeof(ctype), 8);                  \\\n    return sizeof(ctype);\n    TYPED_ARRAYS(TYPED_ARRAY_CASE)\n    default:\n      UNREACHABLE();\n#undef TYPED_ARRAY_CASE\n  }\n}\n        ]]></code>\n    </func>\n    <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMaxDoubleRepresentableInt64\",\n                \"about\": \"The biggest double value that fits within the int64_t value range.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr double kMaxDoubleRepresentableInt64 = 9223372036854774784.0;\n        ]]></code>\n    </constant>\n     <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMinDoubleRepresentableInt64\",\n                \"about\": \"The smallest double value that fits within the int64_t value range.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr double kMinDoubleRepresentableInt64 =\n    std::numeric_limits<int64_t>::min();\n        ]]></code>\n    </constant>\n    <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMaxDoubleRepresentableUint64\",\n                \"about\": \"The biggest double value that fits within the uint64_t value range.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr double kMaxDoubleRepresentableUint64 = 18446744073709549568.0;\n        ]]></code>\n    </constant>\n    <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMinusZeroLoBits\",\n                \"about\": \"Low 32 bits for constructing the -0.0 double.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr int32_t kMinusZeroLoBits = static_cast<int32_t>(0);\n        ]]></code>\n    </constant>\n     <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMinusZeroHiBits\",\n                \"about\": \"High 32 bits for constructing the -0.0 double.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr int32_t kMinusZeroHiBits = static_cast<int32_t>(1) << 31;\n        ]]></code>\n    </constant>\n    <constant>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constant\",\n                \"name\": \"kMinusZeroBits\",\n                \"about\": \"64 bits for constructing the -0.0 double.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconstexpr int64_t kMinusZeroBits =\n    (static_cast<uint64_t>(kMinusZeroHiBits) << 32) | kMinusZeroLoBits;\n        ]]></code>\n    </constant>\n</file>\n```"
}