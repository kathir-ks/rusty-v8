{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/snapshot.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 171, column 49",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/snapshot.h\",\n        \"file_name\": \"snapshot.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the Snapshot class and related functions for creating and using snapshots of the V8 heap for faster startup.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary standard library and V8 headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <vector>\n\n            #include \"include/v8-array-buffer.h\"  // For ArrayBuffer::Allocator.\n            #include \"include/v8-snapshot.h\"  // For StartupData.\n            #include \"src/common/assert-scope.h\"\n            #include \"src/common/globals.h\"\n            #include \"src/snapshot/serializer-deserializer.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Snapshot\",\n            \"extends\": \"AllStatic\",\n            \"about\": \"Provides static methods for creating, initializing, and manipulating snapshots of the V8 heap.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Context\",\n                \"Isolate\",\n                \"JSGlobalProxy\",\n                \"SafepointScope\",\n                \"SnapshotData\",\n                \"StartupData\",\n                \"SerializerFlags\",\n                \"SerializeEmbedderFieldsCallback\",\n                \"DeserializeEmbedderFieldsCallback\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class Snapshot : public AllStatic {\n             public:\n              // ---------------- Serialization -------------------------------------------\n\n              enum SerializerFlag {\n                // If set, serializes unknown external references as verbatim data. This\n                // usually leads to invalid state if the snapshot is deserialized in a\n                // different isolate or a different process.\n                // If unset, all external references must be known to the encoder.\n                kAllowUnknownExternalReferencesForTesting = 1 << 0,\n                // If set, the serializer enters a more permissive mode which allows\n                // serialization of a currently active, running isolate. This has multiple\n                // effects; for example, open handles are allowed, microtasks may exist,\n                // etc. Note that in this mode, the serializer is allowed to skip\n                // visitation of certain problematic areas even if they are non-empty. The\n                // resulting snapshot is not guaranteed to result in a runnable context\n                // after deserialization.\n                // If unset, we assert that these previously mentioned areas are empty.\n                kAllowActiveIsolateForTesting = 1 << 1,\n                // If set, the ReadOnlySerializer and the SharedHeapSerializer reconstructs\n                // their respective object caches from the existing ReadOnlyHeap's read-only\n                // object cache or the existing shared heap's object cache so the same\n                // mapping is used.  This mode is used for testing deserialization of a\n                // snapshot from a live isolate that's using a shared ReadOnlyHeap or is\n                // attached to a shared isolate. Otherwise during deserialization the\n                // indices will mismatch, causing deserialization crashes when e.g. types\n                // mismatch.  If unset, the read-only object cache is populated as read-only\n                // objects are serialized, and the shared heap object cache is populated as\n                // shared heap objects are serialized.\n                kReconstructReadOnlyAndSharedObjectCachesForTesting = 1 << 2,\n              };\n              using SerializerFlags = base::Flags<SerializerFlag>;\n              V8_EXPORT_PRIVATE static constexpr SerializerFlags kDefaultSerializerFlags =\n                  {};\n\n              // In preparation for serialization, clear data from the given isolate's heap\n              // that 1. can be reconstructed and 2. is not suitable for serialization. The\n              // `clear_recompilable_data` flag controls whether compiled objects are\n              // cleared from shared function infos and regexp objects.\n              V8_EXPORT_PRIVATE static void ClearReconstructableDataForSerialization(\n                  Isolate* isolate, bool clear_recompilable_data);\n\n              // Serializes the given isolate and contexts. Each context may have an\n              // associated callback to serialize internal fields. The default context must\n              // be passed at index 0.\n              static v8::StartupData Create(\n                  Isolate* isolate, std::vector<Tagged<Context>>* contexts,\n                  const std::vector<SerializeEmbedderFieldsCallback>&\n                      embedder_fields_serializers,\n                  const SafepointScope& safepoint_scope,\n                  const DisallowGarbageCollection& no_gc,\n                  SerializerFlags flags = kDefaultSerializerFlags);\n\n              // ---------------- Deserialization -----------------------------------------\n\n              // Initialize the Isolate from the internal snapshot. Returns false if no\n              // snapshot could be found.\n              static bool Initialize(Isolate* isolate);\n\n              // Create a new context using the internal context snapshot.\n              static MaybeDirectHandle<Context> NewContextFromSnapshot(\n                  Isolate* isolate, DirectHandle<JSGlobalProxy> global_proxy,\n                  size_t context_index,\n                  DeserializeEmbedderFieldsCallback embedder_fields_deserializer);\n\n              // ---------------- Testing -------------------------------------------------\n\n              // This function is used to stress the snapshot component. It serializes the\n              // current isolate and context into a snapshot, deserializes the snapshot into\n              // a new isolate and context, and finally runs VerifyHeap on the fresh\n              // isolate.\n              V8_EXPORT_PRIVATE static void SerializeDeserializeAndVerifyForTesting(\n                  Isolate* isolate, DirectHandle<Context> default_context);\n\n              // ---------------- Helper methods ------------------------------------------\n\n              static bool HasContextSnapshot(Isolate* isolate, size_t index);\n              static bool EmbedsScript(Isolate* isolate);\n              V8_EXPORT_PRIVATE static uint32_t GetExpectedChecksum(\n                  const v8::StartupData* data);\n              V8_EXPORT_PRIVATE static uint32_t CalculateChecksum(\n                  const v8::StartupData* data);\n              V8_EXPORT_PRIVATE static bool VerifyChecksum(const v8::StartupData* data);\n              static bool ExtractRehashability(const v8::StartupData* data);\n              V8_EXPORT_PRIVATE static uint32_t ExtractReadOnlySnapshotChecksum(\n                  const v8::StartupData* data);\n              static bool VersionIsValid(const v8::StartupData* data);\n\n              // To be implemented by the snapshot source.\n              static const v8::StartupData* DefaultSnapshotBlob();\n              static bool ShouldVerifyChecksum(const v8::StartupData* data);\n\n            #ifdef DEBUG\n              static bool SnapshotIsValid(const v8::StartupData* snapshot_blob);\n            #endif  // DEBUG\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateSnapshotDataBlobInternal\",\n            \"about\": \"Convenience wrapper around snapshot data blob creation\",\n            \"logic\": \"Creates a snapshot data blob using the SnapshotCreator.\",\n            \"parameters\": [\n                {\n                    \"name\": \"function_code_handling\",\n                    \"type\": \"v8::SnapshotCreator::FunctionCodeHandling\",\n                    \"purpose\": \"Specifies how function code is handled during snapshot creation.\"\n                },\n                {\n                    \"name\": \"embedded_source\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"Optional embedded source code.\"\n                },\n                {\n                    \"name\": \"snapshot_creator\",\n                    \"type\": \"v8::SnapshotCreator&\",\n                    \"purpose\": \"The snapshot creator object.\"\n                },\n                {\n                    \"name\": \"serializer_flags\",\n                    \"type\": \"Snapshot::SerializerFlags\",\n                    \"purpose\": \"Flags for the serializer. Defaults to kDefaultSerializerFlags.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"v8::StartupData\",\n                \"description\": \"The created snapshot data blob.\"\n            },\n            \"dependencies\": [\n                \"v8::SnapshotCreator\",\n                \"Snapshot::SerializerFlags\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE v8::StartupData CreateSnapshotDataBlobInternal(\n                v8::SnapshotCreator::FunctionCodeHandling function_code_handling,\n                const char* embedded_source = nullptr,\n                Snapshot::SerializerFlags serializer_flags =\n                    Snapshot::kDefaultSerializerFlags);\n            // Convenience wrapper around snapshot data blob creation used e.g. by\n            // mksnapshot.\n            V8_EXPORT_PRIVATE v8::StartupData CreateSnapshotDataBlobInternal(\n                v8::SnapshotCreator::FunctionCodeHandling function_code_handling,\n                const char* embedded_source, v8::SnapshotCreator& snapshot_creator,\n                Snapshot::SerializerFlags serializer_flags =\n                    Snapshot::kDefaultSerializerFlags);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateSnapshotDataBlobInternalForInspectorTest\",\n            \"about\": \"Convenience wrapper around snapshot data blob creation for inspector tests\",\n            \"logic\": \"Creates a snapshot data blob, specifically for inspector tests, due to include rules.\",\n            \"parameters\": [\n                {\n                    \"name\": \"function_code_handling\",\n                    \"type\": \"v8::SnapshotCreator::FunctionCodeHandling\",\n                    \"purpose\": \"Specifies how function code is handled during snapshot creation.\"\n                },\n                {\n                    \"name\": \"embedded_source\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"Optional embedded source code.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"v8::StartupData\",\n                \"description\": \"The created snapshot data blob.\"\n            },\n            \"dependencies\": [\n                \"v8::SnapshotCreator\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            // .. and for inspector-test.cc which needs an extern declaration due to\n            // restrictive include rules:\n            V8_EXPORT_PRIVATE v8::StartupData\n            CreateSnapshotDataBlobInternalForInspectorTest(\n                v8::SnapshotCreator::FunctionCodeHandling function_code_handling,\n                const char* embedded_source);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"WarmUpSnapshotDataBlobInternal\",\n            \"about\": \"Convenience wrapper around snapshot data blob warmup\",\n            \"logic\": \"Warms up the provided snapshot data blob using the provided source.\",\n            \"parameters\": [\n                {\n                    \"name\": \"cold_snapshot_blob\",\n                    \"type\": \"v8::StartupData\",\n                    \"purpose\": \"The cold snapshot data blob to warm up.\"\n                },\n                {\n                    \"name\": \"warmup_source\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The source code used for warming up the snapshot.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"v8::StartupData\",\n                \"description\": \"The warmed-up snapshot data blob.\"\n            },\n            \"dependencies\": [\n                \"v8::StartupData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            // Convenience wrapper around snapshot data blob warmup used e.g. by tests and\n            // mksnapshot.\n            V8_EXPORT_PRIVATE v8::StartupData WarmUpSnapshotDataBlobInternal(\n                v8::StartupData cold_snapshot_blob, const char* warmup_source);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"SetSnapshotFromFile\",\n            \"about\": \"Sets the snapshot data from a file.\",\n            \"logic\": \"Sets the snapshot data blob from an external file, conditionally compiled based on V8_USE_EXTERNAL_STARTUP_DATA.\",\n            \"parameters\": [\n                {\n                    \"name\": \"snapshot_blob\",\n                    \"type\": \"StartupData*\",\n                    \"purpose\": \"Pointer to the StartupData structure to be populated.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"None\"\n            },\n            \"dependencies\": [\n                \"StartupData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_USE_EXTERNAL_STARTUP_DATA\n            void SetSnapshotFromFile(StartupData* snapshot_blob);\n            #endif\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SnapshotCreatorImpl\",\n            \"about\": \"The implementation of the API-exposed class SnapshotCreator.\",\n            \"attributes\": [\n                {\n                    \"name\": \"owns_isolate_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether the SnapshotCreatorImpl owns the Isolate.\"\n                },\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The Isolate associated with the SnapshotCreatorImpl.\"\n                },\n                {\n                    \"name\": \"array_buffer_allocator_\",\n                    \"type\": \"std::unique_ptr<v8::ArrayBuffer::Allocator>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Allocator for ArrayBuffers.\"\n                },\n                {\n                    \"name\": \"contexts_\",\n                    \"type\": \"std::vector<SerializableContext>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Vector of SerializableContext structures.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"NativeContext\",\n                \"StartupData\",\n                \"Address\",\n                \"SnapshotCreator\",\n                \"SerializeEmbedderFieldsCallback\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            // The implementation of the API-exposed class SnapshotCreator.\n            class SnapshotCreatorImpl final {\n             public:\n              // This ctor is used for internal usages:\n              // 1. %ProfileCreateSnapshotDataBlob(): Needs to hook into an existing\n              //    Isolate.\n              //\n              // TODO(v8:14490): Refactor 1. to go through the public API and simplify this\n              // part of the internal snapshot creator.\n              SnapshotCreatorImpl(Isolate* isolate, const intptr_t* api_external_references,\n                                  const StartupData* existing_blob, bool owns_isolate);\n              explicit SnapshotCreatorImpl(const v8::Isolate::CreateParams& params);\n\n              SnapshotCreatorImpl(Isolate* isolate,\n                                  const v8::Isolate::CreateParams& params);\n\n              ~SnapshotCreatorImpl();\n\n              Isolate* isolate() const { return isolate_; }\n\n              void SetDefaultContext(DirectHandle<NativeContext> context,\n                                     SerializeEmbedderFieldsCallback callback);\n              size_t AddContext(DirectHandle<NativeContext> context,\n                                SerializeEmbedderFieldsCallback callback);\n\n              size_t AddData(DirectHandle<NativeContext> context, Address object);\n              size_t AddData(Address object);\n\n              StartupData CreateBlob(\n                  SnapshotCreator::FunctionCodeHandling function_code_handling,\n                  Snapshot::SerializerFlags serializer_flags =\n                      Snapshot::kDefaultSerializerFlags);\n\n              static SnapshotCreatorImpl* FromSnapshotCreator(\n                  v8::SnapshotCreator* snapshot_creator);\n\n              static constexpr size_t kDefaultContextIndex = 0;\n              static constexpr size_t kFirstAddtlContextIndex = kDefaultContextIndex + 1;\n\n             private:\n              struct SerializableContext {\n                SerializableContext() : handle_location(nullptr), callback(nullptr) {}\n                SerializableContext(Address* handle_location,\n                                    SerializeEmbedderFieldsCallback callback)\n                    : handle_location(handle_location), callback(callback) {}\n                Address* handle_location = nullptr;  // A GlobalHandle.\n                SerializeEmbedderFieldsCallback callback;\n              };\n\n              void InitInternal(const StartupData*);\n\n              DirectHandle<NativeContext> context_at(size_t i) const;\n              bool created() const { return contexts_.size() == 0; }\n\n              const bool owns_isolate_;\n              Isolate* const isolate_;\n              std::unique_ptr<v8::ArrayBuffer::Allocator> array_buffer_allocator_;\n              std::vector<SerializableContext> contexts_;\n            };\n        ]]></code>\n    </class>\n</file>\n```"
}