{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/build-graph-phase.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 101, column 6",
  "raw_response": "```xml\n<file>\n  <metadata>\n    {\n      \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/build-graph-phase.cc\",\n      \"file_name\": \"build-graph-phase.cc\",\n      \"language\": \"cpp\",\n      \"purpose\": \"Defines the BuildGraphPhase class, which constructs the Turboshaft graph from the Turbofan schedule.\"\n    }\n  </metadata>\n  <imports>\n    <metadata>\n      {\n        \"language\": \"cpp\",\n        \"purpose\": \"Includes necessary headers for build graph phase implementation.\"\n      }\n    </metadata>\n    <code><![CDATA[\n#include \"src/compiler/turboshaft/build-graph-phase.h\"\n\n#include <optional>\n\n#include \"src/compiler/js-heap-broker.h\"\n#include \"src/compiler/node-origin-table.h\"\n#include \"src/compiler/phase.h\"\n#include \"src/compiler/pipeline-data-inl.h\"\n#include \"src/compiler/turboshaft/graph-builder.h\"\n#include \"src/compiler/turboshaft/phase.h\"\n    ]]></code>\n  </imports>\n  <class>\n    <metadata>\n      {\n        \"language\": \"cpp\",\n        \"type\": \"class\",\n        \"name\": \"BuildGraphPhase\",\n        \"about\": \"This class encapsulates the logic for building the Turboshaft graph from a Turbofan schedule.\",\n        \"attributes\": [],\n        \"dependencies\": []\n      }\n    </metadata>\n    <code><![CDATA[\nnamespace v8::internal::compiler::turboshaft {\n\nclass BuildGraphPhase {\n public:\n  static std::optional<BailoutReason> Run(\n    PipelineData* data, Zone* temp_zone,\n    compiler::TFPipelineData* turbofan_data, Linkage* linkage);\n};\n    ]]></code>\n  </class>\n  <func>\n    <metadata>\n      {\n        \"language\": \"cpp\",\n        \"type\": \"method\",\n        \"name\": \"Run\",\n        \"parent\": \"BuildGraphPhase\",\n        \"about\": \"Executes the build graph phase, constructing the Turboshaft graph from the Turbofan schedule.\",\n        \"logic\": \"1. Retrieves the Turbofan schedule.\\n2. Resets the Turbofan schedule in the pipeline data.\\n3. Creates or retrieves the necessary zones for source positions and node origins.\\n4. Initializes the graph component with the graph zone.\\n5. Calls the BuildGraph function to construct the Turboshaft graph.\\n6. Returns a BailoutReason if the graph building process fails, otherwise returns an empty optional.\",\n        \"parameters\": [\n          {\n            \"name\": \"data\",\n            \"type\": \"PipelineData*\",\n            \"purpose\": \"The pipeline data containing compiler state.\"\n          },\n          {\n            \"name\": \"temp_zone\",\n            \"type\": \"Zone*\",\n            \"purpose\": \"A temporary zone for allocations during this phase.\"\n          },\n          {\n            \"name\": \"turbofan_data\",\n            \"type\": \"compiler::TFPipelineData*\",\n            \"purpose\": \"The Turbofan-specific pipeline data.\"\n          },\n          {\n            \"name\": \"linkage\",\n            \"type\": \"Linkage*\",\n            \"purpose\": \"The linkage object describing calling conventions.\"\n          }\n        ],\n        \"return\": {\n          \"type\": \"std::optional<BailoutReason>\",\n          \"description\": \"An optional BailoutReason indicating if the graph building process failed.\"\n        },\n        \"dependencies\": [\n          \"Schedule\",\n          \"JsWasmCallsSidetable\",\n          \"UnparkedScopeIfNeeded\",\n          \"BuildGraph\",\n          \"PipelineData\",\n          \"Zone\",\n          \"compiler::TFPipelineData\",\n          \"Linkage\",\n          \"SourcePositionTable\",\n          \"NodeOriginTable\",\n          \"BailoutReason\"\n        ]\n      }\n    </metadata>\n    <code><![CDATA[\nstd::optional<BailoutReason> BuildGraphPhase::Run(\n    PipelineData* data, Zone* temp_zone,\n    compiler::TFPipelineData* turbofan_data, Linkage* linkage) {\n  Schedule* schedule = turbofan_data->schedule();\n  turbofan_data->reset_schedule();\n  DCHECK_NOT_NULL(schedule);\n\n  JsWasmCallsSidetable* js_wasm_calls_sidetable =\n#if V8_ENABLE_WEBASSEMBLY\n      turbofan_data->js_wasm_calls_sidetable();\n#else\n      nullptr;\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  UnparkedScopeIfNeeded scope(data->broker());\n\n  // Construct a new graph.\n  ZoneWithNamePointer<SourcePositionTable, kGraphZoneName> source_positions(\n      turbofan_data->source_positions());\n  ZoneWithNamePointer<NodeOriginTable, kGraphZoneName> node_origins(\n      turbofan_data->node_origins());\n  data->InitializeGraphComponentWithGraphZone(turbofan_data->ReleaseGraphZone(),\n                                              source_positions, node_origins);\n\n  if (auto bailout = turboshaft::BuildGraph(data, schedule, temp_zone, linkage,\n                                            js_wasm_calls_sidetable)) {\n    return bailout;\n  }\n  return {};\n}\n    ]]></code>\n  </func>\n  <dependencies>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"Schedule\",\n          \"about\": \"Represents the scheduling information from Turbofan.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class Schedule {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"JsWasmCallsSidetable\",\n          \"about\": \"A side table for JS-Wasm calls.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class JsWasmCallsSidetable {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"UnparkedScopeIfNeeded\",\n          \"about\": \"Manages unparking the scope if needed.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class UnparkedScopeIfNeeded {};\n      ]]></code>\n    </class>\n    <func>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"function\",\n          \"name\": \"BuildGraph\",\n          \"about\": \"Builds the turboshaft graph.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        std::optional<BailoutReason> BuildGraph(PipelineData* data, Schedule* schedule, Zone* temp_zone, Linkage* linkage, JsWasmCallsSidetable* js_wasm_calls_sidetable);\n      ]]></code>\n    </func>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"PipelineData\",\n          \"about\": \"Carries data needed for the compilation pipeline.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class PipelineData {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"Zone\",\n          \"about\": \"Memory allocation zone.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class Zone {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"Linkage\",\n          \"about\": \"Describes the linkage between functions.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class Linkage {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"SourcePositionTable\",\n          \"about\": \"Stores source position information for nodes.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class SourcePositionTable {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"NodeOriginTable\",\n          \"about\": \"Stores origin information for nodes.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class NodeOriginTable {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"BailoutReason\",\n          \"about\": \"Represents a reason for bailing out of compilation.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class BailoutReason {};\n      ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TFPipelineData\",\n            \"about\": \"Turbofan pipeline specific data.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            namespace compiler { class TFPipelineData {}; }\n        ]]></code>\n    </class>\n  </dependencies>\n</file>\n```"
}