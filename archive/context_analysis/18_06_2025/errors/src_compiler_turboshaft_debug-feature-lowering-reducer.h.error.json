{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/debug-feature-lowering-reducer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 200, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/debug-feature-lowering-reducer.h\",\n        \"file_name\": \"debug-feature-lowering-reducer.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines a Turboshaft reducer that lowers debug features like DebugPrint and StaticAssert during compilation.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for compilation, Turboshaft infrastructure, and JS heap access.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/js-heap-broker.h\"\n#include \"src/compiler/turboshaft/assembler.h\"\n#include \"src/compiler/turboshaft/builtin-call-descriptors.h\"\n#include \"src/compiler/turboshaft/index.h\"\n#include \"src/compiler/turboshaft/operations.h\"\n#include \"src/compiler/turboshaft/phase.h\"\n#include \"src/compiler/turboshaft/representations.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DebugFeatureLoweringReducer\",\n            \"extends\": \"Next\",\n            \"about\": \"A Turboshaft reducer that lowers debug features. It inherits from a template parameter `Next`, which is the next reducer in the chain.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate, providing access to the runtime environment.\"\n                },\n                {\n                    \"name\": \"broker_\",\n                    \"type\": \"JSHeapBroker*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the JSHeapBroker, used for accessing the JS heap.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Next\",\n                \"Isolate\",\n                \"JSHeapBroker\",\n                \"OpIndex\",\n                \"RegisterRepresentation\",\n                \"Type\",\n                \"V\",\n                \"None\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Next>\nclass DebugFeatureLoweringReducer : public Next {\n public:\n  TURBOSHAFT_REDUCER_BOILERPLATE(DebugFeatureLowering)\n\n  OpIndex REDUCE(DebugPrint)(OpIndex input, RegisterRepresentation rep);\n\n  V<None> REDUCE(StaticAssert)(V<Word32> condition, const char* source);\n\n  OpIndex REDUCE(CheckTurboshaftTypeOf)(OpIndex input,\n                                        RegisterRepresentation rep, Type type,\n                                        bool successful);\n\n private:\n  Isolate* isolate_ = __ data() -> isolate();\n  JSHeapBroker* broker_ = __ data() -> broker();\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"REDUCE(DebugPrint)\",\n            \"parent\": \"DebugFeatureLoweringReducer\",\n            \"about\": \"Reduces a DebugPrint operation by calling appropriate builtins or runtime functions based on the register representation of the input.\",\n            \"logic\": \"The function checks if an isolate is available. If so, it calls the appropriate DebugPrint builtin (DebugPrintWordPtr, DebugPrintFloat64) or runtime function (DebugPrint) based on the input's register representation. If an isolate isn't available, it means we are in webassembly and it calls the corresponding WasmCallBuiltinThroughJumptable builtin.\",\n            \"parameters\": [\n                {\n                    \"name\": \"input\",\n                    \"type\": \"OpIndex\",\n                    \"purpose\": \"The OpIndex of the value to be printed.\"\n                },\n                {\n                    \"name\": \"rep\",\n                    \"type\": \"RegisterRepresentation\",\n                    \"purpose\": \"The register representation of the input value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"OpIndex\",\n                \"description\": \"Returns an empty OpIndex.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"RegisterRepresentation\",\n                \"OpIndex\",\n                \"BuiltinCallDescriptor\",\n                \"WasmCallBuiltinThroughJumptable\",\n                \"CallBuiltin_DebugPrintWordPtr\",\n                \"CallBuiltin_DebugPrintFloat64\",\n                \"CallRuntime_DebugPrint\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  OpIndex REDUCE(DebugPrint)(OpIndex input, RegisterRepresentation rep) {\n    if (isolate_ != nullptr) {\n      switch (rep.value()) {\n        case RegisterRepresentation::WordPtr():\n          __ CallBuiltin_DebugPrintWordPtr(isolate_, __ NoContextConstant(),\n                                           input);\n          break;\n        case RegisterRepresentation::Float64():\n          __ CallBuiltin_DebugPrintFloat64(isolate_, __ NoContextConstant(),\n                                           input);\n          break;\n        case RegisterRepresentation::Tagged():\n          __ CallRuntime_DebugPrint(isolate_, input);\n          break;\n        default:\n          // TODO(nicohartmann@): Support other representations.\n          UNIMPLEMENTED();\n      }\n    } else {\n#if V8_ENABLE_WEBASSEMBLY\n      DCHECK(__ data()->is_wasm());\n      switch (rep.value()) {\n        case RegisterRepresentation::Float64():\n          __ template WasmCallBuiltinThroughJumptable<\n              BuiltinCallDescriptor::DebugPrintFloat64>(__ NoContextConstant(),\n                                                        {input});\n          break;\n        case RegisterRepresentation::WordPtr():\n          __ template WasmCallBuiltinThroughJumptable<\n              BuiltinCallDescriptor::DebugPrintWordPtr>(__ NoContextConstant(),\n                                                        {input});\n          break;\n        default:\n          // TODO(mliedtke): Support other representations.\n          UNIMPLEMENTED();\n      }\n#else\n      UNREACHABLE();\n#endif\n    }\n    return {};\n  }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"REDUCE(StaticAssert)\",\n            \"parent\": \"DebugFeatureLoweringReducer\",\n            \"about\": \"Reduces a StaticAssert operation.  If the static assert fails, the compiler will fatal.\",\n            \"logic\": \"The function checks the `condition`. If it is false, it prints an error message to `std::cout` and then calls `FATAL` to terminate the compilation process.\",\n            \"parameters\": [\n                {\n                    \"name\": \"condition\",\n                    \"type\": \"V<Word32>\",\n                    \"purpose\": \"The boolean condition of the static assert.\"\n                },\n                {\n                    \"name\": \"source\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The source code location of the static assert.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"V<None>\",\n                \"description\": \"Returns a V<None> object.\"\n            },\n            \"dependencies\": [\n                \"V\",\n                \"Word32\",\n                \"broker_\",\n                \"UnparkedScopeIfNeeded\",\n                \"AllowHandleDereference\",\n                \"FATAL\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  V<None> REDUCE(StaticAssert)(V<Word32> condition, const char* source) {\n    // Static asserts should be (statically asserted and) removed by turboshaft.\n    UnparkedScopeIfNeeded scope(broker_);\n    AllowHandleDereference allow_handle_dereference;\n    std::cout << __ output_graph().Get(condition);\n    FATAL(\n        \"Expected Turbofan static assert to hold, but got non-true input:\\n  \"\n        \"%s\",\n        source);\n  }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"REDUCE(CheckTurboshaftTypeOf)\",\n            \"parent\": \"DebugFeatureLoweringReducer\",\n            \"about\": \"Reduces a CheckTurboshaftTypeOf operation. If the type check fails, the compiler will fatal.\",\n            \"logic\": \"The function checks if the type check was successful. If not, it prints an error message including the expected type and the operation that failed the check to `std::cerr`, and then calls `FATAL` to terminate the compilation process.\",\n            \"parameters\": [\n                {\n                    \"name\": \"input\",\n                    \"type\": \"OpIndex\",\n                    \"purpose\": \"The OpIndex of the operation being type-checked.\"\n                },\n                {\n                    \"name\": \"rep\",\n                    \"type\": \"RegisterRepresentation\",\n                    \"purpose\": \"The register representation of the input value.\"\n                },\n                {\n                    \"name\": \"type\",\n                    \"type\": \"Type\",\n                    \"purpose\": \"The expected type of the operation.\"\n                },\n                {\n                    \"name\": \"successful\",\n                    \"type\": \"bool\",\n                    \"purpose\": \"Indicates whether the type check was successful.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"OpIndex\",\n                \"description\": \"Returns the original input OpIndex if the type check was successful.\"\n            },\n            \"dependencies\": [\n                \"OpIndex\",\n                \"RegisterRepresentation\",\n                \"Type\",\n                \"broker_\",\n                \"UnparkedScopeIfNeeded\",\n                \"AllowHandleDereference\",\n                \"FATAL\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  OpIndex REDUCE(CheckTurboshaftTypeOf)(OpIndex input,\n                                        RegisterRepresentation rep, Type type,\n                                        bool successful) {\n    if (successful) return input;\n\n    UnparkedScopeIfNeeded scope(broker_);\n    AllowHandleDereference allow_handle_dereference;\n    FATAL(\"Checking type %s of operation %d:%s failed!\",\n          type.ToString().c_str(), input.id(),\n          __ output_graph().Get(input).ToString().c_str());\n  }\n        ]]></code>\n    </func>\n\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes macros to define and undefine assembler macros.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/define-assembler-macros.inc\"\n#include \"src/compiler/turboshaft/undef-assembler-macros.inc\"\n        ]]></code>\n    </imports>\n</file>\n```"
}