{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/heap-refs.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 74, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/heap-refs.cc\",\n        \"file_name\": \"heap-refs.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides a mechanism for representing and interacting with heap objects in the compiler, especially in a concurrent environment where the main thread may be modifying the heap.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Include necessary header files for V8 compiler, objects, and utilities.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/heap-refs.h\"\n\n#include <optional>\n\n#include \"src/compiler/js-heap-broker.h\"\n#include \"src/objects/elements-kind.h\"\n#include \"src/objects/instance-type-inl.h\"\n\n#ifdef ENABLE_SLOW_DCHECKS\n#include <algorithm>\n#endif\n\n#include \"src/api/api-inl.h\"\n#include \"src/compiler/compilation-dependencies.h\"\n#include \"src/compiler/js-heap-broker-inl.h\"\n#include \"src/execution/protectors-inl.h\"\n#include \"src/heap/heap-layout-inl.h\"\n#include \"src/objects/allocation-site-inl.h\"\n#include \"src/objects/descriptor-array.h\"\n#include \"src/objects/heap-number-inl.h\"\n#include \"src/objects/js-array-buffer-inl.h\"\n#include \"src/objects/literal-objects-inl.h\"\n#include \"src/objects/property-cell.h\"\n#include \"src/objects/template-objects-inl.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ObjectData\",\n            \"extends\": \"ZoneObject\",\n            \"about\": \"Base class for representing heap objects, providing a handle and metadata about their type and mutability.\",\n            \"attributes\": [\n                {\n                    \"name\": \"object_\",\n                    \"type\": \"IndirectHandle<Object>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handle to the actual V8 object.\"\n                },\n                {\n                    \"name\": \"kind_\",\n                    \"type\": \"ObjectDataKind\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates the type of ObjectData (Smi, serialized, unserialized, etc.).\"\n                }\n            ],\n            \"dependencies\": [\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"Object\",\n                \"ObjectDataKind\",\n                \"ZoneObject\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass ObjectData : public ZoneObject {\n public:\n  ObjectData(JSHeapBroker* broker, ObjectData** storage,\n             IndirectHandle<Object> object, ObjectDataKind kind)\n      : object_(object),\n        kind_(kind)\n#ifdef DEBUG\n        ,\n        broker_(broker)\n#endif  // DEBUG\n  {\n    // This assignment ensures we don't end up inserting the same object\n    // in an endless recursion.\n    *storage = this;\n\n    TRACE(broker, \"Creating data \" << this << \" for handle \" << object.address()\n                                   << \" (\" << Brief(*object) << \")\");\n\n    // It is safe to access read only heap objects and builtins from a\n    // background thread. When we read fields of these objects, we may create\n    // ObjectData on the background thread.\n    // This is safe too since we don't create handles but just get handles from\n    // read only root table or builtins table.\n    // All other objects need to be canonicalized in a persistent handle scope.\n    // See CanonicalPersistentHandle().\n    Isolate* isolate = broker->isolate();\n    USE(isolate);\n    DCHECK_IMPLIES(broker->mode() == JSHeapBroker::kDisabled ||\n                       broker->mode() == JSHeapBroker::kSerializing,\n                   PersistentHandlesScope::IsActive(isolate) &&\n                       broker->IsCanonicalHandle(object));\n    DCHECK_IMPLIES(broker->mode() == JSHeapBroker::kSerialized,\n                   kind == kUnserializedReadOnlyHeapObject || kind == kSmi ||\n                       kind == kNeverSerializedHeapObject ||\n                       kind == kBackgroundSerializedHeapObject);\n    DCHECK_IMPLIES(kind == kUnserializedReadOnlyHeapObject,\n                   i::IsHeapObject(*object) &&\n                       ReadOnlyHeap::Contains(Cast<HeapObject>(*object)));\n  }\n\n#define DECLARE_IS(Name) bool Is##Name() const;\n  HEAP_BROKER_OBJECT_LIST(DECLARE_IS)\n#undef DECLARE_IS\n\n#define DECLARE_AS(Name) Name##Data* As##Name();\n  HEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST(DECLARE_AS)\n#undef DECLARE_AS\n\n  IndirectHandle<Object> object() const { return object_; }\n  ObjectDataKind kind() const { return kind_; }\n  bool is_smi() const { return kind_ == kSmi; }\n  bool should_access_heap() const {\n    return kind_ == kUnserializedHeapObject ||\n           kind_ == kNeverSerializedHeapObject ||\n           kind_ == kUnserializedReadOnlyHeapObject;\n  }\n  bool IsNull() const { return i::IsNull(*object_); }\n\n#ifdef DEBUG\n  JSHeapBroker* broker() const { return broker_; }\n#endif  // DEBUG\n\n private:\n  IndirectHandle<Object> const object_;\n  ObjectDataKind const kind_;\n#ifdef DEBUG\n  JSHeapBroker* const broker_;  // For DCHECKs.\n#endif                          // DEBUG\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"HeapObjectData\",\n            \"extends\": \"ObjectData\",\n            \"about\": \"Represents a heap object, extending ObjectData with a reference to the Map of the object.\",\n            \"attributes\": [\n                {\n                    \"name\": \"map_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the ObjectData representing the Map of this heap object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"ObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"HeapObject\",\n                \"ObjectDataKind\",\n                \"Map\",\n                \"InstanceType\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass HeapObjectData : public ObjectData {\n public:\n  HeapObjectData(JSHeapBroker* broker, ObjectData** storage,\n                 IndirectHandle<HeapObject> object, ObjectDataKind kind);\n\n  std::optional<bool> TryGetBooleanValue(JSHeapBroker* broker) const;\n  ObjectData* map() const { return map_; }\n  InstanceType GetMapInstanceType() const;\n\n private:\n  std::optional<bool> TryGetBooleanValueImpl(JSHeapBroker* broker) const;\n\n  ObjectData* map_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PropertyCellData\",\n            \"extends\": \"HeapObjectData\",\n            \"about\": \"Represents a PropertyCell object, containing details about a property (e.g., its type, value).\",\n            \"attributes\": [\n                {\n                    \"name\": \"property_details_\",\n                    \"type\": \"PropertyDetails\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Details about the property (e.g., cell type, attributes).\"\n                },\n                {\n                    \"name\": \"value_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the ObjectData representing the value of the property.\"\n                }\n            ],\n            \"dependencies\": [\n                \"HeapObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"PropertyCell\",\n                \"ObjectDataKind\",\n                \"PropertyDetails\",\n                \"ObjectData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass PropertyCellData : public HeapObjectData {\n public:\n  PropertyCellData(JSHeapBroker* broker, ObjectData** storage,\n                   IndirectHandle<PropertyCell> object, ObjectDataKind kind);\n\n  bool Cache(JSHeapBroker* broker);\n\n  PropertyDetails property_details() const {\n    CHECK(serialized());\n    return property_details_;\n  }\n\n  ObjectData* value() const {\n    DCHECK(serialized());\n    return value_;\n  }\n\n private:\n  PropertyDetails property_details_ = PropertyDetails::Empty();\n  ObjectData* value_ = nullptr;\n\n  bool serialized() const { return value_ != nullptr; }\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSReceiverData\",\n            \"extends\": \"HeapObjectData\",\n            \"about\": \"Base class for JSReceiver objects.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"HeapObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSReceiver\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSReceiverData : public HeapObjectData {\n public:\n  JSReceiverData(JSHeapBroker* broker, ObjectData** storage,\n                 IndirectHandle<JSReceiver> object, ObjectDataKind kind)\n      : HeapObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSObjectData\",\n            \"extends\": \"JSReceiverData\",\n            \"about\": \"Represents a JSObject.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSReceiverData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSObject\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSObjectData : public JSReceiverData {\n public:\n  JSObjectData(JSHeapBroker* broker, ObjectData** storage,\n               IndirectHandle<JSObject> object, ObjectDataKind kind)\n      : JSReceiverData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSTypedArrayData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSTypedArray.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSTypedArray\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSTypedArrayData : public JSObjectData {\n public:\n  JSTypedArrayData(JSHeapBroker* broker, ObjectData** storage,\n                   IndirectHandle<JSTypedArray> object, ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSDataViewData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSDataView.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSDataView\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSDataViewData : public JSObjectData {\n public:\n  JSDataViewData(JSHeapBroker* broker, ObjectData** storage,\n                 IndirectHandle<JSDataView> object, ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSPrimitiveWrapperData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSPrimitiveWrapper.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSPrimitiveWrapper\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSPrimitiveWrapperData : public JSObjectData {\n public:\n  JSPrimitiveWrapperData(JSHeapBroker* broker, ObjectData** storage,\n                         IndirectHandle<JSPrimitiveWrapper> object,\n                         ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSBoundFunctionData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSBoundFunction.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSBoundFunction\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSBoundFunctionData : public JSObjectData {\n public:\n  JSBoundFunctionData(JSHeapBroker* broker, ObjectData** storage,\n                      IndirectHandle<JSBoundFunction> object,\n                      ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSFunctionData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSFunction, caching information about its context, shared function info, initial map, and instance prototype.\",\n            \"attributes\": [\n                {\n                    \"name\": \"prototype_or_initial_map_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Either the function's prototype or its initial map.\"\n                },\n                {\n                    \"name\": \"has_initial_map_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates if the function has an initial map.\"\n                },\n                {\n                    \"name\": \"has_instance_prototype_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates if the function has an instance prototype.\"\n                },\n                {\n                    \"name\": \"PrototypeRequiresRuntimeLookup_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates if prototype lookup requires runtime intervention\"\n                },\n                {\n                    \"name\": \"context_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the function's context.\"\n                },\n                {\n                    \"name\": \"initial_map_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the initial map.\"\n                },\n                {\n                    \"name\": \"instance_prototype_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the instance prototype.\"\n                },\n                {\n                    \"name\": \"shared_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the shared function info.\"\n                },\n                {\n                    \"name\": \"feedback_cell_\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the feedback cell.\"\n                },\n                {\n                    \"name\": \"initial_map_instance_size_with_min_slack_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Instance size of the initial map with minimum slack.\"\n                }\n            ],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSFunction\",\n                \"ObjectDataKind\",\n                \"ObjectData\",\n                \"Map\",\n                \"Context\",\n                \"SharedFunctionInfo\",\n                \"FeedbackCell\",\n                \"base::Flags\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSFunctionData : public JSObjectData {\n public:\n  JSFunctionData(JSHeapBroker* broker, ObjectData** storage,\n                 IndirectHandle<JSFunction> object, ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {\n    Cache(broker);\n  }\n\n  bool IsConsistentWithHeapState(JSHeapBroker* broker) const;\n\n  bool has_initial_map() const {\n    DCHECK(serialized_);\n    return has_initial_map_;\n  }\n  bool has_instance_prototype() const {\n    DCHECK(serialized_);\n    return has_instance_prototype_;\n  }\n  bool PrototypeRequiresRuntimeLookup() const {\n    DCHECK(serialized_);\n    return PrototypeRequiresRuntimeLookup_;\n  }\n\n  ObjectData* context() const {\n    DCHECK(serialized_);\n    return context_;\n  }\n  ObjectData* initial_map() const {\n    DCHECK(serialized_);\n    return initial_map_;\n  }\n  ObjectData* instance_prototype() const {\n    DCHECK(serialized_);\n    return instance_prototype_;\n  }\n  ObjectData* shared() const {\n    DCHECK(serialized_);\n    return shared_;\n  }\n  ObjectData* raw_feedback_cell() const {\n    DCHECK(serialized_);\n    return feedback_cell_;\n  }\n  int initial_map_instance_size_with_min_slack() const {\n    DCHECK(serialized_);\n    return initial_map_instance_size_with_min_slack_;\n  }\n\n  // Track serialized fields that are actually used, in order to relax\n  // ConsistentJSFunctionView dependency validation as much as possible.\n  enum UsedField {\n    kHasFeedbackVector = 1 << 0,\n    kPrototypeOrInitialMap = 1 << 1,\n    kHasInitialMap = 1 << 2,\n    kHasInstancePrototype = 1 << 3,\n    kPrototypeRequiresRuntimeLookup = 1 << 4,\n    kInitialMap = 1 << 5,\n    kInstancePrototype = 1 << 6,\n    kFeedbackVector = 1 << 7,\n    kFeedbackCell = 1 << 8,\n    kInitialMapInstanceSizeWithMinSlack = 1 << 9,\n  };\n\n  bool has_any_used_field() const { return used_fields_ != 0; }\n  bool has_used_field(UsedField used_field) const {\n    return (used_fields_ & used_field) != 0;\n  }\n  void set_used_field(UsedField used_field) { used_fields_ |= used_field; }\n\n private:\n  void Cache(JSHeapBroker* broker);\n\n#ifdef DEBUG\n  bool serialized_ = false;\n#endif  // DEBUG\n\n  using UsedFields = base::Flags<UsedField>;\n  UsedFields used_fields_;\n\n  ObjectData* prototype_or_initial_map_ = nullptr;\n  bool has_initial_map_ = false;\n  bool has_instance_prototype_ = false;\n  bool PrototypeRequiresRuntimeLookup_ = false;\n\n  ObjectData* context_ = nullptr;\n  ObjectData* initial_map_ =\n      nullptr;  // Derives from prototype_or_initial_map_.\n  ObjectData* instance_prototype_ =\n      nullptr;  // Derives from prototype_or_initial_map_.\n  ObjectData* shared_ = nullptr;\n  ObjectData* feedback_cell_ = nullptr;\n  int initial_map_instance_size_with_min_slack_;  // Derives from\n                                                  // prototype_or_initial_map_.\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"BigIntData\",\n            \"extends\": \"HeapObjectData\",\n            \"about\": \"Represents a BigInt.\",\n            \"attributes\": [\n                {\n                    \"name\": \"as_uint64_\",\n                    \"type\": \"uint64_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Unsigned 64-bit representation of the BigInt.\"\n                },\n                {\n                    \"name\": \"as_int64_\",\n                    \"type\": \"int64_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Signed 64-bit representation of the BigInt.\"\n                },\n                {\n                    \"name\": \"lossless_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether the conversion to a signed 64-bit integer was lossless.\"\n                }\n            ],\n            \"dependencies\": [\n                \"HeapObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"BigInt\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass BigIntData : public HeapObjectData {\n public:\n  BigIntData(JSHeapBroker* broker, ObjectData** storage,\n             IndirectHandle<BigInt> object, ObjectDataKind kind)\n      : HeapObjectData(broker, storage, object, kind),\n        as_uint64_(object->AsUint64(nullptr)),\n        as_int64_(object->AsInt64(&lossless_)) {}\n\n  uint64_t AsUint64() const { return as_uint64_; }\n  int64_t AsInt64(bool* lossless) const {\n    *lossless = lossless_;\n    return as_int64_;\n  }\n\n private:\n  const uint64_t as_uint64_;\n  const int64_t as_int64_;\n  bool lossless_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"PropertyDescriptor\",\n            \"about\": \"Simple struct to encapsulate a FieldIndex and its field owner\",\n            \"attributes\": [\n                {\n                    \"name\": \"field_index\",\n                    \"type\": \"FieldIndex\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Index of the field.\"\n                },\n                {\n                    \"name\": \"field_owner\",\n                    \"type\": \"ObjectData*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"ObjectData of the field owner.\"\n                }\n            ],\n            \"dependencies\": [\n                \"FieldIndex\",\n                \"ObjectData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct PropertyDescriptor {\n  FieldIndex field_index;\n  ObjectData* field_owner = nullptr;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"MapData\",\n            \"extends\": \"HeapObjectData\",\n            \"about\": \"Represents a Map object, caching various properties such as instance type, size, and bitfields.\",\n            \"attributes\": [\n                {\n                    \"name\": \"instance_type_\",\n                    \"type\": \"InstanceType\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The instance type of the objects described by this map.\"\n                },\n                {\n                    \"name\": \"instance_size_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The size of instances described by this map.\"\n                },\n                {\n                    \"name\": \"bit_field2_\",\n                    \"type\": \"uint32_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Cached value of the bit_field2.\"\n                },\n                {\n                    \"name\": \"bit_field3_\",\n                    \"type\": \"uint32_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Cached value of the bit_field3.\"\n                },\n                {\n                    \"name\": \"unused_property_fields_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The number of unused property fields (slack).\"\n                },\n                {\n                    \"name\": \"is_abandoned_prototype_map_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates if the map is an abandoned prototype map.\"\n                },\n                {\n                    \"name\": \"in_object_properties_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The number of in-object properties.\"\n                }\n            ],\n            \"dependencies\": [\n                \"HeapObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"Map\",\n                \"ObjectDataKind\",\n                \"InstanceType\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass MapData : public HeapObjectData {\n public:\n  MapData(JSHeapBroker* broker, ObjectData** storage,\n          IndirectHandle<Map> object, ObjectDataKind kind);\n\n  InstanceType instance_type() const { return instance_type_; }\n  int instance_size() const { return instance_size_; }\n  uint32_t bit_field2() const { return bit_field2_; }\n  uint32_t bit_field3() const { return bit_field3_; }\n  int in_object_properties() const {\n    CHECK(InstanceTypeChecker::IsJSObject(instance_type()));\n    return in_object_properties_;\n  }\n  int UnusedPropertyFields() const { return unused_property_fields_; }\n  bool is_abandoned_prototype_map() const {\n    return is_abandoned_prototype_map_;\n  }\n\n private:\n  // The following fields should be const in principle, but construction\n  // requires locking the MapUpdater lock. For this reason, it's easier to\n  // initialize these inside the constructor body, not in the initializer list.\n\n  InstanceType instance_type_;\n  int instance_size_;\n  uint32_t bit_field2_;\n  uint32_t bit_field3_;\n  int unused_property_fields_;\n  bool is_abandoned_prototype_map_;\n  int in_object_properties_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FixedArrayBaseData\",\n            \"extends\": \"HeapObjectData\",\n            \"about\": \"Represents a FixedArrayBase object, caching its length.\",\n            \"attributes\": [\n                {\n                    \"name\": \"length_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The length of the fixed array.\"\n                }\n            ],\n            \"dependencies\": [\n                \"HeapObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"FixedArrayBase\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass FixedArrayBaseData : public HeapObjectData {\n public:\n  FixedArrayBaseData(JSHeapBroker* broker, ObjectData** storage,\n                     IndirectHandle<FixedArrayBase> object, ObjectDataKind kind)\n      : HeapObjectData(broker, storage, object, kind),\n        length_(object->length(kAcquireLoad)) {}\n\n  uint32_t length() const { return length_; }\n\n private:\n  int const length_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FixedArrayData\",\n            \"extends\": \"FixedArrayBaseData\",\n            \"about\": \"Represents a FixedArray object.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"FixedArrayBaseData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"FixedArray\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass FixedArrayData : public FixedArrayBaseData {\n public:\n  FixedArrayData(JSHeapBroker* broker, ObjectData** storage,\n                 IndirectHandle<FixedArray> object, ObjectDataKind kind)\n      : FixedArrayBaseData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ScriptContextTableData\",\n            \"extends\": \"FixedArrayBaseData\",\n            \"about\": \"Represents a ScriptContextTable object.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"FixedArrayBaseData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"ScriptContextTable\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass ScriptContextTableData : public FixedArrayBaseData {\n public:\n  ScriptContextTableData(JSHeapBroker* broker, ObjectData** storage,\n                         IndirectHandle<ScriptContextTable> object,\n                         ObjectDataKind kind)\n      : FixedArrayBaseData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSArrayData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSArray.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSArray\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSArrayData : public JSObjectData {\n public:\n  JSArrayData(JSHeapBroker* broker, ObjectData** storage,\n              IndirectHandle<JSArray> object, ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSGlobalObjectData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSGlobalObject.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSGlobalObject\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSGlobalObjectData : public JSObjectData {\n public:\n  JSGlobalObjectData(JSHeapBroker* broker, ObjectData** storage,\n                     IndirectHandle<JSGlobalObject> object, ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSGlobalProxyData\",\n            \"extends\": \"JSObjectData\",\n            \"about\": \"Represents a JSGlobalProxy.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JSObjectData\",\n                \"JSHeapBroker\",\n                \"IndirectHandle\",\n                \"JSGlobalProxy\",\n                \"ObjectDataKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSGlobalProxyData : public JSObjectData {\n public:\n  JSGlobalProxyData(JSHeapBroker* broker, ObjectData** storage,\n                    IndirectHandle<JSGlobalProxy> object, ObjectDataKind kind)\n      : JSObjectData(broker, storage, object, kind) {}\n};\n        ]]></code>\n    </class>\n</file>\n```"
}