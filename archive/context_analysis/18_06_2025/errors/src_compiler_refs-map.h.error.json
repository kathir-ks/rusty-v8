{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/refs-map.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 33, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/refs-map.h\",\n            \"file_name\": \"refs-map.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the RefsMap class, which maps canonical Addresses to ObjectData. Used in JSHeapBroker and PerIsolateCompilerCache.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for hashmap implementation and zone memory management.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/base/hashmap.h\"\n            #include \"src/zone/zone.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"AddressMatcher\",\n                \"extends\": \"base::KeyEqualityMatcher<Address>\",\n                \"about\": \"Defines a custom equality matcher for Address objects, used in the RefsMap hashmap.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            class AddressMatcher : public base::KeyEqualityMatcher<Address> {\n            public:\n            bool operator()(uint32_t hash1, uint32_t hash2, const Address& key1,\n                            const Address& key2) const {\n                return key1 == key2;\n            }\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RefsMap\",\n                \"extends\": \"base::TemplateHashMapImpl<Address, ObjectData*, AddressMatcher, ZoneAllocationPolicy>\",\n                \"implements\": [],\n                \"about\": \"Implements a hash map for storing the mapping between canonical Addresses and allocated ObjectData, with custom memory allocation.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"AddressMatcher\",\n                    \"ObjectData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class RefsMap\n                : public base::TemplateHashMapImpl<Address, ObjectData*, AddressMatcher,\n                                                    ZoneAllocationPolicy>,\n                public ZoneObject {\n            public:\n            RefsMap(uint32_t capacity, AddressMatcher match, Zone* zone);\n            RefsMap(const RefsMap* other, Zone* zone);\n\n            bool IsEmpty() const { return occupancy() == 0; }\n\n            // Wrappers around methods from UnderlyingMap\n            Entry* Lookup(const Address& key) const;\n            Entry* LookupOrInsert(const Address& key);\n            ObjectData* Remove(const Address& key);\n\n            private:\n            static uint32_t Hash(Address addr);\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ObjectData\",\n                    \"about\": \"Forward declaration for ObjectData class.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class ObjectData;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZoneObject\",\n                    \"about\": \"Base class for objects allocated in a Zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class ZoneObject {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZoneAllocationPolicy\",\n                    \"about\": \"Allocation policy for Zone-allocated objects.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class ZoneAllocationPolicy {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Zone\",\n                    \"about\": \"Memory management zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Entry\",\n                    \"about\": \"Represents an entry in the hash map.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Entry {};\n            ]]></code>\n        </class>\n        <typedef>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"typedef\",\n                    \"name\": \"Address\",\n                    \"about\": \"Represents a memory address.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                typedef uintptr_t Address;\n            ]]></code>\n        </typedef>\n    </dependencies>\n</file>\n```"
}