{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 149, column 40",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message.h\",\n        \"file_name\": \"message.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines message structures for the Torque Language Server (LS) using JSON for communication.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for logging, JSON handling, message macros, and source position tracking.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/logging.h\"\n#include \"src/torque/ls/json.h\"\n#include \"src/torque/ls/message-macros.h\"\n#include \"src/torque/source-positions.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"BaseJsonAccessor\",\n            \"about\": \"Base class for Messages and Objects backed by JsonValue or JsonObject references, providing helper methods for typed accessors.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"JsonValue\",\n                \"JsonObject\",\n                \"JsonArray\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass BaseJsonAccessor {\n public:\n  template <class T>\n  T GetObject(const std::string& property) {\n    return T(GetObjectProperty(property));\n  }\n\n  bool HasProperty(const std::string& property) const {\n    return object().count(property) > 0;\n  }\n\n  void SetNull(const std::string& property) {\n    object()[property] = JsonValue::JsonNull();\n  }\n\n  bool IsNull(const std::string& property) const {\n    return HasProperty(property) &&\n           object().at(property).tag == JsonValue::IS_NULL;\n  }\n\n protected:\n  virtual const JsonObject& object() const = 0;\n  virtual JsonObject& object() = 0;\n\n  JsonObject& GetObjectProperty(const std::string& property) {\n    if (!object()[property].IsObject()) {\n      object()[property] = JsonValue::From(JsonObject{});\n    }\n    return object()[property].ToObject();\n  }\n\n  JsonArray& GetArrayProperty(const std::string& property) {\n    if (!object()[property].IsArray()) {\n      object()[property] = JsonValue::From(JsonArray{});\n    }\n    return object()[property].ToArray();\n  }\n\n  JsonObject& AddObjectElementToArrayProperty(const std::string& property) {\n    JsonArray& array = GetArrayProperty(property);\n    array.push_back(JsonValue::From(JsonObject{}));\n\n    return array.back().ToObject();\n  }\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Message\",\n            \"extends\": \"BaseJsonAccessor\",\n            \"about\": \"Base class for Requests, Responses, and Notifications, owning the backing JsonValue.\",\n            \"attributes\": [\n                {\n                    \"name\": \"value_\",\n                    \"type\": \"JsonValue\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the root JsonValue for the message.\"\n                }\n            ],\n            \"dependencies\": [\n                \"BaseJsonAccessor\",\n                \"JsonValue\",\n                \"JsonObject\",\n                \"JSON_STRING_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Message : public BaseJsonAccessor {\n public:\n  Message() {\n    value_ = JsonValue::From(JsonObject{});\n    set_jsonrpc(\"2.0\");\n  }\n  explicit Message(JsonValue value) : value_(std::move(value)) {\n    CHECK(value_.tag == JsonValue::OBJECT);\n  }\n\n  JsonValue& GetJsonValue() { return value_; }\n\n  JSON_STRING_ACCESSORS(jsonrpc)\n\n protected:\n  const JsonObject& object() const override { return value_.ToObject(); }\n  JsonObject& object() override { return value_.ToObject(); }\n\n private:\n  JsonValue value_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"NestedJsonAccessor\",\n            \"extends\": \"BaseJsonAccessor\",\n            \"about\": \"Base class for complex types that are part of a Message, using a JsonObject reference.\",\n            \"attributes\": [\n                {\n                    \"name\": \"object_\",\n                    \"type\": \"JsonObject&\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Reference to the JsonObject this accessor operates on.\"\n                }\n            ],\n            \"dependencies\": [\n                \"BaseJsonAccessor\",\n                \"JsonObject\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass NestedJsonAccessor : public BaseJsonAccessor {\n public:\n  explicit NestedJsonAccessor(JsonObject& object) : object_(object) {}\n\n  const JsonObject& object() const override { return object_; }\n  JsonObject& object() override { return object_; }\n\n private:\n  JsonObject& object_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ResponseError\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents an error in a response message.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_STRING_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass ResponseError : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_INT_ACCESSORS(code)\n  JSON_STRING_ACCESSORS(message)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"InitializeParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for the initialize request.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_STRING_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass InitializeParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_INT_ACCESSORS(processId)\n  JSON_STRING_ACCESSORS(rootPath)\n  JSON_STRING_ACCESSORS(rootUri)\n  JSON_STRING_ACCESSORS(trace)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FileListParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for file list notification.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass FileListParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  // TODO(szuend): Implement read accessor for string\n  //               arrays. \"files\" is managed directly.\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FileSystemWatcher\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a file system watcher.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_INT_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass FileSystemWatcher : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(globPattern)\n  JSON_INT_ACCESSORS(kind)\n\n  enum WatchKind {\n    kCreate = 1,\n    kChange = 2,\n    kDelete = 4,\n\n    kAll = kCreate | kChange | kDelete,\n  };\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DidChangeWatchedFilesRegistrationOptions\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Options for registering watched files.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_ARRAY_OBJECT_ACCESSORS\",\n                \"FileSystemWatcher\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass DidChangeWatchedFilesRegistrationOptions : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_ARRAY_OBJECT_ACCESSORS(FileSystemWatcher, watchers)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FileEvent\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a file event.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_INT_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass FileEvent : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(uri)\n  JSON_INT_ACCESSORS(type)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DidChangeWatchedFilesParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for the did change watched files notification.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_ARRAY_OBJECT_ACCESSORS\",\n                \"FileEvent\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass DidChangeWatchedFilesParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_ARRAY_OBJECT_ACCESSORS(FileEvent, changes)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SaveOptions\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Options for saving a text document.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_BOOL_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass SaveOptions : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_BOOL_ACCESSORS(includeText)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TextDocumentSyncOptions\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Options for synchronizing text documents.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_BOOL_ACCESSORS\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"SaveOptions\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass TextDocumentSyncOptions : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_BOOL_ACCESSORS(openClose)\n  JSON_INT_ACCESSORS(change)\n  JSON_BOOL_ACCESSORS(willSave)\n  JSON_BOOL_ACCESSORS(willSaveWaitUntil)\n  JSON_OBJECT_ACCESSORS(SaveOptions, save)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ServerCapabilities\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Capabilities of the language server.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"JSON_BOOL_ACCESSORS\",\n                \"TextDocumentSyncOptions\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass ServerCapabilities : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_OBJECT_ACCESSORS(TextDocumentSyncOptions, textDocumentSync)\n  JSON_BOOL_ACCESSORS(definitionProvider)\n  JSON_BOOL_ACCESSORS(documentSymbolProvider)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"InitializeResult\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Result of the initialize request.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"ServerCapabilities\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass InitializeResult : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_OBJECT_ACCESSORS(ServerCapabilities, capabilities)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Registration\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a registration for a capability.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_DYNAMIC_OBJECT_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Registration : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(id)\n  JSON_STRING_ACCESSORS(method)\n  JSON_DYNAMIC_OBJECT_ACCESSORS(registerOptions)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"RegistrationParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for the registration request.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_ARRAY_OBJECT_ACCESSORS\",\n                \"Registration\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass RegistrationParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_ARRAY_OBJECT_ACCESSORS(Registration, registrations)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JsonPosition\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a position in a text document.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_INT_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JsonPosition : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_INT_ACCESSORS(line)\n  JSON_INT_ACCESSORS(character)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Range\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a range in a text document.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"JsonPosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Range : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_OBJECT_ACCESSORS(JsonPosition, start)\n  JSON_OBJECT_ACCESSORS(JsonPosition, end)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Location\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a location in a text document.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"Range\",\n                \"SourcePosition\",\n                \"SourceFileMap\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Location : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(uri)\n  JSON_OBJECT_ACCESSORS(Range, range)\n\n  void SetTo(SourcePosition position) {\n    set_uri(SourceFileMap::AbsolutePath(position.source));\n    range().start().set_line(position.start.line);\n    range().start().set_character(position.start.column);\n    range().end().set_line(position.end.line);\n    range().end().set_character(position.end.column);\n  }\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TextDocumentIdentifier\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Identifies a text document.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass TextDocumentIdentifier : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(uri)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TextDocumentPositionParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for a text document position request.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"TextDocumentIdentifier\",\n                \"JsonPosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass TextDocumentPositionParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_OBJECT_ACCESSORS(TextDocumentIdentifier, textDocument)\n  JSON_OBJECT_ACCESSORS(JsonPosition, position)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Diagnostic\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents a diagnostic, such as a compiler error or warning.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_STRING_ACCESSORS\",\n                \"Range\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Diagnostic : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  enum DiagnosticSeverity {\n    kError = 1,\n    kWarning = 2,\n    kInformation = 3,\n    kHint = 4\n  };\n\n  JSON_OBJECT_ACCESSORS(Range, range)\n  JSON_INT_ACCESSORS(severity)\n  JSON_STRING_ACCESSORS(source)\n  JSON_STRING_ACCESSORS(message)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PublishDiagnosticsParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for the publish diagnostics notification.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_ARRAY_OBJECT_ACCESSORS\",\n                \"Diagnostic\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass PublishDiagnosticsParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(uri)\n  JSON_ARRAY_OBJECT_ACCESSORS(Diagnostic, diagnostics)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DocumentSymbolParams\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Parameters for the document symbol request.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"TextDocumentIdentifier\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass DocumentSymbolParams : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_OBJECT_ACCESSORS(TextDocumentIdentifier, textDocument)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SymbolInformation\",\n            \"extends\": \"NestedJsonAccessor\",\n            \"about\": \"Represents symbol information for a document.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"NestedJsonAccessor\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"Location\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass SymbolInformation : public NestedJsonAccessor {\n public:\n  using NestedJsonAccessor::NestedJsonAccessor;\n\n  JSON_STRING_ACCESSORS(name)\n  JSON_INT_ACCESSORS(kind)\n  JSON_OBJECT_ACCESSORS(Location, location)\n  JSON_STRING_ACCESSORS(containerName)\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Request\",\n            \"extends\": \"Message\",\n            \"about\": \"Base class for requests.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Message\",\n                \"JsonValue\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_STRING_ACCESSORS\",\n                \"JSON_OBJECT_ACCESSORS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nclass Request : public Message {\n public:\n  explicit Request(JsonValue value) : Message(std::move(value)) {}\n  Request() : Message() {}\n\n  JSON_INT_ACCESSORS(id)\n  JSON_STRING_ACCESSORS(method)\n  JSON_OBJECT_ACCESSORS(T, params)\n};\nusing InitializeRequest = Request<InitializeParams>;\nusing RegistrationRequest = Request<RegistrationParams>;\nusing TorqueFileListNotification = Request<FileListParams>;\nusing GotoDefinitionRequest = Request<TextDocumentPositionParams>;\nusing DidChangeWatchedFilesNotification = Request<DidChangeWatchedFilesParams>;\nusing PublishDiagnosticsNotification = Request<PublishDiagnosticsParams>;\nusing DocumentSymbolRequest = Request<DocumentSymbolParams>;\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Response\",\n            \"extends\": \"Message\",\n            \"about\": \"Base class for responses.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Message\",\n                \"JsonValue\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"ResponseError\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nclass Response : public Message {\n public:\n  explicit Response(JsonValue value) : Message(std::move(value)) {}\n  Response() : Message() {}\n\n  JSON_INT_ACCESSORS(id)\n  JSON_OBJECT_ACCESSORS(ResponseError, error)\n  JSON_OBJECT_ACCESSORS(T, result)\n};\nusing InitializeResponse = Response<InitializeResult>;\nusing GotoDefinitionResponse = Response<Location>;\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ResponseArrayResult\",\n            \"extends\": \"Message\",\n            \"about\": \"Base class for responses where the result is an array.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Message\",\n                \"JsonValue\",\n                \"JSON_INT_ACCESSORS\",\n                \"JSON_OBJECT_ACCESSORS\",\n                \"JSON_ARRAY_OBJECT_ACCESSORS\",\n                \"ResponseError\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nclass ResponseArrayResult : public Message {\n public:\n  explicit ResponseArrayResult(JsonValue value) : Message(std::move(value)) {}\n  ResponseArrayResult() : Message() {}\n\n  JSON_INT_ACCESSORS(id)\n  JSON_OBJECT_ACCESSORS(ResponseError, error)\n  JSON_ARRAY_OBJECT_ACCESSORS(T, result)\n};\nusing DocumentSymbolResponse = ResponseArrayResult<SymbolInformation>;\n        ]]></code>\n    </class>\n</file>\n```"
}