{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/access-builder.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/access-builder.cc\",\n        \"file_name\": \"access-builder.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides static methods for creating FieldAccess and ElementAccess descriptors used in the compiler for accessing object properties and array elements. These descriptors encapsulate information about the base object, offset, type, and memory layout, which are essential for generating efficient machine code.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for the AccessBuilder class and the objects it accesses.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/compiler/access-builder.h\"\n\n            #include \"src/compiler/type-cache.h\"\n            #include \"src/handles/handles-inl.h\"\n            #include \"src/objects/arguments.h\"\n            #include \"src/objects/contexts.h\"\n            #include \"src/objects/heap-number.h\"\n            #include \"src/objects/js-collection.h\"\n            #include \"src/objects/js-generator.h\"\n            #include \"src/objects/js-objects.h\"\n            #include \"src/objects/objects-inl.h\"\n            #include \"src/objects/ordered-hash-table.h\"\n            #include \"src/objects/source-text-module.h\"\n            #include \"src/objects/tagged-field.h\"\n        ]]></code>\n    </imports>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForExternalIntPtr\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for an external integer pointer.\",\n            \"logic\": \"Initializes a FieldAccess struct with appropriate values for accessing an external integer pointer. This includes setting the base to kUntaggedBase, the offset to 0, and the MachineType to IntPtr.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for an external integer pointer.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForExternalIntPtr() {\n            FieldAccess access = {kUntaggedBase,       0,\n                                MaybeHandle<Name>(), OptionalMapRef(),\n                                Type::Any(),         MachineType::IntPtr(),\n                                kNoWriteBarrier,     \"ExternalIntPtr\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForMap\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for the Map field of a HeapObject.\",\n            \"logic\": \"Initializes a FieldAccess struct with appropriate values for accessing the Map field, including the offset (HeapObject::kMapOffset), type (Type::OtherInternal()), and MachineType (MachineType::MapInHeader()).\",\n            \"parameters\": [\n                {\n                    \"name\": \"write_barrier\",\n                    \"type\": \"WriteBarrierKind\",\n                    \"purpose\": \"Specifies the write barrier kind to use for this field.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the Map field.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForMap(WriteBarrierKind write_barrier) {\n            FieldAccess access = {kTaggedBase,           HeapObject::kMapOffset,\n                                MaybeHandle<Name>(),   OptionalMapRef(),\n                                Type::OtherInternal(), MachineType::MapInHeader(),\n                                write_barrier,         \"Map\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForHeapNumberValue\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for the value_ field of a HeapNumber.\",\n            \"logic\": \"Initializes a FieldAccess struct with the offset of the value_ field within a HeapNumber object. Uses TypeCache to get the kFloat64 type.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the HeapNumber value.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForHeapNumberValue() {\n            FieldAccess access = {kTaggedBase,\n                                offsetof(HeapNumber, value_),\n                                MaybeHandle<Name>(),\n                                OptionalMapRef(),\n                                TypeCache::Get()->kFloat64,\n                                MachineType::Float64(),\n                                kNoWriteBarrier,\n                                \"HeapNumberValue\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForHeapInt32Value\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for the lower 32 bits of the value_ field of a HeapNumber, treated as an int32.\",\n            \"logic\": \"Calculates the offset to the lower 32 bits of the double-precision value in HeapNumber and sets MachineType to Int32.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the lower 32 bits of HeapNumber value.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForHeapInt32Value() {\n            FieldAccess access = {\n                kTaggedBase,\n                offsetof(HeapNumber, value_) + kIeeeDoubleMantissaWordOffset,\n                MaybeHandle<Name>(),\n                OptionalMapRef(),\n                TypeCache::Get()->kInt32,\n                MachineType::Int32(),\n                kNoWriteBarrier,\n                \"HeapInt32Value\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForHeapInt32UpperValue\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for the upper 32 bits of the value_ field of a HeapNumber, treated as an int32.\",\n            \"logic\": \"Calculates the offset to the upper 32 bits of the double-precision value in HeapNumber and sets MachineType to Int32.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the upper 32 bits of HeapNumber value.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForHeapInt32UpperValue() {\n            FieldAccess access = {\n                kTaggedBase,\n                offsetof(HeapNumber, value_) + kIeeeDoubleExponentWordOffset,\n                MaybeHandle<Name>(),\n                OptionalMapRef(),\n                TypeCache::Get()->kInt32,\n                MachineType::Int32(),\n                kNoWriteBarrier,\n                \"HeapInt32ValueUpperValue\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForHeapNumberOrOddballOrHoleValue\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the numeric value, which can be a HeapNumber, Oddball, or Hole.\",\n            \"logic\": \"Leverages STATIC_ASSERT_FIELD_OFFSETS_EQUAL to ensure that the offsets for the value_ field in HeapNumber, to_number_raw_ field in Oddball, and kRawNumericValueOffset in Hole are the same. It reuses the FieldAccess descriptor for HeapNumberValue.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the HeapNumber/Oddball/Hole value.\"\n            },\n            \"dependencies\": [\n                \"ForHeapNumberValue\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForHeapNumberOrOddballOrHoleValue() {\n            STATIC_ASSERT_FIELD_OFFSETS_EQUAL(offsetof(HeapNumber, value_),\n                                                offsetof(Oddball, to_number_raw_));\n            STATIC_ASSERT_FIELD_OFFSETS_EQUAL(offsetof(HeapNumber, value_),\n                                                Hole::kRawNumericValueOffset);\n            return ForHeapNumberValue();\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForBigIntBitfield\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the bitfield_ field of a BigInt.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the bitfield_ field within a BigInt object. Uses TypeCache to get the kInt32 type and MachineType::Uint32.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the BigInt bitfield.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForBigIntBitfield() {\n            FieldAccess access = {kTaggedBase,\n                                offsetof(BigInt, bitfield_),\n                                MaybeHandle<Name>(),\n                                OptionalMapRef(),\n                                TypeCache::Get()->kInt32,\n                                MachineType::Uint32(),\n                                kNoWriteBarrier,\n                                \"BigIntBitfield\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForBigIntOptionalPadding\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the optional padding field of a BigInt (when padding is needed).\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the padding_ field within a BigInt object. Uses TypeCache to get the kInt32 type and MachineType::Uint32. Includes static_assert to verify size of padding array.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the BigInt optional padding.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef BIGINT_NEEDS_PADDING\n            // static\n            FieldAccess AccessBuilder::ForBigIntOptionalPadding() {\n            static_assert(arraysize(BigInt::padding_) == sizeof(uint32_t));\n            FieldAccess access = {\n                kTaggedBase,      offsetof(BigInt, padding_), MaybeHandle<Name>(),\n                OptionalMapRef(), TypeCache::Get()->kInt32,   MachineType::Uint32(),\n                kNoWriteBarrier,  \"BigIntOptionalPadding\"};\n            return access;\n            }\n            #endif\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForBigIntLeastSignificantDigit64\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the least significant digit (64-bit) of a BigInt.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset to the start of the BigInt's data. Uses TypeCache to get the kBigUint64 type and MachineType::Uint64.  DCHECK_EQ verifies that BigInt::SizeFor(1) - BigInt::SizeFor(0) is 8 (bytes)\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the least significant digit of a BigInt.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForBigIntLeastSignificantDigit64() {\n            DCHECK_EQ(BigInt::SizeFor(1) - BigInt::SizeFor(0), 8);\n            FieldAccess access = {\n                kTaggedBase,      OFFSET_OF_DATA_START(BigInt),   MaybeHandle<Name>(),\n                OptionalMapRef(), TypeCache::Get()->kBigUint64,   MachineType::Uint64(),\n                kNoWriteBarrier,  \"BigIntLeastSignificantDigit64\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSObjectPropertiesOrHash\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the properties or hash field of a JSObject.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the properties_or_hash field within a JSObject object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSObject properties or hash.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSObjectPropertiesOrHash() {\n            FieldAccess access = {kTaggedBase,         JSObject::kPropertiesOrHashOffset,\n                                MaybeHandle<Name>(), OptionalMapRef(),\n                                Type::Any(),         MachineType::AnyTagged(),\n                                kFullWriteBarrier,   \"JSObjectPropertiesOrHash\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSObjectPropertiesOrHashKnownPointer\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the properties or hash field of a JSObject, where the field is known to be a pointer.\",\n            \"logic\": \"Creates a FieldAccess struct similar to ForJSObjectPropertiesOrHash, but specifies MachineType::TaggedPointer and kPointerWriteBarrier.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSObject properties or hash (known pointer).\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSObjectPropertiesOrHashKnownPointer() {\n            FieldAccess access = {\n                kTaggedBase,          JSObject::kPropertiesOrHashOffset,\n                MaybeHandle<Name>(),  OptionalMapRef(),\n                Type::Any(),          MachineType::TaggedPointer(),\n                kPointerWriteBarrier, \"JSObjectPropertiesOrHashKnownPointer\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSObjectElements\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the elements field of a JSObject.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the elements field within a JSObject object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSObject elements.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSObjectElements() {\n            FieldAccess access = {kTaggedBase,          JSObject::kElementsOffset,\n                                MaybeHandle<Name>(),  OptionalMapRef(),\n                                Type::Internal(),     MachineType::TaggedPointer(),\n                                kPointerWriteBarrier, \"JSObjectElements\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSObjectInObjectProperty\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing an in-object property of a JSObject.\",\n            \"logic\": \"Calculates the offset of the in-object property based on the Map and index. Retrieves the offset using map.GetInObjectPropertyOffset(index).\",\n            \"parameters\": [\n                {\n                    \"name\": \"map\",\n                    \"type\": \"MapRef\",\n                    \"purpose\": \"The MapRef of the JSObject.\"\n                },\n                {\n                    \"name\": \"index\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The index of the in-object property.\"\n                },\n                {\n                    \"name\": \"machine_type\",\n                    \"type\": \"MachineType\",\n                    \"purpose\": \"The machine type of the in-object property.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSObject in-object property.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSObjectInObjectProperty(\n                MapRef map, int index, MachineType machine_type) {\n            int const offset = map.GetInObjectPropertyOffset(index);\n            FieldAccess access = {kTaggedBase,         offset,\n                                MaybeHandle<Name>(), OptionalMapRef(),\n                                Type::NonInternal(), machine_type,\n                                kFullWriteBarrier,   \"JSObjectInObjectProperty\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSObjectOffset\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing a JSObject field at a specific offset.\",\n            \"logic\": \"Creates a FieldAccess struct with a specified offset and WriteBarrierKind.\",\n            \"parameters\": [\n                {\n                    \"name\": \"offset\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The offset of the field within the JSObject.\"\n                },\n                {\n                    \"name\": \"write_barrier_kind\",\n                    \"type\": \"WriteBarrierKind\",\n                    \"purpose\": \"The write barrier kind for the field.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSObject field at the specified offset.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSObjectOffset(\n                int offset, WriteBarrierKind write_barrier_kind) {\n            FieldAccess access = {kTaggedBase,         offset,\n                                MaybeHandle<Name>(), OptionalMapRef(),\n                                Type::NonInternal(), MachineType::AnyTagged(),\n                                write_barrier_kind,  \"JSObjectOffset\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSCollectionTable\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the table field of a JSCollection.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the table field within a JSCollection object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSCollection table.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSCollectionTable() {\n            FieldAccess access = {kTaggedBase,           JSCollection::kTableOffset,\n                                MaybeHandle<Name>(),   OptionalMapRef(),\n                                Type::OtherInternal(), MachineType::TaggedPointer(),\n                                kPointerWriteBarrier,  \"JSCollectionTable\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSCollectionIteratorTable\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the table field of a JSCollectionIterator.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the table field within a JSCollectionIterator object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSCollectionIterator table.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSCollectionIteratorTable() {\n            FieldAccess access = {\n                kTaggedBase,           JSCollectionIterator::kTableOffset,\n                MaybeHandle<Name>(),   OptionalMapRef(),\n                Type::OtherInternal(), MachineType::TaggedPointer(),\n                kPointerWriteBarrier,  \"JSCollectionIteratorTable\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSCollectionIteratorIndex\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the index field of a JSCollectionIterator.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the index field within a JSCollectionIterator object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSCollectionIterator index.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSCollectionIteratorIndex() {\n            FieldAccess access = {kTaggedBase,\n                                JSCollectionIterator::kIndexOffset,\n                                MaybeHandle<Name>(),\n                                OptionalMapRef(),\n                                TypeCache::Get()->kFixedArrayLengthType,\n                                MachineType::TaggedSigned(),\n                                kNoWriteBarrier,\n                                \"JSCollectionIteratorIndex\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSExternalObjectValue\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the value field of a JSExternalObject.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the value field within a JSExternalObject.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSExternalObject value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSExternalObjectValue() {\n            FieldAccess access = {\n                kTaggedBase,\n                JSExternalObject::kValueOffset,\n                MaybeHandle<Name>(),\n                OptionalMapRef(),\n                Type::ExternalPointer(),\n                MachineType::Pointer(),\n                kNoWriteBarrier,\n                \"JSExternalObjectValue\",\n                ConstFieldInfo::None(),\n                false,\n                kExternalObjectValueTag,\n            };\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSExternalObjectPointerHandle\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the pointer handle in a JSExternalObject (Sandbox build).\",\n            \"logic\": \"Creates a FieldAccess struct for V8_ENABLE_SANDBOX builds with appropriate types and machine types.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSExternalObject pointer handle.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_ENABLE_SANDBOX\n            // static\n            FieldAccess AccessBuilder::ForJSExternalObjectPointerHandle() {\n            FieldAccess access = {\n                kTaggedBase,      JSExternalObject::kValueOffset, MaybeHandle<Name>(),\n                OptionalMapRef(), TypeCache::Get()->kUint32,      MachineType::Uint32(),\n                kNoWriteBarrier,  \"JSExternalObjectPointerHandle\"};\n            return access;\n            }\n            #endif\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSFunctionPrototypeOrInitialMap\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the prototype or initial map of a JSFunction.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the prototype_or_initial_map field within a JSFunction object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSFunction prototype or initial map.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSFunctionPrototypeOrInitialMap() {\n            FieldAccess access = {\n                kTaggedBase,          JSFunction::kPrototypeOrInitialMapOffset,\n                MaybeHandle<Name>(),  OptionalMapRef(),\n                Type::Any(),          MachineType::TaggedPointer(),\n                kPointerWriteBarrier, \"JSFunctionPrototypeOrInitialMap\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSFunctionContext\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the context of a JSFunction.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the context field within a JSFunction object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSFunction context.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSFunctionContext() {\n            FieldAccess access = {kTaggedBase,          JSFunction::kContextOffset,\n                                MaybeHandle<Name>(),  OptionalMapRef(),\n                                Type::Internal(),     MachineType::TaggedPointer(),\n                                kPointerWriteBarrier, \"JSFunctionContext\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSFunctionSharedFunctionInfo\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the SharedFunctionInfo of a JSFunction.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the shared_function_info field within a JSFunction object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSFunction SharedFunctionInfo.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSFunctionSharedFunctionInfo() {\n            FieldAccess access = {\n                kTaggedBase,           JSFunction::kSharedFunctionInfoOffset,\n                Handle<Name>(),        OptionalMapRef(),\n                Type::OtherInternal(), MachineType::TaggedPointer(),\n                kPointerWriteBarrier,  \"JSFunctionSharedFunctionInfo\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSFunctionFeedbackCell\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the FeedbackCell of a JSFunction.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the feedback_cell field within a JSFunction object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSFunction FeedbackCell.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSFunctionFeedbackCell() {\n            FieldAccess access = {kTaggedBase,          JSFunction::kFeedbackCellOffset,\n                                Handle<Name>(),       OptionalMapRef(),\n                                Type::Internal(),     MachineType::TaggedPointer(),\n                                kPointerWriteBarrier, \"JSFunctionFeedbackCell\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSFunctionDispatchHandleNoWriteBarrier\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the dispatch handle of a JSFunction without a write barrier (V8_ENABLE_LEAPTIERING).\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the dispatch_handle field within a JSFunction object for leap tiering. Includes a comment about write barrier requirements.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSFunction dispatch handle.\"\n            },\n            \"dependencies\": [\n                \"TypeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_ENABLE_LEAPTIERING\n            // static\n            FieldAccess AccessBuilder::ForJSFunctionDispatchHandleNoWriteBarrier() {\n            // We currently don't require write barriers when writing dispatch handles of\n            // JSFunctions because they are loaded from the function's FeedbackCell and\n            // so must already be reachable. If this ever changes, we'll need to\n            // implement write barrier support for dispatch handles in generated code.\n            FieldAccess access = {\n                kTaggedBase,      JSFunction::kDispatchHandleOffset, Handle<Name>(),\n                OptionalMapRef(), TypeCache::Get()->kInt32,          MachineType::Int32(),\n                kNoWriteBarrier,  \"JSFunctionDispatchHandle\"};\n            return access;\n            }\n            #else\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSFunctionCode\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the Code object of a JSFunction.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the code_ field within a JSFunction object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSFunction Code object.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_ENABLE_SANDBOX\n            // static\n            FieldAccess AccessBuilder::ForJSFunctionCode() {\n            FieldAccess access = {kTaggedBase,\n                                JSFunction::kCodeOffset,\n                                MaybeHandle<Name>(),\n                                OptionalMapRef(),\n                                Type::OtherInternal(),\n                                MachineType::IndirectPointer(),\n                                kIndirectPointerWriteBarrier,\n                                \"JSFunctionCode\"};\n            access.indirect_pointer_tag = kCodeIndirectPointerTag;\n            return access;\n            }\n            #else\n            // static\n            FieldAccess AccessBuilder::ForJSFunctionCode() {\n            FieldAccess access = {kTaggedBase,           JSFunction::kCodeOffset,\n                                Handle<Name>(),        OptionalMapRef(),\n                                Type::OtherInternal(), MachineType::TaggedPointer(),\n                                kPointerWriteBarrier,  \"JSFunctionCode\"};\n            return access;\n            }\n            #endif  // V8_ENABLE_SANDBOX\n            #endif  // V8_ENABLE_LEAPTIERING\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ForJSBoundFunctionBoundTargetFunction\",\n            \"parent\": \"AccessBuilder\",\n            \"about\": \"Creates a FieldAccess descriptor for accessing the bound target function of a JSBoundFunction.\",\n            \"logic\": \"Creates a FieldAccess struct with the offset of the bound_target_function field within a JSBoundFunction object.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"FieldAccess\",\n                \"description\": \"The FieldAccess descriptor for the JSBoundFunction bound target function.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            FieldAccess AccessBuilder::ForJSBoundFunctionBoundTargetFunction() {\n            FieldAccess access = {\n                kTaggedBase,          JSBoundFunction::kBoundTargetFunctionOffset,\n                Handle<Name>(),       OptionalMapRef(),\n                Type::Callable(),     MachineType::TaggedPointer(),\n                kPointerWriteBarrier, \"JSBoundFunctionBoundTargetFunction\"};\n            return access;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\","
}