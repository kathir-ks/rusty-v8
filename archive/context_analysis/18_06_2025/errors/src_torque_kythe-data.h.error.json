{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/kythe-data.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 133, column 59",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/kythe-data.h\",\n        \"file_name\": \"kythe-data.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides data structures and classes for integrating Torque (a language used in V8) with Kythe (a graph-based code indexing system). This allows Torque code to be analyzed and represented in the Kythe graph.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for base contextual classes, Torque AST nodes, global context, and implementation visitor patterns.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/contextual.h\"\n#include \"src/torque/ast.h\"\n#include \"src/torque/global-context.h\"\n#include \"src/torque/implementation-visitor.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"KythePosition\",\n            \"about\": \"Represents a position in a source file for Kythe.\",\n            \"attributes\": [\n                {\n                    \"name\": \"file_path\",\n                    \"type\": \"std::string\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Path to the file.\"\n                },\n                {\n                    \"name\": \"start_offset\",\n                    \"type\": \"uint64_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Start offset in the file.\"\n                },\n                {\n                    \"name\": \"end_offset\",\n                    \"type\": \"uint64_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"End offset in the file.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nstruct KythePosition {\n  std::string file_path;\n  uint64_t start_offset;\n  uint64_t end_offset;\n};\n        ]]></code>\n    </class>\n    <typedef>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"typedef\",\n            \"name\": \"kythe_entity_t\",\n            \"about\": \"Type alias for a Kythe entity identifier.\",\n            \"target_type\": \"uint64_t\"\n        }\n        </metadata>\n        <code><![CDATA[\nusing kythe_entity_t = uint64_t;\n        ]]></code>\n    </typedef>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"KytheConsumer\",\n            \"about\": \"Abstract class that consumes Kythe data, defining interfaces for adding definitions, uses, and calls to the Kythe graph.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"KythePosition\",\n                \"kythe_entity_t\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass KytheConsumer {\n public:\n  enum class Kind {\n    Unspecified,\n    Constant,\n    Function,\n    ClassField,\n    Variable,\n    Type,\n  };\n\n  virtual ~KytheConsumer() = 0;\n\n  virtual kythe_entity_t AddDefinition(Kind kind, std::string name,\n                                       KythePosition pos) = 0;\n\n  virtual void AddUse(Kind kind, kythe_entity_t entity,\n                      KythePosition use_pos) = 0;\n  virtual void AddCall(Kind kind, kythe_entity_t caller_entity,\n                       KythePosition call_pos,\n                       kythe_entity_t callee_entity) = 0;\n};\ninline KytheConsumer::~KytheConsumer() = default;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"KytheData\",\n            \"extends\": \"base::ContextualClass<KytheData>\",\n            \"about\": \"Provides static methods for adding Kythe data for different Torque language constructs (constants, callables, class fields, bindings, types). Uses a KytheConsumer to actually interact with the Kythe system.\",\n            \"attributes\": [\n                {\n                    \"name\": \"consumer_\",\n                    \"type\": \"KytheConsumer*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the KytheConsumer instance.\"\n                },\n                {\n                    \"name\": \"constants_\",\n                    \"type\": \"std::unordered_map<const Value*, kythe_entity_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maps Value pointers to Kythe entity IDs.\"\n                },\n                {\n                    \"name\": \"callables_\",\n                    \"type\": \"std::unordered_map<Callable*, kythe_entity_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maps Callable pointers to Kythe entity IDs.\"\n                },\n                {\n                    \"name\": \"field_uses_\",\n                    \"type\": \"std::unordered_map<const Field*, std::set<SourcePosition>>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maps Field pointers to a set of SourcePositions where they are used.\"\n                },\n                {\n                    \"name\": \"local_bindings_\",\n                    \"type\": \"std::unordered_map<uint64_t, kythe_entity_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maps binding indices to Kythe entity IDs.\"\n                },\n                {\n                    \"name\": \"types_\",\n                    \"type\": \"std::unordered_map<const Declarable*, kythe_entity_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maps Declarable pointers (representing types) to Kythe entity IDs.\"\n                },\n                 {\n                    \"name\": \"class_fields_\",\n                    \"type\": \"std::unordered_map<const Field*, kythe_entity_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maps Field pointers (representing class fields) to Kythe entity IDs.\"\n                }\n            ],\n            \"dependencies\": [\n                \"base::ContextualClass\",\n                \"KytheConsumer\",\n                \"Value\",\n                \"Callable\",\n                \"Field\",\n                \"SourcePosition\",\n                \"Declarable\",\n                \"Binding\",\n                \"LocalValue\",\n                \"LocalLabel\",\n                \"kythe_entity_t\",\n                \"KythePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass KytheData : public base::ContextualClass<KytheData> {\n public:\n  KytheData() = default;\n\n  static void SetConsumer(KytheConsumer* consumer) {\n    Get().consumer_ = consumer;\n  }\n\n  // Constants\n  V8_EXPORT_PRIVATE static kythe_entity_t AddConstantDefinition(\n      const Value* constant);\n  V8_EXPORT_PRIVATE static void AddConstantUse(SourcePosition use_position,\n                                               const Value* constant);\n  // Callables\n  V8_EXPORT_PRIVATE static kythe_entity_t AddFunctionDefinition(\n      Callable* callable);\n  V8_EXPORT_PRIVATE static void AddCall(Callable* caller,\n                                        SourcePosition call_position,\n                                        Callable* callee);\n  // Class fields\n  V8_EXPORT_PRIVATE static kythe_entity_t AddClassFieldDefinition(\n      const Field* field);\n  V8_EXPORT_PRIVATE static void AddClassFieldUse(SourcePosition use_position,\n                                                 const Field* field);\n  // Bindings\n  V8_EXPORT_PRIVATE static kythe_entity_t AddBindingDefinition(\n      Binding<LocalValue>* binding);\n  V8_EXPORT_PRIVATE static kythe_entity_t AddBindingDefinition(\n      Binding<LocalLabel>* binding);\n  V8_EXPORT_PRIVATE static void AddBindingUse(SourcePosition use_position,\n                                              Binding<LocalValue>* binding);\n  V8_EXPORT_PRIVATE static void AddBindingUse(SourcePosition use_position,\n                                              Binding<LocalLabel>* binding);\n\n  // Types\n  V8_EXPORT_PRIVATE static kythe_entity_t AddTypeDefinition(\n      const Declarable* type_decl);\n  V8_EXPORT_PRIVATE static void AddTypeUse(SourcePosition use_position,\n                                           const Declarable* type_decl);\n\n private:\n  static kythe_entity_t AddBindingDefinitionImpl(\n      uint64_t binding_index, const std::string& name,\n      const SourcePosition& ident_pos);\n\n  KytheConsumer* consumer_;\n  std::unordered_map<const Value*, kythe_entity_t> constants_;\n  std::unordered_map<Callable*, kythe_entity_t> callables_;\n\n  std::unordered_map<const Field*, std::set<SourcePosition>> field_uses_;\n  std::unordered_map<uint64_t, kythe_entity_t> local_bindings_;\n  std::unordered_map<const Declarable*, kythe_entity_t> types_;\n  std::unordered_map<const Field*, kythe_entity_t> class_fields_;\n};\n        ]]></code>\n    </class>\n</file>\n```"
}