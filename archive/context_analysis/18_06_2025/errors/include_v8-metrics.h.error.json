{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-metrics.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-metrics.h\",\n            \"file_name\": \"v8-metrics.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines structures and the Recorder class for collecting and reporting metrics related to V8's performance, particularly garbage collection and WebAssembly compilation/instantiation.  This includes timing information, memory usage, and success/failure indicators.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard C++ headers and V8-specific headers for basic data types, containers, optional values, internal V8 functionality, isolate management, local handles, and V8 configuration.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <stddef.h>\n            #include <stdint.h>\n\n            #include <optional>\n            #include <vector>\n\n            #include \"v8-internal.h\"      // NOLINT(build/include_directory)\n            #include \"v8-isolate.h\"       // NOLINT(build/include_directory)\n            #include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n            #include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionPhases\",\n                \"about\": \"Represents the duration of different phases within a garbage collection cycle.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"total_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Total wall-clock duration of all GC phases in microseconds.\"\n                    },\n                    {\n                        \"name\": \"compact_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the compaction phase in microseconds.\"\n                    },\n                    {\n                        \"name\": \"mark_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the marking phase in microseconds.\"\n                    },\n                    {\n                        \"name\": \"sweep_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the sweeping phase in microseconds.\"\n                    },\n                    {\n                        \"name\": \"weak_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the weak processing phase in microseconds.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct GarbageCollectionPhases {\n              int64_t total_wall_clock_duration_in_us = -1;\n              int64_t compact_wall_clock_duration_in_us = -1;\n              int64_t mark_wall_clock_duration_in_us = -1;\n              int64_t sweep_wall_clock_duration_in_us = -1;\n              int64_t weak_wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionSizes\",\n                \"about\": \"Represents memory size information before, after, and during a garbage collection cycle.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"bytes_before\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Memory usage in bytes before garbage collection.\"\n                    },\n                    {\n                        \"name\": \"bytes_after\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Memory usage in bytes after garbage collection.\"\n                    },\n                    {\n                        \"name\": \"bytes_freed\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Memory freed in bytes during garbage collection.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct GarbageCollectionSizes {\n              int64_t bytes_before = -1;\n              int64_t bytes_after = -1;\n              int64_t bytes_freed = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionFullCycle\",\n                \"about\": \"Represents metrics for a full garbage collection cycle, including timings, sizes, and efficiency.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"reason\",\n                        \"type\": \"int\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Reason for the garbage collection cycle.\"\n                    },\n                    {\n                        \"name\": \"priority\",\n                        \"type\": \"std::optional<v8::Isolate::Priority>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The priority of the isolate during the GC cycle, or nullopt if mixed priority.\"\n                    },\n                    {\n                        \"name\": \"total\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for the total cycle (JS).\"\n                    },\n                    {\n                        \"name\": \"total_cpp\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for the total cycle (C++).\"\n                    },\n                    {\n                        \"name\": \"main_thread\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing on the main thread (JS).\"\n                    },\n                    {\n                        \"name\": \"main_thread_cpp\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing on the main thread (C++).\"\n                    },\n                    {\n                        \"name\": \"main_thread_atomic\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for atomic operations on the main thread (JS).\"\n                    },\n                    {\n                        \"name\": \"main_thread_atomic_cpp\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for atomic operations on the main thread (C++).\"\n                    },\n                    {\n                        \"name\": \"main_thread_incremental\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for incremental operations on the main thread (JS).\"\n                    },\n                    {\n                        \"name\": \"main_thread_incremental_cpp\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for incremental operations on the main thread (C++).\"\n                    },\n                    {\n                        \"name\": \"objects\",\n                        \"type\": \"GarbageCollectionSizes\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection size information for objects (JS).\"\n                    },\n                    {\n                        \"name\": \"objects_cpp\",\n                        \"type\": \"GarbageCollectionSizes\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection size information for objects (C++).\"\n                    },\n                    {\n                        \"name\": \"memory\",\n                        \"type\": \"GarbageCollectionSizes\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection size information for memory (JS).\"\n                    },\n                    {\n                        \"name\": \"memory_cpp\",\n                        \"type\": \"GarbageCollectionSizes\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection size information for memory (C++).\"\n                    },\n                    {\n                        \"name\": \"collection_rate_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection rate in percentage (JS).\"\n                    },\n                    {\n                        \"name\": \"collection_rate_cpp_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection rate in percentage (C++).\"\n                    },\n                    {\n                        \"name\": \"efficiency_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection efficiency in bytes per microsecond (JS).\"\n                    },\n                    {\n                        \"name\": \"efficiency_cpp_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection efficiency in bytes per microsecond (C++).\"\n                    },\n                    {\n                        \"name\": \"main_thread_efficiency_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Main thread garbage collection efficiency in bytes per microsecond (JS).\"\n                    },\n                    {\n                        \"name\": \"main_thread_efficiency_cpp_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Main thread garbage collection efficiency in bytes per microsecond (C++).\"\n                    },\n                    {\n                        \"name\": \"collection_weight_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Collection weight in percentage (JS).\"\n                    },\n                    {\n                        \"name\": \"collection_weight_cpp_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Collection weight in percentage (C++).\"\n                    },\n                    {\n                        \"name\": \"main_thread_collection_weight_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Main thread collection weight in percentage (JS).\"\n                    },\n                    {\n                        \"name\": \"main_thread_collection_weight_cpp_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Main thread collection weight in percentage (C++).\"\n                    },\n                    {\n                        \"name\": \"incremental_marking_start_stop_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Duration of incremental marking start/stop in microseconds.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"GarbageCollectionPhases\",\n                    \"GarbageCollectionSizes\",\n                    \"v8::Isolate::Priority\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            struct GarbageCollectionFullCycle {\n              int reason = -1;\n              // The priority of the isolate during the GC cycle. A nullopt value denotes a\n              // mixed priority cycle, meaning the Isolate's priority was changed while the\n              // cycle was in progress.\n              std::optional<v8::Isolate::Priority> priority = std::nullopt;\n              GarbageCollectionPhases total;\n              GarbageCollectionPhases total_cpp;\n              GarbageCollectionPhases main_thread;\n              GarbageCollectionPhases main_thread_cpp;\n              GarbageCollectionPhases main_thread_atomic;\n              GarbageCollectionPhases main_thread_atomic_cpp;\n              GarbageCollectionPhases main_thread_incremental;\n              GarbageCollectionPhases main_thread_incremental_cpp;\n              GarbageCollectionSizes objects;\n              GarbageCollectionSizes objects_cpp;\n              GarbageCollectionSizes memory;\n              GarbageCollectionSizes memory_cpp;\n              double collection_rate_in_percent = -1.0;\n              double collection_rate_cpp_in_percent = -1.0;\n              double efficiency_in_bytes_per_us = -1.0;\n              double efficiency_cpp_in_bytes_per_us = -1.0;\n              double main_thread_efficiency_in_bytes_per_us = -1.0;\n              double main_thread_efficiency_cpp_in_bytes_per_us = -1.0;\n              double collection_weight_in_percent = -1.0;\n              double collection_weight_cpp_in_percent = -1.0;\n              double main_thread_collection_weight_in_percent = -1.0;\n              double main_thread_collection_weight_cpp_in_percent = -1.0;\n              int64_t incremental_marking_start_stop_wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionFullMainThreadIncrementalMark\",\n                \"about\": \"Represents metrics for a single incremental marking step during a full garbage collection cycle on the main thread.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the incremental marking step in microseconds (JS).\"\n                    },\n                    {\n                        \"name\": \"cpp_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the incremental marking step in microseconds (C++).\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct GarbageCollectionFullMainThreadIncrementalMark {\n              int64_t wall_clock_duration_in_us = -1;\n              int64_t cpp_wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionFullMainThreadIncrementalSweep\",\n                \"about\": \"Represents metrics for a single incremental sweeping step during a full garbage collection cycle on the main thread.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the incremental sweeping step in microseconds (JS).\"\n                    },\n                    {\n                        \"name\": \"cpp_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the incremental sweeping step in microseconds (C++).\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct GarbageCollectionFullMainThreadIncrementalSweep {\n              int64_t wall_clock_duration_in_us = -1;\n              int64_t cpp_wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionBatchedEvents\",\n                \"about\": \"A template struct to hold a vector of garbage collection events.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"events\",\n                        \"type\": \"std::vector<EventType>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"A vector of garbage collection events of type EventType.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename EventType>\n            struct GarbageCollectionBatchedEvents {\n              std::vector<EventType> events;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"using\",\n                \"name\": \"GarbageCollectionFullMainThreadBatchedIncrementalMark\",\n                \"about\": \"Type alias for a batched collection of incremental mark events\",\n                \"dependencies\": [\n                    \"GarbageCollectionBatchedEvents\",\n                    \"GarbageCollectionFullMainThreadIncrementalMark\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            using GarbageCollectionFullMainThreadBatchedIncrementalMark =\n                GarbageCollectionBatchedEvents<\n                    GarbageCollectionFullMainThreadIncrementalMark>;\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"using\",\n                \"name\": \"GarbageCollectionFullMainThreadBatchedIncrementalSweep\",\n                \"about\": \"Type alias for a batched collection of incremental sweep events\",\n                \"dependencies\": [\n                    \"GarbageCollectionBatchedEvents\",\n                    \"GarbageCollectionFullMainThreadIncrementalSweep\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            using GarbageCollectionFullMainThreadBatchedIncrementalSweep =\n                GarbageCollectionBatchedEvents<\n                    GarbageCollectionFullMainThreadIncrementalSweep>;\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"GarbageCollectionYoungCycle\",\n                \"about\": \"Represents metrics for a young generation garbage collection cycle.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"reason\",\n                        \"type\": \"int\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Reason for the garbage collection cycle.\"\n                    },\n                    {\n                        \"name\": \"priority\",\n                        \"type\": \"std::optional<v8::Isolate::Priority>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The priority of the isolate during the GC cycle, or nullopt if mixed priority.\"\n                    },\n                    {\n                        \"name\": \"total_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Total wall-clock duration of the young generation GC cycle in microseconds.\"\n                    },\n                    {\n                        \"name\": \"main_thread_wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the young generation GC cycle on the main thread in microseconds.\"\n                    },\n                    {\n                        \"name\": \"collection_rate_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection rate in percentage (JS).\"\n                    },\n                    {\n                        \"name\": \"efficiency_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection efficiency in bytes per microsecond (JS).\"\n                    },\n                    {\n                        \"name\": \"main_thread_efficiency_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Main thread garbage collection efficiency in bytes per microsecond (JS).\"\n                    },\n                    {\n                        \"name\": \"total_cpp\",\n                        \"type\": \"GarbageCollectionPhases\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection phases timing for the total cycle (C++).\",\n                        \"conditional\": \"CPPGC_YOUNG_GENERATION\"\n                    },\n                    {\n                        \"name\": \"objects_cpp\",\n                        \"type\": \"GarbageCollectionSizes\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection size information for objects (C++).\",\n                        \"conditional\": \"CPPGC_YOUNG_GENERATION\"\n                    },\n                    {\n                        \"name\": \"memory_cpp\",\n                        \"type\": \"GarbageCollectionSizes\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection size information for memory (C++).\",\n                        \"conditional\": \"CPPGC_YOUNG_GENERATION\"\n                    },\n                    {\n                        \"name\": \"collection_rate_cpp_in_percent\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection rate in percentage (C++).\",\n                        \"conditional\": \"CPPGC_YOUNG_GENERATION\"\n                    },\n                    {\n                        \"name\": \"efficiency_cpp_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Garbage collection efficiency in bytes per microsecond (C++).\",\n                        \"conditional\": \"CPPGC_YOUNG_GENERATION\"\n                    },\n                    {\n                        \"name\": \"main_thread_efficiency_cpp_in_bytes_per_us\",\n                        \"type\": \"double\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Main thread garbage collection efficiency in bytes per microsecond (C++).\",\n                        \"conditional\": \"CPPGC_YOUNG_GENERATION\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"v8::Isolate::Priority\",\n                    \"GarbageCollectionPhases\",\n                    \"GarbageCollectionSizes\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            struct GarbageCollectionYoungCycle {\n              int reason = -1;\n              // The priority of the isolate during the GC cycle. A nullopt value denotes a\n              // mixed priority cycle, meaning the Isolate's priority was changed while the\n              // cycle was in progress.\n              std::optional<v8::Isolate::Priority> priority = std::nullopt;\n              int64_t total_wall_clock_duration_in_us = -1;\n              int64_t main_thread_wall_clock_duration_in_us = -1;\n              double collection_rate_in_percent = -1.0;\n              double efficiency_in_bytes_per_us = -1.0;\n              double main_thread_efficiency_in_bytes_per_us = -1.0;\n            #if defined(CPPGC_YOUNG_GENERATION)\n              GarbageCollectionPhases total_cpp;\n              GarbageCollectionSizes objects_cpp;\n              GarbageCollectionSizes memory_cpp;\n              double collection_rate_cpp_in_percent = -1.0;\n              double efficiency_cpp_in_bytes_per_us = -1.0;\n              double main_thread_efficiency_cpp_in_bytes_per_us = -1.0;\n            #endif  // defined(CPPGC_YOUNG_GENERATION)\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmModuleDecoded\",\n                \"about\": \"Represents metrics for WebAssembly module decoding.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"async\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the decoding was performed asynchronously.\"\n                    },\n                    {\n                        \"name\": \"streamed\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the decoding was performed in a streamed manner.\"\n                    },\n                    {\n                        \"name\": \"success\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the decoding was successful.\"\n                    },\n                    {\n                        \"name\": \"module_size_in_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Size of the decoded module in bytes.\"\n                    },\n                    {\n                        \"name\": \"function_count\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Number of functions in the decoded module.\"\n                    },\n                    {\n                        \"name\": \"wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the decoding process in microseconds.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct WasmModuleDecoded {\n              WasmModuleDecoded() = default;\n              WasmModuleDecoded(bool async, bool streamed, bool success,\n                                size_t module_size_in_bytes, size_t function_count,\n                                int64_t wall_clock_duration_in_us)\n                  : async(async),\n                    streamed(streamed),\n                    success(success),\n                    module_size_in_bytes(module_size_in_bytes),\n                    function_count(function_count),\n                    wall_clock_duration_in_us(wall_clock_duration_in_us) {}\n\n              bool async = false;\n              bool streamed = false;\n              bool success = false;\n              size_t module_size_in_bytes = 0;\n              size_t function_count = 0;\n              int64_t wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmModuleCompiled\",\n                \"about\": \"Represents metrics for WebAssembly module compilation.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"async\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the compilation was performed asynchronously.\"\n                    },\n                    {\n                        \"name\": \"streamed\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the compilation was performed in a streamed manner.\"\n                    },\n                    {\n                        \"name\": \"cached\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the compiled module was retrieved from a cache.\"\n                    },\n                    {\n                        \"name\": \"deserialized\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the compiled module was deserialized from a snapshot.\"\n                    },\n                    {\n                        \"name\": \"lazy\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the compilation was lazy.\"\n                    },\n                    {\n                        \"name\": \"success\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the compilation was successful.\"\n                    },\n                    {\n                        \"name\": \"code_size_in_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Size of the compiled code in bytes.\"\n                    },\n                    {\n                        \"name\": \"liftoff_bailout_count\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Number of times the Liftoff compiler bailed out to Turbofan.\"\n                    },\n                    {\n                        \"name\": \"wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the compilation process in microseconds.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct WasmModuleCompiled {\n              WasmModuleCompiled() = default;\n\n              WasmModuleCompiled(bool async, bool streamed, bool cached, bool deserialized,\n                                 bool lazy, bool success, size_t code_size_in_bytes,\n                                 size_t liftoff_bailout_count,\n                                 int64_t wall_clock_duration_in_us)\n                  : async(async),\n                    streamed(streamed),\n                    cached(cached),\n                    deserialized(deserialized),\n                    lazy(lazy),\n                    success(success),\n                    code_size_in_bytes(code_size_in_bytes),\n                    liftoff_bailout_count(liftoff_bailout_count),\n                    wall_clock_duration_in_us(wall_clock_duration_in_us) {}\n\n              bool async = false;\n              bool streamed = false;\n              bool cached = false;\n              bool deserialized = false;\n              bool lazy = false;\n              bool success = false;\n              size_t code_size_in_bytes = 0;\n              size_t liftoff_bailout_count = 0;\n              int64_t wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmModuleInstantiated\",\n                \"about\": \"Represents metrics for WebAssembly module instantiation.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"async\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the instantiation was performed asynchronously.\"\n                    },\n                    {\n                        \"name\": \"success\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the instantiation was successful.\"\n                    },\n                    {\n                        \"name\": \"imported_function_count\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Number of imported functions in the instantiated module.\"\n                    },\n                    {\n                        \"name\": \"wall_clock_duration_in_us\",\n                        \"type\": \"int64_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Wall-clock duration of the instantiation process in microseconds.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct WasmModuleInstantiated {\n              bool async = false;\n              bool success = false;\n              size_t imported_function_count = 0;\n              int64_t wall_clock_duration_in_us = -1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmModulesPerIsolate\",\n                \"about\": \"Represents the number of WebAssembly modules per isolate.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"count\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Number of WebAssembly modules in the isolate.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            struct WasmModulesPerIsolate {\n              size_t count = 0;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Recorder\",\n                \"extends\": \"\",\n                \"implements\": [],\n                \"about\": \"Base class for recording event-based metrics in V8.  Handles both thread-safe and main-thread events.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"GarbageCollectionFullCycle\",\n                    \"GarbageCollectionFullMainThreadIncrementalMark\",\n                    \"GarbageCollectionFullMainThreadBatchedIncrementalMark\",\n                    \"GarbageCollectionFullMainThreadIncrementalSweep\",\n                    \"GarbageCollectionFullMainThreadBatchedIncrementalSweep\",\n                    \"GarbageCollectionYoungCycle\",\n                    \"WasmModuleDecoded\",\n                    \"WasmModuleCompiled\",\n                    \"WasmModuleInstantiated\",\n                    \"WasmModulesPerIsolate\",\n                    \"v8::Context\",\n                    \"v8::Isolate\",\n                    \"v8::Local\",\n                    \"v8::MaybeLocal\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT Recorder {\n             public:\n              // A unique identifier for a context in this Isolate.\n              // It is guaranteed to not be reused throughout the lifetime of the Isolate.\n              class ContextId {\n               public:\n                ContextId() : id_(kEmptyId) {}\n\n                bool IsEmpty() const { return id_ == kEmptyId; }\n                static const ContextId Empty() { return ContextId{kEmptyId}; }\n\n                bool operator==(const ContextId& other) const { return id_ == other.id_; }\n                bool operator!=(const ContextId& other) const { return id_ != other.id_; }\n\n               private:\n                friend class ::v8::Context;\n                friend class ::v8::internal::Isolate;\n\n                explicit ContextId(uintptr_t id) : id_(id) {}\n\n                static constexpr uintptr_t kEmptyId = 0;\n                uintptr_t id_;\n              };\n\n              virtual ~Recorder() = default;\n\n              // Main thread events. Those are only triggered on the main thread, and hence\n              // can access the context.\n            #define ADD_MAIN_THREAD_EVENT(E) \\\n              virtual void AddMainThreadEvent(const E&, ContextId) {}\n              ADD_MAIN_THREAD_EVENT(GarbageCollectionFullCycle)\n              ADD_MAIN_THREAD_EVENT(GarbageCollectionFullMainThreadIncrementalMark)\n              ADD_MAIN_THREAD_EVENT(GarbageCollectionFullMainThreadBatchedIncrementalMark)\n              ADD_MAIN_THREAD_EVENT(GarbageCollectionFullMainThreadIncrementalSweep)\n              ADD_MAIN_THREAD_EVENT(GarbageCollectionFullMainThreadBatchedIncrementalSweep)\n              ADD_MAIN_THREAD_EVENT(GarbageCollectionYoungCycle)\n              ADD_MAIN_THREAD_EVENT(WasmModuleDecoded)\n              ADD_MAIN_THREAD_EVENT(WasmModuleCompiled)\n              ADD_MAIN_THREAD_EVENT(WasmModuleInstantiated)\n            #undef ADD_MAIN_THREAD_EVENT\n\n              // Thread-safe events are not allowed to access the"
}