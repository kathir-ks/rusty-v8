{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-context-specialization.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 45, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-context-specialization.h\",\n        \"file_name\": \"js-context-specialization.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the JSContextSpecialization class, which specializes a JSGraph to a given context, potentially constant folding LoadContext nodes or strength reducing StoreContext nodes.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for graph reduction and handle management.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/graph-reducer.h\"\n#include \"src/handles/maybe-handles.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"OuterContext\",\n            \"about\": \"Represents a context and its distance from a point of reference.\",\n            \"attributes\": [\n                {\n                    \"name\": \"context\",\n                    \"type\": \"IndirectHandle<Context>\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The context.\"\n                },\n                {\n                    \"name\": \"distance\",\n                    \"type\": \"size_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The distance from the point of reference.\"\n                }\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct OuterContext {\n  OuterContext() = default;\n  OuterContext(IndirectHandle<Context> context_, size_t distance_)\n      : context(context_), distance(distance_) {}\n\n  IndirectHandle<Context> context;\n  size_t distance = 0;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSContextSpecialization\",\n            \"extends\": \"AdvancedReducer\",\n            \"about\": \"Specializes a given JSGraph to a given context, potentially constant folding LoadContext nodes or strength reducing StoreContext nodes. Additionally, constant-folds the function parameter if closure is given, and constant-folds import.meta loads if the corresponding object already exists.\",\n            \"attributes\": [\n                {\n                    \"name\": \"jsgraph_\",\n                    \"type\": \"JSGraph*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the JSGraph being specialized.\"\n                },\n                {\n                    \"name\": \"outer_\",\n                    \"type\": \"Maybe<OuterContext>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The outer context to specialize to.\"\n                },\n                {\n                    \"name\": \"closure_\",\n                    \"type\": \"MaybeHandle<JSFunction>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The closure to specialize to.\"\n                },\n                {\n                    \"name\": \"broker_\",\n                    \"type\": \"JSHeapBroker* const\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The JSHeapBroker used for heap access.\"\n                }\n            ],\n            \"dependencies\": [\n                \"AdvancedReducer\",\n                \"JSGraph\",\n                \"JSHeapBroker\",\n                \"OuterContext\",\n                \"JSFunction\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE JSContextSpecialization final : public AdvancedReducer {\n public:\n  JSContextSpecialization(Editor* editor, JSGraph* jsgraph,\n                          JSHeapBroker* broker, Maybe<OuterContext> outer,\n                          MaybeHandle<JSFunction> closure)\n      : AdvancedReducer(editor),\n        jsgraph_(jsgraph),\n        outer_(outer),\n        closure_(closure),\n        broker_(broker) {}\n  JSContextSpecialization(const JSContextSpecialization&) = delete;\n  JSContextSpecialization& operator=(const JSContextSpecialization&) = delete;\n\n  const char* reducer_name() const override {\n    return \"JSContextSpecialization\";\n  }\n\n  Reduction Reduce(Node* node) final;\n\n private:\n  Reduction ReduceParameter(Node* node);\n  Reduction ReduceJSLoadContext(Node* node);\n  Reduction ReduceJSLoadScriptContext(Node* node);\n  Reduction ReduceJSStoreContext(Node* node);\n  Reduction ReduceJSStoreScriptContext(Node* node);\n  Reduction ReduceJSGetImportMeta(Node* node);\n\n  Reduction SimplifyJSLoadContext(Node* node, Node* new_context,\n                                  size_t new_depth);\n  Reduction SimplifyJSLoadScriptContext(Node* node, Node* new_context,\n                                        size_t new_depth);\n  Reduction SimplifyJSStoreContext(Node* node, Node* new_context,\n                                   size_t new_depth);\n  Reduction SimplifyJSStoreScriptContext(Node* node, Node* new_context,\n                                         size_t new_depth);\n\n  Isolate* isolate() const;\n  JSGraph* jsgraph() const { return jsgraph_; }\n  Maybe<OuterContext> outer() const { return outer_; }\n  MaybeHandle<JSFunction> closure() const { return closure_; }\n  JSHeapBroker* broker() const { return broker_; }\n\n  JSGraph* const jsgraph_;\n  Maybe<OuterContext> outer_;\n  MaybeHandle<JSFunction> closure_;\n  JSHeapBroker* const broker_;\n};\n        ]]></code>\n    </class>\n</file>\n```"
}