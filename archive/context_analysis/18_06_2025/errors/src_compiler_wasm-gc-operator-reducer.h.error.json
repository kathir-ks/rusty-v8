{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/wasm-gc-operator-reducer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 76, column 76",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/wasm-gc-operator-reducer.h\",\n            \"file_name\": \"wasm-gc-operator-reducer.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the WasmGCOperatorReducer class, which optimizes WebAssembly garbage collection (GC) related operations by eliminating redundant type checks and casts based on type information propagated through the control flow graph.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for compiler components, graph manipulation, control path analysis, and WebAssembly specific data structures.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/control-path-state.h\"\n#include \"src/compiler/graph-reducer.h\"\n#include \"src/compiler/wasm-graph-assembler.h\"\n#include \"src/wasm/wasm-subtyping.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"NodeWithType\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Represents a graph node along with its WebAssembly type, used for type tracking during optimization.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The graph node.\"\n                    },\n                    {\n                        \"name\": \"type\",\n                        \"type\": \"wasm::TypeInModule\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The WebAssembly type of the node.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Node\",\n                    \"wasm::TypeInModule\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct NodeWithType {\n  NodeWithType() : node(nullptr), type(wasm::kWasmVoid, nullptr) {}\n  NodeWithType(Node* node, wasm::TypeInModule type) : node(node), type(type) {}\n\n  bool operator==(const NodeWithType& other) const {\n    return node == other.node && type == other.type;\n  }\n  bool operator!=(const NodeWithType& other) const { return !(*this == other); }\n\n  bool IsSet() { return node != nullptr; }\n\n  Node* node;\n  wasm::TypeInModule type;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"WasmGCOperatorReducer\",\n                \"extends\": \"AdvancedReducerWithControlPathState<NodeWithType,\\n                                                 kMultipleInstances>\",\n                \"implements\": [],\n                \"about\": \"Optimizes WebAssembly GC operations by eliminating redundant type checks and casts.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"mcgraph_\",\n                        \"type\": \"MachineGraph*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the machine graph.\"\n                    },\n                    {\n                        \"name\": \"gasm_\",\n                        \"type\": \"WasmGraphAssembler\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Assembler for building WebAssembly graphs.\"\n                    },\n                    {\n                        \"name\": \"module_\",\n                        \"type\": \"const wasm::WasmModule*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the WebAssembly module.\"\n                    },\n                    {\n                        \"name\": \"source_position_table_\",\n                        \"type\": \"SourcePositionTable*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Table mapping nodes to source positions.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"AdvancedReducerWithControlPathState\",\n                    \"NodeWithType\",\n                    \"MachineGraph\",\n                    \"wasm::WasmModule\",\n                    \"SourcePositionTable\",\n                    \"WasmGraphAssembler\",\n                    \"ControlPathState\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass WasmGCOperatorReducer final\n    : public AdvancedReducerWithControlPathState<NodeWithType,\n                                                 kMultipleInstances> {\n public:\n  WasmGCOperatorReducer(Editor* editor, Zone* temp_zone_, MachineGraph* mcgraph,\n                        const wasm::WasmModule* module,\n                        SourcePositionTable* source_position_table);\n\n  const char* reducer_name() const override { return \"WasmGCOperatorReducer\"; }\n\n  Reduction Reduce(Node* node) final;\n\n private:\n  using ControlPathTypes = ControlPathState<NodeWithType, kMultipleInstances>;\n\n  Reduction ReduceWasmStructOperation(Node* node);\n  Reduction ReduceWasmArrayLength(Node* node);\n  Reduction ReduceAssertNotNull(Node* node);\n  Reduction ReduceCheckNull(Node* node);\n  Reduction ReduceWasmTypeCheck(Node* node);\n  Reduction ReduceWasmTypeCheckAbstract(Node* node);\n  Reduction ReduceWasmTypeCast(Node* node);\n  Reduction ReduceWasmTypeCastAbstract(Node* node);\n  Reduction ReduceTypeGuard(Node* node);\n  Reduction ReduceWasmAnyConvertExtern(Node* node);\n  Reduction ReduceMerge(Node* node);\n  Reduction ReduceIf(Node* node, bool condition);\n  Reduction ReduceStart(Node* node);\n\n  Node* SetType(Node* node, wasm::ValueType type);\n  void UpdateSourcePosition(Node* new_node, Node* old_node);\n  // Returns the intersection of the type marked on {object} and the type\n  // information about object tracked on {control}'s control path (if present).\n  // If {allow_non_wasm}, we bail out if the object's type is not a wasm type\n  // by returning bottom.\n  wasm::TypeInModule ObjectTypeFromContext(Node* object, Node* control,\n                                           bool allow_non_wasm = false);\n  Reduction UpdateNodeAndAliasesTypes(Node* state_owner,\n                                      ControlPathTypes parent_state, Node* node,\n                                      wasm::TypeInModule type,\n                                      bool in_new_block);\n\n  TFGraph* graph() { return mcgraph_->graph(); }\n  CommonOperatorBuilder* common() { return mcgraph_->common(); }\n  SimplifiedOperatorBuilder* simplified() { return gasm_.simplified(); }\n\n  MachineGraph* mcgraph_;\n  WasmGraphAssembler gasm_;\n  const wasm::WasmModule* module_;\n  SourcePositionTable* source_position_table_;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AdvancedReducerWithControlPathState\",\n                    \"about\": \"Base class for reducers that use control path state.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass AdvancedReducerWithControlPathState {\n public:\n  virtual Reduction Reduce(Node* node) = 0;\n};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Node\",\n                    \"about\": \"Represents a node in the graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Node {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Editor\",\n                    \"about\": \"Provides editing capabilities for the graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Editor {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Zone\",\n                    \"about\": \"Memory allocation zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"MachineGraph\",\n                    \"about\": \"Represents the machine graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass MachineGraph {\n public:\n  TFGraph* graph() { return nullptr; }\n  CommonOperatorBuilder* common() { return nullptr; }\n};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SourcePositionTable\",\n                    \"about\": \"Table for source positions.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass SourcePositionTable {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TFGraph\",\n                    \"about\": \"Represents the graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass TFGraph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"CommonOperatorBuilder\",\n                    \"about\": \"Builder for common operators.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass CommonOperatorBuilder {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SimplifiedOperatorBuilder\",\n                    \"about\": \"Builder for simplified operators.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass SimplifiedOperatorBuilder {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"WasmGraphAssembler\",\n                    \"about\": \"Assembler for WebAssembly graphs.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass WasmGraphAssembler {\n public:\n  SimplifiedOperatorBuilder* simplified() { return nullptr; }\n};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ControlPathState\",\n                    \"about\": \"Represents the control path state.\"\n                }\n            </metadata>\n            <code><![CDATA[\ntemplate <typename T, int kMax>\nclass ControlPathState {};\n            ]]></code>\n        </class>\n        <namespace>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"namespace\",\n                    \"name\": \"wasm\",\n                    \"about\": \"Namespace for WebAssembly related definitions.\"\n                }\n            </metadata>\n            <code><![CDATA[\nnamespace wasm {\n    enum ValueType {kWasmVoid};\n    struct TypeInModule {\n        TypeInModule(ValueType type, void* mod) {}\n        bool operator==(const TypeInModule& other) const { return true; }\n        bool operator!=(const TypeInModule& other) const { return false; }\n    };\n    struct WasmModule {};\n}\n            ]]></code>\n        </namespace>\n    </dependencies>\n</file>\n```"
}