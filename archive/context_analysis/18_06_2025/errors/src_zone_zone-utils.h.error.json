{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/zone/zone-utils.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 42, column 49",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/zone/zone-utils.h\",\n        \"file_name\": \"zone-utils.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides utility functions for working with Zones, specifically for cloning vectors.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and V8 specific headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <algorithm>\n#include <type_traits>\n\n#include \"src/base/vector.h\"\n#include \"src/zone/zone.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CloneVector\",\n            \"parent\": null,\n            \"about\": \"Clones a base::Vector into a new vector allocated within the provided Zone.\",\n            \"logic\": \"Allocates memory for the new vector in the specified zone. If the type 'T' is trivially copyable, it uses MemCopy for efficiency. Otherwise, it uses std::copy to handle potentially complex copy constructors.\",\n            \"parameters\": [\n                {\n                    \"name\": \"zone\",\n                    \"type\": \"Zone*\",\n                    \"purpose\": \"The zone to allocate the new vector in.\"\n                },\n                {\n                    \"name\": \"other\",\n                    \"type\": \"base::Vector<const T>\",\n                    \"purpose\": \"The vector to clone.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"base::Vector<T>\",\n                \"description\": \"A new vector containing the cloned elements, allocated in the provided zone.\"\n            },\n            \"dependencies\": [\n                \"base::Vector\",\n                \"Zone\",\n                \"std::is_trivially_copyable\",\n                \"std::copy\",\n                \"MemCopy\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename T>\nbase::Vector<T> CloneVector(Zone* zone, base::Vector<const T> other) {\n  int length = other.length();\n  if (length == 0) return base::Vector<T>();\n\n  T* data = zone->AllocateArray<T>(length);\n  if (std::is_trivially_copyable<T>::value) {\n    MemCopy(data, other.data(), length * sizeof(T));\n  } else {\n    std::copy(other.begin(), other.end(), data);\n  }\n  return base::Vector<T>(data, length);\n}\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Memory allocation area\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Zone {\n                    public:\n                        template <typename T>\n                        T* AllocateArray(size_t count);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"base::Vector\",\n                \"about\": \"Lightweight vector-like class.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace base {\n                    template <typename T>\n                    class Vector {\n                        public:\n                            int length() const;\n                            T* data();\n                            const T* data() const;\n                            T* begin();\n                            T* end();\n                    };\n                }\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"MemCopy\",\n                \"about\": \"Memory copy routine.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                void MemCopy(void* dest, const void* src, size_t size);\n            ]]></code>\n        </func>\n    </dependencies>\n</file>\n```"
}