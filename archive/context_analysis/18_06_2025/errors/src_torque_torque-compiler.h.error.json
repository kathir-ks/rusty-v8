{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/torque-compiler.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 148, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/torque-compiler.h\",\n        \"file_name\": \"torque-compiler.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the Torque compiler interface and related data structures for compiling Torque code.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and Torque-specific headers.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/base/contextual.h\"\n#include \"src/torque/ast.h\"\n#include \"src/torque/kythe-data.h\"\n#include \"src/torque/server-data.h\"\n#include \"src/torque/source-positions.h\"\n#include \"src/torque/utils.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"TorqueCompilerOptions\",\n            \"about\": \"Options for configuring the Torque compiler.\",\n            \"attributes\": [\n                {\n                    \"name\": \"output_directory\",\n                    \"type\": \"std::string\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The directory to write compiler output to.\"\n                },\n                {\n                    \"name\": \"v8_root\",\n                    \"type\": \"std::string\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The root directory of the V8 project.\"\n                },\n                {\n                    \"name\": \"collect_language_server_data\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Flag to enable collection of data for the language server.\"\n                },\n                {\n                    \"name\": \"collect_kythe_data\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Flag to enable collection of data for Kythe.\"\n                },\n                {\n                    \"name\": \"force_assert_statements\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Flag to force generation of dcheck statements even in non-debug builds.\"\n                },\n                {\n                    \"name\": \"force_32bit_output\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Flag to force 32-bit output even on 64-bit systems.\"\n                },\n                {\n                    \"name\": \"annotate_ir\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Flag to add extra comments in the output that show Torque's intermediate representation.\"\n                },\n                {\n                    \"name\": \"strip_v8_root\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Flag to strip the v8-root from source paths.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nstruct TorqueCompilerOptions {\n  std::string output_directory = \"\";\n  std::string v8_root = \"\";\n  bool collect_language_server_data = false;\n  bool collect_kythe_data = false;\n\n  // dcheck(...) are only generated for debug builds. To provide\n  // language server support for statements inside dchecks, this flag\n  // can force generate them.\n  bool force_assert_statements = false;\n\n  // Forge (Google3) can only run 64-bit executables. As Torque runs as part\n  // of the build process, we need a \"cross-compile\" mode when we target 32-bit\n  // architectures. Note that this does not needed in Chromium/V8 land, since we\n  // always build with the same bit width as the target architecture.\n  bool force_32bit_output = false;\n\n  // Adds extra comments in output that show Torque intermediate representation.\n  bool annotate_ir = false;\n\n  // Strips the v8-root in case the source path contains it as a prefix.\n  bool strip_v8_root = false;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"TorqueCompilerResult\",\n            \"about\": \"The result of compiling Torque code, including potential errors and collected data.\",\n            \"attributes\": [\n                {\n                    \"name\": \"source_file_map\",\n                    \"type\": \"std::optional<SourceFileMap>\",\n                    \"access\": \"public\",\n                    \"purpose\": \"A map translating SourceIds to filenames, used for error reporting.\"\n                },\n                {\n                    \"name\": \"language_server_data\",\n                    \"type\": \"LanguageServerData\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Eagerly collected data needed for the LanguageServer.\"\n                },\n                {\n                    \"name\": \"messages\",\n                    \"type\": \"std::vector<TorqueMessage>\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Errors collected during compilation.\"\n                }\n            ],\n            \"dependencies\": [\n                \"SourceFileMap\",\n                \"LanguageServerData\",\n                \"TorqueMessage\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct TorqueCompilerResult {\n  // Map translating SourceIds to filenames. This field is\n  // set on errors, so the SourcePosition of the error can be\n  // resolved.\n  std::optional<SourceFileMap> source_file_map;\n\n  // Eagerly collected data needed for the LanguageServer.\n  // Set the corresponding options flag to enable.\n  LanguageServerData language_server_data;\n\n  // Errors collected during compilation.\n  std::vector<TorqueMessage> messages;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"TorqueCompilationUnit\",\n            \"about\": \"Represents a single Torque compilation unit, containing the source file path and content.\",\n            \"attributes\": [\n                {\n                    \"name\": \"source_file_path\",\n                    \"type\": \"std::string\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The path to the source file.\"\n                },\n                {\n                    \"name\": \"file_content\",\n                    \"type\": \"std::string\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The content of the source file.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nstruct TorqueCompilationUnit {\n  std::string source_file_path;\n  std::string file_content;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CompileTorque\",\n            \"about\": \"Compiles Torque code from a single string source.\",\n            \"logic\": \"Orchestrates the compilation process from source string to compiled output.\",\n            \"parameters\": [\n                {\n                    \"name\": \"source\",\n                    \"type\": \"const std::string&\",\n                    \"purpose\": \"The source code to compile.\"\n                },\n                {\n                    \"name\": \"options\",\n                    \"type\": \"TorqueCompilerOptions\",\n                    \"purpose\": \"Compiler options to configure the compilation process.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"TorqueCompilerResult\",\n                \"description\": \"The result of the compilation.\"\n            },\n            \"dependencies\": [\n                \"TorqueCompilerOptions\",\n                \"TorqueCompilerResult\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE TorqueCompilerResult\nCompileTorque(const std::string& source, TorqueCompilerOptions options);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CompileTorque\",\n            \"about\": \"Compiles Torque code from a vector of file paths.\",\n            \"logic\": \"Orchestrates the compilation process from a list of source files.\",\n            \"parameters\": [\n                {\n                    \"name\": \"files\",\n                    \"type\": \"const std::vector<std::string>&\",\n                    \"purpose\": \"A vector of file paths to compile.\"\n                },\n                {\n                    \"name\": \"options\",\n                    \"type\": \"TorqueCompilerOptions\",\n                    \"purpose\": \"Compiler options to configure the compilation process.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"TorqueCompilerResult\",\n                \"description\": \"The result of the compilation.\"\n            },\n            \"dependencies\": [\n                \"TorqueCompilerOptions\",\n                \"TorqueCompilerResult\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nTorqueCompilerResult CompileTorque(const std::vector<std::string>& files,\n                                   TorqueCompilerOptions options);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CompileTorqueForKythe\",\n            \"about\": \"Compiles Torque code specifically for Kythe integration.\",\n            \"logic\": \"Compiles Torque code and emits Kythe data to the provided consumer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"units\",\n                    \"type\": \"std::vector<TorqueCompilationUnit>\",\n                    \"purpose\": \"A vector of Torque compilation units to compile.\"\n                },\n                {\n                    \"name\": \"options\",\n                    \"type\": \"TorqueCompilerOptions\",\n                    \"purpose\": \"Compiler options to configure the compilation process.\"\n                },\n                {\n                    \"name\": \"kythe_consumer\",\n                    \"type\": \"KytheConsumer*\",\n                    \"purpose\": \"The Kythe consumer to receive compilation data.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"TorqueCompilerResult\",\n                \"description\": \"The result of the compilation.\"\n            },\n            \"dependencies\": [\n                \"TorqueCompilerOptions\",\n                \"TorqueCompilerResult\",\n                \"TorqueCompilationUnit\",\n                \"KytheConsumer\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE TorqueCompilerResult CompileTorqueForKythe(\n    std::vector<TorqueCompilationUnit> units, TorqueCompilerOptions options,\n    KytheConsumer* kythe_consumer);\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourceFileMap\",\n                \"about\": \"Abstract representation of SourceFileMap\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class SourceFileMap {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LanguageServerData\",\n                \"about\": \"Abstract representation of LanguageServerData\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class LanguageServerData {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueMessage\",\n                \"about\": \"Abstract representation of TorqueMessage\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class TorqueMessage {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"KytheConsumer\",\n                \"about\": \"Abstract representation of KytheConsumer\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class KytheConsumer {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}