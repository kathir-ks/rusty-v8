{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/late-escape-analysis.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 38, column 54",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/late-escape-analysis.h\",\n            \"file_name\": \"late-escape-analysis.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the LateEscapeAnalysis class, which performs late-stage escape analysis to eliminate unnecessary object allocations.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes the GraphReducer class, which provides the base class for graph reduction passes in the compiler.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/graph-reducer.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LateEscapeAnalysis\",\n                \"extends\": \"AdvancedReducer\",\n                \"about\": \"Eliminates allocated objects that have no uses besides the stores initializing the object.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"dead_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Represents a dead node in the graph, used for replacing eliminated nodes.\"\n                    },\n                    {\n                        \"name\": \"all_allocations_\",\n                        \"type\": \"ZoneUnorderedSet<Node*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores all allocation nodes being tracked.\"\n                    },\n                    {\n                        \"name\": \"escaping_allocations_\",\n                        \"type\": \"ZoneUnorderedMap<Node*, int>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Maps allocation nodes to the number of witnesses indicating they escape.\"\n                    },\n                    {\n                        \"name\": \"revisit_\",\n                        \"type\": \"NodeDeque\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A deque of nodes to revisit during the analysis.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Editor\",\n                    \"TFGraph\",\n                    \"CommonOperatorBuilder\",\n                    \"Zone\",\n                    \"Node\",\n                    \"ZoneUnorderedSet\",\n                    \"ZoneUnorderedMap\",\n                    \"NodeDeque\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass LateEscapeAnalysis final : public AdvancedReducer {\n public:\n  LateEscapeAnalysis(Editor* editor, TFGraph* graph,\n                     CommonOperatorBuilder* common, Zone* zone);\n\n  const char* reducer_name() const override { return \"LateEscapeAnalysis\"; }\n\n  Reduction Reduce(Node* node) final;\n  void Finalize() override;\n\n private:\n  bool IsEscaping(Node* node);\n  void RemoveAllocation(Node* node);\n  void RecordEscapingAllocation(Node* allocation);\n  void RemoveWitness(Node* allocation);\n  Node* dead() const { return dead_; }\n\n  Node* dead_;\n  ZoneUnorderedSet<Node*> all_allocations_;\n  // Key: Allocation; Value: Number of witnesses for the allocation escaping.\n  ZoneUnorderedMap<Node*, int> escaping_allocations_;\n  NodeDeque revisit_;\n};\n        ]]></code>\n    </class>\n</file>\n```"
}