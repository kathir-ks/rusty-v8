{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/embedder-state.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 124, column 42",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/execution/embedder-state.cc\",\n            \"file_name\": \"embedder-state.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Manages the embedder state associated with a V8 isolate and context.  Allows embedding applications to store custom state.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for EmbedderState functionality, V8 API access, and logging.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/execution/embedder-state.h\"\n\n#include \"src/api/api-inl.h\"\n#include \"src/base/logging.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"EmbedderState\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Represents the state of the embedder associated with a V8 isolate and context.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"isolate_\",\n                        \"type\": \"i::Isolate*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the V8 isolate.\"\n                    },\n                    {\n                        \"name\": \"tag_\",\n                        \"type\": \"EmbedderStateTag\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Tag identifying the type of embedder state.\"\n                    },\n                    {\n                        \"name\": \"previous_embedder_state_\",\n                        \"type\": \"EmbedderState*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the previous embedder state in the stack.\"\n                    },\n                    {\n                        \"name\": \"native_context_address_\",\n                        \"type\": \"Address\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Address of the native context.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"v8::Isolate\",\n                    \"v8::Context\",\n                    \"EmbedderStateTag\",\n                    \"i::Isolate\",\n                    \"v8::Utils\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\n\nnamespace internal {\n\nEmbedderState::EmbedderState(v8::Isolate* isolate, Local<v8::Context> context,\n                             EmbedderStateTag tag)\n    : isolate_(reinterpret_cast<i::Isolate*>(isolate)),\n      tag_(tag),\n      previous_embedder_state_(isolate_->current_embedder_state()) {\n  if (!context.IsEmpty()) {\n    native_context_address_ =\n        v8::Utils::OpenDirectHandle(*context)->native_context().address();\n  }\n\n  DCHECK_NE(this, isolate_->current_embedder_state());\n  isolate_->set_current_embedder_state(this);\n}\n\nEmbedderState::~EmbedderState() {\n  DCHECK_EQ(this, isolate_->current_embedder_state());\n  isolate_->set_current_embedder_state(previous_embedder_state_);\n}\n\nvoid EmbedderState::OnMoveEvent(Address from, Address to) {\n  EmbedderState* state = this;\n  do {\n    if (state->native_context_address_ == from) {\n      native_context_address_ = to;\n    }\n    state = state->previous_embedder_state_;\n  } while (state != nullptr);\n}\n\n}  // namespace internal\n\n}  // namespace v8\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constructor\",\n                \"name\": \"EmbedderState\",\n                \"parent\": \"EmbedderState\",\n                \"about\": \"Constructs an EmbedderState object.\",\n                \"logic\": \"Initializes the EmbedderState with the given isolate, context, and tag. Sets the current embedder state of the isolate to this object. Retrieves the native context address from the V8 context.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"isolate\",\n                        \"type\": \"v8::Isolate*\",\n                        \"purpose\": \"The V8 isolate.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Local<v8::Context>\",\n                        \"purpose\": \"The V8 context.\"\n                    },\n                    {\n                        \"name\": \"tag\",\n                        \"type\": \"EmbedderStateTag\",\n                        \"purpose\": \"The tag for this embedder state.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"i::Isolate\",\n                    \"v8::Utils\",\n                    \"v8::Context\",\n                    \"EmbedderStateTag\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nEmbedderState::EmbedderState(v8::Isolate* isolate, Local<v8::Context> context,\n                             EmbedderStateTag tag)\n    : isolate_(reinterpret_cast<i::Isolate*>(isolate)),\n      tag_(tag),\n      previous_embedder_state_(isolate_->current_embedder_state()) {\n  if (!context.IsEmpty()) {\n    native_context_address_ =\n        v8::Utils::OpenDirectHandle(*context)->native_context().address();\n  }\n\n  DCHECK_NE(this, isolate_->current_embedder_state());\n  isolate_->set_current_embedder_state(this);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"destructor\",\n                \"name\": \"~EmbedderState\",\n                \"parent\": \"EmbedderState\",\n                \"about\": \"Destroys an EmbedderState object.\",\n                \"logic\": \"Restores the previous embedder state of the isolate.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nEmbedderState::~EmbedderState() {\n  DCHECK_EQ(this, isolate_->current_embedder_state());\n  isolate_->set_current_embedder_state(previous_embedder_state_);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"OnMoveEvent\",\n                \"parent\": \"EmbedderState\",\n                \"about\": \"Handles a move event for the native context address.\",\n                \"logic\": \"Iterates through the chain of embedder states and updates the native context address if it matches the 'from' address.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"from\",\n                        \"type\": \"Address\",\n                        \"purpose\": \"The original address of the native context.\"\n                    },\n                    {\n                        \"name\": \"to\",\n                        \"type\": \"Address\",\n                        \"purpose\": \"The new address of the native context.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid EmbedderState::OnMoveEvent(Address from, Address to) {\n  EmbedderState* state = this;\n  do {\n    if (state->native_context_address_ == from) {\n      native_context_address_ = to;\n    }\n    state = state->previous_embedder_state_;\n  } while (state != nullptr);\n}\n        ]]></code>\n    </func>\n</file>\n```"
}