{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-inlining.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 405, column 130",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-inlining.h\",\n            \"file_name\": \"js-inlining.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the JSInliner class, which provides the core graph inlining machinery for JavaScript code in the V8 compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary header files for graph reduction, JS graph representation, and node origin tracking.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/graph-reducer.h\"\n#include \"src/compiler/js-graph.h\"\n#include \"src/compiler/node-origin-table.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary header files for WebAssembly integration, including names provider, string builder and wasm code manager.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\n#include \"src/wasm/names-provider.h\"\n#include \"src/wasm/string-builder.h\"\n#include \"src/wasm/wasm-code-manager.h\"\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSInliner\",\n                \"extends\": \"AdvancedReducer\",\n                \"about\": \"Provides the core graph inlining machinery for JavaScript code.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"local_zone_\",\n                        \"type\": \"Zone*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Memory zone for local allocations.\"\n                    },\n                    {\n                        \"name\": \"info_\",\n                        \"type\": \"OptimizedCompilationInfo*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Compilation info for the optimized code.\"\n                    },\n                    {\n                        \"name\": \"jsgraph_\",\n                        \"type\": \"JSGraph*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The JSGraph representing the JavaScript code.\"\n                    },\n                    {\n                        \"name\": \"broker_\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Broker to access heap objects.\"\n                    },\n                    {\n                        \"name\": \"source_positions_\",\n                        \"type\": \"SourcePositionTable*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Table to track source positions of nodes.\"\n                    },\n                    {\n                        \"name\": \"node_origins_\",\n                        \"type\": \"NodeOriginTable*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Table to track the origins of nodes.\"\n                    },\n                    {\n                        \"name\": \"wasm_module_\",\n                        \"type\": \"const wasm::WasmModule*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The WebAssembly module (if applicable).\"\n                    },\n                    {\n                        \"name\": \"js_wasm_calls_sidetable_\",\n                        \"type\": \"JsWasmCallsSidetable*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Sidetable to keep track of JSWasm calls.\"\n                    },\n                    {\n                        \"name\": \"inline_wasm_fct_if_supported_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Flag to control inlining WebAssembly functions.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"AdvancedReducer\",\n                    \"Editor\",\n                    \"Zone\",\n                    \"OptimizedCompilationInfo\",\n                    \"JSGraph\",\n                    \"JSHeapBroker\",\n                    \"SourcePositionTable\",\n                    \"NodeOriginTable\",\n                    \"wasm::WasmModule\",\n                    \"JsWasmCallsSidetable\",\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass JSInliner final : public AdvancedReducer {\n public:\n  JSInliner(Editor* editor, Zone* local_zone, OptimizedCompilationInfo* info,\n            JSGraph* jsgraph, JSHeapBroker* broker,\n            SourcePositionTable* source_positions,\n            NodeOriginTable* node_origins, const wasm::WasmModule* wasm_module,\n            JsWasmCallsSidetable* js_wasm_calls_sidetable,\n            bool inline_wasm_fct_if_supported)\n      : AdvancedReducer(editor),\n        local_zone_(local_zone),\n        info_(info),\n        jsgraph_(jsgraph),\n        broker_(broker),\n        source_positions_(source_positions),\n        node_origins_(node_origins),\n        wasm_module_(wasm_module),\n        js_wasm_calls_sidetable_(js_wasm_calls_sidetable),\n        inline_wasm_fct_if_supported_(inline_wasm_fct_if_supported) {\n    // In case WebAssembly is disabled.\n    USE(wasm_module_);\n    USE(inline_wasm_fct_if_supported_);\n    USE(js_wasm_calls_sidetable_);\n    DCHECK_IMPLIES(inline_wasm_fct_if_supported_, wasm_module_ != nullptr);\n  }\n\n  const char* reducer_name() const override { return \"JSInliner\"; }\n\n  Reduction Reduce(Node* node) final { UNREACHABLE(); }\n\n  // Can be used by inlining heuristics or by testing code directly, without\n  // using the above generic reducer interface of the inlining machinery.\n  Reduction ReduceJSCall(Node* node);\n\n#if V8_ENABLE_WEBASSEMBLY\n  Reduction ReduceJSWasmCall(Node* node);\n  void InlineWasmFunction(Node* call, Node* inlinee_start, Node* inlinee_end,\n                          Node* frame_state,\n                          SharedFunctionInfoRef shared_fct_info,\n                          int argument_count, Node* context);\n  static std::string WasmFunctionNameForTrace(wasm::NativeModule* native_module,\n                                              int fct_index) {\n    wasm::StringBuilder builder;\n    native_module->GetNamesProvider()->PrintFunctionName(builder, fct_index);\n    if (builder.length() == 0) return \"<no name>\";\n    return {builder.start(), builder.length()};\n  }\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n private:\n  Zone* zone() const { return local_zone_; }\n  CommonOperatorBuilder* common() const;\n  JSOperatorBuilder* javascript() const;\n  SimplifiedOperatorBuilder* simplified() const;\n  TFGraph* graph() const;\n  JSGraph* jsgraph() const { return jsgraph_; }\n  // TODO(neis): Make heap broker a component of JSGraph?\n  JSHeapBroker* broker() const { return broker_; }\n  Isolate* isolate() const { return jsgraph_->isolate(); }\n\n  Zone* const local_zone_;\n  OptimizedCompilationInfo* info_;\n  JSGraph* const jsgraph_;\n  JSHeapBroker* const broker_;\n  SourcePositionTable* const source_positions_;\n  NodeOriginTable* const node_origins_;\n  const wasm::WasmModule* wasm_module_;\n  JsWasmCallsSidetable* js_wasm_calls_sidetable_;\n\n  // Inline not only the wasm wrapper but also the wasm function itself if\n  // inlining into JavaScript is supported and the function is small enough.\n  bool inline_wasm_fct_if_supported_;\n\n  OptionalSharedFunctionInfoRef DetermineCallTarget(Node* node);\n  FeedbackCellRef DetermineCallContext(Node* node, Node** context_out);\n\n  // TODO(victorgomes): This function is used to create 3 *quite* different\n  // artificial frame states, we should perhaps split it into three different\n  // functions.\n  FrameState CreateArtificialFrameState(\n      Node* node, FrameState outer_frame_state, int parameter_count,\n      FrameStateType frame_state_type, SharedFunctionInfoRef shared,\n      OptionalBytecodeArrayRef maybe_bytecode_array, Node* context = nullptr,\n      Node* callee = nullptr);\n\n  Reduction InlineCall(Node* call, Node* new_target, Node* context,\n                       Node* frame_state, StartNode start, Node* end,\n                       Node* exception_target,\n                       const NodeVector& uncaught_subcalls, int argument_count);\n\n#if V8_ENABLE_WEBASSEMBLY\n  struct WasmInlineResult {\n    bool can_inline_body = false;\n    Node* body_start = nullptr;\n    Node* body_end = nullptr;\n  };\n  WasmInlineResult TryWasmInlining(const JSWasmCallNode& call_node);\n  Reduction InlineJSWasmCall(Node* call, Node* new_target, Node* context,\n                             Node* frame_state, StartNode start, Node* end,\n                             Node* exception_target,\n                             const NodeVector& uncaught_subcalls);\n#endif  // V8_ENABLE_WEBASSEMBLY\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"reducer_name\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the name of the reducer.\",\n                \"logic\": \"Overrides the base class method to return \\\"JSInliner\\\".\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const char*\",\n                    \"description\": \"The name of the reducer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  const char* reducer_name() const override { return \"JSInliner\"; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Reduce\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Reduces a node in the graph (not implemented in this class directly).\",\n                \"logic\": \"This method is intended to be overridden by subclasses, but it's marked as final here and throws an error if called.  The actual reduction is done by ReduceJSCall or ReduceJSWasmCall.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The node to reduce.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Reduction\",\n                    \"description\": \"The result of the reduction (UNREACHABLE).\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"Reduction\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Reduction Reduce(Node* node) final { UNREACHABLE(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ReduceJSCall\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Reduces a JavaScript call node.\",\n                \"logic\": \"Handles inlining of standard JavaScript calls.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The JavaScript call node.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Reduction\",\n                    \"description\": \"The result of the reduction.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"Reduction\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Reduction ReduceJSCall(Node* node);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ReduceJSWasmCall\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Reduces a JavaScript to WebAssembly call node.\",\n                \"logic\": \"Handles inlining of calls from JavaScript to WebAssembly.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The JavaScript to WebAssembly call node.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Reduction\",\n                    \"description\": \"The result of the reduction.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"Reduction\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\n  Reduction ReduceJSWasmCall(Node* node);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"InlineWasmFunction\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Inlines a WebAssembly function into the JavaScript code.\",\n                \"logic\": \"Performs the actual inlining of WebAssembly functions, handling frame state, shared function info, argument count and context.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"call\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The call node.\"\n                    },\n                    {\n                        \"name\": \"inlinee_start\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The start node of the inlinee function.\"\n                    },\n                    {\n                        \"name\": \"inlinee_end\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The end node of the inlinee function.\"\n                    },\n                    {\n                        \"name\": \"frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The frame state node.\"\n                    },\n                    {\n                        \"name\": \"shared_fct_info\",\n                        \"type\": \"SharedFunctionInfoRef\",\n                        \"purpose\": \"Shared function info of the inlinee function.\"\n                    },\n                    {\n                        \"name\": \"argument_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The argument count of the call.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"SharedFunctionInfoRef\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  void InlineWasmFunction(Node* call, Node* inlinee_start, Node* inlinee_end,\n                          Node* frame_state,\n                          SharedFunctionInfoRef shared_fct_info,\n                          int argument_count, Node* context);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"WasmFunctionNameForTrace\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Retrieves the name of a WebAssembly function for tracing purposes.\",\n                \"logic\": \"Uses the WebAssembly names provider to print the function name into a string builder. Returns \\\"<no name>\\\" if the name is not found.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"native_module\",\n                        \"type\": \"wasm::NativeModule*\",\n                        \"purpose\": \"The WebAssembly native module.\"\n                    },\n                    {\n                        \"name\": \"fct_index\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The index of the function.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::string\",\n                    \"description\": \"The name of the WebAssembly function.\"\n                },\n                \"dependencies\": [\n                    \"wasm::NativeModule\",\n                    \"wasm::StringBuilder\",\n                    \"wasm::NamesProvider\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static std::string WasmFunctionNameForTrace(wasm::NativeModule* native_module,\n                                              int fct_index) {\n    wasm::StringBuilder builder;\n    native_module->GetNamesProvider()->PrintFunctionName(builder, fct_index);\n    if (builder.length() == 0) return \"<no name>\";\n    return {builder.start(), builder.length()};\n  }\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"common\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the CommonOperatorBuilder.\",\n                \"logic\": \"Provides access to the CommonOperatorBuilder associated with the graph.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"CommonOperatorBuilder*\",\n                    \"description\": \"The CommonOperatorBuilder.\"\n                },\n                \"dependencies\": [\n                    \"CommonOperatorBuilder\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  CommonOperatorBuilder* common() const;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"javascript\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the JSOperatorBuilder.\",\n                \"logic\": \"Provides access to the JSOperatorBuilder associated with the graph.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"JSOperatorBuilder*\",\n                    \"description\": \"The JSOperatorBuilder.\"\n                },\n                \"dependencies\": [\n                    \"JSOperatorBuilder\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  JSOperatorBuilder* javascript() const;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"simplified\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the SimplifiedOperatorBuilder.\",\n                \"logic\": \"Provides access to the SimplifiedOperatorBuilder associated with the graph.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"SimplifiedOperatorBuilder*\",\n                    \"description\": \"The SimplifiedOperatorBuilder.\"\n                },\n                \"dependencies\": [\n                    \"SimplifiedOperatorBuilder\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  SimplifiedOperatorBuilder* simplified() const;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"graph\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the TFGraph.\",\n                \"logic\": \"Provides access to the TFGraph.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"TFGraph*\",\n                    \"description\": \"The TFGraph.\"\n                },\n                \"dependencies\": [\n                    \"TFGraph\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  TFGraph* graph() const;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"jsgraph\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the JSGraph.\",\n                \"logic\": \"Provides access to the JSGraph.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"JSGraph*\",\n                    \"description\": \"The JSGraph.\"\n                },\n                \"dependencies\": [\n                    \"JSGraph\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  JSGraph* jsgraph() const { return jsgraph_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"broker\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the JSHeapBroker.\",\n                \"logic\": \"Provides access to the JSHeapBroker.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"JSHeapBroker*\",\n                    \"description\": \"The JSHeapBroker.\"\n                },\n                \"dependencies\": [\n                    \"JSHeapBroker\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  JSHeapBroker* broker() const { return broker_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"isolate\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Returns the Isolate.\",\n                \"logic\": \"Provides access to the Isolate.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Isolate*\",\n                    \"description\": \"The Isolate.\"\n                },\n                \"dependencies\": [\n                    \"Isolate\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Isolate* isolate() const { return jsgraph_->isolate(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"DetermineCallTarget\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Determines the call target of a given call node.\",\n                \"logic\": \"Analyzes the call node to determine the SharedFunctionInfoRef representing the function being called.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The call node.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"OptionalSharedFunctionInfoRef\",\n                    \"description\": \"The SharedFunctionInfoRef of the call target.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"OptionalSharedFunctionInfoRef\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  OptionalSharedFunctionInfoRef DetermineCallTarget(Node* node);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"DetermineCallContext\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Determines the call context of a given call node.\",\n                \"logic\": \"Analyzes the call node to determine the FeedbackCellRef representing the context of the call.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The call node.\"\n                    },\n                                        {\n                        \"name\": \"context_out\",\n                        \"type\": \"Node**\",\n                        \"purpose\": \"Output parameter for the context node.\"\n                    }\n\n                ],\n                \"return\": {\n                    \"type\": \"FeedbackCellRef\",\n                    \"description\": \"The FeedbackCellRef of the call context.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"FeedbackCellRef\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  FeedbackCellRef DetermineCallContext(Node* node, Node** context_out);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CreateArtificialFrameState\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Creates an artificial frame state node.\",\n                \"logic\": \"Creates a FrameState node for inlining, with specified parameters like parameter count, frame state type, shared function info, bytecode array and context. The method name suggests it may be doing more than one specific thing.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The node for which the frame state is created.\"\n                    },\n                    {\n                        \"name\": \"outer_frame_state\",\n                        \"type\": \"FrameState\",\n                        \"purpose\": \"The outer frame state.\"\n                    },\n                    {\n                        \"name\": \"parameter_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of parameters.\"\n                    },\n                    {\n                        \"name\": \"frame_state_type\",\n                        \"type\": \"FrameStateType\",\n                        \"purpose\": \"The type of the frame state.\"\n                    },\n                    {\n                        \"name\": \"shared\",\n                        \"type\": \"SharedFunctionInfoRef\",\n                        \"purpose\": \"The shared function info.\"\n                    },\n                    {\n                        \"name\": \"maybe_bytecode_array\",\n                        \"type\": \"OptionalBytecodeArrayRef\",\n                        \"purpose\": \"The optional bytecode array.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node (optional).\"\n                    },\n                    {\n                        \"name\": \"callee\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The callee node (optional).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FrameState\",\n                    \"description\": \"The created frame state.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"FrameState\",\n                    \"FrameStateType\",\n                    \"SharedFunctionInfoRef\",\n                    \"OptionalBytecodeArrayRef\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  FrameState CreateArtificialFrameState(\n      Node* node, FrameState outer_frame_state, int parameter_count,\n      FrameStateType frame_state_type, SharedFunctionInfoRef shared,\n      OptionalBytecodeArrayRef maybe_bytecode_array, Node* context = nullptr,\n      Node* callee = nullptr);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"InlineCall\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Inlines a JavaScript call.\",\n                \"logic\": \"Performs the actual inlining of a JavaScript call, handling new target, context, frame state, start/end nodes, exception target, uncaught subcalls and argument count.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"call\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The call node.\"\n                    },\n                    {\n                        \"name\": \"new_target\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The new target node.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    },\n                    {\n                        \"name\": \"frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The frame state node.\"\n                    },\n                    {\n                        \"name\": \"start\",\n                        \"type\": \"StartNode\",\n                        \"purpose\": \"The start node.\"\n                    },\n                    {\n                        \"name\": \"end\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The end node.\"\n                    },\n                    {\n                        \"name\": \"exception_target\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The exception target node.\"\n                    },\n                    {\n                        \"name\": \"uncaught_subcalls\",\n                        \"type\": \"NodeVector&\",\n                        \"purpose\": \"The vector of uncaught subcalls.\"\n                    },\n                    {\n                        \"name\": \"argument_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The argument count.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Reduction\",\n                    \"description\": \"The result of the reduction.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"StartNode\",\n                    \"Reduction\",\n                    \"NodeVector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Reduction InlineCall(Node* call, Node* new_target, Node* context,\n                       Node* frame_state, StartNode start, Node* end,\n                       Node* exception_target,\n                       const NodeVector& uncaught_subcalls, int argument_count);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmInlineResult\",\n                \"about\": \"Represents the result of WebAssembly inlining attempt.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"can_inline_body\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates whether the WebAssembly function body can be inlined.\"\n                    },\n                    {\n                        \"name\": \"body_start\",\n                        \"type\": \"Node*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The start node of the WebAssembly function body.\"\n                    },\n                    {\n                        \"name\": \"body_end\",\n                        \"type\": \"Node*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The end node of the WebAssembly function body.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\n  struct WasmInlineResult {\n    bool can_inline_body = false;\n    Node* body_start = nullptr;\n    Node* body_end = nullptr;\n  };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TryWasmInlining\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Attempts to inline a WebAssembly function.\",\n                \"logic\": \"Tries to inline a WebAssembly function body, returning the start and end nodes of the body if successful.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"call_node\",\n                        \"type\": \"const JSWasmCallNode&\",\n                        \"purpose\": \"The JSWasmCallNode representing the WebAssembly call.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"WasmInlineResult\",\n                    \"description\": \"The result of the WebAssembly inlining attempt.\"\n                },\n                \"dependencies\": [\n                    \"JSWasmCallNode\",\n                    \"WasmInlineResult\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  WasmInlineResult TryWasmInlining(const JSWasmCallNode& call_node);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"InlineJSWasmCall\",\n                \"parent\": \"JSInliner\",\n                \"about\": \"Inlines a JavaScript to WebAssembly call.\",\n                \"logic\": \"Performs the actual inlining of a call from JavaScript to WebAssembly, handling new target, context, frame state, start/end nodes, exception target and uncaught subcalls.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"call\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The call node.\"\n                    },\n                    {\n                        \"name\": \"new_target\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The new target node.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    },\n                    {\n                        \"name\": \"frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The frame state node.\"\n                    },\n                    {\n                        \"name\": \"start\",\n                        \"type\": \"StartNode\",\n                        \"purpose\": \"The start node.\"\n                    },\n                    {\n                        \"name\": \"end\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The end node.\"\n                    },\n                    {\n                        \"name\": \"exception_target\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The exception target node.\"\n                    },\n                    {\n                        \"name\": \"uncaught_subcalls\",\n                        \"type\": \"const NodeVector&\",\n                        \"purpose\": \"The vector of uncaught subcalls.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Reduction\",\n                    \"description\": \"The result of the reduction.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"StartNode\",\n                    \"Reduction\",\n                    \"NodeVector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Reduction InlineJSWasmCall(Node* call, Node* new_target, Node* context,\n                             Node* frame_state, StartNode start, Node* end,\n                             Node* exception_target,\n                             const NodeVector& uncaught_subcalls);\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n</file>\n```"
}