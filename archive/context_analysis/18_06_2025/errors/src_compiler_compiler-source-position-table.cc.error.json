{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/compiler-source-position-table.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 140, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/compiler-source-position-table.cc\",\n        \"file_name\": \"compiler-source-position-table.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Implements a table to store source positions for nodes in the compiler graph, used for debugging and error reporting.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for source position management and graph manipulation.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/compiler-source-position-table.h\"\n\n#include \"src/compiler/node-aux-data.h\"\n#include \"src/compiler/turbofan-graph.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourcePositionTable::Decorator\",\n            \"extends\": \"GraphDecorator\",\n            \"about\": \"A decorator class that attaches source position information to each node in the graph as it's being built.\",\n            \"attributes\": [\n                {\n                    \"name\": \"source_positions_\",\n                    \"type\": \"SourcePositionTable*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the SourcePositionTable to which this decorator belongs.\"\n                }\n            ],\n            \"dependencies\": [\n                \"SourcePositionTable\",\n                \"GraphDecorator\",\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass SourcePositionTable::Decorator final : public GraphDecorator {\n public:\n  explicit Decorator(SourcePositionTable* source_positions)\n      : source_positions_(source_positions) {}\n\n  void Decorate(Node* node) final {\n    source_positions_->SetSourcePosition(node,\n                                         source_positions_->current_position_);\n  }\n\n private:\n  SourcePositionTable* source_positions_;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"SourcePositionTable::Decorator::Decorate\",\n            \"parent\": \"SourcePositionTable::Decorator\",\n            \"about\": \"Overrides the Decorate method from GraphDecorator to set the source position for a given node.\",\n            \"logic\": \"Sets the source position of the node to the current position stored in the SourcePositionTable.\",\n            \"parameters\": [\n                {\n                    \"name\": \"node\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The node to decorate with source position information.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"SourcePositionTable\",\n                \"Node\",\n                \"SourcePositionTable::SetSourcePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  void Decorate(Node* node) final {\n    source_positions_->SetSourcePosition(node,\n                                         source_positions_->current_position_);\n  }\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourcePositionTable\",\n            \"about\": \"Manages a table that maps compiler graph nodes to their corresponding source positions in the original source code.\",\n            \"attributes\": [\n                {\n                    \"name\": \"graph_\",\n                    \"type\": \"TFGraph*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the Turbofan graph.\"\n                },\n                {\n                    \"name\": \"decorator_\",\n                    \"type\": \"Decorator*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the decorator used to add source position information during graph construction.\"\n                },\n                {\n                    \"name\": \"current_position_\",\n                    \"type\": \"SourcePosition\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The current source position being tracked.\"\n                },\n                {\n                    \"name\": \"table_\",\n                    \"type\": \"NodeAuxData<SourcePosition>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The table that stores the mapping between nodes and source positions.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TFGraph\",\n                \"Decorator\",\n                \"SourcePosition\",\n                \"NodeAuxData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass SourcePositionTable {\n public:\n  explicit SourcePositionTable(TFGraph* graph);\n\n  void AddDecorator();\n  void RemoveDecorator();\n\n  SourcePosition GetSourcePosition(Node* node) const;\n  SourcePosition GetSourcePosition(NodeId id) const;\n  void SetSourcePosition(Node* node, SourcePosition position);\n\n  void PrintJson(std::ostream& os) const;\n\n  bool IsEnabled() const { return enabled_; }\n  void Enable() { enabled_ = true; }\n  void Disable() { enabled_ = false; }\n\n  SourcePosition current_position() const { return current_position_; }\n  void set_current_position(SourcePosition current_position) {\n    current_position_ = current_position;\n  }\n\n private:\n  class Decorator final;\n\n  TFGraph* graph_;\n  Decorator* decorator_;\n  SourcePosition current_position_;\n  NodeAuxData<SourcePosition> table_;\n  bool enabled_ = false;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"SourcePositionTable::SourcePositionTable\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Constructor for the SourcePositionTable class.\",\n            \"logic\": \"Initializes the member variables, including the auxiliary data structure to store the node-to-source-position mapping.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"TFGraph*\",\n                    \"purpose\": \"The Turbofan graph to associate with this source position table.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"TFGraph\",\n                \"SourcePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nSourcePositionTable::SourcePositionTable(TFGraph* graph)\n    : graph_(graph),\n      decorator_(nullptr),\n      current_position_(SourcePosition::Unknown()),\n      table_(graph->zone()) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::AddDecorator\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Adds the decorator to the graph to start tracking source positions.\",\n            \"logic\": \"Creates a new Decorator object and adds it to the graph.  This activates the tracking of source positions during graph construction.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"Decorator\",\n                \"TFGraph\",\n                \"TFGraph::AddDecorator\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SourcePositionTable::AddDecorator() {\n  DCHECK_NULL(decorator_);\n  if (!enabled_) return;\n  decorator_ = graph_->zone()->New<Decorator>(this);\n  graph_->AddDecorator(decorator_);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::RemoveDecorator\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Removes the decorator from the graph to stop tracking source positions.\",\n            \"logic\": \"Removes the Decorator object from the graph, effectively stopping the tracking of source positions during graph construction.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"Decorator\",\n                \"TFGraph\",\n                \"TFGraph::RemoveDecorator\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SourcePositionTable::RemoveDecorator() {\n  if (!enabled_) {\n    DCHECK_NULL(decorator_);\n    return;\n  }\n  DCHECK_NOT_NULL(decorator_);\n  graph_->RemoveDecorator(decorator_);\n  decorator_ = nullptr;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::GetSourcePosition\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Retrieves the source position associated with a given node.\",\n            \"logic\": \"Looks up the node in the internal table and returns the corresponding SourcePosition.\",\n            \"parameters\": [\n                {\n                    \"name\": \"node\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The node whose source position is to be retrieved.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"SourcePosition\",\n                \"description\": \"The source position associated with the node.\"\n            },\n            \"dependencies\": [\n                \"Node\",\n                \"SourcePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nSourcePosition SourcePositionTable::GetSourcePosition(Node* node) const {\n  return table_.Get(node);\n}\n        ]]></code>\n    </func>\n    \n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::GetSourcePosition\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Retrieves the source position associated with a given NodeId.\",\n            \"logic\": \"Looks up the NodeId in the internal table and returns the corresponding SourcePosition.\",\n            \"parameters\": [\n                {\n                    \"name\": \"id\",\n                    \"type\": \"NodeId\",\n                    \"purpose\": \"The NodeId whose source position is to be retrieved.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"SourcePosition\",\n                \"description\": \"The source position associated with the NodeId.\"\n            },\n            \"dependencies\": [\n                \"NodeId\",\n                \"SourcePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nSourcePosition SourcePositionTable::GetSourcePosition(NodeId id) const {\n  return table_.Get(id);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::SetSourcePosition\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Sets the source position for a given node.\",\n            \"logic\": \"Stores the provided SourcePosition in the internal table, mapping it to the given Node.\",\n            \"parameters\": [\n                {\n                    \"name\": \"node\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The node whose source position is to be set.\"\n                },\n                {\n                    \"name\": \"position\",\n                    \"type\": \"SourcePosition\",\n                    \"purpose\": \"The source position to associate with the node.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"Node\",\n                \"SourcePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SourcePositionTable::SetSourcePosition(Node* node,\n                                            SourcePosition position) {\n  DCHECK(IsEnabled());\n  table_.Set(node, position);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::PrintJson\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Prints the contents of the source position table to an output stream in JSON format.\",\n            \"logic\": \"Iterates through the table, printing each node-source position mapping as a JSON object.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream to which the JSON representation is written.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"SourcePosition\",\n                \"SourcePosition::PrintJson\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SourcePositionTable::PrintJson(std::ostream& os) const {\n  os << \"{\";\n  bool needs_comma = false;\n  for (auto i : table_) {\n    SourcePosition pos = i.second;\n    if (pos.IsKnown()) {\n      if (needs_comma) {\n        os << \",\";\n      }\n      os << \"\\\"\" << i.first << \"\\\" : \";\n      pos.PrintJson(os);\n      needs_comma = true;\n    }\n  }\n  os << \"}\";\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::IsEnabled\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Returns a boolean indicating whether the source position table is enabled.\",\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if source position tracking is enabled, false otherwise.\"\n            }\n        }\n        </metadata>\n        <code><![CDATA[\n  bool IsEnabled() const { return enabled_; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::Enable\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Enables the source position table.\",\n            \"logic\": \"Sets the 'enabled_' flag to true.\",\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            }\n        }\n        </metadata>\n        <code><![CDATA[\n  void Enable() { enabled_ = true; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::Disable\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Disables the source position table.\",\n            \"logic\": \"Sets the 'enabled_' flag to false.\",\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            }\n        }\n        </metadata>\n        <code><![CDATA[\n  void Disable() { enabled_ = false; }\n        ]]></code>\n    </func>\n    \n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::current_position\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Returns the current source position being tracked.\",\n            \"return\": {\n                \"type\": \"SourcePosition\",\n                \"description\": \"The current source position.\"\n            }\n        }\n        </metadata>\n        <code><![CDATA[\n  SourcePosition current_position() const { return current_position_; }\n        ]]></code>\n    </func>\n    \n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"SourcePositionTable::set_current_position\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"Sets the current source position being tracked.\",\n            \"parameters\": [\n                {\n                    \"name\": \"current_position\",\n                    \"type\": \"SourcePosition\",\n                    \"purpose\": \"The new current source position.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            }\n        }\n        </metadata>\n        <code><![CDATA[\n  void set_current_position(SourcePosition current_position) {\n    current_position_ = current_position;\n  }\n        ]]></code>\n    </func>\n</file>\n```"
}