{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/reducer-traits.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 93, column 79",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/reducer-traits.h\",\n            \"file_name\": \"reducer-traits.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines template metaprogramming utilities and traits for working with reducer lists in the Turboshaft compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers for limits, type traits, and custom headers for template meta-programming.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <limits>\n            #include <type_traits>\n\n            #include \"src/base/template-meta-programming/common.h\"\n            #include \"src/base/template-meta-programming/list.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"GenericReducerBase\",\n                \"about\": \"Forward declaration for GenericReducerBase.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename Next>\n            class GenericReducerBase;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"EmitProjectionReducer\",\n                \"about\": \"Forward declaration for EmitProjectionReducer.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename Next>\n            class EmitProjectionReducer;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TSReducerBase\",\n                \"about\": \"Forward declaration for TSReducerBase.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename Next>\n            class TSReducerBase;\n        ]]></code>\n    </class>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list\",\n                \"about\": \"Defines a type alias for a list of reducer templates using base::tmp::list1.\",\n                \"dependencies\": [\n                    \"base::tmp::list1\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <template <typename> typename... Ts>\n            using reducer_list = base::tmp::list1<Ts...>;\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list_length\",\n                \"about\": \"Defines a struct to get the length of a reducer_list<> using base::tmp::length1.\",\n                \"dependencies\": [\n                    \"base::tmp::length1\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename RL>\n            struct reducer_list_length : base::tmp::length1<RL> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list_contains\",\n                \"about\": \"Defines a struct to check if a reducer_list<> contains a specific reducer using base::tmp::contains1.\",\n                \"dependencies\": [\n                    \"base::tmp::contains1\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename RL, template <typename> typename R>\n            struct reducer_list_contains : base::tmp::contains1<RL, R> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list_starts_with\",\n                \"about\": \"Defines a struct to check if a reducer_list<> starts with a specific reducer. Uses base::tmp::index_of1 to determine this.\",\n                \"dependencies\": [\n                    \"base::tmp::index_of1\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename RL, template <typename> typename R>\n            struct reducer_list_starts_with {\n              static constexpr bool value = base::tmp::index_of1<RL, R>::value == 0;\n            };\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list_index_of\",\n                \"about\": \"Defines a struct to get the index of a reducer in a reducer_list<>. Uses base::tmp::index_of1.\",\n                \"dependencies\": [\n                    \"base::tmp::index_of1\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename RL, template <typename> typename R,\n                      size_t Otherwise = std::numeric_limits<size_t>::max()>\n            struct reducer_list_index_of : public base::tmp::index_of1<RL, R, Otherwise> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list_insert_at\",\n                \"about\": \"Defines a struct to insert a reducer into a reducer_list<> at a specific index. Uses base::tmp::insert_at1.\",\n                \"dependencies\": [\n                    \"base::tmp::insert_at1\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename RL, size_t I, template <typename> typename R>\n            struct reducer_list_insert_at : base::tmp::insert_at1<RL, I, R> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"reducer_list_to_stack\",\n                \"about\": \"Transforms a reducer_list<> into an instantiated class stack using base::tmp::fold_right1.\",\n                \"dependencies\": [\n                    \"base::tmp::fold_right1\",\n                    \"base::tmp::instantiate\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename RL, typename Bottom>\n            struct reducer_list_to_stack\n                : base::tmp::fold_right1<base::tmp::instantiate, RL, Bottom> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"next_reducer_is\",\n                \"about\": \"Checks if the next reducer in the stack is one of the specified reducers.\",\n                \"dependencies\": [\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename Next, template <typename> typename... Reducer>\n            struct next_reducer_is {\n              static constexpr bool value =\n                  (base::tmp::is_instantiation_of<Next, Reducer>::value || ...);\n            };\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"next_contains_reducer\",\n                \"about\": \"Checks if the next reducer stack contains a specific reducer.\",\n                \"dependencies\": [\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename Next, template <typename> typename Reducer>\n            struct next_contains_reducer : public std::bool_constant<false> {};\n\n            template <template <typename> typename R, typename T,\n                      template <typename> typename Reducer>\n            struct next_contains_reducer<R<T>, Reducer> {\n              static constexpr bool value = base::tmp::equals1<R, Reducer>::value ||\n                                            next_contains_reducer<T, Reducer>::value;\n            };\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"next_is_bottom_of_assembler_stack\",\n                \"about\": \"Checks if the next reducer is at the bottom of the assembler stack (GenericReducerBase, EmitProjectionReducer, or TSReducerBase).\",\n                \"dependencies\": [\n                    \"GenericReducerBase\",\n                    \"EmitProjectionReducer\",\n                    \"TSReducerBase\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <typename Next>\n            struct next_is_bottom_of_assembler_stack\n                : public next_reducer_is<Next, GenericReducerBase, EmitProjectionReducer,\n                                         TSReducerBase> {};\n        ]]></code>\n    </template>\n</file>\n```"
}