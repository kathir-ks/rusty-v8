{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/bigint/div-helpers.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 160, column 52",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/bigint/div-helpers.h\",\n        \"file_name\": \"div-helpers.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides helper functions for BigInt division algorithms.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library and V8 BigInt related headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <memory>\n\n            #include \"src/bigint/bigint.h\"\n            #include \"src/bigint/util.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"LeftShift\",\n            \"about\": \"Shifts a digit array to the left by a specified number of bits.\",\n            \"logic\": \"Performs left bit shift operation on the digits.\",\n            \"parameters\": [\n                {\n                    \"name\": \"Z\",\n                    \"type\": \"RWDigits\",\n                    \"purpose\": \"The destination digit array (Read-Write).\"\n                },\n                {\n                    \"name\": \"X\",\n                    \"type\": \"Digits\",\n                    \"purpose\": \"The source digit array (Read-Only).\"\n                },\n                {\n                    \"name\": \"shift\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of bits to shift.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value. The result is written to Z.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            void LeftShift(RWDigits Z, Digits X, int shift);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"RightShift\",\n            \"about\": \"Shifts a digit array to the right by a specified number of bits.\",\n            \"logic\": \"Performs right bit shift operation on the digits.\",\n            \"parameters\": [\n                {\n                    \"name\": \"Z\",\n                    \"type\": \"RWDigits\",\n                    \"purpose\": \"The destination digit array (Read-Write).\"\n                },\n                {\n                    \"name\": \"X\",\n                    \"type\": \"Digits\",\n                    \"purpose\": \"The source digit array (Read-Only).\"\n                },\n                {\n                    \"name\": \"shift\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of bits to shift.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value. The result is written to Z.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            void RightShift(RWDigits Z, Digits X, int shift);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PutAt\",\n            \"about\": \"Copies digits from one array to another, padding with zeros if necessary.\",\n            \"logic\": \"Copies `count` digits from `A` to `Z`.  If `A` has fewer than `count` digits, the remaining digits in `Z` are set to 0.\",\n            \"parameters\": [\n                {\n                    \"name\": \"Z\",\n                    \"type\": \"RWDigits\",\n                    \"purpose\": \"The destination digit array (Read-Write).\"\n                },\n                {\n                    \"name\": \"A\",\n                    \"type\": \"Digits\",\n                    \"purpose\": \"The source digit array (Read-Only).\"\n                },\n                {\n                    \"name\": \"count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of digits to copy.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value. The result is written to Z.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            inline void PutAt(RWDigits Z, Digits A, int count) {\n            int len = std::min(A.len(), count);\n            int i = 0;\n            for (; i < len; i++) Z[i] = A[i];\n            for (; i < count; i++) Z[i] = 0;\n            }\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ShiftedDigits\",\n            \"extends\": \"Digits\",\n            \"about\": \"Represents a shifted version of a digit array.  Handles allocation and shifting.\",\n            \"attributes\": [\n                {\n                    \"name\": \"shift_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The number of bits the digits are shifted.\"\n                },\n                {\n                    \"name\": \"inplace_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether the shifting is done in-place.\"\n                },\n                {\n                    \"name\": \"storage_\",\n                    \"type\": \"std::unique_ptr<digit_t[]>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Dynamically allocated storage for the shifted digits (if not inplace).\"\n                }\n            ],\n            \"dependencies\": [\n                \"Digits\",\n                \"LeftShift\",\n                \"RightShift\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class ShiftedDigits : public Digits {\n            public:\n            explicit ShiftedDigits(Digits& original, int shift = -1,\n                                   bool allow_inplace = false)\n                : Digits(original.digits_, original.len_) {\n              int leading_zeros = CountLeadingZeros(original.msd());\n              if (shift < 0) {\n                shift = leading_zeros;\n              } else if (shift > leading_zeros) {\n                allow_inplace = false;\n                len_++;\n              }\n              shift_ = shift;\n              if (shift == 0) {\n                inplace_ = true;\n                return;\n              }\n              inplace_ = allow_inplace;\n              if (!inplace_) {\n                digit_t* digits = new digit_t[len_];\n                storage_.reset(digits);\n                digits_ = digits;\n              }\n              RWDigits rw_view(digits_, len_);\n              LeftShift(rw_view, original, shift_);\n            }\n            ~ShiftedDigits() = default;\n\n            void Reset() {\n              if (inplace_) {\n                RWDigits rw_view(digits_, len_);\n                RightShift(rw_view, rw_view, shift_);\n              }\n            }\n\n            int shift() { return shift_; }\n\n            private:\n            int shift_;\n            bool inplace_;\n            std::unique_ptr<digit_t[]> storage_;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Digits\",\n                \"about\": \"Represents an array of digits for BigInt calculations.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Digits {\n                public:\n                    digit_t msd() const;\n                    int len() const;\n                private:\n                    digit_t* digits_;\n                    int len_;\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RWDigits\",\n                \"about\": \"Represents a read-write view of a digit array.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class RWDigits {\n                public:\n                    RWDigits(digit_t* digits, int len);\n                    digit_t& operator[](int index);\n                };\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CountLeadingZeros\",\n                \"about\": \"Counts the number of leading zero bits in a digit.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                int CountLeadingZeros(digit_t digit);\n            ]]></code>\n        </func>\n    </dependencies>\n</file>\n```"
}