{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message-handler.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 120, column 39",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message-handler.h\",\n        \"file_name\": \"message-handler.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares functions and types for handling messages related to the Torque language server (LS).\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for macros, JSON handling, source position management, and Torque compilation.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/macros.h\"\n#include \"src/torque/ls/json.h\"\n#include \"src/torque/source-positions.h\"\n#include \"src/torque/torque-compiler.h\"\n        ]]></code>\n    </imports>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"V8_TORQUE_LS_MESSAGE_HANDLER_H_\",\n            \"purpose\": \"Include guard to prevent multiple inclusions of the header file.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#ifndef V8_TORQUE_LS_MESSAGE_HANDLER_H_\n#define V8_TORQUE_LS_MESSAGE_HANDLER_H_\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"DECLARE_CONTEXTUAL_VARIABLE\",\n            \"purpose\": \"Declaration of a contextual variable\"\n        }\n        </metadata>\n        <code><![CDATA[\nDECLARE_CONTEXTUAL_VARIABLE(DiagnosticsFiles, std::vector<SourceId>);\n        ]]></code>\n    </macro>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"v8\",\n            \"purpose\": \"Root namespace for the V8 JavaScript engine.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"internal\",\n            \"parent\": \"v8\",\n            \"purpose\": \"Namespace for internal V8 implementation details.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace internal {\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"torque\",\n            \"parent\": \"internal\",\n            \"purpose\": \"Namespace for Torque-related code within V8.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace torque {\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"ls\",\n            \"parent\": \"torque\",\n            \"purpose\": \"Namespace for language server related code in Torque.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace ls {\n\n// The message handler might send responses or follow up requests.\n// To allow unit testing, the \"sending\" function is configurable.\nusing MessageWriter = std::function<void(JsonValue)>;\n\nV8_EXPORT_PRIVATE void HandleMessage(JsonValue raw_message, MessageWriter);\n\n// Called when a compilation run finishes. Exposed for testability.\nV8_EXPORT_PRIVATE void CompilationFinished(TorqueCompilerResult result,\n                                           MessageWriter);\n\n}  // namespace ls\n        ]]></code>\n    </namespace>\n    <typedef>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"MessageWriter\",\n            \"parent\": \"ls\",\n            \"type\": \"std::function<void(JsonValue)>\",\n            \"purpose\": \"Defines a type alias for a function that takes a JsonValue and returns void. Used for sending messages.\"\n        }\n        </metadata>\n        <code><![CDATA[\nusing MessageWriter = std::function<void(JsonValue)>;\n        ]]></code>\n    </typedef>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"HandleMessage\",\n            \"parent\": \"ls\",\n            \"about\": \"Handles a raw JSON message.\",\n            \"parameters\": [\n                {\n                    \"name\": \"raw_message\",\n                    \"type\": \"JsonValue\",\n                    \"purpose\": \"The JSON message to handle.\"\n                },\n                {\n                    \"name\": \"MessageWriter\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"Function to write messages\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"JsonValue\",\n                \"MessageWriter\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE void HandleMessage(JsonValue raw_message, MessageWriter);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CompilationFinished\",\n            \"parent\": \"ls\",\n            \"about\": \"Called when a Torque compilation run finishes.\",\n            \"parameters\": [\n                {\n                    \"name\": \"result\",\n                    \"type\": \"TorqueCompilerResult\",\n                    \"purpose\": \"The result of the Torque compilation.\"\n                },\n                {\n                    \"name\": \"MessageWriter\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"Function to write messages\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"TorqueCompilerResult\",\n                \"MessageWriter\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE void CompilationFinished(TorqueCompilerResult result,\n                                           MessageWriter);\n        ]]></code>\n    </func>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"torque\",\n            \"parent\": \"internal\",\n            \"purpose\": \"Closes the torque namespace\"\n        }\n        </metadata>\n        <code><![CDATA[\n}  // namespace torque\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"internal\",\n            \"parent\": \"v8\",\n            \"purpose\": \"Closes the internal namespace\"\n        }\n        </metadata>\n        <code><![CDATA[\n}  // namespace internal\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"v8\",\n            \"purpose\": \"Closes the v8 namespace\"\n        }\n        </metadata>\n        <code><![CDATA[\n}  // namespace v8\n        ]]></code>\n    </namespace>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"V8_TORQUE_LS_MESSAGE_HANDLER_H_\",\n            \"purpose\": \"End of include guard\"\n        }\n        </metadata>\n        <code><![CDATA[\n#endif  // V8_TORQUE_LS_MESSAGE_HANDLER_H_\n        ]]></code>\n    </macro>\n</file>\n```"
}