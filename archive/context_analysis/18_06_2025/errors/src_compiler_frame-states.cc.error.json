{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/frame-states.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/frame-states.cc\",\n            \"file_name\": \"frame-states.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines frame state creation and manipulation functions for the Turbofan compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include necessary headers for frame state management, hashing, code generation, graph manipulation, object handling, and WebAssembly support.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/frame-states.h\"\n\n#include <optional>\n\n#include \"src/base/hashing.h\"\n#include \"src/codegen/callable.h\"\n#include \"src/compiler/js-graph.h\"\n#include \"src/compiler/node.h\"\n#include \"src/compiler/turbofan-graph.h\"\n#include \"src/handles/handles-inl.h\"\n#include \"src/objects/objects-inl.h\"\n\n#if V8_ENABLE_WEBASSEMBLY\n#include \"src/wasm/value-type.h\"\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </imports>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"OutputFrameStateCombine\",\n                \"about\": \"Calculates a hash value for an OutputFrameStateCombine object.\",\n                \"logic\": \"Uses base::hash_value to compute the hash based on the parameter_ member.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"sc\",\n                        \"type\": \"OutputFrameStateCombine const&\",\n                        \"purpose\": \"The OutputFrameStateCombine object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the OutputFrameStateCombine object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_value\",\n                    \"OutputFrameStateCombine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(OutputFrameStateCombine const& sc) {\n  return base::hash_value(sc.parameter_);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"OutputFrameStateCombine\",\n                \"about\": \"Overloads the << operator to provide a string representation of an OutputFrameStateCombine object.\",\n                \"logic\": \"If the parameter_ member is kInvalidIndex, returns \\\"Ignore\\\"; otherwise, returns \\\"PokeAt(parameter_)\\\".\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"sc\",\n                        \"type\": \"OutputFrameStateCombine const&\",\n                        \"purpose\": \"The OutputFrameStateCombine object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"OutputFrameStateCombine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, OutputFrameStateCombine const& sc) {\n  if (sc.parameter_ == OutputFrameStateCombine::kInvalidIndex)\n    return os << \"Ignore\";\n  return os << \"PokeAt(\" << sc.parameter_ << \")\";\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"FrameStateFunctionInfo\",\n                \"about\": \"Overloads the == operator to compare two FrameStateFunctionInfo objects for equality.\",\n                \"logic\": \"Compares various fields of the FrameStateFunctionInfo objects, including type, parameter count, max arguments, local count, shared info, and bytecode array. Includes a static_assert to ensure all fields are considered in the comparison. WebAssembly specific fields are also checked when enabled.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"FrameStateFunctionInfo const&\",\n                        \"purpose\": \"The left-hand side FrameStateFunctionInfo object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"FrameStateFunctionInfo const&\",\n                        \"purpose\": \"The right-hand side FrameStateFunctionInfo object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two FrameStateFunctionInfo objects are equal, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"FrameStateFunctionInfo\",\n                    \"SharedFunctionInfo\",\n                    \"bytecode_array\",\n                    \"equals\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(FrameStateFunctionInfo const& lhs,\n                FrameStateFunctionInfo const& rhs) {\n#if V8_HOST_ARCH_X64\n// If this static_assert fails, then you've probably added a new field to\n// FrameStateFunctionInfo. Make sure to take it into account in this equality\n// function, and update the static_assert.\n#if V8_ENABLE_WEBASSEMBLY\n  static_assert(sizeof(FrameStateFunctionInfo) == 40);\n#else\n  static_assert(sizeof(FrameStateFunctionInfo) == 32);\n#endif\n#endif\n\n#if V8_ENABLE_WEBASSEMBLY\n  if (lhs.wasm_liftoff_frame_size() != rhs.wasm_liftoff_frame_size() ||\n      lhs.wasm_function_index() != rhs.wasm_function_index()) {\n    return false;\n  }\n#endif\n\n  return lhs.type() == rhs.type() &&\n         lhs.parameter_count() == rhs.parameter_count() &&\n         lhs.max_arguments() == rhs.max_arguments() &&\n         lhs.local_count() == rhs.local_count() &&\n         lhs.shared_info().equals(rhs.shared_info()) &&\n         lhs.bytecode_array().equals(rhs.bytecode_array());\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"parent\": \"FrameStateInfo\",\n                \"about\": \"Overloads the == operator to compare two FrameStateInfo objects for equality.\",\n                \"logic\": \"Compares the type, bailout ID, state combine, and function info of the two FrameStateInfo objects. Includes a static_assert to ensure all fields are considered in the comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"FrameStateInfo const&\",\n                        \"purpose\": \"The left-hand side FrameStateInfo object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"FrameStateInfo const&\",\n                        \"purpose\": \"The right-hand side FrameStateInfo object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two FrameStateInfo objects are equal, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"FrameStateInfo\",\n                    \"FrameStateFunctionInfo\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(FrameStateInfo const& lhs, FrameStateInfo const& rhs) {\n#if V8_HOST_ARCH_X64\n  // If this static_assert fails, then you've probably added a new field to\n  // FrameStateInfo. Make sure to take it into account in this equality\n  // function, and update the static_assert.\n  static_assert(sizeof(FrameStateInfo) == 24);\n#endif\n\n  return lhs.type() == rhs.type() && lhs.bailout_id() == rhs.bailout_id() &&\n         lhs.state_combine() == rhs.state_combine() &&\n         *lhs.function_info() == *rhs.function_info();\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"parent\": \"FrameStateInfo\",\n                \"about\": \"Overloads the != operator to compare two FrameStateInfo objects for inequality.\",\n                \"logic\": \"Returns the negation of the result of the == operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"FrameStateInfo const&\",\n                        \"purpose\": \"The left-hand side FrameStateInfo object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"FrameStateInfo const&\",\n                        \"purpose\": \"The right-hand side FrameStateInfo object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the two FrameStateInfo objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"FrameStateInfo\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(FrameStateInfo const& lhs, FrameStateInfo const& rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"parent\": \"FrameStateInfo\",\n                \"about\": \"Calculates a hash value for a FrameStateInfo object.\",\n                \"logic\": \"Combines the hash values of the type, bailout ID, and state combine members.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"info\",\n                        \"type\": \"FrameStateInfo const&\",\n                        \"purpose\": \"The FrameStateInfo object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the FrameStateInfo object.\"\n                },\n                \"dependencies\": [\n                    \"FrameStateInfo\",\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(FrameStateInfo const& info) {\n  return base::hash_combine(static_cast<int>(info.type()), info.bailout_id(),\n                            info.state_combine());\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"FrameStateType\",\n                \"about\": \"Overloads the << operator to provide a string representation of a FrameStateType enum value.\",\n                \"logic\": \"Uses a switch statement to map FrameStateType enum values to their corresponding string representations.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"type\",\n                        \"type\": \"FrameStateType\",\n                        \"purpose\": \"The FrameStateType enum value to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"FrameStateType\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, FrameStateType type) {\n  switch (type) {\n    case FrameStateType::kUnoptimizedFunction:\n      os << \"UNOPTIMIZED_FRAME\";\n      break;\n    case FrameStateType::kInlinedExtraArguments:\n      os << \"INLINED_EXTRA_ARGUMENTS\";\n      break;\n    case FrameStateType::kConstructCreateStub:\n      os << \"CONSTRUCT_CREATE_STUB\";\n      break;\n    case FrameStateType::kConstructInvokeStub:\n      os << \"CONSTRUCT_INVOKE_STUB\";\n      break;\n    case FrameStateType::kBuiltinContinuation:\n      os << \"BUILTIN_CONTINUATION_FRAME\";\n      break;\n#if V8_ENABLE_WEBASSEMBLY\n    case FrameStateType::kWasmInlinedIntoJS:\n      os << \"WASM_INLINED_INTO_JS_FRAME\";\n      break;\n    case FrameStateType::kJSToWasmBuiltinContinuation:\n      os << \"JS_TO_WASM_BUILTIN_CONTINUATION_FRAME\";\n      break;\n    case FrameStateType::kLiftoffFunction:\n      os << \"LIFTOFF_FRAME\";\n      break;\n#endif  // V8_ENABLE_WEBASSEMBLY\n    case FrameStateType::kJavaScriptBuiltinContinuation:\n      os << \"JAVASCRIPT_BUILTIN_CONTINUATION_FRAME\";\n      break;\n    case FrameStateType::kJavaScriptBuiltinContinuationWithCatch:\n      os << \"JAVASCRIPT_BUILTIN_CONTINUATION_WITH_CATCH_FRAME\";\n      break;\n  }\n  return os;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"parent\": \"FrameStateInfo\",\n                \"about\": \"Overloads the << operator to provide a string representation of a FrameStateInfo object.\",\n                \"logic\": \"Outputs the frame type, bailout ID, and state combine. If the shared function info is available, it also outputs a brief representation of it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"info\",\n                        \"type\": \"FrameStateInfo const&\",\n                        \"purpose\": \"The FrameStateInfo object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": [\n                    \"FrameStateInfo\",\n                    \"SharedFunctionInfo\",\n                    \"Brief\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, FrameStateInfo const& info) {\n  os << info.type() << \", \" << info.bailout_id() << \", \"\n     << info.state_combine();\n  DirectHandle<SharedFunctionInfo> shared_info;\n  if (info.shared_info().ToHandle(&shared_info)) {\n    os << \", \" << Brief(*shared_info);\n  }\n  return os;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"DeoptimizerParameterCountFor\",\n                \"about\": \"Determines the number of parameters added by the deoptimizer based on the continuation frame state mode.\",\n                \"logic\": \"Uses a switch statement to return the appropriate parameter count based on the provided mode.  EAGER mode adds 0, LAZY mode adds 1 (for the return result), and LAZY_WITH_CATCH adds 2 (for the return result and the exception).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"mode\",\n                        \"type\": \"ContinuationFrameStateMode\",\n                        \"purpose\": \"The continuation frame state mode.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"uint8_t\",\n                    \"description\": \"The number of parameters added by the deoptimizer.\"\n                },\n                \"dependencies\": [\n                    \"ContinuationFrameStateMode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace {\n\n// Lazy deopt points where the frame state is associated with a call get an\n// additional parameter for the return result from the call. The return result\n// is added by the deoptimizer and not explicitly specified in the frame state.\n// Lazy deopt points which can catch exceptions further get an additional\n// parameter, namely the exception thrown. The exception is also added by the\n// deoptimizer.\nuint8_t DeoptimizerParameterCountFor(ContinuationFrameStateMode mode) {\n  switch (mode) {\n    case ContinuationFrameStateMode::EAGER:\n      return 0;\n    case ContinuationFrameStateMode::LAZY:\n      return 1;\n    case ContinuationFrameStateMode::LAZY_WITH_CATCH:\n      return 2;\n  }\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CreateBuiltinContinuationFrameStateCommon\",\n                \"about\": \"Creates a common builtin continuation frame state.\",\n                \"logic\": \"Creates a StateValues node for the parameters, a FrameStateFunctionInfo object, and a FrameState node.  Handles WebAssembly-specific frame state function info creation when enabled. Uses Builtins::GetContinuationBytecodeOffset to retrieve the bailout ID.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"jsgraph\",\n                        \"type\": \"JSGraph*\",\n                        \"purpose\": \"The JSGraph object.\"\n                    },\n                    {\n                        \"name\": \"frame_type\",\n                        \"type\": \"FrameStateType\",\n                        \"purpose\": \"The frame state type.\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The builtin name.\"\n                    },\n                    {\n                        \"name\": \"closure\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The closure node.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    },\n                    {\n                        \"name\": \"parameters\",\n                        \"type\": \"Node**\",\n                        \"purpose\": \"The array of parameter nodes.\"\n                    },\n                    {\n                        \"name\": \"parameter_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of parameters.\"\n                    },\n                    {\n                        \"name\": \"outer_frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The outer frame state node.\"\n                    },\n                    {\n                        \"name\": \"shared\",\n                        \"type\": \"Handle<SharedFunctionInfo>\",\n                        \"purpose\": \"The shared function info handle.\"\n                    },\n                    {\n                        \"name\": \"signature\",\n                        \"type\": \"const wasm::CanonicalSig*\",\n                        \"purpose\": \"The WebAssembly canonical signature.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FrameState\",\n                    \"description\": \"The created FrameState object.\"\n                },\n                \"dependencies\": [\n                    \"JSGraph\",\n                    \"FrameStateType\",\n                    \"Builtin\",\n                    \"Node\",\n                    \"SharedFunctionInfo\",\n                    \"TFGraph\",\n                    \"CommonOperatorBuilder\",\n                    \"SparseInputMask\",\n                    \"BytecodeOffset\",\n                    \"Builtins::GetContinuationBytecodeOffset\",\n                    \"OutputFrameStateCombine\",\n                    \"FrameStateFunctionInfo\",\n                    \"common->CreateFrameStateFunctionInfo\",\n                    \"graph->NewNode\",\n                    \"common->FrameState\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nFrameState CreateBuiltinContinuationFrameStateCommon(\n    JSGraph* jsgraph, FrameStateType frame_type, Builtin name, Node* closure,\n    Node* context, Node** parameters, int parameter_count,\n    Node* outer_frame_state,\n    Handle<SharedFunctionInfo> shared = Handle<SharedFunctionInfo>(),\n    const wasm::CanonicalSig* signature = nullptr) {\n  TFGraph* const graph = jsgraph->graph();\n  CommonOperatorBuilder* const common = jsgraph->common();\n\n  const Operator* op_param =\n      common->StateValues(parameter_count, SparseInputMask::Dense());\n  Node* params_node = graph->NewNode(op_param, parameter_count, parameters);\n\n  BytecodeOffset bailout_id = Builtins::GetContinuationBytecodeOffset(name);\n#if V8_ENABLE_WEBASSEMBLY\n  const FrameStateFunctionInfo* state_info =\n      signature ? common->CreateJSToWasmFrameStateFunctionInfo(\n                      frame_type, parameter_count, 0, shared, signature)\n                : common->CreateFrameStateFunctionInfo(\n                      frame_type, parameter_count, 0, 0, shared, {});\n#else\n  DCHECK_NULL(signature);\n  const FrameStateFunctionInfo* state_info =\n      common->CreateFrameStateFunctionInfo(frame_type, parameter_count, 0, 0,\n                                           shared, {});\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  const Operator* op = common->FrameState(\n      bailout_id, OutputFrameStateCombine::Ignore(), state_info);\n  return FrameState(graph->NewNode(op, params_node, jsgraph->EmptyStateValues(),\n                                   jsgraph->EmptyStateValues(), context,\n                                   closure, outer_frame_state));\n}\n\n}  // namespace\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CreateStubBuiltinContinuationFrameState\",\n                \"about\": \"Creates a stub builtin continuation frame state.\",\n                \"logic\": \"Calculates the stack parameter count, reserves space for actual parameters, adds stack and register parameters to the actual parameters vector, and then calls CreateBuiltinContinuationFrameStateCommon to create the frame state.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"jsgraph\",\n                        \"type\": \"JSGraph*\",\n                        \"purpose\": \"The JSGraph object.\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The builtin name.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    },\n                    {\n                        \"name\": \"parameters\",\n                        \"type\": \"Node* const*\",\n                        \"purpose\": \"The array of parameter nodes.\"\n                    },\n                    {\n                        \"name\": \"parameter_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of parameters.\"\n                    },\n                    {\n                        \"name\": \"outer_frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The outer frame state node.\"\n                    },\n                    {\n                        \"name\": \"mode\",\n                        \"type\": \"ContinuationFrameStateMode\",\n                        \"purpose\": \"The continuation frame state mode.\"\n                    },\n                    {\n                        \"name\": \"signature\",\n                        \"type\": \"const wasm::CanonicalSig*\",\n                        \"purpose\": \"The WebAssembly canonical signature.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FrameState\",\n                    \"description\": \"The created FrameState object.\"\n                },\n                \"dependencies\": [\n                    \"JSGraph\",\n                    \"Builtin\",\n                    \"Node\",\n                    \"ContinuationFrameStateMode\",\n                    \"wasm::CanonicalSig\",\n                    \"Builtins::CallableFor\",\n                    \"CallInterfaceDescriptor\",\n                    \"DeoptimizerParameterCountFor\",\n                    \"CreateBuiltinContinuationFrameStateCommon\",\n                    \"arraysize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nFrameState CreateStubBuiltinContinuationFrameState(\n    JSGraph* jsgraph, Builtin name, Node* context, Node* const* parameters,\n    int parameter_count, Node* outer_frame_state,\n    ContinuationFrameStateMode mode, const wasm::CanonicalSig* signature) {\n  Callable callable = Builtins::CallableFor(jsgraph->isolate(), name);\n  CallInterfaceDescriptor descriptor = callable.descriptor();\n\n  std::vector<Node*> actual_parameters;\n  // Stack parameters first. Depending on {mode}, final parameters are added\n  // by the deoptimizer and aren't explicitly passed in the frame state.\n  int stack_parameter_count =\n      descriptor.GetStackParameterCount() - DeoptimizerParameterCountFor(mode);\n\n  // Ensure the parameters added by the deoptimizer are passed on the stack.\n  // This check prevents using TFS builtins as continuations while doing the\n  // lazy deopt. Use TFC or TFJ builtin as a lazy deopt continuation which\n  // would pass the result parameter on the stack.\n  DCHECK_GE(stack_parameter_count, 0);\n\n  // Reserving space in the vector.\n  actual_parameters.reserve(stack_parameter_count +\n                            descriptor.GetRegisterParameterCount());\n  for (int i = 0; i < stack_parameter_count; ++i) {\n    actual_parameters.push_back(\n        parameters[descriptor.GetRegisterParameterCount() + i]);\n  }\n  // Register parameters follow, context will be added by instruction selector\n  // during FrameState translation.\n  for (int i = 0; i < descriptor.GetRegisterParameterCount(); ++i) {\n    actual_parameters.push_back(parameters[i]);\n  }\n\n  FrameStateType frame_state_type = FrameStateType::kBuiltinContinuation;\n#if V8_ENABLE_WEBASSEMBLY\n  if (name == Builtin::kJSToWasmLazyDeoptContinuation) {\n    CHECK_NOT_NULL(signature);\n    frame_state_type = FrameStateType::kJSToWasmBuiltinContinuation;\n  }\n#endif  // V8_ENABLE_WEBASSEMBLY\n  return CreateBuiltinContinuationFrameStateCommon(\n      jsgraph, frame_state_type, name, jsgraph->UndefinedConstant(), context,\n      actual_parameters.data(), static_cast<int>(actual_parameters.size()),\n      outer_frame_state, Handle<SharedFunctionInfo>(), signature);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CreateJSWasmCallBuiltinContinuationFrameState\",\n                \"about\": \"Creates a JS to WebAssembly call builtin continuation frame state.\",\n                \"logic\": \"Determines the WebAssembly return kind from the signature, creates a SmiConstant node for the return type, and then calls CreateStubBuiltinContinuationFrameState to create the frame state.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"jsgraph\",\n                        \"type\": \"JSGraph*\",\n                        \"purpose\": \"The JSGraph object.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    },\n                    {\n                        \"name\": \"outer_frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The outer frame state node.\"\n                    },\n                    {\n                        \"name\": \"signature\",\n                        \"type\": \"const wasm::CanonicalSig*\",\n                        \"purpose\": \"The WebAssembly canonical signature.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FrameState\",\n                    \"description\": \"The created FrameState object.\"\n                },\n                \"dependencies\": [\n                    \"JSGraph\",\n                    \"Node\",\n                    \"wasm::CanonicalSig\",\n                    \"wasm::WasmReturnTypeFromSignature\",\n                    \"CreateStubBuiltinContinuationFrameState\",\n                    \"arraysize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nFrameState CreateJSWasmCallBuiltinContinuationFrameState(\n    JSGraph* jsgraph, Node* context, Node* outer_frame_state,\n    const wasm::CanonicalSig* signature) {\n  std::optional<wasm::ValueKind> wasm_return_kind =\n      wasm::WasmReturnTypeFromSignature(signature);\n  Node* node_return_type =\n      jsgraph->SmiConstant(wasm_return_kind ? wasm_return_kind.value() : -1);\n  Node* lazy_deopt_parameters[] = {node_return_type};\n  return CreateStubBuiltinContinuationFrameState(\n      jsgraph, Builtin::kJSToWasmLazyDeoptContinuation, context,\n      lazy_deopt_parameters, arraysize(lazy_deopt_parameters),\n      outer_frame_state, ContinuationFrameStateMode::LAZY, signature);\n}\n#endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CreateJavaScriptBuiltinContinuationFrameState\",\n                \"about\": \"Creates a JavaScript builtin continuation frame state.\",\n                \"logic\": \"Calculates the expected stack parameter count, reserves space for actual parameters, adds stack parameters, creates a new target, adds register parameters, and then calls CreateBuiltinContinuationFrameStateCommon to create the frame state.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"jsgraph\",\n                        \"type\": \"JSGraph*\",\n                        \"purpose\": \"The JSGraph object.\"\n                    },\n                    {\n                        \"name\": \"shared\",\n                        \"type\": \"SharedFunctionInfoRef\",\n                        \"purpose\": \"The shared function info reference.\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The builtin name.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The target node.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The context node.\"\n                    },\n                    {\n                        \"name\": \"stack_parameters\",\n                        \"type\": \"Node* const*\",\n                        \"purpose\": \"The array of stack parameter nodes.\"\n                    },\n                    {\n                        \"name\": \"stack_parameter_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of stack parameters.\"\n                    },\n                    {\n                        \"name\": \"outer_frame_state\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The outer frame state node.\"\n                    },\n                    {\n                        \"name\": \"mode\",\n                        \"type\": \"ContinuationFrameStateMode\",\n                        \"purpose\": \"The continuation frame state mode.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FrameState\",\n                    \"description\": \"The created FrameState object.\"\n                },\n                \"dependencies\": [\n                    \"JSGraph\",\n                    \"SharedFunctionInfoRef\",\n                    \"Builtin\",\n                    \"Node\",\n                    \"ContinuationFrameStateMode\",\n                    \"Builtins::GetStackParameterCount\",\n                    \"DeoptimizerParameterCountFor\",\n                    \"CreateBuiltinContinuationFrameStateCommon\",\n                    \"Builtins::CallInterfaceDescriptorFor\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nFrameState CreateJavaScriptBuiltinContinuationFrameState(\n    JSGraph* jsgraph, SharedFunctionInfoRef shared, Builtin name, Node* target,\n    Node* context, Node* const* stack_parameters, int stack_parameter_count,\n    Node* outer_frame_state, ContinuationFrameStateMode mode) {\n  // Depending on {mode}, final parameters are added by the deoptimizer\n  // and aren't explicitly passed in the frame state.\n  DCHECK_EQ(Builtins::GetStackParameterCount(name),\n            stack_parameter_count + DeoptimizerParameterCountFor(mode));\n\n  Node* argc = jsgraph->ConstantNoHole(Builtins::GetStackParameterCount(name));\n\n  // Stack parameters first. They must be first because the receiver is expected\n  // to be the second value in the translation when creating stack crawls\n  // (e.g. Error.stack) of optimized JavaScript frames.\n  std::vector<Node*> actual_parameters;\n  actual_parameters.reserve(stack_parameter_count);\n  for (int i = 0; i < stack_parameter_count; ++i) {\n    actual_parameters.push_back(stack_parameters[i]);\n  }\n\n  Node* new_target = jsgraph->UndefinedConstant();\n\n  // Register parameters follow stack parameters. The context will be added by\n  // instruction selector during FrameState translation.\n  DCHECK_EQ(\n      Builtins::CallInterfaceDescriptorFor(name).GetRegisterParameterCount(),\n      V8_JS_LINKAGE_INCLUDES_DISPATCH_HANDLE_BOOL ? 4 : 3);\n  actual_parameters.push_back(target);      // kJavaScriptCallTargetRegister\n  actual_parameters.push_back(new_target);  // kJavaScriptCallNewTargetRegister\n  actual_parameters.push_back(argc);        // kJavaScriptCallArgCountRegister\n#ifdef V8_JS_LINKAGE_INCLUDES_DISPATCH_HANDLE\n  // The dispatch handle isn't used by the continuation builtins.\n  Node* handle = jsgraph->ConstantNoHole(kInvalidDispatchHandle.value());\n  actual_parameters.push_back(handle);  // kJavaScriptDispatchHandleRegister\n#endif\n\n  return CreateBuiltinContinuationFrameStateCommon(\n      jsgraph,\n      mode == ContinuationFrameStateMode::LAZY_WITH_CATCH\n          ? FrameStateType::kJavaScriptBuiltinContinuationWithCatch\n          : FrameStateType::kJavaScriptBuiltinContinuation,\n      name, target, context, &actual_parameters[0],\n      static_cast<int>(actual_parameters.size()), outer_frame_state,\n      shared.object());\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CreateGenericLazyDeoptContinuationFrameState\",\n                \"about\": \"Creates a generic lazy deopt continuation frame state.\",\n                \"logic\": \"Creates an array containing the receiver, calls CreateJavaScriptBuiltinContinuationFrameState with the appropriate parameters and lazy mode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"graph\",\n                        \"type\": \"JSGraph*\",\n                        \"purpose\": \"The JSGraph object.\"\n                    },\n                    {\n                        \"name\": \"shared\",\n                        \"type\": \"SharedFunctionInfoRef\",\n                        \"purpose\": \"The shared function info reference.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type"
}