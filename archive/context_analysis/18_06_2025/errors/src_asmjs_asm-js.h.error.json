{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/asmjs/asm-js.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 259, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/asmjs/asm-js.h\",\n            \"file_name\": \"asm-js.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the interface for compiling and instantiating asm.js modules within the V8 JavaScript engine.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary standard library and V8 headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <memory>\n\n#include \"src/common/globals.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"AsmJs\",\n                \"about\": \"Interface to compile and instantiate for asm.js modules.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"UnoptimizedCompilationJob\",\n                    \"ParseInfo\",\n                    \"FunctionLiteral\",\n                    \"AccountingAllocator\",\n                    \"SharedFunctionInfo\",\n                    \"AsmWasmData\",\n                    \"JSReceiver\",\n                    \"JSArrayBuffer\",\n                    \"Isolate\",\n                    \"MaybeDirectHandle\",\n                    \"DirectHandle\",\n                    \"Object\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass AsmJs {\n public:\n  static std::unique_ptr<UnoptimizedCompilationJob> NewCompilationJob(\n      ParseInfo* parse_info, FunctionLiteral* literal,\n      AccountingAllocator* allocator);\n  static MaybeDirectHandle<Object> InstantiateAsmWasm(\n      Isolate* isolate, DirectHandle<SharedFunctionInfo>,\n      DirectHandle<AsmWasmData> wasm_data, DirectHandle<JSReceiver> stdlib,\n      DirectHandle<JSReceiver> foreign, DirectHandle<JSArrayBuffer> memory);\n\n  // Special export name used to indicate that the module exports a single\n  // function instead of a JavaScript object holding multiple functions.\n  static const char* const kSingleFunctionName;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AccountingAllocator\",\n                    \"about\": \"Allocator for memory accounting.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass AccountingAllocator;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AsmWasmData\",\n                    \"about\": \"Data structure holding compiled Asm.js/WebAssembly data.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass AsmWasmData;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"FunctionLiteral\",\n                    \"about\": \"Represents a function literal in the AST.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass FunctionLiteral;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ParseInfo\",\n                    \"about\": \"Stores information about the parsing process.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass ParseInfo;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SharedFunctionInfo\",\n                    \"about\": \"Stores information shared between multiple instances of the same function.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass SharedFunctionInfo;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"UnoptimizedCompilationJob\",\n                    \"about\": \"Represents a compilation job for unoptimized code.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass UnoptimizedCompilationJob;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSArrayBuffer\",\n                    \"about\": \"JavaScript ArrayBuffer object.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass JSArrayBuffer;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSReceiver\",\n                    \"about\": \"JavaScript receiver object.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass JSReceiver;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolated instance of the V8 engine.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"MaybeDirectHandle\",\n                    \"about\": \"Handle that might be direct.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass MaybeDirectHandle;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"DirectHandle\",\n                    \"about\": \"Direct handle to an object.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass DirectHandle;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Object\",\n                    \"about\": \"Base class for all JavaScript objects.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Object;\n            ]]></code>\n        </class>\n    </dependencies>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"NewCompilationJob\",\n                \"parent\": \"AsmJs\",\n                \"about\": \"Creates a new compilation job for asm.js modules.\",\n                \"logic\": \"Creates a unique pointer to an UnoptimizedCompilationJob, which is used for compiling the asm.js module represented by the FunctionLiteral.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"parse_info\",\n                        \"type\": \"ParseInfo*\",\n                        \"purpose\": \"Provides information about the parsing process.\"\n                    },\n                    {\n                        \"name\": \"literal\",\n                        \"type\": \"FunctionLiteral*\",\n                        \"purpose\": \"Represents the function literal to be compiled.\"\n                    },\n                    {\n                        \"name\": \"allocator\",\n                        \"type\": \"AccountingAllocator*\",\n                        \"purpose\": \"Allocator for memory accounting during compilation.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::unique_ptr<UnoptimizedCompilationJob>\",\n                    \"description\": \"A unique pointer to the newly created compilation job.\"\n                },\n                \"dependencies\": [\n                    \"UnoptimizedCompilationJob\",\n                    \"ParseInfo\",\n                    \"FunctionLiteral\",\n                    \"AccountingAllocator\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static std::unique_ptr<UnoptimizedCompilationJob> NewCompilationJob(\n      ParseInfo* parse_info, FunctionLiteral* literal,\n      AccountingAllocator* allocator);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"InstantiateAsmWasm\",\n                \"parent\": \"AsmJs\",\n                \"about\": \"Instantiates an asm.js/wasm module.\",\n                \"logic\": \"Instantiates a wasm module with the given isolate, shared function info, wasm data, and import objects (stdlib, foreign, memory).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"isolate\",\n                        \"type\": \"Isolate*\",\n                        \"purpose\": \"The V8 isolate.\"\n                    },\n                    {\n                        \"name\": \"shared_function_info\",\n                        \"type\": \"DirectHandle<SharedFunctionInfo>\",\n                        \"purpose\": \"Shared function information of the module.\"\n                    },\n                    {\n                        \"name\": \"wasm_data\",\n                        \"type\": \"DirectHandle<AsmWasmData>\",\n                        \"purpose\": \"Compiled wasm data.\"\n                    },\n                    {\n                        \"name\": \"stdlib\",\n                        \"type\": \"DirectHandle<JSReceiver>\",\n                        \"purpose\": \"The stdlib import object.\"\n                    },\n                    {\n                        \"name\": \"foreign\",\n                        \"type\": \"DirectHandle<JSReceiver>\",\n                        \"purpose\": \"The foreign import object.\"\n                    },\n                    {\n                        \"name\": \"memory\",\n                        \"type\": \"DirectHandle<JSArrayBuffer>\",\n                        \"purpose\": \"The memory import object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MaybeDirectHandle<Object>\",\n                    \"description\": \"A handle to the instantiated module.\"\n                },\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"SharedFunctionInfo\",\n                    \"AsmWasmData\",\n                    \"JSReceiver\",\n                    \"JSArrayBuffer\",\n                    \"MaybeDirectHandle\",\n                    \"DirectHandle\",\n                    \"Object\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static MaybeDirectHandle<Object> InstantiateAsmWasm(\n      Isolate* isolate, DirectHandle<SharedFunctionInfo>,\n      DirectHandle<AsmWasmData> wasm_data, DirectHandle<JSReceiver> stdlib,\n      DirectHandle<JSReceiver> foreign, DirectHandle<JSArrayBuffer> memory);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"kSingleFunctionName\",\n                \"parent\": \"AsmJs\",\n                \"about\": \"Special export name used to indicate that the module exports a single function instead of a JavaScript object holding multiple functions.\",\n                \"logic\": \"A constant character pointer that holds the name for single function exports. This is likely used during module instantiation or export resolution.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const char* const\",\n                    \"description\": \"A constant character pointer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  static const char* const kSingleFunctionName;\n        ]]></code>\n    </func>\n</file>\n```"
}