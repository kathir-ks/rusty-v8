{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/heap-refs.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/heap-refs.h\",\n        \"file_name\": \"heap-refs.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the Ref types used by the compiler to represent heap objects. These Ref types provide a more type-safe and efficient way to access heap objects within the compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Standard library headers for optional values, type traits, and standard template library.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n#include <type_traits>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 specific headers for IC, objects, utils, and zone management.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/ic/call-optimization.h\"\n#include \"src/objects/elements-kind.h\"\n#include \"src/objects/feedback-vector.h\"\n#include \"src/objects/instance-type.h\"\n#include \"src/objects/object-list-macros.h\"\n#include \"src/utils/boxed-float.h\"\n#include \"src/zone/zone-compact-set.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CFunctionInfo\",\n            \"about\": \"Forward declaration for CFunctionInfo.  Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass CFunctionInfo;\n        ]]></code>\n    </class>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"internal\",\n            \"purpose\": \"Namespace for internal V8 implementation details.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace internal {\n        ]]></code>\n    </namespace>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"BytecodeArray\",\n            \"about\": \"Forward declaration for BytecodeArray. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass BytecodeArray;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FixedDoubleArray\",\n            \"about\": \"Forward declaration for FixedDoubleArray. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass FixedDoubleArray;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FunctionTemplateInfo\",\n            \"about\": \"Forward declaration for FunctionTemplateInfo. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass FunctionTemplateInfo;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"HeapNumber\",\n            \"about\": \"Forward declaration for HeapNumber. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass HeapNumber;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"InternalizedString\",\n            \"about\": \"Forward declaration for InternalizedString. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass InternalizedString;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSBoundFunction\",\n            \"about\": \"Forward declaration for JSBoundFunction. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSBoundFunction;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSDataView\",\n            \"about\": \"Forward declaration for JSDataView. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSDataView;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSGlobalProxy\",\n            \"about\": \"Forward declaration for JSGlobalProxy. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSGlobalProxy;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSTypedArray\",\n            \"about\": \"Forward declaration for JSTypedArray. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSTypedArray;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"NativeContext\",\n            \"about\": \"Forward declaration for NativeContext. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass NativeContext;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ScriptContextTable\",\n            \"about\": \"Forward declaration for ScriptContextTable. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass ScriptContextTable;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Signature\",\n            \"about\": \"Template class forward declaration for Signature. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename>\nclass Signature;\n        ]]></code>\n    </class>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"interpreter\",\n            \"purpose\": \"Namespace for the V8 interpreter.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace interpreter {\nclass Register;\n}  // namespace interpreter\n        ]]></code>\n    </namespace>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Register\",\n            \"about\": \"Forward declaration of the Register class within the interpreter namespace.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass Register;\n        ]]></code>\n    </class>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"wasm\",\n            \"purpose\": \"Namespace for WebAssembly related classes and structs.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace wasm {\nclass ValueType;\nstruct WasmModule;\n}  // namespace wasm\n        ]]></code>\n    </namespace>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ValueType\",\n            \"about\": \"Forward declaration of the ValueType class in the wasm namespace.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass ValueType;\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"WasmModule\",\n            \"about\": \"Forward declaration of the WasmModule struct in the wasm namespace.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nstruct WasmModule;\n        ]]></code>\n    </struct>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"compiler\",\n            \"purpose\": \"Namespace for the V8 compiler.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace compiler {\n        ]]></code>\n    </namespace>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CompilationDependencies\",\n            \"about\": \"Forward declaration for CompilationDependencies. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass CompilationDependencies;\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"FeedbackSource\",\n            \"about\": \"Forward declaration for FeedbackSource. Details on this struct are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nstruct FeedbackSource;\n        ]]></code>\n    </struct>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSHeapBroker\",\n            \"about\": \"Forward declaration for JSHeapBroker. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSHeapBroker;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ObjectData\",\n            \"about\": \"Forward declaration for ObjectData. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass ObjectData;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PerIsolateCompilerCache\",\n            \"about\": \"Forward declaration for PerIsolateCompilerCache. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass PerIsolateCompilerCache;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PropertyAccessInfo\",\n            \"about\": \"Forward declaration for PropertyAccessInfo. Details on this class are not available within this file.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass PropertyAccessInfo;\n        ]]></code>\n    </class>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"AccessMode\",\n            \"about\": \"Enum representing different access modes for property access (load, store, has, define).\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nenum class AccessMode { kLoad, kStore, kStoreInLiteral, kHas, kDefine };\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsAnyStore\",\n            \"about\": \"Inline function to check if an AccessMode represents a store operation.\",\n            \"logic\": \"Returns true if the AccessMode is kStore, kStoreInLiteral, or kDefine, otherwise false.\",\n            \"parameters\": [\n                {\n                    \"name\": \"mode\",\n                    \"type\": \"AccessMode\",\n                    \"purpose\": \"The AccessMode to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the AccessMode is a store operation, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool IsAnyStore(AccessMode mode) {\n  return mode == AccessMode::kStore || mode == AccessMode::kStoreInLiteral ||\n         mode == AccessMode::kDefine;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsDefiningStore\",\n            \"about\": \"Inline function to check if an AccessMode represents a defining store operation.\",\n            \"logic\": \"Returns true if the AccessMode is kStoreInLiteral or kDefine, otherwise false.\",\n            \"parameters\": [\n                {\n                    \"name\": \"mode\",\n                    \"type\": \"AccessMode\",\n                    \"purpose\": \"The AccessMode to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the AccessMode is a defining store operation, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool IsDefiningStore(AccessMode mode) {\n  return mode == AccessMode::kStoreInLiteral || mode == AccessMode::kDefine;\n}\n        ]]></code>\n    </func>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"OddballType\",\n            \"about\": \"Enum representing different oddball types (None, Boolean, Undefined, Null).\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nenum class OddballType : uint8_t {\n  kNone,     // Not an Oddball.\n  kBoolean,  // True or False.\n  kUndefined,\n  kNull,\n};\n        ]]></code>\n    </enum>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"HoleType\",\n            \"about\": \"Enum representing different hole types (None, TheHole, PropertyCellHole, HashTableHole, PromiseHole, Generic).\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nenum class HoleType : uint8_t {\n  kNone,  // Not a Hole.\n\n#define FOR_HOLE(Name, name, Root) k##Name,\n  HOLE_LIST(FOR_HOLE)\n#undef FOR_HOLE\n\n      kGeneric = kTheHole,\n};\n        ]]></code>\n    </enum>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"RefSerializationKind\",\n            \"about\": \"Enum representing the serialization kind of a Ref (NeverSerialized, BackgroundSerialized).\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nenum class RefSerializationKind {\n  // Skips serialization.\n  kNeverSerialized,\n  // Can be serialized on demand from the background thread.\n  kBackgroundSerialized,\n};\n        ]]></code>\n    </enum>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_OBJECT_LIST_BASE\",\n            \"about\": \"Macro defining a base list of heap broker objects.  This macro is used to declare various types of heap objects and their serialization behavior.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#define HEAP_BROKER_OBJECT_LIST_BASE(BACKGROUND_SERIALIZED, NEVER_SERIALIZED) \\\n  /* Subtypes of JSObject */                                                  \\\n  BACKGROUND_SERIALIZED(JSArray)                                              \\\n  BACKGROUND_SERIALIZED(JSBoundFunction)                                      \\\n  BACKGROUND_SERIALIZED(JSDataView)                                           \\\n  BACKGROUND_SERIALIZED(JSFunction)                                           \\\n  BACKGROUND_SERIALIZED(JSGlobalObject)                                       \\\n  BACKGROUND_SERIALIZED(JSGlobalProxy)                                        \\\n  BACKGROUND_SERIALIZED(JSTypedArray)                                         \\\n  BACKGROUND_SERIALIZED(JSPrimitiveWrapper)                                   \\\n  /* Subtypes of Context */                                                   \\\n  NEVER_SERIALIZED(NativeContext)                                             \\\n  /* Subtypes of FixedArray */                                                \\\n  NEVER_SERIALIZED(ObjectBoilerplateDescription)                              \\\n  BACKGROUND_SERIALIZED(ScriptContextTable)                                   \\\n  /* Subtypes of String */                                                    \\\n  NEVER_SERIALIZED(InternalizedString)                                        \\\n  /* Subtypes of FixedArrayBase */                                            \\\n  BACKGROUND_SERIALIZED(FixedArray)                                           \\\n  NEVER_SERIALIZED(FixedDoubleArray)                                          \\\n  /* Subtypes of Name */                                                      \\\n  NEVER_SERIALIZED(String)                                                    \\\n  NEVER_SERIALIZED(Symbol)                                                    \\\n  /* Subtypes of JSReceiver */                                                \\\n  BACKGROUND_SERIALIZED(JSObject)                                             \\\n  /* Subtypes of HeapObject */                                                \\\n  NEVER_SERIALIZED(AccessorInfo)                                              \\\n  NEVER_SERIALIZED(AllocationSite)                                              \\\n  NEVER_SERIALIZED(ArrayBoilerplateDescription)                               \\\n  BACKGROUND_SERIALIZED(BigInt)                                               \\\n  NEVER_SERIALIZED(BytecodeArray)                                             \\\n  NEVER_SERIALIZED(Cell)                                                      \\\n  NEVER_SERIALIZED(Code)                                                      \\\n  NEVER_SERIALIZED(Context)                                                   \\\n  NEVER_SERIALIZED(DescriptorArray)                                           \\\n  NEVER_SERIALIZED(FeedbackCell)                                            \\\n  NEVER_SERIALIZED(FeedbackVector)                                            \\\n  BACKGROUND_SERIALIZED(FixedArrayBase)                                       \\\n  NEVER_SERIALIZED(FunctionTemplateInfo)                                      \\\n  NEVER_SERIALIZED(HeapNumber)                                                \\\n  BACKGROUND_SERIALIZED(JSReceiver)                                           \\\n  BACKGROUND_SERIALIZED(Map)                                                  \\\n  NEVER_SERIALIZED(Name)                                                      \\\n  BACKGROUND_SERIALIZED(PropertyCell)                                         \\\n  NEVER_SERIALIZED(RegExpBoilerplateDescription)                              \\\n  NEVER_SERIALIZED(ScopeInfo)                                                 \\\n  NEVER_SERIALIZED(SharedFunctionInfo)                                        \\\n  NEVER_SERIALIZED(SourceTextModule)                                          \\\n  NEVER_SERIALIZED(TemplateObjectDescription)                                 \\\n  /* Subtypes of Object */                                                    \\\n  BACKGROUND_SERIALIZED(HeapObject)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_OBJECT_LIST\",\n            \"about\": \"Macro defining a list of heap broker objects.  This macro uses HEAP_BROKER_OBJECT_LIST_BASE and passes the same argument for both background serialized and never serialized.\",\n            \"dependencies\": [\n                \"HEAP_BROKER_OBJECT_LIST_BASE\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define HEAP_BROKER_OBJECT_LIST(V) HEAP_BROKER_OBJECT_LIST_BASE(V, V)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"IGNORE_CASE\",\n            \"about\": \"Macro that ignores the given arguments.  It is used as a placeholder for the 'never serialized' argument in HEAP_BROKER_OBJECT_LIST_BASE when defining lists with only background serialized objects.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#define IGNORE_CASE(...)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST\",\n            \"about\": \"Macro defining a list of heap broker objects which are all background serialized.  This macro uses HEAP_BROKER_OBJECT_LIST_BASE and IGNORE_CASE to indicate all objects are background serialized.\",\n            \"dependencies\": [\n                \"HEAP_BROKER_OBJECT_LIST_BASE\",\n                \"IGNORE_CASE\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define HEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST(V) \\\n  HEAP_BROKER_OBJECT_LIST_BASE(V, IGNORE_CASE)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"FORWARD_DECL\",\n            \"about\": \"Macro that forward declares a class with a 'Ref' suffix. It is used to forward declare the Ref classes for each heap object.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#define FORWARD_DECL(Name) class Name##Ref;\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_OBJECT_LIST\",\n            \"about\": \"Macro to apply FORWARD_DECL to all types in HEAP_BROKER_OBJECT_LIST.\",\n            \"dependencies\": [\n                \"FORWARD_DECL\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nHEAP_BROKER_OBJECT_LIST(FORWARD_DECL)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"FORWARD_DECL\",\n            \"about\": \"Macro that forward declares the Object class with a 'Ref' suffix.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nFORWARD_DECL(Object)\n        ]]></code>\n    </macro>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"is_ref\",\n            \"about\": \"Template struct to check if a type is a Ref type.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nstruct is_ref : public std::false_type {};\n        ]]></code>\n    </template>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"DEFINE_IS_REF\",\n            \"about\": \"Macro to define a specialization of the is_ref template for a specific Ref type.\",\n            \"dependencies\": [\n                \"is_ref\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define DEFINE_IS_REF(Name) \\\n  template <>               \\\n  struct is_ref<Name##Ref> : public std::true_type {};\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_OBJECT_LIST\",\n            \"about\": \"Macro to apply DEFINE_IS_REF to all types in HEAP_BROKER_OBJECT_LIST.\",\n            \"dependencies\": [\n                \"DEFINE_IS_REF\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nHEAP_BROKER_OBJECT_LIST(DEFINE_IS_REF)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"DEFINE_IS_REF\",\n            \"about\": \"Macro to define is_ref for the Object class.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nDEFINE_IS_REF(Object)\n        ]]></code>\n    </macro>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits\",\n            \"about\": \"Template struct to define traits for Ref types, including the ref_type, data_type, and ref_serialization_kind.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nstruct ref_traits;\n        ]]></code>\n    </template>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"FORWARD_DECL\",\n            \"about\": \"Macro that forward declares a class with a 'Data' suffix. It is used to forward declare the data classes for each heap object.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#define FORWARD_DECL(Name) class Name##Data;\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST\",\n            \"about\": \"Macro to apply FORWARD_DECL to all types in HEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST.\",\n            \"dependencies\": [\n                \"FORWARD_DECL\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nHEAP_BROKER_BACKGROUND_SERIALIZED_OBJECT_LIST(FORWARD_DECL)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"BACKGROUND_SERIALIZED_REF_TRAITS\",\n            \"about\": \"Macro to define a specialization of the ref_traits template for background serialized Ref types.\",\n            \"dependencies\": [\n                \"ref_traits\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define BACKGROUND_SERIALIZED_REF_TRAITS(Name)                     \\\n  template <>                                                      \\\n  struct ref_traits<Name> {                                        \\\n    using ref_type = Name##Ref;                                    \\\n    using data_type = Name##Data;                                  \\\n    static constexpr RefSerializationKind ref_serialization_kind = \\\n        RefSerializationKind::kBackgroundSerialized;               \\\n  };\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"NEVER_SERIALIZED_REF_TRAITS\",\n            \"about\": \"Macro to define a specialization of the ref_traits template for never serialized Ref types.\",\n            \"dependencies\": [\n                \"ref_traits\",\n                \"ObjectData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#define NEVER_SERIALIZED_REF_TRAITS(Name)                          \\\n  template <>                                                      \\\n  struct ref_traits<Name> {                                        \\\n    using ref_type = Name##Ref;                                    \\\n    using data_type = ObjectData;                                  \\\n    static constexpr RefSerializationKind ref_serialization_kind = \\\n        RefSerializationKind::kNeverSerialized;                    \\\n  };\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"HEAP_BROKER_OBJECT_LIST_BASE\",\n            \"about\": \"Macro to apply BACKGROUND_SERIALIZED_REF_TRAITS or NEVER_SERIALIZED_REF_TRAITS to all types in HEAP_BROKER_OBJECT_LIST_BASE.\",\n            \"dependencies\": [\n                \"BACKGROUND_SERIALIZED_REF_TRAITS\",\n                \"NEVER_SERIALIZED_REF_TRAITS\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nHEAP_BROKER_OBJECT_LIST_BASE(BACKGROUND_SERIALIZED_REF_TRAITS,\n                             NEVER_SERIALIZED_REF_TRAITS)\n        ]]></code>\n    </macro>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<Object>\",\n            \"about\": \"Specialization of ref_traits for the Object class.\",\n            \"dependencies\": [\n                \"ObjectRef\",\n                \"ObjectData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<Object> {\n  using ref_type = ObjectRef;\n  using data_type = ObjectData;\n  // Note: While a bit awkward, this artificial ref serialization kind value is\n  // okay: smis are never-serialized, and we never create raw non-smi\n  // ObjectRefs (they would at least be HeapObjectRefs instead).\n  static constexpr RefSerializationKind ref_serialization_kind =\n      RefSerializationKind::kNeverSerialized;\n};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<Oddball>\",\n            \"about\": \"Specialization of ref_traits for the Oddball class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<Oddball> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<Null>\",\n            \"about\": \"Specialization of ref_traits for the Null class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<Null> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<Undefined>\",\n            \"about\": \"Specialization of ref_traits for the Undefined class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<Undefined> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<True>\",\n            \"about\": \"Specialization of ref_traits for the True class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<True> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<False>\",\n            \"about\": \"Specialization of ref_traits for the False class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<False> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<Hole>\",\n            \"about\": \"Specialization of ref_traits for the Hole class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<Hole> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<EnumCache>\",\n            \"about\": \"Specialization of ref_traits for the EnumCache class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<EnumCache> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ref_traits<PropertyArray>\",\n            \"about\": \"Specialization of ref_traits for the PropertyArray class, inheriting from HeapObject.\",\n            \"dependencies\": [\n                \"HeapObject\",\n                \"ref_traits<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <>\nstruct ref_traits<PropertyArray> : public ref_traits<HeapObject> {};\n        ]]></code>\n    </template>\n    <template>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \""
}