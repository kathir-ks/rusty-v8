{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turbofan-graph.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 69, column 58",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turbofan-graph.cc\",\n            \"file_name\": \"turbofan-graph.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implementation of the TFGraph class, which represents the Turbofan graph data structure used in the V8 compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for graph compilation, node operations, visualization, and verification.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turbofan-graph.h\"\n\n#include <algorithm>\n\n#include \"src/compiler/node.h\"\n#include \"src/compiler/turbofan-graph-visualizer.h\"\n#include \"src/compiler/verifier.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TFGraph\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Represents a Turbofan graph for compiler optimizations.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"zone_\",\n                        \"type\": \"Zone*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Memory zone for allocating graph nodes.\"\n                    },\n                    {\n                        \"name\": \"start_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The start node of the graph.\"\n                    },\n                    {\n                        \"name\": \"end_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The end node of the graph.\"\n                    },\n                    {\n                        \"name\": \"mark_max_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Maximum mark value used during graph traversal.\"\n                    },\n                    {\n                        \"name\": \"next_node_id_\",\n                        \"type\": \"NodeId\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The ID to assign to the next node created.\"\n                    },\n                    {\n                        \"name\": \"decorators_\",\n                        \"type\": \"ZoneVector<GraphDecorator*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"List of graph decorators to apply to new nodes.\"\n                    },\n                    {\n                        \"name\": \"has_simd_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Flag indicating if the graph contains SIMD operations.\"\n                    },\n                    {\n                        \"name\": \"simd_stores_\",\n                        \"type\": \"ZoneVector<Node*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"List of SIMD store nodes in the graph.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Zone\",\n                    \"Node\",\n                    \"Operator\",\n                    \"GraphDecorator\",\n                    \"ZoneVector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\nnamespace internal {\nnamespace compiler {\n\nclass TFGraph {\n public:\n  TFGraph(Zone* zone);\n\n  void Decorate(Node* node);\n  void AddDecorator(GraphDecorator* decorator);\n  void RemoveDecorator(GraphDecorator* decorator);\n\n  Node* NewNode(const Operator* op, int input_count, Node* const* inputs,\n                       bool incomplete);\n  Node* NewNodeUnchecked(const Operator* op, int input_count,\n                                Node* const* inputs, bool incomplete);\n  Node* CloneNode(const Node* node);\n\n  NodeId NextNodeId();\n\n  void Print() const;\n\n  void RecordSimdStore(Node* store);\n  ZoneVector<Node*> const& GetSimdStoreNodes();\n\n private:\n  Zone* zone_;\n  Node* start_;\n  Node* end_;\n  int mark_max_;\n  NodeId next_node_id_;\n  ZoneVector<GraphDecorator*> decorators_;\n  bool has_simd_;\n  ZoneVector<Node*> simd_stores_;\n};\n\n}  // namespace compiler\n}  // namespace internal\n}  // namespace v8\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"TFGraph::TFGraph\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Constructor for the TFGraph class.\",\n                \"logic\": \"Initializes the TFGraph with a memory zone and sets default values for its members.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"zone\",\n                        \"type\": \"Zone*\",\n                        \"purpose\": \"The memory zone to use for allocating graph nodes.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"Zone\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nTFGraph::TFGraph(Zone* zone)\n    : zone_(zone),\n      start_(nullptr),\n      end_(nullptr),\n      mark_max_(0),\n      next_node_id_(0),\n      decorators_(zone),\n      has_simd_(false),\n      simd_stores_(zone) {\n  // Nodes use compressed pointers, so zone must support pointer compression.\n  // If the check fails, ensure the zone is created with kCompressGraphZone\n  // flag.\n  CHECK_IMPLIES(kCompressGraphZone, zone->supports_compression());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::Decorate\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Applies graph decorators to a node.\",\n                \"logic\": \"Iterates through the list of graph decorators and calls their Decorate method on the given node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The node to decorate.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"GraphDecorator\",\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TFGraph::Decorate(Node* node) {\n  for (GraphDecorator* const decorator : decorators_) {\n    decorator->Decorate(node);\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::AddDecorator\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Adds a graph decorator to the list of decorators.\",\n                \"logic\": \"Pushes the decorator to the end of decorators_ vector\",\n                \"parameters\": [\n                    {\n                        \"name\": \"decorator\",\n                        \"type\": \"GraphDecorator*\",\n                        \"purpose\": \"The decorator to add.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"GraphDecorator\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TFGraph::AddDecorator(GraphDecorator* decorator) {\n  decorators_.push_back(decorator);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::RemoveDecorator\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Removes a graph decorator from the list of decorators.\",\n                \"logic\": \"Finds the decorator in the vector and removes it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"decorator\",\n                        \"type\": \"GraphDecorator*\",\n                        \"purpose\": \"The decorator to remove.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"GraphDecorator\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TFGraph::RemoveDecorator(GraphDecorator* decorator) {\n  auto const it = std::find(decorators_.begin(), decorators_.end(), decorator);\n  DCHECK(it != decorators_.end());\n  decorators_.erase(it);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::NewNode\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Creates a new node in the graph with verification.\",\n                \"logic\": \"Creates a new node using NewNodeUnchecked and then verifies it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator*\",\n                        \"purpose\": \"The operator for the node.\"\n                    },\n                    {\n                        \"name\": \"input_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of inputs to the node.\"\n                    },\n                    {\n                        \"name\": \"inputs\",\n                        \"type\": \"Node* const*\",\n                        \"purpose\": \"The array of input nodes.\"\n                    },\n                    {\n                        \"name\": \"incomplete\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"Whether the node is incomplete.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"The newly created node.\"\n                },\n                \"dependencies\": [\n                    \"Operator\",\n                    \"Node\",\n                    \"Verifier\",\n                    \"TFGraph::NewNodeUnchecked\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* TFGraph::NewNode(const Operator* op, int input_count, Node* const* inputs,\n                       bool incomplete) {\n  Node* node = NewNodeUnchecked(op, input_count, inputs, incomplete);\n  Verifier::VerifyNode(node);\n  return node;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::NewNodeUnchecked\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Creates a new node in the graph without verification.\",\n                \"logic\": \"Allocates a new node using Node::New, decorates it, and returns it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"const Operator*\",\n                        \"purpose\": \"The operator for the node.\"\n                    },\n                    {\n                        \"name\": \"input_count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of inputs to the node.\"\n                    },\n                    {\n                        \"name\": \"inputs\",\n                        \"type\": \"Node* const*\",\n                        \"purpose\": \"The array of input nodes.\"\n                    },\n                    {\n                        \"name\": \"incomplete\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"Whether the node is incomplete.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"The newly created node.\"\n                },\n                \"dependencies\": [\n                    \"Operator\",\n                    \"Node\",\n                    \"TFGraph::Decorate\",\n                    \"Node::New\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* TFGraph::NewNodeUnchecked(const Operator* op, int input_count,\n                                Node* const* inputs, bool incomplete) {\n  Node* const node =\n      Node::New(zone(), NextNodeId(), op, input_count, inputs, incomplete);\n  Decorate(node);\n  return node;\n}\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::CloneNode\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Clones an existing node in the graph.\",\n                \"logic\": \"Clones a node using Node::Clone, decorates it, and returns it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"node\",\n                        \"type\": \"const Node*\",\n                        \"purpose\": \"The node to clone.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"The cloned node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"TFGraph::Decorate\",\n                    \"Node::Clone\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* TFGraph::CloneNode(const Node* node) {\n  DCHECK_NOT_NULL(node);\n  Node* const clone = Node::Clone(zone(), NextNodeId(), node);\n  Decorate(clone);\n  return clone;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::NextNodeId\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Generates the next unique node ID.\",\n                \"logic\": \"Increments the next_node_id_ counter and returns the new value.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"NodeId\",\n                    \"description\": \"The next unique node ID.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nNodeId TFGraph::NextNodeId() {\n  // A node's id is internally stored in a bit field using fewer bits than\n  // NodeId (see Node::IdField). Hence the addition below won't ever overflow.\n  DCHECK_LT(next_node_id_, std::numeric_limits<NodeId>::max());\n  return next_node_id_++;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::Print\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Prints the graph to the standard output.\",\n                \"logic\": \"Uses StdoutStream and AsRPO to print the graph in reverse postorder.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"AsRPO\",\n                    \"StdoutStream\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TFGraph::Print() const { StdoutStream{} << AsRPO(*this); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::RecordSimdStore\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Records a SIMD store node.\",\n                \"logic\": \"Adds the store node to the simd_stores_ vector.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"store\",\n                        \"type\": \"Node*\",\n                        \"purpose\": \"The SIMD store node to record.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"None\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TFGraph::RecordSimdStore(Node* store) { simd_stores_.push_back(store); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TFGraph::GetSimdStoreNodes\",\n                \"parent\": \"TFGraph\",\n                \"about\": \"Returns the vector of SIMD store nodes.\",\n                \"logic\": \"Returns a const reference to the simd_stores_ vector.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"ZoneVector<Node*> const&\",\n                    \"description\": \"The vector of SIMD store nodes.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"ZoneVector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nZoneVector<Node*> const& TFGraph::GetSimdStoreNodes() { return simd_stores_; }\n        ]]></code>\n    </func>\n</file>\n```"
}