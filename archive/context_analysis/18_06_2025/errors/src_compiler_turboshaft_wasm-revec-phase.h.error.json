{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/wasm-revec-phase.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 31, column 47",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/wasm-revec-phase.h\",\n        \"file_name\": \"wasm-revec-phase.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the WasmRevecPhase, responsible for re-vectorization in the Turboshaft compiler pipeline for WebAssembly.  Also declares a WasmRevecVerifier class which can be used to verify the graph after the re-vectorization phase.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for phase definition and conditional compilation based on WebAssembly enablement.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/phase.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmRevecVerifier\",\n            \"about\": \"A class to verify the graph after the WasmRevec phase. It takes a handler function that is called with the graph to perform the verification.\",\n            \"attributes\": [\n                {\n                    \"name\": \"handler_\",\n                    \"type\": \"std::function<void(const Graph&)>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The handler function that performs the verification.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Graph\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass WasmRevecVerifier {\n public:\n  explicit WasmRevecVerifier(std::function<void(const Graph&)> handler)\n      : handler_(handler) {}\n\n  void Verify(const Graph& graph) {\n    if (handler_) handler_(graph);\n  }\n\n private:\n  std::function<void(const Graph&)> handler_ = nullptr;\n};\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"WasmRevecPhase\",\n            \"about\": \"Represents the re-vectorization phase in the Turboshaft compiler pipeline for WebAssembly.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"PipelineData\",\n                \"Zone\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct WasmRevecPhase {\n  DECL_TURBOSHAFT_PHASE_CONSTANTS(WasmRevec)\n\n  void Run(PipelineData* data, Zone* temp_zone);\n};\n        ]]></code>\n    </struct>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Graph\",\n                \"about\": \"Represents the compiler's graph data structure.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Graph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"PipelineData\",\n                \"about\": \"Carries data between compiler pipeline phases.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class PipelineData {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Memory allocation zone.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}