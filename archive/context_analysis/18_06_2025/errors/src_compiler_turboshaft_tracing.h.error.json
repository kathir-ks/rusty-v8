{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/tracing.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 52, column 6",
  "raw_response": "```xml\n<file>\n  <metadata>\n    {\n      \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/tracing.h\",\n      \"file_name\": \"tracing.h\",\n      \"language\": \"cpp\",\n      \"purpose\": \"Provides a class for tracing and debugging Turboshaft compilation graphs, allowing printing of per-operation and per-block data to a JSON file.\"\n    }\n  </metadata>\n  <imports>\n    <metadata>\n      {\n        \"language\": \"cpp\",\n        \"purpose\": \"Includes necessary headers for base contextual classes, optimized compilation information, graph visualization, and the Turboshaft graph representation.\"\n      }\n    </metadata>\n    <code><![CDATA[\n#include \"src/base/contextual.h\"\n#include \"src/codegen/optimized-compilation-info.h\"\n#include \"src/compiler/turbofan-graph-visualizer.h\"\n#include \"src/compiler/turboshaft/graph-visualizer.h\"\n#include \"src/compiler/turboshaft/graph.h\"\n    ]]></code>\n  </imports>\n  <class>\n    <metadata>\n      {\n        \"language\": \"cpp\",\n        \"type\": \"class\",\n        \"name\": \"Tracing\",\n        \"extends\": \"base::ContextualClass<Tracing>\",\n        \"about\": \"Provides tracing functionality for Turboshaft graphs, allowing custom data printing per operation and block.\",\n        \"attributes\": [\n          {\n            \"name\": \"info_\",\n            \"type\": \"OptimizedCompilationInfo*\",\n            \"access\": \"private\",\n            \"purpose\": \"Pointer to the OptimizedCompilationInfo object, providing access to compilation settings and tracing flags.\"\n          }\n        ],\n        \"dependencies\": [\n          \"base::ContextualClass\",\n          \"OptimizedCompilationInfo\",\n          \"Graph\",\n          \"OpIndex\",\n          \"BlockIndex\",\n          \"TurboJsonFile\",\n          \"PrintTurboshaftCustomDataPerOperation\",\n          \"PrintTurboshaftCustomDataPerBlock\"\n        ]\n      }\n    </metadata>\n    <code><![CDATA[\nclass Tracing : public base::ContextualClass<Tracing> {\n public:\n  explicit Tracing(OptimizedCompilationInfo* info) : info_(info) {\n    DCHECK_NOT_NULL(info_);\n  }\n\n  using OperationDataPrinter =\n      std::function<bool(std::ostream&, const Graph&, OpIndex)>;\n  using BlockDataPrinter =\n      std::function<bool(std::ostream&, const Graph&, BlockIndex)>;\n\n  inline bool is_enabled() const { return info_->trace_turbo_json(); }\n\n  void PrintPerOperationData(const char* data_name, const Graph& graph,\n                             OperationDataPrinter printer) {\n    DCHECK(printer);\n    if (!is_enabled()) return;\n    TurboJsonFile json_of(info_, std::ios_base::app);\n    PrintTurboshaftCustomDataPerOperation(json_of, data_name, graph, printer);\n  }\n  void PrintPerBlockData(const char* data_name, const Graph& graph,\n                         BlockDataPrinter printer) {\n    DCHECK(printer);\n    if (!is_enabled()) return;\n    TurboJsonFile json_of(info_, std::ios_base::app);\n    PrintTurboshaftCustomDataPerBlock(json_of, data_name, graph, printer);\n  }\n\n private:\n  OptimizedCompilationInfo* info_;\n};\n    ]]></code>\n  </class>\n  <dependencies>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"OptimizedCompilationInfo\",\n          \"about\": \"Carries compilation information and settings.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class OptimizedCompilationInfo {\n          public:\n            bool trace_turbo_json() const;\n        };\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"Graph\",\n          \"about\": \"Represents the Turboshaft graph.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class Graph {};\n      ]]></code>\n    </class>\n    <class>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"class\",\n          \"name\": \"TurboJsonFile\",\n          \"about\": \"Manages writing to a JSON file for Turboshaft tracing.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        class TurboJsonFile {\n          public:\n            TurboJsonFile(OptimizedCompilationInfo* info, std::ios_base::openmode mode);\n        };\n      ]]></code>\n    </class>\n    <func>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"function\",\n          \"name\": \"PrintTurboshaftCustomDataPerOperation\",\n          \"about\": \"Prints custom data for each operation in the Turboshaft graph.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        void PrintTurboshaftCustomDataPerOperation(TurboJsonFile& json_of, const char* data_name, const Graph& graph, Tracing::OperationDataPrinter printer);\n      ]]></code>\n    </func>\n    <func>\n      <metadata>\n        {\n          \"language\": \"cpp\",\n          \"type\": \"function\",\n          \"name\": \"PrintTurboshaftCustomDataPerBlock\",\n          \"about\": \"Prints custom data for each block in the Turboshaft graph.\"\n        }\n      </metadata>\n      <code><![CDATA[\n        void PrintTurboshaftCustomDataPerBlock(TurboJsonFile& json_of, const char* data_name, const Graph& graph, Tracing::BlockDataPrinter printer);\n      ]]></code>\n    </func>\n  </dependencies>\n</file>\n```"
}