{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/map-inference.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 67, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/map-inference.h\",\n        \"file_name\": \"map-inference.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the MapInference class, which provides access to inferred maps of an object and ensures the reliability of this information via map checks or stability dependencies.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for graph reduction, instance type definitions, and map objects.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/compiler/graph-reducer.h\"\n            #include \"src/objects/instance-type.h\"\n            #include \"src/objects/map.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"MapInference\",\n            \"about\": \"Provides access to inferred maps of an object, ensuring reliability through map checks or stability dependencies.\",\n            \"attributes\": [\n                {\n                    \"name\": \"broker_\",\n                    \"type\": \"JSHeapBroker*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A pointer to the JSHeapBroker, used for accessing the heap.\"\n                },\n                {\n                    \"name\": \"object_\",\n                    \"type\": \"Node*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A pointer to the Node representing the object.\"\n                },\n                {\n                    \"name\": \"maps_\",\n                    \"type\": \"ZoneRefSet<Map>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A set of Maps representing the inferred maps of the object.\"\n                },\n                {\n                    \"name\": \"maps_state_\",\n                    \"type\": \"enum\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Represents the state of the inferred maps (reliable, unreliable needing a guard, or unreliable not needing a guard).\"\n                }\n            ],\n            \"dependencies\": [\n                \"CompilationDependencies\",\n                \"FeedbackSource\",\n                \"JSGraph\",\n                \"JSHeapBroker\",\n                \"Node\",\n                \"ZoneRefSet\",\n                \"Map\",\n                \"InstanceType\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class MapInference {\n             public:\n              MapInference(JSHeapBroker* broker, Node* object, Effect effect);\n\n              // The destructor checks that the information has been made reliable (if\n              // necessary) and force-crashes if not.\n              ~MapInference();\n\n              // Is there any information at all?\n              V8_WARN_UNUSED_RESULT bool HaveMaps() const;\n\n              // These queries don't require a guard.\n              //\n              V8_WARN_UNUSED_RESULT bool AllOfInstanceTypesAreJSReceiver() const;\n              // Here, {type} must not be a String type.\n              V8_WARN_UNUSED_RESULT bool AllOfInstanceTypesAre(InstanceType type) const;\n              V8_WARN_UNUSED_RESULT bool AnyOfInstanceTypesAre(InstanceType type) const;\n\n              // These queries require a guard. (Even instance types are generally not\n              // reliable because of how the representation of a string can change.)\n              V8_WARN_UNUSED_RESULT ZoneRefSet<Map> const& GetMaps();\n              V8_WARN_UNUSED_RESULT bool AllOfInstanceTypes(\n                  std::function<bool(InstanceType)> f);\n              V8_WARN_UNUSED_RESULT bool Is(MapRef expected_map);\n\n              // These methods provide a guard.\n              //\n              // Returns true iff maps were already reliable or stability dependencies were\n              // successfully recorded.\n              V8_WARN_UNUSED_RESULT bool RelyOnMapsViaStability(\n                  CompilationDependencies* dependencies);\n              // Records stability dependencies if possible, otherwise it inserts map\n              // checks. Does nothing if maps were already reliable. Returns true iff\n              // dependencies were taken.\n              bool RelyOnMapsPreferStability(CompilationDependencies* dependencies,\n                                             JSGraph* jsgraph, Effect* effect,\n                                             Control control,\n                                             const FeedbackSource& feedback);\n              // Inserts map checks even if maps were already reliable.\n              void InsertMapChecks(JSGraph* jsgraph, Effect* effect, Control control,\n                                   const FeedbackSource& feedback);\n\n              // Internally marks the maps as reliable (thus bypassing the safety check) and\n              // returns the NoChange reduction. USE THIS ONLY WHEN RETURNING, e.g.:\n              //   if (foo) return inference.NoChange();\n              V8_WARN_UNUSED_RESULT Reduction NoChange();\n\n             private:\n              JSHeapBroker* const broker_;\n              Node* const object_;\n\n              ZoneRefSet<Map> maps_;\n              enum {\n                kReliableOrGuarded,\n                kUnreliableDontNeedGuard,\n                kUnreliableNeedGuard\n              } maps_state_;\n\n              bool Safe() const;\n              void SetNeedGuardIfUnreliable();\n              void SetGuarded();\n\n              V8_WARN_UNUSED_RESULT bool AllOfInstanceTypesUnsafe(\n                  std::function<bool(InstanceType)> f) const;\n              V8_WARN_UNUSED_RESULT bool AnyOfInstanceTypesUnsafe(\n                  std::function<bool(InstanceType)> f) const;\n              V8_WARN_UNUSED_RESULT bool RelyOnMapsHelper(\n                  CompilationDependencies* dependencies, JSGraph* jsgraph, Effect* effect,\n                  Control control, const FeedbackSource& feedback);\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CompilationDependencies\",\n                \"about\": \"Handles compilation dependencies\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class CompilationDependencies {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"FeedbackSource\",\n                \"about\": \"Provides source of feedback\"\n            }\n            </metadata>\n            <code><![CDATA[\n                struct FeedbackSource {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSGraph\",\n                \"about\": \"Represents a JavaScript graph\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class JSGraph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSHeapBroker\",\n                \"about\": \"Provides access to the JS heap\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class JSHeapBroker {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Node\",\n                \"about\": \"Represents a node in the graph\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Node {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ZoneRefSet\",\n                \"about\": \"Reference set allocated in a zone\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class ZoneRefSet {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Map\",\n                \"about\": \"Represents a map object\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Map {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"InstanceType\",\n                \"about\": \"Represents different instance types\"\n            }\n            </metadata>\n            <code><![CDATA[\n                enum InstanceType {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Effect\",\n                \"about\": \"Represents side effects\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Effect {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Control\",\n                \"about\": \"Represents control flow\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Control {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"MapRef\",\n                \"about\": \"Reference to a Map\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class MapRef {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Reduction\",\n                \"about\": \"Represents a reduction result\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Reduction {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}