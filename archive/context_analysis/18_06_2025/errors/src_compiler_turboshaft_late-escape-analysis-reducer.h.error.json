{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/late-escape-analysis-reducer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 37, column 39",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/late-escape-analysis-reducer.h\",\n            \"file_name\": \"late-escape-analysis-reducer.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the LateEscapeAnalysisAnalyzer and LateEscapeAnalysisReducer classes for removing allocations that don't escape in Turboshaft.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for assembler, graph, utils, zone containers, and zone management.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/assembler.h\"\n#include \"src/compiler/turboshaft/graph.h\"\n#include \"src/compiler/turboshaft/utils.h\"\n#include \"src/zone/zone-containers.h\"\n#include \"src/zone/zone.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LateEscapeAnalysisAnalyzer\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Analyzes the graph to identify and remove allocations that have no uses besides initialization stores.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"graph_\",\n                        \"type\": \"Graph&\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Reference to the graph being analyzed.\"\n                    },\n                    {\n                        \"name\": \"phase_zone_\",\n                        \"type\": \"Zone*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the zone used for temporary allocations during the analysis phase.\"\n                    },\n                    {\n                        \"name\": \"alloc_uses_\",\n                        \"type\": \"ZoneAbslFlatHashMap<OpIndex, ZoneVector<OpIndex>>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Maps each allocation to its uses in the graph.\"\n                    },\n                    {\n                        \"name\": \"allocs_\",\n                        \"type\": \"ZoneVector<OpIndex>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores a list of all allocation operations in the graph.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Graph\",\n                    \"Zone\",\n                    \"ZoneAbslFlatHashMap\",\n                    \"ZoneVector\",\n                    \"OpIndex\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass LateEscapeAnalysisAnalyzer {\n public:\n  LateEscapeAnalysisAnalyzer(Graph& graph, Zone* zone)\n      : graph_(graph), phase_zone_(zone), alloc_uses_(zone), allocs_(zone) {}\n\n  void Run();\n\n private:\n  void RecordAllocateUse(OpIndex alloc, OpIndex use);\n\n  void CollectUsesAndAllocations();\n  void FindRemovableAllocations();\n  bool AllocationIsEscaping(OpIndex alloc);\n  bool EscapesThroughUse(OpIndex alloc, OpIndex using_op_idx);\n  void MarkToRemove(OpIndex alloc);\n\n  Graph& graph_;\n  Zone* phase_zone_;\n\n  // {alloc_uses_} records all the uses of each AllocateOp.\n  ZoneAbslFlatHashMap<OpIndex, ZoneVector<OpIndex>> alloc_uses_;\n  // {allocs_} is filled with all of the AllocateOp of the graph, and then\n  // iterated upon to determine which allocations can be removed and which\n  // cannot.\n  ZoneVector<OpIndex> allocs_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LateEscapeAnalysisReducer\",\n                \"extends\": \"Next\",\n                \"implements\": [],\n                \"about\": \"A reducer that performs late escape analysis to remove allocations.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"analyzer_\",\n                        \"type\": \"LateEscapeAnalysisAnalyzer\",\n                        \"access\": \"private\",\n                        \"purpose\": \"An instance of the LateEscapeAnalysisAnalyzer class, used to perform the analysis.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Next\",\n                    \"LateEscapeAnalysisAnalyzer\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <class Next>\nclass LateEscapeAnalysisReducer : public Next {\n public:\n  TURBOSHAFT_REDUCER_BOILERPLATE(LateEscapeAnalysis)\n\n  void Analyze() {\n    analyzer_.Run();\n    Next::Analyze();\n  }\n\n private:\n  LateEscapeAnalysisAnalyzer analyzer_{Asm().modifiable_input_graph(),\n                                       Asm().phase_zone()};\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Graph\",\n                    \"about\": \"Represents the Turboshaft graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Graph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Zone\",\n                    \"about\": \"Memory management zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZoneAbslFlatHashMap\",\n                    \"about\": \"A hash map implemented using a zone allocator.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename K, typename V>\n                class ZoneAbslFlatHashMap {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZoneVector\",\n                    \"about\": \"A vector implemented using a zone allocator.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T>\n                class ZoneVector {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"OpIndex\",\n                    \"about\": \"Index of an operation in the graph.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class OpIndex {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Next\",\n                    \"about\": \"Base class for reducers in a chain.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Next {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}