{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/wasm-turboshaft-compiler.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 50, column 63",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/wasm-turboshaft-compiler.cc\",\n            \"file_name\": \"wasm-turboshaft-compiler.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implements the Turboshaft compiler pipeline for WebAssembly.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for Turboshaft WASM compilation, codegen, compiler phases, and WASM definitions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/wasm-turboshaft-compiler.h\"\n\n#include \"src/codegen/optimized-compilation-info.h\"\n#include \"src/compiler/backend/instruction-selector.h\"\n#include \"src/compiler/common-operator.h\"\n#include \"src/compiler/compiler-source-position-table.h\"\n#include \"src/compiler/machine-operator.h\"\n#include \"src/compiler/node-origin-table.h\"\n#include \"src/compiler/pipeline.h\"\n#include \"src/compiler/turbofan-graph-visualizer.h\"\n// TODO(14108): Remove.\n#include \"src/compiler/wasm-compiler.h\"\n#include \"src/wasm/wasm-engine.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ExecuteTurboshaftWasmCompilation\",\n                \"parent\": null,\n                \"about\": \"Executes the Turboshaft compilation pipeline for WebAssembly.\",\n                \"logic\": \"This function triggers the Turboshaft pipeline to generate WASM code.  It receives a compilation environment, compilation data, detected features and counters, and then calls the Pipeline::GenerateWasmCode.  It asserts that compilation succeeded and the tier is Turbofan. Finally moves the assumptions.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"env\",\n                        \"type\": \"wasm::CompilationEnv*\",\n                        \"purpose\": \"The WebAssembly compilation environment.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"compiler::WasmCompilationData&\",\n                        \"purpose\": \"The WebAssembly compilation data.\"\n                    },\n                    {\n                        \"name\": \"detected\",\n                        \"type\": \"wasm::WasmDetectedFeatures*\",\n                        \"purpose\": \"The detected WASM features.\"\n                    },\n                    {\n                        \"name\": \"counters\",\n                        \"type\": \"Counters*\",\n                        \"purpose\": \"Performance counters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"wasm::WasmCompilationResult\",\n                    \"description\": \"The result of the WebAssembly compilation.\"\n                },\n                \"dependencies\": [\n                    \"Pipeline\",\n                    \"wasm::CompilationEnv\",\n                    \"compiler::WasmCompilationData\",\n                    \"wasm::WasmDetectedFeatures\",\n                    \"Counters\",\n                    \"wasm::WasmCompilationResult\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nwasm::WasmCompilationResult ExecuteTurboshaftWasmCompilation(\n    wasm::CompilationEnv* env, compiler::WasmCompilationData& data,\n    wasm::WasmDetectedFeatures* detected, Counters* counters) {\n  wasm::WasmCompilationResult result =\n      Pipeline::GenerateWasmCode(env, data, detected, counters);\n  DCHECK(result.succeeded());\n  DCHECK_EQ(wasm::ExecutionTier::kTurbofan, result.result_tier);\n  DCHECK_NULL(result.assumptions);\n  result.assumptions = std::move(data.assumptions);\n  DCHECK_IMPLIES(result.assumptions, !result.assumptions->empty());\n  return result;\n}\n        ]]></code>\n    </func>\n</file>\n```"
}