{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/runtime-macro-shims.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 454, column 50",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/runtime-macro-shims.h\",\n        \"file_name\": \"runtime-macro-shims.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Contains runtime implementations of macros defined as external in Torque, enabling generated runtime code to function.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for integer types and utility functions.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <cstdint>\n\n#include \"src/numbers/integer-literal.h\"\n#include \"src/utils/utils.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"BoolConstant\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Returns the boolean value passed as argument.\",\n            \"logic\": \"Simply returns the input boolean.\",\n            \"parameters\": [\n                {\n                    \"name\": \"b\",\n                    \"type\": \"bool\",\n                    \"purpose\": \"The boolean value to return.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"The boolean input value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool BoolConstant(bool b) { return b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ChangeInt32ToIntPtr\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Casts an int32_t to an intptr_t.\",\n            \"logic\": \"Performs a direct cast from int32_t to intptr_t.\",\n            \"parameters\": [\n                {\n                    \"name\": \"i\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The integer to be cast.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"intptr_t\",\n                \"description\": \"The cast integer.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline intptr_t ChangeInt32ToIntPtr(int32_t i) { return i; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ChangeUint32ToWord\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Casts a uint32_t to a uintptr_t.\",\n            \"logic\": \"Performs a direct cast from uint32_t to uintptr_t.\",\n            \"parameters\": [\n                {\n                    \"name\": \"u\",\n                    \"type\": \"uint32_t\",\n                    \"purpose\": \"The unsigned integer to be cast.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"uintptr_t\",\n                \"description\": \"The cast unsigned integer.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline uintptr_t ChangeUint32ToWord(uint32_t u) { return u; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IntPtrAdd\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Adds two intptr_t values.\",\n            \"logic\": \"Performs standard integer addition.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"intptr_t\",\n                \"description\": \"The sum of the two operands.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline intptr_t IntPtrAdd(intptr_t a, intptr_t b) { return a + b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IntPtrMul\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Multiplies two intptr_t values.\",\n            \"logic\": \"Performs standard integer multiplication.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"intptr_t\",\n                \"description\": \"The product of the two operands.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline intptr_t IntPtrMul(intptr_t a, intptr_t b) { return a * b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IntPtrLessThan\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Compares two intptr_t values for less than.\",\n            \"logic\": \"Performs standard integer comparison.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if a is less than b, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool IntPtrLessThan(intptr_t a, intptr_t b) { return a < b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IntPtrLessThanOrEqual\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Compares two intptr_t values for less than or equal.\",\n            \"logic\": \"Performs standard integer comparison.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if a is less than or equal to b, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool IntPtrLessThanOrEqual(intptr_t a, intptr_t b) { return a <= b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"Signed\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Casts a uintptr_t to a intptr_t.\",\n            \"logic\": \"Performs a static cast from uintptr_t to intptr_t.\",\n            \"parameters\": [\n                {\n                    \"name\": \"u\",\n                    \"type\": \"uintptr_t\",\n                    \"purpose\": \"The unsigned integer to be cast.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"intptr_t\",\n                \"description\": \"The cast integer.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline intptr_t Signed(uintptr_t u) { return static_cast<intptr_t>(u); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"SmiUntag\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Untags a Smi value.\",\n            \"logic\": \"Calls the value() method to retrieve the raw integer value from the Smi object.\",\n            \"parameters\": [\n                {\n                    \"name\": \"s\",\n                    \"type\": \"Smi\",\n                    \"purpose\": \"The Smi object to untag.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"The untagged integer value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Smi>\ninline int32_t SmiUntag(Smi s) {\n  return s.value();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"UintPtrLessThan\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Compares two uintptr_t values for less than.\",\n            \"logic\": \"Performs standard unsigned integer comparison.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"uintptr_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"uintptr_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if a is less than b, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool UintPtrLessThan(uintptr_t a, uintptr_t b) { return a < b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"Unsigned\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Casts an int32_t to a uint32_t.\",\n            \"logic\": \"Performs a static cast from int32_t to uint32_t.\",\n            \"parameters\": [\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The integer to be cast.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"uint32_t\",\n                \"description\": \"The cast unsigned integer.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline uint32_t Unsigned(int32_t s) { return static_cast<uint32_t>(s); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"Unsigned\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Casts an intptr_t to a uintptr_t. Only defined for 64 bit hosts.\",\n            \"logic\": \"Performs a static cast from intptr_t to uintptr_t.\",\n            \"parameters\": [\n                {\n                    \"name\": \"s\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The integer to be cast.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"uintptr_t\",\n                \"description\": \"The cast unsigned integer.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#if V8_HOST_ARCH_64_BIT\ninline uintptr_t Unsigned(intptr_t s) { return static_cast<uintptr_t>(s); }\n#endif\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"Word32Equal\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Compares two uint32_t values for equality.\",\n            \"logic\": \"Performs standard integer comparison.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"uint32_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"uint32_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if a is equal to b, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool Word32Equal(uint32_t a, uint32_t b) { return a == b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"Word32NotEqual\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Compares two uint32_t values for inequality.\",\n            \"logic\": \"Performs standard integer comparison.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"uint32_t\",\n                    \"purpose\": \"The first operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"uint32_t\",\n                    \"purpose\": \"The second operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if a is not equal to b, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline bool Word32NotEqual(uint32_t a, uint32_t b) { return a != b; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ConstexprIntegerLiteralToInt32\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Converts a ConstexprIntegerLiteral to an int32_t.\",\n            \"logic\": \"Uses the To<int32_t>() method to perform the conversion.\",\n            \"parameters\": [\n                {\n                    \"name\": \"i\",\n                    \"type\": \"const IntegerLiteral&\",\n                    \"purpose\": \"The IntegerLiteral to convert.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"The converted integer value.\"\n            },\n            \"dependencies\": [\n                \"IntegerLiteral\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline int32_t ConstexprIntegerLiteralToInt32(const IntegerLiteral& i) {\n  return i.To<int32_t>();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ConstexprIntegerLiteralToInt31\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Converts a ConstexprIntegerLiteral to an int31_t.\",\n            \"logic\": \"Converts the IntegerLiteral to an int32_t first and then to an int31_t.\",\n            \"parameters\": [\n                {\n                    \"name\": \"i\",\n                    \"type\": \"const IntegerLiteral&\",\n                    \"purpose\": \"The IntegerLiteral to convert.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int31_t\",\n                \"description\": \"The converted integer value.\"\n            },\n            \"dependencies\": [\n                \"IntegerLiteral\",\n                \"ConstexprIntegerLiteralToInt32\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline int31_t ConstexprIntegerLiteralToInt31(const IntegerLiteral& i) {\n  return int31_t(ConstexprIntegerLiteralToInt32(i));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ConstexprIntegerLiteralToIntptr\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Converts a ConstexprIntegerLiteral to an intptr_t.\",\n            \"logic\": \"Uses the To<intptr_t>() method to perform the conversion.\",\n            \"parameters\": [\n                {\n                    \"name\": \"i\",\n                    \"type\": \"const IntegerLiteral&\",\n                    \"purpose\": \"The IntegerLiteral to convert.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"intptr_t\",\n                \"description\": \"The converted integer value.\"\n            },\n            \"dependencies\": [\n                \"IntegerLiteral\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline intptr_t ConstexprIntegerLiteralToIntptr(const IntegerLiteral& i) {\n  return i.To<intptr_t>();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"Print\",\n            \"parent\": \"TorqueRuntimeMacroShims::CodeStubAssembler\",\n            \"about\": \"Prints a string to the console.\",\n            \"logic\": \"Uses PrintF to print the string.\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The string to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline void Print(const char* str) { PrintF(\"%s\", str); }\n        ]]></code>\n    </func>\n</file>\n```"
}