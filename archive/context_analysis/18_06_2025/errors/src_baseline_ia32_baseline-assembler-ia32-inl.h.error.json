{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/baseline/ia32/baseline-assembler-ia32-inl.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/baseline/ia32/baseline-assembler-ia32-inl.h\",\n            \"file_name\": \"baseline-assembler-ia32-inl.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines inline methods for the BaselineAssembler class on the ia32 architecture, used for generating baseline code in V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary header files for baseline code generation, ia32 registers, interface descriptors, feedback vectors and literal objects.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/baseline/baseline-assembler.h\"\n#include \"src/codegen/ia32/register-ia32.h\"\n#include \"src/codegen/interface-descriptors.h\"\n#include \"src/objects/feedback-vector.h\"\n#include \"src/objects/literal-objects-inl.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BaselineAssembler::ScratchRegisterScope\",\n                \"about\": \"Manages scratch registers within a BaselineAssembler to avoid register conflicts.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"assembler_\",\n                        \"type\": \"BaselineAssembler*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the BaselineAssembler instance.\"\n                    },\n                    {\n                        \"name\": \"prev_scope_\",\n                        \"type\": \"ScratchRegisterScope*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the previous ScratchRegisterScope in a stack.\"\n                    },\n                    {\n                        \"name\": \"registers_used_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Keeps track of the number of scratch registers currently in use.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"BaselineAssembler\",\n                    \"detail::kNumScratchRegisters\",\n                    \"detail::kScratchRegisters\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass BaselineAssembler::ScratchRegisterScope {\n public:\n  explicit ScratchRegisterScope(BaselineAssembler* assembler)\n      : assembler_(assembler),\n        prev_scope_(assembler->scratch_register_scope_),\n        registers_used_(prev_scope_ == nullptr ? 0\n                                               : prev_scope_->registers_used_) {\n    assembler_->scratch_register_scope_ = this;\n  }\n  ~ScratchRegisterScope() { assembler_->scratch_register_scope_ = prev_scope_; }\n\n  Register AcquireScratch() {\n    DCHECK_LT(registers_used_, detail::kNumScratchRegisters);\n    return detail::kScratchRegisters[registers_used_++];\n  }\n\n private:\n  BaselineAssembler* assembler_;\n  ScratchRegisterScope* prev_scope_;\n  int registers_used_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"RegisterFrameOperand\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Calculates the MemOperand for accessing a register in the interpreter frame.\",\n                \"logic\": \"Calculates the memory offset using the provided interpreter register and the system pointer size, relative to the ebp register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"interpreter_register\",\n                        \"type\": \"interpreter::Register\",\n                        \"purpose\": \"The interpreter register to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MemOperand\",\n                    \"description\": \"A MemOperand representing the memory location of the register in the frame.\"\n                },\n                \"dependencies\": [\n                    \"interpreter::Register\",\n                    \"kSystemPointerSize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nMemOperand BaselineAssembler::RegisterFrameOperand(\n    interpreter::Register interpreter_register) {\n  return MemOperand(ebp, interpreter_register.ToOperand() * kSystemPointerSize);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"RegisterFrameAddress\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Loads the address of an interpreter register in the frame into a scratch register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"interpreter_register\",\n                        \"type\": \"interpreter::Register\",\n                        \"purpose\": \"The interpreter register to access.\"\n                    },\n                    {\n                        \"name\": \"rscratch\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The scratch register to load the address into.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"interpreter::Register\",\n                    \"kSystemPointerSize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::RegisterFrameAddress(\n    interpreter::Register interpreter_register, Register rscratch) {\n  return __ lea(rscratch, MemOperand(ebp, interpreter_register.ToOperand() *\n                                              kSystemPointerSize));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"FeedbackVectorOperand\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Returns a MemOperand representing the location of the feedback vector in the baseline frame.\",\n                \"return\": {\n                    \"type\": \"MemOperand\",\n                    \"description\": \"A MemOperand pointing to the feedback vector.\"\n                },\n                \"dependencies\": [\n                    \"BaselineFrameConstants::kFeedbackVectorFromFp\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nMemOperand BaselineAssembler::FeedbackVectorOperand() {\n  return MemOperand(ebp, BaselineFrameConstants::kFeedbackVectorFromFp);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"FeedbackCellOperand\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Returns a MemOperand representing the location of the feedback cell in the baseline frame.\",\n                \"return\": {\n                    \"type\": \"MemOperand\",\n                    \"description\": \"A MemOperand pointing to the feedback cell.\"\n                },\n                \"dependencies\": [\n                    \"BaselineFrameConstants::kFeedbackCellFromFp\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nMemOperand BaselineAssembler::FeedbackCellOperand() {\n  return MemOperand(ebp, BaselineFrameConstants::kFeedbackCellFromFp);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"Bind\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Binds a label to the current code position.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"label\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The label to bind.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Bind(Label* label) { __ bind(label); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpTarget\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Inserts a no-op instruction as a jump target (NOP on ia32).\",\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpTarget() {\n  // NOP on ia32.\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"Jump\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Performs an unconditional jump to a label.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::Jump(Label* target, Label::Distance distance) {\n  __ jmp(target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfRoot\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the value in the register is equal to a root value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value to check.\"\n                    },\n                    {\n                        \"name\": \"index\",\n                        \"type\": \"RootIndex\",\n                        \"purpose\": \"The index of the root to compare against.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfRoot(Register value, RootIndex index,\n                                   Label* target, Label::Distance distance) {\n  __ JumpIfRoot(value, index, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfNotRoot\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the value in the register is not equal to a root value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value to check.\"\n                    },\n                    {\n                        \"name\": \"index\",\n                        \"type\": \"RootIndex\",\n                        \"purpose\": \"The index of the root to compare against.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfNotRoot(Register value, RootIndex index,\n                                      Label* target, Label::Distance distance) {\n  __ JumpIfNotRoot(value, index, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfSmi\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the value in the register is a Smi.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value to check.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfSmi(Register value, Label* target,\n                                  Label::Distance distance) {\n  __ JumpIfSmi(value, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfImmediate\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if a condition is met between a register and an immediate value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"left\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value to check.\"\n                    },\n                    {\n                        \"name\": \"right\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The immediate value to compare against.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right,\n                                        Label* target,\n                                        Label::Distance distance) {\n  __ cmp(left, Immediate(right));\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfNotSmi\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the value in the register is not a Smi.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value to check.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfNotSmi(Register value, Label* target,\n                                     Label::Distance distance) {\n  __ JumpIfNotSmi(value, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"TestAndBranch\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Performs a bitwise AND test and jumps to a target label if the condition is met.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value to test.\"\n                    },\n                    {\n                        \"name\": \"mask\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The bitmask to apply.\"\n                    },\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check for the jump.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc,\n                                      Label* target, Label::Distance distance) {\n  if ((mask & 0xff) == mask) {\n    __ test_b(value, Immediate(mask));\n  } else {\n    __ test(value, Immediate(mask));\n  }\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIf\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if a condition is met between a register and an operand.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The left-hand side register.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"Operand\",\n                        \"purpose\": \"The right-hand side operand.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand& rhs,\n                               Label* target, Label::Distance distance) {\n  __ cmp(lhs, rhs);\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfObjectTypeFast\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if an object's type matches the expected instance type.  Uses a scratch register.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"object\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the object.\"\n                    },\n                    {\n                        \"name\": \"instance_type\",\n                        \"type\": \"InstanceType\",\n                        \"purpose\": \"The expected instance type.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"ScratchRegisterScope\",\n                    \"JumpIfObjectType\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object,\n                                             InstanceType instance_type,\n                                             Label* target,\n                                             Label::Distance distance) {\n  ScratchRegisterScope temps(this);\n  Register scratch = temps.AcquireScratch();\n  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfObjectType\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if an object's type matches the expected instance type.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"object\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the object.\"\n                    },\n                    {\n                        \"name\": \"instance_type\",\n                        \"type\": \"InstanceType\",\n                        \"purpose\": \"The expected instance type.\"\n                    },\n                    {\n                        \"name\": \"map\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register to store the object's map.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfObjectType(Condition cc, Register object,\n                                         InstanceType instance_type,\n                                         Register map, Label* target,\n                                         Label::Distance distance) {\n  __ AssertNotSmi(object);\n  __ CmpObjectType(object, instance_type, map);\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfInstanceType\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if an object's instance type matches the expected instance type.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"map\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the map.\"\n                    },\n                    {\n                        \"name\": \"instance_type\",\n                        \"type\": \"InstanceType\",\n                        \"purpose\": \"The expected instance type.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfInstanceType(Condition cc, Register map,\n                                           InstanceType instance_type,\n                                           Label* target,\n                                           Label::Distance distance) {\n  if (v8_flags.debug_code) {\n    __ movd(xmm0, eax);\n    __ AssertNotSmi(map);\n    __ CmpObjectType(map, MAP_TYPE, eax);\n    __ Assert(equal, AbortReason::kUnexpectedValue);\n    __ movd(eax, xmm0);\n  }\n  __ CmpInstanceType(map, instance_type);\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfPointer\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if a condition is met between a register and a memory operand (pointer comparison).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value.\"\n                    },\n                    {\n                        \"name\": \"operand\",\n                        \"type\": \"MemOperand\",\n                        \"purpose\": \"The memory operand to compare against.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"JumpIf\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfPointer(Condition cc, Register value,\n                                      MemOperand operand, Label* target,\n                                      Label::Distance distance) {\n  JumpIf(cc, value, operand, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfSmi\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the value in a register is equal to a given Smi value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value.\"\n                    },\n                    {\n                        \"name\": \"smi\",\n                        \"type\": \"Tagged<Smi>\",\n                        \"purpose\": \"The Smi value to compare against.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfSmi(Condition cc, Register value, Tagged<Smi> smi,\n                                  Label* target, Label::Distance distance) {\n  if (smi.value() == 0) {\n    __ test(value, value);\n  } else {\n    __ cmp(value, Immediate(smi));\n  }\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfSmi\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the values in two registers are equal and both are Smis.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The left-hand side register.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The right-hand side register.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs,\n                                  Label* target, Label::Distance distance) {\n  __ AssertSmi(lhs);\n  __ AssertSmi(rhs);\n  __ cmp(lhs, rhs);\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfTagged\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if a condition is met between a register and a memory operand (tagged value comparison - register compared to memory location).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the tagged value.\"\n                    },\n                    {\n                        \"name\": \"operand\",\n                        \"type\": \"MemOperand\",\n                        \"purpose\": \"The memory operand representing the tagged value.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfTagged(Condition cc, Register value,\n                                     MemOperand operand, Label* target,\n                                     Label::Distance distance) {\n  __ cmp(operand, value);\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfTagged\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if a condition is met between a register and a memory operand (tagged value comparison - memory location compared to register).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"operand\",\n                        \"type\": \"MemOperand\",\n                        \"purpose\": \"The memory operand representing the tagged value.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the tagged value.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n                        \"name\": \"distance\",\n                        \"type\": \"Label::Distance\",\n                        \"purpose\": \"The distance hint for the jump.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand,\n                                     Register value, Label* target,\n                                     Label::Distance distance) {\n  __ cmp(operand, value);\n  __ j(cc, target, distance);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"JumpIfByte\",\n                \"parent\": \"BaselineAssembler\",\n                \"about\": \"Jumps to a target label if the value in a register matches a given byte value, based on a condition.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"cc\",\n                        \"type\": \"Condition\",\n                        \"purpose\": \"The condition to check.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Register\",\n                        \"purpose\": \"The register containing the value.\"\n                    },\n                    {\n                        \"name\": \"byte\",\n                        \"type\": \"int32_t\",\n                        \"purpose\": \"The byte value to compare against.\"\n                    },\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"Label*\",\n                        \"purpose\": \"The target label to jump to.\"\n                    },\n                    {\n"
}