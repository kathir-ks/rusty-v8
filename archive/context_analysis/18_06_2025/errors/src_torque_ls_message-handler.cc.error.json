{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message-handler.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message-handler.cc\",\n        \"file_name\": \"message-handler.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Handles messages for the Torque language server, including initialization, file list updates, goto definition requests, and document symbol requests.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and Torque-specific headers for language server functionality.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <algorithm>\n#include \"src/torque/ls/message-handler.h\"\n\n#include \"src/torque/ls/globals.h\"\n#include \"src/torque/ls/json-parser.h\"\n#include \"src/torque/ls/message-pipe.h\"\n#include \"src/torque/ls/message.h\"\n#include \"src/torque/server-data.h\"\n#include \"src/torque/source-positions.h\"\n#include \"src/torque/torque-compiler.h\"\n        ]]></code>\n    </imports>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"DiagnosticsFiles\",\n                \"about\": \"A class or type alias (depending on EXPORT_CONTEXTUAL_VARIABLE macro) used to store diagnostics file paths.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class DiagnosticsFiles {\n                    public:\n                        static std::vector<SourceId>& Get();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourceFileMap\",\n                \"about\": \"Manages the mapping between SourceIds and file paths.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class SourceFileMap {\n                    public:\n                        static std::string AbsolutePath(const SourceId& source_id);\n                        static SourceId GetSourceId(const std::string& uri);\n                        static SourceFileMap& Get();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueCompilerOptions\",\n                \"about\": \"Options to configure the Torque compiler\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    struct TorqueCompilerOptions {\n                        std::string output_directory;\n                        bool collect_language_server_data;\n                        bool force_assert_statements;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueCompilerResult\",\n                \"about\": \"The result of a torque compilation\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    struct TorqueCompilerResult {\n                        std::vector<TorqueMessage> messages;\n                        std::unique_ptr<LanguageServerData> language_server_data;\n                        std::unique_ptr<SourceFileMap> source_file_map;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueMessage\",\n                \"about\": \"Represents a message (error, warning, etc.) from the Torque compiler.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    struct TorqueMessage {\n                        enum class Kind {\n                            kError,\n                            kLint\n                        };\n                        Kind kind;\n                        std::string message;\n                        const SourcePosition* position;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LanguageServerData\",\n                \"about\": \"Stores data used by the language server, such as symbol information.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class LanguageServerData {\n                    public:\n                        static LanguageServerData& Get();\n                        static const SourcePosition* FindDefinition(const SourceId& id, const LineAndColumn& pos);\n                        static const std::vector<Symbol*>& SymbolsForSourceId(SourceId id);\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LineAndColumn\",\n                \"about\": \"Stores line and column information\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    struct LineAndColumn {\n                         static LineAndColumn WithUnknownOffset(int line, int column);\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourcePosition\",\n                \"about\": \"Stores the start and end position of a source code element\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    struct SourcePosition {\n                        SourceId source;\n                        LineAndColumn start;\n                        LineAndColumn end;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueFileList\",\n                \"about\": \"Maintains a list of Torque files to compile.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class TorqueFileList {\n                    public:\n                        static std::vector<std::string>& Get();\n                    };\n                }\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CompileTorque\",\n                \"about\": \"Compiles Torque source files.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"TorqueCompilerResult\",\n                    \"description\": \"The result of the compilation.\"\n                }\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                  TorqueCompilerResult CompileTorque(const std::vector<std::string>& files, const TorqueCompilerOptions& options);\n                }\n            ]]></code>\n        </func>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Request\",\n                \"about\": \"Generic class representing an LSP request.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    template <typename T>\n                    class Request {\n                    public:\n                        Request(JsonValue raw_message);\n                        bool has_method() const;\n                        std::string method() const;\n                        JsonValue GetJsonValue();\n                        std::string id() const;\n                    private:\n                        JsonValue json_value_;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"InitializeRequest\",\n                \"about\": \"Represents the initialize request.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class InitializeRequest {\n                    public:\n                        InitializeRequest(JsonValue raw_message);\n                        std::string id() const;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"InitializeResponse\",\n                \"about\": \"Represents the initialize response.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class InitializeResponse {\n                    public:\n                        void set_id(const std::string& id);\n                        class Capabilities {\n                            public:\n                                void textDocumentSync();\n                                void set_definitionProvider(bool value);\n                                void set_documentSymbolProvider(bool value);\n                        };\n                        class Result {\n                            public:\n                                Capabilities& capabilities();\n                        };\n                        Result& result();\n                        JsonValue GetJsonValue();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RegistrationRequest\",\n                \"about\": \"Represents a request to register capabilities.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class RegistrationRequest {\n                    public:\n                        void set_id(int id);\n                        void set_method(const std::string& method);\n                        class Params {\n                            public:\n                                Registration add_registrations();\n                        };\n                        Params& params();\n                        JsonValue GetJsonValue();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Registration\",\n                \"about\": \"Represents a registration of capabilities.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class Registration {\n                    public:\n                        void set_id(const std::string& id);\n                        void set_method(const std::string& method);\n                        class DidChangeWatchedFilesRegistrationOptions {};\n                        DidChangeWatchedFilesRegistrationOptions add_watchers();\n                        template <typename T> T registerOptions();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"FileSystemWatcher\",\n                \"about\": \"Represents a file system watcher.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class FileSystemWatcher {\n                    public:\n                        enum class WatchKind {\n                            kAll\n                        };\n                        void set_globPattern(const std::string& pattern);\n                        void set_kind(WatchKind kind);\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueFileListNotification\",\n                \"about\": \"Represents a notification about the Torque file list.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class TorqueFileListNotification {\n                    public:\n                        TorqueFileListNotification(JsonValue raw_message);\n                        class Params {\n                            public:\n                                JsonValue::ObjectContents object();\n                        };\n                        Params& params();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"GotoDefinitionRequest\",\n                \"about\": \"Represents a request to go to the definition of a symbol.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class GotoDefinitionRequest {\n                    public:\n                        GotoDefinitionRequest(JsonValue raw_message);\n                        std::string id() const;\n                        class Params {\n                            public:\n                                class TextDocument {\n                                    public:\n                                        std::string uri() const;\n                                };\n                                TextDocument textDocument() const;\n                                class Position {\n                                    public:\n                                        int line() const;\n                                        int character() const;\n                                };\n                                Position position() const;\n                        };\n                        Params& params();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"GotoDefinitionResponse\",\n                \"about\": \"Represents a response to a goto definition request.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class GotoDefinitionResponse {\n                    public:\n                        void set_id(const std::string& id);\n                        void SetNull(const std::string& field);\n                        class Result {\n                            public:\n                                void SetTo(const SourcePosition& definition);\n                        };\n                        Result& result();\n                        JsonValue GetJsonValue();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"DidChangeWatchedFilesNotification\",\n                \"about\": \"Represents a notification about changes to watched files.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class DidChangeWatchedFilesNotification {\n                    public:\n                        DidChangeWatchedFilesNotification(JsonValue raw_message);\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"DocumentSymbolRequest\",\n                \"about\": \"Represents a request for document symbols.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class DocumentSymbolRequest {\n                    public:\n                        DocumentSymbolRequest(JsonValue raw_message);\n                        std::string id() const;\n                        class Params {\n                            public:\n                                class TextDocument {\n                                    public:\n                                        std::string uri() const;\n                                };\n                                TextDocument textDocument() const;\n                        };\n                        Params& params();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"DocumentSymbolResponse\",\n                \"about\": \"Represents a response to a document symbol request.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class DocumentSymbolResponse {\n                    public:\n                        void set_id(const std::string& id);\n                        class SymbolInformation {\n                            public:\n                                void set_name(const std::string& name);\n                                void set_kind(int kind);\n                                class Location {\n                                    public:\n                                        void SetTo(const SourcePosition& position);\n                                };\n                                Location& location();\n                        };\n                        SymbolInformation add_result();\n                        int result_size() const;\n                        JsonValue GetJsonValue();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JsonValue\",\n                \"about\": \"Represents a JSON value. Note: Only stubs are shown. The actual implementation is in src/torque/ls/json-parser.h\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                    class JsonValue {\n                    public:\n                        enum Tag {\n                            ARRAY,\n                            OBJECT,\n                            STRING,\n                            NUMBER,\n                            BOOLEAN,\n                            NULL_VALUE\n                        };\n                        Tag tag;\n                        bool IsString() const;\n                        std::string ToString() const;\n                        JsonValue::ObjectContents object() const;\n                        std::vector<JsonValue> ToArray() const;\n                        class ObjectContents {\n                            public:\n                                JsonValue operator[](const char* key) const;\n                        };\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Diagnostic\",\n                \"about\": \"Represents a diagnostic message.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque::ls {\n                  class Diagnostic {\n                   public:\n                    enum DiagnosticSeverity {\n                     kError,\n                     kWarning\n                    };\n                    void set_severity(DiagnosticSeverity severity);\n                    void set_message(const std::string& message);\n                    void set_source(const std::string& source);\n                    class Range {\n                     public:\n                      class Position {\n                       public:\n                        void set_line(int line);\n                        void set_character(int character);\n                      };\n                      Position& start();\n                      Position& end();\n                    };\n                    Range& range();\n                  };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"PublishDiagnosticsNotification\",\n                \"about\": \"Represents a request for publishing diagnostics\"\n            }\n            </metadata>\n            <code><![CDATA[\n                 namespace v8::internal::torque::ls {\n                  class PublishDiagnosticsNotification {\n                   public:\n                    void set_method(const std::string& method);\n                    class Params {\n                     public:\n                      void set_uri(const std::string& uri);\n                      Diagnostic add_diagnostics();\n                      int diagnostics_size() const;\n                    };\n                    Params& params();\n                    JsonValue GetJsonValue();\n                  };\n                 }\n            ]]></code>\n        </class>\n         <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Symbol\",\n                \"about\": \"Base class for symbols in Torque\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class Symbol {\n                    public:\n                        virtual bool IsUserDefined() const = 0;\n                        virtual const SourcePosition& Position() const = 0;\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Macro\",\n                \"about\": \"Represents a Macro Symbol.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class Macro : public Symbol {\n                     public:\n                      static Macro* cast(Symbol* symbol);\n                      std::string ReadableName();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Builtin\",\n                \"about\": \"Represents a Builtin Symbol.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class Builtin : public Symbol {\n                     public:\n                      static Builtin* cast(Symbol* symbol);\n                      std::string ReadableName();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"GenericCallable\",\n                \"about\": \"Represents a GenericCallable Symbol.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class GenericCallable : public Symbol {\n                     public:\n                      static GenericCallable* cast(Symbol* symbol);\n                      std::string name();\n                    };\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Type\",\n                \"about\": \"Represents a Type in Torque.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                  class Type {\n                   public:\n                    bool IsClassType() const;\n                    std::string ToString() const;\n                  };\n                }\n            ]]></code>\n        </class>\n         <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TypeAlias\",\n                \"about\": \"Represents a TypeAlias Symbol.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace v8::internal::torque {\n                    class TypeAlias : public Symbol {\n                     public:\n                      static TypeAlias* cast(Symbol* symbol);\n                      const Type* type() const;\n                    };\n                }\n            ]]></code>\n        </class>\n    </dependencies>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ReadMessage\",\n            \"about\": \"Reads a message from standard input following the Language Server Protocol.\",\n            \"logic\": \"Reads the Content-Length header, then reads the message body of that length.  Aborts if Content-Length is not found.  Parses the message body as JSON.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"JsonValue\",\n                \"description\": \"The parsed JSON value of the message.\"\n            },\n            \"dependencies\": [\n                \"kContentLength\",\n                \"kContentLengthSize\",\n                \"ParseJson\",\n                \"Logger::Log\",\n                \"v8::base::OS::Abort\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nJsonValue ReadMessage() {\n  std::string line;\n  std::getline(std::cin, line);\n\n  if (line.rfind(kContentLength) != 0) {\n    // Invalid message, we just crash.\n    Logger::Log(\"[fatal] Did not find Content-Length ...\\n\");\n    v8::base::OS::Abort();\n  }\n\n  const int content_length = std::atoi(line.substr(kContentLengthSize).c_str());\n  std::getline(std::cin, line);\n  std::string content(content_length, ' ');\n  std::cin.read(&content[0], content_length);\n\n  Logger::Log(\"[incoming] \", content, \"\\n\\n\");\n\n  return ParseJson(content).value;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"WriteMessage\",\n            \"about\": \"Writes a message to standard output following the Language Server Protocol.\",\n            \"logic\": \"Serializes the JSON message to a string. Writes a Content-Length header and the message body.\",\n            \"parameters\": [\n                {\n                    \"name\": \"message\",\n                    \"type\": \"JsonValue\",\n                    \"purpose\": \"The JSON message to write.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"SerializeToString\",\n                \"kContentLength\",\n                \"kProtocolLineEnding\",\n                \"Logger::Log\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid WriteMessage(JsonValue message) {\n  std::string content = SerializeToString(message);\n\n  Logger::Log(\"[outgoing] \", content, \"\\n\\n\");\n\n  std::cout << kContentLength << content.size() << kProtocolLineEnding;\n  std::cout << content << std::flush;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ResetCompilationErrorDiagnostics\",\n            \"about\": \"Resets the compilation error diagnostics for all source files.\",\n            \"logic\": \"Iterates through all files for which diagnostics were previously sent and publishes an empty diagnostics array, effectively clearing the errors. Then clears the DiagnosticsFiles list.\",\n            \"parameters\": [\n                {\n                    \"name\": \"writer\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"A function object used to write messages.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"DiagnosticsFiles\",\n                \"PublishDiagnosticsNotification\",\n                \"SourceFileMap\",\n                \"SourceId\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid ResetCompilationErrorDiagnostics(MessageWriter writer) {\n  for (const SourceId& source : DiagnosticsFiles::Get()) {\n    PublishDiagnosticsNotification notification;\n    notification.set_method(\"textDocument/publishDiagnostics\");\n\n    std::string error_file = SourceFileMap::AbsolutePath(source);\n    notification.params().set_uri(error_file);\n    // Trigger empty array creation.\n    USE(notification.params().diagnostics_size());\n\n    writer(std::move(notification.GetJsonValue()));\n  }\n  DiagnosticsFiles::Get() = {};\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DiagnosticCollector\",\n            \"about\": \"Collects diagnostic messages from the Torque compiler and sends them as notifications.\",\n            \"attributes\": [\n                {\n                    \"name\": \"notifications_\",\n                    \"type\": \"std::map<SourceId, PublishDiagnosticsNotification>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the diagnostics notifications, grouped by SourceId.\"\n                },\n                {\n                    \"name\": \"suppress_lint_messages_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether lint messages should be suppressed due to errors.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TorqueMessage\",\n                \"PublishDiagnosticsNotification\",\n                \"Diagnostic\",\n                \"SourceId\",\n                \"SourcePosition\",\n                \"Range\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass DiagnosticCollector {\n public:\n  void AddTorqueMessage(const TorqueMessage& message) {\n    if (!ShouldAddMessageOfKind(message.kind)) return;\n\n    SourceId id =\n        message.position ? message.position->source : SourceId::Invalid();\n    auto& notification = GetOrCreateNotificationForSource(id);\n\n    Diagnostic diagnostic = notification.params().add_diagnostics();\n    diagnostic.set_severity(ServerityFor(message.kind));\n    diagnostic.set_message(message.message);\n    diagnostic.set_source(\"Torque Compiler\");\n\n    if (message.position) {\n      PopulateRangeFromSourcePosition(diagnostic.range(), *message.position);\n    }\n  }\n\n  std::map<SourceId, PublishDiagnosticsNotification>& notifications() {\n    return notifications_;\n  }\n\n private:\n  PublishDiagnosticsNotification& GetOrCreateNotificationForSource(\n      SourceId id) {\n    auto iter = notifications_.find(id);\n    if (iter != notifications_.end()) return iter->second;\n\n    PublishDiagnosticsNotification& notification = notifications_[id];\n    notification.set_method(\"textDocument/publishDiagnostics\");\n\n    std::string file =\n        id.IsValid() ? SourceFileMap::AbsolutePath(id) : \"<unknown>\";\n    notification.params().set_uri(file);\n    return notification;\n  }\n\n  bool ShouldAddMessageOfKind(TorqueMessage::Kind kind) {\n    // An error can easily cause a lot of false positive lint messages, due to\n    // unused variables, macros, etc. Thus we suppress subsequent lint messages\n    // when there are errors.\n    switch (kind) {\n      case TorqueMessage::Kind::kError:\n        suppress_lint_messages_ = true;\n        return true;\n      case TorqueMessage::Kind::kLint:\n        if (suppress_lint_messages_) return false;\n        return true;\n    }\n  }\n\n  void PopulateRangeFromSourcePosition(Range range,\n                                       const SourcePosition& position) {\n    range.start().set_line(position.start.line);\n    range.start().set_character(position.start.column);\n    range.end().set_line(position.end.line);\n    range.end().set_character(position.end.column);\n  }\n\n  Diagnostic::DiagnosticSeverity ServerityFor(TorqueMessage::Kind kind) {\n    switch (kind) {\n      case TorqueMessage::Kind::kError:\n        return Diagnostic::kError;\n      case TorqueMessage::Kind::kLint:\n        return Diagnostic::kWarning;\n    }\n  }\n\n  std::map<SourceId, PublishDiagnosticsNotification> notifications_;\n  bool suppress_lint_messages_ = false;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"SendCompilationDiagnostics\",\n            \"about\": \"Sends compilation diagnostics based on the result of the Torque compiler.\",\n            \"logic\": \"Uses DiagnosticCollector to collect and send diagnostics for each file.  Records source files for which notifications are sent to reset them before the next compiler run.\",\n            \"parameters\": [\n                {\n                    \"name\": \"result\",\n                    \"type\": \"TorqueCompilerResult\",\n                    \"purpose\": \"The result of the Torque compilation.\"\n                },\n                {\n                    \"name\": \"writer\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"A function object used to write messages.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"DiagnosticCollector\",\n                \"TorqueCompilerResult\",\n                \"TorqueMessage\",\n                \"PublishDiagnosticsNotification\",\n                \"DiagnosticsFiles\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SendCompilationDiagnostics(const TorqueCompilerResult& result,\n                                MessageWriter writer) {\n  DiagnosticCollector collector;\n\n  // TODO(szuend): Split up messages by SourceId and sort them by line number.\n  for (const TorqueMessage& message : result.messages) {\n    collector.AddTorqueMessage(message);\n  }\n\n  for (auto& pair : collector.notifications()) {\n    PublishDiagnosticsNotification& notification = pair.second;\n    writer(std::move(notification.GetJsonValue()));\n\n    // Record all source files for which notifications are sent, so they\n    // can be reset before the next compiler run.\n    const SourceId& source = pair.first;\n    if (source.IsValid()) DiagnosticsFiles::Get().push_back(source);\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CompilationFinished\",\n            \"about\": \"Handles the completion of a Torque compilation.\",\n            \"logic\": \"Updates language server data and the source file map. Sends compilation diagnostics.\",\n            \"parameters\": [\n                {\n                    \"name\": \"result\",\n                    \"type\": \"TorqueCompilerResult\",\n                    \"purpose\": \"The result of the Torque compilation.\"\n                },\n                {\n                    \"name\": \"writer\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"A function object used to write messages.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"LanguageServerData\",\n                \"SourceFileMap\",\n                \"SendCompilationDiagnostics\",\n                \"TorqueCompilerResult\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid CompilationFinished(TorqueCompilerResult result, MessageWriter writer) {\n  LanguageServerData::Get() = std::move(result.language_server_data);\n  SourceFileMap::Get() = *result.source_file_map;\n\n  SendCompilationDiagnostics(result, writer);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"RecompileTorque\",\n            \"about\": \"Recompiles Torque source files.\",\n            \"logic\": \"Sets up compiler options, compiles the Torque files, and then finalizes the compilation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"writer\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"A function object used to write messages.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"TorqueCompilerOptions\",\n                \"CompileTorque\",\n                \"TorqueFileList\",\n                \"CompilationFinished\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid RecompileTorque(MessageWriter writer) {\n  Logger::Log(\"[info] Start compilation run ...\\n\");\n\n  TorqueCompilerOptions options;\n  options.output_directory = \"\";\n  options.collect_language_server_data = true;\n  options.force_assert_statements = true;\n\n  TorqueCompilerResult result = CompileTorque(TorqueFileList::Get(), options);\n\n  Logger::Log(\"[info] Finished compilation run ...\\n\");\n\n  CompilationFinished(std::move(result), writer);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"RecompileTorqueWithDiagnostics\",\n            \"about\": \"Recompiles Torque source files and resets compilation error diagnostics.\",\n            \"logic\": \"Resets existing diagnostics, then recompiles the Torque files.\",\n            \"parameters\": [\n                {\n                    \"name\": \"writer\",\n                    \"type\": \"MessageWriter\",\n                    \"purpose\": \"A function object used to write"
}