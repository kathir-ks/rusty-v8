{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/arm/unwinding-info-writer-arm.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 58, column 67",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/arm/unwinding-info-writer-arm.h\",\n            \"file_name\": \"unwinding-info-writer-arm.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the UnwindingInfoWriter class for ARM architecture, which is responsible for generating unwinding information (EH-frame) for stack unwinding during exception handling or debugging.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for EH-frame writing and flag definitions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/diagnostics/eh-frame.h\"\n#include \"src/flags/flags.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"UnwindingInfoWriter\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Writes unwinding information for ARM architecture, utilizing EH-frame format.  Manages state related to link register saving and block exits.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"zone_\",\n                        \"type\": \"Zone*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Memory zone for allocation.\"\n                    },\n                    {\n                        \"name\": \"eh_frame_writer_\",\n                        \"type\": \"EhFrameWriter\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Writer for the EH-frame data.\"\n                    },\n                    {\n                        \"name\": \"saved_lr_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Indicates if the link register has been saved.\"\n                    },\n                    {\n                        \"name\": \"block_will_exit_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Indicates if the current instruction block will exit.\"\n                    },\n                    {\n                        \"name\": \"block_initial_states_\",\n                        \"type\": \"ZoneVector<const BlockInitialState*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the initial states of instruction blocks.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Zone\",\n                    \"EhFrameWriter\",\n                    \"InstructionBlock\",\n                    \"BlockInitialState\",\n                    \"v8_flags\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass UnwindingInfoWriter {\n public:\n  explicit UnwindingInfoWriter(Zone* zone)\n      : zone_(zone),\n        eh_frame_writer_(zone),\n        saved_lr_(false),\n        block_will_exit_(false),\n        block_initial_states_(zone) {\n    if (enabled()) eh_frame_writer_.Initialize();\n  }\n\n  void SetNumberOfInstructionBlocks(int number) {\n    if (enabled()) block_initial_states_.resize(number);\n  }\n\n  void BeginInstructionBlock(int pc_offset, const InstructionBlock* block);\n  void EndInstructionBlock(const InstructionBlock* block);\n\n  void MarkLinkRegisterOnTopOfStack(int pc_offset);\n  void MarkPopLinkRegisterFromTopOfStack(int pc_offset);\n\n  void MarkFrameConstructed(int at_pc);\n  void MarkFrameDeconstructed(int at_pc);\n\n  void MarkBlockWillExit() { block_will_exit_ = true; }\n\n  void Finish(int code_size) {\n    if (enabled()) eh_frame_writer_.Finish(code_size);\n  }\n\n  EhFrameWriter* eh_frame_writer() {\n    return enabled() ? &eh_frame_writer_ : nullptr;\n  }\n\n private:\n  bool enabled() const { return v8_flags.perf_prof_unwinding_info; }\n\n  class BlockInitialState : public ZoneObject {\n   public:\n    explicit BlockInitialState(bool saved_lr) : saved_lr_(saved_lr) {}\n\n    bool saved_lr_;\n  };\n\n  Zone* zone_;\n  EhFrameWriter eh_frame_writer_;\n  bool saved_lr_;\n  bool block_will_exit_;\n\n  ZoneVector<const BlockInitialState*> block_initial_states_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BlockInitialState\",\n                \"extends\": \"ZoneObject\",\n                \"implements\": [],\n                \"about\": \"Represents the initial state of an instruction block, specifically tracking whether the link register (LR) has been saved.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"saved_lr_\",\n                        \"type\": \"bool\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Indicates if the link register was saved at the beginning of the block.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"ZoneObject\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  class BlockInitialState : public ZoneObject {\n   public:\n    explicit BlockInitialState(bool saved_lr) : saved_lr_(saved_lr) {}\n\n    bool saved_lr_;\n  };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Zone\",\n                    \"about\": \"Memory allocation zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"EhFrameWriter\",\n                    \"about\": \"Writes EH-frame data.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class EhFrameWriter {\n                public:\n                    void Initialize();\n                    void Finish(int code_size);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"InstructionBlock\",\n                    \"about\": \"Represents a block of instructions.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class InstructionBlock {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZoneObject\",\n                    \"about\": \"Base class for objects allocated in a Zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class ZoneObject {};\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"v8_flags.perf_prof_unwinding_info\",\n                    \"about\": \"Flag to enable/disable unwinding information generation.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace v8_flags {\n                    extern bool perf_prof_unwinding_info;\n                }\n            ]]></code>\n        </func>\n    </dependencies>\n</file>\n```"
}