{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/operations.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/operations.h\",\n        \"file_name\": \"operations.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the operations used in the Turboshaft compiler, including their structure, metadata, and effects.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Standard C++ library headers for various functionalities like math, integer types, strings, limits, optional values, tuples, type traits, and utilities.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <cmath>\n            #include <cstdint>\n            #include <cstring>\n            #include <limits>\n            #include <optional>\n            #include <tuple>\n            #include <type_traits>\n            #include <utility>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 base library headers for logging, macros, mutexes, small vectors, template utilities, vectors, and external references.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/base/logging.h\"\n            #include \"src/base/macros.h\"\n            #include \"src/base/platform/mutex.h\"\n            #include \"src/base/small-vector.h\"\n            #include \"src/base/template-utils.h\"\n            #include \"src/base/vector.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 codegen library for external references.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/codegen/external-reference.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 common library for global definitions.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/common/globals.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 compiler library for common operators, fast API calls, global definitions, simplified operators, Turboshaft-specific data structures, index, representations, types, utilities, zone with name, and write barrier kinds.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/compiler/common-operator.h\"\n            #include \"src/compiler/fast-api-calls.h\"\n            #include \"src/compiler/globals.h\"\n            #include \"src/compiler/simplified-operator.h\"\n            #include \"src/compiler/turboshaft/deopt-data.h\"\n            #include \"src/compiler/turboshaft/fast-hash.h\"\n            #include \"src/compiler/turboshaft/index.h\"\n            #include \"src/compiler/turboshaft/representations.h\"\n            #include \"src/compiler/turboshaft/snapshot-table.h\"\n            #include \"src/compiler/turboshaft/types.h\"\n            #include \"src/compiler/turboshaft/utils.h\"\n            #include \"src/compiler/turboshaft/zone-with-name.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 compiler write barrier kind.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/compiler/write-barrier-kind.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 flags library for feature flags.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/flags/flags.h\"\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"V8 WebAssembly library headers for module and objects, conditionally included based on V8_ENABLE_WEBASSEMBLY.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_WEBASSEMBLY\n            #include \"src/wasm/wasm-module.h\"\n            #include \"src/wasm/wasm-objects.h\"\n            #endif\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"HeapObject\",\n            \"about\": \"Forward declaration of the HeapObject class from the V8 internal namespace.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class HeapObject;\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the output stream operator to print AbortReason enums.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"reason\",\n                    \"type\": \"AbortReason\",\n                    \"purpose\": \"The AbortReason enum to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream& os,\n                                                       AbortReason reason);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CallDescriptor\",\n            \"about\": \"Forward declaration of the CallDescriptor class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class CallDescriptor;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSWasmCallParameters\",\n            \"about\": \"Forward declaration of the JSWasmCallParameters class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class JSWasmCallParameters;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DeoptimizeParameters\",\n            \"about\": \"Forward declaration of the DeoptimizeParameters class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class DeoptimizeParameters;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FrameStateInfo\",\n            \"about\": \"Forward declaration of the FrameStateInfo class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class FrameStateInfo;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Node\",\n            \"about\": \"Forward declaration of the Node class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class Node;\n        ]]></code>\n    </class>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"TrapId\",\n            \"about\": \"Forward declaration of the TrapId enum.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class TrapId : int32_t;\n        ]]></code>\n    </enum>\n    <constant>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"inline constexpr char[]\",\n            \"name\": \"kCompilationZoneName\",\n            \"about\": \"Defines the name of the compilation zone.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            inline constexpr char kCompilationZoneName[] = \"compilation-zone\";\n        ]]></code>\n    </constant>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Block\",\n            \"about\": \"Forward declaration of the Block class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class Block;\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"FrameStateData\",\n            \"about\": \"Forward declaration of the FrameStateData struct.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            struct FrameStateData;\n        ]]></code>\n    </struct>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Graph\",\n            \"about\": \"Forward declaration of the Graph class.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            class Graph;\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"FrameStateOp\",\n            \"about\": \"Forward declaration of the FrameStateOp struct.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            struct FrameStateOp;\n        ]]></code>\n    </struct>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"HashingStrategy\",\n            \"about\": \"Defines strategies for hashing graphs, including a strategy for stable hashing during mksnapshot.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class HashingStrategy {\n              kDefault,\n              // This strategy requires that hashing a graph during builtin construction\n              // (mksnapshot) produces the same hash for repeated runs of mksnapshot. This\n              // requires that no pointers and external constants are used in hashes.\n              kMakeSnapshotStable,\n            };\n        ]]></code>\n    </enum>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"VariableData\",\n            \"about\": \"Data associated with a variable, including its representation and loop invariance.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            struct VariableData {\n              MaybeRegisterRepresentation rep;\n              bool loop_invariant;\n              IntrusiveSetIndex active_loop_variables_index = {};\n            };\n        ]]></code>\n    </struct>\n    <type_alias>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"type alias\",\n            \"name\": \"Variable\",\n            \"about\": \"Alias for a SnapshotTable key representing a variable.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            using Variable = SnapshotTable<OpIndex, VariableData>::Key;\n        ]]></code>\n    </type_alias>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_INTL_OPERATION_LIST\",\n            \"about\": \"Defines a list of internationalization operations, conditionally based on V8_INTL_SUPPORT.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_INTL_SUPPORT\n            #define TURBOSHAFT_INTL_OPERATION_LIST(V) V(StringToCaseIntl)\n            #else\n            #define TURBOSHAFT_INTL_OPERATION_LIST(V)\n            #endif  // V8_INTL_SUPPORT\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_WASM_OPERATION_LIST\",\n            \"about\": \"Defines a list of WebAssembly operations, conditionally based on V8_ENABLE_WEBASSEMBLY.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_ENABLE_WEBASSEMBLY\n            // These operations should be lowered to Machine operations during\n            // WasmLoweringPhase.\n            #define TURBOSHAFT_WASM_OPERATION_LIST(V) \\\n              V(WasmStackCheck)                       \\\n              V(GlobalGet)                            \\\n              V(GlobalSet)                            \\\n              V(RootConstant)                         \\\n              V(IsRootConstant)                       \\\n              V(Null)                                 \\\n              V(IsNull)                               \\\n              V(AssertNotNull)                        \\\n              V(RttCanon)                             \\\n              V(WasmTypeCheck)                        \\\n              V(WasmTypeCast)                         \\\n              V(AnyConvertExtern)                     \\\n              V(ExternConvertAny)                     \\\n              V(WasmTypeAnnotation)                   \\\n              V(StructGet)                            \\\n              V(StructSet)                            \\\n              V(ArrayGet)                             \\\n              V(ArraySet)                             \\\n              V(ArrayLength)                          \\\n              V(WasmAllocateArray)                    \\\n              V(WasmAllocateStruct)                   \\\n              V(WasmRefFunc)                          \\\n              V(StringAsWtf16)                        \\\n              V(StringPrepareForGetCodeUnit)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_SIMD256_COMMOM_OPERATION_LIST\",\n            \"about\": \"Defines a list of common SIMD256 operations, conditionally based on V8_ENABLE_WASM_SIMD256_REVEC.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_WASM_SIMD256_REVEC\n            #define TURBOSHAFT_SIMD256_COMMOM_OPERATION_LIST(V) \\\n              V(Simd256Constant)                                \\\n              V(Simd256Extract128Lane)                          \\\n              V(Simd256LoadTransform)                           \\\n              V(Simd256Unary)                                   \\\n              V(Simd256Binop)                                   \\\n              V(Simd256Shift)                                   \\\n              V(Simd256Ternary)                                 \\\n              V(Simd256Splat)                                   \\\n              V(SimdPack128To256)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_SIMD256_X64_OPERATION_LIST\",\n            \"about\": \"Defines a list of SIMD256 operations specific to the x64 architecture, conditionally based on V8_TARGET_ARCH_X64.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_TARGET_ARCH_X64\n            #define TURBOSHAFT_SIMD256_X64_OPERATION_LIST(V) \\\n              V(Simd256Shufd)                                \\\n              V(Simd256Shufps)                               \\\n              V(Simd256Unpack)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_SIMD256_OPERATION_LIST\",\n            \"about\": \"Combines common and x64-specific SIMD256 operation lists.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TURBOSHAFT_SIMD256_OPERATION_LIST(V)  \\\n              TURBOSHAFT_SIMD256_COMMOM_OPERATION_LIST(V) \\\n              TURBOSHAFT_SIMD256_X64_OPERATION_LIST(V)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_SIMD_OPERATION_LIST\",\n            \"about\": \"Defines a list of SIMD128 and SIMD256 operations, conditionally based on V8_ENABLE_WEBASSEMBLY.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #else\n            #define TURBOSHAFT_SIMD256_OPERATION_LIST(V) \\\n              TURBOSHAFT_SIMD256_COMMOM_OPERATION_LIST(V)\n            #endif  // V8_TARGET_ARCH_X64\n\n            #else\n            #define TURBOSHAFT_WASM_OPERATION_LIST(V)\n            #define TURBOSHAFT_SIMD_OPERATION_LIST(V)\n            #endif\n\n            #define TURBOSHAFT_SIMD_OPERATION_LIST(V) \\\n              V(Simd128Constant)                      \\\n              V(Simd128Binop)                         \\\n              V(Simd128Unary)                         \\\n              V(Simd128Reduce)                        \\\n              V(Simd128Shift)                         \\\n              V(Simd128Test)                          \\\n              V(Simd128Splat)                         \\\n              V(Simd128Ternary)                       \\\n              V(Simd128ExtractLane)                   \\\n              V(Simd128ReplaceLane)                   \\\n              V(Simd128LaneMemory)                    \\\n              V(Simd128LoadTransform)                 \\\n              V(Simd128Shuffle)                       \\\n              TURBOSHAFT_SIMD256_OPERATION_LIST(V)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_OPERATION_LIST_BLOCK_TERMINATOR\",\n            \"about\": \"Defines a list of Turboshaft operations that are block terminators.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TURBOSHAFT_OPERATION_LIST_BLOCK_TERMINATOR(V) \\\n              V(CheckException)                                   \\\n              V(Goto)                                             \\\n              V(TailCall)                                         \\\n              V(Unreachable)                                      \\\n              V(Return)                                           \\\n              V(Branch)                                           \\\n              V(Switch)                                           \\\n              V(Deoptimize)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_CPED_OPERATION_LIST\",\n            \"about\": \"Defines a list of continuation preserved embedder data operations, conditionally based on V8_ENABLE_CONTINUATION_PRESERVED_EMBEDDER_DATA.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #ifdef V8_ENABLE_CONTINUATION_PRESERVED_EMBEDDER_DATA\n            #define TURBOSHAFT_CPED_OPERATION_LIST(V) \\\n              V(GetContinuationPreservedEmbedderData) \\\n              V(SetContinuationPreservedEmbedderData)\n            #else\n            #define TURBOSHAFT_CPED_OPERATION_LIST(V)\n            #endif  // V8_ENABLE_CONTINUATION_PRESERVED_EMBEDDER_DATA\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_SIMPLIFIED_OPERATION_LIST\",\n            \"about\": \"Defines a list of Turboshaft operations that are lowered to Machine operations during the MachineLoweringPhase.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            // These operations should be lowered to Machine operations during\n            // MachineLoweringPhase.\n            #define TURBOSHAFT_SIMPLIFIED_OPERATION_LIST(V) \\\n              TURBOSHAFT_INTL_OPERATION_LIST(V)             \\\n              TURBOSHAFT_CPED_OPERATION_LIST(V)             \\\n              V(ArgumentsLength)                            \\\n              V(BigIntBinop)                                \\\n              V(BigIntComparison)                           \\\n              V(BigIntUnary)                                \\\n              V(CheckedClosure)                             \\\n              V(WordBinopDeoptOnOverflow)                   \\\n              V(CheckEqualsInternalizedString)              \\\n              V(CheckMaps)                                  \\\n              V(CompareMaps)                                \\\n              V(Float64Is)                                  \\\n              V(ObjectIs)                                   \\\n              V(ObjectIsNumericValue)                       \\\n              V(Float64SameValue)                           \\\n              V(SameValue)                                  \\\n              V(ChangeOrDeopt)                              \\\n              V(Convert)                                    \\\n              V(ConvertJSPrimitiveToObject)                 \\\n              V(ConvertJSPrimitiveToUntagged)               \\\n              V(ConvertJSPrimitiveToUntaggedOrDeopt)        \\\n              V(ConvertUntaggedToJSPrimitive)               \\\n              V(ConvertUntaggedToJSPrimitiveOrDeopt)        \\\n              V(TruncateJSPrimitiveToUntagged)              \\\n              V(TruncateJSPrimitiveToUntaggedOrDeopt)       \\\n              V(DoubleArrayMinMax)                          \\\n              V(EnsureWritableFastElements)                 \\\n              V(FastApiCall)                                \\\n              V(FindOrderedHashEntry)                       \\\n              V(LoadDataViewElement)                        \\\n              V(LoadFieldByIndex)                           \\\n              V(LoadMessage)                                \\\n              V(LoadStackArgument)                          \\\n              V(LoadTypedElement)                           \\\n              V(StoreDataViewElement)                       \\\n              V(StoreMessage)                               \\\n              V(StoreTypedElement)                          \\\n              V(MaybeGrowFastElements)                      \\\n              V(NewArgumentsElements)                       \\\n              V(NewArray)                                   \\\n              V(RuntimeAbort)                               \\\n              V(StaticAssert)                               \\\n              V(StringAt)                                   \\\n              V(StringComparison)                           \\\n              V(StringConcat)                               \\\n              V(StringFromCodePointAt)                      \\\n              V(StringIndexOf)                              \\\n              V(StringLength)                               \\\n              V(TypedArrayLength)                           \\\n              V(StringSubstring)                            \\\n              V(NewConsString)                              \\\n              V(TransitionAndStoreArrayElement)             \\\n              V(TransitionElementsKind)                     \\\n              V(TransitionElementsKindOrCheckMap)           \\\n              V(DebugPrint)                                 \\\n              V(CheckTurboshaftTypeOf)                      \\\n              V(Word32SignHint)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_MACHINE_OPERATION_LIST\",\n            \"about\": \"Defines a list of Turboshaft operations that are supported by the InstructionSelector.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            // These Operations are the lowest level handled by Turboshaft, and are\n            // supported by the InstructionSelector.\n            #define TURBOSHAFT_MACHINE_OPERATION_LIST(V) \\\n              V(WordBinop)                               \\\n              V(FloatBinop)                              \\\n              V(Word32PairBinop)                         \\\n              V(OverflowCheckedBinop)                    \\\n              V(WordUnary)                               \\\n              V(OverflowCheckedUnary)                    \\\n              V(FloatUnary)                              \\\n              V(Shift)                                   \\\n              V(Comparison)                              \\\n              V(Change)                                  \\\n              V(TryChange)                               \\\n              V(BitcastWord32PairToFloat64)              \\\n              V(TaggedBitcast)                           \\\n              V(Select)                                  \\\n              V(PendingLoopPhi)                          \\\n              V(Constant)                                \\\n              V(LoadRootRegister)                        \\\n              V(Load)                                    \\\n              V(Store)                                   \\\n              V(Retain)                                  \\\n              V(Parameter)                               \\\n              V(OsrValue)                                \\\n              V(StackPointerGreaterThan)                 \\\n              V(StackSlot)                               \\\n              V(FrameConstant)                           \\\n              V(DeoptimizeIf)                            \\\n              IF_WASM(V, TrapIf)                         \\\n              IF_WASM(V, LoadStackPointer)               \\\n              IF_WASM(V, SetStackPointer)                \\\n              V(Phi)                                     \\\n              V(FrameState)                              \\\n              V(Call)                                    \\\n              V(CatchBlockBegin)                         \\\n              V(DidntThrow)                              \\\n              V(Tuple)                                   \\\n              V(Projection)                              \\\n              V(DebugBreak)                              \\\n              V(AssumeMap)                               \\\n              V(AtomicRMW)                               \\\n              V(AtomicWord32Pair)                        \\\n              V(MemoryBarrier)                           \\\n              V(Comment)                                 \\\n              V(Dead)                                    \\\n              V(AbortCSADcheck)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_JS_THROWING_OPERATION_LIST\",\n            \"about\": \"Defines a list of JavaScript operations that can throw exceptions.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TURBOSHAFT_JS_THROWING_OPERATION_LIST(V) \\\n              V(GenericBinop)                                \\\n              V(GenericUnop)                                 \\\n              V(ToNumberOrNumeric)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_JS_OPERATION_LIST\",\n            \"about\": \"Defines a list of JavaScript operations.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TURBOSHAFT_JS_OPERATION_LIST(V)        \\\n              TURBOSHAFT_JS_THROWING_OPERATION_LIST(V)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_OTHER_OPERATION_LIST\",\n            \"about\": \"Defines a list of Turboshaft operations that are not Machine operations and need to be lowered before Instruction Selection, but not during MachineLoweringPhase.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            // These are operations that are not Machine operations and need to be lowered\n            // before Instruction Selection, but they are not lowered during the\n            // MachineLoweringPhase.\n            #define TURBOSHAFT_OTHER_OPERATION_LIST(V) \\\n              V(Allocate)                              \\\n              V(DecodeExternalPointer)                 \\\n              V(JSStackCheck)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_OPERATION_LIST_NOT_BLOCK_TERMINATOR\",\n            \"about\": \"Defines a list of Turboshaft operations that are not block terminators.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TURBOSHAFT_OPERATION_LIST_NOT_BLOCK_TERMINATOR(V) \\\n              TURBOSHAFT_WASM_OPERATION_LIST(V)                       \\\n              TURBOSHAFT_SIMD_OPERATION_LIST(V)                       \\\n              TURBOSHAFT_MACHINE_OPERATION_LIST(V)                    \\\n              TURBOSHAFT_SIMPLIFIED_OPERATION_LIST(V)                 \\\n              TURBOSHAFT_JS_OPERATION_LIST(V)                         \\\n              TURBOSHAFT_OTHER_OPERATION_LIST(V)\n        ]]></code>\n    </macro>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TURBOSHAFT_OPERATION_LIST\",\n            \"about\": \"Combines all Turboshaft operation lists.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TURBOSHAFT_OPERATION_LIST(V)            \\\n              TURBOSHAFT_OPERATION_LIST_BLOCK_TERMINATOR(V) \\\n              TURBOSHAFT_OPERATION_LIST_NOT_BLOCK_TERMINATOR(V)\n        ]]></code>\n    </macro>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"Opcode\",\n            \"about\": \"Defines the opcodes for all Turboshaft operations.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class Opcode : uint8_t {\n            #define ENUM_CONSTANT(Name) k##Name,\n              TURBOSHAFT_OPERATION_LIST(ENUM_CONSTANT)\n            #undef ENUM_CONSTANT\n            };\n        ]]></code>\n    </enum>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"OpcodeName\",\n            \"about\": \"Returns the name of an opcode.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            const char* OpcodeName(Opcode opcode);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"constexpr function\",\n            \"name\": \"OpcodeIndex\",\n            \"about\": \"Returns the underlying integer type of an opcode.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            constexpr std::underlying_type_t<Opcode> OpcodeIndex(Opcode x) {\n              return static_cast<std::underlying_type_t<Opcode>>(x);\n            }\n        ]]></code>\n    </func>\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"FORWARD_DECLARE\",\n            \"about\": \"Forward declares the Op struct for each Opcode.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #define FORWARD_DECLARE(Name) struct Name##Op;\n            TURBOSHAFT_OPERATION_LIST(FORWARD_DECLARE)\n            #undef FORWARD_DECLARE\n        ]]></code>\n    </macro>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"namespace\",\n            \"name\": \"detail\",\n            \"about\": \"A detail namespace for internal implementation details.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            namespace detail {\n            template <class Op>\n            struct operation_to_opcode_map {};\n\n            #define OPERATION_OPCODE_MAP_CASE(Name)    \\\n              template <>                              \\\n              struct operation_to_opcode_map<Name##Op> \\\n                  : std::integral_constant<Opcode, Opcode::k##Name> {};\n            TURBOSHAFT_OPERATION_LIST(OPERATION_OPCODE_MAP_CASE)\n            #undef OPERATION_OPCODE_MAP_CASE\n            }  // namespace detail\n        ]]></code>\n    </namespace>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"operation_to_opcode\",\n            \"about\": \"A template struct that maps an operation to its opcode.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename Op>\n            struct operation_to_opcode\n                : detail::operation_to_opcode_map<std::remove_cvref_t<Op>> {};\n        ]]></code>\n    </struct>\n    <variable>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"constexpr variable\",\n            \"name\": \"operation_to_opcode_v\",\n            \"about\": \"A constexpr variable that holds the opcode for a given operation type.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename Op>\n            constexpr Opcode operation_to_opcode_v = operation_to_opcode<Op>::value;\n        ]]></code>\n    </variable>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"OpMaskT\",\n            \"about\": \"A template struct that represents an operation mask for type checking.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename Op, uint64_t Mask, uint64_t Value>\n            struct OpMaskT {\n              using operation = Op;\n              static constexpr uint64_t mask = Mask;\n              static constexpr uint64_t value = Value;\n            };\n        ]]></code>\n    </struct>\n    <constant>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"constexpr uint16_t\",\n            \"name\": \"kNumberOfBlockTerminatorOpcodes\",\n            \"about\": \"Defines the number of block terminator"
}