{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/server-data.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 75, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/server-data.h\",\n            \"file_name\": \"server-data.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the LanguageServerData class, which holds data for answering Language Server Protocol (LSP) requests related to Torque, a language used within V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers and Torque-specific headers required for the LanguageServerData class.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <map>\n#include <memory>\n#include <optional>\n#include <vector>\n\n#include \"src/base/macros.h\"\n#include \"src/torque/declarable.h\"\n#include \"src/torque/global-context.h\"\n#include \"src/torque/source-positions.h\"\n#include \"src/torque/type-oracle.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LanguageServerData\",\n                \"extends\": \"base::ContextualClass<LanguageServerData>\",\n                \"about\": \"Holds contextual data needed to respond to LSP requests. This includes definition mappings, symbol tables, and references to global context and type oracle.  It's designed to be reset for each compilation step.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"definitions_map_\",\n                        \"type\": \"DefinitionsMap\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Maps source IDs to a list of definition mappings.  A definition mapping links a token's source position to its definition's source position.\"\n                    },\n                    {\n                        \"name\": \"symbols_map_\",\n                        \"type\": \"SymbolsMap\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Maps source IDs to a list of Declarable pointers, representing symbols within that source.\"\n                    },\n                    {\n                        \"name\": \"global_context_\",\n                        \"type\": \"std::unique_ptr<GlobalContext>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A unique pointer to a GlobalContext object, providing access to global information about the Torque environment.\"\n                    },\n                    {\n                        \"name\": \"type_oracle_\",\n                        \"type\": \"std::unique_ptr<TypeOracle>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A unique pointer to a TypeOracle object, providing access to type information for Torque.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"base::ContextualClass\",\n                    \"SourcePosition\",\n                    \"SourceId\",\n                    \"DefinitionsMap\",\n                    \"SymbolsMap\",\n                    \"GlobalContext\",\n                    \"TypeOracle\",\n                    \"Declarable\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass LanguageServerData : public base::ContextualClass<LanguageServerData> {\n public:\n  LanguageServerData() = default;\n\n  V8_EXPORT_PRIVATE static void AddDefinition(SourcePosition token,\n                                              SourcePosition definition);\n\n  V8_EXPORT_PRIVATE static std::optional<SourcePosition> FindDefinition(\n      SourceId source, LineAndColumn pos);\n\n  static void SetGlobalContext(GlobalContext global_context) {\n    Get().global_context_ =\n        std::make_unique<GlobalContext>(std::move(global_context));\n    Get().PrepareAllDeclarableSymbols();\n  }\n\n  static void SetTypeOracle(TypeOracle type_oracle) {\n    Get().type_oracle_ = std::make_unique<TypeOracle>(std::move(type_oracle));\n  }\n\n  static const Symbols& SymbolsForSourceId(SourceId id) {\n    return Get().symbols_map_[id];\n  }\n\n private:\n  // Splits all declarables up by SourceId and filters out auto-generated ones.\n  void PrepareAllDeclarableSymbols();\n\n  DefinitionsMap definitions_map_;\n  SymbolsMap symbols_map_;\n  std::unique_ptr<GlobalContext> global_context_;\n  std::unique_ptr<TypeOracle> type_oracle_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"AddDefinition\",\n                \"parent\": \"LanguageServerData\",\n                \"about\": \"Adds a definition mapping to the internal map.\",\n                \"logic\": \"This function is responsible for storing the relationship between a token and its definition, using their SourcePositions. The `Get()` method likely retrieves the singleton instance of the `LanguageServerData` class, since it inherits from `base::ContextualClass`.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"token\",\n                        \"type\": \"SourcePosition\",\n                        \"purpose\": \"The source position of the token.\"\n                    },\n                    {\n                        \"name\": \"definition\",\n                        \"type\": \"SourcePosition\",\n                        \"purpose\": \"The source position of the token's definition.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"SourcePosition\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  V8_EXPORT_PRIVATE static void AddDefinition(SourcePosition token,\n                                              SourcePosition definition);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"FindDefinition\",\n                \"parent\": \"LanguageServerData\",\n                \"about\": \"Finds the definition of a token based on its source ID and line/column position.\",\n                \"logic\": \"This function searches the internal definition mappings to locate the definition corresponding to the given source ID and line/column.  The `Get()` method likely retrieves the singleton instance of the `LanguageServerData` class.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"source\",\n                        \"type\": \"SourceId\",\n                        \"purpose\": \"The ID of the source file.\"\n                    },\n                    {\n                        \"name\": \"pos\",\n                        \"type\": \"LineAndColumn\",\n                        \"purpose\": \"The line and column position of the token.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::optional<SourcePosition>\",\n                    \"description\": \"An optional SourcePosition representing the definition, or std::nullopt if not found.\"\n                },\n                \"dependencies\": [\n                    \"SourceId\",\n                    \"LineAndColumn\",\n                    \"SourcePosition\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  V8_EXPORT_PRIVATE static std::optional<SourcePosition> FindDefinition(\n      SourceId source, LineAndColumn pos);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"SetGlobalContext\",\n                \"parent\": \"LanguageServerData\",\n                \"about\": \"Sets the global context for the LanguageServerData instance.\",\n                \"logic\": \"This function takes ownership of the provided GlobalContext, storing it in a unique_ptr. It also calls PrepareAllDeclarableSymbols() to pre-process the symbols from the new global context.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"global_context\",\n                        \"type\": \"GlobalContext\",\n                        \"purpose\": \"The global context to be used.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"GlobalContext\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static void SetGlobalContext(GlobalContext global_context) {\n    Get().global_context_ =\n        std::make_unique<GlobalContext>(std::move(global_context));\n    Get().PrepareAllDeclarableSymbols();\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"SetTypeOracle\",\n                \"parent\": \"LanguageServerData\",\n                \"about\": \"Sets the type oracle for the LanguageServerData instance.\",\n                \"logic\": \"This function takes ownership of the provided TypeOracle, storing it in a unique_ptr.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"type_oracle\",\n                        \"type\": \"TypeOracle\",\n                        \"purpose\": \"The type oracle to be used.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"TypeOracle\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static void SetTypeOracle(TypeOracle type_oracle) {\n    Get().type_oracle_ = std::make_unique<TypeOracle>(std::move(type_oracle));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"SymbolsForSourceId\",\n                \"parent\": \"LanguageServerData\",\n                \"about\": \"Retrieves the symbols associated with a given source ID.\",\n                \"logic\": \"This function returns a constant reference to the vector of Declarable pointers associated with the provided SourceId.  The `Get()` method likely retrieves the singleton instance of the `LanguageServerData` class.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"type\": \"SourceId\",\n                        \"purpose\": \"The ID of the source file.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const Symbols&\",\n                    \"description\": \"A constant reference to the vector of Declarable pointers (symbols).\"\n                },\n                \"dependencies\": [\n                    \"SourceId\",\n                    \"Symbols\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static const Symbols& SymbolsForSourceId(SourceId id) {\n    return Get().symbols_map_[id];\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PrepareAllDeclarableSymbols\",\n                \"parent\": \"LanguageServerData\",\n                \"about\": \"Prepares the symbol map by splitting declarables by SourceId and filtering out auto-generated ones.\",\n                \"logic\": \"This private method iterates through all declarables in the global context. It filters out auto-generated declarables and groups the remaining ones by their SourceId, storing them in the symbols_map_.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Declarable\",\n                    \"SourceId\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  // Splits all declarables up by SourceId and filters out auto-generated ones.\n  void PrepareAllDeclarableSymbols();\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"GlobalContext\",\n                    \"about\": \"Provides global information about the Torque compilation environment.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class GlobalContext {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TypeOracle\",\n                    \"about\": \"Provides type information for Torque.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class TypeOracle {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Declarable\",\n                    \"about\": \"Base class for things that can be declared in Torque.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Declarable {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SourcePosition\",\n                    \"about\": \"Represents a position in a source file (line, column, source ID).\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class SourcePosition {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"LineAndColumn\",\n                    \"about\": \"Represents a line and column position.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class LineAndColumn {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SourceId\",\n                    \"about\": \"Represents the ID of a source file.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class SourceId {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"base::ContextualClass\",\n                    \"about\": \"A base class that provides contextual information. Used here for singleton-like access to the LanguageServerData.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace base {\n                    template <typename T>\n                    class ContextualClass {};\n                }\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}