{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/frame-states.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 168, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/frame-states.h\",\n        \"file_name\": \"frame-states.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines classes and enums related to frame states used in the V8 compiler for deoptimization and stack frame management.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for builtins, nodes, handles, shared function info, and utilities.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/builtins/builtins.h\"\n            #include \"src/compiler/node.h\"\n            #include \"src/handles/handles.h\"\n            #include \"src/objects/shared-function-info.h\"\n            #include \"src/utils/utils.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"OutputFrameStateCombine\",\n            \"about\": \"Describes how to combine the current environment with the output of a node to obtain a frame state for lazy bailout.\",\n            \"attributes\": [\n                {\n                    \"name\": \"parameter_\",\n                    \"type\": \"size_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores an index or a sentinel value indicating how to combine the output.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            class OutputFrameStateCombine {\n            public:\n            static const size_t kInvalidIndex = SIZE_MAX;\n\n            static OutputFrameStateCombine Ignore() {\n                return OutputFrameStateCombine(kInvalidIndex);\n            }\n            static OutputFrameStateCombine PokeAt(size_t index) {\n                return OutputFrameStateCombine(index);\n            }\n\n            size_t GetOffsetToPokeAt() const {\n                DCHECK_NE(parameter_, kInvalidIndex);\n                return parameter_;\n            }\n\n            bool IsOutputIgnored() const { return parameter_ == kInvalidIndex; }\n\n            size_t ConsumedOutputCount() const { return IsOutputIgnored() ? 0 : 1; }\n\n            bool operator==(OutputFrameStateCombine const& other) const {\n                return parameter_ == other.parameter_;\n            }\n            bool operator!=(OutputFrameStateCombine const& other) const {\n                return !(*this == other);\n            }\n\n            friend size_t hash_value(OutputFrameStateCombine const&);\n            friend std::ostream& operator<<(std::ostream&,\n                                            OutputFrameStateCombine const&);\n\n            private:\n            explicit OutputFrameStateCombine(size_t parameter) : parameter_(parameter) {}\n\n            size_t const parameter_;\n            };\n        ]]></code>\n    </class>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"FrameStateType\",\n            \"about\": \"The type of stack frame that a FrameState node represents.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class FrameStateType {\n            kUnoptimizedFunction,    // Represents an UnoptimizedJSFrame.\n            kInlinedExtraArguments,  // Represents inlined extra arguments.\n            kConstructCreateStub,    // Represents a frame created before creating a new\n                                    // object in the construct stub.\n            kConstructInvokeStub,    // Represents a frame created before invoking the\n                                    // constructor in the construct stub.\n            kBuiltinContinuation,    // Represents a continuation to a stub.\n#if V8_ENABLE_WEBASSEMBLY  // \u2193 WebAssembly only\n            kJSToWasmBuiltinContinuation,    // Represents a lazy deopt continuation for a\n                                            // JS to Wasm call.\n            kWasmInlinedIntoJS,              // Represents a Wasm function inlined into a\n                                            // JS function.\n            kLiftoffFunction,                // Represents an unoptimized (liftoff) wasm\n                                            // function.\n#endif                             // \u2191 WebAssembly only\n            kJavaScriptBuiltinContinuation,  // Represents a continuation to a JavaScipt\n                                            // builtin.\n            kJavaScriptBuiltinContinuationWithCatch  // Represents a continuation to a\n                                                    // JavaScipt builtin with a catch\n                                                    // handler.\n            };\n        ]]></code>\n    </enum>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FrameStateFunctionInfo\",\n            \"about\": \"Contains information about the function associated with a frame state.\",\n            \"attributes\": [\n                {\n                    \"name\": \"type_\",\n                    \"type\": \"FrameStateType\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The type of the frame.\"\n                },\n                {\n                    \"name\": \"parameter_count_\",\n                    \"type\": \"uint16_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Number of parameters of the function.\"\n                },\n                {\n                    \"name\": \"max_arguments_\",\n                    \"type\": \"uint16_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Maximum number of arguments passed to the function.\"\n                },\n                {\n                    \"name\": \"local_count_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Number of local variables in the function.\"\n                },\n                {\n                    \"name\": \"shared_info_\",\n                    \"type\": \"IndirectHandle<SharedFunctionInfo>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handle to the shared function info object.\"\n                },\n                {\n                    \"name\": \"bytecode_array_\",\n                    \"type\": \"MaybeIndirectHandle<BytecodeArray>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handle to the bytecode array of the function.\"\n                }\n            ],\n            \"dependencies\": [\n                \"FrameStateType\",\n                \"SharedFunctionInfo\",\n                \"BytecodeArray\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class FrameStateFunctionInfo {\n            public:\n            FrameStateFunctionInfo(FrameStateType type, uint16_t parameter_count,\n                                    uint16_t max_arguments, int local_count,\n                                    IndirectHandle<SharedFunctionInfo> shared_info,\n                                    MaybeIndirectHandle<BytecodeArray> bytecode_array,\n                                    uint32_t wasm_liftoff_frame_size = 0,\n                                    uint32_t wasm_function_index = -1)\n                : type_(type),\n                parameter_count_(parameter_count),\n                max_arguments_(max_arguments),\n                local_count_(local_count),\n#if V8_ENABLE_WEBASSEMBLY\n                wasm_liftoff_frame_size_(wasm_liftoff_frame_size),\n                wasm_function_index_(wasm_function_index),\n#endif\n                shared_info_(shared_info),\n                bytecode_array_(bytecode_array) {\n            }\n\n            int local_count() const { return local_count_; }\n            uint16_t parameter_count() const { return parameter_count_; }\n            uint16_t max_arguments() const { return max_arguments_; }\n            IndirectHandle<SharedFunctionInfo> shared_info() const {\n                return shared_info_;\n            }\n            MaybeIndirectHandle<BytecodeArray> bytecode_array() const {\n                return bytecode_array_;\n            }\n            FrameStateType type() const { return type_; }\n            uint32_t wasm_liftoff_frame_size() const {\n                return wasm_liftoff_frame_size_;\n            }\n            uint32_t wasm_function_index() const { return wasm_function_index_; }\n\n            static bool IsJSFunctionType(FrameStateType type) {\n                // This must be in sync with TRANSLATION_JS_FRAME_OPCODE_LIST in\n                // translation-opcode.h or bad things happen.\n                return type == FrameStateType::kUnoptimizedFunction ||\n                    type == FrameStateType::kJavaScriptBuiltinContinuation ||\n                    type == FrameStateType::kJavaScriptBuiltinContinuationWithCatch;\n            }\n\n            private:\n            const FrameStateType type_;\n            const uint16_t parameter_count_;\n            const uint16_t max_arguments_;\n            const int local_count_;\n#if V8_ENABLE_WEBASSEMBLY\n            const uint32_t wasm_liftoff_frame_size_ = 0;\n            const uint32_t wasm_function_index_ = -1;\n#else\n            static constexpr uint32_t wasm_liftoff_frame_size_ = 0;\n            static constexpr uint32_t wasm_function_index_ = -1;\n#endif\n            const IndirectHandle<SharedFunctionInfo> shared_info_;\n            const MaybeIndirectHandle<BytecodeArray> bytecode_array_;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for FrameStateFunctionInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"FrameStateFunctionInfo const&\",\n                    \"purpose\": \"Left-hand side operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"FrameStateFunctionInfo const&\",\n                    \"purpose\": \"Right-hand side operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the two FrameStateFunctionInfo objects are equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"FrameStateFunctionInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE bool operator==(FrameStateFunctionInfo const&,\n                                            FrameStateFunctionInfo const&);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSToWasmFrameStateFunctionInfo\",\n            \"extends\": \"FrameStateFunctionInfo\",\n            \"about\": \"Specialization of FrameStateFunctionInfo for JS to WebAssembly calls.\",\n            \"attributes\": [\n                {\n                    \"name\": \"signature_\",\n                    \"type\": \"const wasm::CanonicalSig*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Signature of the WebAssembly function.\"\n                }\n            ],\n            \"dependencies\": [\n                \"FrameStateFunctionInfo\",\n                \"wasm::CanonicalSig\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_WEBASSEMBLY\n            class JSToWasmFrameStateFunctionInfo : public FrameStateFunctionInfo {\n            public:\n            JSToWasmFrameStateFunctionInfo(FrameStateType type, uint16_t parameter_count,\n                                            int local_count,\n                                            IndirectHandle<SharedFunctionInfo> shared_info,\n                                            const wasm::CanonicalSig* signature)\n                : FrameStateFunctionInfo(type, parameter_count, 0, local_count,\n                                        shared_info, {}),\n                signature_(signature) {\n                DCHECK_NOT_NULL(signature);\n            }\n\n            const wasm::CanonicalSig* signature() const { return signature_; }\n\n            private:\n            const wasm::CanonicalSig* const signature_;\n            };\n            #endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FrameStateInfo\",\n            \"about\": \"Aggregates information needed to construct a frame state.\",\n            \"attributes\": [\n                {\n                    \"name\": \"bailout_id_\",\n                    \"type\": \"BytecodeOffset\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The bytecode offset where the bailout occurs.\"\n                },\n                {\n                    \"name\": \"frame_state_combine_\",\n                    \"type\": \"OutputFrameStateCombine\",\n                    \"access\": \"private\",\n                    \"purpose\": \"How to combine the output of the node with the current frame state.\"\n                },\n                {\n                    \"name\": \"info_\",\n                    \"type\": \"const FrameStateFunctionInfo* const\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the FrameStateFunctionInfo object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"BytecodeOffset\",\n                \"OutputFrameStateCombine\",\n                \"FrameStateFunctionInfo\",\n                \"SharedFunctionInfo\",\n                \"BytecodeArray\",\n                \"FrameStateType\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class FrameStateInfo final {\n            public:\n            FrameStateInfo(BytecodeOffset bailout_id,\n                            OutputFrameStateCombine state_combine,\n                            const FrameStateFunctionInfo* info)\n                : bailout_id_(bailout_id),\n                frame_state_combine_(state_combine),\n                info_(info) {}\n\n            FrameStateType type() const {\n                return info_ == nullptr ? FrameStateType::kUnoptimizedFunction\n                                        : info_->type();\n            }\n            BytecodeOffset bailout_id() const { return bailout_id_; }\n            OutputFrameStateCombine state_combine() const { return frame_state_combine_; }\n            MaybeIndirectHandle<SharedFunctionInfo> shared_info() const {\n                return info_ == nullptr ? MaybeIndirectHandle<SharedFunctionInfo>()\n                                        : info_->shared_info();\n            }\n            MaybeIndirectHandle<BytecodeArray> bytecode_array() const {\n                return info_ == nullptr ? MaybeIndirectHandle<BytecodeArray>()\n                                        : info_->bytecode_array();\n            }\n            uint16_t parameter_count() const {\n                return info_ == nullptr ? 0 : info_->parameter_count();\n            }\n            uint16_t max_arguments() const {\n                return info_ == nullptr ? 0 : info_->max_arguments();\n            }\n            int local_count() const {\n                return info_ == nullptr ? 0 : info_->local_count();\n            }\n            int stack_count() const {\n                return type() == FrameStateType::kUnoptimizedFunction ? 1 : 0;\n            }\n            const FrameStateFunctionInfo* function_info() const { return info_; }\n\n            private:\n            BytecodeOffset const bailout_id_;\n            OutputFrameStateCombine const frame_state_combine_;\n            const FrameStateFunctionInfo* const info_;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for FrameStateInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"FrameStateInfo const&\",\n                    \"purpose\": \"Left-hand side operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"FrameStateInfo const&\",\n                    \"purpose\": \"Right-hand side operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the two FrameStateInfo objects are equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"FrameStateInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE bool operator==(FrameStateInfo const&, FrameStateInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator!=\",\n            \"about\": \"Inequality operator for FrameStateInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"FrameStateInfo const&\",\n                    \"purpose\": \"Left-hand side operand.\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"FrameStateInfo const&\",\n                    \"purpose\": \"Right-hand side operand.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the two FrameStateInfo objects are not equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"FrameStateInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE bool operator!=(FrameStateInfo const&, FrameStateInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates the hash value for FrameStateInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"info\",\n                    \"type\": \"FrameStateInfo const&\",\n                    \"purpose\": \"The FrameStateInfo object to calculate the hash value for.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The hash value of the FrameStateInfo object.\"\n            },\n            \"dependencies\": [\n                \"FrameStateInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            size_t hash_value(FrameStateInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Output stream operator for FrameStateInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"info\",\n                    \"type\": \"FrameStateInfo const&\",\n                    \"purpose\": \"The FrameStateInfo object to output.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"FrameStateInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            std::ostream& operator<<(std::ostream&, FrameStateInfo const&);\n        ]]></code>\n    </func>\n    <enum>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum\",\n            \"name\": \"ContinuationFrameStateMode\",\n            \"about\": \"Enum defining the mode for continuation frame states.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            enum class ContinuationFrameStateMode { EAGER, LAZY, LAZY_WITH_CATCH };\n        ]]></code>\n    </enum>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FrameState\",\n            \"about\": \"Forward declaration for FrameState class. Defined elsewhere\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            class FrameState;\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateStubBuiltinContinuationFrameState\",\n            \"about\": \"Creates a frame state for a stub builtin continuation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"JSGraph*\",\n                    \"purpose\": \"The JSGraph object.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"Builtin\",\n                    \"purpose\": \"The builtin name.\"\n                },\n                {\n                    \"name\": \"context\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The context node.\"\n                },\n                {\n                    \"name\": \"parameters\",\n                    \"type\": \"Node* const*\",\n                    \"purpose\": \"An array of parameter nodes.\"\n                },\n                {\n                    \"name\": \"parameter_count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of parameters.\"\n                },\n                {\n                    \"name\": \"outer_frame_state\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The outer frame state node.\"\n                },\n                {\n                    \"name\": \"mode\",\n                    \"type\": \"ContinuationFrameStateMode\",\n                    \"purpose\": \"The continuation frame state mode.\"\n                },\n                 {\n                    \"name\": \"signature\",\n                    \"type\": \"const wasm::CanonicalSig*\",\n                    \"purpose\": \"The wasm signature.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FrameState\",\n                \"description\": \"The created FrameState object.\"\n            },\n            \"dependencies\": [\n                \"JSGraph\",\n                \"Builtin\",\n                \"Node\",\n                \"ContinuationFrameStateMode\",\n                \"FrameState\",\n                \"wasm::CanonicalSig\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FrameState CreateStubBuiltinContinuationFrameState(\n                JSGraph* graph, Builtin name, Node* context, Node* const* parameters,\n                int parameter_count, Node* outer_frame_state,\n                ContinuationFrameStateMode mode,\n                const wasm::CanonicalSig* signature = nullptr);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateJSWasmCallBuiltinContinuationFrameState\",\n            \"about\": \"Creates a frame state for a JS to WebAssembly call builtin continuation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"jsgraph\",\n                    \"type\": \"JSGraph*\",\n                    \"purpose\": \"The JSGraph object.\"\n                },\n                {\n                    \"name\": \"context\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The context node.\"\n                },\n                {\n                    \"name\": \"outer_frame_state\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The outer frame state node.\"\n                },\n                {\n                    \"name\": \"signature\",\n                    \"type\": \"const wasm::CanonicalSig*\",\n                    \"purpose\": \"The WebAssembly canonical signature.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FrameState\",\n                \"description\": \"The created FrameState object.\"\n            },\n            \"dependencies\": [\n                \"JSGraph\",\n                \"Node\",\n                \"FrameState\",\n                \"wasm::CanonicalSig\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_WEBASSEMBLY\n            FrameState CreateJSWasmCallBuiltinContinuationFrameState(\n                JSGraph* jsgraph, Node* context, Node* outer_frame_state,\n                const wasm::CanonicalSig* signature);\n            #endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateJavaScriptBuiltinContinuationFrameState\",\n            \"about\": \"Creates a frame state for a JavaScript builtin continuation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"JSGraph*\",\n                    \"purpose\": \"The JSGraph object.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"SharedFunctionInfoRef\",\n                    \"purpose\": \"The shared function info.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"Builtin\",\n                    \"purpose\": \"The builtin name.\"\n                },\n                {\n                    \"name\": \"target\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The target node.\"\n                },\n                {\n                    \"name\": \"context\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The context node.\"\n                },\n                {\n                    \"name\": \"stack_parameters\",\n                    \"type\": \"Node* const*\",\n                    \"purpose\": \"An array of stack parameter nodes.\"\n                },\n                {\n                    \"name\": \"stack_parameter_count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of stack parameters.\"\n                },\n                {\n                    \"name\": \"outer_frame_state\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The outer frame state node.\"\n                },\n                {\n                    \"name\": \"mode\",\n                    \"type\": \"ContinuationFrameStateMode\",\n                    \"purpose\": \"The continuation frame state mode.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FrameState\",\n                \"description\": \"The created FrameState object.\"\n            },\n            \"dependencies\": [\n                \"JSGraph\",\n                \"SharedFunctionInfoRef\",\n                \"Builtin\",\n                \"Node\",\n                \"ContinuationFrameStateMode\",\n                \"FrameState\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FrameState CreateJavaScriptBuiltinContinuationFrameState(\n                JSGraph* graph, SharedFunctionInfoRef shared, Builtin name, Node* target,\n                Node* context, Node* const* stack_parameters, int stack_parameter_count,\n                Node* outer_frame_state, ContinuationFrameStateMode mode);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateGenericLazyDeoptContinuationFrameState\",\n            \"about\": \"Creates a frame state for a generic lazy deoptimization continuation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"JSGraph*\",\n                    \"purpose\": \"The JSGraph object.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"SharedFunctionInfoRef\",\n                    \"purpose\": \"The shared function info.\"\n                },\n                {\n                    \"name\": \"target\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The target node.\"\n                },\n                {\n                    \"name\": \"context\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The context node.\"\n                },\n                {\n                    \"name\": \"receiver\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The receiver node.\"\n                },\n                {\n                    \"name\": \"outer_frame_state\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The outer frame state node.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FrameState\",\n                \"description\": \"The created FrameState object.\"\n            },\n            \"dependencies\": [\n                \"JSGraph\",\n                \"SharedFunctionInfoRef\",\n                \"Node\",\n                \"FrameState\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FrameState CreateGenericLazyDeoptContinuationFrameState(\n                JSGraph* graph, SharedFunctionInfoRef shared, Node* target, Node* context,\n                Node* receiver, Node* outer_frame_state);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CreateInlinedApiFunctionFrameState\",\n            \"about\": \"Creates a FrameState for inlined API functions.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"JSGraph*\",\n                    \"purpose\": \"The JSGraph object.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"SharedFunctionInfoRef\",\n                    \"purpose\": \"The shared function info.\"\n                },\n                {\n                    \"name\": \"target\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The target node.\"\n                },\n                {\n                    \"name\": \"context\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The context node.\"\n                },\n                {\n                    \"name\": \"receiver\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The receiver node.\"\n                },\n                {\n                    \"name\": \"outer_frame_state\",\n                    \"type\": \"Node*\",\n                    \"purpose\": \"The outer frame state node.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node*\",\n                \"description\": \"The created FrameState object.\"\n            },\n            \"dependencies\": [\n                \"JSGraph\",\n                \"SharedFunctionInfoRef\",\n                \"Node\",\n                \"FrameState\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            Node* CreateInlinedApiFunctionFrameState(JSGraph* graph,\n                                                    SharedFunctionInfoRef shared,\n                                                    Node* target, Node* context,\n                                                    Node* receiver,\n                                                    Node* outer_frame_state);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CloneFrameState\",\n            \"about\": \"Clones a FrameState with a changed OutputFrameStateCombine.\",\n            \"parameters\": [\n                {\n                    \"name\": \"jsgraph\",\n                    \"type\": \"JSGraph*\",\n                    \"purpose\": \"The JSGraph object.\"\n                },\n                {\n                    \"name\": \"frame_state\",\n                    \"type\": \"FrameState\",\n                    \"purpose\": \"The FrameState to clone.\"\n                },\n                {\n                    \"name\": \"changed_state_combine\",\n                    \"type\": \"OutputFrameStateCombine\",\n                    \"purpose\": \"The new OutputFrameStateCombine.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"FrameState\",\n                \"description\": \"The cloned FrameState object.\"\n            },\n            \"dependencies\": [\n                \"JSGraph\",\n                \"FrameState\",\n                \"OutputFrameStateCombine\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            FrameState CloneFrameState(JSGraph* jsgraph, FrameState frame_state,\n                                    OutputFrameStateCombine changed_state_combine);\n        ]]></code>\n    </func>\n</file>\n```"
}