{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-external-memory-accounter.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 169, column 49",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-external-memory-accounter.h\",\n        \"file_name\": \"v8-external-memory-accounter.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the ExternalMemoryAccounter class, which allows V8 to track externally allocated memory and adjust garbage collection frequency accordingly.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary standard library and V8 headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <stdint.h>\n\n#include \"v8-isolate.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ExternalMemoryAccounter\",\n            \"about\": \"Provides an interface to inform V8 about externally allocated memory associated with JavaScript objects, influencing garbage collection behavior.\",\n            \"attributes\": [\n                {\n                    \"name\": \"amount_of_external_memory_\",\n                    \"type\": \"size_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the amount of external memory being tracked. Only enabled when V8_ENABLE_MEMORY_ACCOUNTING_CHECKS is defined.\"\n                },\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"v8::Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate. Only enabled when V8_ENABLE_MEMORY_ACCOUNTING_CHECKS is defined.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT ExternalMemoryAccounter {\n public:\n  /**\n   * Returns the amount of external memory registered for `isolate`.\n   */\n  static int64_t GetTotalAmountOfExternalAllocatedMemoryForTesting(\n      const Isolate* isolate);\n\n  ExternalMemoryAccounter() = default;\n  ~ExternalMemoryAccounter();\n  ExternalMemoryAccounter(ExternalMemoryAccounter&&);\n  ExternalMemoryAccounter& operator=(ExternalMemoryAccounter&&);\n  ExternalMemoryAccounter(const ExternalMemoryAccounter&) = delete;\n  ExternalMemoryAccounter& operator=(const ExternalMemoryAccounter&) = delete;\n\n  /**\n   * Reports an increase of `size` bytes of external memory.\n   */\n  void Increase(Isolate* isolate, size_t size);\n  /**\n   * Reports an update of `delta` bytes of external memory.\n   */\n  void Update(Isolate* isolate, int64_t delta);\n  /**\n   * Reports an decrease of `size` bytes of external memory.\n   */\n  void Decrease(Isolate* isolate, size_t size);\n\n private:\n#ifdef V8_ENABLE_MEMORY_ACCOUNTING_CHECKS\n  size_t amount_of_external_memory_ = 0;\n  v8::Isolate* isolate_ = nullptr;\n#endif\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"GetTotalAmountOfExternalAllocatedMemoryForTesting\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"A static method that returns the total amount of external memory registered for a given Isolate.\",\n            \"logic\": \"This is likely a testing-specific function to inspect the external memory accounting.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"const Isolate*\",\n                    \"purpose\": \"The V8 isolate to query.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int64_t\",\n                \"description\": \"The total amount of external memory allocated for the isolate.\"\n            },\n            \"dependencies\": [\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  static int64_t GetTotalAmountOfExternalAllocatedMemoryForTesting(\n      const Isolate* isolate);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"~ExternalMemoryAccounter\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Destructor for the ExternalMemoryAccounter class.\",\n            \"logic\": \"Likely asserts that the reported external memory is back to 0 upon destruction to ensure proper accounting. The behavior depends on the `V8_ENABLE_MEMORY_ACCOUNTING_CHECKS` macro.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n  ~ExternalMemoryAccounter();\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ExternalMemoryAccounter\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Move constructor for the ExternalMemoryAccounter class.\",\n            \"logic\": \"Handles the move of external memory accounting state from one object to another.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"ExternalMemoryAccounter\",\n                \"description\": \"A newly constructed object.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n  ExternalMemoryAccounter(ExternalMemoryAccounter&&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"operator=\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Move assignment operator for the ExternalMemoryAccounter class.\",\n            \"logic\": \"Handles the move of external memory accounting state from one object to another.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"ExternalMemoryAccounter&\",\n                \"description\": \"A reference to this object.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n  ExternalMemoryAccounter& operator=(ExternalMemoryAccounter&&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ExternalMemoryAccounter\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Deleted copy constructor for the ExternalMemoryAccounter class.\",\n            \"logic\": \"Disables the copy constructor to prevent unintended copying of external memory accounting state.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"ExternalMemoryAccounter\",\n                \"description\": \"A newly constructed object.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n  ExternalMemoryAccounter(const ExternalMemoryAccounter&) = delete;\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"operator=\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Deleted copy assignment operator for the ExternalMemoryAccounter class.\",\n            \"logic\": \"Disables the copy assignment operator to prevent unintended copying of external memory accounting state.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"ExternalMemoryAccounter&\",\n                \"description\": \"A reference to this object.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n  ExternalMemoryAccounter& operator=(const ExternalMemoryAccounter&) = delete;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Increase\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Reports an increase in the amount of externally allocated memory.\",\n            \"logic\": \"Increases the tracked external memory for the given isolate by the specified size.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The V8 isolate to update.\"\n                },\n                {\n                    \"name\": \"size\",\n                    \"type\": \"size_t\",\n                    \"purpose\": \"The amount of memory to increase by.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  void Increase(Isolate* isolate, size_t size);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Update\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Reports an update in the amount of externally allocated memory.\",\n            \"logic\": \"Updates the tracked external memory for the given isolate by the specified delta.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The V8 isolate to update.\"\n                },\n                {\n                    \"name\": \"delta\",\n                    \"type\": \"int64_t\",\n                    \"purpose\": \"The amount of memory to update by (can be positive or negative).\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  void Update(Isolate* isolate, int64_t delta);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Decrease\",\n            \"parent\": \"ExternalMemoryAccounter\",\n            \"about\": \"Reports a decrease in the amount of externally allocated memory.\",\n            \"logic\": \"Decreases the tracked external memory for the given isolate by the specified size.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The V8 isolate to update.\"\n                },\n                {\n                    \"name\": \"size\",\n                    \"type\": \"size_t\",\n                    \"purpose\": \"The amount of memory to decrease by.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  void Decrease(Isolate* isolate, size_t size);\n        ]]></code>\n    </func>\n</file>\n```"
}