{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/compiler-source-position-table.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 52, column 55",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/compiler-source-position-table.h\",\n        \"file_name\": \"compiler-source-position-table.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the SourcePositionTable class for managing source positions of nodes in the compiler graph.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for base classes, source position representation, and node auxiliary data.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/compiler-specific.h\"\n#include \"src/codegen/source-position.h\"\n#include \"src/compiler/node-aux-data.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourcePositionTable\",\n            \"extends\": \"ZoneObject\",\n            \"about\": \"Manages the source positions of nodes in the compiler graph.\",\n            \"attributes\": [\n                {\n                    \"name\": \"graph_\",\n                    \"type\": \"TFGraph*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the compiler graph.\"\n                },\n                {\n                    \"name\": \"decorator_\",\n                    \"type\": \"Decorator*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to a decorator object (likely for adding/removing data from nodes).\"\n                },\n                {\n                    \"name\": \"current_position_\",\n                    \"type\": \"SourcePosition\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The current source position being tracked.\"\n                },\n                {\n                    \"name\": \"table_\",\n                    \"type\": \"NodeAuxData<SourcePosition, UnknownSourcePosition>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A table mapping nodes to their source positions.\"\n                },\n                {\n                    \"name\": \"enabled_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Flag indicating whether the source position tracking is enabled.\"\n                }\n            ],\n            \"dependencies\": [\n                \"ZoneObject\",\n                \"SourcePosition\",\n                \"NodeAuxData\",\n                \"TFGraph\",\n                \"Node\",\n                \"NodeId\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE SourcePositionTable final\n    : public NON_EXPORTED_BASE(ZoneObject) {\n public:\n  class V8_NODISCARD Scope final {\n   public:\n    Scope(SourcePositionTable* source_positions, SourcePosition position)\n        : source_positions_(source_positions),\n          prev_position_(source_positions->current_position_) {\n      Init(position);\n    }\n    Scope(SourcePositionTable* source_positions, Node* node)\n        : source_positions_(source_positions),\n          prev_position_(source_positions->current_position_) {\n      Init(source_positions_->GetSourcePosition(node));\n    }\n    ~Scope() { source_positions_->current_position_ = prev_position_; }\n    Scope(const Scope&) = delete;\n    Scope& operator=(const Scope&) = delete;\n\n   private:\n    void Init(SourcePosition position) {\n      if (position.IsKnown()) source_positions_->current_position_ = position;\n    }\n\n    SourcePositionTable* const source_positions_;\n    SourcePosition const prev_position_;\n  };\n\n  explicit SourcePositionTable(TFGraph* graph);\n  SourcePositionTable(const SourcePositionTable&) = delete;\n  SourcePositionTable& operator=(const SourcePositionTable&) = delete;\n\n  void AddDecorator();\n  void RemoveDecorator();\n\n  SourcePosition GetSourcePosition(Node* node) const;\n  SourcePosition GetSourcePosition(NodeId id) const;\n  void SetSourcePosition(Node* node, SourcePosition position);\n\n  void SetCurrentPosition(const SourcePosition& pos) {\n    current_position_ = pos;\n  }\n  SourcePosition GetCurrentPosition() const { return current_position_; }\n\n  void Disable() { enabled_ = false; }\n  void Enable() { enabled_ = true; }\n\n  bool IsEnabled() const { return enabled_; }\n\n  void PrintJson(std::ostream& os) const;\n\n private:\n  class Decorator;\n\n  static SourcePosition UnknownSourcePosition(Zone* zone) {\n    return SourcePosition::Unknown();\n  }\n\n  TFGraph* const graph_;\n  Decorator* decorator_;\n  SourcePosition current_position_;\n  NodeAuxData<SourcePosition, UnknownSourcePosition> table_;\n  bool enabled_ = true;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Scope\",\n            \"parent\": \"SourcePositionTable\",\n            \"about\": \"A helper class for managing source position scopes.\",\n            \"attributes\": [\n                {\n                    \"name\": \"source_positions_\",\n                    \"type\": \"SourcePositionTable*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the SourcePositionTable.\"\n                },\n                {\n                    \"name\": \"prev_position_\",\n                    \"type\": \"SourcePosition\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The previous source position before entering the scope.\"\n                }\n            ],\n            \"dependencies\": [\n                \"SourcePositionTable\",\n                \"SourcePosition\",\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  class V8_NODISCARD Scope final {\n   public:\n    Scope(SourcePositionTable* source_positions, SourcePosition position)\n        : source_positions_(source_positions),\n          prev_position_(source_positions->current_position_) {\n      Init(position);\n    }\n    Scope(SourcePositionTable* source_positions, Node* node)\n        : source_positions_(source_positions),\n          prev_position_(source_positions->current_position_) {\n      Init(source_positions_->GetSourcePosition(node));\n    }\n    ~Scope() { source_positions_->current_position_ = prev_position_; }\n    Scope(const Scope&) = delete;\n    Scope& operator=(const Scope&) = delete;\n\n   private:\n    void Init(SourcePosition position) {\n      if (position.IsKnown()) source_positions_->current_position_ = position;\n    }\n\n    SourcePositionTable* const source_positions_;\n    SourcePosition const prev_position_;\n  };\n        ]]></code>\n    </class>\n</file>\n```"
}