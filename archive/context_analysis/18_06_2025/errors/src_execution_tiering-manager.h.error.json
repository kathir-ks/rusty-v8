{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/tiering-manager.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 133, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/execution/tiering-manager.h\",\n            \"file_name\": \"tiering-manager.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Header file for the TieringManager class, which manages the tiering (optimization) of JavaScript functions in V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard and V8-specific headers for various functionalities such as optional types, assertions, handle management, and memory allocation.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <optional>\n\n            #include \"src/common/assert-scope.h\"\n            #include \"src/handles/handles.h\"\n            #include \"src/utils/allocation.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TieringManager\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Manages the tiering (optimization) of JavaScript functions in V8.  It decides when and how to optimize functions based on their execution statistics and other factors.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"isolate_\",\n                        \"type\": \"Isolate*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A pointer to the V8 Isolate associated with this TieringManager.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"JSFunction\",\n                    \"CodeKind\",\n                    \"OptimizationDecision\",\n                    \"FeedbackVector\",\n                    \"OptimizationReason\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class TieringManager {\n             public:\n              explicit TieringManager(Isolate* isolate) : isolate_(isolate) {}\n\n              void OnInterruptTick(DirectHandle<JSFunction> function, CodeKind code_kind);\n\n              void NotifyICChanged(Tagged<FeedbackVector> vector);\n\n              // After this request, the next JumpLoop will perform OSR.\n              void RequestOsrAtNextOpportunity(Tagged<JSFunction> function);\n\n              // For use when a JSFunction is available.\n              static int InterruptBudgetFor(\n                  Isolate* isolate, Tagged<JSFunction> function,\n                  std::optional<CodeKind> override_active_tier = {});\n\n              void MarkForTurboFanOptimization(Tagged<JSFunction> function);\n\n             private:\n              // Make the decision whether to optimize the given function, and mark it for\n              // optimization if the decision was 'yes'.\n              // This function is also responsible for bumping the OSR urgency.\n              void MaybeOptimizeFrame(Tagged<JSFunction> function, CodeKind code_kind);\n\n              // After next tick indicates whether we've precremented the ticks before\n              // calling this function, or whether we're pretending that we already got the\n              // tick.\n              OptimizationDecision ShouldOptimize(Tagged<FeedbackVector> feedback_vector,\n                                                  CodeKind code_kind);\n              void Optimize(Tagged<JSFunction> function, OptimizationDecision decision);\n              void Baseline(Tagged<JSFunction> function, OptimizationReason reason);\n\n              class V8_NODISCARD OnInterruptTickScope final {\n               public:\n                OnInterruptTickScope();\n\n               private:\n                DisallowGarbageCollection no_gc;\n              };\n\n              Isolate* const isolate_;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"TraceManualRecompile\",\n                \"parent\": null,\n                \"about\": \"Traces manual recompilation events for debugging and performance analysis.\",\n                \"logic\": \"This function is likely used to log information about when a function is manually recompiled, including the function itself, the code kind, and the concurrency mode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"function\",\n                        \"type\": \"Tagged<JSFunction>\",\n                        \"purpose\": \"The JavaScript function being recompiled.\"\n                    },\n                    {\n                        \"name\": \"code_kind\",\n                        \"type\": \"CodeKind\",\n                        \"purpose\": \"The kind of code being generated (e.g., optimized, unoptimized).\"\n                    },\n                    {\n                        \"name\": \"concurrency_mode\",\n                        \"type\": \"ConcurrencyMode\",\n                        \"purpose\": \"The concurrency mode of the recompilation.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"JSFunction\",\n                    \"CodeKind\",\n                    \"ConcurrencyMode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            void TraceManualRecompile(Tagged<JSFunction> function, CodeKind code_kind,\n                                      ConcurrencyMode concurrency_mode);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"OnInterruptTickScope\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"A helper class to disallow garbage collection during the OnInterruptTick method. This is a RAII (Resource Acquisition Is Initialization) class.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"DisallowGarbageCollection\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class V8_NODISCARD OnInterruptTickScope final {\n             public:\n              OnInterruptTickScope();\n\n             private:\n              DisallowGarbageCollection no_gc;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSFunction\",\n                    \"about\": \"Represents a JavaScript function.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class JSFunction;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"BytecodeArray\",\n                    \"about\": \"Represents a bytecode array.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class BytecodeArray;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"OptimizationDecision\",\n                    \"about\": \"Represents the outcome of a decision to optimize a function.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class OptimizationDecision;\n            ]]></code>\n        </class>\n        <enum>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"enum\",\n                    \"name\": \"CodeKind\",\n                    \"about\": \"Enumerates the different kinds of code (e.g., optimized, unoptimized).\"\n                }\n            </metadata>\n            <code><![CDATA[\n                enum class CodeKind : uint8_t;\n            ]]></code>\n        </enum>\n        <enum>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"enum\",\n                    \"name\": \"OptimizationReason\",\n                    \"about\": \"Enumerates the reasons why a function might be optimized.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                enum class OptimizationReason : uint8_t;\n            ]]></code>\n        </enum>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"FeedbackVector\",\n                    \"about\": \"Stores feedback about the execution of a function, used for optimization decisions.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class FeedbackVector;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"DirectHandle\",\n                    \"about\": \"A direct handle to a JavaScript object, providing direct access without garbage collection barriers.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class DirectHandle;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Tagged\",\n                    \"about\": \"A tagged pointer, representing a pointer to a JavaScript object along with its type information.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Tagged;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"DisallowGarbageCollection\",\n                    \"about\": \"A helper class to disallow garbage collection within a scope.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class DisallowGarbageCollection;\n            ]]></code>\n        </class>\n        <enum>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"enum\",\n                    \"name\": \"ConcurrencyMode\",\n                    \"about\": \"Enumerates the concurrency modes for recompilation (e.g., concurrent, non-concurrent).\"\n                }\n            </metadata>\n            <code><![CDATA[\n                enum class ConcurrencyMode : uint8_t;\n            ]]></code>\n        </enum>\n    </dependencies>\n</file>\n```"
}