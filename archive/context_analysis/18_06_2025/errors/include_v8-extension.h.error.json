{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-extension.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 138, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-extension.h\",\n        \"file_name\": \"v8-extension.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the Extension class and related functions for extending V8 with custom JavaScript functionality.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for memory management, handle management, primitive types, and V8 configuration.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <memory>\n            #include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n            #include \"v8-primitive.h\"     // NOLINT(build/include_directory)\n            #include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Extension\",\n            \"about\": \"Represents a V8 extension, allowing native code to be exposed to JavaScript.\",\n            \"attributes\": [\n                {\n                    \"name\": \"name_\",\n                    \"type\": \"const char*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The name of the extension.\"\n                },\n                {\n                    \"name\": \"source_length_\",\n                    \"type\": \"size_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The length of the extension's source code.\"\n                },\n                {\n                    \"name\": \"source_\",\n                    \"type\": \"String::ExternalOneByteStringResource*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The source code of the extension.\"\n                },\n                {\n                    \"name\": \"dep_count_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The number of dependencies of the extension.\"\n                },\n                {\n                    \"name\": \"deps_\",\n                    \"type\": \"const char**\",\n                    \"access\": \"private\",\n                    \"purpose\": \"An array of dependency names.\"\n                },\n                {\n                    \"name\": \"auto_enable_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Whether the extension should be automatically enabled.\"\n                }\n            ],\n            \"dependencies\": [\n                \"FunctionTemplate\",\n                \"Isolate\",\n                \"Local\",\n                \"String\",\n                \"String::ExternalOneByteStringResource\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class V8_EXPORT Extension {\n            public:\n            // Note that the strings passed into this constructor must live as long\n            // as the Extension itself.\n            Extension(const char* name, const char* source = nullptr, int dep_count = 0,\n                        const char** deps = nullptr, int source_length = -1);\n            virtual ~Extension() { delete source_; }\n            virtual Local<FunctionTemplate> GetNativeFunctionTemplate(\n                Isolate* isolate, Local<String> name) {\n                return Local<FunctionTemplate>();\n            }\n\n            const char* name() const { return name_; }\n            size_t source_length() const { return source_length_; }\n            const String::ExternalOneByteStringResource* source() const {\n                return source_;\n            }\n            int dependency_count() const { return dep_count_; }\n            const char** dependencies() const { return deps_; }\n            void set_auto_enable(bool value) { auto_enable_ = value; }\n            bool auto_enable() { return auto_enable_; }\n\n            // Disallow copying and assigning.\n            Extension(const Extension&) = delete;\n            void operator=(const Extension&) = delete;\n\n            private:\n            const char* name_;\n            size_t source_length_;  // expected to initialize before source_\n            String::ExternalOneByteStringResource* source_;\n            int dep_count_;\n            const char** deps_;\n            bool auto_enable_;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"RegisterExtension\",\n            \"about\": \"Registers a V8 extension, making it available for use in JavaScript code.\",\n            \"logic\": \"Takes a unique pointer to an Extension object and registers it with V8.\",\n            \"parameters\": [\n                {\n                    \"name\": \"extension\",\n                    \"type\": \"std::unique_ptr<Extension>\",\n                    \"purpose\": \"A unique pointer to the Extension object to register.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Extension\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void V8_EXPORT RegisterExtension(std::unique_ptr<Extension>);\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"FunctionTemplate\",\n                \"about\": \"A template for creating JavaScript functions.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class FunctionTemplate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Local\",\n                \"about\": \"A handle to a V8 object within a specific isolate.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Local {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"String\",\n                \"about\": \"Represents a JavaScript string.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class String {\n                public:\n                    class ExternalOneByteStringResource {};\n                };\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}