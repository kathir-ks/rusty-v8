{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/graph-reducer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 227, column 47",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/graph-reducer.h\",\n        \"file_name\": \"graph-reducer.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares classes for performing iterative reduction of a node graph in the Turbofan compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and V8 specific headers for compiler and base functionalities\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/compiler-specific.h\"\n#include \"src/compiler/node-marker.h\"\n#include \"src/compiler/node-properties.h\"\n#include \"src/compiler/turbofan-graph.h\"\n#include \"src/zone/zone-containers.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Reduction\",\n            \"about\": \"Represents the result of trying to reduce a node in the graph.\",\n            \"attributes\": [\n                {\n                    \"name\": \"replacement_\",\n                    \"type\": \"Node*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The node that replaces the original node.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Reduction final {\n public:\n  explicit Reduction(Node* replacement = nullptr) : replacement_(replacement) {}\n\n  Node* replacement() const { return replacement_; }\n  bool Changed() const { return replacement() != nullptr; }\n  Reduction FollowedBy(Reduction next) const {\n    if (next.Changed()) return next;\n    return *this;\n  }\n\n private:\n  Node* replacement_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Reducer\",\n            \"about\": \"A reducer can reduce or simplify a given node based on its operator and inputs. This class functions as an extension point for the graph reducer.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Node\",\n                \"Reduction\",\n                \"ObserveNodeManager\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE Reducer {\n public:\n  virtual ~Reducer() = default;\n\n  // Only used for tracing, when using the --trace_turbo_reduction flag.\n  virtual const char* reducer_name() const = 0;\n\n  // Try to reduce a node if possible.\n  Reduction Reduce(Node* node, ObserveNodeManager* observe_node_manager);\n\n  // Invoked by the {GraphReducer} when all nodes are done.  Can be used to\n  // do additional reductions at the end, which in turn can cause a new round\n  // of reductions.\n  virtual void Finalize();\n\n  // Helper functions for subclasses to produce reductions for a node.\n  static Reduction NoChange() { return Reduction(); }\n  static Reduction Replace(Node* node) { return Reduction(node); }\n  static Reduction Changed(Node* node) { return Reduction(node); }\n\n private:\n  virtual Reduction Reduce(Node* node) = 0;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"AdvancedReducer\",\n            \"extends\": \"Reducer\",\n            \"about\": \"An advanced reducer can also edit the graphs by changing and replacing nodes other than the one currently being reduced.\",\n            \"attributes\": [\n                {\n                    \"name\": \"editor_\",\n                    \"type\": \"Editor*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The editor used to modify the graph.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Reducer\",\n                \"Node\",\n                \"Reduction\",\n                \"Editor\",\n                \"TFGraph\",\n                \"CommonOperatorBuilder\",\n                \"NodeProperties\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass AdvancedReducer : public Reducer {\n public:\n  // Observe the actions of this reducer.\n  class Editor {\n   public:\n    virtual ~Editor() = default;\n\n    // Replace {node} with {replacement}.\n    virtual void Replace(Node* node, Node* replacement) = 0;\n    virtual void Replace(Node* node, Node* replacement, NodeId max_id) = 0;\n    // Revisit the {node} again later.\n    virtual void Revisit(Node* node) = 0;\n    // Replace value uses of {node} with {value} and effect uses of {node} with\n    // {effect}. If {effect == nullptr}, then use the effect input to {node}.\n    // All control uses will be relaxed assuming {node} cannot throw.\n    virtual void ReplaceWithValue(Node* node, Node* value, Node* effect,\n                                  Node* control) = 0;\n  };\n\n  explicit AdvancedReducer(Editor* editor) : editor_(editor) {}\n\n protected:\n  // Helper functions for subclasses to produce reductions for a node.\n  static Reduction Replace(Node* node) { return Reducer::Replace(node); }\n\n  // Helper functions for subclasses to edit the graph.\n  void Replace(Node* node, Node* replacement) {\n    DCHECK_NOT_NULL(editor_);\n    editor_->Replace(node, replacement);\n  }\n  void Replace(Node* node, Node* replacement, NodeId max_id) {\n    return editor_->Replace(node, replacement, max_id);\n  }\n  void Revisit(Node* node) {\n    DCHECK_NOT_NULL(editor_);\n    editor_->Revisit(node);\n  }\n  void ReplaceWithValue(Node* node, Node* value, Node* effect = nullptr,\n                        Node* control = nullptr) {\n    DCHECK_NOT_NULL(editor_);\n    editor_->ReplaceWithValue(node, value, effect, control);\n  }\n\n  // Relax the effects of {node} by immediately replacing effect and control\n  // uses of {node} with the effect and control input to {node}.\n  // TODO(turbofan): replace the effect input to {node} with {graph->start()}.\n  void RelaxEffectsAndControls(Node* node) {\n    ReplaceWithValue(node, node, nullptr, nullptr);\n  }\n\n  // Relax the control uses of {node} by immediately replacing them with the\n  // either the given {control} node, or the control input to {node}.\n  void RelaxControls(Node* node, Node* control = nullptr) {\n    ReplaceWithValue(node, node, node, control);\n  }\n\n  void MergeControlToEnd(TFGraph* graph, CommonOperatorBuilder* common,\n                         Node* node) {\n    NodeProperties::MergeControlToEnd(graph, common, node);\n    Revisit(graph->end());\n  }\n\n private:\n  Editor* const editor_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"GraphReducer\",\n            \"extends\": \"AdvancedReducer::Editor\",\n            \"about\": \"Performs an iterative reduction of a node graph.\",\n            \"attributes\": [\n                {\n                    \"name\": \"graph_\",\n                    \"type\": \"TFGraph*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The graph being reduced.\"\n                },\n                {\n                    \"name\": \"dead_\",\n                    \"type\": \"Node*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A dead node used for replacement.\"\n                },\n                {\n                    \"name\": \"state_\",\n                    \"type\": \"NodeMarker<State>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Marks the state of each node during reduction.\"\n                },\n                {\n                    \"name\": \"reducers_\",\n                    \"type\": \"ZoneVector<Reducer*>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The list of reducers to apply.\"\n                },\n                {\n                    \"name\": \"revisit_\",\n                    \"type\": \"ZoneQueue<Node*>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A queue of nodes to revisit.\"\n                },\n                {\n                    \"name\": \"stack_\",\n                    \"type\": \"ZoneStack<NodeState>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A stack used during reduction.\"\n                },\n                {\n                    \"name\": \"tick_counter_\",\n                    \"type\": \"TickCounter*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A counter for tracking progress.\"\n                },\n                {\n                    \"name\": \"broker_\",\n                    \"type\": \"JSHeapBroker*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Broker for accessing JS heap objects.\"\n                },\n                {\n                    \"name\": \"observe_node_manager_\",\n                    \"type\": \"ObserveNodeManager*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Manager for observing nodes.\"\n                }\n            ],\n            \"dependencies\": [\n                \"AdvancedReducer\",\n                \"Zone\",\n                \"TFGraph\",\n                \"TickCounter\",\n                \"JSHeapBroker\",\n                \"Node\",\n                \"ObserveNodeManager\",\n                \"Reducer\",\n                \"NodeMarker\",\n                \"ZoneVector\",\n                \"ZoneQueue\",\n                \"ZoneStack\",\n                \"NodeProperties\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE GraphReducer\n    : public NON_EXPORTED_BASE(AdvancedReducer::Editor) {\n public:\n  GraphReducer(Zone* zone, TFGraph* graph, TickCounter* tick_counter,\n               JSHeapBroker* broker, Node* dead = nullptr,\n               ObserveNodeManager* observe_node_manager = nullptr);\n  ~GraphReducer() override;\n\n  GraphReducer(const GraphReducer&) = delete;\n  GraphReducer& operator=(const GraphReducer&) = delete;\n\n  TFGraph* graph() const { return graph_; }\n\n  void AddReducer(Reducer* reducer);\n\n  // Reduce a single node.\n  void ReduceNode(Node* const);\n  // Reduce the whole graph.\n  void ReduceGraph();\n\n private:\n  enum class State : uint8_t;\n  struct NodeState {\n    Node* node;\n    int input_index;\n  };\n\n  // Reduce a single node.\n  Reduction Reduce(Node* const);\n  // Reduce the node on top of the stack.\n  void ReduceTop();\n\n  // Replace {node} with {replacement}.\n  void Replace(Node* node, Node* replacement) final;\n\n  // Replace value uses of {node} with {value} and effect uses of {node} with\n  // {effect}. If {effect == nullptr}, then use the effect input to {node}. All\n  // control uses will be relaxed assuming {node} cannot throw.\n  void ReplaceWithValue(Node* node, Node* value, Node* effect,\n                        Node* control) final;\n\n  // Replace all uses of {node} with {replacement} if the id of {replacement} is\n  // less than or equal to {max_id}. Otherwise, replace all uses of {node} whose\n  // id is less than or equal to {max_id} with the {replacement}.\n  void Replace(Node* node, Node* replacement, NodeId max_id) final;\n\n  // Node stack operations.\n  void Pop();\n  void Push(Node* node);\n\n  // Revisit queue operations.\n  bool Recurse(Node* node);\n  void Revisit(Node* node) final;\n\n  TFGraph* const graph_;\n  Node* const dead_;\n  NodeMarker<State> state_;\n  ZoneVector<Reducer*> reducers_;\n  ZoneQueue<Node*> revisit_;\n  ZoneStack<NodeState> stack_;\n  TickCounter* const tick_counter_;\n  JSHeapBroker* const broker_;\n  ObserveNodeManager* const observe_node_manager_;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TFGraph\",\n                \"about\": \"Represents the Turbofan graph.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class TFGraph;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Node\",\n                \"about\": \"Represents a node in the graph.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class Node;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ObserveNodeManager\",\n                \"about\": \"Manages observation of nodes.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class ObserveNodeManager;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSHeapBroker\",\n                \"about\": \"Broker for accessing JS heap objects.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class JSHeapBroker;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TickCounter\",\n                \"about\": \"Counter for tracking progress.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class TickCounter;\n            ]]></code>\n        </class>\n         <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CommonOperatorBuilder\",\n                \"about\": \"Builder class for common operators.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n             class CommonOperatorBuilder;\n            ]]></code>\n        </class>\n         <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"NodeProperties\",\n                \"about\": \"Utility class for node properties.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n             class NodeProperties;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Memory allocation zone.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n             class Zone;\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}