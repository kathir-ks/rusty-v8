{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/ppc/deoptimizer-ppc.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 76, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/ppc/deoptimizer-ppc.cc\",\n            \"file_name\": \"deoptimizer-ppc.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implements the deoptimizer functionality for the PPC (PowerPC) architecture in the V8 JavaScript engine.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary header files for deoptimization and isolate data.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/deoptimizer/deoptimizer.h\"\n#include \"src/execution/isolate-data.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ASSERT_OFFSET\",\n                \"parent\": null,\n                \"about\": \"A macro that asserts that the offset of a Builtin entry in the isolate data is within a certain range.\",\n                \"logic\": \"The macro calculates the offset of the builtin entry and uses static_assert to ensure that it's less than or equal to 0x1000.  This is related to the size/layout of the isolate data structure.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"BuiltinName\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The name of the builtin function.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"This is a macro, so it doesn't return a value directly. It either compiles or fails with a static assertion error.\"\n                },\n                \"dependencies\": [\n                    \"Builtins::ToInt\",\n                    \"kSystemPointerSize\",\n                    \"IsolateData::builtin_tier0_entry_table_offset\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define ASSERT_OFFSET(BuiltinName)                                       \\\n  static_assert(IsolateData::builtin_tier0_entry_table_offset() +        \\\n                    Builtins::ToInt(BuiltinName) * kSystemPointerSize <= \\\n                0x1000)\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"<anonymous>\",\n                \"parent\": null,\n                \"about\": \"Calls the ASSERT_OFFSET macro for specific Builtins.\",\n                \"logic\": \"This enforces the offset assertion for kDeoptimizationEntry_Eager and kDeoptimizationEntry_Lazy.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"Does not return a value.  Causes a compile time failure if the offsets are incorrect.\"\n                },\n                \"dependencies\": [\n                    \"ASSERT_OFFSET\",\n                    \"Builtin::kDeoptimizationEntry_Eager\",\n                    \"Builtin::kDeoptimizationEntry_Lazy\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nASSERT_OFFSET(Builtin::kDeoptimizationEntry_Eager);\nASSERT_OFFSET(Builtin::kDeoptimizationEntry_Lazy);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"<anonymous>\",\n                \"parent\": null,\n                \"about\": \"Undefines the ASSERT_OFFSET macro.\",\n                \"logic\": \"Removes the macro definition to prevent further use.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"Does not return a value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#undef ASSERT_OFFSET\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Deoptimizer\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Defines constants related to the deoptimizer, such as exit sizes.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"kEagerDeoptExitSize\",\n                        \"type\": \"const int\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The size of the eager deoptimization exit code in bytes.\"\n                    },\n                    {\n                        \"name\": \"kLazyDeoptExitSize\",\n                        \"type\": \"const int\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The size of the lazy deoptimization exit code in bytes.\"\n                    },\n                    {\n                        \"name\": \"kAdaptShadowStackOffsetToSubtract\",\n                        \"type\": \"const int\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Offset used for adapting shadow stack.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"kInstrSize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nconst int Deoptimizer::kEagerDeoptExitSize = 3 * kInstrSize;\nconst int Deoptimizer::kLazyDeoptExitSize = 3 * kInstrSize;\n\nconst int Deoptimizer::kAdaptShadowStackOffsetToSubtract = 0;\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"PatchToJump\",\n                \"parent\": \"Deoptimizer\",\n                \"about\": \"Patches a given address to jump to a new address. Placeholder; currently unimplemented.\",\n                \"logic\": \"This function is intended to patch machine code to redirect execution flow, but is marked as UNREACHABLE(), indicating it's not implemented for PPC.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"pc\",\n                        \"type\": \"Address\",\n                        \"purpose\": \"The address to patch.\"\n                    },\n                    {\n                        \"name\": \"new_pc\",\n                        \"type\": \"Address\",\n                        \"purpose\": \"The address to jump to.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"Does not return a value; should not be reached.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nvoid Deoptimizer::PatchToJump(Address pc, Address new_pc) { UNREACHABLE(); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetFloatRegister\",\n                \"parent\": \"RegisterValues\",\n                \"about\": \"Gets the value of a float register.\",\n                \"logic\": \"Reads a Float64 value from the SIMD128 register set, converts it to a float, and returns it as a Float32 value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"n\",\n                        \"type\": \"unsigned\",\n                        \"purpose\": \"The index of the float register.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Float32\",\n                    \"description\": \"The value of the float register.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nFloat32 RegisterValues::GetFloatRegister(unsigned n) const {\n  double double_val = base::ReadUnalignedValue<Float64>(\n                          reinterpret_cast<Address>(simd128_registers_ + n))\n                          .get_scalar();\n  float float_val = static_cast<float>(double_val);\n  return Float32::FromBits(base::bit_cast<uint32_t>(float_val));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetDoubleRegister\",\n                \"parent\": \"RegisterValues\",\n                \"about\": \"Gets the value of a double register.\",\n                \"logic\": \"Reads a Float64 value from the SIMD128 register set.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"n\",\n                        \"type\": \"unsigned\",\n                        \"purpose\": \"The index of the double register.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Float64\",\n                    \"description\": \"The value of the double register.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nFloat64 RegisterValues::GetDoubleRegister(unsigned n) const {\n  return base::ReadUnalignedValue<Float64>(\n      reinterpret_cast<Address>(simd128_registers_ + n));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetDoubleRegister\",\n                \"parent\": \"RegisterValues\",\n                \"about\": \"Sets the value of a double register.\",\n                \"logic\": \"Writes a Float64 value to the SIMD128 register set.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"n\",\n                        \"type\": \"unsigned\",\n                        \"purpose\": \"The index of the double register.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Float64\",\n                        \"purpose\": \"The value to set the register to.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid RegisterValues::SetDoubleRegister(unsigned n, Float64 value) {\n  base::WriteUnalignedValue<Float64>(\n      reinterpret_cast<Address>(simd128_registers_ + n), value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetCallerPc\",\n                \"parent\": \"FrameDescription\",\n                \"about\": \"Sets the caller's program counter (PC) in the frame.\",\n                \"logic\": \"Sets a frame slot at a given offset to the specified PC value. Uses SetFrameSlot to do the actual setting.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"offset\",\n                        \"type\": \"unsigned\",\n                        \"purpose\": \"The offset of the slot in the frame.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The caller's PC value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"SetFrameSlot\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid FrameDescription::SetCallerPc(unsigned offset, intptr_t value) {\n  SetFrameSlot(offset, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetCallerFp\",\n                \"parent\": \"FrameDescription\",\n                \"about\": \"Sets the caller's frame pointer (FP) in the frame.\",\n                \"logic\": \"Sets a frame slot at a given offset to the specified FP value. Uses SetFrameSlot to do the actual setting.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"offset\",\n                        \"type\": \"unsigned\",\n                        \"purpose\": \"The offset of the slot in the frame.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The caller's FP value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"SetFrameSlot\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid FrameDescription::SetCallerFp(unsigned offset, intptr_t value) {\n  SetFrameSlot(offset, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetCallerConstantPool\",\n                \"parent\": \"FrameDescription\",\n                \"about\": \"Sets the caller's constant pool in the frame.\",\n                \"logic\": \"Sets a frame slot at a given offset to the specified constant pool value. Uses SetFrameSlot to do the actual setting. Includes a DCHECK to ensure V8_EMBEDDED_CONSTANT_POOL_BOOL is true.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"offset\",\n                        \"type\": \"unsigned\",\n                        \"purpose\": \"The offset of the slot in the frame.\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The caller's constant pool value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"SetFrameSlot\",\n                    \"V8_EMBEDDED_CONSTANT_POOL_BOOL\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid FrameDescription::SetCallerConstantPool(unsigned offset, intptr_t value) {\n  DCHECK(V8_EMBEDDED_CONSTANT_POOL_BOOL);\n  SetFrameSlot(offset, value);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetPc\",\n                \"parent\": \"FrameDescription\",\n                \"about\": \"Sets the program counter (PC) in the FrameDescription object.\",\n                \"logic\": \"Sets the pc_ member variable to the given PC value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"pc\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The program counter value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid FrameDescription::SetPc(intptr_t pc) { pc_ = pc; }\n        ]]></code>\n    </func>\n</file>\n```"
}