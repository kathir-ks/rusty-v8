{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/heap-statistics.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 72, column 49",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/heap-statistics.h\",\n            \"file_name\": \"heap-statistics.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the HeapStatistics struct for memory consumption and utilization statistics of a cppgc heap.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard C++ headers for size types, integer types, string manipulation, and dynamic arrays.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <cstddef>\n            #include <cstdint>\n            #include <string>\n            #include <vector>\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"HeapStatistics\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Contains memory consumption and utilization statistics for a cppgc heap.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"committed_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Overall committed amount of memory for the heap.\"\n                    },\n                    {\n                        \"name\": \"resident_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Resident amount of memory held by the heap.\"\n                    },\n                    {\n                        \"name\": \"used_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Amount of memory actually used on the heap.\"\n                    },\n                    {\n                        \"name\": \"pooled_memory_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Memory retained in the page pool, not used directly by the heap.\"\n                    },\n                    {\n                        \"name\": \"detail_level\",\n                        \"type\": \"DetailLevel\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Detail level of this HeapStatistics.\"\n                    },\n                    {\n                        \"name\": \"space_stats\",\n                        \"type\": \"std::vector<SpaceStatistics>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Statistics for each of the spaces in the heap. Filled only when `detail_level` is `DetailLevel::kDetailed`.\"\n                    },\n                    {\n                        \"name\": \"type_names\",\n                        \"type\": \"std::vector<std::string>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Vector of `cppgc::GarbageCollected` type names.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"DetailLevel\",\n                    \"SpaceStatistics\",\n                    \"std::string\",\n                    \"std::vector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            struct HeapStatistics final {\n              /**\n               * Specifies the detail level of the heap statistics. Brief statistics contain\n               * only the top-level allocated and used memory statistics for the entire\n               * heap. Detailed statistics also contain a break down per space and page, as\n               * well as freelist statistics and object type histograms. Note that used\n               * memory reported by brief statistics and detailed statistics might differ\n               * slightly.\n               */\n              enum DetailLevel : uint8_t {\n                kBrief,\n                kDetailed,\n              };\n\n              /**\n               * Object statistics for a single type.\n               */\n              struct ObjectStatsEntry {\n                /**\n                 * Number of allocated bytes.\n                 */\n                size_t allocated_bytes;\n                /**\n                 * Number of allocated objects.\n                 */\n                size_t object_count;\n              };\n\n              /**\n               * Page granularity statistics. For each page the statistics record the\n               * allocated memory size and overall used memory size for the page.\n               */\n              struct PageStatistics {\n                /** Overall committed amount of memory for the page. */\n                size_t committed_size_bytes = 0;\n                /** Resident amount of memory held by the page. */\n                size_t resident_size_bytes = 0;\n                /** Amount of memory actually used on the page. */\n                size_t used_size_bytes = 0;\n                /** Statistics for object allocated on the page. Filled only when\n                 * NameProvider::SupportsCppClassNamesAsObjectNames() is true. */\n                std::vector<ObjectStatsEntry> object_statistics;\n              };\n\n              /**\n               * Statistics of the freelist (used only in non-large object spaces). For\n               * each bucket in the freelist the statistics record the bucket size, the\n               * number of freelist entries in the bucket, and the overall allocated memory\n               * consumed by these freelist entries.\n               */\n              struct FreeListStatistics {\n                /** bucket sizes in the freelist. */\n                std::vector<size_t> bucket_size;\n                /** number of freelist entries per bucket. */\n                std::vector<size_t> free_count;\n                /** memory size consumed by freelist entries per size. */\n                std::vector<size_t> free_size;\n              };\n\n              /**\n               * Space granularity statistics. For each space the statistics record the\n               * space name, the amount of allocated memory and overall used memory for the\n               * space. The statistics also contain statistics for each of the space's\n               * pages, its freelist and the objects allocated on the space.\n               */\n              struct SpaceStatistics {\n                /** The space name */\n                std::string name;\n                /** Overall committed amount of memory for the heap. */\n                size_t committed_size_bytes = 0;\n                /** Resident amount of memory held by the heap. */\n                size_t resident_size_bytes = 0;\n                /** Amount of memory actually used on the space. */\n                size_t used_size_bytes = 0;\n                /** Statistics for each of the pages in the space. */\n                std::vector<PageStatistics> page_stats;\n                /** Statistics for the freelist of the space. */\n                FreeListStatistics free_list_stats;\n              };\n\n              /** Overall committed amount of memory for the heap. */\n              size_t committed_size_bytes = 0;\n              /** Resident amount of memory held by the heap. */\n              size_t resident_size_bytes = 0;\n              /** Amount of memory actually used on the heap. */\n              size_t used_size_bytes = 0;\n              /** Memory retained in the page pool, not used directly by the heap. */\n              size_t pooled_memory_size_bytes = 0;\n              /** Detail level of this HeapStatistics. */\n              DetailLevel detail_level;\n\n              /** Statistics for each of the spaces in the heap. Filled only when\n               * `detail_level` is `DetailLevel::kDetailed`. */\n              std::vector<SpaceStatistics> space_stats;\n\n              /**\n               * Vector of `cppgc::GarbageCollected` type names.\n               */\n              std::vector<std::string> type_names;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"DetailLevel\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Specifies the detail level of the heap statistics.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            enum DetailLevel : uint8_t {\n                kBrief,\n                kDetailed,\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"ObjectStatsEntry\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Object statistics for a single type.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"allocated_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Number of allocated bytes.\"\n                    },\n                    {\n                        \"name\": \"object_count\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Number of allocated objects.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n             struct ObjectStatsEntry {\n                /**\n                 * Number of allocated bytes.\n                 */\n                size_t allocated_bytes;\n                /**\n                 * Number of allocated objects.\n                 */\n                size_t object_count;\n             };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"PageStatistics\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Page granularity statistics.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"committed_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Overall committed amount of memory for the page.\"\n                    },\n                    {\n                        \"name\": \"resident_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Resident amount of memory held by the page.\"\n                    },\n                    {\n                        \"name\": \"used_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Amount of memory actually used on the page.\"\n                    },\n                    {\n                        \"name\": \"object_statistics\",\n                        \"type\": \"std::vector<ObjectStatsEntry>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Statistics for object allocated on the page. Filled only when NameProvider::SupportsCppClassNamesAsObjectNames() is true.\"\n                    }\n                ],\n                \"dependencies\": [\n                  \"ObjectStatsEntry\",\n                  \"std::vector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            struct PageStatistics {\n                /** Overall committed amount of memory for the page. */\n                size_t committed_size_bytes = 0;\n                /** Resident amount of memory held by the page. */\n                size_t resident_size_bytes = 0;\n                /** Amount of memory actually used on the page. */\n                size_t used_size_bytes = 0;\n                /** Statistics for object allocated on the page. Filled only when\n                 * NameProvider::SupportsCppClassNamesAsObjectNames() is true. */\n                std::vector<ObjectStatsEntry> object_statistics;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"FreeListStatistics\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Statistics of the freelist (used only in non-large object spaces).\",\n                \"attributes\": [\n                    {\n                        \"name\": \"bucket_size\",\n                        \"type\": \"std::vector<size_t>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"bucket sizes in the freelist.\"\n                    },\n                    {\n                        \"name\": \"free_count\",\n                        \"type\": \"std::vector<size_t>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"number of freelist entries per bucket.\"\n                    },\n                    {\n                        \"name\": \"free_size\",\n                        \"type\": \"std::vector<size_t>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"memory size consumed by freelist entries per size.\"\n                    }\n                ],\n                \"dependencies\": [\n                  \"std::vector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            struct FreeListStatistics {\n                /** bucket sizes in the freelist. */\n                std::vector<size_t> bucket_size;\n                /** number of freelist entries per bucket. */\n                std::vector<size_t> free_count;\n                /** memory size consumed by freelist entries per size. */\n                std::vector<size_t> free_size;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"SpaceStatistics\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Space granularity statistics.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"std::string\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The space name\"\n                    },\n                    {\n                        \"name\": \"committed_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Overall committed amount of memory for the heap.\"\n                    },\n                    {\n                        \"name\": \"resident_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Resident amount of memory held by the heap.\"\n                    },\n                    {\n                        \"name\": \"used_size_bytes\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Amount of memory actually used on the space.\"\n                    },\n                    {\n                        \"name\": \"page_stats\",\n                        \"type\": \"std::vector<PageStatistics>\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Statistics for each of the pages in the space.\"\n                    },\n                    {\n                        \"name\": \"free_list_stats\",\n                        \"type\": \"FreeListStatistics\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Statistics for the freelist of the space.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"std::string\",\n                    \"PageStatistics\",\n                    \"FreeListStatistics\",\n                    \"std::vector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            struct SpaceStatistics {\n                /** The space name */\n                std::string name;\n                /** Overall committed amount of memory for the heap. */\n                size_t committed_size_bytes = 0;\n                /** Resident amount of memory held by the heap. */\n                size_t resident_size_bytes = 0;\n                /** Amount of memory actually used on the space. */\n                size_t used_size_bytes = 0;\n                /** Statistics for each of the pages in the space. */\n                std::vector<PageStatistics> page_stats;\n                /** Statistics for the freelist of the space. */\n                FreeListStatistics free_list_stats;\n            };\n        ]]></code>\n    </class>\n</file>\n```"
}