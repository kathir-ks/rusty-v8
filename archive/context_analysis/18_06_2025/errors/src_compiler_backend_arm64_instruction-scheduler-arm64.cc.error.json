{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/arm64/instruction-scheduler-arm64.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/arm64/instruction-scheduler-arm64.cc\",\n            \"file_name\": \"instruction-scheduler-arm64.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implements the instruction scheduler for the ARM64 architecture within the V8 compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes the header file for the instruction scheduler.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/backend/instruction-scheduler.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SchedulerSupported\",\n                \"parent\": \"InstructionScheduler\",\n                \"about\": \"Indicates whether instruction scheduling is supported for the ARM64 architecture.\",\n                \"logic\": \"Always returns true, indicating that scheduling is supported.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"true, as scheduling is supported.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool InstructionScheduler::SchedulerSupported() { return true; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetTargetInstructionFlags\",\n                \"parent\": \"InstructionScheduler\",\n                \"about\": \"Retrieves target-specific flags for a given instruction.\",\n                \"logic\": \"Uses a switch statement on the instruction's architecture-specific opcode to determine flags.  Specifically identifies load operations and operations with side effects. For other instructions returns kNoOpcodeFlags. Includes a large number of Arm64 opcodes.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"instr\",\n                        \"type\": \"const Instruction*\",\n                        \"purpose\": \"The instruction to retrieve flags for.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"An integer representing the instruction flags.\"\n                },\n                \"dependencies\": [\n                    \"Instruction\",\n                    \"kArm64Add\",\n                    \"kArm64Add32\",\n                    \"kArm64And\",\n                    \"kArm64And32\",\n                    \"kArm64Bic\",\n                    \"kArm64Bic32\",\n                    \"kArm64Clz\",\n                    \"kArm64Clz32\",\n                    \"kArm64Cmp\",\n                    \"kArm64Cmp32\",\n                    \"kArm64Cmn\",\n                    \"kArm64Cmn32\",\n                    \"kArm64Cnt\",\n                    \"kArm64Cnt32\",\n                    \"kArm64Cnt64\",\n                    \"kArm64Tst\",\n                    \"kArm64Tst32\",\n                    \"kArm64Or\",\n                    \"kArm64Or32\",\n                    \"kArm64Orn\",\n                    \"kArm64Orn32\",\n                    \"kArm64Eor\",\n                    \"kArm64Eor32\",\n                    \"kArm64Eon\",\n                    \"kArm64Eon32\",\n                    \"kArm64Sub\",\n                    \"kArm64Sub32\",\n                    \"kArm64Mul\",\n                    \"kArm64Mul32\",\n                    \"kArm64Smulh\",\n                    \"kArm64Smull\",\n                    \"kArm64Smull2\",\n                    \"kArm64Umulh\",\n                    \"kArm64Umull\",\n                    \"kArm64Umull2\",\n                    \"kArm64Madd\",\n                    \"kArm64Madd32\",\n                    \"kArm64Msub\",\n                    \"kArm64Msub32\",\n                    \"kArm64Mneg\",\n                    \"kArm64Mneg32\",\n                    \"kArm64Idiv\",\n                    \"kArm64Idiv32\",\n                    \"kArm64Udiv\",\n                    \"kArm64Udiv32\",\n                    \"kArm64Imod\",\n                    \"kArm64Imod32\",\n                    \"kArm64Umod\",\n                    \"kArm64Umod32\",\n                    \"kArm64Not\",\n                    \"kArm64Not32\",\n                    \"kArm64Lsl\",\n                    \"kArm64Lsl32\",\n                    \"kArm64Lsr\",\n                    \"kArm64Lsr32\",\n                    \"kArm64Asr\",\n                    \"kArm64Asr32\",\n                    \"kArm64Ror\",\n                    \"kArm64Ror32\",\n                    \"kArm64Mov32\",\n                    \"kArm64Sxtb\",\n                    \"kArm64Sxtb32\",\n                    \"kArm64Sxth\",\n                    \"kArm64Sxth32\",\n                    \"kArm64Sxtw\",\n                    \"kArm64Sbfx\",\n                    \"kArm64Sbfx32\",\n                    \"kArm64Ubfx\",\n                    \"kArm64Ubfx32\",\n                    \"kArm64Ubfiz32\",\n                    \"kArm64Sbfiz\",\n                    \"kArm64Bfi\",\n                    \"kArm64Rbit\",\n                    \"kArm64Rbit32\",\n                    \"kArm64Rev\",\n                    \"kArm64Rev32\",\n                    \"kArm64Float16RoundDown\",\n                    \"kArm64Float16RoundTiesEven\",\n                    \"kArm64Float16RoundTruncate\",\n                    \"kArm64Float16RoundUp\",\n                    \"kArm64Float32Cmp\",\n                    \"kArm64Float32Add\",\n                    \"kArm64Float32Sub\",\n                    \"kArm64Float32Mul\",\n                    \"kArm64Float32Div\",\n                    \"kArm64Float32Abs\",\n                    \"kArm64Float32Abd\",\n                    \"kArm64Float32Neg\",\n                    \"kArm64Float32Sqrt\",\n                    \"kArm64Float32Fnmul\",\n                    \"kArm64Float32RoundDown\",\n                    \"kArm64Float32Max\",\n                    \"kArm64Float32Min\",\n                    \"kArm64Float64Cmp\",\n                    \"kArm64Float64Add\",\n                    \"kArm64Float64Sub\",\n                    \"kArm64Float64Mul\",\n                    \"kArm64Float64Div\",\n                    \"kArm64Float64Max\",\n                    \"kArm64Float64Min\",\n                    \"kArm64Float64Abs\",\n                    \"kArm64Float64Abd\",\n                    \"kArm64Float64Neg\",\n                    \"kArm64Float64Sqrt\",\n                    \"kArm64Float64Fnmul\",\n                    \"kArm64Float64RoundDown\",\n                    \"kArm64Float64RoundTiesAway\",\n                    \"kArm64Float64RoundTruncate\",\n                    \"kArm64Float64RoundTiesEven\",\n                    \"kArm64Float64RoundUp\",\n                    \"kArm64Float32RoundTiesEven\",\n                    \"kArm64Float32RoundTruncate\",\n                    \"kArm64Float32RoundUp\",\n                    \"kArm64Float32ToFloat64\",\n                    \"kArm64Float64ToFloat32\",\n                    \"kArm64Float64ToFloat16RawBits\",\n                    \"kArm64Float16RawBitsToFloat64\",\n                    \"kArm64Float32ToInt32\",\n                    \"kArm64Float64ToInt32\",\n                    \"kArm64Float32ToUint32\",\n                    \"kArm64Float64ToUint32\",\n                    \"kArm64Float32ToInt64\",\n                    \"kArm64Float64ToInt64\",\n                    \"kArm64Float32ToUint64\",\n                    \"kArm64Float64ToUint64\",\n                    \"kArm64Int32ToFloat32\",\n                    \"kArm64Int32ToFloat64\",\n                    \"kArm64Int64ToFloat32\",\n                    \"kArm64Int64ToFloat64\",\n                    \"kArm64Uint32ToFloat32\",\n                    \"kArm64Uint32ToFloat64\",\n                    \"kArm64Uint64ToFloat32\",\n                    \"kArm64Uint64ToFloat64\",\n                    \"kArm64Float64ExtractLowWord32\",\n                    \"kArm64Float64ExtractHighWord32\",\n                    \"kArm64Float64InsertLowWord32\",\n                    \"kArm64Float64InsertHighWord32\",\n                    \"kArm64Float64Mod\",\n                    \"kArm64Float64MoveU64\",\n                    \"kArm64U64MoveFloat64\",\n                    \"kArm64Float64SilenceNaN\",\n                    \"kArm64Sadalp\",\n                    \"kArm64Saddlp\",\n                    \"kArm64Uadalp\",\n                    \"kArm64Uaddlp\",\n                    \"kArm64Smlal\",\n                    \"kArm64Smlal2\",\n                    \"kArm64Umlal\",\n                    \"kArm64Umlal2\",\n                    \"kArm64FAdd\",\n                    \"kArm64FSub\",\n                    \"kArm64FMul\",\n                    \"kArm64FMulElement\",\n                    \"kArm64FDiv\",\n                    \"kArm64FMin\",\n                    \"kArm64FMax\",\n                    \"kArm64FEq\",\n                    \"kArm64FNe\",\n                    \"kArm64FLt\",\n                    \"kArm64FLe\",\n                    \"kArm64FGt\",\n                    \"kArm64FGe\",\n                    \"kArm64FExtractLane\",\n                    \"kArm64FReplaceLane\",\n                    \"kArm64FSplat\",\n                    \"kArm64FAbs\",\n                    \"kArm64FNeg\",\n                    \"kArm64FSqrt\",\n                    \"kArm64F64x2Qfma\",\n                    \"kArm64F64x2Qfms\",\n                    \"kArm64F64x2Pmin\",\n                    \"kArm64F64x2Pmax\",\n                    \"kArm64F64x2ConvertLowI32x4S\",\n                    \"kArm64F64x2ConvertLowI32x4U\",\n                    \"kArm64F64x2PromoteLowF32x4\",\n                    \"kArm64F32x4SConvertI32x4\",\n                    \"kArm64F32x4UConvertI32x4\",\n                    \"kArm64F32x4Qfma\",\n                    \"kArm64F32x4Qfms\",\n                    \"kArm64F32x4Pmin\",\n                    \"kArm64F32x4Pmax\",\n                    \"kArm64F32x4DemoteF64x2Zero\",\n                    \"kArm64F16x8Pmin\",\n                    \"kArm64F16x8Pmax\",\n                    \"kArm64F32x4PromoteLowF16x8\",\n                    \"kArm64F16x8SConvertI16x8\",\n                    \"kArm64F16x8UConvertI16x8\",\n                    \"kArm64F16x8DemoteF32x4Zero\",\n                    \"kArm64F16x8DemoteF64x2Zero\",\n                    \"kArm64I16x8SConvertF16x8\",\n                    \"kArm64I16x8UConvertF16x8\",\n                    \"kArm64F16x8Qfma\",\n                    \"kArm64F16x8Qfms\",\n                    \"kArm64IExtractLane\",\n                    \"kArm64IReplaceLane\",\n                    \"kArm64ISplat\",\n                    \"kArm64IAbs\",\n                    \"kArm64INeg\",\n                    \"kArm64Mla\",\n                    \"kArm64Mls\",\n                    \"kArm64I64x2Shl\",\n                    \"kArm64I64x2ShrS\",\n                    \"kArm64I64x2Mul\",\n                    \"kArm64I64x2ShrU\",\n                    \"kArm64I64x2BitMask\",\n                    \"kArm64I32x4SConvertF32x4\",\n                    \"kArm64Sxtl\",\n                    \"kArm64Sxtl2\",\n                    \"kArm64Uxtl\",\n                    \"kArm64Uxtl2\",\n                    \"kArm64I32x4Shl\",\n                    \"kArm64I32x4ShrS\",\n                    \"kArm64I32x4Mul\",\n                    \"kArm64I32x4UConvertF32x4\",\n                    \"kArm64I32x4ShrU\",\n                    \"kArm64I32x4BitMask\",\n                    \"kArm64I32x4DotI16x8S\",\n                    \"kArm64I16x8DotI8x16S\",\n                    \"kArm64I32x4DotI8x16AddS\",\n                    \"kArm64I8x16Addv\",\n                    \"kArm64I16x8Addv\",\n                    \"kArm64I32x4Addv\",\n                    \"kArm64I64x2AddPair\",\n                    \"kArm64F32x4AddReducePairwise\",\n                    \"kArm64F64x2AddPair\",\n                    \"kArm64I32x4TruncSatF64x2SZero\",\n                    \"kArm64I32x4TruncSatF64x2UZero\",\n                    \"kArm64IExtractLaneU\",\n                    \"kArm64IExtractLaneS\",\n                    \"kArm64I16x8Shl\",\n                    \"kArm64I16x8ShrS\",\n                    \"kArm64I16x8SConvertI32x4\",\n                    \"kArm64I16x8Mul\",\n                    \"kArm64I16x8ShrU\",\n                    \"kArm64I16x8UConvertI32x4\",\n                    \"kArm64I16x8Q15MulRSatS\",\n                    \"kArm64I16x8BitMask\",\n                    \"kArm64I8x16Shl\",\n                    \"kArm64I8x16ShrS\",\n                    \"kArm64I8x16SConvertI16x8\",\n                    \"kArm64I8x16UConvertI16x8\",\n                    \"kArm64I8x16ShrU\",\n                    \"kArm64I8x16BitMask\",\n                    \"kArm64S128Const\",\n                    \"kArm64S128Dup\",\n                    \"kArm64S128And\",\n                    \"kArm64S128Or\",\n                    \"kArm64S128Xor\",\n                    \"kArm64S128Not\",\n                    \"kArm64S128Select\",\n                    \"kArm64S128AndNot\",\n                    \"kArm64Ssra\",\n                    \"kArm64Usra\",\n                    \"kArm64S64x2UnzipLeft\",\n                    \"kArm64S64x2UnzipRight\",\n                    \"kArm64S32x4ZipLeft\",\n                    \"kArm64S32x4ZipRight\",\n                    \"kArm64S32x4UnzipLeft\",\n                    \"kArm64S32x4UnzipRight\",\n                    \"kArm64S32x4TransposeLeft\",\n                    \"kArm64S32x4TransposeRight\",\n                    \"kArm64S32x4OneLaneSwizzle\",\n                    \"kArm64S64x1Shuffle\",\n                    \"kArm64S64x2Shuffle\",\n                    \"kArm64S32x1Shuffle\",\n                    \"kArm64S32x2Shuffle\",\n                    \"kArm64S32x4Shuffle\",\n                    \"kArm64S16x1Shuffle\",\n                    \"kArm64S16x2Shuffle\",\n                    \"kArm64S8x2Shuffle\",\n                    \"kArm64S16x8ZipLeft\",\n                    \"kArm64S16x8ZipRight\",\n                    \"kArm64S16x8UnzipLeft\",\n                    \"kArm64S16x8UnzipRight\",\n                    \"kArm64S16x8TransposeLeft\",\n                    \"kArm64S16x8TransposeRight\",\n                    \"kArm64S8x16ZipLeft\",\n                    \"kArm64S8x16ZipRight\",\n                    \"kArm64S8x16UnzipLeft\",\n                    \"kArm64S8x16UnzipRight\",\n                    \"kArm64S8x16TransposeLeft\",\n                    \"kArm64S8x16TransposeRight\",\n                    \"kArm64S8x16Concat\",\n                    \"kArm64I8x16Swizzle\",\n                    \"kArm64I8x16Shuffle\",\n                    \"kArm64S32x4Reverse\",\n                    \"kArm64S32x2Reverse\",\n                    \"kArm64S16x4Reverse\",\n                    \"kArm64S16x2Reverse\",\n                    \"kArm64S8x8Reverse\",\n                    \"kArm64S8x4Reverse\",\n                    \"kArm64S8x2Reverse\",\n                    \"kArm64V128AnyTrue\",\n                    \"kArm64I64x2AllTrue\",\n                    \"kArm64I32x4AllTrue\",\n                    \"kArm64I16x8AllTrue\",\n                    \"kArm64I8x16AllTrue\",\n                    \"kArm64RoundingAverageU\",\n                    \"kArm64IAdd\",\n                    \"kArm64ISub\",\n                    \"kArm64IEq\",\n                    \"kArm64INe\",\n                    \"kArm64IGtS\",\n                    \"kArm64IGeS\",\n                    \"kArm64ILtS\",\n                    \"kArm64ILeS\",\n                    \"kArm64IMinS\",\n                    \"kArm64IMaxS\",\n                    \"kArm64IMinU\",\n                    \"kArm64IMaxU\",\n                    \"kArm64IGtU\",\n                    \"kArm64IGeU\",\n                    \"kArm64IAddSatS\",\n                    \"kArm64ISubSatS\",\n                    \"kArm64IAddSatU\",\n                    \"kArm64ISubSatU\",\n                    \"kArm64TestAndBranch32\",\n                    \"kArm64TestAndBranch\",\n                    \"kArm64CompareAndBranch32\",\n                    \"kArm64CompareAndBranch\",\n                    \"kArm64LdrH\",\n                    \"kArm64LdrS\",\n                    \"kArm64LdrD\",\n                    \"kArm64LdrQ\",\n                    \"kArm64Ldrb\",\n                    \"kArm64Ldrsb\",\n                    \"kArm64LdrsbW\",\n                    \"kArm64Ldrh\",\n                    \"kArm64Ldrsh\",\n                    \"kArm64LdrshW\",\n                    \"kArm64Ldrsw\",\n                    \"kArm64LdrW\",\n                    \"kArm64Ldr\",\n                    \"kArm64LdrDecompressTaggedSigned\",\n                    \"kArm64LdrDecompressTagged\",\n                    \"kArm64LdrDecompressProtected\",\n                    \"kArm64LdarDecompressTaggedSigned\",\n                    \"kArm64LdarDecompressTagged\",\n                    \"kArm64LdrDecodeSandboxedPointer\",\n                    \"kArm64Peek\",\n                    \"kArm64LoadSplat\",\n                    \"kArm64LoadLane\",\n                    \"kArm64S128Load8x8S\",\n                    \"kArm64S128Load8x8U\",\n                    \"kArm64S128Load16x4S\",\n                    \"kArm64S128Load16x4U\",\n                    \"kArm64S128Load32x2S\",\n                    \"kArm64S128Load32x2U\",\n                    \"kArm64Claim\",\n                    \"kArm64Poke\",\n                    \"kArm64PokePair\",\n                    \"kArm64StrH\",\n                    \"kArm64StrS\",\n                    \"kArm64StrD\",\n                    \"kArm64StrQ\",\n                    \"kArm64Strb\",\n                    \"kArm64Strh\",\n                    \"kArm64StrW\",\n                    \"kArm64StrWPair\",\n                    \"kArm64Str\",\n                    \"kArm64StrPair\",\n                    \"kArm64StrCompressTagged\",\n                    \"kArm64StlrCompressTagged\",\n                    \"kArm64StrIndirectPointer\",\n                    \"kArm64StrEncodeSandboxedPointer\",\n                    \"kArm64DmbIsh\",\n                    \"kArm64DsbIsb\",\n                    \"kArm64StoreLane\",\n                    \"kArm64Word64AtomicLoadUint64\",\n                    \"kArm64Word64AtomicStoreWord64\",\n                    \"kArm64Word64AtomicAddUint64\",\n                    \"kArm64Word64AtomicSubUint64\",\n                    \"kArm64Word64AtomicAndUint64\",\n                    \"kArm64Word64AtomicOrUint64\",\n                    \"kArm64Word64AtomicXorUint64\",\n                    \"kArm64Word64AtomicExchangeUint64\",\n                    \"kArm64Word64AtomicCompareExchangeUint64\",\n                    \"kNoOpcodeFlags\",\n                    \"kIsLoadOperation\",\n                    \"kHasSideEffect\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nint InstructionScheduler::GetTargetInstructionFlags(\n    const Instruction* instr) const {\n  switch (instr->arch_opcode()) {\n    case kArm64Add:\n    case kArm64Add32:\n    case kArm64And:\n    case kArm64And32:\n    case kArm64Bic:\n    case kArm64Bic32:\n    case kArm64Clz:\n    case kArm64Clz32:\n    case kArm64Cmp:\n    case kArm64Cmp32:\n    case kArm64Cmn:\n    case kArm64Cmn32:\n    case kArm64Cnt:\n    case kArm64Cnt32:\n    case kArm64Cnt64:\n    case kArm64Tst:\n    case kArm64Tst32:\n    case kArm64Or:\n    case kArm64Or32:\n    case kArm64Orn:\n    case kArm64Orn32:\n    case kArm64Eor:\n    case kArm64Eor32:\n    case kArm64Eon:\n    case kArm64Eon32:\n    case kArm64Sub:\n    case kArm64Sub32:\n    case kArm64Mul:\n    case kArm64Mul32:\n    case kArm64Smulh:\n    case kArm64Smull:\n    case kArm64Smull2:\n    case kArm64Umulh:\n    case kArm64Umull:\n    case kArm64Umull2:\n    case kArm64Madd:\n    case kArm64Madd32:\n    case kArm64Msub:\n    case kArm64Msub32:\n    case kArm64Mneg:\n    case kArm64Mneg32:\n    case kArm64Idiv:\n    case kArm64Idiv32:\n    case kArm64Udiv:\n    case kArm64Udiv32:\n    case kArm64Imod:\n    case kArm64Imod32:\n    case kArm64Umod:\n    case kArm64Umod32:\n    case kArm64Not:\n    case kArm64Not32:\n    case kArm64Lsl:\n    case kArm64Lsl32:\n    case kArm64Lsr:\n    case kArm64Lsr32:\n    case kArm64Asr:\n    case kArm64Asr32:\n    case kArm64Ror:\n    case kArm64Ror32:\n    case kArm64Mov32:\n    case kArm64Sxtb:\n    case kArm64Sxtb32:\n    case kArm64Sxth:\n    case kArm64Sxth32:\n    case kArm64Sxtw:\n    case kArm64Sbfx:\n    case kArm64Sbfx32:\n    case kArm64Ubfx:\n    case kArm64Ubfx32:\n    case kArm64Ubfiz32:\n    case kArm64Sbfiz:\n    case kArm64Bfi:\n    case kArm64Rbit:\n    case kArm64Rbit32:\n    case kArm64Rev:\n    case kArm64Rev32:\n    case kArm64Float16RoundDown:\n    case kArm64Float16RoundTiesEven:\n    case kArm64Float16RoundTruncate:\n    case kArm64Float16RoundUp:\n    case kArm64Float32Cmp:\n    case kArm64Float32Add:\n    case kArm64Float32Sub:\n    case kArm64Float32Mul:\n    case kArm64Float32Div:\n    case kArm64Float32Abs:\n    case kArm64Float32Abd:\n    case kArm64Float32Neg:\n    case kArm64Float32Sqrt:\n    case kArm64Float32Fnmul:\n    case kArm64Float32RoundDown:\n    case kArm64Float32Max:\n    case kArm64Float32Min:\n    case kArm64Float64Cmp:\n    case kArm64Float64Add:\n    case kArm64Float64Sub:\n    case kArm64Float64Mul:\n    case kArm64Float64Div:\n    case kArm64Float64Max:\n    case kArm64Float64Min:\n    case kArm64Float64Abs:\n    case kArm64Float64Abd:\n    case kArm64Float64Neg:\n    case kArm64Float64Sqrt:\n    case kArm64Float64Fnmul:\n    case kArm64Float64RoundDown:\n    case kArm64Float64RoundTiesAway:\n    case kArm64Float64RoundTruncate:\n    case kArm64Float64RoundTiesEven:\n    case kArm64Float64RoundUp:\n    case kArm64Float32RoundTiesEven:\n    case kArm64Float32RoundTruncate:\n    case kArm64Float32RoundUp:\n    case kArm64Float32ToFloat64:\n    case kArm64Float64ToFloat32:\n    case kArm64Float64ToFloat16RawBits:\n    case kArm64Float16RawBitsToFloat64:\n    case kArm64Float32ToInt32:\n    case kArm64Float64ToInt32:\n    case kArm64Float32ToUint32:\n    case kArm64Float64ToUint32:\n    case kArm64Float32ToInt64:\n    case kArm64Float64ToInt64:\n    case kArm64Float32ToUint64:\n    case kArm64Float64ToUint64:\n    case kArm64Int32ToFloat32:\n    case kArm64Int32ToFloat64:\n    case kArm64Int64ToFloat32:\n    case kArm64Int64ToFloat64:\n    case kArm64Uint32ToFloat32:\n    case kArm64Uint32ToFloat64:\n    case kArm64Uint64ToFloat32:\n    case kArm64Uint64ToFloat64:\n    case kArm64Float64ExtractLowWord32:\n    case kArm64Float64ExtractHighWord32:\n    case kArm64Float64InsertLowWord32:\n    case kArm64Float64InsertHighWord32:\n    case kArm64Float64Mod:\n    case kArm64Float64MoveU64:\n    case kArm64U64MoveFloat64:\n    case kArm64Float64SilenceNaN:\n#if V8_ENABLE_WEBASSEMBLY\n    case kArm64Sadalp:\n    case kArm64Saddlp:\n    case kArm64Uadalp:\n    case kArm64Uaddlp:\n    case kArm64Smlal:\n    case kArm64Smlal2:\n    case kArm64Umlal:\n    case kArm64Umlal2:\n    case kArm64FAdd:\n    case kArm64FSub:\n    case kArm64FMul:\n    case kArm64FMulElement:\n    case kArm64FDiv:\n    case kArm64FMin:\n    case kArm64FMax:\n    case kArm64FEq:\n    case kArm64FNe:\n    case kArm64FLt:\n    case kArm64FLe:\n    case kArm64FGt:\n    case kArm64FGe:\n    case kArm64FExtractLane:\n    case kArm64FReplaceLane:\n    case kArm64FSplat:\n    case kArm64FAbs:\n    case kArm64FNeg:\n    case kArm64FSqrt:\n    case kArm64F64x2Qfma:\n    case kArm64F64x2Qfms:\n    case kArm64F64x2Pmin:\n    case kArm64F64x2Pmax:\n    case kArm64F64x2ConvertLowI32x4S:\n    case kArm64F64x2ConvertLowI32x4U:\n    case kArm64F64x2PromoteLowF32x4:\n    case kArm64F32x4SConvertI32x4:\n    case kArm64F32x4UConvertI32x4:\n    case kArm64F32x4Qfma:\n    case kArm64F32x4Qfms:\n    case kArm64F32x4Pmin:\n    case kArm64F32x4Pmax:\n    case kArm64F32x4DemoteF64x2Zero:\n    case kArm64F16x8Pmin:\n    case kArm64F16x8Pmax:\n    case kArm64F32x4PromoteLowF16x8:\n    case kArm64F16x8SConvertI16x8:\n    case kArm64F16x8UConvertI16x8:\n    case kArm64F16x8DemoteF32x4Zero:\n    case kArm64F16x8DemoteF64x2Zero:\n    case kArm64I16x8SConvertF16x8:\n    case kArm64I16x8UConvertF16x8:\n    case kArm64F16x8Qfma:\n    case kArm64F16x8Qfms:\n    case kArm64IExtractLane:\n    case kArm64IReplaceLane:\n    case kArm64ISplat:\n    case kArm64IAbs:\n    case kArm64INeg:\n    case kArm64Mla:\n    case kArm64Mls:\n    case kArm64I64x2Shl:\n    case kArm64I64x2ShrS:\n    case kArm64I64x2Mul:\n    case kArm64I"
}