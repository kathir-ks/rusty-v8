{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-operator.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-operator.h\",\n            \"file_name\": \"js-operator.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines operators and associated parameters used in the V8 JavaScript compiler for JavaScript-specific operations.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for base utilities, code generation, compiler infrastructure, object representation, and runtime functions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/compiler-specific.h\"\n#include \"src/codegen/tnode.h\"\n#include \"src/compiler/common-operator.h\"\n#include \"src/compiler/feedback-source.h\"\n#include \"src/compiler/globals.h\"\n#include \"src/compiler/node-properties.h\"\n#include \"src/compiler/node.h\"\n#include \"src/compiler/opcodes.h\"\n#include \"src/compiler/operator-properties.h\"\n#include \"src/objects/feedback-cell.h\"\n#include \"src/objects/oddball.h\"\n#include \"src/runtime/runtime.h\"\n\n#if DEBUG && V8_ENABLE_WEBASSEMBLY\n#include \"src/wasm/canonical-types.h\"\n#endif\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSOperator\",\n                \"about\": \"Provides static predicates for identifying JavaScript operators with feedback.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass JSOperator final : public AllStatic {\n public:\n  static constexpr bool IsUnaryWithFeedback(Operator::Opcode opcode) {\n#define CASE(Name, ...)   \\\n  case IrOpcode::k##Name: \\\n    return true;\n    switch (opcode) {\n      JS_UNOP_WITH_FEEDBACK(CASE);\n      default:\n        return false;\n    }\n#undef CASE\n  }\n\n  static constexpr bool IsBinaryWithFeedback(Operator::Opcode opcode) {\n#define CASE(Name, ...)   \\\n  case IrOpcode::k##Name: \\\n    return true;\n    switch (opcode) {\n      JS_BINOP_WITH_FEEDBACK(CASE);\n      default:\n        return false;\n    }\n#undef CASE\n  }\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallFrequency\",\n                \"about\": \"Represents the frequency of a Call/Construct site.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"value_\",\n                        \"type\": \"float\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the call frequency value.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass CallFrequency final {\n public:\n  CallFrequency() : value_(std::numeric_limits<float>::quiet_NaN()) {}\n  explicit CallFrequency(float value) : value_(value) {\n    DCHECK(!std::isnan(value));\n  }\n\n  bool IsKnown() const { return !IsUnknown(); }\n  bool IsUnknown() const { return std::isnan(value_); }\n  float value() const {\n    DCHECK(IsKnown());\n    return value_;\n  }\n\n  bool operator==(CallFrequency const& that) const {\n    return base::bit_cast<uint32_t>(this->value_) ==\n           base::bit_cast<uint32_t>(that.value_);\n  }\n  bool operator!=(CallFrequency const& that) const { return !(*this == that); }\n\n  friend size_t hash_value(CallFrequency const& f) {\n    return base::bit_cast<uint32_t>(f.value_);\n  }\n\n  static constexpr float kNoFeedbackCallFrequency = -1;\n\n private:\n  float value_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallFrequency to allow printing CallFrequency objects to an ostream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"f\",\n                        \"type\": \"CallFrequency const&\",\n                        \"purpose\": \"The CallFrequency object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream&, CallFrequency const&);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ConstructForwardVarargsParameters\",\n                \"about\": \"Defines flags for JavaScript call forwarding parameters, used by JSConstructForwardVarargs operators.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"bit_field_\",\n                        \"type\": \"uint32_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores arity and start index as bit fields.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass ConstructForwardVarargsParameters final {\n public:\n  ConstructForwardVarargsParameters(size_t arity, uint32_t start_index)\n      : bit_field_(ArityField::encode(arity) |\n                   StartIndexField::encode(start_index)) {}\n\n  size_t arity() const { return ArityField::decode(bit_field_); }\n  uint32_t start_index() const { return StartIndexField::decode(bit_field_); }\n\n  bool operator==(ConstructForwardVarargsParameters const& that) const {\n    return this->bit_field_ == that.bit_field_;\n  }\n  bool operator!=(ConstructForwardVarargsParameters const& that) const {\n    return !(*this == that);\n  }\n\n private:\n  friend size_t hash_value(ConstructForwardVarargsParameters const& p) {\n    return p.bit_field_;\n  }\n\n  using ArityField = base::BitField<size_t, 0, 16>;\n  using StartIndexField = base::BitField<uint32_t, 16, 16>;\n\n  uint32_t const bit_field_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for ConstructForwardVarargsParameters to allow printing ConstructForwardVarargsParameters objects to an ostream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"ConstructForwardVarargsParameters const&\",\n                        \"purpose\": \"The ConstructForwardVarargsParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream&,\n                         ConstructForwardVarargsParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ConstructForwardVarargsParametersOf\",\n                \"about\": \"Retrieves ConstructForwardVarargsParameters from an Operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The operator to extract parameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"ConstructForwardVarargsParameters const&\",\n                    \"description\": \"The ConstructForwardVarargsParameters associated with the Operator.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nConstructForwardVarargsParameters const& ConstructForwardVarargsParametersOf(\n    Operator const*) V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ConstructParameters\",\n                \"about\": \"Defines the arity and feedback for a JavaScript constructor call. Used by JSConstruct, JSConstructWithArrayLike, and JSConstructWithSpread operators.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"arity_\",\n                        \"type\": \"uint32_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The arity of the constructor call.\"\n                    },\n                    {\n                        \"name\": \"frequency_\",\n                        \"type\": \"CallFrequency const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The call frequency of the constructor call.\"\n                    },\n                    {\n                        \"name\": \"feedback_\",\n                        \"type\": \"FeedbackSource const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The feedback source for the constructor call.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"CallFrequency\",\n                    \"FeedbackSource\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass ConstructParameters final {\n public:\n  // A separate declaration to get around circular declaration dependencies.\n  // Checked to equal JSConstructNode::kExtraInputCount below.\n  static constexpr int kExtraConstructInputCount = 3;\n\n  ConstructParameters(uint32_t arity, CallFrequency const& frequency,\n                      FeedbackSource const& feedback)\n      : arity_(arity), frequency_(frequency), feedback_(feedback) {\n    DCHECK_GE(arity, kExtraConstructInputCount);\n    DCHECK(is_int32(arity));\n  }\n\n  // TODO(jgruber): Consider removing `arity()` and just storing the arity\n  // without extra args in ConstructParameters. Every spot that creates\n  // ConstructParameters artifically adds the extra args. Every spot that uses\n  // ConstructParameters artificially subtracts the extra args.\n  // We keep them for now for consistency with other spots\n  // that expect `arity()` to include extra args.\n  uint32_t arity() const { return arity_; }\n  int arity_without_implicit_args() const {\n    return static_cast<int>(arity_ - kExtraConstructInputCount);\n  }\n\n  CallFrequency const& frequency() const { return frequency_; }\n  FeedbackSource const& feedback() const { return feedback_; }\n\n private:\n  uint32_t const arity_;\n  CallFrequency const frequency_;\n  FeedbackSource const feedback_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Equality operator for ConstructParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"a\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"Left-hand side of the comparison.\"\n                    },\n                    {\n                        \"name\": \"b\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"Right-hand side of the comparison.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the ConstructParameters are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(ConstructParameters const&, ConstructParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"about\": \"Inequality operator for ConstructParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"a\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"Left-hand side of the comparison.\"\n                    },\n                    {\n                        \"name\": \"b\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"Right-hand side of the comparison.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the ConstructParameters are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(ConstructParameters const&, ConstructParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a ConstructParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The ConstructParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the ConstructParameters object.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(ConstructParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for ConstructParameters to allow printing ConstructParameters objects to an ostream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The ConstructParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream&, ConstructParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ConstructParametersOf\",\n                \"about\": \"Retrieves ConstructParameters from an Operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The operator to extract parameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"ConstructParameters const&\",\n                    \"description\": \"The ConstructParameters associated with the Operator.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nConstructParameters const& ConstructParametersOf(Operator const*);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallForwardVarargsParameters\",\n                \"about\": \"Defines flags for JavaScript call forwarding parameters, used by JSCallForwardVarargs operators.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"bit_field_\",\n                        \"type\": \"uint32_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores arity and start index as bit fields.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass CallForwardVarargsParameters final {\n public:\n  CallForwardVarargsParameters(size_t arity, uint32_t start_index)\n      : bit_field_(ArityField::encode(arity) |\n                   StartIndexField::encode(start_index)) {}\n\n  size_t arity() const { return ArityField::decode(bit_field_); }\n  uint32_t start_index() const { return StartIndexField::decode(bit_field_); }\n\n  bool operator==(CallForwardVarargsParameters const& that) const {\n    return this->bit_field_ == that.bit_field_;\n  }\n  bool operator!=(CallForwardVarargsParameters const& that) const {\n    return !(*this == that);\n  }\n\n private:\n  friend size_t hash_value(CallForwardVarargsParameters const& p) {\n    return p.bit_field_;\n  }\n\n  using ArityField = base::BitField<size_t, 0, 15>;\n  using StartIndexField = base::BitField<uint32_t, 15, 15>;\n\n  uint32_t const bit_field_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallForwardVarargsParameters to allow printing CallForwardVarargsParameters objects to an ostream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallForwardVarargsParameters const&\",\n                        \"purpose\": \"The CallForwardVarargsParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream&, CallForwardVarargsParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallForwardVarargsParametersOf\",\n                \"about\": \"Retrieves CallForwardVarargsParameters from an Operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The operator to extract parameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"CallForwardVarargsParameters const&\",\n                    \"description\": \"The CallForwardVarargsParameters associated with the Operator.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nCallForwardVarargsParameters const& CallForwardVarargsParametersOf(\n    Operator const*) V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallParameters\",\n                \"about\": \"Defines the arity, call flags and feedback for a JavaScript function call. Used by JSCall, JSCallWithArrayLike and JSCallWithSpread operators.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"bit_field_\",\n                        \"type\": \"uint32_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores arity, convert mode, speculation mode and feedback relation as bit fields.\"\n                    },\n                    {\n                        \"name\": \"frequency_\",\n                        \"type\": \"CallFrequency const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The call frequency of the function call.\"\n                    },\n                    {\n                        \"name\": \"feedback_\",\n                        \"type\": \"FeedbackSource const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The feedback source for the function call.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"CallFrequency\",\n                    \"FeedbackSource\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass CallParameters final {\n public:\n  // A separate declaration to get around circular declaration dependencies.\n  // Checked to equal JSCallNode::kExtraInputCount below.\n  static constexpr int kExtraCallInputCount = 3;\n\n  CallParameters(size_t arity, CallFrequency const& frequency,\n                 FeedbackSource const& feedback,\n                 ConvertReceiverMode convert_mode,\n                 SpeculationMode speculation_mode,\n                 CallFeedbackRelation feedback_relation)\n      : bit_field_(ArityField::encode(arity) |\n                   CallFeedbackRelationField::encode(feedback_relation) |\n                   SpeculationModeField::encode(speculation_mode) |\n                   ConvertReceiverModeField::encode(convert_mode)),\n        frequency_(frequency),\n        feedback_(feedback) {\n    // CallFeedbackRelation is ignored if the feedback slot is invalid.\n    DCHECK_IMPLIES(speculation_mode == SpeculationMode::kAllowSpeculation,\n                   feedback.IsValid());\n    DCHECK_IMPLIES(!feedback.IsValid(),\n                   feedback_relation == CallFeedbackRelation::kUnrelated);\n    DCHECK_GE(arity, kExtraCallInputCount);\n    DCHECK(is_int32(arity));\n  }\n\n  // TODO(jgruber): Consider removing `arity()` and just storing the arity\n  // without extra args in CallParameters.\n  size_t arity() const { return ArityField::decode(bit_field_); }\n  int arity_without_implicit_args() const {\n    return static_cast<int>(arity() - kExtraCallInputCount);\n  }\n\n  CallFrequency const& frequency() const { return frequency_; }\n  ConvertReceiverMode convert_mode() const {\n    return ConvertReceiverModeField::decode(bit_field_);\n  }\n  FeedbackSource const& feedback() const { return feedback_; }\n\n  SpeculationMode speculation_mode() const {\n    return SpeculationModeField::decode(bit_field_);\n  }\n\n  CallFeedbackRelation feedback_relation() const {\n    return CallFeedbackRelationField::decode(bit_field_);\n  }\n\n  bool operator==(CallParameters const& that) const {\n    return this->bit_field_ == that.bit_field_ &&\n           this->frequency_ == that.frequency_ &&\n           this->feedback_ == that.feedback_;\n  }\n  bool operator!=(CallParameters const& that) const { return !(*this == that); }\n\n private:\n  friend size_t hash_value(CallParameters const& p) {\n    FeedbackSource::Hash feedback_hash;\n    return base::hash_combine(p.bit_field_, p.frequency_,\n                              feedback_hash(p.feedback_));\n  }\n\n  using ArityField = base::BitField<size_t, 0, 27>;\n  using CallFeedbackRelationField = base::BitField<CallFeedbackRelation, 27, 2>;\n  using SpeculationModeField = base::BitField<SpeculationMode, 29, 1>;\n  using ConvertReceiverModeField = base::BitField<ConvertReceiverMode, 30, 2>;\n\n  uint32_t const bit_field_;\n  CallFrequency const frequency_;\n  FeedbackSource const feedback_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a CallParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallParameters const&\",\n                        \"purpose\": \"The CallParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the CallParameters object.\"\n                },\n                \"dependencies\": [\n                    \"FeedbackSource\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(CallParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallParameters to allow printing CallParameters objects to an ostream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallParameters const&\",\n                        \"purpose\": \"The CallParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream&, CallParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallParametersOf\",\n                \"about\": \"Retrieves CallParameters from an Operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The operator to extract parameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const CallParameters&\",\n                    \"description\": \"The CallParameters associated with the Operator.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst CallParameters& CallParametersOf(const Operator* op);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallRuntimeParameters\",\n                \"about\": \"Defines the arity and the ID for a runtime function call. This is used as a parameter by JSCallRuntime operators.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"id_\",\n                        \"type\": \"Runtime::FunctionId const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The ID of the runtime function.\"\n                    },\n                    {\n                        \"name\": \"arity_\",\n                        \"type\": \"size_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The arity of the runtime function call.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE CallRuntimeParameters final {\n public:\n  CallRuntimeParameters(Runtime::FunctionId id, size_t arity)\n      : id_(id), arity_(arity) {}\n\n  Runtime::FunctionId id() const { return id_; }\n  size_t arity() const { return arity_; }\n\n private:\n  const Runtime::FunctionId id_;\n  const size_t arity_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Equality operator for CallRuntimeParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"a\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"Left-hand side of the comparison.\"\n                    },\n                    {\n                        \"name\": \"b\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"Right-hand side of the comparison.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the CallRuntimeParameters are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(CallRuntimeParameters const&, CallRuntimeParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"about\": \"Inequality operator for CallRuntimeParameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"a\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"Left-hand side of the comparison.\"\n                    },\n                    {\n                        \"name\": \"b\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"Right-hand side of the comparison.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the CallRuntimeParameters are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(CallRuntimeParameters const&, CallRuntimeParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a CallRuntimeParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The CallRuntimeParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the CallRuntimeParameters object.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(CallRuntimeParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallRuntimeParameters to allow printing CallRuntimeParameters objects to an ostream.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The CallRuntimeParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream&, CallRuntimeParameters const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallRuntimeParametersOf\",\n                \"about\": \"Retrieves CallRuntimeParameters from an Operator.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The operator to extract parameters from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const CallRuntimeParameters&\",\n                    \"description\": \"The CallRuntimeParameters associated with the Operator.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE const CallRuntimeParameters& CallRuntimeParametersOf(\n    const Operator* op);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ContextAccess\",\n                \"about\": \"Defines the location of a context slot relative to a specific scope.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"immutable_\",\n                        \"type\": \"bool const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Indicates if the context slot is immutable.\"\n                    },\n                    {\n                        \"name\": \"depth_\",\n                        \"type\": \"uint16_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The depth of the context slot.\"\n                    },\n                    {\n                        \"name\": \"index_\",\n                        \"type\": \"uint32_t const\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The index of the context slot.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass ContextAccess final {\n public:\n  ContextAccess(size_t depth, size_t index, bool immutable);\n\n  size_t depth() const { return depth_; }\n  size_t index() const { return index_; }\n  bool immutable() const { return immutable_; }\n\n private:\n  // For space reasons, we keep this tightly packed, otherwise we could just use\n  // a simple int/int/bool POD.\n  const bool immutable_;\n  const uint16_t depth_;\n  const uint32_t index_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Equality operator for ContextAccess.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"a\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"Left-hand side of the comparison.\"\n                    },\n                    {\n                        \"name\": \"b\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"Right-hand side of the comparison.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the ContextAccess objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(ContextAccess const&, ContextAccess const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \""
}