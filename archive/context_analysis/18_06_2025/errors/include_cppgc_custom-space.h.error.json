{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/custom-space.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 157, column 14",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/custom-space.h\",\n        \"file_name\": \"custom-space.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines custom space interfaces and traits for cppgc (C++ garbage collector) in V8.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard size_t definition.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <stddef.h>\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"CustomSpaceIndex\",\n            \"about\": \"Index identifying a custom space within cppgc.\",\n            \"attributes\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"size_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The actual index value.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct CustomSpaceIndex {\n              constexpr CustomSpaceIndex(size_t value) : value(value) {}  // NOLINT\n              size_t value;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CustomSpaceBase\",\n            \"about\": \"Top-level base class for custom spaces.  Users inherit from CustomSpace below.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"CustomSpaceIndex\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class CustomSpaceBase {\n             public:\n              virtual ~CustomSpaceBase() = default;\n              virtual CustomSpaceIndex GetCustomSpaceIndex() const = 0;\n              virtual bool IsCompactable() const = 0;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CustomSpace\",\n            \"about\": \"Base class custom spaces should directly inherit from.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"CustomSpaceBase\",\n                \"CustomSpaceIndex\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename ConcreteCustomSpace>\n            class CustomSpace : public CustomSpaceBase {\n             public:\n              /**\n               * Compaction is only supported on spaces that manually manage slots\n               * recording.\n               */\n              static constexpr bool kSupportsCompaction = false;\n\n              CustomSpaceIndex GetCustomSpaceIndex() const final {\n                return ConcreteCustomSpace::kSpaceIndex;\n              }\n              bool IsCompactable() const final {\n                return ConcreteCustomSpace::kSupportsCompaction;\n              }\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"SpaceTrait\",\n            \"about\": \"User-overridable trait that allows pinning types to custom spaces.\",\n            \"attributes\": [],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            template <typename T, typename = void>\n            struct SpaceTrait {\n              using Space = void;\n            };\n        ]]></code>\n    </class>\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"internal\",\n            \"about\": \"Internal helper structs for determining space properties.\"\n        }\n        </metadata>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"IsAllocatedOnCompactableSpaceImpl\",\n                \"about\": \"Helper struct to determine if a custom space supports compaction.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"CustomSpace\"\n                ]\n            }\n            </metadata>\n            <code><![CDATA[\n            template <typename CustomSpace>\n            struct IsAllocatedOnCompactableSpaceImpl {\n              static constexpr bool value = CustomSpace::kSupportsCompaction;\n            };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"IsAllocatedOnCompactableSpaceImpl<void>\",\n                \"about\": \"Specialization of IsAllocatedOnCompactableSpaceImpl for void.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            template <>\n            struct IsAllocatedOnCompactableSpaceImpl<void> {\n              // Non-custom spaces are by default not compactable.\n              static constexpr bool value = false;\n            };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"IsAllocatedOnCompactableSpace\",\n                \"about\": \"Determines if a type is allocated on a compactable space.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"SpaceTrait\",\n                    \"IsAllocatedOnCompactableSpaceImpl\"\n                ]\n            }\n            </metadata>\n            <code><![CDATA[\n            template <typename T>\n            struct IsAllocatedOnCompactableSpace {\n             public:\n              static constexpr bool value =\n                  IsAllocatedOnCompactableSpaceImpl<typename SpaceTrait<T>::Space>::value;\n            };\n            ]]></code>\n        </class>\n    </namespace>\n</file>\n```"
}