{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/logging/counters.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/logging/counters.cc\",\n            \"file_name\": \"counters.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implements counters and histograms for performance monitoring and statistics gathering in V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for counters, atomic operations, platform-specific time measurements, built-in definitions, isolate management, thread IDs, and logging functionalities.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/logging/counters.h\"\n\n#include \"src/base/atomic-utils.h\"\n#include \"src/base/platform/elapsed-timer.h\"\n#include \"src/base/platform/time.h\"\n#include \"src/builtins/builtins-definitions.h\"\n#include \"src/execution/isolate.h\"\n#include \"src/execution/thread-id.h\"\n#include \"src/logging/log-inl.h\"\n#include \"src/logging/log.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StatsTable\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Provides a lookup table for accessing counters and histograms.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"lookup_function_\",\n                        \"type\": \"CounterLookupCallback\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Function pointer for looking up counters by name.\"\n                    },\n                    {\n                        \"name\": \"create_histogram_function_\",\n                        \"type\": \"CreateHistogramCallback\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Function pointer for creating histograms.\"\n                    },\n                    {\n                        \"name\": \"add_histogram_sample_function_\",\n                        \"type\": \"AddHistogramSampleCallback\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Function pointer for adding samples to histograms.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass StatsTable {\n public:\n  StatsTable(Counters* counters);\n  void SetCounterFunction(CounterLookupCallback f);\n  void SetCreateHistogramFunction(CreateHistogramCallback f) {\n    create_histogram_function_ = f;\n  }\n  void SetAddHistogramSampleFunction(AddHistogramSampleCallback f) {\n    add_histogram_sample_function_ = f;\n  }\n\n private:\n  CounterLookupCallback lookup_function_;\n  CreateHistogramCallback create_histogram_function_;\n  AddHistogramSampleCallback add_histogram_sample_function_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"StatsTable\",\n                \"parent\": \"StatsTable\",\n                \"about\": \"Constructor for the StatsTable class.\",\n                \"logic\": \"Initializes function pointers to nullptr.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"counters\",\n                        \"type\": \"Counters*\",\n                        \"purpose\": \"Pointer to the Counters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nStatsTable::StatsTable(Counters* counters)\n    : lookup_function_(nullptr),\n      create_histogram_function_(nullptr),\n      add_histogram_sample_function_(nullptr) {}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetCounterFunction\",\n                \"parent\": \"StatsTable\",\n                \"about\": \"Sets the counter lookup function.\",\n                \"logic\": \"Assigns the provided function pointer to the lookup_function_ member.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"f\",\n                        \"type\": \"CounterLookupCallback\",\n                        \"purpose\": \"The function pointer to be used for counter lookup.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid StatsTable::SetCounterFunction(CounterLookupCallback f) {\n  lookup_function_ = f;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"<anonymous>\",\n                \"about\": \"Contains an unused counter dump.\",\n                \"logic\": \"Defines a static atomic integer variable unused_counter_dump, initialized to 0. It's used as a default pointer for StatsCounter when the actual counter location isn't found in the stats table.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace {\nstd::atomic<int> unused_counter_dump{0};\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StatsCounter\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Represents a statistic counter.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool StatsCounter::Enabled() { return GetPtr() != &unused_counter_dump; }\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Enabled\",\n                \"parent\": \"StatsCounter\",\n                \"about\": \"Checks if the counter is enabled.\",\n                \"logic\": \"Returns true if the counter's pointer is not pointing to the unused_counter_dump variable, indicating that it is associated with a valid counter.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the counter is enabled, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool StatsCounter::Enabled() { return GetPtr() != &unused_counter_dump; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SetupPtrFromStatsTable\",\n                \"parent\": \"StatsCounter\",\n                \"about\": \"Sets up the pointer to the actual counter location in the stats table.\",\n                \"logic\": \"Looks up the counter's location in the stats table using its name. If found, sets the internal pointer to that location. Otherwise, sets the pointer to the unused_counter_dump variable. Uses atomic operations to ensure thread safety.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"std::atomic<int>*\",\n                    \"description\": \"Pointer to the counter location.\"\n                },\n                \"dependencies\": [\n                    \"Counters::FindLocation\",\n                    \"base::AsAtomicPtr\",\n                    \"unused_counter_dump\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::atomic<int>* StatsCounter::SetupPtrFromStatsTable() {\n  // {Init} must have been called.\n  DCHECK_NOT_NULL(counters_);\n  DCHECK_NOT_NULL(name_);\n  int* location = counters_->FindLocation(name_);\n  std::atomic<int>* ptr =\n      location ? base::AsAtomicPtr(location) : &unused_counter_dump;\n#ifdef DEBUG\n  std::atomic<int>* old_ptr = ptr_.exchange(ptr, std::memory_order_release);\n  DCHECK_IMPLIES(old_ptr, old_ptr == ptr);\n#else\n  ptr_.store(ptr, std::memory_order_release);\n#endif\n  return ptr;\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Histogram\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Base class for histograms.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid Histogram::AddSample(int sample) {\n  if (Enabled()) {\n    counters_->AddHistogramSample(histogram_, sample);\n  }\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"AddSample\",\n                \"parent\": \"Histogram\",\n                \"about\": \"Adds a sample to the histogram.\",\n                \"logic\": \"If the histogram is enabled, it calls the AddHistogramSample function on the Counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"sample\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The sample value to be added.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Counters::AddHistogramSample\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid Histogram::AddSample(int sample) {\n  if (Enabled()) {\n    counters_->AddHistogramSample(histogram_, sample);\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CreateHistogram\",\n                \"parent\": \"Histogram\",\n                \"about\": \"Creates a histogram.\",\n                \"logic\": \"Calls the CreateHistogram function on the Counters object with the histogram's parameters.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void*\",\n                    \"description\": \"Pointer to the created histogram.\"\n                },\n                \"dependencies\": [\n                    \"Counters::CreateHistogram\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid* Histogram::CreateHistogram() const {\n  return counters_->CreateHistogram(name_, min_, max_, num_buckets_);\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TimedHistogram\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Represents a histogram that measures time intervals.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TimedHistogram::Stop(base::ElapsedTimer* timer) {\n  DCHECK(Enabled());\n  AddTimedSample(timer->Elapsed());\n  timer->Stop();\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Stop\",\n                \"parent\": \"TimedHistogram\",\n                \"about\": \"Stops the timer and adds the elapsed time as a sample to the histogram.\",\n                \"logic\": \"Stops the elapsed timer and then calls AddTimedSample to add the sample. Calls timer->Stop() to finalize timer operations.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"timer\",\n                        \"type\": \"base::ElapsedTimer*\",\n                        \"purpose\": \"Pointer to the elapsed timer.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"AddTimedSample\",\n                    \"base::ElapsedTimer::Elapsed\",\n                    \"base::ElapsedTimer::Stop\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TimedHistogram::Stop(base::ElapsedTimer* timer) {\n  DCHECK(Enabled());\n  AddTimedSample(timer->Elapsed());\n  timer->Stop();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"AddTimedSample\",\n                \"parent\": \"TimedHistogram\",\n                \"about\": \"Adds a timed sample to the histogram.\",\n                \"logic\": \"Converts the base::TimeDelta sample to either microseconds or milliseconds based on the resolution_ setting, then adds it as an integer sample to the histogram.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"sample\",\n                        \"type\": \"base::TimeDelta\",\n                        \"purpose\": \"The timed sample to be added.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Histogram::AddSample\",\n                    \"base::TimeDelta::InMicroseconds\",\n                    \"base::TimeDelta::InMilliseconds\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TimedHistogram::AddTimedSample(base::TimeDelta sample) {\n  if (Enabled()) {\n    int64_t sample_int = resolution_ == TimedHistogramResolution::MICROSECOND\n                             ? sample.InMicroseconds()\n                             : sample.InMilliseconds();\n    AddSample(static_cast<int>(sample_int));\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"RecordAbandon\",\n                \"parent\": \"TimedHistogram\",\n                \"about\": \"Records the abandonment of a timed operation.\",\n                \"logic\": \"Stops the timer and records a maximum time sample, indicating that the operation was abandoned.  It also logs an event to the V8 file logger if an isolate is provided, signaling the end of the timed operation.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"timer\",\n                        \"type\": \"base::ElapsedTimer*\",\n                        \"purpose\": \"Pointer to the elapsed timer.\"\n                    },\n                    {\n                        \"name\": \"isolate\",\n                        \"type\": \"Isolate*\",\n                        \"purpose\": \"Pointer to the isolate.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"base::ElapsedTimer::Stop\",\n                    \"base::TimeDelta::Max\",\n                    \"base::TimeDelta::InMicroseconds\",\n                    \"base::TimeDelta::InMilliseconds\",\n                    \"Histogram::AddSample\",\n                    \"V8FileLogger::CallEventLogger\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TimedHistogram::RecordAbandon(base::ElapsedTimer* timer,\n                                   Isolate* isolate) {\n  if (Enabled()) {\n    DCHECK(timer->IsStarted());\n    timer->Stop();\n    int64_t sample = resolution_ == TimedHistogramResolution::MICROSECOND\n                         ? base::TimeDelta::Max().InMicroseconds()\n                         : base::TimeDelta::Max().InMilliseconds();\n    AddSample(static_cast<int>(sample));\n  }\n  if (isolate != nullptr) {\n    V8FileLogger::CallEventLogger(isolate, name(), v8::LogEventStatus::kEnd,\n                                  true);\n  }\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ToggleRunningState\",\n                \"parent\": \"TimedHistogram\",\n                \"about\": \"Toggles the running state of a timer for debugging purposes.\",\n                \"logic\": \"Uses a thread-local unordered map to track the running state of TimedHistogram instances.  It toggles the state and performs a DCHECK to ensure the state transitions correctly, but only in debug mode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"expect_to_run\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"Expected running state.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"Returns the new running state.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#ifdef DEBUG\nbool TimedHistogram::ToggleRunningState(bool expect_to_run) const {\n#if __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wexit-time-destructors\"\n#endif\n  static thread_local std::unordered_map<const TimedHistogram*, bool>\n      active_timer;\n#if __clang__\n#pragma clang diagnostic pop\n#endif\n  bool is_running = active_timer[this];\n  DCHECK_NE(is_running, expect_to_run);\n  active_timer[this] = !is_running;\n  return true;\n}\n#endif\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"namespace\",\n                \"name\": \"<anonymous>\",\n                \"about\": \"Defines a default number of buckets for timed histograms.\",\n                \"logic\": \"Defines a static constexpr integer variable DefaultTimedHistogramNumBuckets, initialized to 50.  This constant is used as the default number of buckets when initializing TimedHistogram instances.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace {\nstatic constexpr int DefaultTimedHistogramNumBuckets = 50;\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CountersInitializer\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Helper class to initialize various types of counters and histograms.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(Histogram* histogram, const char* caption,\n                                int min, int max, int num_buckets) {\n  histogram->Initialize(caption, min, max, num_buckets, counters());\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes a Histogram object.\",\n                \"logic\": \"Calls the Initialize method of the Histogram with the provided caption, min, max, num_buckets and the counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"histogram\",\n                        \"type\": \"Histogram*\",\n                        \"purpose\": \"Pointer to the Histogram object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the histogram.\"\n                    },\n                    {\n                        \"name\": \"min\",\n                        \"type\": \"int\",\n                        \"purpose\": \"Minimum value for the histogram.\"\n                    },\n                    {\n                        \"name\": \"max\",\n                        \"type\": \"int\",\n                        \"purpose\": \"Maximum value for the histogram.\"\n                    },\n                    {\n                        \"name\": \"num_buckets\",\n                        \"type\": \"int\",\n                        \"purpose\": \"Number of buckets for the histogram.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Histogram::Initialize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(Histogram* histogram, const char* caption,\n                                int min, int max, int num_buckets) {\n  histogram->Initialize(caption, min, max, num_buckets, counters());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes a PercentageHistogram object.\",\n                \"logic\": \"Calls the Initialize method of the PercentageHistogram with a predefined range (0-101) and 100 buckets and the counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"histogram\",\n                        \"type\": \"PercentageHistogram*\",\n                        \"purpose\": \"Pointer to the PercentageHistogram object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the histogram.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"PercentageHistogram::Initialize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(PercentageHistogram* histogram,\n                                const char* caption) {\n  histogram->Initialize(caption, 0, 101, 100, counters());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes a LegacyMemoryHistogram object.\",\n                \"logic\": \"Calls the Initialize method of the LegacyMemoryHistogram with a predefined range (1000-500000) and 50 buckets and the counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"histogram\",\n                        \"type\": \"LegacyMemoryHistogram*\",\n                        \"purpose\": \"Pointer to the LegacyMemoryHistogram object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the histogram.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"LegacyMemoryHistogram::Initialize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(LegacyMemoryHistogram* histogram,\n                                const char* caption) {\n  // Exponential histogram assigns bucket limits to points\n  // p[1], p[2], ... p[n] such that p[i+1] / p[i] = constant.\n  // The constant factor is equal to the n-th root of (high / low),\n  // where the n is the number of buckets, the low is the lower limit,\n  // the high is the upper limit.\n  // For n = 50, low = 1000, high = 500000: the factor = 1.13.\n  histogram->Initialize(caption, 1000, 500000, 50, counters());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes a TimedHistogram object.\",\n                \"logic\": \"Calls the Initialize method of the TimedHistogram with the provided caption, max, resolution, default number of buckets (50), and the counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"histogram\",\n                        \"type\": \"TimedHistogram*\",\n                        \"purpose\": \"Pointer to the TimedHistogram object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the histogram.\"\n                    },\n                    {\n                        \"name\": \"max\",\n                        \"type\": \"int\",\n                        \"purpose\": \"Maximum value for the histogram.\"\n                    },\n                    {\n                        \"name\": \"res\",\n                        \"type\": \"TimedHistogramResolution\",\n                        \"purpose\": \"Resolution for the timed histogram.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"TimedHistogram::Initialize\",\n                    \"DefaultTimedHistogramNumBuckets\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(TimedHistogram* histogram, const char* caption,\n                                int max, TimedHistogramResolution res) {\n  histogram->Initialize(caption, 0, max, res, DefaultTimedHistogramNumBuckets,\n                        counters());\n}\n        ]]></code>\n    </func>\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes a NestedTimedHistogram object.\",\n                \"logic\": \"Calls the Initialize method of the NestedTimedHistogram with the provided caption, max, resolution, default number of buckets (50), and the counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"histogram\",\n                        \"type\": \"NestedTimedHistogram*\",\n                        \"purpose\": \"Pointer to the NestedTimedHistogram object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the histogram.\"\n                    },\n                    {\n                        \"name\": \"max\",\n                        \"type\": \"int\",\n                        \"purpose\": \"Maximum value for the histogram.\"\n                    },\n                    {\n                        \"name\": \"res\",\n                        \"type\": \"TimedHistogramResolution\",\n                        \"purpose\": \"Resolution for the timed histogram.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"NestedTimedHistogram::Initialize\",\n                    \"DefaultTimedHistogramNumBuckets\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(NestedTimedHistogram* histogram,\n                                const char* caption, int max,\n                                TimedHistogramResolution res) {\n  histogram->Initialize(caption, 0, max, res, DefaultTimedHistogramNumBuckets,\n                        counters());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes an AggregatableHistogramTimer object.\",\n                \"logic\": \"Calls the Initialize method of the AggregatableHistogramTimer with a predefined range (0 - 10000000) and the default number of buckets.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"histogram\",\n                        \"type\": \"AggregatableHistogramTimer*\",\n                        \"purpose\": \"Pointer to the AggregatableHistogramTimer object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the histogram timer.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"AggregatableHistogramTimer::Initialize\",\n                    \"DefaultTimedHistogramNumBuckets\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(AggregatableHistogramTimer* histogram,\n                                const char* caption) {\n  histogram->Initialize(caption, 0, 10000000, DefaultTimedHistogramNumBuckets,\n                        counters());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Visit\",\n                \"parent\": \"CountersInitializer\",\n                \"about\": \"Initializes a StatsCounter object.\",\n                \"logic\": \"Calls the Initialize method of the StatsCounter with the provided caption and the counters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"counter\",\n                        \"type\": \"StatsCounter*\",\n                        \"purpose\": \"Pointer to the StatsCounter object to initialize.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the counter.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"StatsCounter::Initialize\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CountersInitializer::Visit(StatsCounter* counter, const char* caption) {\n  counter->Initialize(caption, counters());\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Counters\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Manages the collection of counters and histograms.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nCounters::Counters(Isolate* isolate)\n    :\n#ifdef V8_RUNTIME_CALL_STATS\n      runtime_call_stats_(RuntimeCallStats::kMainIsolateThread),\n      worker_thread_runtime_call_stats_(),\n#endif\n      isolate_(isolate),\n      stats_table_(this) {\n  CountersInitializer init(this);\n  init.Start();\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"constructor\",\n                \"name\": \"Counters\",\n                \"parent\": \"Counters\",\n                \"about\": \"Constructor for the Counters class.\",\n                \"logic\": \"Initializes the counters and histograms managed by the Counters class. It creates a CountersInitializer object and calls its Start method to initialize all the counters and histograms.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"isolate\",\n                        \"type\": \"Isolate*\",\n                        \"purpose\": \"Pointer to the isolate.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"CountersInitializer::Start\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nCounters::Counters(Isolate* isolate)\n    :\n#ifdef V8_RUNTIME_CALL_STATS\n      runtime_call_stats_(RuntimeCallStats::kMainIsolateThread),\n      worker_thread_runtime_call_stats_(),\n#endif\n      isolate_(isolate),\n      stats_table_(this) {\n  CountersInitializer init(this);\n  init.Start();\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StatsCounterResetter\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Helper class to reset StatsCounter objects.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid StatsCounterResetter::VisitStatsCounter(StatsCounter* counter,\n                                             const char* caption) {\n  counter->Reset();\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"VisitStatsCounter\",\n                \"parent\": \"StatsCounterResetter\",\n                \"about\": \"Resets a StatsCounter object.\",\n                \"logic\": \"Calls the Reset method of the StatsCounter object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"counter\",\n                        \"type\": \"StatsCounter*\",\n                        \"purpose\": \"Pointer to the StatsCounter object to reset.\"\n                    },\n                    {\n                        \"name\": \"caption\",\n                        \"type\": \"const char*\",\n                        \"purpose\": \"Caption for the counter.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"StatsCounter::Reset\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid StatsCounterResetter::VisitStatsCounter(StatsCounter* counter,\n                                             const char* caption) {\n  counter->Reset();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ResetCounterFunction\",\n                \"parent\": \"Counters\",\n                \"about\": \"Resets the counter function.\",\n                \"logic\": \"Sets the counter lookup function in the stats table and then resets all the stats counters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"f\",\n                        \"type\": \"CounterLookupCallback\",\n                        \"purpose\": \"The function pointer to be used for counter lookup.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"StatsTable::SetCounterFunction\",\n                    \"StatsCounterResetter::Start\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid Counters::ResetCounterFunction(CounterLookupCallback f) {\n  stats_table_.SetCounterFunction(f);\n  StatsCounterResetter resetter(this);\n  resetter.Start();\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HistogramResetter\",\n                \"extends\": null,\n                \"implements\": [],\n                \"about\": \"Helper class to reset Histogram objects.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid HistogramResetter::Visit"
}