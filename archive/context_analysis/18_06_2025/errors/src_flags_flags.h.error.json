{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/flags/flags.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 235, column 42",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/flags/flags.h\",\n            \"file_name\": \"flags.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the flag system for V8, including the FlagValue class, FlagValues struct, and FlagList class. Manages command-line flags and their values.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers for optional values and V8-specific global definitions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/common/globals.h\"\n\n#if V8_ENABLE_WEBASSEMBLY\n// Include the wasm-limits.h header for some default values of Wasm flags.\n// This can be reverted once we can use designated initializations (C++20) for\n// {v8_flags} (defined in flags.cc) instead of specifying the default values in\n// the header and using the default constructor.\n#include \"src/wasm/wasm-limits.h\"\n#endif\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"FlagValue\",\n                \"about\": \"Represents the value of a single flag, providing implicit and explicit conversion to the underlying type, and assignment operator.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"value_\",\n                        \"type\": \"T\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the actual flag value.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename T>\nclass FlagValue {\n  // {FlagValue} types will be memory-protected in {FlagList::FreezeFlags}.\n  // We currently allow the following types to be used for flags:\n  // - Arithmetic types like bool, int, size_t, double; those will trivially be\n  //   protected.\n  // - std::optional<bool>, which is basically a POD, and can also be\n  //   protected.\n  // - const char*, for which we currently do not protect the actual string\n  //   value. TODO(12887): Also protect the string storage.\n  //\n  // Other types can be added as needed, after checking that memory protection\n  // works for them.\n  static_assert(std::is_same_v<std::decay_t<T>, T>);\n  static_assert(std::is_arithmetic_v<T> ||\n                std::is_same_v<std::optional<bool>, T> ||\n                std::is_same_v<const char*, T>);\n\n public:\n  using underlying_type = T;\n  explicit constexpr FlagValue(T value) : value_(value) {}\n\n  // Implicitly convert to a {T}. Not marked {constexpr} so we do not get\n  // compiler warnings about dead code (when checking readonly flags).\n  operator T() const { return value_; }\n\n  // Explicitly convert to a {T} via {value()}. This is {constexpr} so we can\n  // use it for computing other constants.\n  constexpr T value() const { return value_; }\n\n  // Assign a new value (defined below).\n  inline FlagValue<T>& operator=(T new_value);\n\n private:\n  T value_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"FlagValues\",\n                \"about\": \"A struct to hold all flag values. It is a singleton struct that cannot be copied, moved, or assigned.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstruct alignas(kMinimumOSPageSize) FlagValues {\n  FlagValues() = default;\n  // No copying, moving, or assigning. This is a singleton struct.\n  FlagValues(const FlagValues&) = delete;\n  FlagValues(FlagValues&&) = delete;\n  FlagValues& operator=(const FlagValues&) = delete;\n  FlagValues& operator=(FlagValues&&) = delete;\n\n#define FLAG_MODE_DECLARE\n#include \"src/flags/flag-definitions.h\"  // NOLINT(build/include)\n#undef FLAG_MODE_DECLARE\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"FlagList\",\n                \"about\": \"Manages the global list of flags, including setting flags from the command line, freezing flags, printing help, and resolving contradictions during fuzzing.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE FlagList {\n public:\n  class HelpOptions {\n   public:\n    enum ExitBehavior : bool { kExit = true, kDontExit = false };\n\n    explicit HelpOptions(ExitBehavior exit_behavior = kExit,\n                         const char* usage = nullptr)\n        : exit_behavior_(exit_behavior), usage_(usage) {}\n\n    bool ShouldExit() { return exit_behavior_ == kExit; }\n    bool HasUsage() { return usage_ != nullptr; }\n    const char* usage() { return usage_; }\n\n   private:\n    ExitBehavior exit_behavior_;\n    const char* usage_;\n  };\n\n  // Set the flag values by parsing the command line. If remove_flags is\n  // set, the recognized flags and associated values are removed from (argc,\n  // argv) and only unknown arguments remain. Returns 0 if no error occurred.\n  // Otherwise, returns the argv index > 0 for the argument where an error\n  // occurred. In that case, (argc, argv) will remain unchanged independent of\n  // the remove_flags value, and no assumptions about flag settings should be\n  // made. If exit_behavior is set to Exit and --help has been specified on the\n  // command line, then the usage string will be printed, if it was specified,\n  // followed by the help flag and then the process will exit. Otherwise the\n  // flag help will be displayed but execution will continue.\n  //\n  // The following syntax for flags is accepted (both '-' and '--' are ok):\n  //\n  //   --flag        (bool flags only)\n  //   --no-flag     (bool flags only)\n  //   --flag=value  (non-bool flags only, no spaces around '=')\n  //   --flag value  (non-bool flags only)\n  //   --            (capture all remaining args in JavaScript)\n  static int SetFlagsFromCommandLine(\n      int* argc, char** argv, bool remove_flags,\n      FlagList::HelpOptions help_options = FlagList::HelpOptions());\n\n  // Set the flag values by parsing the string str. Splits string into argc\n  // substrings argv[], each of which consisting of non-white-space chars,\n  // and then calls SetFlagsFromCommandLine() and returns its result.\n  static int SetFlagsFromString(const char* str, size_t len);\n\n  // Freeze the current flag values (disallow changes via the API).\n  static void FreezeFlags();\n\n  // Returns true if the flags are currently frozen.\n  static bool IsFrozen();\n\n  // Free dynamically allocated memory of strings. This is called during\n  // teardown; flag values cannot be used afterwards any more.\n  static void ReleaseDynamicAllocations();\n\n  // Print help to stdout with flags, types, and default values.\n  static void PrintHelp();\n\n  static void PrintValues();\n\n  // Prints JS and Wasm feature flags, categorized by in-progress, staging, and\n  // shipping, as JSON. Used by scripts to clean up flags in test files.\n  static void PrintFeatureFlagsJSON();\n\n  // Reset some contradictory flags provided on the command line during\n  // fuzzing.\n  static void ResolveContradictionsWhenFuzzing();\n\n  // Set flags as consequence of being implied by another flag.\n  static void EnforceFlagImplications();\n\n  // Hash of flags (to quickly determine mismatching flag expectations).\n  // This hash is calculated during V8::Initialize and cached.\n  static uint32_t Hash();\n\n private:\n  // Reset the flag hash on flag changes. This is a private method called from\n  // {FlagValue<T>::operator=}; there should be no need to call it from any\n  // other place.\n  static void ResetFlagHash();\n\n  // Make {FlagValue<T>} a friend, so it can call {ResetFlagHash()}.\n  template <typename T>\n  friend class FlagValue;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"operator=\",\n                \"parent\": \"FlagValue\",\n                \"about\": \"Assignment operator for the FlagValue class.  Resets the flag hash if the new value is different.\",\n                \"logic\": \"Compares the new value with the current value. If they are different, it calls FlagList::ResetFlagHash() to reset the flag hash and updates the value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"new_value\",\n                        \"type\": \"T\",\n                        \"purpose\": \"The new value to assign to the flag.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FlagValue<T>&\",\n                    \"description\": \"A reference to the FlagValue object.\"\n                },\n                \"dependencies\": [\n                    \"FlagList\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename T>\nFlagValue<T>& FlagValue<T>::operator=(T new_value) {\n  if (new_value != value_) {\n    FlagList::ResetFlagHash();\n    value_ = new_value;\n  }\n  return *this;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"extern\",\n                \"name\": \"v8_flags\",\n                \"about\": \"Extern declaration of the global FlagValues instance.\",\n                \"logic\": \"Provides access to the global flag values.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"FlagValues\",\n                    \"description\": \"The global flag values.\"\n                },\n                \"dependencies\": [\n                    \"FlagValues\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE extern FlagValues v8_flags;\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"FlagList::HelpOptions\",\n                \"about\": \"Helper class for encapsulating options related to printing the help message and exiting the program.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"exit_behavior_\",\n                        \"type\": \"ExitBehavior\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Determines whether the program should exit after printing the help message.\"\n                    },\n                    {\n                        \"name\": \"usage_\",\n                        \"type\": \"const char*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Optional custom usage message to print before the help message.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  class HelpOptions {\n   public:\n    enum ExitBehavior : bool { kExit = true, kDontExit = false };\n\n    explicit HelpOptions(ExitBehavior exit_behavior = kExit,\n                         const char* usage = nullptr)\n        : exit_behavior_(exit_behavior), usage_(usage) {}\n\n    bool ShouldExit() { return exit_behavior_ == kExit; }\n    bool HasUsage() { return usage_ != nullptr; }\n    const char* usage() { return usage_; }\n\n   private:\n    ExitBehavior exit_behavior_;\n    const char* usage_;\n  };\n        ]]></code>\n    </class>\n\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"V8_EXPORT_PRIVATE\",\n                    \"about\": \"V8 macro to handle exporting classes\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class V8_EXPORT_PRIVATE {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}