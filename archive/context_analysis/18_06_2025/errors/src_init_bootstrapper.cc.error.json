{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/init/bootstrapper.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/init/bootstrapper.cc\",\n        \"file_name\": \"bootstrapper.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Initializes the V8 JavaScript engine's environment, including the creation of the global context, built-in functions, and extensions.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for V8 initialization, API, base utilities, built-ins, code generation, debugging, execution, extensions, logging, object management, snapshots, zones, web assembly, and internationalization support.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/init/bootstrapper.h\"\n\n            #include \"include/v8-function.h\"\n            #include \"src/api/api-inl.h\"\n            #include \"src/api/api-natives.h\"\n            #include \"src/base/hashmap.h\"\n            #include \"src/base/ieee754.h\"\n            #include \"src/builtins/accessors.h\"\n            #include \"src/codegen/compiler.h\"\n            #include \"src/common/globals.h\"\n            #include \"src/debug/debug.h\"\n            #include \"src/execution/isolate-inl.h\"\n            #include \"src/execution/microtask-queue.h\"\n            #include \"src/execution/protectors.h\"\n            #include \"src/extensions/cputracemark-extension.h\"\n            #include \"src/extensions/externalize-string-extension.h\"\n            #include \"src/extensions/gc-extension.h\"\n            #include \"src/extensions/ignition-statistics-extension.h\"\n            #include \"src/extensions/statistics-extension.h\"\n            #include \"src/extensions/trigger-failure-extension.h\"\n            #include \"src/logging/runtime-call-stats-scope.h\"\n            #include \"src/objects/instance-type.h\"\n            #include \"src/objects/js-array.h\"\n            #include \"src/objects/js-function.h\"\n            #include \"src/objects/objects.h\"\n            #include \"src/sandbox/testing.h\"\n            #ifdef ENABLE_VTUNE_TRACEMARK\n            #include \"src/extensions/vtunedomain-support-extension.h\"\n            #endif  // ENABLE_VTUNE_TRACEMARK\n            #include \"src/heap/heap-inl.h\"\n            #include \"src/logging/counters.h\"\n            #include \"src/logging/log.h\"\n            #include \"src/numbers/math-random.h\"\n            #include \"src/objects/api-callbacks.h\"\n            #include \"src/objects/arguments.h\"\n            #include \"src/objects/function-kind.h\"\n            #include \"src/objects/hash-table-inl.h\"\n            #ifdef V8_INTL_SUPPORT\n            #include \"src/objects/intl-objects.h\"\n            #endif  // V8_INTL_SUPPORT\n            #include \"src/objects/js-array-buffer-inl.h\"\n            #include \"src/objects/js-array-inl.h\"\n            #include \"src/objects/js-atomics-synchronization.h\"\n            #include \"src/objects/js-disposable-stack.h\"\n            #include \"src/objects/js-iterator-helpers.h\"\n            #ifdef V8_INTL_SUPPORT\n            #include \"src/objects/js-break-iterator.h\"\n            #include \"src/objects/js-collator.h\"\n            #include \"src/objects/js-date-time-format.h\"\n            #include \"src/objects/js-display-names.h\"\n            #include \"src/objects/js-duration-format.h\"\n            #include \"src/objects/js-list-format.h\"\n            #include \"src/objects/js-locale.h\"\n            #include \"src/objects/js-number-format.h\"\n            #include \"src/objects/js-plural-rules.h\"\n            #endif  // V8_INTL_SUPPORT\n            #include \"src/objects/js-regexp-string-iterator.h\"\n            #include \"src/objects/js-regexp.h\"\n            #include \"src/objects/js-shadow-realm.h\"\n            #ifdef V8_INTL_SUPPORT\n            #include \"src/objects/js-relative-time-format.h\"\n            #include \"src/objects/js-segment-iterator.h\"\n            #include \"src/objects/js-segmenter.h\"\n            #include \"src/objects/js-segments.h\"\n            #endif  // V8_INTL_SUPPORT\n            #include \"src/codegen/script-details.h\"\n            #include \"src/objects/js-raw-json.h\"\n            #include \"src/objects/js-shared-array.h\"\n            #include \"src/objects/js-struct.h\"\n            #include \"src/objects/js-temporal-objects-inl.h\"\n            #include \"src/objects/js-weak-refs.h\"\n            #include \"src/objects/ordered-hash-table.h\"\n            #include \"src/objects/property-cell.h\"\n            #include \"src/objects/property-descriptor.h\"\n            #include \"src/objects/slots-inl.h\"\n            #include \"src/objects/swiss-name-dictionary-inl.h\"\n            #include \"src/objects/templates.h\"\n            #include \"src/snapshot/snapshot.h\"\n            #include \"src/zone/zone-hashmap.h\"\n\n            #ifdef V8_FUZZILLI\n            #include \"src/fuzzilli/fuzzilli.h\"\n            #endif\n\n            #if V8_ENABLE_WEBASSEMBLY\n            #include \"src/wasm/wasm-js.h\"\n            #endif  // V8_ENABLE_WEBASSEMBLY\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourceCodeCache\",\n            \"about\": \"Caches source code to improve performance by avoiding repeated parsing and compilation of the same scripts.\",\n            \"attributes\": [\n                {\n                    \"name\": \"cache_\",\n                    \"type\": \"Tagged<FixedArray>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the cached source code.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"base::Vector\",\n                \"SharedFunctionInfo\",\n                \"FixedArray\",\n                \"SeqOneByteString\",\n                \"String\",\n                \"Script\",\n                \"RootVisitor\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class SourceCodeCache {\n            public:\n            void Initialize(Isolate* isolate, bool create_heap_objects);\n            void Iterate(RootVisitor* v);\n            bool Lookup(Isolate* isolate, base::Vector<const char> name,\n                                DirectHandle<SharedFunctionInfo>* handle);\n            void Add(Isolate* isolate, base::Vector<const char> name,\n                                DirectHandle<SharedFunctionInfo> shared);\n            private:\n            Tagged<FixedArray> cache_;\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Initialize\",\n            \"parent\": \"SourceCodeCache\",\n            \"about\": \"Initializes the source code cache. If `create_heap_objects` is true, it initializes the cache with an empty fixed array from read-only roots. Otherwise, it sets the cache to a tagged fixed array.\",\n            \"logic\": \"Conditionally initializes the `cache_` member variable based on the `create_heap_objects` flag.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The current V8 isolate.\"\n                },\n                {\n                    \"name\": \"create_heap_objects\",\n                    \"type\": \"bool\",\n                    \"purpose\": \"Indicates whether heap objects should be created.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"ReadOnlyRoots\",\n                \"Tagged<FixedArray>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void SourceCodeCache::Initialize(Isolate* isolate, bool create_heap_objects) {\n            cache_ = create_heap_objects ? ReadOnlyRoots(isolate).empty_fixed_array()\n                                       : Tagged<FixedArray>();\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Iterate\",\n            \"parent\": \"SourceCodeCache\",\n            \"about\": \"Iterates over the source code cache, visiting each root pointer.\",\n            \"logic\": \"Uses the RootVisitor to visit the `cache_` member variable.\",\n            \"parameters\": [\n                {\n                    \"name\": \"v\",\n                    \"type\": \"RootVisitor*\",\n                    \"purpose\": \"The root visitor.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"RootVisitor\",\n                \"FullObjectSlot\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void SourceCodeCache::Iterate(RootVisitor* v) {\n            v->VisitRootPointer(Root::kExtensions, nullptr, FullObjectSlot(&cache_));\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Lookup\",\n            \"parent\": \"SourceCodeCache\",\n            \"about\": \"Looks up a shared function info by name in the source code cache.\",\n            \"logic\": \"Iterates through the cache, comparing the provided name with the names stored in the cache. If a match is found, the corresponding SharedFunctionInfo is returned.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The current V8 isolate.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"base::Vector<const char>\",\n                    \"purpose\": \"The name to look up.\"\n                },\n                {\n                    \"name\": \"handle\",\n                    \"type\": \"DirectHandle<SharedFunctionInfo>*\",\n                    \"purpose\": \"Output parameter to store the found SharedFunctionInfo.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the name is found, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"base::Vector\",\n                \"SharedFunctionInfo\",\n                \"FixedArray\",\n                \"SeqOneByteString\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            bool SourceCodeCache::Lookup(Isolate* isolate, base::Vector<const char> name,\n                                 DirectHandle<SharedFunctionInfo>* handle) {\n            for (int i = 0; i < cache_->length(); i += 2) {\n                Tagged<SeqOneByteString> str = Cast<SeqOneByteString>(cache_->get(i));\n                if (str->IsOneByteEqualTo(name)) {\n                *handle =\n                    direct_handle(Cast<SharedFunctionInfo>(cache_->get(i + 1)), isolate);\n                return true;\n                }\n            }\n            return false;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Add\",\n            \"parent\": \"SourceCodeCache\",\n            \"about\": \"Adds a SharedFunctionInfo to the source code cache.\",\n            \"logic\": \"Creates a new fixed array with increased size, copies the existing cache, and adds the new name and SharedFunctionInfo to the cache. Also sets the script type of the SharedFunctionInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The current V8 isolate.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"base::Vector<const char>\",\n                    \"purpose\": \"The name of the SharedFunctionInfo.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"DirectHandle<SharedFunctionInfo>\",\n                    \"purpose\": \"The SharedFunctionInfo to add.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"base::Vector\",\n                \"SharedFunctionInfo\",\n                \"Factory\",\n                \"HandleScope\",\n                \"FixedArray\",\n                \"String\",\n                \"Script\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void SourceCodeCache::Add(Isolate* isolate, base::Vector<const char> name,\n                              DirectHandle<SharedFunctionInfo> shared) {\n            Factory* factory = isolate->factory();\n            HandleScope scope(isolate);\n            int length = cache_->length();\n            DirectHandle<FixedArray> new_array =\n                factory->NewFixedArray(length + 2, AllocationType::kOld);\n            FixedArray::CopyElements(isolate, *new_array, 0, cache_, 0, cache_->length());\n            cache_ = *new_array;\n            DirectHandle<String> str =\n                factory\n                    ->NewStringFromOneByte(base::Vector<const uint8_t>::cast(name),\n                                         AllocationType::kOld)\n                    .ToHandleChecked();\n            DCHECK(!str.is_null());\n            cache_->set(length, *str);\n            cache_->set(length + 1, *shared);\n            Cast<Script>(shared->script())->set_type(type_);\n            }\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Bootstrapper\",\n            \"about\": \"Handles the bootstrapping process for a V8 isolate, including initializing extensions and creating the global environment.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The V8 isolate associated with this bootstrapper.\"\n                },\n                {\n                    \"name\": \"nesting_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Keeps track of the nesting level during bootstrapping.\"\n                },\n                {\n                    \"name\": \"extensions_cache_\",\n                    \"type\": \"SourceCodeCache\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The cache for extensions.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"SourceCodeCache\",\n                \"v8::ExtensionConfiguration\",\n                \"JSGlobalProxy\",\n                \"v8::ObjectTemplate\",\n                \"DeserializeEmbedderFieldsCallback\",\n                \"v8::MicrotaskQueue\",\n                \"NativeContext\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class Bootstrapper {\n            public:\n            Bootstrapper(Isolate* isolate);\n\n            void Initialize(bool create_heap_objects);\n            void InitializeOncePerProcess();\n            void TearDown();\n\n            DirectHandle<NativeContext> CreateEnvironment(\n                MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy,\n                v8::Local<v8::ObjectTemplate> global_proxy_template,\n                v8::ExtensionConfiguration* extensions, size_t context_snapshot_index,\n                DeserializeEmbedderFieldsCallback embedder_fields_deserializer,\n                v8::MicrotaskQueue* microtask_queue);\n\n            DirectHandle<JSGlobalProxy> NewRemoteContext(\n                MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy,\n                v8::Local<v8::ObjectTemplate> global_proxy_template);\n\n            void LogAllMaps();\n\n            void Iterate(RootVisitor* v);\n\n            private:\n            Isolate* isolate_;\n            int nesting_;\n            SourceCodeCache extensions_cache_;\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"constructor\",\n            \"name\": \"Bootstrapper\",\n            \"parent\": \"Bootstrapper\",\n            \"about\": \"Constructs a Bootstrapper object.\",\n            \"logic\": \"Initializes the bootstrapper with the provided isolate and sets the script type for extensions cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The current V8 isolate.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"Script::Type::kExtension\",\n                \"SourceCodeCache\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            Bootstrapper::Bootstrapper(Isolate* isolate)\n                : isolate_(isolate),\n                nesting_(0),\n                extensions_cache_(Script::Type::kExtension) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Initialize\",\n            \"parent\": \"Bootstrapper\",\n            \"about\": \"Initializes the extension cache.\",\n            \"logic\": \"Calls the Initialize method of the extensions_cache_ member.\",\n            \"parameters\": [\n                {\n                    \"name\": \"create_heap_objects\",\n                    \"type\": \"bool\",\n                    \"purpose\": \"Indicates whether heap objects should be created during initialization.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"SourceCodeCache\",\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void Bootstrapper::Initialize(bool create_heap_objects) {\n            extensions_cache_.Initialize(isolate_, create_heap_objects);\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"GCFunctionName\",\n            \"about\": \"Determines the name of the GC function based on a flag, returning 'gc' by default or the flag's value if set.\",\n            \"logic\": \"Checks if the `expose_gc_as` flag is given and non-empty. If so, the function returns the value of the flag; otherwise, it returns 'gc'.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"const char*\",\n                \"description\": \"The name of the GC function.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            static const char* GCFunctionName() {\n            bool flag_given =\n                v8_flags.expose_gc_as != nullptr && strlen(v8_flags.expose_gc_as) != 0;\n            return flag_given ? v8_flags.expose_gc_as : \"gc\";\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"isValidCpuTraceMarkFunctionName\",\n            \"about\": \"Checks if the CPU trace mark function name is valid based on a flag.\",\n            \"logic\": \"Checks if the `expose_cputracemark_as` flag is given and non-empty.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the CPU trace mark function name is valid, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            static bool isValidCpuTraceMarkFunctionName() {\n            return v8_flags.expose_cputracemark_as != nullptr &&\n                strlen(v8_flags.expose_cputracemark_as) != 0;\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"InitializeOncePerProcess\",\n            \"parent\": \"Bootstrapper\",\n            \"about\": \"Registers extensions used during V8's initialization that only need to be registered once per process.\",\n            \"logic\": \"Registers extensions such as GCExtension, FuzzilliExtension, ExternalizeStringExtension, StatisticsExtension, TriggerFailureExtension, IgnitionStatisticsExtension, CpuTraceMarkExtension, and VTuneDomainSupportExtension.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"v8::RegisterExtension\",\n                \"GCExtension\",\n                \"FuzzilliExtension\",\n                \"ExternalizeStringExtension\",\n                \"StatisticsExtension\",\n                \"TriggerFailureExtension\",\n                \"IgnitionStatisticsExtension\",\n                \"CpuTraceMarkExtension\",\n                \"VTuneDomainSupportExtension\",\n                \"GCFunctionName\",\n                \"isValidCpuTraceMarkFunctionName\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void Bootstrapper::InitializeOncePerProcess() {\n            v8::RegisterExtension(std::make_unique<GCExtension>(GCFunctionName()));\n            #ifdef V8_FUZZILLI\n            v8::RegisterExtension(std::make_unique<FuzzilliExtension>(\"fuzzilli\"));\n            #endif\n            v8::RegisterExtension(std::make_unique<ExternalizeStringExtension>());\n            v8::RegisterExtension(std::make_unique<StatisticsExtension>());\n            v8::RegisterExtension(std::make_unique<TriggerFailureExtension>());\n            v8::RegisterExtension(std::make_unique<IgnitionStatisticsExtension>());\n            if (isValidCpuTraceMarkFunctionName()) {\n                v8::RegisterExtension(std::make_unique<CpuTraceMarkExtension>(\n                    v8_flags.expose_cputracemark_as));\n            }\n            #ifdef ENABLE_VTUNE_TRACEMARK\n            v8::RegisterExtension(\n                std::make_unique<VTuneDomainSupportExtension>(\"vtunedomainmark\"));\n            #endif  // ENABLE_VTUNE_TRACEMARK\n            }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"TearDown\",\n            \"parent\": \"Bootstrapper\",\n            \"about\": \"Tears down the bootstrapper by initializing the extensions cache with `create_heap_objects` set to false.\",\n            \"logic\": \"Calls the Initialize method of the extensions_cache_ member with `create_heap_objects` set to false. This likely releases resources held by the extension cache.\",\n            \"parameters\": [],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"SourceCodeCache\",\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            void Bootstrapper::TearDown() {\n            extensions_cache_.Initialize(isolate_, false);  // Yes, symmetrical\n            }\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Genesis\",\n            \"about\": \"Creates the initial environment for a V8 isolate, including the native context and global objects.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The V8 isolate.\"\n                },\n                {\n                    \"name\": \"result_\",\n                    \"type\": \"DirectHandle<NativeContext>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The resulting native context.\"\n                },\n                {\n                    \"name\": \"native_context_\",\n                    \"type\": \"DirectHandle<NativeContext>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The internal native context.\"\n                },\n                {\n                    \"name\": \"global_proxy_\",\n                    \"type\": \"DirectHandle<JSGlobalProxy>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The global proxy object.\"\n                },\n                {\n                    \"name\": \"restricted_properties_thrower_\",\n                    \"type\": \"DirectHandle<JSFunction>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The %ThrowTypeError% function.\"\n                },\n                {\n                    \"name\": \"active_\",\n                    \"type\": \"BootstrapperActive\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Keeps track of if bootstrapper is active.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"JSGlobalProxy\",\n                \"v8::ObjectTemplate\",\n                \"DeserializeEmbedderFieldsCallback\",\n                \"v8::MicrotaskQueue\",\n                \"NativeContext\",\n                \"Factory\",\n                \"Builtins\",\n                \"Heap\",\n                \"JSFunction\",\n                \"JSGlobalObject\",\n                \"ObjectTemplateInfo\",\n                \"FunctionTemplateInfo\",\n                \"JSObject\",\n                \"String\",\n                \"Script\",\n                \"ScopeInfo\",\n                \"ScriptContextTable\",\n                \"Context\",\n                \"ExtensionConfiguration\",\n                \"v8::RegisteredExtension\",\n                \"Extension\",\n                \"ObjectTemplateInfo\",\n                \"JSArray\",\n                \"RegisteredExtension\",\n                \"base::HashMap\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class Genesis {\n            public:\n            Genesis(Isolate* isolate, MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy,\n                    v8::Local<v8::ObjectTemplate> global_proxy_template,\n                    size_t context_snapshot_index,\n                    DeserializeEmbedderFieldsCallback embedder_fields_deserializer,\n                    v8::MicrotaskQueue* microtask_queue);\n            Genesis(Isolate* isolate, MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy,\n                    v8::Local<v8::ObjectTemplate> global_proxy_template);\n            ~Genesis() = default;\n\n            Isolate* isolate() const { return isolate_; }\n            Factory* factory() const { return isolate_->factory(); }\n            Builtins* builtins() const { return isolate_->builtins(); }\n            Heap* heap() const { return isolate_->heap(); }\n\n            DirectHandle<NativeContext> result() { return result_; }\n\n            DirectHandle<JSGlobalProxy> global_proxy() { return global_proxy_; }\n\n            private:\n            DirectHandle<NativeContext> native_context() { return native_context_; }\n\n            // Creates some basic objects. Used for creating a context from scratch.\n            void CreateRoots();\n            // Creates the empty function.  Used for creating a context from scratch.\n            DirectHandle<JSFunction> CreateEmptyFunction();\n            // Returns the %ThrowTypeError% intrinsic function.\n            // See ES#sec-%throwtypeerror% for details.\n            DirectHandle<JSFunction> GetThrowTypeErrorIntrinsic();\n\n            void CreateSloppyModeFunctionMaps(DirectHandle<JSFunction> empty);\n            void CreateStrictModeFunctionMaps(DirectHandle<JSFunction> empty);\n            void CreateObjectFunction(DirectHandle<JSFunction> empty);\n            void CreateIteratorMaps(DirectHandle<JSFunction> empty);\n            void CreateAsyncIteratorMaps(DirectHandle<JSFunction> empty);\n            void CreateAsyncFunctionMaps(DirectHandle<JSFunction> empty);\n            void CreateJSProxyMaps();\n\n            // Make the \"arguments\" and \"caller\" properties throw a TypeError on access.\n            void AddRestrictedFunctionProperties(DirectHandle<JSFunction> empty);\n\n            // Creates the global objects using the global proxy and the template passed\n            // in through the API.  We call this regardless of whether we are building a\n            // context from scratch or using a deserialized one from the context snapshot\n            // but in the latter case we don't use the objects it produces directly, as\n            // we have to use the deserialized ones that are linked together with the\n            // rest of the context snapshot. At the end we link the global proxy and the\n            // context to each other.\n            DirectHandle<JSGlobalObject> CreateNewGlobals(\n                v8::Local<v8::ObjectTemplate> global_proxy_template,\n                DirectHandle<JSGlobalProxy> global_proxy);\n            // Similarly, we want to use the global that has been created by the templates\n            // passed through the API.  The global from the snapshot is detached from the\n            // other objects in the snapshot.\n            void HookUpGlobalObject(DirectHandle<JSGlobalObject> global_object);\n            // Hooks the given global proxy into the context in the case we do not\n            // replace the global object from the deserialized native context.\n            void HookUpGlobalProxy(DirectHandle<JSGlobalProxy> global_proxy);\n            // The native context has a ScriptContextTable that store declarative bindings\n            // made in script scopes.  Add a \"this\" binding to that table pointing to the\n            // global proxy.\n            void InstallGlobalThisBinding();\n            // New context initialization.  Used for creating a context from scratch.\n            void InitializeGlobal(DirectHandle<JSGlobalObject> global_object,\n                                DirectHandle<JSFunction> empty_function);\n            void InitializeExperimentalGlobal();\n            void InitializeIteratorFunctions();\n            void InitializeCallSiteBuiltins();\n            void InitializeConsole(DirectHandle<JSObject> extras_binding);\n\n        #define DECLARE_FEATURE_INITIALIZATION(id, descr) void InitializeGlobal_##id();\n\n            HARMONY_INPROGRESS(DECLARE_FEATURE_INITIALIZATION)\n            JAVASCRIPT_INPROGRESS_FEATURES(DECLARE_FEATURE_INITIALIZATION)\n            HARMONY_STAGED(DECLARE_FEATURE_INITIALIZATION)\n            JAVASCRIPT_STAGED_FEATURES(DECLARE_FEATURE_INITIALIZATION)\n            HARMONY_SHIPPING(DECLARE_FEATURE_INITIALIZATION)\n            JAVASCRIPT_SHIPPING_FEATURES(DECLARE_FEATURE_INITIALIZATION)\n        #undef DECLARE_FEATURE_INITIALIZATION\n            void InitializeGlobal_regexp_linear_flag();\n            void InitializeGlobal_sharedarraybuffer();\n        #if V8_ENABLE_WEBASSEMBLY\n            void InitializeWasmJSPI();\n        #endif\n\n            enum ArrayBufferKind { ARRAY_BUFFER, SHARED_ARRAY_BUFFER };\n            DirectHandle<JSFunction> CreateArrayBuffer(DirectHandle<String> name,\n                                                 ArrayBufferKind array_buffer_kind);\n\n            bool InstallABunchOfRandomThings();\n            bool InstallExtrasBindings();\n\n            DirectHandle<JSFunction> InstallTypedArray(const char* name,\n                                                 ElementsKind elements_kind,\n                                                 InstanceType constructor_type,\n                                                 int rab_gsab_initial_map_index);\n            void InitializeMapCaches();\n\n            enum ExtensionTraversalState { UNVISITED, VISITED, INSTALLED };\n\n            class ExtensionStates {\n            public:\n                ExtensionStates();\n                ExtensionStates(const ExtensionStates&) = delete;\n                ExtensionStates& operator=(const ExtensionStates&) = delete;\n                ExtensionTraversalState get_state(RegisteredExtension* extension);\n                void set_state(RegisteredExtension* extension,\n                               ExtensionTraversalState state);\n\n            private:\n                base::HashMap map_;\n            };\n\n            // Used both for deserialized and from-scratch contexts to add the extensions\n            // provided.\n            static bool InstallExtensions(Isolate* isolate,\n                                        DirectHandle<Context> native_context,\n                                        v8::ExtensionConfiguration* extensions);\n            static bool InstallAutoExtensions(Isolate* isolate,\n                                                ExtensionStates* extension_states);\n            static bool InstallRequestedExtensions(Isolate* isolate,\n                                                    v8::ExtensionConfiguration* extensions,\n                                                    ExtensionStates* extension_states);\n            static bool InstallExtension(Isolate* isolate, const char* name,\n                                        ExtensionStates* extension_states);\n            static bool InstallExtension(Isolate* isolate,\n                                        v8::RegisteredExtension* current,\n                                        ExtensionStates* extension_states);\n            static bool InstallSpecialObjects(Isolate* isolate,\n                                                DirectHandle<NativeContext> native_context);\n            bool ConfigureApiObject(DirectHandle<JSObject> object,\n                                    DirectHandle<ObjectTemplateInfo> object_template);\n            bool ConfigureGlobalObject(\n                v8::Local<v8::ObjectTemplate> global_proxy_template);\n\n            // Migrates all properties from the 'from' object to the 'to'\n            // object and overrides the prototype in 'to' with the one from\n            // 'from'.\n            void TransferObject(DirectHandle<JSObject> from, DirectHandle<JSObject> to);\n            void TransferNamedProperties(DirectHandle<JSObject> from,\n                                        DirectHandle<JSObject> to);\n            void TransferIndexedProperties(DirectHandle<JSObject> from,\n                                            DirectHandle<JSObject> to);\n\n            DirectHandle<Map> CreateInitialMapForArraySubclass(int size,\n                                                                int inobject_properties);\n\n            static bool CompileExtension(Isolate* isolate, v8::Extension* extension);\n\n            Isolate* isolate_;\n            DirectHandle<NativeContext> result_;\n            DirectHandle<NativeContext> native_context_;\n            DirectHandle<JSGlobalProxy> global_proxy_;\n\n            // %ThrowTypeError%. See ES#sec-%throwtypeerror% for details.\n            DirectHandle<JSFunction> restricted_properties_thrower_;\n\n            BootstrapperActive active_;\n            friend class Bootstrapper;\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"constructor\",\n            \"name\": \"Genesis\",\n            \"parent\": \"Genesis\",\n            \"about\": \"Constructs a Genesis object. Used when creating a new context.\",\n            \"logic\": \"Sets up the isolate,"
}