{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/js-generic-lowering-reducer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 177, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/js-generic-lowering-reducer.h\",\n            \"file_name\": \"js-generic-lowering-reducer.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the JSGenericLoweringReducer class, which lowers JS operators to generic builtin calls in the Turboshaft compiler pipeline.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for compiler globals, Turboshaft assembler, index, and operations.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/globals.h\"\n#include \"src/compiler/turboshaft/assembler.h\"\n#include \"src/compiler/turboshaft/index.h\"\n#include \"src/compiler/turboshaft/operations.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSGenericLoweringReducer\",\n                \"extends\": \"Next\",\n                \"about\": \"Reduces JS operators to generic builtin calls.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"isolate_\",\n                        \"type\": \"Isolate*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the Isolate, providing access to the V8 isolate.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Next\",\n                    \"GenericBinop\",\n                    \"GenericUnop\",\n                    \"ToNumberOrNumeric\",\n                    \"ObjectIsOp\",\n                    \"Label\",\n                    \"Object\",\n                    \"FrameState\",\n                    \"Context\",\n                    \"GenericBinopOp\",\n                    \"GenericUnopOp\",\n                    \"LazyDeoptOnThrow\",\n                    \"Isolate\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <class Next>\nclass JSGenericLoweringReducer : public Next {\n public:\n  TURBOSHAFT_REDUCER_BOILERPLATE(JSGenericLowering)\n\n  V<Object> REDUCE(GenericBinop)(V<Object> left, V<Object> right,\n                                 V<FrameState> frame_state, V<Context> context,\n                                 GenericBinopOp::Kind kind,\n                                 LazyDeoptOnThrow lazy_deopt_on_throw) {\n    // Note that we're **not** calling the __WithFeedback variants of the\n    // generic builtins, on purpose. There have been several experiments with\n    // this in the past, and we always concluded that it wasn't worth it. The\n    // latest experiment was ended with this commit:\n    // https://crrev.com/c/4110858.\n    switch (kind) {\n#define CASE(Name)                                                            \\\n  case GenericBinopOp::Kind::k##Name:                                         \\\n    return __ CallBuiltin_##Name(isolate_, frame_state, context, left, right, \\\n                                 lazy_deopt_on_throw);\n      GENERIC_BINOP_LIST(CASE)\n#undef CASE\n    }\n  }\n\n  V<Object> REDUCE(GenericUnop)(V<Object> input, V<FrameState> frame_state,\n                                V<Context> context, GenericUnopOp::Kind kind,\n                                LazyDeoptOnThrow lazy_deopt_on_throw) {\n    switch (kind) {\n#define CASE(Name)                                                      \\\n  case GenericUnopOp::Kind::k##Name:                                    \\\n    return __ CallBuiltin_##Name(isolate_, frame_state, context, input, \\\n                                 lazy_deopt_on_throw);\n      GENERIC_UNOP_LIST(CASE)\n#undef CASE\n    }\n  }\n\n  OpIndex REDUCE(ToNumberOrNumeric)(V<Object> input, V<FrameState> frame_state,\n                                    V<Context> context, Object::Conversion kind,\n                                    LazyDeoptOnThrow lazy_deopt_on_throw) {\n    Label<Object> done(this);\n    // Avoid builtin call for Smis and HeapNumbers.\n    GOTO_IF(__ ObjectIs(input, ObjectIsOp::Kind::kNumber,\n                        ObjectIsOp::InputAssumptions::kNone),\n            done, input);\n    switch (kind) {\n      case Object::Conversion::kToNumber:\n        GOTO(done, __ CallBuiltin_ToNumber(isolate_, frame_state, context,\n                                           input, lazy_deopt_on_throw));\n        break;\n      case Object::Conversion::kToNumeric:\n        GOTO(done, __ CallBuiltin_ToNumeric(isolate_, frame_state, context,\n                                            input, lazy_deopt_on_throw));\n        break;\n    }\n    BIND(done, result);\n    return result;\n  }\n\n private:\n  Isolate* isolate_ = __ data() -> isolate();\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"REDUCE(GenericBinop)\",\n                \"parent\": \"JSGenericLoweringReducer\",\n                \"about\": \"Reduces a generic binary operation to a builtin call.\",\n                \"logic\": \"Selects the appropriate builtin based on the kind of binary operation and calls it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"left\",\n                        \"type\": \"V<Object>\",\n                        \"purpose\": \"The left operand.\"\n                    },\n                    {\n                        \"name\": \"right\",\n                        \"type\": \"V<Object>\",\n                        \"purpose\": \"The right operand.\"\n                    },\n                    {\n                        \"name\": \"frame_state\",\n                        \"type\": \"V<FrameState>\",\n                        \"purpose\": \"The frame state for deoptimization.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"V<Context>\",\n                        \"purpose\": \"The context for the builtin call.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"GenericBinopOp::Kind\",\n                        \"purpose\": \"The kind of generic binary operation.\"\n                    },\n                    {\n                        \"name\": \"lazy_deopt_on_throw\",\n                        \"type\": \"LazyDeoptOnThrow\",\n                        \"purpose\": \"Indicates whether to lazily deoptimize on exceptions.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"V<Object>\",\n                    \"description\": \"The result of the builtin call.\"\n                },\n                \"dependencies\": [\n                    \"V\",\n                    \"Object\",\n                    \"FrameState\",\n                    \"Context\",\n                    \"GenericBinopOp\",\n                    \"LazyDeoptOnThrow\",\n                    \"GENERIC_BINOP_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  V<Object> REDUCE(GenericBinop)(V<Object> left, V<Object> right,\n                                 V<FrameState> frame_state, V<Context> context,\n                                 GenericBinopOp::Kind kind,\n                                 LazyDeoptOnThrow lazy_deopt_on_throw) {\n    // Note that we're **not** calling the __WithFeedback variants of the\n    // generic builtins, on purpose. There have been several experiments with\n    // this in the past, and we always concluded that it wasn't worth it. The\n    // latest experiment was ended with this commit:\n    // https://crrev.com/c/4110858.\n    switch (kind) {\n#define CASE(Name)                                                            \\\n  case GenericBinopOp::Kind::k##Name:                                         \\\n    return __ CallBuiltin_##Name(isolate_, frame_state, context, left, right, \\\n                                 lazy_deopt_on_throw);\n      GENERIC_BINOP_LIST(CASE)\n#undef CASE\n    }\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"REDUCE(GenericUnop)\",\n                \"parent\": \"JSGenericLoweringReducer\",\n                \"about\": \"Reduces a generic unary operation to a builtin call.\",\n                \"logic\": \"Selects the appropriate builtin based on the kind of unary operation and calls it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"input\",\n                        \"type\": \"V<Object>\",\n                        \"purpose\": \"The input operand.\"\n                    },\n                    {\n                        \"name\": \"frame_state\",\n                        \"type\": \"V<FrameState>\",\n                        \"purpose\": \"The frame state for deoptimization.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"V<Context>\",\n                        \"purpose\": \"The context for the builtin call.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"GenericUnopOp::Kind\",\n                        \"purpose\": \"The kind of generic unary operation.\"\n                    },\n                    {\n                        \"name\": \"lazy_deopt_on_throw\",\n                        \"type\": \"LazyDeoptOnThrow\",\n                        \"purpose\": \"Indicates whether to lazily deoptimize on exceptions.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"V<Object>\",\n                    \"description\": \"The result of the builtin call.\"\n                },\n                \"dependencies\": [\n                    \"V\",\n                    \"Object\",\n                    \"FrameState\",\n                    \"Context\",\n                    \"GenericUnopOp\",\n                    \"LazyDeoptOnThrow\",\n                    \"GENERIC_UNOP_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  V<Object> REDUCE(GenericUnop)(V<Object> input, V<FrameState> frame_state,\n                                V<Context> context, GenericUnopOp::Kind kind,\n                                LazyDeoptOnThrow lazy_deopt_on_throw) {\n    switch (kind) {\n#define CASE(Name)                                                      \\\n  case GenericUnopOp::Kind::k##Name:                                    \\\n    return __ CallBuiltin_##Name(isolate_, frame_state, context, input, \\\n                                 lazy_deopt_on_throw);\n      GENERIC_UNOP_LIST(CASE)\n#undef CASE\n    }\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"REDUCE(ToNumberOrNumeric)\",\n                \"parent\": \"JSGenericLoweringReducer\",\n                \"about\": \"Reduces a ToNumberOrNumeric operation to a builtin call.\",\n                \"logic\": \"If the input is already a Number (Smi or HeapNumber), returns the input. Otherwise calls the appropriate ToNumber or ToNumeric builtin.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"input\",\n                        \"type\": \"V<Object>\",\n                        \"purpose\": \"The input object.\"\n                    },\n                    {\n                        \"name\": \"frame_state\",\n                        \"type\": \"V<FrameState>\",\n                        \"purpose\": \"The frame state for deoptimization.\"\n                    },\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"V<Context>\",\n                        \"purpose\": \"The context for the builtin call.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"Object::Conversion\",\n                        \"purpose\": \"The kind of conversion (ToNumber or ToNumeric).\"\n                    },\n                    {\n                        \"name\": \"lazy_deopt_on_throw\",\n                        \"type\": \"LazyDeoptOnThrow\",\n                        \"purpose\": \"Indicates whether to lazily deoptimize on exceptions.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"OpIndex\",\n                    \"description\": \"The result of the conversion (either the original object or the result of the builtin call).\"\n                },\n                \"dependencies\": [\n                    \"V\",\n                    \"Object\",\n                    \"FrameState\",\n                    \"Context\",\n                    \"LazyDeoptOnThrow\",\n                    \"ObjectIsOp\",\n                    \"Label\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  OpIndex REDUCE(ToNumberOrNumeric)(V<Object> input, V<FrameState> frame_state,\n                                    V<Context> context, Object::Conversion kind,\n                                    LazyDeoptOnThrow lazy_deopt_on_throw) {\n    Label<Object> done(this);\n    // Avoid builtin call for Smis and HeapNumbers.\n    GOTO_IF(__ ObjectIs(input, ObjectIsOp::Kind::kNumber,\n                        ObjectIsOp::InputAssumptions::kNone),\n            done, input);\n    switch (kind) {\n      case Object::Conversion::kToNumber:\n        GOTO(done, __ CallBuiltin_ToNumber(isolate_, frame_state, context,\n                                           input, lazy_deopt_on_throw));\n        break;\n      case Object::Conversion::kToNumeric:\n        GOTO(done, __ CallBuiltin_ToNumeric(isolate_, frame_state, context,\n                                            input, lazy_deopt_on_throw));\n        break;\n    }\n    BIND(done, result);\n    return result;\n  }\n        ]]></code>\n    </func>\n</file>\n```"
}