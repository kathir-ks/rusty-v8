{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/representation-change.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 82, column 62",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/representation-change.h\",\n            \"file_name\": \"representation-change.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the RepresentationChanger class, which handles representation changes of values during compilation and lowering of Simplified operators to Machine operators in the V8 JavaScript engine.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for feedback sources, JSGraph, Simplified operators, and use information.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/feedback-source.h\"\n#include \"src/compiler/js-graph.h\"\n#include \"src/compiler/simplified-operator.h\"\n#include \"src/compiler/use-info.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RepresentationChanger\",\n                \"about\": \"Handles representation changes for constants and other nodes, and lowers Simplified operators to Machine operators.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"cache_\",\n                        \"type\": \"TypeCache const*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cache for types.\"\n                    },\n                    {\n                        \"name\": \"jsgraph_\",\n                        \"type\": \"JSGraph*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the JSGraph object.\"\n                    },\n                    {\n                        \"name\": \"broker_\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the JSHeapBroker object.\"\n                    },\n                    {\n                        \"name\": \"verifier_\",\n                        \"type\": \"SimplifiedLoweringVerifier*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the SimplifiedLoweringVerifier object for verification.\"\n                    },\n                    {\n                        \"name\": \"testing_type_errors_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Flag indicating whether to ignore type errors during testing.\"\n                    },\n                    {\n                        \"name\": \"type_error_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Flag indicating whether a type error has been detected.\"\n                    },\n                    {\n                        \"name\": \"ieee754_fp16_raw_bits_to_fp32_raw_bits_code_\",\n                        \"type\": \"SetOncePointer<Node>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cached Node for converting IEEE754 FP16 raw bits to FP32 raw bits.\"\n                    },\n                    {\n                        \"name\": \"ieee754_fp64_to_fp16_raw_bits_code_\",\n                        \"type\": \"SetOncePointer<Node>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cached Node for converting IEEE754 FP64 to FP16 raw bits.\"\n                    },\n                    {\n                        \"name\": \"ieee754_fp16_raw_bits_to_fp32_raw_bits_operator_\",\n                        \"type\": \"SetOncePointer<Operator const>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cached Operator for converting IEEE754 FP16 raw bits to FP32 raw bits.\"\n                    },\n                    {\n                        \"name\": \"ieee754_fp64_to_fp16_raw_bits_operator_\",\n                        \"type\": \"SetOncePointer<Operator const>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Cached Operator for converting IEEE754 FP64 to FP16 raw bits.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"JSGraph\",\n                    \"JSHeapBroker\",\n                    \"SimplifiedLoweringVerifier\",\n                    \"TypeCache\",\n                    \"SetOncePointer\",\n                    \"Node\",\n                    \"Operator\",\n                    \"IrOpcode\",\n                    \"MachineType\",\n                    \"FieldAccess\",\n                    \"ElementAccess\",\n                    \"Type\",\n                    \"UseInfo\",\n                    \"SimplifiedOperatorBuilder\",\n                    \"MachineOperatorBuilder\",\n                    \"Factory\",\n                    \"Isolate\",\n                    \"FeedbackSource\",\n                    \"DeoptimizeReason\",\n                    \"CheckForMinusZeroMode\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE RepresentationChanger final {\n public:\n  RepresentationChanger(JSGraph* jsgraph, JSHeapBroker* broker,\n                        SimplifiedLoweringVerifier* verifier);\n\n  // Changes representation from {output_type} to {use_rep}. The {truncation}\n  // parameter is only used for checking - if the changer cannot figure\n  // out signedness for the word32->float64 conversion, then we check that the\n  // uses truncate to word32 (so they do not care about signedness).\n  Node* GetRepresentationFor(Node* node, MachineRepresentation output_rep,\n                             Type output_type, Node* use_node,\n                             UseInfo use_info);\n  const Operator* Int32OperatorFor(IrOpcode::Value opcode);\n  const Operator* Int32OverflowOperatorFor(IrOpcode::Value opcode);\n  const Operator* AdditiveSafeIntegerOverflowOperatorFor(\n      IrOpcode::Value opcode);\n  const Operator* Int64OperatorFor(IrOpcode::Value opcode);\n  const Operator* Int64OverflowOperatorFor(IrOpcode::Value opcode);\n  const Operator* BigIntOperatorFor(IrOpcode::Value opcode);\n  const Operator* TaggedSignedOperatorFor(IrOpcode::Value opcode);\n  const Operator* Uint32OperatorFor(IrOpcode::Value opcode);\n  const Operator* Uint32OverflowOperatorFor(IrOpcode::Value opcode);\n  const Operator* Float64OperatorFor(IrOpcode::Value opcode);\n\n  MachineType TypeForBasePointer(const FieldAccess& access) {\n    return access.tag() != 0 ? MachineType::AnyTagged()\n                             : MachineType::Pointer();\n  }\n\n  MachineType TypeForBasePointer(const ElementAccess& access) {\n    return access.tag() != 0 ? MachineType::AnyTagged()\n                             : MachineType::Pointer();\n  }\n\n  bool verification_enabled() const { return verifier_ != nullptr; }\n\n private:\n  TypeCache const* cache_;\n  JSGraph* jsgraph_;\n  JSHeapBroker* broker_;\n  SimplifiedLoweringVerifier* verifier_;\n\n  friend class RepresentationChangerTester;  // accesses the below fields.\n\n  bool testing_type_errors_;  // If {true}, don't abort on a type error.\n  bool type_error_;           // Set when a type error is detected.\n\n  SetOncePointer<Node> ieee754_fp16_raw_bits_to_fp32_raw_bits_code_;\n  SetOncePointer<Node> ieee754_fp64_to_fp16_raw_bits_code_;\n  SetOncePointer<Operator const>\n      ieee754_fp16_raw_bits_to_fp32_raw_bits_operator_;\n  SetOncePointer<Operator const> ieee754_fp64_to_fp16_raw_bits_operator_;\n\n  Node* GetTaggedSignedRepresentationFor(Node* node,\n                                         MachineRepresentation output_rep,\n                                         Type output_type, Node* use_node,\n                                         UseInfo use_info);\n  Node* GetTaggedPointerRepresentationFor(Node* node,\n                                          MachineRepresentation output_rep,\n                                          Type output_type, Node* use_node,\n                                          UseInfo use_info);\n  Node* GetTaggedRepresentationFor(Node* node, MachineRepresentation output_rep,\n                                   Type output_type, Truncation truncation);\n  Node* GetFloat16RawBitsRepresentationFor(Node* node,\n                                           MachineRepresentation output_rep,\n                                           Type output_type, Node* use_node,\n                                           UseInfo use_info);\n  Node* GetFloat32RepresentationFor(Node* node,\n                                    MachineRepresentation output_rep,\n                                    Type output_type, Truncation truncation);\n  Node* GetFloat64RepresentationFor(Node* node,\n                                    MachineRepresentation output_rep,\n                                    Type output_type, Node* use_node,\n                                    UseInfo use_info);\n  Node* GetWord32RepresentationFor(Node* node, MachineRepresentation output_rep,\n                                   Type output_type, Node* use_node,\n                                   UseInfo use_info);\n  Node* GetBitRepresentationFor(Node* node, MachineRepresentation output_rep,\n                                Type output_type);\n  Node* GetWord64RepresentationFor(Node* node, MachineRepresentation output_rep,\n                                   Type output_type, Node* use_node,\n                                   UseInfo use_info);\n  Node* TypeError(Node* node, MachineRepresentation output_rep,\n                  Type output_type, MachineRepresentation use);\n  Node* MakeTruncatedInt32Constant(double value);\n  Node* InsertChangeBitToTagged(Node* node);\n  Node* InsertChangeFloat32ToFloat64(Node* node);\n  Node* InsertChangeFloat64ToInt32(Node* node);\n  Node* InsertChangeFloat64ToUint32(Node* node);\n  Node* InsertChangeInt32ToFloat64(Node* node);\n  Node* InsertChangeTaggedSignedToInt32(Node* node);\n  Node* InsertChangeTaggedToFloat64(Node* node);\n  Node* InsertChangeUint32ToFloat64(Node* node);\n  Node* InsertCheckedFloat64ToInt32(Node* node, CheckForMinusZeroMode check,\n                                    const FeedbackSource& feedback,\n                                    Node* use_node);\n  Node* InsertChangeFloat16RawBitsToFloat64Fallback(Node* node);\n  Node* InsertTruncateFloat64ToFloat16RawBitsFallback(Node* node);\n  Node* InsertConversion(Node* node, const Operator* op, Node* use_node);\n  Node* InsertTruncateInt64ToInt32(Node* node);\n  Node* InsertUnconditionalDeopt(Node* node, DeoptimizeReason reason,\n                                 const FeedbackSource& feedback = {});\n  Node* InsertTypeOverrideForVerifier(const Type& type, Node* node);\n\n  Node* Ieee754Fp16RawBitsToFp32RawBitsCode();\n  Node* Ieee754Fp64ToFp16RawBitsCode();\n  Operator const* Ieee754Fp16RawBitsToFp32RawBitsOperator();\n  Operator const* Ieee754Fp64ToFp16RawBitsOperator();\n\n  JSGraph* jsgraph() const { return jsgraph_; }\n  Isolate* isolate() const;\n  Factory* factory() const { return isolate()->factory(); }\n  SimplifiedOperatorBuilder* simplified() { return jsgraph()->simplified(); }\n  MachineOperatorBuilder* machine() { return jsgraph()->machine(); }\n};\n        ]]></code>\n    </class>\n</file>\n```"
}