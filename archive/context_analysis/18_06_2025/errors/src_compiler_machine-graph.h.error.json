{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/machine-graph.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 63, column 51",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/machine-graph.h\",\n            \"file_name\": \"machine-graph.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the MachineGraph class, a facade on a TFGraph (Turbofan Graph) that enhances it with machine-specific operations and a constant cache.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for base utilities, global definitions, compiler components (common nodes, operators, machine operators, node aux data), the turbofan graph, and runtime functions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/base/compiler-specific.h\"\n#include \"src/common/globals.h\"\n#include \"src/compiler/common-node-cache.h\"\n#include \"src/compiler/common-operator.h\"\n#include \"src/compiler/machine-operator.h\"\n#include \"src/compiler/node-aux-data.h\"\n#include \"src/compiler/turbofan-graph.h\"\n#include \"src/runtime/runtime.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"MachineGraph\",\n                \"extends\": \"NON_EXPORTED_BASE(ZoneObject)\",\n                \"about\": \"A facade on a TFGraph that enhances the graph with machine-specific notions, including a builder for common and machine operators, as well as caching primitive constants.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"graph_\",\n                        \"type\": \"TFGraph*\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"The underlying Turbofan graph.\"\n                    },\n                    {\n                        \"name\": \"common_\",\n                        \"type\": \"CommonOperatorBuilder*\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"Builder for common operators.\"\n                    },\n                    {\n                        \"name\": \"machine_\",\n                        \"type\": \"MachineOperatorBuilder*\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"Builder for machine-specific operators.\"\n                    },\n                    {\n                        \"name\": \"cache_\",\n                        \"type\": \"CommonNodeCache\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"Cache for common nodes to avoid duplication.\"\n                    },\n                    {\n                        \"name\": \"call_counts_\",\n                        \"type\": \"NodeAuxDataMap<int, -1>\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"Stores call count information for nodes.\"\n                    },\n                    {\n                        \"name\": \"Dead_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"Global cache of the dead node.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"TFGraph\",\n                    \"CommonOperatorBuilder\",\n                    \"MachineOperatorBuilder\",\n                    \"CommonNodeCache\",\n                    \"NodeAuxDataMap\",\n                    \"ZoneObject\",\n                    \"Node\",\n                    \"ExternalReference\",\n                    \"Runtime\",\n                    \"Builtin\",\n                    \"RelocInfo\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE MachineGraph : public NON_EXPORTED_BASE(ZoneObject) {\n public:\n  MachineGraph(TFGraph* graph, CommonOperatorBuilder* common,\n               MachineOperatorBuilder* machine)\n      : graph_(graph),\n        common_(common),\n        machine_(machine),\n        cache_(zone()),\n        call_counts_(zone()) {}\n  MachineGraph(const MachineGraph&) = delete;\n  MachineGraph& operator=(const MachineGraph&) = delete;\n\n  // Creates a new (unique) Int32Constant node.\n  Node* UniqueInt32Constant(int32_t value);\n\n  Node* UniqueInt64Constant(int64_t value);\n\n  // Creates an Int32Constant node, usually canonicalized.\n  Node* Int32Constant(int32_t value);\n  Node* Uint32Constant(uint32_t value) {\n    return Int32Constant(base::bit_cast<int32_t>(value));\n  }\n\n  // Creates a Int64Constant node, usually canonicalized.\n  Node* Int64Constant(int64_t value);\n  Node* Uint64Constant(uint64_t value) {\n    return Int64Constant(base::bit_cast<int64_t>(value));\n  }\n\n  // Creates an Int32Constant/Int64Constant node, depending on the word size of\n  // the target machine.\n  // TODO(turbofan): Code using Int32Constant/Int64Constant to store pointer\n  // constants is probably not serializable.\n  Node* IntPtrConstant(intptr_t value);\n  Node* UintPtrConstant(uintptr_t value);\n  Node* UniqueIntPtrConstant(intptr_t value);\n\n  Node* TaggedIndexConstant(intptr_t value);\n\n  Node* RelocatableInt32Constant(int32_t value, RelocInfo::Mode rmode);\n  Node* RelocatableInt64Constant(int64_t value, RelocInfo::Mode rmode);\n  Node* RelocatableIntPtrConstant(intptr_t value, RelocInfo::Mode rmode);\n  Node* RelocatableWasmBuiltinCallTarget(Builtin builtin);\n\n  // Creates a Float32Constant node, usually canonicalized.\n  Node* Float32Constant(float value);\n\n  // Creates a Float64Constant node, usually canonicalized.\n  Node* Float64Constant(double value);\n\n  // Creates a PointerConstant node.\n  Node* PointerConstant(intptr_t value);\n  template <typename T>\n  Node* PointerConstant(T* value) {\n    return PointerConstant(reinterpret_cast<intptr_t>(value));\n  }\n\n  // Creates an ExternalConstant node, usually canonicalized.\n  Node* ExternalConstant(ExternalReference ref);\n  Node* ExternalConstant(Runtime::FunctionId function_id);\n\n  // Global cache of the dead node.\n  Node* Dead() {\n    return Dead_ ? Dead_ : Dead_ = graph_->NewNode(common_->Dead());\n  }\n\n  // Store and retrieve call count information.\n  void StoreCallCount(NodeId call_id, int count) {\n    call_counts_.Put(call_id, count);\n  }\n  int GetCallCount(NodeId call_id) { return call_counts_.Get(call_id); }\n  // Use this to keep the number of map rehashings to a minimum.\n  void ReserveCallCounts(size_t num_call_instructions) {\n    call_counts_.Reserve(num_call_instructions);\n  }\n\n  CommonOperatorBuilder* common() const { return common_; }\n  MachineOperatorBuilder* machine() const { return machine_; }\n  TFGraph* graph() const { return graph_; }\n  Zone* zone() const { return graph()->zone(); }\n\n protected:\n  TFGraph* graph_;\n  CommonOperatorBuilder* common_;\n  MachineOperatorBuilder* machine_;\n  CommonNodeCache cache_;\n  NodeAuxDataMap<int, -1> call_counts_;\n  Node* Dead_ = nullptr;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"UniqueInt32Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a new (unique) Int32Constant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"int32_t\",\n                        \"purpose\": \"The integer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Int32Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* UniqueInt32Constant(int32_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"UniqueInt64Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a new (unique) Int64Constant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"int64_t\",\n                        \"purpose\": \"The integer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Int64Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* UniqueInt64Constant(int64_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Int32Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an Int32Constant node, usually canonicalized.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"int32_t\",\n                        \"purpose\": \"The integer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Int32Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* Int32Constant(int32_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Uint32Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an Int32Constant node from a uint32_t, usually canonicalized. Uses bit_cast to reinterpret the bits.\",\n                \"logic\": \"Uses base::bit_cast to treat the uint32_t as an int32_t without changing the underlying bit pattern.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"The unsigned integer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Int32Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"Int32Constant\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* Uint32Constant(uint32_t value) {\n    return Int32Constant(base::bit_cast<int32_t>(value));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Int64Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an Int64Constant node, usually canonicalized.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"int64_t\",\n                        \"purpose\": \"The integer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Int64Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* Int64Constant(int64_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Uint64Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an Int64Constant node from a uint64_t, usually canonicalized. Uses bit_cast to reinterpret the bits.\",\n                \"logic\": \"Uses base::bit_cast to treat the uint64_t as an int64_t without changing the underlying bit pattern.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"uint64_t\",\n                        \"purpose\": \"The unsigned integer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Int64Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"Int64Constant\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* Uint64Constant(uint64_t value) {\n    return Int64Constant(base::bit_cast<int64_t>(value));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IntPtrConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an Int32Constant/Int64Constant node, depending on the word size of the target machine.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The integer value for the constant (machine-word sized).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* IntPtrConstant(intptr_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"UintPtrConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an Int32Constant/Int64Constant node, depending on the word size of the target machine, from a uintptr_t.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"uintptr_t\",\n                        \"purpose\": \"The unsigned integer value for the constant (machine-word sized).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"IntPtrConstant\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* UintPtrConstant(uintptr_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"UniqueIntPtrConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a new (unique) Int32Constant/Int64Constant node, depending on the word size of the target machine.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The integer value for the constant (machine-word sized).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* UniqueIntPtrConstant(intptr_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TaggedIndexConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a TaggedIndexConstant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The integer value for the constant (machine-word sized).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created TaggedIndexConstant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* TaggedIndexConstant(intptr_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"RelocatableInt32Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a relocatable Int32Constant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"int32_t\",\n                        \"purpose\": \"The integer value for the constant.\"\n                    },\n                    {\n                        \"name\": \"rmode\",\n                        \"type\": \"RelocInfo::Mode\",\n                        \"purpose\": \"The relocation mode for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created relocatable Int32Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"RelocInfo\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* RelocatableInt32Constant(int32_t value, RelocInfo::Mode rmode);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"RelocatableInt64Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a relocatable Int64Constant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"int64_t\",\n                        \"purpose\": \"The integer value for the constant.\"\n                    },\n                    {\n                        \"name\": \"rmode\",\n                        \"type\": \"RelocInfo::Mode\",\n                        \"purpose\": \"The relocation mode for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created relocatable Int64Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"RelocInfo\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* RelocatableInt64Constant(int64_t value, RelocInfo::Mode rmode);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"RelocatableIntPtrConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a relocatable IntPtrConstant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The integer value for the constant (machine-word sized).\"\n                    },\n                    {\n                        \"name\": \"rmode\",\n                        \"type\": \"RelocInfo::Mode\",\n                        \"purpose\": \"The relocation mode for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created relocatable IntPtrConstant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"RelocInfo\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* RelocatableIntPtrConstant(intptr_t value, RelocInfo::Mode rmode);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"RelocatableWasmBuiltinCallTarget\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a relocatable WasmBuiltinCallTarget node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"builtin\",\n                        \"type\": \"Builtin\",\n                        \"purpose\": \"The builtin function.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created relocatable WasmBuiltinCallTarget node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"Builtin\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* RelocatableWasmBuiltinCallTarget(Builtin builtin);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Float32Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a Float32Constant node, usually canonicalized.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"float\",\n                        \"purpose\": \"The floating-point value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Float32Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* Float32Constant(float value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Float64Constant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a Float64Constant node, usually canonicalized.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"double\",\n                        \"purpose\": \"The floating-point value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created Float64Constant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* Float64Constant(double value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PointerConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a PointerConstant node from an intptr_t.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"intptr_t\",\n                        \"purpose\": \"The pointer value for the constant as an integer.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created PointerConstant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* PointerConstant(intptr_t value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PointerConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates a PointerConstant node from a pointer (templated version).\",\n                \"logic\": \"Reinterprets the pointer `value` as an `intptr_t` before creating the PointerConstant node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"T*\",\n                        \"purpose\": \"The pointer value for the constant.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created PointerConstant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"PointerConstant\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  template <typename T>\n  Node* PointerConstant(T* value) {\n    return PointerConstant(reinterpret_cast<intptr_t>(value));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ExternalConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an ExternalConstant node, usually canonicalized, from an ExternalReference.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ref\",\n                        \"type\": \"ExternalReference\",\n                        \"purpose\": \"The external reference.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created ExternalConstant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"ExternalReference\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* ExternalConstant(ExternalReference ref);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ExternalConstant\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Creates an ExternalConstant node, usually canonicalized, from a Runtime::FunctionId.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"function_id\",\n                        \"type\": \"Runtime::FunctionId\",\n                        \"purpose\": \"The runtime function ID.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the newly created ExternalConstant node.\"\n                },\n                \"dependencies\": [\n                    \"Node\",\n                    \"ExternalReference\",\n                    \"Runtime\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Node* ExternalConstant(Runtime::FunctionId function_id);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Dead\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Returns the global cache of the dead node, creating it if it doesn't exist.\",\n                \"logic\": \"Uses a lazy initialization pattern. If `Dead_` is null, it creates a new dead node using `graph_->NewNode(common_->Dead())` and stores it in `Dead_`.\",\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A pointer to the dead node.\"\n                },\n                \"dependencies\": [\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  // Global cache of the dead node.\n  Node* Dead() {\n    return Dead_ ? Dead_ : Dead_ = graph_->NewNode(common_->Dead());\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"StoreCallCount\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Stores call count information for a specific node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"call_id\",\n                        \"type\": \"NodeId\",\n                        \"purpose\": \"The ID of the call node.\"\n                    },\n                    {\n                        \"name\": \"count\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The call count for the node.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"NodeId\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  // Store and retrieve call count information.\n  void StoreCallCount(NodeId call_id, int count) {\n    call_counts_.Put(call_id, count);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetCallCount\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Retrieves call count information for a specific node.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"call_id\",\n                        \"type\": \"NodeId\",\n                        \"purpose\": \"The ID of the call node.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The call count for the node.\"\n                },\n                \"dependencies\": [\n                    \"NodeId\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  int GetCallCount(NodeId call_id) { return call_counts_.Get(call_id); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ReserveCallCounts\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Reserves space in the call counts map to minimize rehashings.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"num_call_instructions\",\n                        \"type\": \"size_t\",\n                        \"purpose\": \"The estimated number of call instructions.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  // Use this to keep the number of map rehashings to a minimum.\n  void ReserveCallCounts(size_t num_call_instructions) {\n    call_counts_.Reserve(num_call_instructions);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"common\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Returns a pointer to the CommonOperatorBuilder.\",\n                \"return\": {\n                    \"type\": \"CommonOperatorBuilder*\",\n                    \"description\": \"A pointer to the CommonOperatorBuilder.\"\n                },\n                \"dependencies\": [\n                    \"CommonOperatorBuilder\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  CommonOperatorBuilder* common() const { return common_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"machine\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Returns a pointer to the MachineOperatorBuilder.\",\n                \"return\": {\n                    \"type\": \"MachineOperatorBuilder*\",\n                    \"description\": \"A pointer to the MachineOperatorBuilder.\"\n                },\n                \"dependencies\": [\n                    \"MachineOperatorBuilder\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  MachineOperatorBuilder* machine() const { return machine_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"graph\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Returns a pointer to the TFGraph.\",\n                \"return\": {\n                    \"type\": \"TFGraph*\",\n                    \"description\": \"A pointer to the TFGraph.\"\n                },\n                \"dependencies\": [\n                    \"TFGraph\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  TFGraph* graph() const { return graph_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"zone\",\n                \"parent\": \"MachineGraph\",\n                \"about\": \"Returns a pointer to the Zone used by the graph.\",\n                \"return\": {\n                    \"type\": \"Zone*\",\n                    \"description\": \"A pointer to the Zone.\"\n                },\n                \"dependencies\": [\n                    \"Zone\",\n                    \"TFGraph\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  Zone* zone() const { return graph()->zone(); }\n        ]]></code>\n    </func>\n</file>\n```"
}