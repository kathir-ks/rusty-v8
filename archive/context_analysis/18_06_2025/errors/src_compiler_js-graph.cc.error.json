{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-graph.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-graph.cc\",\n            \"file_name\": \"js-graph.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Provides a graph representation of JavaScript code for the V8 compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include necessary headers for JSGraph functionality and dependencies.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/js-graph.h\"\n\n#include \"src/codegen/code-factory.h\"\n#include \"src/compiler/heap-refs.h\"\n#include \"src/compiler/js-heap-broker.h\"\n#include \"src/objects/objects-inl.h\"\n        ]]></code>\n    </imports>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CEntryStubConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a C entry stub.\",\n                \"logic\": \"Caches and returns a HeapConstant representing a C entry stub, which is a code object used for calling C++ functions from JavaScript.  It handles different argv modes (stack vs. register) and result sizes. It considers builtin exit frames as well.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"result_size\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The number of return values expected from the C function.\"\n                    },\n                    {\n                        \"name\": \"argv_mode\",\n                        \"type\": \"ArgvMode\",\n                        \"purpose\": \"Specifies how arguments are passed to the C function (via stack or registers).\"\n                    },\n                    {\n                        \"name\": \"builtin_exit_frame\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"Indicates whether the C entry stub should create a builtin exit frame.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the C entry stub constant.\"\n                },\n                \"dependencies\": [\n                    \"CodeFactory\",\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::CEntryStubConstant(int result_size, ArgvMode argv_mode,\n                                  bool builtin_exit_frame) {\n  if (argv_mode == ArgvMode::kStack) {\n    DCHECK(result_size >= 1 && result_size <= 3);\n    if (!builtin_exit_frame) {\n      Node** ptr = nullptr;\n      if (result_size == 1) {\n        ptr = &CEntryStub1Constant_;\n      } else if (result_size == 2) {\n        ptr = &CEntryStub2Constant_;\n      } else {\n        DCHECK_EQ(3, result_size);\n        ptr = &CEntryStub3Constant_;\n      }\n      return GET_CACHED_FIELD(\n          ptr, HeapConstantNoHole(CodeFactory::CEntry(\n                   isolate(), result_size, argv_mode, builtin_exit_frame)));\n    }\n    Node** ptr = builtin_exit_frame ? &CEntryStub1WithBuiltinExitFrameConstant_\n                                    : &CEntryStub1Constant_;\n    return GET_CACHED_FIELD(\n        ptr, HeapConstantNoHole(CodeFactory::CEntry(\n                 isolate(), result_size, argv_mode, builtin_exit_frame)));\n  }\n  return HeapConstantNoHole(CodeFactory::CEntry(isolate(), result_size,\n                                                argv_mode, builtin_exit_frame));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ConstantNoHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a JavaScript object that is guaranteed not to be a hole.\",\n                \"logic\": \"Caches and returns a constant node for a given ObjectRef. It checks if the object is a hole and throws an error if it is. Thin strings are converted to their actual representation. Then calls Constant(ObjectRef, JSHeapBroker*)\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ref\",\n                        \"type\": \"ObjectRef\",\n                        \"purpose\": \"A reference to the JavaScript object.\"\n                    },\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"A pointer to the JSHeapBroker, used for accessing heap object properties.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant JavaScript object.\"\n                },\n                \"dependencies\": [\n                    \"Constant\",\n                    \"IsThinString\",\n                    \"MakeRefAssumeMemoryFence\",\n                    \"Cast\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::ConstantNoHole(ObjectRef ref, JSHeapBroker* broker) {\n  // This CHECK is security critical, we should never observe a hole\n  // here.  Please do not remove this! (crbug.com/1486789)\n  CHECK(ref.IsSmi() || ref.IsHeapNumber() ||\n        ref.AsHeapObject().GetHeapObjectType(broker).hole_type() ==\n            HoleType::kNone);\n  if (IsThinString(*ref.object())) {\n    ref = MakeRefAssumeMemoryFence(broker,\n                                   Cast<ThinString>(*ref.object())->actual());\n  }\n  return Constant(ref, broker);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ConstantMaybeHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a JavaScript object that might be a hole.\",\n                \"logic\": \"Caches and returns a constant node for a given ObjectRef, without checking if it's a hole. Just calls `Constant(ref, broker)`\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ref\",\n                        \"type\": \"ObjectRef\",\n                        \"purpose\": \"A reference to the JavaScript object.\"\n                    },\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"A pointer to the JSHeapBroker, used for accessing heap object properties.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant JavaScript object.\"\n                },\n                \"dependencies\": [\n                    \"Constant\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::ConstantMaybeHole(ObjectRef ref, JSHeapBroker* broker) {\n  return Constant(ref, broker);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Constant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a JavaScript object.\",\n                \"logic\": \"Caches and returns a constant node for a given ObjectRef. It handles different types of objects, including Smis, HeapNumbers, and oddballs (undefined, null, true, false). For hole objects, it returns a specific constant node (e.g., TheHoleConstant).\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ref\",\n                        \"type\": \"ObjectRef\",\n                        \"purpose\": \"A reference to the JavaScript object.\"\n                    },\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"A pointer to the JSHeapBroker, used for accessing heap object properties.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant JavaScript object.\"\n                },\n                \"dependencies\": [\n                    \"ConstantMaybeHole\",\n                    \"TheHoleConstant\",\n                    \"PropertyCellHoleConstant\",\n                    \"HashTableHoleConstant\",\n                    \"PromiseHoleConstant\",\n                    \"OptimizedOutConstant\",\n                    \"StaleRegisterConstant\",\n                    \"UninitializedConstant\",\n                    \"UndefinedConstant\",\n                    \"NullConstant\",\n                    \"TrueConstant\",\n                    \"FalseConstant\",\n                    \"HeapConstantNoHole\",\n                    \"IsUndefined\",\n                    \"IsNull\",\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::Constant(ObjectRef ref, JSHeapBroker* broker) {\n  if (ref.IsSmi()) return ConstantMaybeHole(ref.AsSmi());\n  if (ref.IsHeapNumber()) {\n    return ConstantMaybeHole(ref.AsHeapNumber().value());\n  }\n\n  switch (ref.AsHeapObject().GetHeapObjectType(broker).hole_type()) {\n    case HoleType::kNone:\n      break;\n    case HoleType::kGeneric:\n      return TheHoleConstant();\n    case HoleType::kPropertyCellHole:\n      return PropertyCellHoleConstant();\n    case HoleType::kHashTableHole:\n      return HashTableHoleConstant();\n    case HoleType::kPromiseHole:\n      return PromiseHoleConstant();\n    case HoleType::kOptimizedOut:\n      return OptimizedOutConstant();\n    case HoleType::kStaleRegister:\n      return StaleRegisterConstant();\n    case HoleType::kUninitialized:\n      return UninitializedConstant();\n    case HoleType::kException:\n    case HoleType::kTerminationException:\n    case HoleType::kArgumentsMarker:\n    case HoleType::kSelfReferenceMarker:\n    case HoleType::kBasicBlockCountersMarker:\n      UNREACHABLE();\n  }\n\n  OddballType oddball_type =\n      ref.AsHeapObject().GetHeapObjectType(broker).oddball_type();\n  ReadOnlyRoots roots(isolate());\n  if (oddball_type == OddballType::kUndefined) {\n    DCHECK(IsUndefined(*ref.object(), roots));\n    return UndefinedConstant();\n  } else if (oddball_type == OddballType::kNull) {\n    DCHECK(IsNull(*ref.object(), roots));\n    return NullConstant();\n  } else if (oddball_type == OddballType::kBoolean) {\n    if (IsTrue(*ref.object(), roots)) {\n      return TrueConstant();\n    } else {\n      DCHECK(IsFalse(*ref.object(), roots));\n      return FalseConstant();\n    }\n  } else {\n    return HeapConstantNoHole(ref.AsHeapObject().object());\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ConstantMutableHeapNumber\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a mutable HeapNumber.\",\n                \"logic\": \"Caches and returns a constant node for a given HeapNumberRef as a HeapConstantNoHole\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ref\",\n                        \"type\": \"HeapNumberRef\",\n                        \"purpose\": \"A reference to the HeapNumber object.\"\n                    },\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"A pointer to the JSHeapBroker, used for accessing heap object properties.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant HeapNumber object.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::ConstantMutableHeapNumber(HeapNumberRef ref,\n                                         JSHeapBroker* broker) {\n  return HeapConstantNoHole(ref.AsHeapObject().object());\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ConstantNoHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a double value that is guaranteed not to be a hole.\",\n                \"logic\": \"Checks if the double value is the hole NaN and throws an error if it is. Calls `ConstantMaybeHole(double)`\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"double\",\n                        \"purpose\": \"The double value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant double value.\"\n                },\n                \"dependencies\": [\n                    \"ConstantMaybeHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::ConstantNoHole(double value) {\n  CHECK_NE(base::bit_cast<uint64_t>(value), kHoleNanInt64);\n  return ConstantMaybeHole(value);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ConstantMaybeHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a double value that might be a hole.\",\n                \"logic\": \"Checks if the double value is 0.0 or 1.0 and returns ZeroConstant or OneConstant, respectively. Otherwise calls NumberConstant(value)\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"double\",\n                        \"purpose\": \"The double value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant double value.\"\n                },\n                \"dependencies\": [\n                    \"ZeroConstant\",\n                    \"OneConstant\",\n                    \"NumberConstant\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::ConstantMaybeHole(double value) {\n  if (base::bit_cast<int64_t>(value) == base::bit_cast<int64_t>(0.0))\n    return ZeroConstant();\n  if (base::bit_cast<int64_t>(value) == base::bit_cast<int64_t>(1.0))\n    return OneConstant();\n  return NumberConstant(value);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"NumberConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a double value.\",\n                \"logic\": \"Caches and returns a constant node for a given double value. It uses a cache to avoid creating duplicate nodes.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"double\",\n                        \"purpose\": \"The double value.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant double value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::NumberConstant(double value) {\n  Node** loc = cache_.FindNumberConstant(value);\n  if (*loc == nullptr) {\n    *loc = graph()->NewNode(common()->NumberConstant(value));\n  }\n  return *loc;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"HeapConstantNoHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a HeapObject that is guaranteed not to be a hole.\",\n                \"logic\": \"Caches and returns a constant node for a given HeapObject. It checks if the object is a hole and throws an error if it is. It uses a cache to avoid creating duplicate nodes.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Handle<HeapObject>\",\n                        \"purpose\": \"A handle to the HeapObject.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant HeapObject.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::HeapConstantNoHole(Handle<HeapObject> value) {\n  CHECK(!IsAnyHole(*value));\n  Node** loc = cache_.FindHeapConstant(value);\n  if (*loc == nullptr) {\n    *loc = graph()->NewNode(common()->HeapConstant(value));\n  }\n  return *loc;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"HeapConstantMaybeHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a HeapObject that might be a hole.\",\n                \"logic\": \"Caches and returns a constant node for a given HeapObject, without checking if it's a hole. It uses a cache to avoid creating duplicate nodes.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Handle<HeapObject>\",\n                        \"purpose\": \"A handle to the HeapObject.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant HeapObject.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::HeapConstantMaybeHole(Handle<HeapObject> value) {\n  Node** loc = cache_.FindHeapConstant(value);\n  if (*loc == nullptr) {\n    *loc = graph()->NewNode(common()->HeapConstant(value));\n  }\n  return *loc;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"HeapConstantHole\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a HeapObject that is a hole.\",\n                \"logic\": \"Caches and returns a constant node for a given HeapObject, assuming it is a hole. It uses a cache to avoid creating duplicate nodes.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Handle<HeapObject>\",\n                        \"purpose\": \"A handle to the HeapObject.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant HeapObject.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::HeapConstantHole(Handle<HeapObject> value) {\n  DCHECK(IsAnyHole(*value));\n  Node** loc = cache_.FindHeapConstant(value);\n  if (*loc == nullptr) {\n    *loc = graph()->NewNode(common()->HeapConstant(value));\n  }\n  return *loc;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TrustedHeapConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Retrieves a constant node representing a trusted HeapObject.\",\n                \"logic\": \"Creates and returns a constant node for a given HeapObject, assuming it is trusted. It does not use a cache.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Handle<HeapObject>\",\n                        \"purpose\": \"A handle to the HeapObject.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Node*\",\n                    \"description\": \"A Node* representing the constant HeapObject.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nNode* JSGraph::TrustedHeapConstant(Handle<HeapObject> value) {\n  DCHECK(IsTrustedObject(*value));\n  // TODO(pthier): Consider also caching trusted constants. Right now they are\n  // only used for RegExp data as part of RegExp literals and it should be\n  // uncommon for the same literal to appear multiple times.\n  return graph()->NewNode(common()->TrustedHeapConstant(value));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetCachedNodes\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"Fills the supplied node vector with all cached nodes in the JSGraph\",\n                \"logic\": \"Iterates through all the cached nodes within the JSGraph's internal cache and appends them to the provided NodeVector.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nodes\",\n                        \"type\": \"NodeVector*\",\n                        \"purpose\": \"A pointer to the NodeVector that will be populated with the cached nodes.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"This method does not return a value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid JSGraph::GetCachedNodes(NodeVector* nodes) {\n  cache_.GetCachedNodes(nodes);\n#define DO_CACHED_FIELD(name, ...) \\\n  if (name##_) nodes->push_back(name##_);\n\n  CACHED_GLOBAL_LIST(DO_CACHED_FIELD)\n  CACHED_CENTRY_LIST(DO_CACHED_FIELD)\n#undef DO_CACHED_FIELD\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"AllocateInYoungGenerationStubConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing a stub that allocates memory in the young generation.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the AllocateInYoungGeneration built-in code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant stub.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(AllocateInYoungGenerationStubConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(),\n                                              AllocateInYoungGeneration)))\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"AllocateInOldGenerationStubConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing a stub that allocates memory in the old generation.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the AllocateInOldGeneration built-in code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant stub.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(AllocateInOldGenerationStubConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(),\n                                              AllocateInOldGeneration)))\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"WasmAllocateInYoungGenerationStubConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing a WebAssembly stub that allocates memory in the young generation.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the WasmAllocateInYoungGeneration built-in code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant stub.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nDEFINE_GETTER(WasmAllocateInYoungGenerationStubConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(),\n                                              WasmAllocateInYoungGeneration)))\n#endif\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"WasmAllocateInOldGenerationStubConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing a WebAssembly stub that allocates memory in the old generation.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the WasmAllocateInOldGeneration built-in code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant stub.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nDEFINE_GETTER(WasmAllocateInOldGenerationStubConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(),\n                                              WasmAllocateInOldGeneration)))\n#endif\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ArrayConstructorStubConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the ArrayConstructorImpl stub.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the ArrayConstructorImpl built-in code.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant stub.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(ArrayConstructorStubConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(), ArrayConstructorImpl)))\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"BigIntMapConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the BigInt map.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the BigInt map.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Map\",\n                    \"description\": \"A Map node representing the constant map.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(BigIntMapConstant, Map,\n              HeapConstantNoHole(factory()->bigint_map()))\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"BooleanMapConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the Boolean map.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the Boolean map.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Map\",\n                    \"description\": \"A Map node representing the constant map.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(BooleanMapConstant, Map,\n              HeapConstantNoHole(factory()->boolean_map()))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ToNumberBuiltinConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the ToNumber builtin.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the ToNumber builtin.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant code.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(ToNumberBuiltinConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(), ToNumber)))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PlainPrimitiveToNumberBuiltinConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the PlainPrimitiveToNumber builtin.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the PlainPrimitiveToNumber builtin.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Code\",\n                    \"description\": \"A Code node representing the constant code.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(PlainPrimitiveToNumberBuiltinConstant, Code,\n              HeapConstantNoHole(BUILTIN_CODE(isolate(),\n                                              PlainPrimitiveToNumber)))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"EmptyFixedArrayConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the empty fixed array.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the empty fixed array.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"FixedArray\",\n                    \"description\": \"A FixedArray node representing the constant fixed array.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(EmptyFixedArrayConstant, FixedArray,\n              HeapConstantNoHole(factory()->empty_fixed_array()))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"EmptyStringConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the empty string.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the empty string.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"String\",\n                    \"description\": \"A String node representing the constant string.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(EmptyStringConstant, String,\n              HeapConstantNoHole(factory()->empty_string()))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"FixedArrayMapConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the fixed array map.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the fixed array map.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Map\",\n                    \"description\": \"A Map node representing the constant map.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(FixedArrayMapConstant, Map,\n              HeapConstantNoHole(factory()->fixed_array_map()))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PropertyArrayMapConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the property array map.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the property array map.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Map\",\n                    \"description\": \"A Map node representing the constant map.\"\n                },\n                \"dependencies\": [\n                    \"HeapConstantNoHole\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nDEFINE_GETTER(PropertyArrayMapConstant, Map,\n              HeapConstantNoHole(factory()->property_array_map()))\n        ]]></code>\n    </func>\n\n        <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"FixedDoubleArrayMapConstant\",\n                \"parent\": \"JSGraph\",\n                \"about\": \"A getter for the constant representing the fixed double array map.\",\n                \"logic\": \"Uses the HeapConstantNoHole helper function to get or create a node representing the fixed double array map.\",\n                \"parameters\": [],\n                \"return\": {\n                    "
}