{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/frame-constants.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/execution/frame-constants.h\",\n        \"file_name\": \"frame-constants.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines constants related to stack frame layout for different types of frames in the V8 JavaScript engine.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary header files for global definitions and flags.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"src/common/globals.h\"\n            #include \"src/flags/flags.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CommonFrameConstants\",\n            \"extends\": \"AllStatic\",\n            \"about\": \"Defines constants common to all frame types, such as offsets for caller frame pointer, program counter, and stack pointer.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kCallerFPOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Offset of the caller's frame pointer from the current frame pointer.\"\n                },\n                {\n                    \"name\": \"kCallerPCOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Offset of the caller's program counter from the current frame pointer.\"\n                },\n                {\n                    \"name\": \"kCallerSPOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Offset of the caller's stack pointer from the current frame pointer.\"\n                },\n                {\n                    \"name\": \"kFixedFrameSizeAboveFp\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the fixed part of the frame above the frame pointer.\"\n                },\n                {\n                    \"name\": \"kFixedSlotCountAboveFp\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The number of slots in the fixed part of the frame above the frame pointer.\"\n                },\n                {\n                    \"name\": \"kCPSlotSize\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the constant pool slot.\"\n                },\n                {\n                    \"name\": \"kCPSlotCount\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The number of slots needed for the constant pool.\"\n                },\n                {\n                    \"name\": \"kConstantPoolOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the constant pool.\"\n                },\n                {\n                    \"name\": \"kContextOrFrameTypeSize\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the context or frame type.\"\n                },\n                {\n                    \"name\": \"kContextOrFrameTypeOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the context or frame type.\"\n                }\n            ],\n            \"dependencies\": [\n                \"AllStatic\",\n                \"kSystemPointerSize\",\n                \"kFPOnStackSize\",\n                \"kPCOnStackSize\",\n                \"V8_EMBEDDED_CONSTANT_POOL_BOOL\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class CommonFrameConstants : public AllStatic {\n            public:\n                static constexpr int kCallerFPOffset = 0 * kSystemPointerSize;\n                static constexpr int kCallerPCOffset = kCallerFPOffset + 1 * kFPOnStackSize;\n                static constexpr int kCallerSPOffset = kCallerPCOffset + 1 * kPCOnStackSize;\n\n                // Fixed part of the frame consists of return address, caller fp,\n                // constant pool (if V8_EMBEDDED_CONSTANT_POOL_BOOL), context, and\n                // function. CommonFrame::IterateExpressions assumes that kLastObjectOffset\n                // is the last object pointer.\n                static constexpr int kFixedFrameSizeAboveFp = kPCOnStackSize + kFPOnStackSize;\n                static constexpr int kFixedSlotCountAboveFp =\n                    kFixedFrameSizeAboveFp / kSystemPointerSize;\n                static constexpr int kCPSlotSize =\n                    V8_EMBEDDED_CONSTANT_POOL_BOOL ? kSystemPointerSize : 0;\n                static constexpr int kCPSlotCount = kCPSlotSize / kSystemPointerSize;\n                static constexpr int kConstantPoolOffset =\n                    kCPSlotSize ? -1 * kSystemPointerSize : 0;\n                static constexpr int kContextOrFrameTypeSize = kSystemPointerSize;\n                static constexpr int kContextOrFrameTypeOffset =\n                    -(kCPSlotSize + kContextOrFrameTypeSize);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"StandardFrameConstants\",\n            \"extends\": \"CommonFrameConstants\",\n            \"about\": \"Defines constants specific to standard JavaScript frames, including offsets for context, JSFunction, and argument count.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kFixedFrameSizeFromFp\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the fixed part of the frame below the frame pointer.\"\n                },\n                {\n                    \"name\": \"kFixedFrameSize\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the fixed part of the frame.\"\n                },\n                {\n                    \"name\": \"kFixedSlotCountFromFp\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The number of slots in the fixed part of the frame below the frame pointer.\"\n                },\n                {\n                    \"name\": \"kFixedSlotCount\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The number of slots in the fixed part of the frame.\"\n                },\n                {\n                    \"name\": \"kContextOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the context.\"\n                },\n                {\n                    \"name\": \"kFunctionOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the JSFunction.\"\n                },\n                {\n                    \"name\": \"kArgCOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the argument count.\"\n                },\n                {\n                    \"name\": \"kExpressionsOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the expressions.\"\n                },\n                {\n                    \"name\": \"kFirstPushedFrameValueOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the first pushed frame value.\"\n                },\n                {\n                    \"name\": \"kLastObjectOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the last object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"CommonFrameConstants\",\n                \"kSystemPointerSize\",\n                \"kCPSlotSize\",\n                \"kContextOrFrameTypeOffset\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class StandardFrameConstants : public CommonFrameConstants {\n            public:\n                static constexpr int kFixedFrameSizeFromFp =\n                    3 * kSystemPointerSize + kCPSlotSize;\n                static constexpr int kFixedFrameSize =\n                    kFixedFrameSizeAboveFp + kFixedFrameSizeFromFp;\n                static constexpr int kFixedSlotCountFromFp =\n                    kFixedFrameSizeFromFp / kSystemPointerSize;\n                static constexpr int kFixedSlotCount = kFixedFrameSize / kSystemPointerSize;\n                static constexpr int kContextOffset = kContextOrFrameTypeOffset;\n                static constexpr int kFunctionOffset = -2 * kSystemPointerSize - kCPSlotSize;\n                static constexpr int kArgCOffset = -3 * kSystemPointerSize - kCPSlotSize;\n                static constexpr int kExpressionsOffset =\n                    -4 * kSystemPointerSize - kCPSlotSize;\n                static constexpr int kFirstPushedFrameValueOffset = kExpressionsOffset;\n                static constexpr int kLastObjectOffset = kContextOffset;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TypedFrameConstants\",\n            \"extends\": \"CommonFrameConstants\",\n            \"about\": \"Defines constants for typed frames, which have a type marker to distinguish them from standard frames.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kFrameTypeSize\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the frame type marker.\"\n                },\n                {\n                    \"name\": \"kFrameTypeOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the frame type marker.\"\n                },\n                {\n                    \"name\": \"kFixedFrameSizeFromFp\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the fixed frame part below the frame pointer.\"\n                },\n                {\n                    \"name\": \"kFixedSlotCountFromFp\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The number of slots of the fixed frame part below the frame pointer.\"\n                },\n                {\n                    \"name\": \"kFixedFrameSize\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The size of the fixed frame.\"\n                },\n                {\n                    \"name\": \"kFixedSlotCount\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The number of slots in fixed frame.\"\n                },\n                {\n                    \"name\": \"kFirstPushedFrameValueOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of first pushed frame value.\"\n                }\n            ],\n            \"dependencies\": [\n                \"CommonFrameConstants\",\n                \"StandardFrameConstants\",\n                \"kContextOrFrameTypeSize\",\n                \"kContextOrFrameTypeOffset\",\n                \"kCPSlotSize\",\n                \"kSystemPointerSize\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class TypedFrameConstants : public CommonFrameConstants {\n            public:\n                // FP-relative.\n                static constexpr int kFrameTypeSize = kContextOrFrameTypeSize;\n                static constexpr int kFrameTypeOffset = kContextOrFrameTypeOffset;\n                static constexpr int kFixedFrameSizeFromFp = kCPSlotSize + kFrameTypeSize;\n                static constexpr int kFixedSlotCountFromFp =\n                    kFixedFrameSizeFromFp / kSystemPointerSize;\n                static constexpr int kFixedFrameSize =\n                    StandardFrameConstants::kFixedFrameSizeAboveFp + kFixedFrameSizeFromFp;\n                static constexpr int kFixedSlotCount = kFixedFrameSize / kSystemPointerSize;\n                static constexpr int kFirstPushedFrameValueOffset =\n                    -kFixedFrameSizeFromFp - kSystemPointerSize;\n            };\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"FRAME_PUSHED_VALUE_OFFSET\",\n            \"about\": \"Calculates the offset of a pushed value relative to the frame pointer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"parent\",\n                    \"type\": \"class\",\n                    \"purpose\": \"The frame constant class.\"\n                },\n                {\n                    \"name\": \"x\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The index of the pushed value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int\",\n                \"description\": \"The offset of the pushed value.\"\n            },\n            \"dependencies\": [\n                \"kSystemPointerSize\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define FRAME_PUSHED_VALUE_OFFSET(parent, x) \\\n              (parent::kFirstPushedFrameValueOffset - (x)*kSystemPointerSize)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"FRAME_SIZE\",\n            \"about\": \"Calculates the total size of a frame.\",\n            \"parameters\": [\n                {\n                    \"name\": \"parent\",\n                    \"type\": \"class\",\n                    \"purpose\": \"The frame constant class.\"\n                },\n                {\n                    \"name\": \"count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of additional slots.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int\",\n                \"description\": \"The size of the frame.\"\n            },\n            \"dependencies\": [\n                \"kSystemPointerSize\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define FRAME_SIZE(parent, count) \\\n              (parent::kFixedFrameSize + (count)*kSystemPointerSize)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"FRAME_SIZE_FROM_FP\",\n            \"about\": \"Calculates the total size of the frame from frame pointer.\",\n            \"parameters\": [\n                {\n                    \"name\": \"parent\",\n                    \"type\": \"class\",\n                    \"purpose\": \"The frame constant class.\"\n                },\n                {\n                    \"name\": \"count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of additional slots.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int\",\n                \"description\": \"The size of the frame from frame pointer.\"\n            },\n            \"dependencies\": [\n                \"kSystemPointerSize\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define FRAME_SIZE_FROM_FP(parent, count) \\\n              (parent::kFixedFrameSizeFromFp + (count)*kSystemPointerSize)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"DEFINE_FRAME_SIZES\",\n            \"about\": \"Defines constants related to frame sizes and offsets, including extra slot calculations.\",\n            \"parameters\": [\n                {\n                    \"name\": \"parent\",\n                    \"type\": \"class\",\n                    \"purpose\": \"The frame constant class.\"\n                },\n                {\n                    \"name\": \"count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of additional slots.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"kSystemPointerSize\",\n                \"FRAME_SIZE\",\n                \"FRAME_SIZE_FROM_FP\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_FRAME_SIZES(parent, count)                                      \\\n              static constexpr int kFixedFrameSize = FRAME_SIZE(parent, count);            \\\n              static constexpr int kFixedSlotCount = kFixedFrameSize / kSystemPointerSize; \\\n              static constexpr int kFixedFrameSizeFromFp =                                 \\\n                  FRAME_SIZE_FROM_FP(parent, count);                                       \\\n              static constexpr int kFixedSlotCountFromFp =                                 \\\n                  kFixedFrameSizeFromFp / kSystemPointerSize;                              \\\n              static constexpr int kFirstPushedFrameValueOffset =                          \\\n                  parent::kFirstPushedFrameValueOffset - (count) * kSystemPointerSize;     \\\n              /* The number of slots added on top of given parent frame type. */           \\\n              template <typename TParentFrameConstants>                                    \\\n              static constexpr int getExtraSlotsCountFrom() {                              \\\n                return kFixedSlotCount - TParentFrameConstants::kFixedSlotCount;           \\\n              }                                                                            \\\n              /* TODO(ishell): remove in favour of getExtraSlotsCountFrom() because */     \\\n              /* it's not clear from which base should we count \"extra\" - from direct */   \\\n              /* parent or maybe from parent's parent? */                                  \\\n              static constexpr int kExtraSlotCount =                                       \\\n                  kFixedSlotCount - parent::kFixedSlotCount\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"STANDARD_FRAME_EXTRA_PUSHED_VALUE_OFFSET\",\n            \"about\": \"Calculates the offset of an extra pushed value for StandardFrameConstants.\",\n            \"parameters\": [\n                {\n                    \"name\": \"x\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The index of the pushed value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int\",\n                \"description\": \"The offset of the extra pushed value.\"\n            },\n            \"dependencies\": [\n                \"FRAME_PUSHED_VALUE_OFFSET\",\n                \"StandardFrameConstants\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define STANDARD_FRAME_EXTRA_PUSHED_VALUE_OFFSET(x) \\\n              FRAME_PUSHED_VALUE_OFFSET(StandardFrameConstants, x)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"DEFINE_STANDARD_FRAME_SIZES\",\n            \"about\": \"Defines the standard frame sizes using the DEFINE_FRAME_SIZES macro.\",\n            \"parameters\": [\n                {\n                    \"name\": \"count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of additional slots.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"DEFINE_FRAME_SIZES\",\n                \"StandardFrameConstants\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_STANDARD_FRAME_SIZES(count) \\\n              DEFINE_FRAME_SIZES(StandardFrameConstants, count)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n            \"about\": \"Calculates the offset of an extra pushed value for TypedFrameConstants.\",\n            \"parameters\": [\n                {\n                    \"name\": \"x\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The index of the pushed value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int\",\n                \"description\": \"The offset of the extra pushed value.\"\n            },\n            \"dependencies\": [\n                \"FRAME_PUSHED_VALUE_OFFSET\",\n                \"TypedFrameConstants\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TYPED_FRAME_PUSHED_VALUE_OFFSET(x) \\\n              FRAME_PUSHED_VALUE_OFFSET(TypedFrameConstants, x)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"DEFINE_TYPED_FRAME_SIZES\",\n            \"about\": \"Defines the typed frame sizes using the DEFINE_FRAME_SIZES macro.\",\n            \"parameters\": [\n                {\n                    \"name\": \"count\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of additional slots.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"DEFINE_FRAME_SIZES\",\n                \"TypedFrameConstants\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_TYPED_FRAME_SIZES(count) \\\n              DEFINE_FRAME_SIZES(TypedFrameConstants, count)\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"BuiltinFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines constants for builtin frames, including offsets for the function and length.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kFunctionOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the function.\"\n                },\n                {\n                    \"name\": \"kLengthOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the length.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class BuiltinFrameConstants : public TypedFrameConstants {\n            public:\n                // FP-relative.\n                static constexpr int kFunctionOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                static constexpr int kLengthOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(1);\n                DEFINE_TYPED_FRAME_SIZES(2);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ConstructFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines constants for construct frames, including offsets for context, length, constructor, padding, and new target or implicit receiver.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kContextOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the context.\"\n                },\n                {\n                    \"name\": \"kLengthOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the length.\"\n                },\n                {\n                    \"name\": \"kConstructorOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the constructor.\"\n                },\n                {\n                    \"name\": \"kPaddingOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the padding.\"\n                },\n                {\n                    \"name\": \"kNewTargetOrImplicitReceiverOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the new target or implicit receiver.\"\n                },\n                {\n                    \"name\": \"kLastObjectOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the last object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class ConstructFrameConstants : public TypedFrameConstants {\n            public:\n                // FP-relative.\n                static constexpr int kContextOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                static constexpr int kLengthOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(1);\n                static constexpr int kConstructorOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(2);\n                static constexpr int kPaddingOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(3);\n                static constexpr int kNewTargetOrImplicitReceiverOffset =\n                    TYPED_FRAME_PUSHED_VALUE_OFFSET(4);\n                DEFINE_TYPED_FRAME_SIZES(5);\n                static constexpr int kLastObjectOffset = kContextOffset;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"FastConstructFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines constants for fast construct frames, including offsets for context and implicit receiver.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kContextOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the context.\"\n                },\n                {\n                    \"name\": \"kImplicitReceiverOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the implicit receiver.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class FastConstructFrameConstants : public TypedFrameConstants {\n            public:\n                // FP-relative.\n                static constexpr int kContextOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                static constexpr int kImplicitReceiverOffset =\n                    TYPED_FRAME_PUSHED_VALUE_OFFSET(1);\n                DEFINE_TYPED_FRAME_SIZES(2);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CWasmEntryFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines constants for the C WebAssembly entry frame.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kCEntryFPOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset to the C Entry Frame Pointer.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_WEBASSEMBLY\n            class CWasmEntryFrameConstants : public TypedFrameConstants {\n            public:\n                // FP-relative:\n                static constexpr int kCEntryFPOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                DEFINE_TYPED_FRAME_SIZES(1);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines constants related to WebAssembly frames.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kWasmInstanceDataOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset to the Wasm Instance data.\"\n                },\n                {\n                    \"name\": \"kProtectedInstructionReturnAddressOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset used for protected instruction return address.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class WasmFrameConstants : public TypedFrameConstants {\n            public:\n                // FP-relative.\n                static constexpr int kWasmInstanceDataOffset =\n                    TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                DEFINE_TYPED_FRAME_SIZES(1);\n\n                // The WasmTrapHandlerLandingPad builtin gets called from the WebAssembly\n                // trap handler when an out-of-bounds memory access happened or when a null\n                // reference gets dereferenced. This builtin then fakes a call from the\n                // instruction that triggered the signal to the runtime. This is done by\n                // setting a return address and then jumping to a builtin which will call\n                // further to the runtime. As the return address we use the fault address +\n                // {kProtectedInstructionReturnAddressOffset}. Using the fault address itself\n                // would cause problems with safepoints and source positions.\n                //\n                // The problem with safepoints is that a safepoint has to be registered at the\n                // return address, and that at most one safepoint should be registered at a\n                // location. However, there could already be a safepoint registered at the\n                // fault address if the fault address is the return address of a call.\n                //\n                // The problem with source positions is that the stack trace code looks for\n                // the source position of a call before the return address. The source\n                // position of the faulty memory access, however, is recorded at the fault\n                // address. Therefore the stack trace code would not find the source position\n                // if we used the fault address as the return address.\n                static constexpr int kProtectedInstructionReturnAddressOffset = 1;\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmInterpreterFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines frame constants for the Wasm Interpreter frames.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kWasmInstanceObjectOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset of the WebAssembly instance object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_DRUMBRAKE\n            class WasmInterpreterFrameConstants : public TypedFrameConstants {\n            public:\n                // FP-relative.\n                static constexpr int kWasmInstanceObjectOffset =\n                    TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                DEFINE_TYPED_FRAME_SIZES(1);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmToJSInterpreterFrameConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines frame constants for the Wasm to JS interpreter frames.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kGCScanSlotLimitOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset to the GC scan slot limit.\"\n                },\n                {\n                    \"name\": \"kGCSPOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset to the GC Stack Pointer.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class WasmToJSInterpreterFrameConstants : public TypedFrameConstants {\n            public:\n                // This slot contains the number of slots at the top of the frame that need to\n                // be scanned by the GC.\n                static constexpr int kGCScanSlotLimitOffset =\n                    TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n\n                // The stack pointer at the moment of the JS function call.\n                static constexpr int kGCSPOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(1);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmInterpreterCWasmEntryConstants\",\n            \"extends\": \"TypedFrameConstants\",\n            \"about\": \"Defines frame constants for the wasm interpreter C wasm entry frame.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kCEntryFPOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset to the C Entry Frame Pointer.\"\n                },\n                {\n                    \"name\": \"kSPFPOffset\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The offset to the Stack Pointer Frame Pointer.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TypedFrameConstants\",\n                \"TYPED_FRAME_PUSHED_VALUE_OFFSET\",\n                \"DEFINE_TYPED_FRAME_SIZES\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class WasmInterpreterCWasmEntryConstants : public TypedFrameConstants {\n            public:\n                // FP-relative:\n                static constexpr int kCEntryFPOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(0);\n                static constexpr int kSPFPOffset = TYPED_FRAME_PUSHED_VALUE_OFFSET(1);\n                DEFINE_TYPED_FRAME_SIZES(2);\n            };\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmExitFrameConstants\",\n            \"extends\":"
}