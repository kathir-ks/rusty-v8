{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/arm/instruction-scheduler-arm.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/arm/instruction-scheduler-arm.cc\",\n            \"file_name\": \"instruction-scheduler-arm.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implements the instruction scheduler for the ARM architecture in the V8 compiler backend.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes the necessary header file for instruction scheduling functionality.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/backend/instruction-scheduler.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"SchedulerSupported\",\n                \"parent\": \"InstructionScheduler\",\n                \"about\": \"Determines if instruction scheduling is supported for the ARM architecture.\",\n                \"logic\": \"Always returns true, indicating that instruction scheduling is supported.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"Returns true if scheduling is supported, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool InstructionScheduler::SchedulerSupported() { return true; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetTargetInstructionFlags\",\n                \"parent\": \"InstructionScheduler\",\n                \"about\": \"Retrieves target-specific flags for an instruction on the ARM architecture.\",\n                \"logic\": \"A large switch statement determines flags based on the instruction's opcode. Primarily identifies load and store operations for scheduling purposes. Covers a comprehensive range of ARM opcodes, including integer, floating-point, and SIMD instructions.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"instr\",\n                        \"type\": \"const Instruction*\",\n                        \"purpose\": \"The instruction to retrieve flags for.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"An integer representing the instruction flags.  `kNoOpcodeFlags`, `kIsLoadOperation`, `kHasSideEffect`.\"\n                },\n                \"dependencies\": [\n                    \"Instruction\",\n                    \"kArmAdd\",\n                    \"kArmAnd\",\n                    \"kArmBic\",\n                    \"kArmClz\",\n                    \"kArmCmp\",\n                    \"kArmCmn\",\n                    \"kArmTst\",\n                    \"kArmTeq\",\n                    \"kArmOrr\",\n                    \"kArmEor\",\n                    \"kArmSub\",\n                    \"kArmRsb\",\n                    \"kArmMul\",\n                    \"kArmMla\",\n                    \"kArmMls\",\n                    \"kArmSmmul\",\n                    \"kArmSmull\",\n                    \"kArmSmmla\",\n                    \"kArmUmull\",\n                    \"kArmSdiv\",\n                    \"kArmUdiv\",\n                    \"kArmMov\",\n                    \"kArmMvn\",\n                    \"kArmBfc\",\n                    \"kArmUbfx\",\n                    \"kArmSbfx\",\n                    \"kArmSxtb\",\n                    \"kArmSxth\",\n                    \"kArmSxtab\",\n                    \"kArmSxtah\",\n                    \"kArmUxtb\",\n                    \"kArmUxth\",\n                    \"kArmUxtab\",\n                    \"kArmUxtah\",\n                    \"kArmRbit\",\n                    \"kArmRev\",\n                    \"kArmAddPair\",\n                    \"kArmSubPair\",\n                    \"kArmMulPair\",\n                    \"kArmLslPair\",\n                    \"kArmLsrPair\",\n                    \"kArmAsrPair\",\n                    \"kArmVcmpF32\",\n                    \"kArmVaddF32\",\n                    \"kArmVsubF32\",\n                    \"kArmVmulF32\",\n                    \"kArmVmlaF32\",\n                    \"kArmVmlsF32\",\n                    \"kArmVdivF32\",\n                    \"kArmVabsF32\",\n                    \"kArmVnegF32\",\n                    \"kArmVsqrtF32\",\n                    \"kArmVcmpF64\",\n                    \"kArmVaddF64\",\n                    \"kArmVsubF64\",\n                    \"kArmVmulF64\",\n                    \"kArmVmlaF64\",\n                    \"kArmVmlsF64\",\n                    \"kArmVdivF64\",\n                    \"kArmVmodF64\",\n                    \"kArmVabsF64\",\n                    \"kArmVnegF64\",\n                    \"kArmVsqrtF64\",\n                    \"kArmVmullLow\",\n                    \"kArmVmullHigh\",\n                    \"kArmVrintmF32\",\n                    \"kArmVrintmF64\",\n                    \"kArmVrintpF32\",\n                    \"kArmVrintpF64\",\n                    \"kArmVrintzF32\",\n                    \"kArmVrintzF64\",\n                    \"kArmVrintaF64\",\n                    \"kArmVrintnF32\",\n                    \"kArmVrintnF64\",\n                    \"kArmVcvtF32F64\",\n                    \"kArmVcvtF64F32\",\n                    \"kArmVcvtF32S32\",\n                    \"kArmVcvtF32U32\",\n                    \"kArmVcvtF64S32\",\n                    \"kArmVcvtF64U32\",\n                    \"kArmVcvtS32F32\",\n                    \"kArmVcvtU32F32\",\n                    \"kArmVcvtS32F64\",\n                    \"kArmVcvtU32F64\",\n                    \"kArmVmovU32F32\",\n                    \"kArmVmovF32U32\",\n                    \"kArmVmovLowU32F64\",\n                    \"kArmVmovLowF64U32\",\n                    \"kArmVmovHighU32F64\",\n                    \"kArmVmovHighF64U32\",\n                    \"kArmVmovF64U32U32\",\n                    \"kArmVmovU32U32F64\",\n                    \"kArmVcnt\",\n                    \"kArmVpadal\",\n                    \"kArmVpaddl\",\n                    \"kArmFloat32Max\",\n                    \"kArmFloat64Max\",\n                    \"kArmFloat32Min\",\n                    \"kArmFloat64Min\",\n                    \"kArmFloat64SilenceNaN\",\n                    \"kArmF64x2Splat\",\n                    \"kArmF64x2ExtractLane\",\n                    \"kArmF64x2ReplaceLane\",\n                    \"kArmF64x2Abs\",\n                    \"kArmF64x2Neg\",\n                    \"kArmF64x2Sqrt\",\n                    \"kArmF64x2Add\",\n                    \"kArmF64x2Sub\",\n                    \"kArmF64x2Mul\",\n                    \"kArmF64x2Div\",\n                    \"kArmF64x2Min\",\n                    \"kArmF64x2Max\",\n                    \"kArmF64x2Eq\",\n                    \"kArmF64x2Ne\",\n                    \"kArmF64x2Lt\",\n                    \"kArmF64x2Le\",\n                    \"kArmF64x2Qfma\",\n                    \"kArmF64x2Qfms\",\n                    \"kArmF64x2Pmin\",\n                    \"kArmF64x2Pmax\",\n                    \"kArmF64x2Ceil\",\n                    \"kArmF64x2Floor\",\n                    \"kArmF64x2Trunc\",\n                    \"kArmF64x2NearestInt\",\n                    \"kArmF64x2ConvertLowI32x4S\",\n                    \"kArmF64x2ConvertLowI32x4U\",\n                    \"kArmF64x2PromoteLowF32x4\",\n                    \"kArmF32x4Splat\",\n                    \"kArmF32x4ExtractLane\",\n                    \"kArmF32x4ReplaceLane\",\n                    \"kArmF32x4SConvertI32x4\",\n                    \"kArmF32x4UConvertI32x4\",\n                    \"kArmF32x4Abs\",\n                    \"kArmF32x4Neg\",\n                    \"kArmF32x4Sqrt\",\n                    \"kArmF32x4Add\",\n                    \"kArmF32x4Sub\",\n                    \"kArmF32x4Mul\",\n                    \"kArmF32x4Div\",\n                    \"kArmF32x4Min\",\n                    \"kArmF32x4Max\",\n                    \"kArmF32x4Eq\",\n                    \"kArmF32x4Ne\",\n                    \"kArmF32x4Lt\",\n                    \"kArmF32x4Le\",\n                    \"kArmF32x4Qfma\",\n                    \"kArmF32x4Qfms\",\n                    \"kArmF32x4Pmin\",\n                    \"kArmF32x4Pmax\",\n                    \"kArmF32x4DemoteF64x2Zero\",\n                    \"kArmI64x2SplatI32Pair\",\n                    \"kArmI64x2ReplaceLaneI32Pair\",\n                    \"kArmI64x2Abs\",\n                    \"kArmI64x2Neg\",\n                    \"kArmI64x2Shl\",\n                    \"kArmI64x2ShrS\",\n                    \"kArmI64x2Add\",\n                    \"kArmI64x2Sub\",\n                    \"kArmI64x2Mul\",\n                    \"kArmI64x2ShrU\",\n                    \"kArmI64x2BitMask\",\n                    \"kArmI64x2Eq\",\n                    \"kArmI64x2Ne\",\n                    \"kArmI64x2GtS\",\n                    \"kArmI64x2GeS\",\n                    \"kArmI64x2SConvertI32x4Low\",\n                    \"kArmI64x2SConvertI32x4High\",\n                    \"kArmI64x2UConvertI32x4Low\",\n                    \"kArmI64x2UConvertI32x4High\",\n                    \"kArmI32x4Splat\",\n                    \"kArmI32x4ExtractLane\",\n                    \"kArmI32x4ReplaceLane\",\n                    \"kArmI32x4SConvertF32x4\",\n                    \"kArmI32x4SConvertI16x8Low\",\n                    \"kArmI32x4SConvertI16x8High\",\n                    \"kArmI32x4Neg\",\n                    \"kArmI32x4Shl\",\n                    \"kArmI32x4ShrS\",\n                    \"kArmI32x4Add\",\n                    \"kArmI32x4Sub\",\n                    \"kArmI32x4Mul\",\n                    \"kArmI32x4MinS\",\n                    \"kArmI32x4MaxS\",\n                    \"kArmI32x4Eq\",\n                    \"kArmI32x4Ne\",\n                    \"kArmI32x4GtS\",\n                    \"kArmI32x4GeS\",\n                    \"kArmI32x4UConvertF32x4\",\n                    \"kArmI32x4UConvertI16x8Low\",\n                    \"kArmI32x4UConvertI16x8High\",\n                    \"kArmI32x4ShrU\",\n                    \"kArmI32x4MinU\",\n                    \"kArmI32x4MaxU\",\n                    \"kArmI32x4GtU\",\n                    \"kArmI32x4GeU\",\n                    \"kArmI32x4Abs\",\n                    \"kArmI32x4BitMask\",\n                    \"kArmI32x4DotI16x8S\",\n                    \"kArmI16x8DotI8x16S\",\n                    \"kArmI32x4DotI8x16AddS\",\n                    \"kArmI32x4TruncSatF64x2SZero\",\n                    \"kArmI32x4TruncSatF64x2UZero\",\n                    \"kArmI16x8Splat\",\n                    \"kArmI16x8ExtractLaneS\",\n                    \"kArmI16x8ReplaceLane\",\n                    \"kArmI16x8SConvertI8x16Low\",\n                    \"kArmI16x8SConvertI8x16High\",\n                    \"kArmI16x8Neg\",\n                    \"kArmI16x8Shl\",\n                    \"kArmI16x8ShrS\",\n                    \"kArmI16x8SConvertI32x4\",\n                    \"kArmI16x8Add\",\n                    \"kArmI16x8AddSatS\",\n                    \"kArmI16x8Sub\",\n                    \"kArmI16x8SubSatS\",\n                    \"kArmI16x8Mul\",\n                    \"kArmI16x8MinS\",\n                    \"kArmI16x8MaxS\",\n                    \"kArmI16x8Eq\",\n                    \"kArmI16x8Ne\",\n                    \"kArmI16x8GtS\",\n                    \"kArmI16x8GeS\",\n                    \"kArmI16x8ExtractLaneU\",\n                    \"kArmI16x8UConvertI8x16Low\",\n                    \"kArmI16x8UConvertI8x16High\",\n                    \"kArmI16x8ShrU\",\n                    \"kArmI16x8UConvertI32x4\",\n                    \"kArmI16x8AddSatU\",\n                    \"kArmI16x8SubSatU\",\n                    \"kArmI16x8MinU\",\n                    \"kArmI16x8MaxU\",\n                    \"kArmI16x8GtU\",\n                    \"kArmI16x8GeU\",\n                    \"kArmI16x8RoundingAverageU\",\n                    \"kArmI16x8Abs\",\n                    \"kArmI16x8BitMask\",\n                    \"kArmI16x8Q15MulRSatS\",\n                    \"kArmI8x16Splat\",\n                    \"kArmI8x16ExtractLaneS\",\n                    \"kArmI8x16ReplaceLane\",\n                    \"kArmI8x16Neg\",\n                    \"kArmI8x16Shl\",\n                    \"kArmI8x16ShrS\",\n                    \"kArmI8x16SConvertI16x8\",\n                    \"kArmI8x16Add\",\n                    \"kArmI8x16AddSatS\",\n                    \"kArmI8x16Sub\",\n                    \"kArmI8x16SubSatS\",\n                    \"kArmI8x16MinS\",\n                    \"kArmI8x16MaxS\",\n                    \"kArmI8x16Eq\",\n                    \"kArmI8x16Ne\",\n                    \"kArmI8x16GtS\",\n                    \"kArmI8x16GeS\",\n                    \"kArmI8x16ExtractLaneU\",\n                    \"kArmI8x16UConvertI16x8\",\n                    \"kArmI8x16AddSatU\",\n                    \"kArmI8x16SubSatU\",\n                    \"kArmI8x16ShrU\",\n                    \"kArmI8x16MinU\",\n                    \"kArmI8x16MaxU\",\n                    \"kArmI8x16GtU\",\n                    \"kArmI8x16GeU\",\n                    \"kArmI8x16RoundingAverageU\",\n                    \"kArmI8x16Abs\",\n                    \"kArmI8x16BitMask\",\n                    \"kArmS128Const\",\n                    \"kArmS128Zero\",\n                    \"kArmS128AllOnes\",\n                    \"kArmS128Dup\",\n                    \"kArmS128And\",\n                    \"kArmS128Or\",\n                    \"kArmS128Xor\",\n                    \"kArmS128Not\",\n                    \"kArmS128Select\",\n                    \"kArmS128AndNot\",\n                    \"kArmS32x4ZipLeft\",\n                    \"kArmS32x4ZipRight\",\n                    \"kArmS32x4UnzipLeft\",\n                    \"kArmS32x4UnzipRight\",\n                    \"kArmS32x4TransposeLeft\",\n                    \"kArmS32x4TransposeRight\",\n                    \"kArmS32x4Shuffle\",\n                    \"kArmS16x8ZipLeft\",\n                    \"kArmS16x8ZipRight\",\n                    \"kArmS16x8UnzipLeft\",\n                    \"kArmS16x8UnzipRight\",\n                    \"kArmS16x8TransposeLeft\",\n                    \"kArmS16x8TransposeRight\",\n                    \"kArmS8x16ZipLeft\",\n                    \"kArmS8x16ZipRight\",\n                    \"kArmS8x16UnzipLeft\",\n                    \"kArmS8x16UnzipRight\",\n                    \"kArmS8x16TransposeLeft\",\n                    \"kArmS8x16TransposeRight\",\n                    \"kArmS8x16Concat\",\n                    \"kArmI8x16Swizzle\",\n                    \"kArmI8x16Shuffle\",\n                    \"kArmS32x2Reverse\",\n                    \"kArmS16x4Reverse\",\n                    \"kArmS16x2Reverse\",\n                    \"kArmS8x8Reverse\",\n                    \"kArmS8x4Reverse\",\n                    \"kArmS8x2Reverse\",\n                    \"kArmI64x2AllTrue\",\n                    \"kArmI32x4AllTrue\",\n                    \"kArmI16x8AllTrue\",\n                    \"kArmV128AnyTrue\",\n                    \"kArmI8x16AllTrue\",\n                    \"kArmVldrF32\",\n                    \"kArmVldrF64\",\n                    \"kArmVld1F64\",\n                    \"kArmVld1S128\",\n                    \"kArmLdrb\",\n                    \"kArmLdrsb\",\n                    \"kArmLdrh\",\n                    \"kArmLdrsh\",\n                    \"kArmLdr\",\n                    \"kArmPeek\",\n                    \"kArmWord32AtomicPairLoad\",\n                    \"kArmS128Load8Splat\",\n                    \"kArmS128Load16Splat\",\n                    \"kArmS128Load32Splat\",\n                    \"kArmS128Load64Splat\",\n                    \"kArmS128Load8x8S\",\n                    \"kArmS128Load8x8U\",\n                    \"kArmS128Load16x4S\",\n                    \"kArmS128Load16x4U\",\n                    \"kArmS128Load32x2S\",\n                    \"kArmS128Load32x2U\",\n                    \"kArmS128Load32Zero\",\n                    \"kArmS128Load64Zero\",\n                    \"kArmS128LoadLaneLow\",\n                    \"kArmS128LoadLaneHigh\",\n                    \"kArmVstrF32\",\n                    \"kArmVstrF64\",\n                    \"kArmVst1F64\",\n                    \"kArmVst1S128\",\n                    \"kArmStrb\",\n                    \"kArmStrh\",\n                    \"kArmStr\",\n                    \"kArmPush\",\n                    \"kArmPoke\",\n                    \"kArmDmbIsh\",\n                    \"kArmDsbIsb\",\n                    \"kArmWord32AtomicPairStore\",\n                    \"kArmWord32AtomicPairAdd\",\n                    \"kArmWord32AtomicPairSub\",\n                    \"kArmWord32AtomicPairAnd\",\n                    \"kArmWord32AtomicPairOr\",\n                    \"kArmWord32AtomicPairXor\",\n                    \"kArmWord32AtomicPairExchange\",\n                    \"kArmWord32AtomicPairCompareExchange\",\n                    \"kArmS128StoreLaneLow\",\n                    \"kArmS128StoreLaneHigh\",\n                    \"kNoOpcodeFlags\",\n                    \"kIsLoadOperation\",\n                    \"kHasSideEffect\",\n                    \"COMMON_ARCH_OPCODE_LIST\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nint InstructionScheduler::GetTargetInstructionFlags(\n    const Instruction* instr) const {\n  switch (instr->arch_opcode()) {\n    case kArmAdd:\n    case kArmAnd:\n    case kArmBic:\n    case kArmClz:\n    case kArmCmp:\n    case kArmCmn:\n    case kArmTst:\n    case kArmTeq:\n    case kArmOrr:\n    case kArmEor:\n    case kArmSub:\n    case kArmRsb:\n    case kArmMul:\n    case kArmMla:\n    case kArmMls:\n    case kArmSmmul:\n    case kArmSmull:\n    case kArmSmmla:\n    case kArmUmull:\n    case kArmSdiv:\n    case kArmUdiv:\n    case kArmMov:\n    case kArmMvn:\n    case kArmBfc:\n    case kArmUbfx:\n    case kArmSbfx:\n    case kArmSxtb:\n    case kArmSxth:\n    case kArmSxtab:\n    case kArmSxtah:\n    case kArmUxtb:\n    case kArmUxth:\n    case kArmUxtab:\n    case kArmUxtah:\n    case kArmRbit:\n    case kArmRev:\n    case kArmAddPair:\n    case kArmSubPair:\n    case kArmMulPair:\n    case kArmLslPair:\n    case kArmLsrPair:\n    case kArmAsrPair:\n    case kArmVcmpF32:\n    case kArmVaddF32:\n    case kArmVsubF32:\n    case kArmVmulF32:\n    case kArmVmlaF32:\n    case kArmVmlsF32:\n    case kArmVdivF32:\n    case kArmVabsF32:\n    case kArmVnegF32:\n    case kArmVsqrtF32:\n    case kArmVcmpF64:\n    case kArmVaddF64:\n    case kArmVsubF64:\n    case kArmVmulF64:\n    case kArmVmlaF64:\n    case kArmVmlsF64:\n    case kArmVdivF64:\n    case kArmVmodF64:\n    case kArmVabsF64:\n    case kArmVnegF64:\n    case kArmVsqrtF64:\n    case kArmVmullLow:\n    case kArmVmullHigh:\n    case kArmVrintmF32:\n    case kArmVrintmF64:\n    case kArmVrintpF32:\n    case kArmVrintpF64:\n    case kArmVrintzF32:\n    case kArmVrintzF64:\n    case kArmVrintaF64:\n    case kArmVrintnF32:\n    case kArmVrintnF64:\n    case kArmVcvtF32F64:\n    case kArmVcvtF64F32:\n    case kArmVcvtF32S32:\n    case kArmVcvtF32U32:\n    case kArmVcvtF64S32:\n    case kArmVcvtF64U32:\n    case kArmVcvtS32F32:\n    case kArmVcvtU32F32:\n    case kArmVcvtS32F64:\n    case kArmVcvtU32F64:\n    case kArmVmovU32F32:\n    case kArmVmovF32U32:\n    case kArmVmovLowU32F64:\n    case kArmVmovLowF64U32:\n    case kArmVmovHighU32F64:\n    case kArmVmovHighF64U32:\n    case kArmVmovF64U32U32:\n    case kArmVmovU32U32F64:\n    case kArmVcnt:\n    case kArmVpadal:\n    case kArmVpaddl:\n    case kArmFloat32Max:\n    case kArmFloat64Max:\n    case kArmFloat32Min:\n    case kArmFloat64Min:\n    case kArmFloat64SilenceNaN:\n    case kArmF64x2Splat:\n    case kArmF64x2ExtractLane:\n    case kArmF64x2ReplaceLane:\n    case kArmF64x2Abs:\n    case kArmF64x2Neg:\n    case kArmF64x2Sqrt:\n    case kArmF64x2Add:\n    case kArmF64x2Sub:\n    case kArmF64x2Mul:\n    case kArmF64x2Div:\n    case kArmF64x2Min:\n    case kArmF64x2Max:\n    case kArmF64x2Eq:\n    case kArmF64x2Ne:\n    case kArmF64x2Lt:\n    case kArmF64x2Le:\n    case kArmF64x2Qfma:\n    case kArmF64x2Qfms:\n    case kArmF64x2Pmin:\n    case kArmF64x2Pmax:\n    case kArmF64x2Ceil:\n    case kArmF64x2Floor:\n    case kArmF64x2Trunc:\n    case kArmF64x2NearestInt:\n    case kArmF64x2ConvertLowI32x4S:\n    case kArmF64x2ConvertLowI32x4U:\n    case kArmF64x2PromoteLowF32x4:\n    case kArmF32x4Splat:\n    case kArmF32x4ExtractLane:\n    case kArmF32x4ReplaceLane:\n    case kArmF32x4SConvertI32x4:\n    case kArmF32x4UConvertI32x4:\n    case kArmF32x4Abs:\n    case kArmF32x4Neg:\n    case kArmF32x4Sqrt:\n    case kArmF32x4Add:\n    case kArmF32x4Sub:\n    case kArmF32x4Mul:\n    case kArmF32x4Div:\n    case kArmF32x4Min:\n    case kArmF32x4Max:\n    case kArmF32x4Eq:\n    case kArmF32x4Ne:\n    case kArmF32x4Lt:\n    case kArmF32x4Le:\n    case kArmF32x4Qfma:\n    case kArmF32x4Qfms:\n    case kArmF32x4Pmin:\n    case kArmF32x4Pmax:\n    case kArmF32x4DemoteF64x2Zero:\n    case kArmI64x2SplatI32Pair:\n    case kArmI64x2ReplaceLaneI32Pair:\n    case kArmI64x2Abs:\n    case kArmI64x2Neg:\n    case kArmI64x2Shl:\n    case kArmI64x2ShrS:\n    case kArmI64x2Add:\n    case kArmI64x2Sub:\n    case kArmI64x2Mul:\n    case kArmI64x2ShrU:\n    case kArmI64x2BitMask:\n    case kArmI64x2Eq:\n    case kArmI64x2Ne:\n    case kArmI64x2GtS:\n    case kArmI64x2GeS:\n    case kArmI64x2SConvertI32x4Low:\n    case kArmI64x2SConvertI32x4High:\n    case kArmI64x2UConvertI32x4Low:\n    case kArmI64x2UConvertI32x4High:\n    case kArmI32x4Splat:\n    case kArmI32x4ExtractLane:\n    case kArmI32x4ReplaceLane:\n    case kArmI32x4SConvertF32x4:\n    case kArmI32x4SConvertI16x8Low:\n    case kArmI32x4SConvertI16x8High:\n    case kArmI32x4Neg:\n    case kArmI32x4Shl:\n    case kArmI32x4ShrS:\n    case kArmI32x4Add:\n    case kArmI32x4Sub:\n    case kArmI32x4Mul:\n    case kArmI32x4MinS:\n    case kArmI32x4MaxS:\n    case kArmI32x4Eq:\n    case kArmI32x4Ne:\n    case kArmI32x4GtS:\n    case kArmI32x4GeS:\n    case kArmI32x4UConvertF32x4:\n    case kArmI32x4UConvertI16x8Low:\n    case kArmI32x4UConvertI16x8High:\n    case kArmI32x4ShrU:\n    case kArmI32x4MinU:\n    case kArmI32x4MaxU:\n    case kArmI32x4GtU:\n    case kArmI32x4GeU:\n    case kArmI32x4Abs:\n    case kArmI32x4BitMask:\n    case kArmI32x4DotI16x8S:\n    case kArmI16x8DotI8x16S:\n    case kArmI32x4DotI8x16AddS:\n    case kArmI32x4TruncSatF64x2SZero:\n    case kArmI32x4TruncSatF64x2UZero:\n    case kArmI16x8Splat:\n    case kArmI16x8ExtractLaneS:\n    case kArmI16x8ReplaceLane:\n    case kArmI16x8SConvertI8x16Low:\n    case kArmI16x8SConvertI8x16High:\n    case kArmI16x8Neg:\n    case kArmI16x8Shl:\n    case kArmI16x8ShrS:\n    case kArmI16x8SConvertI32x4:\n    case kArmI16x8Add:\n    case kArmI16x8AddSatS:\n    case kArmI16x8Sub:\n    case kArmI16x8SubSatS:\n    case kArmI16x8Mul:\n    case kArmI16x8MinS:\n    case kArmI16x8MaxS:\n    case kArmI16x8Eq:\n    case kArmI16x8Ne:\n    case kArmI16x8GtS:\n    case kArmI16x8GeS:\n    case kArmI16x8ExtractLaneU:\n    case kArmI16x8UConvertI8x16Low:\n    case kArmI16x8UConvertI8x16High:\n    case kArmI16x8ShrU:\n    case kArmI16x8UConvertI32x4:\n    case kArmI16x8AddSatU:\n    case kArmI16x8SubSatU:\n    case kArmI16x8MinU:\n    case kArmI16x8MaxU:\n    case kArmI16x8GtU:\n    case kArmI16x8GeU:\n    case kArmI16x8RoundingAverageU:\n    case kArmI16x8Abs:\n    case kArmI16x8BitMask:\n    case kArmI16x8Q15MulRSatS:\n    case kArmI8x16Splat:\n    case kArmI8x16ExtractLaneS:\n    case kArmI8x16ReplaceLane:\n    case kArmI8x16Neg:\n    case kArmI8x16Shl:\n    case kArmI8x16ShrS:\n    case kArmI8x16SConvertI16x8:\n    case kArmI8x16Add:\n    case kArmI8x16AddSatS:\n    case kArmI8x16Sub:\n    case kArmI8x16SubSatS:\n    case kArmI8x16MinS:\n"
}