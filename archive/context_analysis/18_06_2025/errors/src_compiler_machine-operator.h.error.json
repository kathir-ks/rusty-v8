{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/machine-operator.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/machine-operator.h\",\n        \"file_name\": \"machine-operator.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the MachineOperatorBuilder class and related types for building machine-level operators in V8's compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and V8-specific headers for compiler, codegen, and base functionalities.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/base/compiler-specific.h\"\n#include \"src/base/enum-set.h\"\n#include \"src/base/flags.h\"\n#include \"src/codegen/atomic-memory-order.h\"\n#include \"src/codegen/machine-type.h\"\n#include \"src/compiler/globals.h\"\n#include \"src/compiler/write-barrier-kind.h\"\n#include \"src/zone/zone.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"OptionalOperator\",\n            \"about\": \"Represents an operator that may or may not be supported on all platforms.\",\n            \"attributes\": [\n                {\n                    \"name\": \"supported_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether the operator is supported.\"\n                },\n                {\n                    \"name\": \"op_\",\n                    \"type\": \"const Operator*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The underlying operator.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Operator\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass OptionalOperator final {\n public:\n  OptionalOperator(bool supported, const Operator* op)\n      : supported_(supported), op_(op) {}\n\n  bool IsSupported() const { return supported_; }\n  // Gets the operator only if it is supported.\n  const Operator* op() const {\n    DCHECK(supported_);\n    return op_;\n  }\n  // Always gets the operator, even for unsupported operators. This is useful to\n  // use the operator as a placeholder in a graph, for instance.\n  const Operator* placeholder() const { return op_; }\n\n private:\n  bool supported_;\n  const Operator* const op_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"LoadRepresentationOf\",\n            \"about\": \"Returns the LoadRepresentation (MachineType) of an Operator.\",\n            \"parameters\": [\n                {\n                    \"name\": \"op\",\n                    \"type\": \"Operator const*\",\n                    \"purpose\": \"The operator to get the LoadRepresentation from.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"LoadRepresentation\",\n                \"description\": \"The LoadRepresentation of the operator.\"\n            },\n            \"dependencies\": [\n                \"Operator\",\n                \"LoadRepresentation\",\n                \"MachineType\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE LoadRepresentation LoadRepresentationOf(Operator const*)\n    V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"AtomicLoadParameters\",\n            \"about\": \"Bundles the parameters needed for atomic load operations (LoadRepresentation, AtomicMemoryOrder, MemoryAccessKind).\",\n            \"attributes\": [\n                {\n                    \"name\": \"representation_\",\n                    \"type\": \"LoadRepresentation\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The representation of the data being loaded.\"\n                },\n                {\n                    \"name\": \"order_\",\n                    \"type\": \"AtomicMemoryOrder\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The memory ordering constraints for the atomic load.\"\n                },\n                {\n                    \"name\": \"kind_\",\n                    \"type\": \"MemoryAccessKind\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The memory access kind.\"\n                }\n            ],\n            \"dependencies\": [\n                \"LoadRepresentation\",\n                \"AtomicMemoryOrder\",\n                \"MemoryAccessKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass AtomicLoadParameters final {\n public:\n  AtomicLoadParameters(LoadRepresentation representation,\n                       AtomicMemoryOrder order,\n                       MemoryAccessKind kind = MemoryAccessKind::kNormal)\n      : representation_(representation), order_(order), kind_(kind) {}\n\n  LoadRepresentation representation() const { return representation_; }\n  AtomicMemoryOrder order() const { return order_; }\n  MemoryAccessKind kind() const { return kind_; }\n\n private:\n  LoadRepresentation representation_;\n  AtomicMemoryOrder order_;\n  MemoryAccessKind kind_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for AtomicLoadParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"AtomicLoadParameters\",\n                    \"purpose\": \"First AtomicLoadParameters object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"AtomicLoadParameters\",\n                    \"purpose\": \"Second AtomicLoadParameters object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"AtomicLoadParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE bool operator==(AtomicLoadParameters, AtomicLoadParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator!=\",\n            \"about\": \"Inequality operator for AtomicLoadParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"AtomicLoadParameters\",\n                    \"purpose\": \"First AtomicLoadParameters object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"AtomicLoadParameters\",\n                    \"purpose\": \"Second AtomicLoadParameters object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are not equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"AtomicLoadParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(AtomicLoadParameters, AtomicLoadParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates a hash value for AtomicLoadParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"params\",\n                    \"type\": \"AtomicLoadParameters\",\n                    \"purpose\": \"The AtomicLoadParameters object to hash.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The hash value.\"\n            },\n            \"dependencies\": [\n                \"AtomicLoadParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(AtomicLoadParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for AtomicLoadParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"params\",\n                    \"type\": \"AtomicLoadParameters\",\n                    \"purpose\": \"The AtomicLoadParameters object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"AtomicLoadParameters\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, AtomicLoadParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"AtomicLoadParametersOf\",\n            \"about\": \"Returns the AtomicLoadParameters of an Operator.\",\n            \"parameters\": [\n                {\n                    \"name\": \"op\",\n                    \"type\": \"Operator const*\",\n                    \"purpose\": \"The operator to get the AtomicLoadParameters from.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"AtomicLoadParameters\",\n                \"description\": \"The AtomicLoadParameters of the operator.\"\n            },\n            \"dependencies\": [\n                \"Operator\",\n                \"AtomicLoadParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE AtomicLoadParameters AtomicLoadParametersOf(Operator const*)\n    V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"AtomicOpParameters\",\n            \"about\": \"Bundles the parameters needed for atomic operations (MachineType, MemoryAccessKind).\",\n            \"attributes\": [\n                {\n                    \"name\": \"type_\",\n                    \"type\": \"MachineType\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The type of the data being operated on.\"\n                },\n                {\n                    \"name\": \"kind_\",\n                    \"type\": \"MemoryAccessKind\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The memory access kind.\"\n                }\n            ],\n            \"dependencies\": [\n                \"MachineType\",\n                \"MemoryAccessKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass AtomicOpParameters final {\n public:\n  AtomicOpParameters(MachineType type,\n                      MemoryAccessKind kind = MemoryAccessKind::kNormal)\n      : type_(type), kind_(kind) {}\n\n  MachineType type() const { return type_; }\n  MemoryAccessKind kind() const { return kind_; }\n\n private:\n  MachineType type_;\n  MemoryAccessKind kind_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for AtomicOpParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"AtomicOpParameters\",\n                    \"purpose\": \"First AtomicOpParameters object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"AtomicOpParameters\",\n                    \"purpose\": \"Second AtomicOpParameters object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"AtomicOpParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE bool operator==(AtomicOpParameters, AtomicOpParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator!=\",\n            \"about\": \"Inequality operator for AtomicOpParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"AtomicOpParameters\",\n                    \"purpose\": \"First AtomicOpParameters object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"AtomicOpParameters\",\n                    \"purpose\": \"Second AtomicOpParameters object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are not equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"AtomicOpParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(AtomicOpParameters, AtomicOpParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates a hash value for AtomicOpParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"params\",\n                    \"type\": \"AtomicOpParameters\",\n                    \"purpose\": \"The AtomicOpParameters object to hash.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The hash value.\"\n            },\n            \"dependencies\": [\n                \"AtomicOpParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(AtomicOpParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for AtomicOpParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"params\",\n                    \"type\": \"AtomicOpParameters\",\n                    \"purpose\": \"The AtomicOpParameters object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"AtomicOpParameters\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, AtomicOpParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"AtomicOpParametersOf\",\n            \"about\": \"Returns the AtomicOpParameters of an Operator.\",\n            \"parameters\": [\n                {\n                    \"name\": \"op\",\n                    \"type\": \"Operator const*\",\n                    \"purpose\": \"The operator to get the AtomicOpParameters from.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"AtomicOpParameters\",\n                \"description\": \"The AtomicOpParameters of the operator.\"\n            },\n            \"dependencies\": [\n                \"Operator\",\n                \"AtomicOpParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE AtomicOpParameters AtomicOpParametersOf(Operator const*)\n    V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <interface>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"enum class\",\n            \"name\": \"LoadTransformation\",\n            \"about\": \"Enumerates the different kinds of load transformations supported.\",\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nenum class LoadTransformation {\n  // 128-bit LoadSplats must be first.\n  kS128Load8Splat,\n  kS128Load16Splat,\n  kS128Load32Splat,\n  kS128Load64Splat,\n  kFirst128Splat = kS128Load8Splat,\n  kLast128Splat = kS128Load64Splat,\n  // 128-bit LoadExtend.\n  kS128Load8x8S,\n  kS128Load8x8U,\n  kS128Load16x4S,\n  kS128Load16x4U,\n  kS128Load32x2S,\n  kS128Load32x2U,\n  kFirst128Extend = kS128Load8x8S,\n  kLast128Extend = kS128Load32x2U,\n  kS128Load32Zero,\n  kS128Load64Zero,\n  // 256-bit transformations must be last.\n  kS256Load8Splat,\n  kS256Load16Splat,\n  kS256Load32Splat,\n  kS256Load64Splat,\n  kS256Load8x16S,\n  kS256Load8x16U,\n  kS256Load8x8U,\n  kS256Load16x8S,\n  kS256Load16x8U,\n  kS256Load32x4S,\n  kS256Load32x4U,\n  kFirst256Transform = kS256Load8Splat\n};\n        ]]></code>\n    </interface>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates a hash value for LoadTransformation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"transformation\",\n                    \"type\": \"LoadTransformation\",\n                    \"purpose\": \"The LoadTransformation enum value to hash.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The hash value.\"\n            },\n            \"dependencies\": [\n                \"LoadTransformation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(LoadTransformation);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for LoadTransformation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"transformation\",\n                    \"type\": \"LoadTransformation\",\n                    \"purpose\": \"The LoadTransformation enum value to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"LoadTransformation\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, LoadTransformation);\n        ]]></code>\n    </func>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"LoadTransformParameters\",\n            \"about\": \"Bundles the parameters needed for load transform operations.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kind\",\n                    \"type\": \"MemoryAccessKind\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The memory access kind.\"\n                },\n                {\n                    \"name\": \"transformation\",\n                    \"type\": \"LoadTransformation\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The transformation to apply during the load.\"\n                }\n            ],\n            \"dependencies\": [\n                \"MemoryAccessKind\",\n                \"LoadTransformation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct LoadTransformParameters {\n  MemoryAccessKind kind;\n  LoadTransformation transformation;\n};\n        ]]></code>\n    </struct>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates a hash value for LoadTransformParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"params\",\n                    \"type\": \"LoadTransformParameters\",\n                    \"purpose\": \"The LoadTransformParameters object to hash.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The hash value.\"\n            },\n            \"dependencies\": [\n                \"LoadTransformParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(LoadTransformParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for LoadTransformParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"params\",\n                    \"type\": \"LoadTransformParameters\",\n                    \"purpose\": \"The LoadTransformParameters object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"LoadTransformParameters\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&,\n                                           LoadTransformParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"LoadTransformParametersOf\",\n            \"about\": \"Returns the LoadTransformParameters of an Operator.\",\n            \"parameters\": [\n                {\n                    \"name\": \"op\",\n                    \"type\": \"Operator const*\",\n                    \"purpose\": \"The operator to get the LoadTransformParameters from.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"LoadTransformParameters const&\",\n                \"description\": \"The LoadTransformParameters of the operator.\"\n            },\n            \"dependencies\": [\n                \"Operator\",\n                \"LoadTransformParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE LoadTransformParameters const& LoadTransformParametersOf(\n    Operator const*) V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for LoadTransformParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"LoadTransformParameters\",\n                    \"purpose\": \"First LoadTransformParameters object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"LoadTransformParameters\",\n                    \"purpose\": \"Second LoadTransformParameters object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"LoadTransformParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE bool operator==(LoadTransformParameters,\n                                  LoadTransformParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator!=\",\n            \"about\": \"Inequality operator for LoadTransformParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"LoadTransformParameters\",\n                    \"purpose\": \"First LoadTransformParameters object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"LoadTransformParameters\",\n                    \"purpose\": \"Second LoadTransformParameters object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are not equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"LoadTransformParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(LoadTransformParameters, LoadTransformParameters);\n        ]]></code>\n    </func>\n    <struct>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"LoadLaneParameters\",\n            \"about\": \"Bundles the parameters needed for lane load operations.\",\n            \"attributes\": [\n                {\n                    \"name\": \"kind\",\n                    \"type\": \"MemoryAccessKind\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The memory access kind.\"\n                },\n                {\n                    \"name\": \"rep\",\n                    \"type\": \"LoadRepresentation\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The load representation.\"\n                },\n                {\n                    \"name\": \"laneidx\",\n                    \"type\": \"uint8_t\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The index of the lane to load.\"\n                }\n            ],\n            \"dependencies\": [\n                \"MemoryAccessKind\",\n                \"LoadRepresentation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct LoadLaneParameters {\n  MemoryAccessKind kind;\n  LoadRepresentation rep;\n  uint8_t laneidx;\n};\n        ]]></code>\n    </struct>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for LoadLaneParameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"params\",\n                    \"type\": \"LoadLaneParameters\",\n                    \"purpose\": \"The LoadLaneParameters object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"LoadLaneParameters\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, LoadLaneParameters);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"LoadLaneParametersOf\",\n            \"about\": \"Returns the LoadLaneParameters of an Operator.\",\n            \"parameters\": [\n                {\n                    \"name\": \"op\",\n                    \"type\": \"Operator const*\",\n                    \"purpose\": \"The operator to get the LoadLaneParameters from.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"LoadLaneParameters const&\",\n                \"description\": \"The LoadLaneParameters of the operator.\"\n            },\n            \"dependencies\": [\n                \"Operator\",\n                \"LoadLaneParameters\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE LoadLaneParameters const& LoadLaneParametersOf(\n    Operator const*) V8_WARN_UNUSED_RESULT;\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"StoreRepresentation\",\n            \"about\": \"Bundles the parameters needed for store operations (MachineRepresentation, WriteBarrierKind).\",\n            \"attributes\": [\n                {\n                    \"name\": \"representation_\",\n                    \"type\": \"MachineRepresentation\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The representation of the data being stored.\"\n                },\n                {\n                    \"name\": \"write_barrier_kind_\",\n                    \"type\": \"WriteBarrierKind\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The write barrier kind for the store.\"\n                }\n            ],\n            \"dependencies\": [\n                \"MachineRepresentation\",\n                \"WriteBarrierKind\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass StoreRepresentation final {\n public:\n  StoreRepresentation(MachineRepresentation representation,\n                      WriteBarrierKind write_barrier_kind)\n      : representation_(representation),\n        write_barrier_kind_(write_barrier_kind) {}\n\n  MachineRepresentation representation() const { return representation_; }\n  WriteBarrierKind write_barrier_kind() const { return write_barrier_kind_; }\n\n private:\n  MachineRepresentation representation_;\n  WriteBarrierKind write_barrier_kind_;\n};\n        ]]></code>\n    </class>\n     <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"StorePairRepresentation\",\n            \"extends\": \"std::pair<StoreRepresentation, StoreRepresentation>\",\n            \"about\": \"Represents a pair of StoreRepresentations.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"StoreRepresentation\",\n                \"std::pair\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct StorePairRepresentation final\n    : public std::pair<StoreRepresentation, StoreRepresentation> {\n  StorePairRepresentation(StoreRepresentation first, StoreRepresentation second)\n      : std::pair<StoreRepresentation, StoreRepresentation>(first, second) {}\n  friend std::ostream& operator<<(std::ostream& out,\n                                  const StorePairRepresentation rep);\n};\n        ]]></code>\n    </class>\n   <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for StorePairRepresentation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"out\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"rep\",\n                    \"type\": \"const StorePairRepresentation\",\n                    \"purpose\": \"The StorePairRepresentation object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"StorePairRepresentation\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  friend std::ostream& operator<<(std::ostream& out,\n                                  const StorePairRepresentation rep);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for StoreRepresentation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"StoreRepresentation\",\n                    \"purpose\": \"First StoreRepresentation object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"StoreRepresentation\",\n                    \"purpose\": \"Second StoreRepresentation object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"StoreRepresentation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE bool operator==(StoreRepresentation, StoreRepresentation);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator!=\",\n            \"about\": \"Inequality operator for StoreRepresentation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"StoreRepresentation\",\n                    \"purpose\": \"First StoreRepresentation object\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"StoreRepresentation\",\n                    \"purpose\": \"Second StoreRepresentation object\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the parameters are not equal, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"StoreRepresentation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(StoreRepresentation, StoreRepresentation);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates a hash value for StoreRepresentation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"rep\",\n                    \"type\": \"StoreRepresentation\",\n                    \"purpose\": \"The StoreRepresentation object to hash.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The hash value.\"\n            },\n            \"dependencies\": [\n                \"StoreRepresentation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(StoreRepresentation);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Stream insertion operator for StoreRepresentation.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"rep\",\n                    \"type\": \"StoreRepresentation\",\n                    \"purpose\": \"The StoreRepresentation object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The modified output stream.\"\n            },\n            \"dependencies\": [\n                \"StoreRepresentation"
}