{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/temporal/temporal-parser.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/temporal/temporal-parser.cc\",\n        \"file_name\": \"temporal-parser.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Implements parsing of Temporal-related ISO 8601 strings, including date/time, timezones, and durations.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for temporal parsing, optional values, base utilities, string manipulation, and character predicates.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/temporal/temporal-parser.h\"\n\n#include <optional>\n\n#include \"src/base/bounds.h\"\n#include \"src/objects/string-inl.h\"\n#include \"src/strings/char-predicates-inl.h\"\n        ]]></code>\n    </imports>\n\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"v8::internal\",\n            \"purpose\": \"Encloses the temporal parser implementation within the v8 internal namespace.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace v8::internal {\n        ]]></code>\n    </namespace>\n\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"v8::internal anonymous namespace\",\n            \"purpose\": \"Encloses utility functions and constants within an anonymous namespace for file-local scope.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace {\n        ]]></code>\n    </namespace>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsTZLeadingChar\",\n            \"about\": \"Checks if a Unicode code point is a valid leading character for a Time Zone name component (TZLeadingChar production).\",\n            \"logic\": \"Checks if the character is an ASCII letter (case-insensitive), a period, or an underscore.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid leading character, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"base::IsInRange\",\n                \"AsciiAlphaToLower\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsTZLeadingChar(base::uc32 c) {\n  return base::IsInRange(AsciiAlphaToLower(c), 'a', 'z') || c == '.' ||\n         c == '_';\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsTZChar\",\n            \"about\": \"Checks if a Unicode code point is a valid character for a Time Zone name component (TZChar production).\",\n            \"logic\": \"Checks if the character is a valid leading character or a hyphen.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid time zone character, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"IsTZLeadingChar\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsTZChar(base::uc32 c) {\n  return IsTZLeadingChar(c) || c == '-';\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsDecimalSeparator\",\n            \"about\": \"Checks if a Unicode code point is a valid decimal separator (DecimalSeparator production).\",\n            \"logic\": \"Checks if the character is a period or a comma.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid decimal separator, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsDecimalSeparator(base::uc32 c) {\n  return c == '.' || c == ',';\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsDateTimeSeparator\",\n            \"about\": \"Checks if a Unicode code point is a valid date/time separator (DateTimeSeparator production).\",\n            \"logic\": \"Checks if the character is a space or 't' (case-insensitive).\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid date/time separator, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"AsciiAlphaToLower\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsDateTimeSeparator(base::uc32 c) {\n  return c == ' ' || AsciiAlphaToLower(c) == 't';\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsAsciiSign\",\n            \"about\": \"Checks if a Unicode code point is a valid ASCII sign (+ or -).\",\n            \"logic\": \"Checks if the character is a hyphen or a plus sign.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid ASCII sign, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsAsciiSign(base::uc32 c) { return c == '-' || c == '+'; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsSign\",\n            \"about\": \"Checks if a Unicode code point is a valid sign (ASCII or Unicode minus sign).\",\n            \"logic\": \"Checks if the character is the Unicode minus sign (U+2212) or an ASCII sign.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid sign, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"IsAsciiSign\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsSign(base::uc32 c) {\n  return c == 0x2212 || IsAsciiSign(c);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsTimeZoneUTCOffsetSign\",\n            \"about\": \"Checks if a Unicode code point is a valid sign for a Time Zone UTC offset.\",\n            \"logic\": \"Checks if the character is a valid sign.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the character is a valid time zone UTC offset sign, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"IsSign\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr bool IsTimeZoneUTCOffsetSign(base::uc32 c) {\n  return IsSign(c);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"CanonicalSign\",\n            \"about\": \"Converts the Unicode minus sign (U+2212) to the ASCII hyphen (-).\",\n            \"logic\": \"If the character is the Unicode minus sign, it returns the ASCII hyphen; otherwise, it returns the character unchanged.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The Unicode code point to check.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"base::uc32\",\n                \"description\": \"The canonicalized sign.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr base::uc32 CanonicalSign(base::uc32 c) {\n  return c == 0x2212 ? '-' : c;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ToInt\",\n            \"about\": \"Converts a digit character to its integer value.\",\n            \"logic\": \"Subtracts the ASCII value of '0' from the character.\",\n            \"parameters\": [\n                {\n                    \"name\": \"c\",\n                    \"type\": \"base::uc32\",\n                    \"purpose\": \"The digit character to convert.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"The integer value of the digit.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\ninline constexpr int32_t ToInt(base::uc32 c) { return c - '0'; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"HasTwoDigits\",\n            \"about\": \"Checks if a string has at least two digits starting from a given position.\",\n            \"logic\": \"Checks if the string length is sufficient and if the characters at the given position and the next are decimal digits.  If true, calculates the integer value and stores it in out.\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if two digits are found, false otherwise.\"\n            },\n            \"dependencies\": [\n                \"IsDecimalDigit\",\n                \"ToInt\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nbool HasTwoDigits(base::Vector<Char> str, int32_t s, int32_t* out) {\n  if (str.length() >= (s + 2) && IsDecimalDigit(str[s]) &&\n      IsDecimalDigit(str[s + 1])) {\n    *out = ToInt(str[s]) * 10 + ToInt(str[s + 1]);\n    return true;\n  }\n  return false;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanTwoDigitsExpectValue\",\n            \"about\": \"Checks if a string has two digits starting from a given position and if their integer value matches an expected value.\",\n            \"logic\": \"Uses HasTwoDigits to check for two digits, then verifies if the resulting integer equals the expected value.\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"expected\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The expected integer value.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"2 if two digits are found and their value matches the expected value, 0 otherwise.\"\n            },\n            \"dependencies\": [\n                \"HasTwoDigits\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanTwoDigitsExpectValue(base::Vector<Char> str, int32_t s,\n                                 int32_t expected, int32_t* out) {\n  return HasTwoDigits<Char>(str, s, out) && (*out == expected) ? 2 : 0;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanTwoDigitsExpectRange\",\n            \"about\": \"Checks if a string has two digits starting from a given position and if their integer value falls within a specified range.\",\n            \"logic\": \"Uses HasTwoDigits to check for two digits, then verifies if the resulting integer is within the specified range (inclusive).\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"min\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The minimum allowed integer value.\"\n                },\n                {\n                    \"name\": \"max\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The maximum allowed integer value.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"2 if two digits are found and their value is within the range, 0 otherwise.\"\n            },\n            \"dependencies\": [\n                \"HasTwoDigits\",\n                \"base::IsInRange\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanTwoDigitsExpectRange(base::Vector<Char> str, int32_t s, int32_t min,\n                                 int32_t max, int32_t* out) {\n  return HasTwoDigits<Char>(str, s, out) && base::IsInRange(*out, min, max) ? 2\n                                                                            : 0;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanTwoDigitsExpectZeroOrRange\",\n            \"about\": \"Checks if a string has two digits starting from a given position and if their integer value is either 0 or falls within a specified range.\",\n            \"logic\": \"Uses HasTwoDigits to check for two digits, then verifies if the resulting integer is 0 or within the specified range (inclusive).\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"min\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The minimum allowed integer value.\"\n                },\n                {\n                    \"name\": \"max\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The maximum allowed integer value.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"2 if two digits are found and their value is either 0 or within the range, 0 otherwise.\"\n            },\n            \"dependencies\": [\n                \"HasTwoDigits\",\n                \"base::IsInRange\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanTwoDigitsExpectZeroOrRange(base::Vector<Char> str, int32_t s,\n                                       int32_t min, int32_t max, int32_t* out) {\n  return HasTwoDigits<Char>(str, s, out) &&\n                 (*out == 0 || base::IsInRange(*out, min, max))\n             ? 2\n             : 0;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanHour\",\n            \"about\": \"Scans for the Hour production which is represented by two digits between the range of 0-23\",\n            \"logic\": \"Uses ScanTwoDigitsExpectRange to check if there are two digits between the range of 0-23\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"2 if two digits are found and their value is within the range, 0 otherwise.\"\n            },\n            \"dependencies\": [\n                \"ScanTwoDigitsExpectRange\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanHour(base::Vector<Char> str, int32_t s, int32_t* out) {\n  return ScanTwoDigitsExpectRange<Char>(str, s, 0, 23, out);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanUnpaddedHour\",\n            \"about\": \"Scans for the UnpaddedHour production which is represented by either 1 digit or two digits between the range of 10-23\",\n            \"logic\": \"Uses ScanTwoDigitsExpectRange to check if there are two digits between the range of 10-23. Also checks if it is a single decimal digit\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"length of matched text or 0 if it did not match.\"\n            },\n            \"dependencies\": [\n                \"ScanTwoDigitsExpectRange\",\n                \"IsDecimalDigit\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanUnpaddedHour(base::Vector<Char> str, int32_t s) {\n  int32_t dummy;\n  int32_t len = ScanTwoDigitsExpectRange<Char>(str, s, 10, 23, &dummy);\n  if (len > 0) return len;\n  if (str.length() >= (s + 1) && IsDecimalDigit(str[s])) return 1;\n  return 0;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanMinuteSecond\",\n            \"about\": \"Scans for the MinuteSecond production which is represented by two digits between the range of 0-59\",\n            \"logic\": \"Uses ScanTwoDigitsExpectRange to check if there are two digits between the range of 0-59\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"2 if two digits are found and their value is within the range, 0 otherwise.\"\n            },\n            \"dependencies\": [\n                \"ScanTwoDigitsExpectRange\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanMinuteSecond(base::Vector<Char> str, int32_t s, int32_t* out) {\n  return ScanTwoDigitsExpectRange<Char>(str, s, 0, 59, out);\n}\n        ]]></code>\n    </func>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"SCAN_FORWARD\",\n            \"about\": \"Defines a SCAN function that forwards to another SCAN function.\",\n            \"logic\": \"Creates a function Scan##B that calls Scan##T with the same parameters.\",\n            \"parameters\": [\n                {\n                    \"name\": \"B\",\n                    \"type\": \"identifier\",\n                    \"purpose\": \"The name of the SCAN function to define.\"\n                },\n                {\n                    \"name\": \"T\",\n                    \"type\": \"identifier\",\n                    \"purpose\": \"The name of the SCAN function to forward to.\"\n                },\n                {\n                    \"name\": \"R\",\n                    \"type\": \"type\",\n                    \"purpose\": \"The type of the output parameter.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#define SCAN_FORWARD(B, T, R)                                \\\n  template <typename Char>                                   \\\n  int32_t Scan##B(base::Vector<Char> str, int32_t s, R* r) { \\\n    return Scan##T(str, s, r);                               \\\n  }\n        ]]></code>\n    </macro>\n\n    <macro>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"SCAN_EITHER_FORWARD\",\n            \"about\": \"Defines a SCAN function that tries two other SCAN functions and returns the length of the first one that succeeds.\",\n            \"logic\": \"Creates a function Scan##B that first calls Scan##T1. If that fails, it calls Scan##T2.\",\n            \"parameters\": [\n                {\n                    \"name\": \"B\",\n                    \"type\": \"identifier\",\n                    \"purpose\": \"The name of the SCAN function to define.\"\n                },\n                {\n                    \"name\": \"T1\",\n                    \"type\": \"identifier\",\n                    \"purpose\": \"The name of the first SCAN function to try.\"\n                },\n                {\n                    \"name\": \"T2\",\n                    \"type\": \"identifier\",\n                    \"purpose\": \"The name of the second SCAN function to try.\"\n                },\n                {\n                    \"name\": \"R\",\n                    \"type\": \"type\",\n                    \"purpose\": \"The type of the output parameter.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n#define SCAN_EITHER_FORWARD(B, T1, T2, R)                    \\\n  template <typename Char>                                   \\\n  int32_t Scan##B(base::Vector<Char> str, int32_t s, R* r) { \\\n    int32_t len;                                             \\\n    if ((len = Scan##T1(str, s, r)) > 0) return len;         \\\n    return Scan##T2(str, s, r);                              \\\n  }\n        ]]></code>\n    </macro>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanTimeSecond\",\n            \"about\": \"Scans for the TimeSecond production which is represented by two digits between the range of 0-60\",\n            \"logic\": \"Uses ScanTwoDigitsExpectRange to check if there are two digits between the range of 0-60\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"2 if two digits are found and their value is within the range, 0 otherwise.\"\n            },\n            \"dependencies\": [\n                \"ScanTwoDigitsExpectRange\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanTimeSecond(base::Vector<Char> str, int32_t s, int32_t* out) {\n  return ScanTwoDigitsExpectRange<Char>(str, s, 0, 60, out);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanFractionalPart\",\n            \"about\": \"Scans for the FractionalPart production which is represented by 1-9 digits\",\n            \"logic\": \"The function parses as many digits as possible until it hits the end of the string, reaches 9 digits, or finds a non-digit character. The resulting integer is then scaled by a power of 10 to represent the fractional part\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"length of matched text or 0 if it did not match.\"\n            },\n            \"dependencies\": [\n                \"IsDecimalDigit\",\n                \"ToInt\",\n                \"kPowerOfTen\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanFractionalPart(base::Vector<Char> str, int32_t s, int32_t* out) {\n  int32_t cur = s;\n  if ((str.length() < (cur + 1)) || !IsDecimalDigit(str[cur])) return 0;\n  *out = ToInt(str[cur++]);\n  while ((cur < str.length()) && ((cur - s) < 9) && IsDecimalDigit(str[cur])) {\n    *out = 10 * (*out) + ToInt(str[cur++]);\n  }\n  *out *= kPowerOfTen[9 - (cur - s)];\n  return cur - s;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanFraction\",\n            \"about\": \"Scans for the Fraction production which is represented by DecimalSeparator followed by FractionalPart\",\n            \"logic\": \"Checks for DecimalSeparator and then it looks for a fractional part. The total length of matches are returned\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int32_t\",\n                \"description\": \"length of matched text or 0 if it did not match.\"\n            },\n            \"dependencies\": [\n                \"IsDecimalSeparator\",\n                \"ScanFractionalPart\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Char>\nint32_t ScanFraction(base::Vector<Char> str, int32_t s, int32_t* out) {\n  if ((str.length() < (s + 2)) || (!IsDecimalSeparator(str[s]))) return 0;\n  int32_t len;\n  if ((len = ScanFractionalPart(str, s + 1, out)) == 0) return 0;\n  return len + 1;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"ScanTimeFraction\",\n            \"signatures\": [\n                {\n                    \"parameters\": [\n                        {\n                            \"name\": \"str\",\n                            \"type\": \"base::Vector<Char>\",\n                            \"purpose\": \"The string to check.\"\n                        },\n                        {\n                            \"name\": \"s\",\n                            \"type\": \"int32_t\",\n                            \"purpose\": \"The starting position.\"\n                        },\n                        {\n                            \"name\": \"out\",\n                            \"type\": \"int32_t*\",\n                            \"purpose\": \"A pointer to store the resulting integer value.\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"int32_t\",\n                        \"description\": \"length of matched text or 0 if it did not match.\"\n                    },\n                    \"dependencies\": [\n                        \"IsDecimalSeparator\",\n                        \"ScanTimeFractionalPart\"\n                    ]\n                },\n                {\n                    \"parameters\": [\n                        {\n                            \"name\": \"str\",\n                            \"type\": \"base::Vector<Char>\",\n                            \"purpose\": \"The string to check.\"\n                        },\n                        {\n                            \"name\": \"s\",\n                            \"type\": \"int32_t\",\n                            \"purpose\": \"The starting position.\"\n                        },\n                        {\n                            \"name\": \"r\",\n                            \"type\": \"ParsedISO8601Result*\",\n                            \"purpose\": \"A pointer to store the resulting integer value.\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"int32_t\",\n                        \"description\": \"length of matched text or 0 if it did not match.\"\n                    },\n                    \"dependencies\": [\n                        \"ScanTimeFraction\"\n                    ]\n                }\n            ],\n            \"about\": \"Scans for the TimeFraction production which is represented by DecimalSeparator followed by TimeFractionalPart\",\n            \"logic\": \"Checks for DecimalSeparator and then it looks for a TimeFractional part. The total length of matches are returned\",\n            \"parameters\": [\n                {\n                    \"name\": \"str\",\n                    \"type\": \"base::Vector<Char>\",\n                    \"purpose\": \"The string to check.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The starting position.\"\n                },\n                {\n                    \"name\": \"out\",\n                    \"type\": \"int32_t*\",\n                    \"purpose\": \"A pointer to store the resulting integer value.\"\n                }\n"
}