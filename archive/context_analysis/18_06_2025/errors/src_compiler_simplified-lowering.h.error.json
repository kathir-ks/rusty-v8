{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/simplified-lowering.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 77, column 58",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/simplified-lowering.h\",\n        \"file_name\": \"simplified-lowering.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the SimplifiedLowering class, which lowers simplified operations in the compiler graph to more machine-specific operations.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary header files for compiler components like JSGraph, MachineOperator, NodeProperties, Node, and SimplifiedOperator.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/js-graph.h\"\n#include \"src/compiler/machine-operator.h\"\n#include \"src/compiler/node-properties.h\"\n#include \"src/compiler/node.h\"\n#include \"src/compiler/simplified-operator.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SimplifiedLowering\",\n            \"about\": \"Lowers simplified operations in the compiler graph to more machine-specific operations. This class is the main entry point for the lowering phase.\",\n            \"attributes\": [\n                {\n                    \"name\": \"jsgraph_\",\n                    \"type\": \"JSGraph*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the JSGraph, providing access to the graph structure.\"\n                },\n                {\n                    \"name\": \"broker_\",\n                    \"type\": \"JSHeapBroker*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the JSHeapBroker, providing access to the heap.\"\n                },\n                {\n                    \"name\": \"zone_\",\n                    \"type\": \"Zone*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the memory zone, used for allocating memory.\"\n                },\n                {\n                    \"name\": \"type_cache_\",\n                    \"type\": \"TypeCache const*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the TypeCache, used for caching type information.\"\n                },\n                                {\n                    \"name\": \"to_number_code_\",\n                    \"type\": \"SetOncePointer<Node>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Caches the ToNumber code node.\"\n                },\n                {\n                    \"name\": \"to_number_convert_big_int_code_\",\n                    \"type\": \"SetOncePointer<Node>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Caches the ToNumberConvertBigInt code node.\"\n                },\n                {\n                    \"name\": \"to_numeric_code_\",\n                    \"type\": \"SetOncePointer<Node>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Caches the ToNumeric code node.\"\n                },\n                {\n                    \"name\": \"to_number_operator_\",\n                    \"type\": \"SetOncePointer<Operator const>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Caches the ToNumber operator.\"\n                },\n                {\n                    \"name\": \"to_number_convert_big_int_operator_\",\n                    \"type\": \"SetOncePointer<Operator const>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Caches the ToNumberConvertBigInt operator.\"\n                },\n                {\n                    \"name\": \"to_numeric_operator_\",\n                    \"type\": \"SetOncePointer<Operator const>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Caches the ToNumeric operator.\"\n                },\n                {\n                    \"name\": \"source_positions_\",\n                    \"type\": \"SourcePositionTable*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the source position table, providing source position information for nodes.\"\n                },\n                {\n                    \"name\": \"node_origins_\",\n                    \"type\": \"NodeOriginTable*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the node origin table.\"\n                },\n                {\n                    \"name\": \"tick_counter_\",\n                    \"type\": \"TickCounter* const\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the TickCounter, used for performance measurements.\"\n                },\n                {\n                    \"name\": \"linkage_\",\n                    \"type\": \"Linkage* const\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the Linkage object, describing the calling conventions.\"\n                },\n                {\n                    \"name\": \"info_\",\n                    \"type\": \"OptimizedCompilationInfo*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the OptimizedCompilationInfo, providing information about the compilation.\"\n                },\n                {\n                    \"name\": \"observe_node_manager_\",\n                    \"type\": \"ObserveNodeManager* const\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the ObserveNodeManager, used for observing nodes.\"\n                }\n            ],\n            \"dependencies\": [\n                \"JSGraph\",\n                \"JSHeapBroker\",\n                \"Zone\",\n                \"SourcePositionTable\",\n                \"NodeOriginTable\",\n                \"TickCounter\",\n                \"Linkage\",\n                \"OptimizedCompilationInfo\",\n                \"ObserveNodeManager\",\n                \"Node\",\n                \"Operator\",\n                \"RepresentationSelector\",\n                \"TypeCache\",\n                \"SetOncePointer\",\n                \"Isolate\",\n                \"TFGraph\",\n                \"CommonOperatorBuilder\",\n                \"MachineOperatorBuilder\",\n                \"SimplifiedOperatorBuilder\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE SimplifiedLowering final {\n public:\n  SimplifiedLowering(JSGraph* jsgraph, JSHeapBroker* broker, Zone* zone,\n                     SourcePositionTable* source_position,\n                     NodeOriginTable* node_origins, TickCounter* tick_counter,\n                     Linkage* linkage, OptimizedCompilationInfo* info,\n                     ObserveNodeManager* observe_node_manager = nullptr);\n  ~SimplifiedLowering() = default;\n\n  void LowerAllNodes();\n\n  void DoMax(Node* node, Operator const* op, MachineRepresentation rep);\n  void DoMin(Node* node, Operator const* op, MachineRepresentation rep);\n  void DoJSToNumberOrNumericTruncatesToFloat64(\n      Node* node, RepresentationSelector* selector);\n  void DoJSToNumberOrNumericTruncatesToWord32(Node* node,\n                                              RepresentationSelector* selector);\n  void DoIntegral32ToBit(Node* node);\n  void DoOrderedNumberToBit(Node* node);\n  void DoNumberToBit(Node* node);\n  void DoIntegerToUint8Clamped(Node* node);\n  void DoNumberToUint8Clamped(Node* node);\n  void DoSigned32ToUint8Clamped(Node* node);\n  void DoUnsigned32ToUint8Clamped(Node* node);\n\n private:\n  // The purpose of this nested class is to hide method\n  // v8::internal::compiler::NodeProperties::ChangeOp which should not be\n  // directly used by code in SimplifiedLowering.\n  // SimplifiedLowering code should call SimplifiedLowering::ChangeOp instead,\n  // in order to notify the changes to ObserveNodeManager and support the\n  // %ObserveNode intrinsic.\n  class NodeProperties : public compiler::NodeProperties {\n    static void ChangeOp(Node* node, const Operator* new_op) { UNREACHABLE(); }\n  };\n  void ChangeOp(Node* node, const Operator* new_op);\n\n  JSGraph* const jsgraph_;\n  JSHeapBroker* broker_;\n  Zone* const zone_;\n  TypeCache const* type_cache_;\n  SetOncePointer<Node> to_number_code_;\n  SetOncePointer<Node> to_number_convert_big_int_code_;\n  SetOncePointer<Node> to_numeric_code_;\n  SetOncePointer<Operator const> to_number_operator_;\n  SetOncePointer<Operator const> to_number_convert_big_int_operator_;\n  SetOncePointer<Operator const> to_numeric_operator_;\n\n  // TODO(danno): SimplifiedLowering shouldn't know anything about the source\n  // positions table, but must for now since there currently is no other way to\n  // pass down source position information to nodes created during\n  // lowering. Once this phase becomes a vanilla reducer, it should get source\n  // position information via the SourcePositionWrapper like all other reducers.\n  SourcePositionTable* source_positions_;\n  NodeOriginTable* node_origins_;\n\n  TickCounter* const tick_counter_;\n  Linkage* const linkage_;\n  OptimizedCompilationInfo* info_;\n\n  ObserveNodeManager* const observe_node_manager_;\n\n  Node* Float64Round(Node* const node);\n  Node* Float64Sign(Node* const node);\n  Node* Int32Abs(Node* const node);\n  Node* Int32Div(Node* const node);\n  Node* Int32Mod(Node* const node);\n  Node* Int32Sign(Node* const node);\n  Node* Uint32Div(Node* const node);\n  Node* Uint32Mod(Node* const node);\n\n  Node* ToNumberCode();\n  Node* ToNumberConvertBigIntCode();\n  Node* ToNumericCode();\n  Node* Ieee754Fp64ToFp16RawBitsCode();\n  Operator const* ToNumberOperator();\n  Operator const* ToNumberConvertBigIntOperator();\n  Operator const* ToNumericOperator();\n  Operator const* Ieee754Fp64ToFp16RawBitsOperator();\n\n  friend class RepresentationSelector;\n\n  Isolate* isolate() { return jsgraph_->isolate(); }\n  Zone* zone() { return jsgraph_->zone(); }\n  JSGraph* jsgraph() { return jsgraph_; }\n  TFGraph* graph() { return jsgraph()->graph(); }\n  CommonOperatorBuilder* common() { return jsgraph()->common(); }\n  MachineOperatorBuilder* machine() { return jsgraph()->machine(); }\n  SimplifiedOperatorBuilder* simplified() { return jsgraph()->simplified(); }\n  Linkage* linkage() { return linkage_; }\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"NodeProperties\",\n            \"about\": \"A nested class to hide the ChangeOp method of the parent NodeProperties class.  This ensures SimplifiedLowering uses its own ChangeOp for observation purposes.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"compiler::NodeProperties\",\n                \"Node\",\n                \"Operator\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  class NodeProperties : public compiler::NodeProperties {\n    static void ChangeOp(Node* node, const Operator* new_op) { UNREACHABLE(); }\n  };\n        ]]></code>\n    </class>\n</file>\n```"
}