{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/tasks/task-utils.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 31, column 79",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/tasks/task-utils.cc\",\n        \"file_name\": \"task-utils.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides utility functions for creating cancelable tasks (both regular and idle) using std::function.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for task management and function objects.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/tasks/task-utils.h\"\n\n#include \"src/tasks/cancelable-task.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CancelableFuncTask\",\n            \"extends\": \"CancelableTask\",\n            \"about\": \"A concrete CancelableTask that wraps a std::function<void()>.\",\n            \"attributes\": [\n                {\n                    \"name\": \"func_\",\n                    \"type\": \"std::function<void()>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The function to be executed when the task runs.\"\n                }\n            ],\n            \"dependencies\": [\n                \"CancelableTask\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass CancelableFuncTask final : public CancelableTask {\n public:\n  CancelableFuncTask(Isolate* isolate, std::function<void()> func)\n      : CancelableTask(isolate), func_(std::move(func)) {}\n  CancelableFuncTask(CancelableTaskManager* manager, std::function<void()> func)\n      : CancelableTask(manager), func_(std::move(func)) {}\n  void RunInternal() final { func_(); }\n\n private:\n  const std::function<void()> func_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CancelableIdleFuncTask\",\n            \"extends\": \"CancelableIdleTask\",\n            \"about\": \"A concrete CancelableIdleTask that wraps a std::function<void(double)>.\",\n            \"attributes\": [\n                {\n                    \"name\": \"func_\",\n                    \"type\": \"std::function<void(double)>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The function to be executed when the idle task runs.\"\n                }\n            ],\n            \"dependencies\": [\n                \"CancelableIdleTask\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass CancelableIdleFuncTask final : public CancelableIdleTask {\n public:\n  CancelableIdleFuncTask(Isolate* isolate, std::function<void(double)> func)\n      : CancelableIdleTask(isolate), func_(std::move(func)) {}\n  CancelableIdleFuncTask(CancelableTaskManager* manager,\n                         std::function<void(double)> func)\n      : CancelableIdleTask(manager), func_(std::move(func)) {}\n  void RunInternal(double deadline_in_seconds) final {\n    func_(deadline_in_seconds);\n  }\n\n private:\n  const std::function<void(double)> func_;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"MakeCancelableTask\",\n            \"about\": \"Creates a CancelableTask from a std::function<void()>\",\n            \"logic\": \"Uses std::make_unique to create a CancelableFuncTask and returns a unique pointer to it.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The isolate to associate the task with.\"\n                },\n                {\n                    \"name\": \"func\",\n                    \"type\": \"std::function<void()>\",\n                    \"purpose\": \"The function to be executed by the task.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<CancelableTask>\",\n                \"description\": \"A unique pointer to the newly created CancelableTask.\"\n            },\n            \"dependencies\": [\n                \"CancelableTask\",\n                \"CancelableFuncTask\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableTask> MakeCancelableTask(Isolate* isolate,\n                                                   std::function<void()> func) {\n  return std::make_unique<CancelableFuncTask>(isolate, std::move(func));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"MakeCancelableTask\",\n            \"about\": \"Creates a CancelableTask from a std::function<void()>, associated with a CancelableTaskManager.\",\n            \"logic\": \"Uses std::make_unique to create a CancelableFuncTask and returns a unique pointer to it.\",\n            \"parameters\": [\n                {\n                    \"name\": \"manager\",\n                    \"type\": \"CancelableTaskManager*\",\n                    \"purpose\": \"The manager to associate the task with.\"\n                },\n                {\n                    \"name\": \"func\",\n                    \"type\": \"std::function<void()>\",\n                    \"purpose\": \"The function to be executed by the task.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<CancelableTask>\",\n                \"description\": \"A unique pointer to the newly created CancelableTask.\"\n            },\n            \"dependencies\": [\n                \"CancelableTask\",\n                \"CancelableFuncTask\",\n                \"CancelableTaskManager\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableTask> MakeCancelableTask(\n    CancelableTaskManager* manager, std::function<void()> func) {\n  return std::make_unique<CancelableFuncTask>(manager, std::move(func));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"MakeCancelableIdleTask\",\n            \"about\": \"Creates a CancelableIdleTask from a std::function<void(double)>.\",\n            \"logic\": \"Uses std::make_unique to create a CancelableIdleFuncTask and returns a unique pointer to it.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The isolate to associate the task with.\"\n                },\n                {\n                    \"name\": \"func\",\n                    \"type\": \"std::function<void(double)>\",\n                    \"purpose\": \"The function to be executed by the idle task. Takes the deadline as an argument.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<CancelableIdleTask>\",\n                \"description\": \"A unique pointer to the newly created CancelableIdleTask.\"\n            },\n            \"dependencies\": [\n                \"CancelableIdleTask\",\n                \"CancelableIdleFuncTask\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableIdleTask> MakeCancelableIdleTask(\n    Isolate* isolate, std::function<void(double)> func) {\n  return std::make_unique<CancelableIdleFuncTask>(isolate, std::move(func));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"MakeCancelableIdleTask\",\n            \"about\": \"Creates a CancelableIdleTask from a std::function<void(double)>, associated with a CancelableTaskManager.\",\n            \"logic\": \"Uses std::make_unique to create a CancelableIdleFuncTask and returns a unique pointer to it.\",\n            \"parameters\": [\n                {\n                    \"name\": \"manager\",\n                    \"type\": \"CancelableTaskManager*\",\n                    \"purpose\": \"The manager to associate the task with.\"\n                },\n                {\n                    \"name\": \"func\",\n                    \"type\": \"std::function<void(double)>\",\n                    \"purpose\": \"The function to be executed by the idle task. Takes the deadline as an argument.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<CancelableIdleTask>\",\n                \"description\": \"A unique pointer to the newly created CancelableIdleTask.\"\n            },\n            \"dependencies\": [\n                \"CancelableIdleTask\",\n                \"CancelableIdleFuncTask\",\n                \"CancelableTaskManager\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableIdleTask> MakeCancelableIdleTask(\n    CancelableTaskManager* manager, std::function<void(double)> func) {\n  return std::make_unique<CancelableIdleFuncTask>(manager, std::move(func));\n}\n        ]]></code>\n    </func>\n</file>\n```"
}