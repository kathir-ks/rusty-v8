{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/wasm-call-descriptors.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 68, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/wasm-call-descriptors.h\",\n        \"file_name\": \"wasm-call-descriptors.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the WasmCallDescriptors class, which provides call descriptors for WebAssembly runtime calls, especially those involving BigInts.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and V8-specific headers for memory management, global definitions, and compiler components.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <memory>\n\n#include \"src/common/globals.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"WasmCallDescriptors\",\n            \"about\": \"Provides access to pre-built call descriptors for WebAssembly runtime calls. Handles different scenarios, including those needing frame state or BigInt conversions.\",\n            \"attributes\": [\n                {\n                    \"name\": \"zone_\",\n                    \"type\": \"std::unique_ptr<Zone>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A zone allocator for managing the lifetime of call descriptors.\"\n                },\n                {\n                    \"name\": \"bigint_to_i64_descriptor_\",\n                    \"type\": \"compiler::CallDescriptor*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Call descriptor for converting BigInt to i64 without frame state.\"\n                },\n                {\n                    \"name\": \"bigint_to_i64_descriptor_with_framestate_\",\n                    \"type\": \"compiler::CallDescriptor*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Call descriptor for converting BigInt to i64 with frame state.\"\n                },\n                {\n                    \"name\": \"bigint_to_i32pair_descriptor_\",\n                    \"type\": \"compiler::CallDescriptor*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Call descriptor for converting BigInt to i32 pair without frame state (32-bit architecture only).\"\n                },\n                {\n                    \"name\": \"bigint_to_i32pair_descriptor_with_framestate_\",\n                    \"type\": \"compiler::CallDescriptor*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Call descriptor for converting BigInt to i32 pair with frame state (32-bit architecture only).\"\n                }\n            ],\n            \"dependencies\": [\n                \"AccountingAllocator\",\n                \"Zone\",\n                \"compiler::CallDescriptor\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass WasmCallDescriptors {\n public:\n  explicit WasmCallDescriptors(AccountingAllocator* allocator);\n\n  compiler::CallDescriptor* GetBigIntToI64Descriptor(bool needs_frame_state) {\n    if (needs_frame_state) {\n      return bigint_to_i64_descriptor_with_framestate_;\n    }\n    return bigint_to_i64_descriptor_;\n  }\n\n#if V8_TARGET_ARCH_32_BIT\n  V8_EXPORT_PRIVATE compiler::CallDescriptor* GetLoweredCallDescriptor(\n      const compiler::CallDescriptor* original);\n#else\n  V8_EXPORT_PRIVATE compiler::CallDescriptor* GetLoweredCallDescriptor(\n      const compiler::CallDescriptor* original) {\n    UNREACHABLE();\n  }\n#endif  // V8_TARGET_ARCH_32_BIT\n\n private:\n  std::unique_ptr<Zone> zone_;\n\n  compiler::CallDescriptor* bigint_to_i64_descriptor_;\n  compiler::CallDescriptor* bigint_to_i64_descriptor_with_framestate_;\n\n#if V8_TARGET_ARCH_32_BIT\n  compiler::CallDescriptor* bigint_to_i32pair_descriptor_;\n  compiler::CallDescriptor* bigint_to_i32pair_descriptor_with_framestate_;\n#endif  // V8_TARGET_ARCH_32_BIT\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"WasmCallDescriptors\",\n            \"parent\": \"WasmCallDescriptors\",\n            \"about\": \"Constructor for the WasmCallDescriptors class.\",\n            \"logic\": \"The implementation of this function is not present in the header file.\",\n            \"parameters\": [\n                {\n                    \"name\": \"allocator\",\n                    \"type\": \"AccountingAllocator*\",\n                    \"purpose\": \"Allocator used for creating the internal zone.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value\"\n            },\n            \"dependencies\": [\n                \"AccountingAllocator\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  explicit WasmCallDescriptors(AccountingAllocator* allocator);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"GetBigIntToI64Descriptor\",\n            \"parent\": \"WasmCallDescriptors\",\n            \"about\": \"Retrieves the appropriate call descriptor for converting a BigInt to an i64 integer.\",\n            \"logic\": \"Returns either the descriptor with or without frame state based on the 'needs_frame_state' flag.\",\n            \"parameters\": [\n                {\n                    \"name\": \"needs_frame_state\",\n                    \"type\": \"bool\",\n                    \"purpose\": \"Indicates whether the call descriptor should include frame state information.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"compiler::CallDescriptor*\",\n                \"description\": \"The appropriate call descriptor for BigInt to i64 conversion.\"\n            },\n            \"dependencies\": [\n                \"compiler::CallDescriptor\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  compiler::CallDescriptor* GetBigIntToI64Descriptor(bool needs_frame_state) {\n    if (needs_frame_state) {\n      return bigint_to_i64_descriptor_with_framestate_;\n    }\n    return bigint_to_i64_descriptor_;\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"GetLoweredCallDescriptor\",\n            \"parent\": \"WasmCallDescriptors\",\n            \"about\": \"Retrieves a lowered call descriptor (architecture-specific).\",\n            \"logic\": \"On 32-bit architectures, this function would need an implementation. On other architectures, it calls UNREACHABLE().\",\n            \"parameters\": [\n                {\n                    \"name\": \"original\",\n                    \"type\": \"const compiler::CallDescriptor*\",\n                    \"purpose\": \"The original call descriptor to be lowered.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"compiler::CallDescriptor*\",\n                \"description\": \"The lowered call descriptor.\"\n            },\n            \"dependencies\": [\n                \"compiler::CallDescriptor\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#if V8_TARGET_ARCH_32_BIT\n  V8_EXPORT_PRIVATE compiler::CallDescriptor* GetLoweredCallDescriptor(\n      const compiler::CallDescriptor* original);\n#else\n  V8_EXPORT_PRIVATE compiler::CallDescriptor* GetLoweredCallDescriptor(\n      const compiler::CallDescriptor* original) {\n    UNREACHABLE();\n  }\n#endif  // V8_TARGET_ARCH_32_BIT\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"AccountingAllocator\",\n                \"about\": \"An allocator that tracks memory usage for accounting purposes.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class AccountingAllocator;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"A memory allocation zone.  Memory allocated in a zone can be freed all at once.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Zone;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"compiler::CallDescriptor\",\n                \"about\": \"Describes the calling convention of a function call.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class CallDescriptor;\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}