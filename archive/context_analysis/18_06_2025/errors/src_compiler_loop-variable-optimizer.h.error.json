{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/loop-variable-optimizer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 87, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/loop-variable-optimizer.h\",\n            \"file_name\": \"loop-variable-optimizer.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares classes and data structures for optimizing loop variables in the V8 compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for functional lists, node auxiliary data, and zone containers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/functional-list.h\"\n#include \"src/compiler/node-aux-data.h\"\n#include \"src/zone/zone-containers.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"InductionVariable\",\n                \"extends\": \"ZoneObject\",\n                \"about\": \"Represents an induction variable within a loop, tracking its phi node, arithmetic operation, increment, and bounds.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"phi_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The phi node representing the induction variable's value at the loop header.\"\n                    },\n                    {\n                        \"name\": \"effect_phi_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The effect phi node associated with the induction variable.\"\n                    },\n                    {\n                        \"name\": \"arith_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The node representing the arithmetic operation (e.g., addition or subtraction) performed on the induction variable.\"\n                    },\n                    {\n                        \"name\": \"increment_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The node representing the increment value added or subtracted from the induction variable.\"\n                    },\n                    {\n                        \"name\": \"init_value_\",\n                        \"type\": \"Node*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The initial value of the induction variable before the loop starts.\"\n                    },\n                    {\n                        \"name\": \"lower_bounds_\",\n                        \"type\": \"ZoneVector<Bound>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A vector of lower bounds for the induction variable.\"\n                    },\n                    {\n                        \"name\": \"upper_bounds_\",\n                        \"type\": \"ZoneVector<Bound>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A vector of upper bounds for the induction variable.\"\n                    },\n                    {\n                        \"name\": \"arithmeticType_\",\n                        \"type\": \"ArithmeticType\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The type of arithmetic operation performed on the induction variable (addition or subtraction).\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"ZoneObject\",\n                    \"Node\",\n                    \"ZoneVector\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass InductionVariable : public ZoneObject {\n public:\n  Node* phi() const { return phi_; }\n  Node* effect_phi() const { return effect_phi_; }\n  Node* arith() const { return arith_; }\n  Node* increment() const { return increment_; }\n  Node* init_value() const { return init_value_; }\n\n  enum ConstraintKind { kStrict, kNonStrict };\n  enum ArithmeticType { kAddition, kSubtraction };\n  struct Bound {\n    Bound(Node* bound, ConstraintKind kind) : bound(bound), kind(kind) {}\n\n    Node* bound;\n    ConstraintKind kind;\n  };\n\n  const ZoneVector<Bound>& lower_bounds() { return lower_bounds_; }\n  const ZoneVector<Bound>& upper_bounds() { return upper_bounds_; }\n\n  ArithmeticType Type() { return arithmeticType_; }\n\n private:\n  friend class LoopVariableOptimizer;\n  friend Zone;\n\n  InductionVariable(Node* phi, Node* effect_phi, Node* arith, Node* increment,\n                    Node* init_value, Zone* zone, ArithmeticType arithmeticType)\n      : phi_(phi),\n        effect_phi_(effect_phi),\n        arith_(arith),\n        increment_(increment),\n        init_value_(init_value),\n        lower_bounds_(zone),\n        upper_bounds_(zone),\n        arithmeticType_(arithmeticType) {}\n\n  void AddUpperBound(Node* bound, ConstraintKind kind);\n  void AddLowerBound(Node* bound, ConstraintKind kind);\n\n  Node* phi_;\n  Node* effect_phi_;\n  Node* arith_;\n  Node* increment_;\n  Node* init_value_;\n  ZoneVector<Bound> lower_bounds_;\n  ZoneVector<Bound> upper_bounds_;\n  ArithmeticType arithmeticType_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LoopVariableOptimizer\",\n                \"about\": \"Performs loop variable optimization within the V8 compiler's intermediate representation (TFGraph).\",\n                \"attributes\": [\n                    {\n                        \"name\": \"graph_\",\n                        \"type\": \"TFGraph*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The graph being optimized.\"\n                    },\n                    {\n                        \"name\": \"common_\",\n                        \"type\": \"CommonOperatorBuilder*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Helper class to build common operators.\"\n                    },\n                    {\n                        \"name\": \"zone_\",\n                        \"type\": \"Zone*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The zone used for memory allocation.\"\n                    },\n                    {\n                        \"name\": \"limits_\",\n                        \"type\": \"NodeAuxData<VariableLimits>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Auxiliary data storing variable limits for each node.\"\n                    },\n                    {\n                        \"name\": \"reduced_\",\n                        \"type\": \"NodeAuxData<bool>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Auxiliary data indicating whether a node has been reduced.\"\n                    },\n                    {\n                        \"name\": \"induction_vars_\",\n                        \"type\": \"ZoneMap<int, InductionVariable*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"A map of induction variables, indexed by their node ID.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"TFGraph\",\n                    \"CommonOperatorBuilder\",\n                    \"Zone\",\n                    \"NodeAuxData\",\n                    \"ZoneMap\",\n                    \"InductionVariable\",\n                    \"FunctionalList\",\n                    \"Node\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass LoopVariableOptimizer {\n public:\n  void Run();\n\n  LoopVariableOptimizer(TFGraph* graph, CommonOperatorBuilder* common,\n                        Zone* zone);\n\n  const ZoneMap<int, InductionVariable*>& induction_variables() {\n    return induction_vars_;\n  }\n\n  void ChangeToInductionVariablePhis();\n  void ChangeToPhisAndInsertGuards();\n\n private:\n  const int kAssumedLoopEntryIndex = 0;\n  const int kFirstBackedge = 1;\n\n  struct Constraint {\n    Node* left;\n    InductionVariable::ConstraintKind kind;\n    Node* right;\n\n    bool operator!=(const Constraint& other) const {\n      return left != other.left || kind != other.kind || right != other.right;\n    }\n  };\n\n  using VariableLimits = FunctionalList<Constraint>;\n\n  void VisitBackedge(Node* from, Node* loop);\n  void VisitNode(Node* node);\n  void VisitMerge(Node* node);\n  void VisitLoop(Node* node);\n  void VisitIf(Node* node, bool polarity);\n  void VisitStart(Node* node);\n  void VisitLoopExit(Node* node);\n  void VisitOtherControl(Node* node);\n\n  void AddCmpToLimits(VariableLimits* limits, Node* node,\n                      InductionVariable::ConstraintKind kind, bool polarity);\n\n  void TakeConditionsFromFirstControl(Node* node);\n  const InductionVariable* FindInductionVariable(Node* node);\n  InductionVariable* TryGetInductionVariable(Node* phi);\n  void DetectInductionVariables(Node* loop);\n\n  TFGraph* graph() { return graph_; }\n  CommonOperatorBuilder* common() { return common_; }\n  Zone* zone() { return zone_; }\n\n  TFGraph* graph_;\n  CommonOperatorBuilder* common_;\n  Zone* zone_;\n  NodeAuxData<VariableLimits> limits_;\n  NodeAuxData<bool> reduced_;\n\n  ZoneMap<int, InductionVariable*> induction_vars_;\n};\n        ]]></code>\n    </class>\n</file>\n```"
}