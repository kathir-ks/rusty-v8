{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/instruction-selection-phase.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 148, column 35",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/instruction-selection-phase.h\",\n        \"file_name\": \"instruction-selection-phase.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares classes and structs related to instruction selection and scheduling phases in the Turboshaft compiler pipeline.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for optional values, turboshaft phases, and other V8 internal classes.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/compiler/turboshaft/phase.h\"\n\nnamespace v8::internal {\nclass ProfileDataFromFile;\nclass SparseBitVector;\n}\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TurboshaftSpecialRPONumberer\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Computes a special reverse-post-order block ordering for the Turboshaft graph, ensuring loops are contiguous.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Graph\",\n                \"Block\",\n                \"Zone\",\n                \"Backedge\",\n                \"SpecialRPOStackFrame\",\n                \"LoopInfo\",\n                \"BlockData\",\n                \"FixedBlockSidetable\",\n                \"ZoneVector\",\n                \"uint32_t\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE TurboshaftSpecialRPONumberer {\n public:\n  // Numbering for BasicBlock::rpo_number for this block traversal:\n  static const int kBlockOnStack = -2;\n  static const int kBlockVisited1 = -3;\n  static const int kBlockVisited2 = -4;\n  static const int kBlockUnvisited = -1;\n\n  using Backedge = std::pair<const Block*, size_t>;\n\n  struct SpecialRPOStackFrame {\n    const Block* block = nullptr;\n    size_t index = 0;\n    base::SmallVector<Block*, 4> successors;\n\n    SpecialRPOStackFrame(const Block* block, size_t index,\n                         base::SmallVector<Block*, 4> successors)\n        : block(block), index(index), successors(std::move(successors)) {}\n  };\n\n  struct LoopInfo {\n    const Block* header;\n    base::SmallVector<Block const*, 4> outgoing;\n    SparseBitVector* members;\n    LoopInfo* prev;\n    const Block* end;\n    const Block* start;\n\n    void AddOutgoing(Zone* zone, const Block* block) {\n      outgoing.push_back(block);\n    }\n  };\n\n  struct BlockData {\n    static constexpr size_t kNoLoopNumber = std::numeric_limits<size_t>::max();\n    int32_t rpo_number = kBlockUnvisited;\n    size_t loop_number = kNoLoopNumber;\n    const Block* rpo_next = nullptr;\n  };\n\n  TurboshaftSpecialRPONumberer(const Graph& graph, Zone* zone)\n      : graph_(&graph), block_data_(graph.block_count(), zone), loops_(zone) {}\n\n  ZoneVector<uint32_t> ComputeSpecialRPO();\n\n private:\n  void ComputeLoopInfo(size_t num_loops, ZoneVector<Backedge>& backedges);\n  ZoneVector<uint32_t> ComputeBlockPermutation(const Block* entry);\n\n  int32_t rpo_number(const Block* block) const {\n    return block_data_[block->index()].rpo_number;\n  }\n\n  void set_rpo_number(const Block* block, int32_t rpo_number) {\n    block_data_[block->index()].rpo_number = rpo_number;\n  }\n\n  bool has_loop_number(const Block* block) const {\n    return block_data_[block->index()].loop_number != BlockData::kNoLoopNumber;\n  }\n\n  size_t loop_number(const Block* block) const {\n    DCHECK(has_loop_number(block));\n    return block_data_[block->index()].loop_number;\n  }\n\n  void set_loop_number(const Block* block, size_t loop_number) {\n    block_data_[block->index()].loop_number = loop_number;\n  }\n\n  const Block* PushFront(const Block* head, const Block* block) {\n    block_data_[block->index()].rpo_next = head;\n    return block;\n  }\n\n  Zone* zone() const { return loops_.zone(); }\n\n  const Graph* graph_;\n  FixedBlockSidetable<BlockData> block_data_;\n  ZoneVector<LoopInfo> loops_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PropagateDeferred\",\n            \"parent\": null,\n            \"about\": \"Propagates deferred values throughout the Turboshaft graph.\",\n            \"logic\": \"The implementation is not visible in the header file. Likely involves traversing the graph and updating deferred value representations.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"Graph&\",\n                    \"purpose\": \"The Turboshaft graph to propagate deferred values in.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Graph\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE void PropagateDeferred(Graph& graph);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ProfileApplicationPhase\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents the profile application phase in the Turboshaft pipeline.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"PipelineData\",\n                \"Zone\",\n                \"ProfileDataFromFile\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct ProfileApplicationPhase {\n  DECL_TURBOSHAFT_PHASE_CONSTANTS(ProfileApplication)\n\n  void Run(PipelineData* data, Zone* temp_zone,\n           const ProfileDataFromFile* profile);\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"SpecialRPOSchedulingPhase\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents the special RPO scheduling phase in the Turboshaft pipeline.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"PipelineData\",\n                \"Zone\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct SpecialRPOSchedulingPhase {\n  DECL_TURBOSHAFT_PHASE_CONSTANTS(SpecialRPOScheduling)\n\n  void Run(PipelineData* data, Zone* temp_zone);\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"InstructionSelectionPhase\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents the instruction selection phase in the Turboshaft pipeline.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"PipelineData\",\n                \"Zone\",\n                \"CallDescriptor\",\n                \"Linkage\",\n                \"CodeTracer\",\n                \"BailoutReason\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct InstructionSelectionPhase {\n  DECL_TURBOSHAFT_PHASE_CONSTANTS(InstructionSelection)\n  static constexpr bool kOutputIsTraceableGraph = false;\n\n  std::optional<BailoutReason> Run(PipelineData* data, Zone* temp_zone,\n                                   const CallDescriptor* call_descriptor,\n                                   Linkage* linkage, CodeTracer* code_tracer);\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Graph\",\n                \"about\": \"Represents the Turboshaft graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Graph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Block\",\n                \"about\": \"Represents a basic block in the Turboshaft graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Block {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Memory allocation zone.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"PipelineData\",\n                \"about\": \"Data structure passed between phases of the Turboshaft pipeline.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class PipelineData {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ProfileDataFromFile\",\n                \"about\": \"Profile data loaded from a file.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class ProfileDataFromFile {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallDescriptor\",\n                \"about\": \"Describes a function call.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class CallDescriptor {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Linkage\",\n                \"about\": \"Describes the linkage between code and data.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Linkage {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CodeTracer\",\n                \"about\": \"Used for tracing code generation.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class CodeTracer {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BailoutReason\",\n                \"about\": \"Represents a reason for bailing out of optimized code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class BailoutReason {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SparseBitVector\",\n                \"about\": \"Represents a sparse bit vector.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class SparseBitVector {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}