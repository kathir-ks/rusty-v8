{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/operations.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/operations.cc\",\n            \"file_name\": \"operations.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the operations used in the Turboshaft compiler, including their properties, printing methods, and validation logic.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers and V8 specific headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/operations.h\"\n\n#include <atomic>\n#include <iomanip>\n#include <optional>\n#include <sstream>\n\n#include \"src/base/logging.h\"\n#include \"src/base/platform/mutex.h\"\n#include \"src/codegen/bailout-reason.h\"\n#include \"src/codegen/machine-type.h\"\n#include \"src/common/globals.h\"\n#include \"src/compiler/backend/instruction-selector.h\"\n#include \"src/compiler/frame-states.h\"\n#include \"src/compiler/js-heap-broker.h\"\n#include \"src/compiler/machine-operator.h\"\n#include \"src/compiler/turbofan-graph-visualizer.h\"\n#include \"src/compiler/turboshaft/deopt-data.h\"\n#include \"src/compiler/turboshaft/graph.h\"\n#include \"src/handles/handles-inl.h\"\n#include \"src/handles/maybe-handles-inl.h\"\n#include \"src/objects/code-inl.h\"\n\n#ifdef DEBUG\n// For InWritableSharedSpace\n#include \"src/objects/objects-inl.h\"\n#endif\n        ]]></code>\n    </imports>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal\",\n                \"about\": \"Overloads the output stream operator for AbortReason enum.\",\n                \"logic\": \"Returns the string representation of the AbortReason.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"reason\",\n                        \"type\": \"AbortReason\",\n                        \"purpose\": \"The abort reason to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": [\n                    \"GetAbortReason\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8::internal {\nstd::ostream& operator<<(std::ostream& os, AbortReason reason) {\n  return os << GetAbortReason(reason);\n}\n}  // namespace v8::internal\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Print\",\n                \"parent\": \"Operation\",\n                \"about\": \"Prints the operation to the standard output.\",\n                \"logic\": \"Uses the overloaded << operator to print the current operation.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8::internal::compiler::turboshaft {\n\nvoid Operation::Print() const { std::cout << *this << \"\\n\"; }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"get_zone\",\n                \"about\": \"Returns the Zone (memory allocator) associated with a Graph.\",\n                \"logic\": \"Simply returns the graph's zone.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"graph\",\n                        \"type\": \"Graph*\",\n                        \"purpose\": \"The graph to get the zone from.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Zone*\",\n                    \"description\": \"The graph's zone.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nZone* get_zone(Graph* graph) { return graph->graph_zone(); }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"TryGetBuiltinId\",\n                \"about\": \"Tries to retrieve the Builtin ID from a ConstantOp.\",\n                \"logic\": \"Checks if the ConstantOp is a Code object and then retrieves its Builtin ID, if any. Returns std::nullopt otherwise.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"target\",\n                        \"type\": \"const ConstantOp*\",\n                        \"purpose\": \"The ConstantOp to check.\"\n                    },\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"JSHeapBroker for accessing heap objects.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::optional<Builtin>\",\n                    \"description\": \"The Builtin ID, or std::nullopt if not found.\"\n                },\n                \"dependencies\": [\n                    \"ConstantOp\",\n                    \"JSHeapBroker\",\n                    \"UnparkedScopeIfNeeded\",\n                    \"AllowHandleDereference\",\n                    \"HeapObjectRef\",\n                    \"MakeRef\",\n                    \"CodeRef\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::optional<Builtin> TryGetBuiltinId(const ConstantOp* target,\n                                       JSHeapBroker* broker) {\n  if (!target) return std::nullopt;\n  if (target->kind != ConstantOp::Kind::kHeapObject) return std::nullopt;\n  // TODO(nicohartmann@): For builtin compilation we don't have a broker. We\n  // could try to access the heap directly instead.\n  if (broker == nullptr) return std::nullopt;\n  UnparkedScopeIfNeeded scope(broker);\n  AllowHandleDereference allow_handle_dereference;\n  HeapObjectRef ref = MakeRef(broker, target->handle());\n  if (ref.IsCode()) {\n    CodeRef code = ref.AsCode();\n    if (code.object()->is_builtin()) {\n      return code.object()->builtin_id();\n    }\n  }\n  return std::nullopt;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsStackCheck\",\n                \"parent\": \"CallOp\",\n                \"about\": \"Checks if a CallOp represents a stack check.\",\n                \"logic\": \"Determines if the callee is a specific builtin function related to stack checks.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"graph\",\n                        \"type\": \"const Graph&\",\n                        \"purpose\": \"The graph.\"\n                    },\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"JSHeapBroker for accessing heap objects.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"StackCheckKind\",\n                        \"purpose\": \"The kind of stack check.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if it's a stack check, false otherwise.\"\n                },\n                \"dependencies\": [\n                    \"TryGetBuiltinId\",\n                    \"ConstantOp\",\n                    \"ExternalReference\",\n                    \"GetBuiltinForStackCheckKind\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nbool CallOp::IsStackCheck(const Graph& graph, JSHeapBroker* broker,\n                          StackCheckKind kind) const {\n  auto builtin_id =\n      TryGetBuiltinId(graph.Get(callee()).TryCast<ConstantOp>(), broker);\n  if (!builtin_id.has_value()) return false;\n  if (*builtin_id != Builtin::kCEntry_Return1_ArgvOnStack_NoBuiltinExit) {\n    return false;\n  }\n  DCHECK_GE(input_count, 4);\n  Runtime::FunctionId builtin = GetBuiltinForStackCheckKind(kind);\n  auto is_this_builtin = [&](int input_index) {\n    if (const ConstantOp* real_callee =\n            graph.Get(input(input_index)).TryCast<ConstantOp>();\n        real_callee != nullptr &&\n        real_callee->kind == ConstantOp::Kind::kExternal &&\n        real_callee->external_reference() ==\n            ExternalReference::Create(builtin)) {\n      return true;\n    }\n    return false;\n  };\n  // The function called by `CEntry_Return1_ArgvOnStack_NoBuiltinExit` is the\n  // 3rd or the 4th argument of the CallOp (depending on the stack check kind),\n  // so we check both of them.\n  return is_this_builtin(2) || is_this_builtin(3);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PrintOptions\",\n                \"parent\": \"CallOp\",\n                \"about\": \"Prints CallOp specific options.\",\n                \"logic\": \"Prints the descriptor information.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid CallOp::PrintOptions(std::ostream& os) const {\n  os << '[' << *descriptor->descriptor << ']';\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"PrintOptions\",\n                \"parent\": \"TailCallOp\",\n                \"about\": \"Prints TailCallOp specific options.\",\n                \"logic\": \"Prints the descriptor information.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nvoid TailCallOp::PrintOptions(std::ostream& os) const {\n  os << '[' << *descriptor->descriptor << ']';\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ValidateOpInputRep\",\n                \"about\": \"Validates the register representation of an operation's input.\",\n                \"logic\": \"Checks if the input's representation is compatible with the expected representation.  Terminates the process if not.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"graph\",\n                        \"type\": \"const Graph&\",\n                        \"purpose\": \"The graph.\"\n                    },\n                    {\n                        \"name\": \"input\",\n                        \"type\": \"OpIndex\",\n                        \"purpose\": \"The input operation's index.\"\n                    },\n                    {\n                        \"name\": \"expected_reps\",\n                        \"type\": \"std::initializer_list<RegisterRepresentation>\",\n                        \"purpose\": \"List of expected register representations.\"\n                    },\n                    {\n                        \"name\": \"checked_op\",\n                        \"type\": \"const Operation*\",\n                        \"purpose\": \"The operation being checked (optional).\"\n                    },\n                    {\n                        \"name\": \"projection_index\",\n                        \"type\": \"std::optional<size_t>\",\n                        \"purpose\": \"Projection index if input has multiple outputs (optional).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"Graph\",\n                    \"OpIndex\",\n                    \"Operation\",\n                    \"RegisterRepresentation\",\n                    \"AllowImplicitRepresentationChangeTo\",\n                    \"IsCreatedFromTurbofan\",\n                    \"PrintCollection\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#if DEBUG\nvoid ValidateOpInputRep(\n    const Graph& graph, OpIndex input,\n    std::initializer_list<RegisterRepresentation> expected_reps,\n    const Operation* checked_op, std::optional<size_t> projection_index) {\n  const Operation& input_op = graph.Get(input);\n  base::Vector<const RegisterRepresentation> input_reps =\n      input_op.outputs_rep();\n  RegisterRepresentation input_rep;\n  if (projection_index) {\n    if (*projection_index < input_reps.size()) {\n      input_rep = input_reps[*projection_index];\n    } else {\n      std::cerr << \"Turboshaft operation \";\n      if (checked_op) {\n        std::cerr << *checked_op << \" \";\n      }\n      std::cerr << \"has input #\" << input << \":\" << input_op\n                << \" with wrong arity.\\n\";\n      std::cerr << \"Input has results \" << PrintCollection(input_reps)\n                << \", but expected at least \" << (*projection_index + 1)\n                << \" results.\\n\";\n      UNREACHABLE();\n    }\n  } else if (input_reps.size() == 1) {\n    input_rep = input_reps[0];\n  } else {\n    std::cerr << \"Turboshaft operation \";\n    if (checked_op) {\n      std::cerr << *checked_op << \" \";\n    }\n    std::cerr << \"has input #\" << input << \":\" << input_op\n              << \" with wrong arity.\\n\";\n    std::cerr << \"Expected a single output but found \" << input_reps.size()\n              << \".\\n\";\n    UNREACHABLE();\n  }\n  for (RegisterRepresentation expected_rep : expected_reps) {\n    if (input_rep.AllowImplicitRepresentationChangeTo(\n            expected_rep, graph.IsCreatedFromTurbofan())) {\n      return;\n    }\n  }\n  std::cerr << \"Turboshaft operation \";\n  if (checked_op) {\n    std::cerr << *checked_op << \" \";\n  }\n  std::cerr << \"has input #\" << input << \":\" << input_op\n            << \" with wrong representation.\\n\";\n  std::cerr << \"Expected \" << (expected_reps.size() > 1 ? \"one of \" : \"\")\n            << PrintCollection(expected_reps).WithoutBrackets() << \" but found \"\n            << input_rep << \".\\n\";\n  std::cout << \"Input: \" << graph.Get(input) << \"\\n\";\n  UNREACHABLE();\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ValidateOpInputRep\",\n                \"about\": \"Validates the register representation of an operation's input (single expected representation).\",\n                \"logic\": \"Calls the other ValidateOpInputRep overload with a single element initializer list.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"graph\",\n                        \"type\": \"const Graph&\",\n                        \"purpose\": \"The graph.\"\n                    },\n                    {\n                        \"name\": \"input\",\n                        \"type\": \"OpIndex\",\n                        \"purpose\": \"The input operation's index.\"\n                    },\n                    {\n                        \"name\": \"expected_rep\",\n                        \"type\": \"RegisterRepresentation\",\n                        \"purpose\": \"The expected register representation.\"\n                    },\n                    {\n                        \"name\": \"checked_op\",\n                        \"type\": \"const Operation*\",\n                        \"purpose\": \"The operation being checked (optional).\"\n                    },\n                    {\n                        \"name\": \"projection_index\",\n                        \"type\": \"std::optional<size_t>\",\n                        \"purpose\": \"Projection index if input has multiple outputs (optional).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"ValidateOpInputRep\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid ValidateOpInputRep(const Graph& graph, OpIndex input,\n                        RegisterRepresentation expected_rep,\n                        const Operation* checked_op,\n                        std::optional<size_t> projection_index) {\n  return ValidateOpInputRep(graph, input, {expected_rep}, checked_op,\n                            projection_index);\n}\n#endif  // DEBUG\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"OpcodeName\",\n                \"about\": \"Returns the name of an opcode as a string.\",\n                \"logic\": \"Uses a lookup table to find the name of the opcode.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"opcode\",\n                        \"type\": \"Opcode\",\n                        \"purpose\": \"The opcode.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const char*\",\n                    \"description\": \"The opcode's name.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nconst char* OpcodeName(Opcode opcode) {\n#define OPCODE_NAME(Name) #Name,\n  const char* table[kNumberOfOpcodes] = {\n      TURBOSHAFT_OPERATION_LIST(OPCODE_NAME)};\n#undef OPCODE_NAME\n  return table[OpcodeIndex(opcode)];\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for OperationPrintStyle struct.\",\n                \"logic\": \"Prints the opcode name, inputs, and options of an operation.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"styled_op\",\n                        \"type\": \"OperationPrintStyle\",\n                        \"purpose\": \"The operation and its style.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": [\n                    \"OpcodeName\",\n                    \"Operation::PrintInputs\",\n                    \"Operation::PrintOptions\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, OperationPrintStyle styled_op) {\n  const Operation& op = styled_op.op;\n  os << OpcodeName(op.opcode);\n  op.PrintInputs(os, styled_op.op_index_prefix);\n  op.PrintOptions(os);\n  return os;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for RootIndex enum.\",\n                \"logic\": \"Prints the RootIndex as an unsigned 16-bit integer.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"index\",\n                        \"type\": \"RootIndex\",\n                        \"purpose\": \"The root index to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, RootIndex index) {\n  // Clearly this doesn't maximize convenience, but we don't want to include\n  // all those names in the binary.\n  return os << static_cast<uint16_t>(index);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for GenericBinopOp::Kind enum.\",\n                \"logic\": \"Prints the GenericBinopOp::Kind enum as a string.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"GenericBinopOp::Kind\",\n                        \"purpose\": \"The kind to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, GenericBinopOp::Kind kind) {\n  switch (kind) {\n#define PRINT_KIND(Name)              \\\n  case GenericBinopOp::Kind::k##Name: \\\n    return os << #Name;\n    GENERIC_BINOP_LIST(PRINT_KIND)\n#undef PRINT_KIND\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for GenericUnopOp::Kind enum.\",\n                \"logic\": \"Prints the GenericUnopOp::Kind enum as a string.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"GenericUnopOp::Kind\",\n                        \"purpose\": \"The kind to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, GenericUnopOp::Kind kind) {\n  switch (kind) {\n#define PRINT_KIND(Name)             \\\n  case GenericUnopOp::Kind::k##Name: \\\n    return os << #Name;\n    GENERIC_UNOP_LIST(PRINT_KIND)\n#undef PRINT_KIND\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for Word32SignHintOp::Sign enum.\",\n                \"logic\": \"Prints the Sign enum as a string.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"sign\",\n                        \"type\": \"Word32SignHintOp::Sign\",\n                        \"purpose\": \"The sign to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, Word32SignHintOp::Sign sign) {\n  switch (sign) {\n    case Word32SignHintOp::Sign::kSigned:\n      return os << \"Signed\";\n    case Word32SignHintOp::Sign::kUnsigned:\n      return os << \"Unsigned\";\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for WordUnaryOp::Kind enum.\",\n                \"logic\": \"Prints the WordUnaryOp::Kind enum as a string.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"WordUnaryOp::Kind\",\n                        \"purpose\": \"The kind to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, WordUnaryOp::Kind kind) {\n  switch (kind) {\n    case WordUnaryOp::Kind::kReverseBytes:\n      return os << \"ReverseBytes\";\n    case WordUnaryOp::Kind::kCountLeadingZeros:\n      return os << \"CountLeadingZeros\";\n    case WordUnaryOp::Kind::kCountTrailingZeros:\n      return os << \"CountTrailingZeros\";\n    case WordUnaryOp::Kind::kPopCount:\n      return os << \"PopCount\";\n    case WordUnaryOp::Kind::kSignExtend8:\n      return os << \"SignExtend8\";\n    case WordUnaryOp::Kind::kSignExtend16:\n      return os << \"SignExtend16\";\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for OverflowCheckedUnaryOp::Kind enum.\",\n                \"logic\": \"Prints the OverflowCheckedUnaryOp::Kind enum as a string.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"OverflowCheckedUnaryOp::Kind\",\n                        \"purpose\": \"The kind to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, OverflowCheckedUnaryOp::Kind kind) {\n  switch (kind) {\n    case OverflowCheckedUnaryOp::Kind::kAbs:\n      return os << \"kAbs\";\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"operator\",\n                \"name\": \"operator<<\",\n                \"parent\": \"v8::internal::compiler::turboshaft\",\n                \"about\": \"Overloads the output stream operator for FloatUnaryOp::Kind enum.\",\n                \"logic\": \"Prints the FloatUnaryOp::Kind enum as a string.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"Output stream.\"\n                    },\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"FloatUnaryOp::Kind\",\n                        \"purpose\": \"The kind to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The modified output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, FloatUnaryOp::Kind kind) {\n  switch (kind) {\n    case FloatUnaryOp::Kind::kAbs:\n      return os << \"Abs\";\n    case FloatUnaryOp::Kind::kNegate:\n      return os << \"Negate\";\n    case FloatUnaryOp::Kind::kSilenceNaN:\n      return os << \"SilenceNaN\";\n    case FloatUnaryOp::Kind::kRoundUp:\n      return os << \"RoundUp\";\n    case FloatUnaryOp::Kind::kRoundDown:\n      return os << \"RoundDown\";\n    case FloatUnaryOp::Kind::kRoundToZero:\n      return os << \"RoundToZero\";\n    case FloatUnaryOp::Kind::kRoundTiesEven:\n      return os << \"RoundTiesEven\";\n    case FloatUnaryOp::Kind::kLog:\n      return os << \"Log\";\n    case FloatUnaryOp::Kind::kLog2:\n      return os << \"Log2\";\n    case FloatUnaryOp::Kind::kLog10:\n      return os << \"Log10\";\n    case FloatUnaryOp::Kind::kLog1p:\n      return os << \"Log1p\";\n    case FloatUnaryOp::Kind::kSqrt:\n      return os << \"Sqrt\";\n    case FloatUnaryOp::Kind::kCbrt:\n      return os << \"Cbrt\";\n    case FloatUnaryOp::Kind::kExp:\n      return os << \"Exp\";\n    case FloatUnaryOp::Kind::kExpm1:\n      return os << \"Expm1\";\n    case FloatUnaryOp::Kind::kSin:\n      return os << \"Sin\";\n    case FloatUnaryOp::Kind::kCos:\n      return os << \"Cos\";\n    case FloatUnaryOp::Kind::kAsin:\n      return os << \"Asin\";\n    case FloatUnaryOp::Kind::kAcos:\n      return os << \"Acos\";\n    case FloatUnaryOp::Kind::kSinh:\n      return os << \"Sinh\";\n    case FloatUnaryOp::Kind::kCosh:\n      return os << \"Cosh\";\n    case FloatUnaryOp::Kind::kAsinh:\n      return os << \"Asinh\";\n    case FloatUnaryOp::Kind::kAcosh:\n      return os << \"Acosh\";\n    case FloatUnaryOp::Kind::kTan:\n      return os << \"Tan\";\n    case FloatUnaryOp::Kind::kTanh:\n      return os << \"Tanh\";\n    case FloatUnaryOp::Kind::kAtan:\n      return os << \"Atan\";\n    case FloatUnaryOp::Kind::kAtanh:\n      return os << \"Atanh\";\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"static method\",\n                \"name\": \"IsSupported\",\n                \"parent\": \"FloatUnaryOp\",\n                \"about\": \"Checks if a FloatUnaryOp::Kind is supported for a given FloatRepresentation.\",\n                \"logic\": \"Checks against a list of supported operations, based on the representation.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"kind\",\n                        \"type\": \"Kind\",\n                        \"purpose\": \"The kind of the unary float operation.\"\n                    },\n                    {\n                        \"name\": \"rep\",\n                        \"type\": \"FloatRepresentation\",\n                        \"purpose\": \"The floating point representation.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"Whether the operation is supported.\"\n                },\n                \"dependencies\": [\n                    \"FloatRepresentation\",\n                    \"SupportedOperations\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n// static\nbool FloatUnaryOp::IsSupported(Kind kind, FloatRepresentation rep) {\n  switch (rep.value()) {\n    case FloatRepresentation::Float32():\n      switch (kind) {\n        case Kind::kRoundDown:\n          return SupportedOperations::float32_round_down();\n        case Kind::kRoundUp:\n          return SupportedOperations::float32_round_up();\n        case Kind::kRoundToZero:\n          return SupportedOperations::float32_round_to_zero();\n        case Kind::kRoundTiesEven:\n          return SupportedOperations::float32_round_ties_even();\n        default:\n          return true;\n      }\n    case FloatRepresentation::Float64():\n      switch (kind) {\n        case Kind::kRoundDown:\n          return SupportedOperations::float64_round_down();\n        case Kind::kRoundUp:\n          return SupportedOperations::float64_round_up();\n        case Kind::kRoundToZero:\n          return SupportedOperations::float64_round_to_zero();\n        case Kind::kRoundTiesEven:\n          return SupportedOperations::float64_round_ties_even();\n        default:\n          return true;\n      }\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"static method\",\n                \"name\": \"IsSupported\",\n                \"parent\": \"WordUnaryOp\",\n                \"about\": \"Checks if a WordUnaryOp::Kind is supported for a given WordRepresentation.\",\n                \"logic\": \"Checks against a list of supported operations, based on the representation.\",\n                \"parameters"
}