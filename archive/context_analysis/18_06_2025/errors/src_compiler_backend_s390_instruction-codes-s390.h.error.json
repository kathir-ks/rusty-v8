{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/s390/instruction-codes-s390.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/backend/s390/instruction-codes-s390.h\",\n        \"file_name\": \"instruction-codes-s390.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines S390-specific opcodes and addressing modes for the V8 compiler backend.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"No explicit imports, but relies on namespace definitions within V8.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            // No explicit imports in this header file.\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"namespace\",\n            \"name\": \"v8\",\n            \"about\": \"Google's Javascript Engine\"\n        }\n        </metadata>\n        <code><![CDATA[\n        namespace v8 {\n        }\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"namespace\",\n            \"name\": \"internal\",\n            \"parent\": \"v8\",\n            \"about\": \"V8 internal implementation details\"\n        }\n        </metadata>\n        <code><![CDATA[\n        namespace internal {\n        }\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"namespace\",\n            \"name\": \"compiler\",\n            \"parent\": \"v8::internal\",\n            \"about\": \"V8's compiler namespace\"\n        }\n        </metadata>\n        <code><![CDATA[\n        namespace compiler {\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TARGET_ARCH_OPCODE_LIST\",\n            \"about\": \"A macro that defines a list of S390-specific opcodes.\",\n            \"logic\": \"This macro takes a macro `V` as input and applies it to each opcode. The opcodes specify which assembly sequence to emit.\",\n            \"parameters\": [\n                {\n                    \"name\": \"V\",\n                    \"type\": \"macro\",\n                    \"purpose\": \"The macro to apply to each opcode.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"None\",\n                \"description\": \"Macro definition\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TARGET_ARCH_OPCODE_LIST(V)          \\\n            V(S390_Peek)                              \\\n            V(S390_Abs32)                             \\\n            V(S390_Abs64)                             \\\n            V(S390_And32)                             \\\n            V(S390_And64)                             \\\n            V(S390_Or32)                              \\\n            V(S390_Or64)                              \\\n            V(S390_Xor32)                             \\\n            V(S390_Xor64)                             \\\n            V(S390_ShiftLeft32)                       \\\n            V(S390_ShiftLeft64)                       \\\n            V(S390_ShiftRight32)                      \\\n            V(S390_ShiftRight64)                      \\\n            V(S390_ShiftRightArith32)                 \\\n            V(S390_ShiftRightArith64)                 \\\n            V(S390_RotRight32)                        \\\n            V(S390_RotRight64)                        \\\n            V(S390_Not32)                             \\\n            V(S390_Not64)                             \\\n            V(S390_RotLeftAndClear64)                 \\\n            V(S390_RotLeftAndClearLeft64)             \\\n            V(S390_RotLeftAndClearRight64)            \\\n            V(S390_Lay)                               \\\n            V(S390_Add32)                             \\\n            V(S390_Add64)                             \\\n            V(S390_AddFloat)                          \\\n            V(S390_AddDouble)                         \\\n            V(S390_Sub32)                             \\\n            V(S390_Sub64)                             \\\n            V(S390_SubFloat)                          \\\n            V(S390_SubDouble)                         \\\n            V(S390_Mul32)                             \\\n            V(S390_Mul32WithOverflow)                 \\\n            V(S390_Mul64)                             \\\n            V(S390_Mul64WithOverflow)                 \\\n            V(S390_MulHighS64)                        \\\n            V(S390_MulHighU64)                        \\\n            V(S390_MulHigh32)                         \\\n            V(S390_MulHighU32)                        \\\n            V(S390_MulFloat)                          \\\n            V(S390_MulDouble)                         \\\n            V(S390_Div32)                             \\\n            V(S390_Div64)                             \\\n            V(S390_DivU32)                            \\\n            V(S390_DivU64)                            \\\n            V(S390_DivFloat)                          \\\n            V(S390_DivDouble)                         \\\n            V(S390_Mod32)                             \\\n            V(S390_Mod64)                             \\\n            V(S390_ModU32)                            \\\n            V(S390_ModU64)                            \\\n            V(S390_ModDouble)                         \\\n            V(S390_Neg32)                             \\\n            V(S390_Neg64)                             \\\n            V(S390_NegDouble)                         \\\n            V(S390_NegFloat)                          \\\n            V(S390_SqrtFloat)                         \\\n            V(S390_FloorFloat)                        \\\n            V(S390_CeilFloat)                         \\\n            V(S390_TruncateFloat)                     \\\n            V(S390_FloatNearestInt)                   \\\n            V(S390_AbsFloat)                          \\\n            V(S390_SqrtDouble)                        \\\n            V(S390_FloorDouble)                       \\\n            V(S390_CeilDouble)                        \\\n            V(S390_TruncateDouble)                    \\\n            V(S390_RoundDouble)                       \\\n            V(S390_DoubleNearestInt)                  \\\n            V(S390_MaxFloat)                          \\\n            V(S390_MaxDouble)                         \\\n            V(S390_MinFloat)                          \\\n            V(S390_MinDouble)                         \\\n            V(S390_AbsDouble)                         \\\n            V(S390_Cntlz32)                           \\\n            V(S390_Cntlz64)                           \\\n            V(S390_Popcnt32)                          \\\n            V(S390_Popcnt64)                          \\\n            V(S390_Cmp32)                             \\\n            V(S390_Cmp64)                             \\\n            V(S390_CmpFloat)                          \\\n            V(S390_CmpDouble)                         \\\n            V(S390_Tst32)                             \\\n            V(S390_Tst64)                             \\\n            V(S390_Push)                              \\\n            V(S390_PushFrame)                         \\\n            V(S390_StoreToStackSlot)                  \\\n            V(S390_SignExtendWord8ToInt32)            \\\n            V(S390_SignExtendWord16ToInt32)           \\\n            V(S390_SignExtendWord8ToInt64)            \\\n            V(S390_SignExtendWord16ToInt64)           \\\n            V(S390_SignExtendWord32ToInt64)           \\\n            V(S390_Uint32ToUint64)                    \\\n            V(S390_Int64ToInt32)                      \\\n            V(S390_Int64ToFloat32)                    \\\n            V(S390_Int64ToDouble)                     \\\n            V(S390_Uint64ToFloat32)                   \\\n            V(S390_Uint64ToDouble)                    \\\n            V(S390_Int32ToFloat32)                    \\\n            V(S390_Int32ToDouble)                     \\\n            V(S390_Uint32ToFloat32)                   \\\n            V(S390_Uint32ToDouble)                    \\\n            V(S390_Float32ToInt64)                    \\\n            V(S390_Float32ToUint64)                   \\\n            V(S390_Float32ToInt32)                    \\\n            V(S390_Float32ToUint32)                   \\\n            V(S390_Float32ToDouble)                   \\\n            V(S390_Float64SilenceNaN)                 \\\n            V(S390_DoubleToInt32)                     \\\n            V(S390_DoubleToUint32)                    \\\n            V(S390_DoubleToInt64)                     \\\n            V(S390_DoubleToUint64)                    \\\n            V(S390_DoubleToFloat32)                   \\\n            V(S390_DoubleExtractLowWord32)            \\\n            V(S390_DoubleExtractHighWord32)           \\\n            V(S390_DoubleFromWord32Pair)              \\\n            V(S390_DoubleInsertLowWord32)             \\\n            V(S390_DoubleInsertHighWord32)            \\\n            V(S390_DoubleConstruct)                   \\\n            V(S390_BitcastInt32ToFloat32)             \\\n            V(S390_BitcastFloat32ToInt32)             \\\n            V(S390_BitcastInt64ToDouble)              \\\n            V(S390_BitcastDoubleToInt64)              \\\n            V(S390_LoadWordS8)                        \\\n            V(S390_LoadWordU8)                        \\\n            V(S390_LoadWordS16)                       \\\n            V(S390_LoadWordU16)                       \\\n            V(S390_LoadWordS32)                       \\\n            V(S390_LoadWordU32)                       \\\n            V(S390_LoadAndTestWord32)                 \\\n            V(S390_LoadAndTestWord64)                 \\\n            V(S390_LoadAndTestFloat32)                \\\n            V(S390_LoadAndTestFloat64)                \\\n            V(S390_LoadReverse16RR)                   \\\n            V(S390_LoadReverse32RR)                   \\\n            V(S390_LoadReverse64RR)                   \\\n            V(S390_LoadReverseSimd128RR)              \\\n            V(S390_LoadReverseSimd128)                \\\n            V(S390_LoadReverse16)                     \\\n            V(S390_LoadReverse32)                     \\\n            V(S390_LoadReverse64)                     \\\n            V(S390_LoadWord64)                        \\\n            V(S390_LoadFloat32)                       \\\n            V(S390_LoadDouble)                        \\\n            V(S390_StoreWord8)                        \\\n            V(S390_StoreWord16)                       \\\n            V(S390_StoreWord32)                       \\\n            V(S390_StoreWord64)                       \\\n            V(S390_StoreReverse16)                    \\\n            V(S390_StoreReverse32)                    \\\n            V(S390_StoreReverse64)                    \\\n            V(S390_StoreReverseSimd128)               \\\n            V(S390_StoreFloat32)                      \\\n            V(S390_StoreDouble)                       \\\n            V(S390_Word64AtomicExchangeUint64)        \\\n            V(S390_Word64AtomicCompareExchangeUint64) \\\n            V(S390_Word64AtomicAddUint64)             \\\n            V(S390_Word64AtomicSubUint64)             \\\n            V(S390_Word64AtomicAndUint64)             \\\n            V(S390_Word64AtomicOrUint64)              \\\n            V(S390_Word64AtomicXorUint64)             \\\n            V(S390_F64x2Splat)                        \\\n            V(S390_F64x2ReplaceLane)                  \\\n            V(S390_F64x2Abs)                          \\\n            V(S390_F64x2Neg)                          \\\n            V(S390_F64x2Sqrt)                         \\\n            V(S390_F64x2Add)                          \\\n            V(S390_F64x2Sub)                          \\\n            V(S390_F64x2Mul)                          \\\n            V(S390_F64x2Div)                          \\\n            V(S390_F64x2Eq)                           \\\n            V(S390_F64x2Ne)                           \\\n            V(S390_F64x2Lt)                           \\\n            V(S390_F64x2Le)                           \\\n            V(S390_F64x2Min)                          \\\n            V(S390_F64x2Max)                          \\\n            V(S390_F64x2ExtractLane)                  \\\n            V(S390_F64x2Qfma)                         \\\n            V(S390_F64x2Qfms)                         \\\n            V(S390_F64x2Pmin)                         \\\n            V(S390_F64x2Pmax)                         \\\n            V(S390_F64x2Ceil)                         \\\n            V(S390_F64x2Floor)                        \\\n            V(S390_F64x2Trunc)                        \\\n            V(S390_F64x2NearestInt)                   \\\n            V(S390_F64x2ConvertLowI32x4S)             \\\n            V(S390_F64x2ConvertLowI32x4U)             \\\n            V(S390_F64x2PromoteLowF32x4)              \\\n            V(S390_F32x4Splat)                        \\\n            V(S390_F32x4ExtractLane)                  \\\n            V(S390_F32x4ReplaceLane)                  \\\n            V(S390_F32x4Add)                          \\\n            V(S390_F32x4Sub)                          \\\n            V(S390_F32x4Mul)                          \\\n            V(S390_F32x4Eq)                           \\\n            V(S390_F32x4Ne)                           \\\n            V(S390_F32x4Lt)                           \\\n            V(S390_F32x4Le)                           \\\n            V(S390_F32x4Abs)                          \\\n            V(S390_F32x4Neg)                          \\\n            V(S390_F32x4SConvertI32x4)                \\\n            V(S390_F32x4UConvertI32x4)                \\\n            V(S390_F32x4Sqrt)                         \\\n            V(S390_F32x4Div)                          \\\n            V(S390_F32x4Min)                          \\\n            V(S390_F32x4Max)                          \\\n            V(S390_F32x4Qfma)                         \\\n            V(S390_F32x4Qfms)                         \\\n            V(S390_F32x4Pmin)                         \\\n            V(S390_F32x4Pmax)                         \\\n            V(S390_F32x4Ceil)                         \\\n            V(S390_F32x4Floor)                        \\\n            V(S390_F32x4Trunc)                        \\\n            V(S390_F32x4NearestInt)                   \\\n            V(S390_F32x4DemoteF64x2Zero)              \\\n            V(S390_I64x2Neg)                          \\\n            V(S390_I64x2Add)                          \\\n            V(S390_I64x2Sub)                          \\\n            V(S390_I64x2Shl)                          \\\n            V(S390_I64x2ShrS)                         \\\n            V(S390_I64x2ShrU)                         \\\n            V(S390_I64x2Mul)                          \\\n            V(S390_I64x2Splat)                        \\\n            V(S390_I64x2ReplaceLane)                  \\\n            V(S390_I64x2ExtractLane)                  \\\n            V(S390_I64x2Eq)                           \\\n            V(S390_I64x2BitMask)                      \\\n            V(S390_I64x2ExtMulLowI32x4S)              \\\n            V(S390_I64x2ExtMulHighI32x4S)             \\\n            V(S390_I64x2ExtMulLowI32x4U)              \\\n            V(S390_I64x2ExtMulHighI32x4U)             \\\n            V(S390_I64x2SConvertI32x4Low)             \\\n            V(S390_I64x2SConvertI32x4High)            \\\n            V(S390_I64x2UConvertI32x4Low)             \\\n            V(S390_I64x2UConvertI32x4High)            \\\n            V(S390_I64x2Ne)                           \\\n            V(S390_I64x2GtS)                          \\\n            V(S390_I64x2GeS)                          \\\n            V(S390_I64x2Abs)                          \\\n            V(S390_I32x4Splat)                        \\\n            V(S390_I32x4ExtractLane)                  \\\n            V(S390_I32x4ReplaceLane)                  \\\n            V(S390_I32x4Add)                          \\\n            V(S390_I32x4Sub)                          \\\n            V(S390_I32x4Mul)                          \\\n            V(S390_I32x4MinS)                         \\\n            V(S390_I32x4MinU)                         \\\n            V(S390_I32x4MaxS)                         \\\n            V(S390_I32x4MaxU)                         \\\n            V(S390_I32x4Eq)                           \\\n            V(S390_I32x4Ne)                           \\\n            V(S390_I32x4GtS)                          \\\n            V(S390_I32x4GeS)                          \\\n            V(S390_I32x4GtU)                          \\\n            V(S390_I32x4GeU)                          \\\n            V(S390_I32x4Neg)                          \\\n            V(S390_I32x4Shl)                          \\\n            V(S390_I32x4ShrS)                         \\\n            V(S390_I32x4ShrU)                         \\\n            V(S390_I32x4SConvertF32x4)                \\\n            V(S390_I32x4UConvertF32x4)                \\\n            V(S390_I32x4SConvertI16x8Low)             \\\n            V(S390_I32x4SConvertI16x8High)            \\\n            V(S390_I32x4UConvertI16x8Low)             \\\n            V(S390_I32x4UConvertI16x8High)            \\\n            V(S390_I32x4Abs)                          \\\n            V(S390_I32x4BitMask)                      \\\n            V(S390_I32x4DotI16x8S)                    \\\n            V(S390_I32x4ExtMulLowI16x8S)              \\\n            V(S390_I32x4ExtMulHighI16x8S)             \\\n            V(S390_I32x4ExtMulLowI16x8U)              \\\n            V(S390_I32x4ExtMulHighI16x8U)             \\\n            V(S390_I32x4ExtAddPairwiseI16x8S)         \\\n            V(S390_I32x4ExtAddPairwiseI16x8U)         \\\n            V(S390_I32x4TruncSatF64x2SZero)           \\\n            V(S390_I32x4TruncSatF64x2UZero)           \\\n            V(S390_I32x4DotI8x16AddS)                 \\\n            V(S390_I16x8Splat)                        \\\n            V(S390_I16x8ExtractLaneU)                 \\\n            V(S390_I16x8ExtractLaneS)                 \\\n            V(S390_I16x8ReplaceLane)                  \\\n            V(S390_I16x8Add)                          \\\n            V(S390_I16x8Sub)                          \\\n            V(S390_I16x8Mul)                          \\\n            V(S390_I16x8MinS)                         \\\n            V(S390_I16x8MinU)                         \\\n            V(S390_I16x8MaxS)                         \\\n            V(S390_I16x8MaxU)                         \\\n            V(S390_I16x8Eq)                           \\\n            V(S390_I16x8Ne)                           \\\n            V(S390_I16x8GtS)                          \\\n            V(S390_I16x8GeS)                          \\\n            V(S390_I16x8GtU)                          \\\n            V(S390_I16x8GeU)                          \\\n            V(S390_I16x8Shl)                          \\\n            V(S390_I16x8ShrS)                         \\\n            V(S390_I16x8ShrU)                         \\\n            V(S390_I16x8Neg)                          \\\n            V(S390_I16x8SConvertI32x4)                \\\n            V(S390_I16x8UConvertI32x4)                \\\n            V(S390_I16x8SConvertI8x16Low)             \\\n            V(S390_I16x8SConvertI8x16High)            \\\n            V(S390_I16x8UConvertI8x16Low)             \\\n            V(S390_I16x8UConvertI8x16High)            \\\n            V(S390_I16x8AddSatS)                      \\\n            V(S390_I16x8SubSatS)                      \\\n            V(S390_I16x8AddSatU)                      \\\n            V(S390_I16x8SubSatU)                      \\\n            V(S390_I16x8RoundingAverageU)             \\\n            V(S390_I16x8Abs)                          \\\n            V(S390_I16x8BitMask)                      \\\n            V(S390_I16x8ExtMulLowI8x16S)              \\\n            V(S390_I16x8ExtMulHighI8x16S)             \\\n            V(S390_I16x8ExtMulLowI8x16U)              \\\n            V(S390_I16x8ExtMulHighI8x16U)             \\\n            V(S390_I16x8ExtAddPairwiseI8x16S)         \\\n            V(S390_I16x8ExtAddPairwiseI8x16U)         \\\n            V(S390_I16x8Q15MulRSatS)                  \\\n            V(S390_I16x8DotI8x16S)                    \\\n            V(S390_I8x16Splat)                        \\\n            V(S390_I8x16ExtractLaneU)                 \\\n            V(S390_I8x16ExtractLaneS)                 \\\n            V(S390_I8x16ReplaceLane)                  \\\n            V(S390_I8x16Add)                          \\\n            V(S390_I8x16Sub)                          \\\n            V(S390_I8x16MinS)                         \\\n            V(S390_I8x16MinU)                         \\\n            V(S390_I8x16MaxS)                         \\\n            V(S390_I8x16MaxU)                         \\\n            V(S390_I8x16Eq)                           \\\n            V(S390_I8x16Ne)                           \\\n            V(S390_I8x16GtS)                          \\\n            V(S390_I8x16GeS)                          \\\n            V(S390_I8x16GtU)                          \\\n            V(S390_I8x16GeU)                          \\\n            V(S390_I8x16Shl)                          \\\n            V(S390_I8x16ShrS)                         \\\n            V(S390_I8x16ShrU)                         \\\n            V(S390_I8x16Neg)                          \\\n            V(S390_I8x16SConvertI16x8)                \\\n            V(S390_I8x16UConvertI16x8)                \\\n            V(S390_I8x16AddSatS)                      \\\n            V(S390_I8x16SubSatS)                      \\\n            V(S390_I8x16AddSatU)                      \\\n            V(S390_I8x16SubSatU)                      \\\n            V(S390_I8x16RoundingAverageU)             \\\n            V(S390_I8x16Abs)                          \\\n            V(S390_I8x16BitMask)                      \\\n            V(S390_I8x16Shuffle)                      \\\n            V(S390_I8x16Swizzle)                      \\\n            V(S390_I8x16Popcnt)                       \\\n            V(S390_I64x2AllTrue)                      \\\n            V(S390_I32x4AllTrue)                      \\\n            V(S390_I16x8AllTrue)                      \\\n            V(S390_I8x16AllTrue)                      \\\n            V(S390_V128AnyTrue)                       \\\n            V(S390_S128And)                           \\\n            V(S390_S128Or)                            \\\n            V(S390_S128Xor)                           \\\n            V(S390_S128Const)                         \\\n            V(S390_S128Zero)                          \\\n            V(S390_S128AllOnes)                       \\\n            V(S390_S128Not)                           \\\n            V(S390_S128Select)                        \\\n            V(S390_S128AndNot)                        \\\n            V(S390_S128Load8Splat)                    \\\n            V(S390_S128Load16Splat)                   \\\n            V(S390_S128Load32Splat)                   \\\n            V(S390_S128Load64Splat)                   \\\n            V(S390_S128Load8x8S)                      \\\n            V(S390_S128Load8x8U)                      \\\n            V(S390_S128Load16x4S)                     \\\n            V(S390_S128Load16x4U)                     \\\n            V(S390_S128Load32x2S)                     \\\n            V(S390_S128Load32x2U)                     \\\n            V(S390_S128Load32Zero)                    \\\n            V(S390_S128Load64Zero)                    \\\n            V(S390_S128Load8Lane)                     \\\n            V(S390_S128Load16Lane)                    \\\n            V(S390_S128Load32Lane)                    \\\n            V(S390_S128Load64Lane)                    \\\n            V(S390_S128Store8Lane)                    \\\n            V(S390_S128Store16Lane)                   \\\n            V(S390_S128Store32Lane)                   \\\n            V(S390_S128Store64Lane)                   \\\n            V(S390_StoreSimd128)                      \\\n            V(S390_LoadSimd128)                       \\\n            V(S390_StoreCompressTagged)               \\\n            V(S390_LoadDecompressTaggedSigned)        \\\n            V(S390_LoadDecompressTagged)\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"macro\",\n            \"name\": \"TARGET_ADDRESSING_MODE_LIST\",\n            \"about\": \"A macro that defines a list of S390 addressing modes.\",\n            \"logic\": \"This macro takes a macro `V` as input and applies it to each addressing mode. Addressing modes represent the shape of inputs to an instruction.\",\n            \"parameters\": [\n                {\n                    \"name\": \"V\",\n                    \"type\": \"macro\",\n                    \"purpose\": \"The macro to apply to each addressing mode.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"None\",\n                \"description\": \"Macro definition\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            #define TARGET_ADDRESSING_MODE_LIST(V) \\\n            V(MR)   /* [%r0          ] */        \\\n            V(MRI)  /* [%r0       + K] */        \\\n            V(MRR)  /* [%r0 + %r1    ] */        \\\n            V(MRRI) /* [%r0 + %r1 + K] */        \\\n            V(Root) /*"
}