{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-regexp.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 155, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-regexp.h\",\n            \"file_name\": \"v8-regexp.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the v8::RegExp class, which represents a JavaScript RegExp object.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include necessary V8 headers for local handles, objects, and configuration.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n#include \"v8-object.h\"        // NOLINT(build/include_directory)\n#include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RegExp\",\n                \"extends\": \"Object\",\n                \"about\": \"Represents a JavaScript RegExp object.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"Object\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT RegExp : public Object {\n public:\n  /**\n   * Regular expression flag bits. They can be or'ed to enable a set\n   * of flags.\n   * The kLinear value ('l') is experimental and can only be used with\n   * --enable-experimental-regexp-engine.  RegExps with kLinear flag are\n   *  guaranteed to be executed in asymptotic linear time wrt. the length of\n   *  the subject string.\n   */\n  enum Flags {\n    kNone = 0,\n    kGlobal = 1 << 0,\n    kIgnoreCase = 1 << 1,\n    kMultiline = 1 << 2,\n    kSticky = 1 << 3,\n    kUnicode = 1 << 4,\n    kDotAll = 1 << 5,\n    kLinear = 1 << 6,\n    kHasIndices = 1 << 7,\n    kUnicodeSets = 1 << 8,\n  };\n\n  static constexpr int kFlagCount = 9;\n\n  /**\n   * Creates a regular expression from the given pattern string and\n   * the flags bit field. May throw a JavaScript exception as\n   * described in ECMA-262, 15.10.4.1.\n   *\n   * For example,\n   *   RegExp::New(v8::String::New(\"foo\"),\n   *               static_cast<RegExp::Flags>(kGlobal | kMultiline))\n   * is equivalent to evaluating \"/foo/gm\".\n   */\n  static V8_WARN_UNUSED_RESULT MaybeLocal<RegExp> New(Local<Context> context,\n                                                      Local<String> pattern,\n                                                      Flags flags);\n\n  /**\n   * Like New, but additionally specifies a backtrack limit. If the number of\n   * backtracks done in one Exec call hits the limit, a match failure is\n   * immediately returned.\n   */\n  static V8_WARN_UNUSED_RESULT MaybeLocal<RegExp> NewWithBacktrackLimit(\n      Local<Context> context, Local<String> pattern, Flags flags,\n      uint32_t backtrack_limit);\n\n  /**\n   * Executes the current RegExp instance on the given subject string.\n   * Equivalent to RegExp.prototype.exec as described in\n   *\n   *   https://tc39.es/ecma262/#sec-regexp.prototype.exec\n   *\n   * On success, an Array containing the matched strings is returned. On\n   * failure, returns Null.\n   *\n   * Note: modifies global context state, accessible e.g. through RegExp.input.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Object> Exec(Local<Context> context,\n                                                Local<String> subject);\n\n  /**\n   * Returns the value of the source property: a string representing\n   * the regular expression.\n   */\n  Local<String> GetSource() const;\n\n  /**\n   * Returns the flags bit field.\n   */\n  Flags GetFlags() const;\n\n  V8_INLINE static RegExp* Cast(Value* value) {\n#ifdef V8_ENABLE_CHECKS\n    CheckCast(value);\n#endif\n    return static_cast<RegExp*>(value);\n  }\n\n private:\n  static void CheckCast(Value* obj);\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"New\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Creates a new RegExp object.\",\n                \"logic\": \"Creates a regular expression from the given pattern string and flags. May throw a JavaScript exception.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Local<Context>\",\n                        \"purpose\": \"The execution context.\"\n                    },\n                    {\n                        \"name\": \"pattern\",\n                        \"type\": \"Local<String>\",\n                        \"purpose\": \"The regular expression pattern.\"\n                    },\n                    {\n                        \"name\": \"flags\",\n                        \"type\": \"Flags\",\n                        \"purpose\": \"The regular expression flags.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MaybeLocal<RegExp>\",\n                    \"description\": \"A MaybeLocal handle to the new RegExp object.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  static V8_WARN_UNUSED_RESULT MaybeLocal<RegExp> New(Local<Context> context,\n                                                      Local<String> pattern,\n                                                      Flags flags);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"NewWithBacktrackLimit\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Creates a new RegExp object with a backtrack limit.\",\n                \"logic\": \"Like New, but additionally specifies a backtrack limit. If the number of backtracks done in one Exec call hits the limit, a match failure is immediately returned.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Local<Context>\",\n                        \"purpose\": \"The execution context.\"\n                    },\n                    {\n                        \"name\": \"pattern\",\n                        \"type\": \"Local<String>\",\n                        \"purpose\": \"The regular expression pattern.\"\n                    },\n                    {\n                        \"name\": \"flags\",\n                        \"type\": \"Flags\",\n                        \"purpose\": \"The regular expression flags.\"\n                    },\n                    {\n                        \"name\": \"backtrack_limit\",\n                        \"type\": \"uint32_t\",\n                        \"purpose\": \"The backtrack limit.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MaybeLocal<RegExp>\",\n                    \"description\": \"A MaybeLocal handle to the new RegExp object.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  static V8_WARN_UNUSED_RESULT MaybeLocal<RegExp> NewWithBacktrackLimit(\n      Local<Context> context, Local<String> pattern, Flags flags,\n      uint32_t backtrack_limit);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Exec\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Executes the RegExp object against a subject string.\",\n                \"logic\": \"Executes the current RegExp instance on the given subject string. Equivalent to RegExp.prototype.exec. On success, returns an Array containing the matched strings. On failure, returns Null. Note: modifies global context state, accessible e.g. through RegExp.input.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Local<Context>\",\n                        \"purpose\": \"The execution context.\"\n                    },\n                    {\n                        \"name\": \"subject\",\n                        \"type\": \"Local<String>\",\n                        \"purpose\": \"The subject string to execute against.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"MaybeLocal<Object>\",\n                    \"description\": \"A MaybeLocal handle to an Array of matched strings, or Null on failure.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  V8_WARN_UNUSED_RESULT MaybeLocal<Object> Exec(Local<Context> context,\n                                                Local<String> subject);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetSource\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Returns the source property of the RegExp object.\",\n                \"logic\": \"Returns the value of the source property: a string representing the regular expression.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Local<String>\",\n                    \"description\": \"A Local handle to the source string.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  Local<String> GetSource() const;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetFlags\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Returns the flags bitfield of the RegExp object.\",\n                \"logic\": \"Returns the flags bit field.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Flags\",\n                    \"description\": \"The flags bit field.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  Flags GetFlags() const;\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Cast\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Casts a Value to a RegExp.\",\n                \"logic\": \"Casts a Value to a RegExp.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Value*\",\n                        \"purpose\": \"The value to cast.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"RegExp*\",\n                    \"description\": \"The cast RegExp.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n  V8_INLINE static RegExp* Cast(Value* value) {\n#ifdef V8_ENABLE_CHECKS\n    CheckCast(value);\n#endif\n    return static_cast<RegExp*>(value);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CheckCast\",\n                \"parent\": \"RegExp\",\n                \"about\": \"Checks if a Value can be cast to a RegExp.\",\n                \"logic\": \"Checks if a Value can be cast to a RegExp.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"obj\",\n                        \"type\": \"Value*\",\n                        \"purpose\": \"The object to check.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n private:\n  static void CheckCast(Value* obj);\n        ]]></code>\n    </func>\n</file>\n```"
}