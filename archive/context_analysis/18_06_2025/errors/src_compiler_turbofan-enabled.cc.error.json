{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turbofan-enabled.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 69, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turbofan-enabled.cc\",\n            \"file_name\": \"turbofan-enabled.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Implements the Turbofan API when Turbofan is enabled in V8.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for compiler, pipeline, turbofan, and object code kinds.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/codegen/compiler.h\"\n#include \"src/compiler/pipeline.h\"\n#include \"src/compiler/turbofan.h\"\n#include \"src/objects/code-kind.h\"\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"NewCompilationJob\",\n                \"parent\": null,\n                \"about\": \"Creates a new Turbofan compilation job.\",\n                \"logic\": \"Calls Pipeline::NewCompilationJob to create the compilation job with TURBOFAN_JS code kind.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"isolate\",\n                        \"type\": \"Isolate*\",\n                        \"purpose\": \"The V8 isolate.\"\n                    },\n                    {\n                        \"name\": \"function\",\n                        \"type\": \"Handle<JSFunction>\",\n                        \"purpose\": \"The JavaScript function to compile.\"\n                    },\n                    {\n                        \"name\": \"has_script\",\n                        \"type\": \"IsScriptAvailable\",\n                        \"purpose\": \"Indicates whether the script is available.\"\n                    },\n                    {\n                        \"name\": \"osr_offset\",\n                        \"type\": \"BytecodeOffset\",\n                        \"purpose\": \"The offset for on-stack replacement (OSR).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::unique_ptr<TurbofanCompilationJob>\",\n                    \"description\": \"A unique pointer to the newly created TurbofanCompilationJob.\"\n                },\n                \"dependencies\": [\n                    \"Pipeline\",\n                    \"CodeKind\",\n                    \"TurbofanCompilationJob\",\n                    \"Isolate\",\n                    \"JSFunction\",\n                    \"IsScriptAvailable\",\n                    \"BytecodeOffset\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<TurbofanCompilationJob> NewCompilationJob(\n    Isolate* isolate, Handle<JSFunction> function, IsScriptAvailable has_script,\n    BytecodeOffset osr_offset) {\n  return Pipeline::NewCompilationJob(isolate, function, CodeKind::TURBOFAN_JS,\n                                     has_script == IsScriptAvailable::kYes,\n                                     osr_offset);\n}\n        ]]></code>\n    </func>\n</file>\n```"
}