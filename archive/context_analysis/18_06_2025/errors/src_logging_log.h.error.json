{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/logging/log.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/logging/log.h\",\n        \"file_name\": \"log.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the logging infrastructure for V8, including classes for file logging, code event handling, and integration with profiling tools.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard C++ libraries and V8-specific headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <atomic>\n            #include <memory>\n            #include <set>\n            #include <string>\n\n            #include \"include/v8-callbacks.h\"\n            #include \"include/v8-profiler.h\"\n            #include \"src/base/platform/elapsed-timer.h\"\n            #include \"src/execution/isolate.h\"\n            #include \"src/logging/code-events.h\"\n            #include \"src/objects/objects.h\"\n            #include \"src/regexp/regexp-flags.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ExistingCodeLogger\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Logs existing code objects (functions, builtins) within the isolate.  Used during startup or when logging is enabled late.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                },\n                {\n                    \"name\": \"listener_\",\n                    \"type\": \"LogEventListener*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the LogEventListener to which code events are reported.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"LogEventListener\",\n                \"SharedFunctionInfo\",\n                \"AbstractCode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class ExistingCodeLogger {\n            public:\n            using CodeTag = LogEventListener::CodeTag;\n            explicit ExistingCodeLogger(Isolate* isolate,\n                                        LogEventListener* listener = nullptr)\n                : isolate_(isolate), listener_(listener) {}\n\n            void LogCodeObjects();\n            void LogBuiltins();\n\n            void LogCompiledFunctions(bool ensure_source_positions_available = true);\n            void LogExistingFunction(\n                DirectHandle<SharedFunctionInfo> shared, DirectHandle<AbstractCode> code,\n                LogEventListener::CodeTag tag = LogEventListener::CodeTag::kFunction);\n            void LogCodeObject(Tagged<AbstractCode> object);\n\n            #if defined(V8_ENABLE_ETW_STACK_WALKING)\n            void LogInterpretedFunctions();\n            #endif  // V8_ENABLE_ETW_STACK_WALKING\n\n            private:\n            Isolate* isolate_;\n            LogEventListener* listener_;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"V8FileLogger\",\n            \"extends\": \"LogEventListener\",\n            \"implements\": [],\n            \"about\": \"The main class responsible for logging V8 execution information to a file. Manages the log file, profiler, and code event listeners.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                },\n                {\n                    \"name\": \"ticker_\",\n                    \"type\": \"std::unique_ptr<Ticker>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Manages the timer for statistical profiling.\"\n                },\n                {\n                    \"name\": \"profiler_\",\n                    \"type\": \"std::unique_ptr<Profiler>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles collection of statistical profiling samples.\"\n                },\n                {\n                    \"name\": \"is_logging_\",\n                    \"type\": \"std::atomic<bool>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Atomic boolean flag indicating whether logging is enabled.\"\n                },\n                {\n                    \"name\": \"log_file_\",\n                    \"type\": \"std::unique_ptr<LogFile>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Manages the log file operations.\"\n                },\n                {\n                    \"name\": \"perf_basic_logger_\",\n                    \"type\": \"std::unique_ptr<LinuxPerfBasicLogger>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles basic logging for Linux perf.\"\n                },\n                {\n                    \"name\": \"perf_jit_logger_\",\n                    \"type\": \"std::unique_ptr<LinuxPerfJitLogger>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles JIT logging for Linux perf.\"\n                },\n                {\n                    \"name\": \"ll_logger_\",\n                    \"type\": \"std::unique_ptr<LowLevelLogger>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles low-level logging.\"\n                },\n                {\n                    \"name\": \"jit_logger_\",\n                    \"type\": \"std::unique_ptr<JitLogger>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles JIT code logging.\"\n                },\n                {\n                    \"name\": \"gdb_jit_logger_\",\n                    \"type\": \"std::unique_ptr<JitLogger>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles GDB JIT interface logging.\"\n                },\n                {\n                    \"name\": \"etw_jit_logger_\",\n                    \"type\": \"std::unique_ptr<ETWJitLogger>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Handles ETW JIT logging for stack walking.\"\n                },\n                {\n                    \"name\": \"logged_source_code_\",\n                    \"type\": \"std::set<int>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Keeps track of logged script sources to avoid duplicates.\"\n                },\n                {\n                    \"name\": \"next_source_info_id_\",\n                    \"type\": \"uint32_t\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Counter for generating unique source information IDs.\"\n                },\n                {\n                    \"name\": \"is_initialized_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Flag to guard against multiple calls to TearDown().\"\n                },\n                {\n                    \"name\": \"existing_code_logger_\",\n                    \"type\": \"ExistingCodeLogger\",\n                    \"access\": \"private\",\n                    \"purpose\": \"An instance of ExistingCodeLogger to handle logging of pre-existing code.\"\n                },\n                {\n                    \"name\": \"timer_\",\n                    \"type\": \"base::ElapsedTimer\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Timer for measuring elapsed time.\"\n                }\n            ],\n            \"dependencies\": [\n                \"LogEventListener\",\n                \"Isolate\",\n                \"LogFile\",\n                \"Profiler\",\n                \"Ticker\",\n                \"LinuxPerfBasicLogger\",\n                \"LinuxPerfJitLogger\",\n                \"LowLevelLogger\",\n                \"JitLogger\",\n                \"ETWJitLogger\",\n                \"ExistingCodeLogger\",\n                \"sampler::Sampler\",\n                \"SharedFunctionInfo\",\n                \"AbstractCode\",\n                \"String\",\n                \"Script\",\n                \"Map\",\n                \"Object\",\n                \"Code\",\n                \"InstructionStream\",\n                \"BytecodeArray\",\n                \"HeapObject\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class V8FileLogger : public LogEventListener {\n            public:\n            explicit V8FileLogger(Isolate* isolate);\n            ~V8FileLogger() override;\n\n            // The separator is used to write an unescaped \",\" into the log.\n            static const LogSeparator kNext;\n\n            // Acquires resources for logging if the right flags are set.\n            bool SetUp(Isolate* isolate);\n\n            // Additional steps taken after the logger has been set up.\n            void LateSetup(Isolate* isolate);\n\n            // Frees resources acquired in SetUp.\n            // When a temporary file is used for the log, returns its stream descriptor,\n            // leaving the file open.\n            V8_EXPORT_PRIVATE FILE* TearDownAndGetLogFile();\n\n            // Sets the current code event handler.\n            void SetCodeEventHandler(uint32_t options, JitCodeEventHandler event_handler);\n\n            #if defined(V8_ENABLE_ETW_STACK_WALKING)\n            void SetEtwCodeEventHandler(uint32_t options);\n            void ResetEtwCodeEventHandler();\n            #endif  // V8_ENABLE_ETW_STACK_WALKING\n\n            sampler::Sampler* sampler();\n            V8_EXPORT_PRIVATE std::string file_name() const;\n\n            V8_EXPORT_PRIVATE void StopProfilerThread();\n\n            // Emits an event with a string value -> (name, value).\n            V8_EXPORT_PRIVATE void StringEvent(const char* name, const char* value);\n\n            // Emits an event with an int value -> (name, value).\n            void IntPtrTEvent(const char* name, intptr_t value);\n\n            // Emits memory management events for C allocated structures.\n            void NewEvent(const char* name, void* object, size_t size);\n            void DeleteEvent(const char* name, void* object);\n\n            // ==== Events logged by --log-function-events ====\n            void FunctionEvent(const char* reason, int script_id, double time_delta_ms,\n                                int start_position, int end_position,\n                                Tagged<String> function_name);\n            void FunctionEvent(const char* reason, int script_id, double time_delta_ms,\n                                int start_position, int end_position,\n                                const char* function_name = nullptr,\n                                size_t function_name_length = 0, bool is_one_byte = true);\n\n            void CompilationCacheEvent(const char* action, const char* cache_type,\n                                    Tagged<SharedFunctionInfo> sfi);\n            void ScriptEvent(ScriptEventType type, int script_id);\n            void ScriptDetails(Tagged<Script> script);\n\n            // LogEventListener implementation.\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                const char* name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<Name> name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<SharedFunctionInfo> shared,\n                                DirectHandle<Name> script_name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<SharedFunctionInfo> shared,\n                                DirectHandle<Name> script_name, int line,\n                                int column) override;\n            #if V8_ENABLE_WEBASSEMBLY\n            void CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                                wasm::WasmName name, const char* source_url,\n                                int code_offset, int script_id) override;\n            #endif  // V8_ENABLE_WEBASSEMBLY\n\n            void CallbackEvent(DirectHandle<Name> name, Address entry_point) override;\n            void GetterCallbackEvent(DirectHandle<Name> name,\n                                    Address entry_point) override;\n            void SetterCallbackEvent(DirectHandle<Name> name,\n                                    Address entry_point) override;\n            void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                        DirectHandle<String> source,\n                                        RegExpFlags flags) override;\n            void CodeMoveEvent(Tagged<InstructionStream> from,\n                                Tagged<InstructionStream> to) override;\n            void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                                Tagged<BytecodeArray> to) override;\n            void SharedFunctionInfoMoveEvent(Address from, Address to) override;\n            void NativeContextMoveEvent(Address from, Address to) override {}\n            void CodeMovingGCEvent() override;\n            void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                                    DirectHandle<SharedFunctionInfo> shared) override;\n            void CodeDeoptEvent(DirectHandle<Code> code, DeoptimizeKind kind, Address pc,\n                                int fp_to_sp_delta) override;\n            void CodeDependencyChangeEvent(DirectHandle<Code> code,\n                                            DirectHandle<SharedFunctionInfo> sfi,\n                                            const char* reason) override;\n            void FeedbackVectorEvent(Tagged<FeedbackVector> vector,\n                                    Tagged<AbstractCode> code);\n            void WeakCodeClearEvent() override {}\n\n            void ProcessDeoptEvent(DirectHandle<Code> code, SourcePosition position,\n                                    const char* kind, const char* reason);\n\n            // Emits a code line info record event.\n            void CodeLinePosInfoRecordEvent(\n                Address code_start, Tagged<TrustedByteArray> source_position_table,\n                JitCodeEvent::CodeType code_type);\n            #if V8_ENABLE_WEBASSEMBLY\n            void WasmCodeLinePosInfoRecordEvent(\n                Address code_start, base::Vector<const uint8_t> source_position_table);\n            #endif  // V8_ENABLE_WEBASSEMBLY\n\n            void CodeNameEvent(Address addr, int pos, const char* code_name);\n\n            void ICEvent(const char* type, bool keyed, DirectHandle<Map> map,\n                        DirectHandle<Object> key, char old_state, char new_state,\n                        const char* modifier, const char* slow_stub_reason);\n\n            void MapEvent(\n                const char* type, DirectHandle<Map> from, DirectHandle<Map> to,\n                const char* reason = nullptr,\n                DirectHandle<HeapObject> name_or_sfi = DirectHandle<HeapObject>());\n            void MapCreate(Tagged<Map> map);\n            void MapDetails(Tagged<Map> map);\n            void MapMoveEvent(Tagged<Map> from, Tagged<Map> to);\n\n            void SharedLibraryEvent(const std::string& library_path, uintptr_t start,\n                                    uintptr_t end, intptr_t aslr_slide);\n            void SharedLibraryEnd();\n\n            void CurrentTimeEvent();\n\n            V8_EXPORT_PRIVATE void TimerEvent(v8::LogEventStatus se, const char* name);\n\n            static void EnterExternal(Isolate* isolate);\n            static void LeaveExternal(Isolate* isolate);\n\n            V8_NOINLINE V8_PRESERVE_MOST static void CallEventLoggerInternal(\n                Isolate* isolate, const char* name, v8::LogEventStatus se,\n                bool expose_to_api) {\n            LOG(isolate, TimerEvent(se, name));\n            if (V8_UNLIKELY(isolate->event_logger())) {\n                isolate->event_logger()(name, se);\n            }\n            }\n\n            V8_INLINE static void CallEventLogger(Isolate* isolate, const char* name,\n                                                v8::LogEventStatus se,\n                                                bool expose_to_api) {\n            if (V8_UNLIKELY(v8_flags.log_timer_events)) {\n                CallEventLoggerInternal(isolate, name, se, expose_to_api);\n            }\n            }\n\n            V8_EXPORT_PRIVATE bool is_logging();\n\n            bool is_listening_to_code_events() override {\n            return\n            #if defined(V8_ENABLE_ETW_STACK_WALKING)\n                etw_jit_logger_ != nullptr ||\n            #endif  // V8_ENABLE_ETW_STACK_WALKING\n                is_logging() || jit_logger_ != nullptr;\n            }\n\n            bool allows_code_compaction() override {\n            #if defined(V8_ENABLE_ETW_STACK_WALKING)\n            return etw_jit_logger_ == nullptr;\n            #else   // V8_ENABLE_ETW_STACK_WALKING\n            return true;\n            #endif  // V8_ENABLE_ETW_STACK_WALKING\n            }\n\n            void LogExistingFunction(DirectHandle<SharedFunctionInfo> shared,\n                                    DirectHandle<AbstractCode> code);\n            // Logs all compiled functions found in the heap.\n            V8_EXPORT_PRIVATE void LogCompiledFunctions(\n                bool ensure_source_positions_available = true);\n            // Logs all accessor callbacks found in the heap.\n            V8_EXPORT_PRIVATE void LogAccessorCallbacks();\n            // Used for logging stubs found in the snapshot.\n            V8_EXPORT_PRIVATE void LogCodeObjects();\n            V8_EXPORT_PRIVATE void LogBuiltins();\n            // Logs all Maps found on the heap.\n            void LogAllMaps();\n\n            // Converts tag to a corresponding NATIVE_... if the script is native.\n            V8_INLINE static CodeTag ToNativeByScript(CodeTag tag, Tagged<Script> script);\n\n            #if defined(V8_ENABLE_ETW_STACK_WALKING)\n            void LogInterpretedFunctions();\n            #endif  // V8_ENABLE_ETW_STACK_WALKING\n\n            private:\n            Logger* logger() const;\n\n            void UpdateIsLogging(bool value);\n\n            // Emits the profiler's first message.\n            void ProfilerBeginEvent();\n\n            // Emits callback event messages.\n            void CallbackEventInternal(const char* prefix, DirectHandle<Name> name,\n                                        Address entry_point);\n\n            // Internal configurable move event.\n            void MoveEventInternal(Event event, Address from, Address to);\n\n            // Helper method. It resets name_buffer_ and add tag name into it.\n            void InitNameBuffer(Event tag);\n\n            // Emits a profiler tick event. Used by the profiler thread.\n            void TickEvent(TickSample* sample, bool overflow);\n            void RuntimeCallTimerEvent();\n\n            // Logs a StringEvent regardless of whether v8_flags.log is true.\n            void UncheckedStringEvent(const char* name, const char* value);\n\n            // Logs a scripts sources. Keeps track of all logged scripts to ensure that\n            // each script is logged only once.\n            bool EnsureLogScriptSource(Tagged<Script> script);\n\n            void LogSourceCodeInformation(DirectHandle<AbstractCode> code,\n                                        DirectHandle<SharedFunctionInfo> shared);\n            void LogCodeDisassemble(DirectHandle<AbstractCode> code);\n\n            void WriteApiSecurityCheck();\n            void WriteApiNamedPropertyAccess(const char* tag, Tagged<JSObject> holder,\n                                            Tagged<Object> name);\n            void WriteApiIndexedPropertyAccess(const char* tag, Tagged<JSObject> holder,\n                                            uint32_t index);\n            void WriteApiObjectAccess(const char* tag, Tagged<JSReceiver> obj);\n            void WriteApiEntryCall(const char* name);\n\n            int64_t Time();\n\n            Isolate* isolate_;\n\n            // The sampler used by the profiler and the sliding state window.\n            std::unique_ptr<Ticker> ticker_;\n\n            // When the statistical profile is active, profiler_\n            // points to a Profiler, that handles collection\n            // of samples.\n            std::unique_ptr<Profiler> profiler_;\n\n            // Internal implementation classes with access to private members.\n            friend class Profiler;\n\n            std::atomic<bool> is_logging_;\n            std::unique_ptr<LogFile> log_file_;\n            #if V8_OS_LINUX\n            std::unique_ptr<LinuxPerfBasicLogger> perf_basic_logger_;\n            std::unique_ptr<LinuxPerfJitLogger> perf_jit_logger_;\n            #endif\n            std::unique_ptr<LowLevelLogger> ll_logger_;\n            std::unique_ptr<JitLogger> jit_logger_;\n            #ifdef ENABLE_GDB_JIT_INTERFACE\n            std::unique_ptr<JitLogger> gdb_jit_logger_;\n            #endif\n            #if defined(V8_ENABLE_ETW_STACK_WALKING)\n            std::unique_ptr<ETWJitLogger> etw_jit_logger_;\n            #endif  // V8_ENABLE_ETW_STACK_WALKING\n            std::set<int> logged_source_code_;\n            uint32_t next_source_info_id_ = 0;\n\n            // Guards against multiple calls to TearDown() that can happen in some tests.\n            // 'true' between SetUp() and TearDown().\n            bool is_initialized_;\n\n            ExistingCodeLogger existing_code_logger_;\n\n            base::ElapsedTimer timer_;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CodeEventLogger\",\n            \"extends\": \"LogEventListener\",\n            \"implements\": [],\n            \"about\": \"Abstract base class for logging code events.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                },\n                {\n                    \"name\": \"name_buffer_\",\n                    \"type\": \"std::unique_ptr<NameBuffer>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Buffer for storing names.\"\n                }\n            ],\n            \"dependencies\": [\n                \"LogEventListener\",\n                \"Isolate\",\n                \"AbstractCode\",\n                \"SharedFunctionInfo\",\n                \"Name\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            // Abstract\n            class V8_EXPORT_PRIVATE CodeEventLogger : public LogEventListener {\n            public:\n            explicit CodeEventLogger(Isolate* isolate);\n            ~CodeEventLogger() override;\n\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                const char* name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<Name> name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<SharedFunctionInfo> shared,\n                                DirectHandle<Name> script_name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<SharedFunctionInfo> shared,\n                                DirectHandle<Name> script_name, int line,\n                                int column) override;\n            #if V8_ENABLE_WEBASSEMBLY\n            void CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                                wasm::WasmName name, const char* source_url,\n                                int code_offset, int script_id) override;\n            #endif  // V8_ENABLE_WEBASSEMBLY\n\n            void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                        DirectHandle<String> source,\n                                        RegExpFlags flags) override;\n            void CallbackEvent(DirectHandle<Name> name, Address entry_point) override {}\n            void GetterCallbackEvent(DirectHandle<Name> name,\n                                    Address entry_point) override {}\n            void SetterCallbackEvent(DirectHandle<Name> name,\n                                    Address entry_point) override {}\n            void SharedFunctionInfoMoveEvent(Address from, Address to) override {}\n            void NativeContextMoveEvent(Address from, Address to) override {}\n            void CodeMovingGCEvent() override {}\n            void CodeDeoptEvent(DirectHandle<Code> code, DeoptimizeKind kind, Address pc,\n                                int fp_to_sp_delta) override {}\n            void CodeDependencyChangeEvent(DirectHandle<Code> code,\n                                            DirectHandle<SharedFunctionInfo> sfi,\n                                            const char* reason) override {}\n            void WeakCodeClearEvent() override {}\n\n            bool is_listening_to_code_events() override { return true; }\n\n            protected:\n            Isolate* isolate_;\n\n            private:\n            class NameBuffer;\n\n            virtual void LogRecordedBuffer(\n                Tagged<AbstractCode> code,\n                MaybeDirectHandle<SharedFunctionInfo> maybe_shared, const char* name,\n                size_t length) = 0;\n            #if V8_ENABLE_WEBASSEMBLY\n            virtual void LogRecordedBuffer(const wasm::WasmCode* code, const char* name,\n                                            size_t length) = 0;\n            #endif  // V8_ENABLE_WEBASSEMBLY\n\n            std::unique_ptr<NameBuffer> name_buffer_;\n            };\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ExternalLogEventListener\",\n            \"extends\": \"LogEventListener\",\n            \"implements\": [],\n            \"about\": \"Listens for code events and forwards them to an external v8::CodeEventHandler.\",\n            \"attributes\": [\n                {\n                    \"name\": \"is_listening_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether the listener is active.\"\n                },\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                },\n                {\n                    \"name\": \"code_event_handler_\",\n                    \"type\": \"v8::CodeEventHandler*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the external code event handler.\"\n                }\n            ],\n            \"dependencies\": [\n                \"LogEventListener\",\n                \"Isolate\",\n                \"AbstractCode\",\n                \"SharedFunctionInfo\",\n                \"Name\",\n                \"String\",\n                \"CodeEventHandler\",\n                \"InstructionStream\",\n                \"BytecodeArray\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n            class ExternalLogEventListener : public LogEventListener {\n            public:\n            explicit ExternalLogEventListener(Isolate* isolate);\n            ~ExternalLogEventListener() override;\n\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                const char* comment) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<Name> name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<SharedFunctionInfo> shared,\n                                DirectHandle<Name> name) override;\n            void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                                DirectHandle<SharedFunctionInfo> shared,\n                                DirectHandle<Name> source, int line,\n                                int column) override;\n            #if V8_ENABLE_WEBASSEMBLY\n            void CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                                wasm::WasmName name, const char* source_url,\n                                int code_offset, int script_id) override;\n            #endif  // V8_ENABLE_WEBASSEMBLY\n\n            void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                        DirectHandle<String> source,\n                                        RegExpFlags flags) override;\n            void CallbackEvent(DirectHandle<Name> name, Address entry_point) override {}\n            void GetterCallbackEvent(DirectHandle<Name> name,\n                                    Address entry_point) override {}\n            void SetterCallbackEvent(DirectHandle<Name> name,\n                                    Address entry_point) override {}\n            void SharedFunctionInfoMoveEvent(Address from, Address to) override {}\n            void NativeContextMoveEvent(Address from, Address to) override {}\n            void CodeMoveEvent(Tagged<InstructionStream> from,\n                                Tagged<InstructionStream> to) override;\n            void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                                Tagged<BytecodeArray> to) override;\n            void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                                    DirectHandle<SharedFunctionInfo> shared) override {}\n            void CodeMovingGCEvent() override {}\n            void CodeDeoptEvent(DirectHandle<Code> code, DeoptimizeKind kind, Address pc,\n                                int fp_to_sp_delta) override {}\n            void CodeDependencyChangeEvent(DirectHandle<Code> code,\n                                            DirectHandle<SharedFunctionInfo> sfi,\n                                            const char* reason) override {}\n            void WeakCodeClearEvent() override {}\n\n            void StartListening(v8::CodeEventHandler* code_event_handler);\n            void StopListening();\n\n            bool is_listening_to_code_events() override { return true; }\n\n            private:\n            void LogExistingCode();\n\n            bool is_listening_;\n            Isolate* isolate_;\n            v8::CodeEventHandler* code_event_handler_;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LogEventListener\",\n                \"about\": \"Abstract base class for log event listeners.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class LogEventListener {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JitLogger\",\n                \"about\": \"Abstracts JIT (Just-In-Time) code logging.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class JitLogger {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LogFile\",\n                \"about\": \"Manages the log file.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class LogFile {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LowLevelLogger\",\n                \"about\": \"Abstracts low-level logging.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class LowLevelLogger {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LinuxPerfBasicLogger\",\n                \"about\": \"Logger for basic perf on Linux.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class LinuxPerfBasicLogger {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LinuxPerfJitLogger\",\n                \"about\": \"Logger for JIT events on Linux.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class LinuxPerfJitLogger {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Profiler\",\n                \"about\": \"Collects statistical profiling information (ticks).\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Profiler {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourcePosition\",\n                \"about\": \"Represents a position in the source code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class SourcePosition {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Ticker\",\n                \"about\": \"Generates ticks for the profiler.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Ticker {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ETWJitLogger\",\n                \"about\": \"Handles Event Tracing for Windows (ETW) JIT logging.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ETWJitLogger {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"sampler::Sampler\",\n                \"about\": \"Sampler class in sampler namespace\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace sampler {\n                class Sampler;\n                }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SharedFunctionInfo\",\n                \"about\": \"Shared information between functions.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class SharedFunctionInfo {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"AbstractCode\",\n                \"about\": \"Abstract base class for code objects.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class AbstractCode {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"String\",\n                \"about\": \"String class.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class String {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Script\",\n                \"about\": \"Script class.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Script {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                "
}