{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/opmasks.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/opmasks.h\",\n            \"file_name\": \"opmasks.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines opmasks for Turboshaft compiler, enabling type checks and casts based on operation properties.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for operations and representations in Turboshaft.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/turboshaft/operations.h\"\n#include \"src/compiler/turboshaft/representations.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"OpMaskField\",\n                \"about\": \"Represents a field within an operation's mask, storing its type, offset, and size.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"offset\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Byte offset of the field within the operation.\"\n                    },\n                    {\n                        \"name\": \"size\",\n                        \"type\": \"size_t\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Size of the field in bytes.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename T, size_t Offset>\nstruct OpMaskField {\n  using type = T;\n  static constexpr size_t offset = Offset;\n  static constexpr size_t size = sizeof(T);\n\n  static_assert(offset + size <= sizeof(uint64_t));\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"encode_for_mask\",\n                \"about\": \"Encodes a value for use in an operation mask.\",\n                \"logic\": \"Statically casts the input value to a uint64_t.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"T\",\n                        \"purpose\": \"The value to encode.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"uint64_t\",\n                    \"description\": \"The encoded value.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename T>\nconstexpr uint64_t encode_for_mask(T value) {\n  return static_cast<uint64_t>(value);\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"UnwrapRepresentation\",\n                \"about\": \"Unwraps representation types to their enum values for use in masks.\",\n                \"attributes\": [],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename T>\nstruct UnwrapRepresentation {\n  using type = T;\n};\ntemplate <>\nstruct UnwrapRepresentation<WordRepresentation> {\n  using type = WordRepresentation::Enum;\n};\ntemplate <>\nstruct UnwrapRepresentation<FloatRepresentation> {\n  using type = FloatRepresentation::Enum;\n};\ntemplate <>\nstruct UnwrapRepresentation<RegisterRepresentation> {\n  using type = RegisterRepresentation::Enum;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"MaskBuilder\",\n                \"about\": \"Builds operation masks by combining a base mask with field-specific masks.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"Operation\",\n                    \"Opcode\",\n                    \"OpMaskField\",\n                    \"operation_to_opcode_v\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <typename Op, typename... Fields>\nstruct MaskBuilder {\n  static constexpr uint64_t BuildBaseMask() {\n    static_assert(OFFSET_OF(Operation, opcode) == 0);\n    static_assert(sizeof(Operation::opcode) == sizeof(uint8_t));\n    static_assert(sizeof(Operation) == 4);\n#if V8_TARGET_BIG_ENDIAN\n    return static_cast<uint64_t>(0xFF)\n           << ((sizeof(uint64_t) - sizeof(uint8_t)) * kBitsPerByte);\n#else\n    return static_cast<uint64_t>(0xFF);\n#endif\n  }\n\n  static constexpr uint64_t EncodeBaseValue(Opcode opcode) {\n    static_assert(OFFSET_OF(Operation, opcode) == 0);\n#if V8_TARGET_BIG_ENDIAN\n    return static_cast<uint64_t>(opcode)\n           << ((sizeof(uint64_t) - sizeof(Operation::opcode)) * kBitsPerByte);\n#else\n    return static_cast<uint64_t>(opcode);\n#endif\n  }\n\n  static constexpr uint64_t BuildMask() {\n    constexpr uint64_t base_mask = BuildBaseMask();\n    return (base_mask | ... | BuildFieldMask<Fields>());\n  }\n\n  static constexpr uint64_t EncodeValue(typename Fields::type... args) {\n    constexpr uint64_t base_mask = EncodeBaseValue(operation_to_opcode_v<Op>);\n    return (base_mask | ... | EncodeFieldValue<Fields>(args));\n  }\n\n  template <typename F>\n  static constexpr uint64_t BuildFieldMask() {\n    static_assert(F::size < sizeof(uint64_t));\n    static_assert(F::offset + F::size <= sizeof(uint64_t));\n    constexpr uint64_t ones = static_cast<uint64_t>(-1) >>\n                              ((sizeof(uint64_t) - F::size) * kBitsPerByte);\n#if V8_TARGET_BIG_ENDIAN\n    return ones << ((sizeof(uint64_t) - F::size - F::offset) * kBitsPerByte);\n#else\n    return ones << (F::offset * kBitsPerByte);\n#endif\n  }\n\n  template <typename F>\n  static constexpr uint64_t EncodeFieldValue(typename F::type value) {\n#if V8_TARGET_BIG_ENDIAN\n    return encode_for_mask(value)\n           << ((sizeof(uint64_t) - F::size - F::offset) * kBitsPerByte);\n#else\n    return encode_for_mask(value) << (F::offset * kBitsPerByte);\n#endif\n  }\n\n  template <typename Fields::type... Args>\n  using For = OpMaskT<Op, BuildMask(), EncodeValue(Args...)>;\n};\n        ]]></code>\n    </class>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"WordBinopMask\",\n                \"about\": \"Mask for WordBinopOp operations based on kind and representation.\",\n                \"dependencies\": [\n                    \"WordBinopOp\",\n                    \"FIELD\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing WordBinopMask =\n    MaskBuilder<WordBinopOp, FIELD(WordBinopOp, kind), FIELD(WordBinopOp, rep)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"WordBinopKindMask\",\n                \"about\": \"Mask for WordBinopOp operations based on kind only.\",\n                \"dependencies\": [\n                    \"WordBinopOp\",\n                    \"FIELD\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing WordBinopKindMask = MaskBuilder<WordBinopOp, FIELD(WordBinopOp, kind)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32Add\",\n                \"about\": \"Specific mask for Word32 addition operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32Add =\n    WordBinopMask::For<WordBinopOp::Kind::kAdd, WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32Sub\",\n                \"about\": \"Specific mask for Word32 subtraction operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32Sub =\n    WordBinopMask::For<WordBinopOp::Kind::kSub, WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32Mul\",\n                \"about\": \"Specific mask for Word32 multiplication operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32Mul =\n    WordBinopMask::For<WordBinopOp::Kind::kMul, WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32SignedMulOverflownBits\",\n                \"about\": \"Specific mask for signed Word32 multiplication with overflow check.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32SignedMulOverflownBits =\n    WordBinopMask::For<WordBinopOp::Kind::kSignedMulOverflownBits,\n                       WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32UnsignedMulOverflownBits\",\n                \"about\": \"Specific mask for unsigned Word32 multiplication with overflow check.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32UnsignedMulOverflownBits =\n    WordBinopMask::For<WordBinopOp::Kind::kUnsignedMulOverflownBits,\n                       WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32BitwiseAnd\",\n                \"about\": \"Specific mask for Word32 bitwise AND operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32BitwiseAnd = WordBinopMask::For<WordBinopOp::Kind::kBitwiseAnd,\n                                             WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32BitwiseOr\",\n                \"about\": \"Specific mask for Word32 bitwise OR operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32BitwiseOr = WordBinopMask::For<WordBinopOp::Kind::kBitwiseOr,\n                                            WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32BitwiseXor\",\n                \"about\": \"Specific mask for Word32 bitwise XOR operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32BitwiseXor = WordBinopMask::For<WordBinopOp::Kind::kBitwiseXor,\n                                             WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64Add\",\n                \"about\": \"Specific mask for Word64 addition operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64Add =\n    WordBinopMask::For<WordBinopOp::Kind::kAdd, WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64Sub\",\n                \"about\": \"Specific mask for Word64 subtraction operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64Sub =\n    WordBinopMask::For<WordBinopOp::Kind::kSub, WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64Mul\",\n                \"about\": \"Specific mask for Word64 multiplication operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64Mul =\n    WordBinopMask::For<WordBinopOp::Kind::kMul, WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64BitwiseAnd\",\n                \"about\": \"Specific mask for Word64 bitwise AND operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64BitwiseAnd = WordBinopMask::For<WordBinopOp::Kind::kBitwiseAnd,\n                                             WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64BitwiseOr\",\n                \"about\": \"Specific mask for Word64 bitwise OR operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64BitwiseOr = WordBinopMask::For<WordBinopOp::Kind::kBitwiseOr,\n                                            WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64BitwiseXor\",\n                \"about\": \"Specific mask for Word64 bitwise XOR operations.\",\n                \"dependencies\": [\n                    \"WordBinopMask\",\n                    \"WordBinopOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64BitwiseXor = WordBinopMask::For<WordBinopOp::Kind::kBitwiseXor,\n                                             WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kBitwiseAnd\",\n                \"about\": \"Mask for any bitwise AND operations (WordBinop).\",\n                \"dependencies\": [\n                    \"WordBinopKindMask\",\n                    \"WordBinopOp\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kBitwiseAnd = WordBinopKindMask::For<WordBinopOp::Kind::kBitwiseAnd>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kBitwiseXor\",\n                \"about\": \"Mask for any bitwise XOR operations (WordBinop).\",\n                \"dependencies\": [\n                    \"WordBinopKindMask\",\n                    \"WordBinopOp\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kBitwiseXor = WordBinopKindMask::For<WordBinopOp::Kind::kBitwiseXor>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"WordUnaryMask\",\n                \"about\": \"Mask for WordUnaryOp operations based on kind and representation.\",\n                \"dependencies\": [\n                    \"WordUnaryOp\",\n                    \"FIELD\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing WordUnaryMask =\n    MaskBuilder<WordUnaryOp, FIELD(WordUnaryOp, kind), FIELD(WordUnaryOp, rep)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32ReverseBytes\",\n                \"about\": \"Specific mask for Word32 reverse bytes operations.\",\n                \"dependencies\": [\n                    \"WordUnaryMask\",\n                    \"WordUnaryOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32ReverseBytes = WordUnaryMask::For<WordUnaryOp::Kind::kReverseBytes,\n                                               WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64ReverseBytes\",\n                \"about\": \"Specific mask for Word64 reverse bytes operations.\",\n                \"dependencies\": [\n                    \"WordUnaryMask\",\n                    \"WordUnaryOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64ReverseBytes = WordUnaryMask::For<WordUnaryOp::Kind::kReverseBytes,\n                                               WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"FloatUnaryMask\",\n                \"about\": \"Mask for FloatUnaryOp operations based on kind and representation.\",\n                \"dependencies\": [\n                    \"FloatUnaryOp\",\n                    \"FIELD\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing FloatUnaryMask = MaskBuilder<FloatUnaryOp, FIELD(FloatUnaryOp, kind),\n                                   FIELD(FloatUnaryOp, rep)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat32Negate\",\n                \"about\": \"Specific mask for Float32 negate operations.\",\n                \"dependencies\": [\n                    \"FloatUnaryMask\",\n                    \"FloatUnaryOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat32Negate = FloatUnaryMask::For<FloatUnaryOp::Kind::kNegate,\n                                           FloatRepresentation::Float32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat64Abs\",\n                \"about\": \"Specific mask for Float64 absolute value operations.\",\n                \"dependencies\": [\n                    \"FloatUnaryMask\",\n                    \"FloatUnaryOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat64Abs = FloatUnaryMask::For<FloatUnaryOp::Kind::kAbs,\n                                        FloatRepresentation::Float64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat64Negate\",\n                \"about\": \"Specific mask for Float64 negate operations.\",\n                \"dependencies\": [\n                    \"FloatUnaryMask\",\n                    \"FloatUnaryOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat64Negate = FloatUnaryMask::For<FloatUnaryOp::Kind::kNegate,\n                                           FloatRepresentation::Float64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"FloatBinopMask\",\n                \"about\": \"Mask for FloatBinopOp operations based on kind and representation.\",\n                \"dependencies\": [\n                    \"FloatBinopOp\",\n                    \"FIELD\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing FloatBinopMask = MaskBuilder<FloatBinopOp, FIELD(FloatBinopOp, kind),\n                                   FIELD(FloatBinopOp, rep)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat32Sub\",\n                \"about\": \"Specific mask for Float32 subtraction operations.\",\n                \"dependencies\": [\n                    \"FloatBinopMask\",\n                    \"FloatBinopOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat32Sub = FloatBinopMask::For<FloatBinopOp::Kind::kSub,\n                                        FloatRepresentation::Float32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat32Mul\",\n                \"about\": \"Specific mask for Float32 multiplication operations.\",\n                \"dependencies\": [\n                    \"FloatBinopMask\",\n                    \"FloatBinopOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat32Mul = FloatBinopMask::For<FloatBinopOp::Kind::kMul,\n                                        FloatRepresentation::Float32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat64Sub\",\n                \"about\": \"Specific mask for Float64 subtraction operations.\",\n                \"dependencies\": [\n                    \"FloatBinopMask\",\n                    \"FloatBinopOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat64Sub = FloatBinopMask::For<FloatBinopOp::Kind::kSub,\n                                        FloatRepresentation::Float64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kFloat64Mul\",\n                \"about\": \"Specific mask for Float64 multiplication operations.\",\n                \"dependencies\": [\n                    \"FloatBinopMask\",\n                    \"FloatBinopOp\",\n                    \"FloatRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kFloat64Mul = FloatBinopMask::For<FloatBinopOp::Kind::kMul,\n                                        FloatRepresentation::Float64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"ShiftMask\",\n                \"about\": \"Mask for ShiftOp operations based on kind and representation.\",\n                \"dependencies\": [\n                    \"ShiftOp\",\n                    \"FIELD\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing ShiftMask =\n    MaskBuilder<ShiftOp, FIELD(ShiftOp, kind), FIELD(ShiftOp, rep)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"ShiftKindMask\",\n                \"about\": \"Mask for ShiftOp operations based on kind only.\",\n                \"dependencies\": [\n                    \"ShiftOp\",\n                    \"FIELD\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing ShiftKindMask = MaskBuilder<ShiftOp, FIELD(ShiftOp, kind)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32ShiftLeft\",\n                \"about\": \"Specific mask for Word32 shift left operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32ShiftLeft =\n    ShiftMask::For<ShiftOp::Kind::kShiftLeft, WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32ShiftRightArithmetic\",\n                \"about\": \"Specific mask for Word32 arithmetic shift right operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32ShiftRightArithmetic =\n    ShiftMask::For<ShiftOp::Kind::kShiftRightArithmetic,\n                   WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32ShiftRightArithmeticShiftOutZeros\",\n                \"about\": \"Specific mask for Word32 arithmetic shift right operations that shift out zeros.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32ShiftRightArithmeticShiftOutZeros =\n    ShiftMask::For<ShiftOp::Kind::kShiftRightArithmeticShiftOutZeros,\n                   WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32ShiftRightLogical\",\n                \"about\": \"Specific mask for Word32 logical shift right operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32ShiftRightLogical =\n    ShiftMask::For<ShiftOp::Kind::kShiftRightLogical,\n                   WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32RotateRight\",\n                \"about\": \"Specific mask for Word32 rotate right operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord32RotateRight =\n    ShiftMask::For<ShiftOp::Kind::kRotateRight, WordRepresentation::Word32()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64ShiftLeft\",\n                \"about\": \"Specific mask for Word64 shift left operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64ShiftLeft =\n    ShiftMask::For<ShiftOp::Kind::kShiftLeft, WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64ShiftRightArithmetic\",\n                \"about\": \"Specific mask for Word64 arithmetic shift right operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64ShiftRightArithmetic =\n    ShiftMask::For<ShiftOp::Kind::kShiftRightArithmetic,\n                   WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord64ShiftRightLogical\",\n                \"about\": \"Specific mask for Word64 logical shift right operations.\",\n                \"dependencies\": [\n                    \"ShiftMask\",\n                    \"ShiftOp\",\n                    \"WordRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kWord64ShiftRightLogical =\n    ShiftMask::For<ShiftOp::Kind::kShiftRightLogical,\n                   WordRepresentation::Word64()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kShiftLeft\",\n                \"about\": \"Mask for any shift left operations (ShiftOp).\",\n                \"dependencies\": [\n                    \"ShiftKindMask\",\n                    \"ShiftOp\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kShiftLeft = ShiftKindMask::For<ShiftOp::Kind::kShiftLeft>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"PhiMask\",\n                \"about\": \"Mask for PhiOp operations based on representation.\",\n                \"dependencies\": [\n                    \"PhiOp\",\n                    \"FIELD\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing PhiMask = MaskBuilder<PhiOp, FIELD(PhiOp, rep)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kTaggedPhi\",\n                \"about\": \"Specific mask for tagged Phi operations.\",\n                \"dependencies\": [\n                    \"PhiMask\",\n                    \"RegisterRepresentation\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing kTaggedPhi = PhiMask::For<RegisterRepresentation::Tagged()>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"ConstantMask\",\n                \"about\": \"Mask for ConstantOp operations based on kind.\",\n                \"dependencies\": [\n                    \"ConstantOp\",\n                    \"FIELD\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nusing ConstantMask = MaskBuilder<ConstantOp, FIELD(ConstantOp, kind)>;\n        ]]></code>\n    </typedef>\n    <typedef>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type alias\",\n                \"name\": \"kWord32Constant\",\n                \"about\": \"Specific mask for Word32 constant"
}