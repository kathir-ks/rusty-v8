{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/graph-visualizer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 34, column 41",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/graph-visualizer.h\",\n        \"file_name\": \"graph-visualizer.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares classes and functions for visualizing the Turboshaft graph as JSON, including custom data printing.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for globals, node origin table, turboshaft graph, and handles.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/common/globals.h\"\n#include \"src/compiler/node-origin-table.h\"\n#include \"src/compiler/turboshaft/graph.h\"\n#include \"src/handles/handles.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"TurboshaftGraphAsJSON\",\n            \"about\": \"A structure to hold a Turboshaft graph, its node origins, and a temporary zone for JSON conversion.\",\n            \"attributes\": [\n                {\n                    \"name\": \"turboshaft_graph\",\n                    \"type\": \"const Graph&\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The Turboshaft graph to be visualized.\"\n                },\n                {\n                    \"name\": \"origins\",\n                    \"type\": \"NodeOriginTable*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The table containing node origins for debugging.\"\n                },\n                {\n                    \"name\": \"temp_zone\",\n                    \"type\": \"Zone*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"A temporary zone for allocations during JSON conversion.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Graph\",\n                \"NodeOriginTable\",\n                \"Zone\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct TurboshaftGraphAsJSON {\n  const Graph& turboshaft_graph;\n  NodeOriginTable* origins;\n  Zone* temp_zone;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"AsJSON\",\n            \"about\": \"Creates a TurboshaftGraphAsJSON object from a graph, node origin table, and zone.\",\n            \"logic\": \"This function is a simple constructor for the TurboshaftGraphAsJSON struct.\",\n            \"parameters\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"const Graph&\",\n                    \"purpose\": \"The Turboshaft graph.\"\n                },\n                {\n                    \"name\": \"origins\",\n                    \"type\": \"NodeOriginTable*\",\n                    \"purpose\": \"The node origin table.\"\n                },\n                {\n                    \"name\": \"temp_zone\",\n                    \"type\": \"Zone*\",\n                    \"purpose\": \"The temporary zone.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"TurboshaftGraphAsJSON\",\n                \"description\": \"A TurboshaftGraphAsJSON object.\"\n            },\n            \"dependencies\": [\n                \"TurboshaftGraphAsJSON\",\n                \"Graph\",\n                \"NodeOriginTable\",\n                \"Zone\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_INLINE V8_EXPORT_PRIVATE TurboshaftGraphAsJSON\nAsJSON(const Graph& graph, NodeOriginTable* origins, Zone* temp_zone) {\n  return TurboshaftGraphAsJSON{graph, origins, temp_zone};\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the << operator for TurboshaftGraphAsJSON to allow printing it to an output stream.\",\n            \"logic\": \"This declares the overload; the implementation likely resides in the corresponding .cc file.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"ad\",\n                    \"type\": \"const TurboshaftGraphAsJSON&\",\n                    \"purpose\": \"The TurboshaftGraphAsJSON object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"TurboshaftGraphAsJSON\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream& os,\n                                           const TurboshaftGraphAsJSON& ad);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSONTurboshaftGraphWriter\",\n            \"about\": \"A class responsible for writing a Turboshaft graph to a JSON format.\",\n            \"attributes\": [\n                {\n                    \"name\": \"os_\",\n                    \"type\": \"std::ostream&\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"The output stream to write the JSON to.\"\n                },\n                {\n                    \"name\": \"zone_\",\n                    \"type\": \"Zone*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"A zone for temporary allocations.\"\n                },\n                {\n                    \"name\": \"turboshaft_graph_\",\n                    \"type\": \"const Graph&\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"A reference to the Turboshaft graph.\"\n                },\n                {\n                    \"name\": \"origins_\",\n                    \"type\": \"NodeOriginTable*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"A pointer to the node origin table.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Graph\",\n                \"NodeOriginTable\",\n                \"Zone\",\n                \"std::ostream\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSONTurboshaftGraphWriter {\n public:\n  JSONTurboshaftGraphWriter(std::ostream& os, const Graph& turboshaft_graph,\n                            NodeOriginTable* origins, Zone* zone);\n\n  JSONTurboshaftGraphWriter(const JSONTurboshaftGraphWriter&) = delete;\n  JSONTurboshaftGraphWriter& operator=(const JSONTurboshaftGraphWriter&) =\n      delete;\n\n  void Print();\n\n protected:\n  void PrintNodes();\n  void PrintEdges();\n  void PrintBlocks();\n\n protected:\n  std::ostream& os_;\n  Zone* zone_;\n  const Graph& turboshaft_graph_;\n  NodeOriginTable* origins_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PrintTurboshaftCustomDataPerOperation\",\n            \"about\": \"Prints custom data associated with each operation (node) in the Turboshaft graph to a file.\",\n            \"logic\": \"Takes a function that knows how to print the custom data for a given operation and applies it to each operation in the graph.\",\n            \"parameters\": [\n                {\n                    \"name\": \"stream\",\n                    \"type\": \"std::ofstream&\",\n                    \"purpose\": \"The output file stream.\"\n                },\n                {\n                    \"name\": \"data_name\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"A descriptive name for the custom data being printed.\"\n                },\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"const Graph&\",\n                    \"purpose\": \"The Turboshaft graph.\"\n                },\n                {\n                    \"name\": \"printer\",\n                    \"type\": \"std::function<bool(std::ostream&, const Graph&, OpIndex)>\",\n                    \"purpose\": \"A function that prints the custom data for a given operation.  Returns true on success.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Graph\",\n                \"std::ofstream\",\n                \"std::function\",\n                \"OpIndex\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid PrintTurboshaftCustomDataPerOperation(\n    std::ofstream& stream, const char* data_name, const Graph& graph,\n    std::function<bool(std::ostream&, const Graph&, OpIndex)> printer);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"PrintTurboshaftCustomDataPerBlock\",\n            \"about\": \"Prints custom data associated with each block in the Turboshaft graph to a file.\",\n            \"logic\": \"Takes a function that knows how to print the custom data for a given block and applies it to each block in the graph.\",\n            \"parameters\": [\n                {\n                    \"name\": \"stream\",\n                    \"type\": \"std::ofstream&\",\n                    \"purpose\": \"The output file stream.\"\n                },\n                {\n                    \"name\": \"data_name\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"A descriptive name for the custom data being printed.\"\n                },\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"const Graph&\",\n                    \"purpose\": \"The Turboshaft graph.\"\n                },\n                {\n                    \"name\": \"printer\",\n                    \"type\": \"std::function<bool(std::ostream&, const Graph&, BlockIndex)>\",\n                    \"purpose\": \"A function that prints the custom data for a given block. Returns true on success.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Graph\",\n                \"std::ofstream\",\n                \"std::function\",\n                \"BlockIndex\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid PrintTurboshaftCustomDataPerBlock(\n    std::ofstream& stream, const char* data_name, const Graph& graph,\n    std::function<bool(std::ostream&, const Graph&, BlockIndex)> printer);\n        ]]></code>\n    </func>\n</file>\n```"
}