{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/init/bootstrapper.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 58, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/init/bootstrapper.h\",\n        \"file_name\": \"bootstrapper.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the Bootstrapper class and related classes for creating and initializing JavaScript global contexts in V8.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary V8 headers for context creation, handle management, snapshot handling, heap management, and object manipulation.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"include/v8-context.h\"\n#include \"include/v8-local-handle.h\"\n#include \"include/v8-snapshot.h\"\n#include \"src/heap/factory.h\"\n#include \"src/objects/fixed-array.h\"\n#include \"src/objects/shared-function-info.h\"\n#include \"src/objects/visitors.h\"\n#include \"src/snapshot/serializer-deserializer.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourceCodeCache\",\n            \"about\": \"Caches pairs of (OneByteString, SharedFunctionInfo) for native extension code files.\",\n            \"attributes\": [\n                {\n                    \"name\": \"type_\",\n                    \"type\": \"Script::Type\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The type of script being cached.\"\n                },\n                {\n                    \"name\": \"cache_\",\n                    \"type\": \"Tagged<FixedArray>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The FixedArray used to store the cached pairs.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Script\",\n                \"FixedArray\",\n                \"SharedFunctionInfo\",\n                \"Isolate\",\n                \"base::Vector\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass SourceCodeCache final {\n public:\n  explicit SourceCodeCache(Script::Type type) : type_(type) {}\n  SourceCodeCache(const SourceCodeCache&) = delete;\n  SourceCodeCache& operator=(const SourceCodeCache&) = delete;\n\n  void Initialize(Isolate* isolate, bool create_heap_objects);\n\n  void Iterate(RootVisitor* v);\n\n  bool Lookup(Isolate* isolate, base::Vector<const char> name,\n              DirectHandle<SharedFunctionInfo>* handle);\n\n  void Add(Isolate* isolate, base::Vector<const char> name,\n           DirectHandle<SharedFunctionInfo> shared);\n\n private:\n  Script::Type type_;\n  Tagged<FixedArray> cache_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Bootstrapper\",\n            \"about\": \"The main class responsible for creating and initializing JavaScript global contexts.\",\n            \"attributes\": [\n                {\n                    \"name\": \"isolate_\",\n                    \"type\": \"Isolate*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The Isolate to which this Bootstrapper belongs.\"\n                },\n                {\n                    \"name\": \"nesting_\",\n                    \"type\": \"NestingCounterType\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Keeps track of the nesting level of the Bootstrapper.\"\n                },\n                {\n                    \"name\": \"extensions_cache_\",\n                    \"type\": \"SourceCodeCache\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Cache for extensions' source code.\"\n                }\n            ],\n            \"dependencies\": [\n                \"NativeContext\",\n                \"JSGlobalProxy\",\n                \"Isolate\",\n                \"SourceCodeCache\",\n                \"v8::ObjectTemplate\",\n                \"v8::ExtensionConfiguration\",\n                \"v8::MicrotaskQueue\",\n                \"DeserializeEmbedderFieldsCallback\",\n                \"DirectHandle\",\n                \"MaybeDirectHandle\",\n                \"RootVisitor\",\n                \"Handle\",\n                \"JSFunction\",\n                \"JSObject\",\n                \"String\",\n                \"Builtin\",\n                \"AdaptArguments\",\n                \"PropertyAttributes\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Bootstrapper final {\n public:\n  Bootstrapper(const Bootstrapper&) = delete;\n  Bootstrapper& operator=(const Bootstrapper&) = delete;\n\n  static void InitializeOncePerProcess();\n\n  // Requires: Heap::SetUp has been called.\n  void Initialize(bool create_heap_objects);\n  void TearDown();\n\n  // Creates a JavaScript Global Context with initial object graph.\n  // The returned value is a global handle casted to V8Environment*.\n  DirectHandle<NativeContext> CreateEnvironment(\n      MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy,\n      v8::Local<v8::ObjectTemplate> global_object_template,\n      v8::ExtensionConfiguration* extensions, size_t context_snapshot_index,\n      DeserializeEmbedderFieldsCallback embedder_fields_deserializer,\n      v8::MicrotaskQueue* microtask_queue);\n\n  // Used for testing context deserialization. No code runs in the generated\n  // context. It only needs to pass heap verification.\n  DirectHandle<NativeContext> CreateEnvironmentForTesting() {\n    MaybeDirectHandle<JSGlobalProxy> no_global_proxy;\n    v8::Local<v8::ObjectTemplate> no_global_object_template;\n    ExtensionConfiguration no_extensions;\n    static constexpr int kDefaultContextIndex = 0;\n    DeserializeEmbedderFieldsCallback no_callback;\n    v8::MicrotaskQueue* no_microtask_queue = nullptr;\n    return CreateEnvironment(no_global_proxy, no_global_object_template,\n                             &no_extensions, kDefaultContextIndex, no_callback,\n                             no_microtask_queue);\n  }\n\n  DirectHandle<JSGlobalProxy> NewRemoteContext(\n      MaybeDirectHandle<JSGlobalProxy> maybe_global_proxy,\n      v8::Local<v8::ObjectTemplate> global_object_template);\n\n  // Traverses the pointers for memory management.\n  void Iterate(RootVisitor* v);\n\n  // Tells whether bootstrapping is active.\n  bool IsActive() const { return nesting_ != 0; }\n\n  // Support for thread preemption.\n  static int ArchiveSpacePerThread();\n  char* ArchiveState(char* to);\n  char* RestoreState(char* from);\n  void FreeThreadResources();\n\n  // Used for new context creation.\n  bool InstallExtensions(DirectHandle<NativeContext> native_context,\n                         v8::ExtensionConfiguration* extensions);\n\n  SourceCodeCache* extensions_cache() { return &extensions_cache_; }\n\n private:\n  // Log newly created Map objects if no snapshot was used.\n  void LogAllMaps();\n\n  Isolate* isolate_;\n  using NestingCounterType = int;\n  NestingCounterType nesting_;\n  SourceCodeCache extensions_cache_;\n\n  friend class BootstrapperActive;\n  friend class Isolate;\n  friend class NativesExternalStringResource;\n\n  explicit Bootstrapper(Isolate* isolate);\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"BootstrapperActive\",\n            \"about\": \"A helper class that manages the nesting level of the Bootstrapper. It increments the nesting counter upon construction and decrements it upon destruction.\",\n            \"attributes\": [\n                {\n                    \"name\": \"bootstrapper_\",\n                    \"type\": \"Bootstrapper*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"A pointer to the Bootstrapper instance.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Bootstrapper\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass BootstrapperActive final {\n public:\n  explicit BootstrapperActive(Bootstrapper* bootstrapper)\n      : bootstrapper_(bootstrapper) {\n    ++bootstrapper_->nesting_;\n  }\n  BootstrapperActive(const BootstrapperActive&) = delete;\n  BootstrapperActive& operator=(const BootstrapperActive&) = delete;\n\n  ~BootstrapperActive() { --bootstrapper_->nesting_; }\n\n private:\n  Bootstrapper* bootstrapper_;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"SimpleInstallFunction\",\n            \"about\": \"Installs a function on a base object. Exposed for Wasm bootstrapping.\",\n            \"logic\": \"Uses Builtin and AdaptArguments for specific function properties.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The isolate the function belongs to.\"\n                },\n                {\n                    \"name\": \"base\",\n                    \"type\": \"DirectHandle<JSObject>\",\n                    \"purpose\": \"The base object to install the function on.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The name of the function.\"\n                },\n                {\n                    \"name\": \"call\",\n                    \"type\": \"Builtin\",\n                    \"purpose\": \"The builtin to call for the function.\"\n                },\n                {\n                    \"name\": \"len\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The expected length of the arguments.\"\n                },\n                {\n                    \"name\": \"adapt\",\n                    \"type\": \"AdaptArguments\",\n                    \"purpose\": \"Argument adaptation function.\"\n                },\n                {\n                    \"name\": \"attrs\",\n                    \"type\": \"PropertyAttributes\",\n                    \"purpose\": \"The attributes of the property.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Handle<JSFunction>\",\n                \"description\": \"A handle to the installed function.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"DirectHandle\",\n                \"JSObject\",\n                \"Handle\",\n                \"JSFunction\",\n                \"Builtin\",\n                \"AdaptArguments\",\n                \"PropertyAttributes\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_NOINLINE Handle<JSFunction> SimpleInstallFunction(\n    Isolate* isolate, DirectHandle<JSObject> base, const char* name,\n    Builtin call, int len, AdaptArguments adapt,\n    PropertyAttributes attrs = DONT_ENUM);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"InstallError\",\n            \"about\": \"Installs an error constructor on the global object. Exposed for Wasm bootstrapping.\",\n            \"logic\": \"Allows specifying the error constructor and its length.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The isolate the error belongs to.\"\n                },\n                {\n                    \"name\": \"global\",\n                    \"type\": \"DirectHandle<JSObject>\",\n                    \"purpose\": \"The global object.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"DirectHandle<String>\",\n                    \"purpose\": \"The name of the error constructor.\"\n                },\n                {\n                    \"name\": \"context_index\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The context index.\"\n                },\n                {\n                    \"name\": \"error_constructor\",\n                    \"type\": \"Builtin\",\n                    \"purpose\": \"The error constructor to use.\"\n                },\n                {\n                    \"name\": \"error_function_length\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The expected length of the arguments.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"DirectHandle\",\n                \"JSObject\",\n                \"String\",\n                \"Builtin\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_NOINLINE void InstallError(\n    Isolate* isolate, DirectHandle<JSObject> global, DirectHandle<String> name,\n    int context_index, Builtin error_constructor = Builtin::kErrorConstructor,\n    int error_function_length = 1);\n        ]]></code>\n    </func>\n</file>\n```"
}