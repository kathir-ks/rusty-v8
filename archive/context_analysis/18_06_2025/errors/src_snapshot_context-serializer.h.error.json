{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/context-serializer.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 84, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/context-serializer.h\",\n        \"file_name\": \"context-serializer.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the ContextSerializer class, which is responsible for serializing the context of a V8 isolate for snapshot creation.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for context objects, serializer functionality, and snapshot source/sink.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/objects/contexts.h\"\n#include \"src/snapshot/serializer.h\"\n#include \"src/snapshot/snapshot-source-sink.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"ContextSerializer\",\n            \"extends\": \"Serializer\",\n            \"about\": \"Serializes the context of a V8 isolate for snapshot creation.\",\n            \"attributes\": [\n                {\n                    \"name\": \"startup_serializer_\",\n                    \"type\": \"StartupSerializer*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the startup serializer.\"\n                },\n                {\n                    \"name\": \"serialize_embedder_fields_\",\n                    \"type\": \"SerializeEmbedderFieldsCallback\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Callback function for serializing embedder fields.\"\n                },\n                {\n                    \"name\": \"can_be_rehashed_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates whether serialized hash tables can be rehashed.\"\n                },\n                {\n                    \"name\": \"context_\",\n                    \"type\": \"Tagged<Context>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The context being serialized.\"\n                },\n                {\n                    \"name\": \"embedder_fields_sink_\",\n                    \"type\": \"SnapshotByteSink\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Used to store serialized data for embedder fields.\"\n                },\n                {\n                    \"name\": \"api_wrapper_sink_\",\n                    \"type\": \"SnapshotByteSink\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Used to store serialized data for API wrappers.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Serializer\",\n                \"Isolate\",\n                \"StartupSerializer\",\n                \"SerializeEmbedderFieldsCallback\",\n                \"Context\",\n                \"HeapObject\",\n                \"SlotType\",\n                \"Handle\",\n                \"Tagged\",\n                \"JSObject\",\n                \"SnapshotByteSink\",\n                \"DirectHandle\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE ContextSerializer : public Serializer {\n public:\n  ContextSerializer(Isolate* isolate, Snapshot::SerializerFlags flags,\n                    StartupSerializer* startup_serializer,\n                    SerializeEmbedderFieldsCallback callback);\n\n  ~ContextSerializer() override;\n  ContextSerializer(const ContextSerializer&) = delete;\n  ContextSerializer& operator=(const ContextSerializer&) = delete;\n\n  // Serialize the objects reachable from a single object pointer.\n  void Serialize(Tagged<Context>* o, const DisallowGarbageCollection& no_gc);\n\n  bool can_be_rehashed() const { return can_be_rehashed_; }\n\n private:\n  void SerializeObjectImpl(Handle<HeapObject> o, SlotType slot_type) override;\n  bool ShouldBeInTheStartupObjectCache(Tagged<HeapObject> o);\n  bool ShouldBeInTheSharedObjectCache(Tagged<HeapObject> o);\n  void CheckRehashability(Tagged<HeapObject> obj);\n\n  template <typename V8Type, typename UserSerializerWrapper,\n            typename UserCallback, typename ApiObjectType>\n  void SerializeObjectWithEmbedderFields(Handle<V8Type> data_holder,\n                                         int embedder_fields_count,\n                                         UserSerializerWrapper wrapper,\n                                         UserCallback user_callback,\n                                         ApiObjectType api_obj);\n\n  // For JS API wrapper objects we serialize embedder-controled data for each\n  // object.\n  void SerializeApiWrapperFields(DirectHandle<JSObject> js_object);\n\n  StartupSerializer* startup_serializer_;\n  SerializeEmbedderFieldsCallback serialize_embedder_fields_;\n  // Indicates whether we only serialized hash tables that we can rehash.\n  // TODO(yangguo): generalize rehashing, and remove this flag.\n  bool can_be_rehashed_;\n  Tagged<Context> context_;\n\n  // Used to store serialized data for embedder fields.\n  SnapshotByteSink embedder_fields_sink_;\n  // Used to store serialized data for API wrappers.\n  SnapshotByteSink api_wrapper_sink_;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Serializer\",\n                \"about\": \"Base class for serializers\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Serializer {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StartupSerializer\",\n                \"about\": \"Serializer for startup snapshot\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class StartupSerializer {};\n            ]]></code>\n        </class>\n        <interface>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"interface\",\n                \"name\": \"SerializeEmbedderFieldsCallback\",\n                \"about\": \"Callback function for serializing embedder fields.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                using SerializeEmbedderFieldsCallback = void (*)();\n            ]]></code>\n        </interface>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents a V8 isolate.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HeapObject\",\n                \"about\": \"Base class for heap-allocated objects\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class HeapObject {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Context\",\n                \"about\": \"Represents a JavaScript context.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Context {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SnapshotByteSink\",\n                \"about\": \"Sink for snapshot data.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class SnapshotByteSink {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSObject\",\n                \"about\": \"Represents a JavaScript object.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class JSObject {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}