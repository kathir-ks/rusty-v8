{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/common-node-cache.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 40, column 32",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/common-node-cache.h\",\n        \"file_name\": \"common-node-cache.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines a class `CommonNodeCache` that bundles various caches for common nodes used in the compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes the Node-cache header file\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/node-cache.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CommonNodeCache\",\n            \"about\": \"Bundles various caches for common nodes.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Zone\",\n                \"Node\",\n                \"Int32NodeCache\",\n                \"Int64NodeCache\",\n                \"IntPtrNodeCache\",\n                \"RelocInt32NodeCache\",\n                \"RelocInt64NodeCache\",\n                \"ExternalReference\",\n                \"RelocInfoMode\",\n                \"Handle<HeapObject>\",\n                \"ZoneVector<Node*>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass CommonNodeCache final {\n public:\n  explicit CommonNodeCache(Zone* zone)\n      : int32_constants_(zone),\n        int64_constants_(zone),\n        tagged_index_constants_(zone),\n        float32_constants_(zone),\n        float64_constants_(zone),\n        external_constants_(zone),\n        pointer_constants_(zone),\n        number_constants_(zone),\n        heap_constants_(zone),\n        relocatable_int32_constants_(zone),\n        relocatable_int64_constants_(zone) {}\n  ~CommonNodeCache() = default;\n\n  CommonNodeCache(const CommonNodeCache&) = delete;\n  CommonNodeCache& operator=(const CommonNodeCache&) = delete;\n\n  Node** FindInt32Constant(int32_t value) {\n    return int32_constants_.Find(value);\n  }\n\n  Node** FindInt64Constant(int64_t value) {\n    return int64_constants_.Find(value);\n  }\n\n  Node** FindTaggedIndexConstant(int32_t value) {\n    return tagged_index_constants_.Find(value);\n  }\n\n  Node** FindFloat32Constant(float value) {\n    // We canonicalize float constants at the bit representation level.\n    return float32_constants_.Find(base::bit_cast<int32_t>(value));\n  }\n\n  Node** FindFloat64Constant(double value) {\n    // We canonicalize double constants at the bit representation level.\n    return float64_constants_.Find(base::bit_cast<int64_t>(value));\n  }\n\n  Node** FindExternalConstant(ExternalReference value);\n\n  Node** FindPointerConstant(intptr_t value) {\n    return pointer_constants_.Find(value);\n  }\n\n  Node** FindNumberConstant(double value) {\n    // We canonicalize double constants at the bit representation level.\n    return number_constants_.Find(base::bit_cast<int64_t>(value));\n  }\n\n  Node** FindHeapConstant(Handle<HeapObject> value);\n\n  Node** FindRelocatableInt32Constant(int32_t value, RelocInfoMode rmode) {\n    return relocatable_int32_constants_.Find(std::make_pair(value, rmode));\n  }\n\n  Node** FindRelocatableInt64Constant(int64_t value, RelocInfoMode rmode) {\n    return relocatable_int64_constants_.Find(std::make_pair(value, rmode));\n  }\n\n  // Return all nodes from the cache.\n  void GetCachedNodes(ZoneVector<Node*>* nodes);\n\n private:\n  Int32NodeCache int32_constants_;\n  Int64NodeCache int64_constants_;\n  Int32NodeCache tagged_index_constants_;\n  Int32NodeCache float32_constants_;\n  Int64NodeCache float64_constants_;\n  IntPtrNodeCache external_constants_;\n  IntPtrNodeCache pointer_constants_;\n  Int64NodeCache number_constants_;\n  IntPtrNodeCache heap_constants_;\n  RelocInt32NodeCache relocatable_int32_constants_;\n  RelocInt64NodeCache relocatable_int64_constants_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindInt32Constant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds an int32 constant node in the cache.\",\n            \"logic\": \"Delegates the call to the underlying `int32_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The integer value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"Int32NodeCache\",\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindInt32Constant(int32_t value) {\n    return int32_constants_.Find(value);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindInt64Constant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds an int64 constant node in the cache.\",\n            \"logic\": \"Delegates the call to the underlying `int64_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"int64_t\",\n                    \"purpose\": \"The integer value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"Int64NodeCache\",\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindInt64Constant(int64_t value) {\n    return int64_constants_.Find(value);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindTaggedIndexConstant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a tagged index constant node in the cache.\",\n            \"logic\": \"Delegates the call to the underlying `tagged_index_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The integer value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"Int32NodeCache\",\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindTaggedIndexConstant(int32_t value) {\n    return tagged_index_constants_.Find(value);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindFloat32Constant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a float32 constant node in the cache.\",\n            \"logic\": \"Canonicalizes the float constant at the bit representation level and delegates the call to the underlying `float32_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"float\",\n                    \"purpose\": \"The floating-point value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"Int32NodeCache\",\n                \"Node\",\n                \"base::bit_cast\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindFloat32Constant(float value) {\n    // We canonicalize float constants at the bit representation level.\n    return float32_constants_.Find(base::bit_cast<int32_t>(value));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindFloat64Constant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a float64 constant node in the cache.\",\n            \"logic\": \"Canonicalizes the double constant at the bit representation level and delegates the call to the underlying `float64_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"double\",\n                    \"purpose\": \"The double value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"Int64NodeCache\",\n                \"Node\",\n                \"base::bit_cast\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindFloat64Constant(double value) {\n    // We canonicalize double constants at the bit representation level.\n    return float64_constants_.Find(base::bit_cast<int64_t>(value));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindExternalConstant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds an external constant node in the cache.\",\n            \"logic\": \"The implementation is not provided in this header file and assumed to be defined elsewhere.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"ExternalReference\",\n                    \"purpose\": \"The external reference to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"IntPtrNodeCache\",\n                \"Node\",\n                \"ExternalReference\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindExternalConstant(ExternalReference value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindPointerConstant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a pointer constant node in the cache.\",\n            \"logic\": \"Delegates the call to the underlying `pointer_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"intptr_t\",\n                    \"purpose\": \"The pointer value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"IntPtrNodeCache\",\n                \"Node\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindPointerConstant(intptr_t value) {\n    return pointer_constants_.Find(value);\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindNumberConstant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a number constant node in the cache.\",\n            \"logic\": \"Canonicalizes the double constant at the bit representation level and delegates the call to the underlying `number_constants_` cache.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"double\",\n                    \"purpose\": \"The double value to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"Int64NodeCache\",\n                \"Node\",\n                \"base::bit_cast\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindNumberConstant(double value) {\n    // We canonicalize double constants at the bit representation level.\n    return number_constants_.Find(base::bit_cast<int64_t>(value));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindHeapConstant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a heap constant node in the cache.\",\n            \"logic\": \"The implementation is not provided in this header file and assumed to be defined elsewhere.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"Handle<HeapObject>\",\n                    \"purpose\": \"The heap object handle to find.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"IntPtrNodeCache\",\n                \"Node\",\n                \"Handle<HeapObject>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindHeapConstant(Handle<HeapObject> value);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindRelocatableInt32Constant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a relocatable int32 constant node in the cache.\",\n            \"logic\": \"Delegates the call to the underlying `relocatable_int32_constants_` cache using a pair of value and relocation info mode.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"int32_t\",\n                    \"purpose\": \"The integer value to find.\"\n                },\n                {\n                    \"name\": \"rmode\",\n                    \"type\": \"RelocInfoMode\",\n                    \"purpose\": \"The relocation info mode.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"RelocInt32NodeCache\",\n                \"Node\",\n                \"RelocInfoMode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindRelocatableInt32Constant(int32_t value, RelocInfoMode rmode) {\n    return relocatable_int32_constants_.Find(std::make_pair(value, rmode));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"FindRelocatableInt64Constant\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Finds a relocatable int64 constant node in the cache.\",\n            \"logic\": \"Delegates the call to the underlying `relocatable_int64_constants_` cache using a pair of value and relocation info mode.\",\n            \"parameters\": [\n                {\n                    \"name\": \"value\",\n                    \"type\": \"int64_t\",\n                    \"purpose\": \"The integer value to find.\"\n                },\n                {\n                    \"name\": \"rmode\",\n                    \"type\": \"RelocInfoMode\",\n                    \"purpose\": \"The relocation info mode.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"Node**\",\n                \"description\": \"Pointer to the node in the cache, or nullptr if not found.\"\n            },\n            \"dependencies\": [\n                \"RelocInt64NodeCache\",\n                \"Node\",\n                \"RelocInfoMode\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  Node** FindRelocatableInt64Constant(int64_t value, RelocInfoMode rmode) {\n    return relocatable_int64_constants_.Find(std::make_pair(value, rmode));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"GetCachedNodes\",\n            \"parent\": \"CommonNodeCache\",\n            \"about\": \"Returns all nodes from the cache.\",\n            \"logic\": \"The implementation is not provided in this header file and assumed to be defined elsewhere. It is supposed to fill a ZoneVector with all cached nodes.\",\n            \"parameters\": [\n                {\n                    \"name\": \"nodes\",\n                    \"type\": \"ZoneVector<Node*>*\",\n                    \"purpose\": \"Pointer to the ZoneVector where cached nodes will be stored.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Node\",\n                \"ZoneVector<Node*>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n  void GetCachedNodes(ZoneVector<Node*>* nodes);\n        ]]></code>\n    </func>\n\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Memory allocation zone.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Node\",\n                \"about\": \"A node in the compiler graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Node {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Int32NodeCache\",\n                \"about\": \"Cache for int32 nodes.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Int32NodeCache {\n                public:\n                  Node** Find(int32_t value);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Int64NodeCache\",\n                \"about\": \"Cache for int64 nodes.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Int64NodeCache {\n                public:\n                  Node** Find(int64_t value);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"IntPtrNodeCache\",\n                \"about\": \"Cache for intptr_t nodes.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class IntPtrNodeCache {\n                public:\n                  Node** Find(intptr_t value);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RelocInt32NodeCache\",\n                \"about\": \"Cache for relocatable int32 nodes.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class RelocInt32NodeCache {\n                public:\n                  Node** Find(std::pair<int32_t, RelocInfoMode> key);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RelocInt64NodeCache\",\n                \"about\": \"Cache for relocatable int64 nodes.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class RelocInt64NodeCache {\n                public:\n                  Node** Find(std::pair<int64_t, RelocInfoMode> key);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ExternalReference\",\n                \"about\": \"Represents an external reference.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ExternalReference {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"RelocInfoMode\",\n                \"about\": \"Enum representing the relocation info mode.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                enum class RelocInfoMode {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"Handle\",\n                \"about\": \"Handle to a HeapObject.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Handle {};\n                class HeapObject {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"template\",\n                \"name\": \"ZoneVector\",\n                \"about\": \"Dynamically sized array allocated in a Zone.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class ZoneVector {};\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"base::bit_cast\",\n                \"about\": \"Reinterprets the bit pattern of one type as another type.\",\n                \"parameters\": [],\n                \"return\": {\n                  \"type\": \"Unknown\",\n                  \"description\": \"Value with reinterpreted bit pattern.\"\n                }\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace base {\n                    template <typename To, typename From>\n                    To bit_cast(From from);\n                }\n            ]]></code>\n        </func>\n    </dependencies>\n</file>\n```"
}