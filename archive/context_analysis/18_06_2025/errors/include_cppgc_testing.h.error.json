{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/testing.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 33, column 40",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/testing.h\",\n        \"file_name\": \"testing.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines testing helpers for the cppgc garbage collector, including stack state overrides and controlled garbage collection execution.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for cppgc functionality and configuration.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"cppgc/common.h\"\n#include \"cppgc/macros.h\"\n#include \"v8config.h\"  // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"OverrideEmbedderStackStateScope\",\n            \"about\": \"Overrides the state of the stack for garbage collection purposes within a defined scope.\",\n            \"attributes\": [\n                {\n                    \"name\": \"heap_handle_\",\n                    \"type\": \"HeapHandle&\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Reference to the heap being managed.\"\n                }\n            ],\n            \"dependencies\": [\n                \"HeapHandle\",\n                \"EmbedderStackState\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT V8_NODISCARD OverrideEmbedderStackStateScope final {\n  CPPGC_STACK_ALLOCATED();\n\n public:\n  /**\n   * Constructs a scoped object that automatically enters and leaves the scope.\n   *\n   * \\param heap_handle The corresponding heap.\n   */\n  explicit OverrideEmbedderStackStateScope(HeapHandle& heap_handle,\n                                           EmbedderStackState state);\n  ~OverrideEmbedderStackStateScope();\n\n  OverrideEmbedderStackStateScope(const OverrideEmbedderStackStateScope&) =\n      delete;\n  OverrideEmbedderStackStateScope& operator=(\n      const OverrideEmbedderStackStateScope&) = delete;\n\n private:\n  HeapHandle& heap_handle_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"StandaloneTestingHeap\",\n            \"about\": \"Testing interface for managed heaps allowing control over garbage collection timings.\",\n            \"attributes\": [\n                {\n                    \"name\": \"heap_handle_\",\n                    \"type\": \"HeapHandle&\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Reference to the heap being managed.\"\n                }\n            ],\n            \"dependencies\": [\n                \"HeapHandle\",\n                \"EmbedderStackState\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT StandaloneTestingHeap final {\n public:\n  explicit StandaloneTestingHeap(HeapHandle&);\n\n  /**\n   * Start an incremental garbage collection.\n   */\n  void StartGarbageCollection();\n\n  /**\n   * Perform an incremental step. This will also schedule concurrent steps if\n   * needed.\n   *\n   * \\param stack_state The state of the stack during the step.\n   */\n  bool PerformMarkingStep(EmbedderStackState stack_state);\n\n  /**\n   * Finalize the current garbage collection cycle atomically.\n   * Assumes that garbage collection is in progress.\n   *\n   * \\param stack_state The state of the stack for finalizing the garbage\n   * collection cycle.\n   */\n  void FinalizeGarbageCollection(EmbedderStackState stack_state);\n\n  /**\n   * Toggle main thread marking on/off. Allows to stress concurrent marking\n   * (e.g. to better detect data races).\n   *\n   * \\param should_mark Denotes whether the main thread should contribute to\n   * marking. Defaults to true.\n   */\n  void ToggleMainThreadMarking(bool should_mark);\n\n  /**\n   * Force enable compaction for the next garbage collection cycle.\n   */\n  void ForceCompactionForNextGarbageCollection();\n\n private:\n  HeapHandle& heap_handle_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"IsHeapObjectOld\",\n            \"about\": \"Checks if a given object is considered old in the heap.\",\n            \"parameters\": [\n                {\n                    \"name\": \"object\",\n                    \"type\": \"void*\",\n                    \"purpose\": \"Pointer to the object being checked.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the object is old, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT bool IsHeapObjectOld(void*);\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HeapHandle\",\n                \"about\": \"Handle to a managed heap.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            class HeapHandle;\n            ]]></code>\n        </class>\n        <enum>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"EmbedderStackState\",\n                \"about\": \"Represents the state of the embedder stack during garbage collection.\",\n                \"dependencies\": []\n            }\n            </metadata>\n            <code><![CDATA[\n            enum class EmbedderStackState {\n                kNoHeapPointersOnStack,\n                kMayContainHeapPointers\n            };\n            ]]></code>\n        </enum>\n    </dependencies>\n</file>\n```"
}