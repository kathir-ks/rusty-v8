{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/flags/flag-definitions.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/flags/flag-definitions.h\",\n            \"file_name\": \"flag-definitions.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines all flags used in the V8 JavaScript engine. It is a template-style header file that gets included multiple times with different modes defined to declare, define, and apply flags.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Not applicable, this file does not directly include other headers but depends on macros defined elsewhere.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            // No direct includes in this file; relies on preprocessor defines.\n        ]]></code>\n    </imports>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_IMPLICATION\",\n                \"about\": \"Defines a flag implication, setting thenflag to true when whenflag is true.\",\n                \"logic\": \"Uses DEFINE_VALUE_IMPLICATION to set the implied flag to true.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set to true when the whenflag is true\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"DEFINE_VALUE_IMPLICATION\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_IMPLICATION(whenflag, thenflag) \\\n              DEFINE_VALUE_IMPLICATION(whenflag, thenflag, true)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_WEAK_IMPLICATION\",\n                \"about\": \"Defines a weak flag implication, setting thenflag to true when whenflag is true, but the implication can be overwritten.\",\n                \"logic\": \"Uses DEFINE_WEAK_VALUE_IMPLICATION to set the implied flag to true.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set to true when the whenflag is true\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"DEFINE_WEAK_VALUE_IMPLICATION\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_WEAK_IMPLICATION(whenflag, thenflag) \\\n              DEFINE_WEAK_VALUE_IMPLICATION(whenflag, thenflag, true)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_WEAK_NEG_IMPLICATION\",\n                \"about\": \"Defines a weak negative flag implication, setting thenflag to false when whenflag is true, but the implication can be overwritten.\",\n                \"logic\": \"Uses DEFINE_WEAK_VALUE_IMPLICATION to set the implied flag to false.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set to false when the whenflag is true\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"DEFINE_WEAK_VALUE_IMPLICATION\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_WEAK_NEG_IMPLICATION(whenflag, thenflag) \\\n              DEFINE_WEAK_VALUE_IMPLICATION(whenflag, thenflag, false)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_NEG_IMPLICATION\",\n                \"about\": \"Defines a negative flag implication, setting thenflag to false when whenflag is true.\",\n                \"logic\": \"Uses DEFINE_VALUE_IMPLICATION to set the implied flag to false.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set to false when the whenflag is true\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"DEFINE_VALUE_IMPLICATION\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_NEG_IMPLICATION(whenflag, thenflag) \\\n              DEFINE_VALUE_IMPLICATION(whenflag, thenflag, false)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_NEG_NEG_IMPLICATION\",\n                \"about\": \"Defines a double-negative flag implication, setting thenflag to false when whenflag is false.\",\n                \"logic\": \"Uses DEFINE_NEG_VALUE_IMPLICATION to set the implied flag to false.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set to false when the whenflag is false\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"DEFINE_NEG_VALUE_IMPLICATION\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_NEG_NEG_IMPLICATION(whenflag, thenflag) \\\n              DEFINE_NEG_VALUE_IMPLICATION(whenflag, thenflag, false)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"FLAG_FULL\",\n                \"about\": \"A placeholder macro that expands differently based on the defined FLAG_MODE.\",\n                \"logic\": \"The expansion depends on whether FLAG_MODE_DECLARE, FLAG_MODE_DEFINE_DEFAULTS, FLAG_MODE_META or FLAG_MODE_APPLY is defined.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ftype\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Flag type.\"\n                    },\n                    {\n                        \"name\": \"ctype\",\n                        \"type\": \"string\",\n                        \"purpose\": \"C++ type of the flag.\"\n                    },\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag.\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag.\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment for the flag.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            #define FLAG_FULL(ftype, ctype, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"FLAG_READONLY\",\n                \"about\": \"A placeholder macro for read-only flags, expands differently based on the defined FLAG_MODE.\",\n                \"logic\": \"The expansion depends on whether FLAG_MODE_DECLARE or FLAG_MODE_DEFINE_DEFAULTS is defined.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ftype\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Flag type.\"\n                    },\n                    {\n                        \"name\": \"ctype\",\n                        \"type\": \"string\",\n                        \"purpose\": \"C++ type of the flag.\"\n                    },\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag.\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag.\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment for the flag.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            #define FLAG_READONLY(ftype, ctype, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"FLAG_ALIAS\",\n                \"about\": \"A placeholder macro for flag aliases, expanding into an entry for the metadata table.\",\n                \"logic\": \"Defines an alias for an existing flag in the metadata table.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"ftype\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Flag type.\"\n                    },\n                    {\n                        \"name\": \"ctype\",\n                        \"type\": \"string\",\n                        \"purpose\": \"C++ type of the flag.\"\n                    },\n                    {\n                        \"name\": \"alias\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Alias name for the flag.\"\n                    },\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Original name of the flag.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            #define FLAG_ALIAS(ftype, ctype, alias, nam)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_VALUE_IMPLICATION\",\n                \"about\": \"Defines a flag implication to set a value based on another flag.\",\n                \"logic\": \"Uses TriggerImplication to set thenflag to value when whenflag is true.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"The value to assign to thenflag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"TriggerImplication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_VALUE_IMPLICATION(whenflag, thenflag, value)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_WEAK_VALUE_IMPLICATION\",\n                \"about\": \"Defines a weak flag implication to set a value based on another flag, but the implication can be overwritten.\",\n                \"logic\": \"Uses TriggerImplication to set thenflag to value when whenflag is true, but the implication can be overwritten.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"The value to assign to thenflag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"TriggerImplication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_WEAK_VALUE_IMPLICATION(whenflag, thenflag, value)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_GENERIC_IMPLICATION\",\n                \"about\": \"Defines a generic implication, executing a statement when a flag is true.\",\n                \"logic\": \"Executes the provided statement if whenflag is true.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the statement\"\n                    },\n                    {\n                        \"name\": \"statement\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The statement to execute\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_GENERIC_IMPLICATION(whenflag, statement)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_NEG_VALUE_IMPLICATION\",\n                \"about\": \"Defines a flag implication to set a value based on the negation of another flag.\",\n                \"logic\": \"Uses TriggerImplication to set thenflag to value when whenflag is false.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the implication\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be set\"\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"bool\",\n                        \"purpose\": \"The value to assign to thenflag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"TriggerImplication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_NEG_VALUE_IMPLICATION(whenflag, thenflag, value)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_NEG_VALUE_VALUE_IMPLICATION\",\n                \"about\": \"Defines a flag implication based on comparing a flag with a value. Sets thenflag to thenvalue when whenflag is NOT equal to whenvalue\",\n                \"logic\": \"Calls TriggerImplication when `v8_flags.whenflag != whenvalue`\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to check\"\n                    },\n                    {\n                        \"name\": \"whenvalue\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The value to compare against\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to set\"\n                    },\n                    {\n                        \"name\": \"thenvalue\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The value to set the flag to\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"TriggerImplication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_NEG_VALUE_VALUE_IMPLICATION(whenflag, whenvalue, thenflag, \\\n                                               thenvalue)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_MIN_VALUE_IMPLICATION\",\n                \"about\": \"Defines a flag implication that sets a flag to a minimum value if it is less than that value.\",\n                \"logic\": \"Sets flag to min_value if it's less than min_value\",\n                \"parameters\": [\n                    {\n                        \"name\": \"flag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to check and potentially set\"\n                    },\n                    {\n                        \"name\": \"min_value\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The minimum value to set the flag to\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"TriggerImplication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_MIN_VALUE_IMPLICATION(flag, min_value)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_DISABLE_FLAG_IMPLICATION\",\n                \"about\": \"Defines a flag implication that disables a flag (sets it to false) if another flag is true and the target flag is also true. It also prints a warning to stderr.\",\n                \"logic\": \"If both whenflag and thenflag are true, prints a warning and then sets thenflag to false.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"whenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag that triggers the disabling\"\n                    },\n                    {\n                        \"name\": \"thenflag\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The flag to be disabled\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"PrintF\",\n                    \"DEFINE_VALUE_IMPLICATION\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_DISABLE_FLAG_IMPLICATION(whenflag, thenflag)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_REQUIREMENT\",\n                \"about\": \"Defines a flag requirement, triggering a CHECK if a statement is false.\",\n                \"logic\": \"Calls CHECK(statement) which likely aborts if the statement is false.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"statement\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The statement to check\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"CHECK\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_REQUIREMENT(statement) CHECK(statement);\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_DEBUG_BOOL\",\n                \"about\": \"Defines a boolean flag that is readable in release mode and modifiable in debug mode\",\n                \"logic\": \"Define the debug boolean depending on the `DEBUG` macro\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"DEFINE_BOOL\",\n                    \"DEFINE_BOOL_READONLY\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #ifdef DEBUG\n            #define DEFINE_DEBUG_BOOL DEFINE_BOOL\n            #else\n            #define DEFINE_DEBUG_BOOL DEFINE_BOOL_READONLY\n            #endif\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_BOOL\",\n                \"about\": \"Defines a boolean flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as a bool.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_BOOL(nam, def, cmt) FLAG(BOOL, bool, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_BOOL_READONLY\",\n                \"about\": \"Defines a read-only boolean flag.\",\n                \"logic\": \"Uses the FLAG_READONLY macro to define the flag as a bool.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG_READONLY\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_BOOL_READONLY(nam, def, cmt) \\\n              FLAG_READONLY(BOOL, bool, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_MAYBE_BOOL\",\n                \"about\": \"Defines a maybe boolean flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as an optional bool.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_MAYBE_BOOL(nam, cmt) \\\n              FLAG(MAYBE_BOOL, std::optional<bool>, nam, std::nullopt, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_INT\",\n                \"about\": \"Defines an integer flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as an int.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_INT(nam, def, cmt) FLAG(INT, int, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_UINT\",\n                \"about\": \"Defines an unsigned integer flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as an unsigned int.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_UINT(nam, def, cmt) FLAG(UINT, unsigned int, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_UINT_READONLY\",\n                \"about\": \"Defines a read-only unsigned integer flag.\",\n                \"logic\": \"Uses the FLAG_READONLY macro to define the flag as an unsigned int.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG_READONLY\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_UINT_READONLY(nam, def, cmt) \\\n              FLAG_READONLY(UINT, unsigned int, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_UINT64\",\n                \"about\": \"Defines a 64-bit unsigned integer flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as a uint64_t.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_UINT64(nam, def, cmt) FLAG(UINT64, uint64_t, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_FLOAT\",\n                \"about\": \"Defines a floating-point flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as a double.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_FLOAT(nam, def, cmt) FLAG(FLOAT, double, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_SIZE_T\",\n                \"about\": \"Defines a size_t flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as a size_t.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_SIZE_T(nam, def, cmt) FLAG(SIZE_T, size_t, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_STRING\",\n                \"about\": \"Defines a string flag.\",\n                \"logic\": \"Uses the FLAG macro to define the flag as a const char*.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag\"\n                    },\n                    {\n                        \"name\": \"def\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Default value of the flag\"\n                    },\n                    {\n                        \"name\": \"cmt\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Comment of the flag\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No explicit return.\"\n                },\n                \"dependencies\": [\n                    \"FLAG\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            #define DEFINE_STRING(nam, def, cmt) FLAG(STRING, const char*, nam, def, cmt)\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"DEFINE_ALIAS_BOOL\",\n                \"about\": \"Defines an alias boolean flag.\",\n                \"logic\": \"Uses the FLAG_ALIAS macro to define the alias as a boolean.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"alias\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Name of the flag alias\"\n                    },\n                    {\n                        \"name\": \"nam\",\n                        \"type\": \"string\",\n                        \"purpose\": \"Original flag name\"\n                    }\n                ],\n                \"return\": {\n                    \""
}