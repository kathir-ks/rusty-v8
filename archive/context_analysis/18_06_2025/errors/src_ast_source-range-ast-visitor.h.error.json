{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/ast/source-range-ast-visitor.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 59, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/ast/source-range-ast-visitor.h\",\n            \"file_name\": \"source-range-ast-visitor.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the SourceRangeAstVisitor class for post-processing source ranges in the AST.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for unordered sets and AST traversal.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <unordered_set>\n\n            #include \"src/ast/ast-traversal-visitor.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourceRangeAstVisitor\",\n                \"extends\": \"AstTraversalVisitor<SourceRangeAstVisitor>\",\n                \"about\": \"Post-processes generated source ranges while the AST structure still exists, deduplicates continuation source ranges, and removes the source range associated with the final statement in certain blocks.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"source_range_map_\",\n                        \"type\": \"SourceRangeMap*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the SourceRangeMap used for managing source ranges.\"\n                    },\n                    {\n                        \"name\": \"continuation_positions_\",\n                        \"type\": \"std::unordered_set<int>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Set of positions of continuation ranges to deduplicate.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"AstTraversalVisitor\",\n                    \"SourceRangeMap\",\n                    \"Block\",\n                    \"SwitchStatement\",\n                    \"FunctionLiteral\",\n                    \"AstNode\",\n                    \"TryCatchStatement\",\n                    \"TryFinallyStatement\",\n                    \"Statement\",\n                    \"ZonePtrList\",\n                    \"Expression\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class SourceRangeAstVisitor final\n                : public AstTraversalVisitor<SourceRangeAstVisitor> {\n            public:\n            SourceRangeAstVisitor(uintptr_t stack_limit, Expression* root,\n                                SourceRangeMap* source_range_map);\n\n            private:\n            friend class AstTraversalVisitor<SourceRangeAstVisitor>;\n\n            void VisitBlock(Block* stmt);\n            void VisitSwitchStatement(SwitchStatement* stmt);\n            void VisitFunctionLiteral(FunctionLiteral* expr);\n            bool VisitNode(AstNode* node);\n            void VisitTryCatchStatement(TryCatchStatement* stmt);\n            void VisitTryFinallyStatement(TryFinallyStatement* stmt);\n\n            void MaybeRemoveContinuationRange(Statement* last_statement);\n            void MaybeRemoveLastContinuationRange(ZonePtrList<Statement>* stmts);\n            void MaybeRemoveContinuationRangeOfAsyncReturn(TryCatchStatement* stmt);\n\n            SourceRangeMap* source_range_map_ = nullptr;\n            std::unordered_set<int> continuation_positions_;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SourceRangeMap\",\n                    \"about\": \"Abstracted dependency for storing source range information.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class SourceRangeMap;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Block\",\n                    \"about\": \"Abstracted dependency representing a block statement.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Block;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SwitchStatement\",\n                    \"about\": \"Abstracted dependency representing a switch statement.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class SwitchStatement;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"FunctionLiteral\",\n                    \"about\": \"Abstracted dependency representing a function literal.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class FunctionLiteral;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AstNode\",\n                    \"about\": \"Abstracted dependency representing a generic AST node.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class AstNode;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TryCatchStatement\",\n                    \"about\": \"Abstracted dependency representing a try-catch statement.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class TryCatchStatement;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"TryFinallyStatement\",\n                    \"about\": \"Abstracted dependency representing a try-finally statement.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class TryFinallyStatement;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Statement\",\n                    \"about\": \"Abstracted dependency representing a statement.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Statement;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZonePtrList\",\n                    \"about\": \"Abstracted dependency representing a list of pointers in a zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class ZonePtrList;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Expression\",\n                    \"about\": \"Abstracted dependency representing an Expression.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Expression;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AstTraversalVisitor\",\n                    \"about\": \"Base class for AST traversal.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename Derived>\n                class AstTraversalVisitor {\n                public:\n                    // Example traversal method (replace with actual methods)\n                    void Traverse(AstNode* node) {}\n                };\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}