{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-snapshot.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 513, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-snapshot.h\",\n            \"file_name\": \"v8-snapshot.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the API for creating and using snapshots of the V8 JavaScript engine's state, allowing for faster startup times.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary V8 internal headers and standard library features.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"v8-internal.h\"      // NOLINT(build/include_directory)\n#include \"v8-isolate.h\"       // NOLINT(build/include_directory)\n#include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n#include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"StartupData\",\n                \"about\": \"Represents the data blob created from a snapshot. Contains the raw data and size, as well as methods to check if it can be rehashed and if it is valid.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"const char*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"Pointer to the raw snapshot data.\"\n                    },\n                    {\n                        \"name\": \"raw_size\",\n                        \"type\": \"int\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The size of the raw snapshot data in bytes.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT StartupData {\n public:\n  /**\n   * Whether the data created can be rehashed and and the hash seed can be\n   * recomputed when deserialized.\n   * Only valid for StartupData returned by SnapshotCreator::CreateBlob().\n   */\n  bool CanBeRehashed() const;\n  /**\n   * Allows embedders to verify whether the data is valid for the current\n   * V8 instance.\n   */\n  bool IsValid() const;\n\n  const char* data;\n  int raw_size;\n};\n        ]]></code>\n    </class>\n    <struct>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"SerializeInternalFieldsCallback\",\n                \"about\": \"Structure to hold the callback function and data used to serialize internal fields of v8::Objects.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback\",\n                        \"type\": \"CallbackFunction\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The callback function to serialize internal fields.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"void*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"User-provided data to be passed to the callback function.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Object\",\n                    \"StartupData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct SerializeInternalFieldsCallback {\n  using CallbackFunction = StartupData (*)(Local<Object> holder, int index,\n                                           void* data);\n  SerializeInternalFieldsCallback(CallbackFunction function = nullptr,\n                                  void* data_arg = nullptr)\n      : callback(function), data(data_arg) {}\n  CallbackFunction callback;\n  void* data;\n};\n        ]]></code>\n    </struct>\n    <struct>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"SerializeContextDataCallback\",\n                \"about\": \"Structure to hold the callback function and data used to serialize embedder data in a v8::Context.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback\",\n                        \"type\": \"CallbackFunction\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The callback function to serialize context embedder data.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"void*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"User-provided data to be passed to the callback function.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Context\",\n                    \"StartupData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct SerializeContextDataCallback {\n  using CallbackFunction = StartupData (*)(Local<Context> holder, int index,\n                                           void* data);\n  SerializeContextDataCallback(CallbackFunction function = nullptr,\n                               void* data_arg = nullptr)\n      : callback(function), data(data_arg) {}\n  CallbackFunction callback;\n  void* data;\n};\n        ]]></code>\n    </struct>\n    <struct>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"SerializeAPIWrapperCallback\",\n                \"about\": \"Structure to hold the callback function and data used to serialize API wrappers.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback\",\n                        \"type\": \"CallbackFunction\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The callback function to serialize API wrappers.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"void*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"User-provided data to be passed to the callback function.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Object\",\n                    \"StartupData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct SerializeAPIWrapperCallback {\n  using CallbackFunction = StartupData (*)(Local<Object> holder,\n                                           void* cpp_heap_pointer, void* data);\n  explicit SerializeAPIWrapperCallback(CallbackFunction function = nullptr,\n                                       void* data = nullptr)\n      : callback(function), data(data) {}\n\n  CallbackFunction callback;\n  void* data;\n};\n        ]]></code>\n    </struct>\n    <struct>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"DeserializeInternalFieldsCallback\",\n                \"about\": \"Structure to hold the callback function and data used to deserialize internal fields of v8::Objects.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback\",\n                        \"type\": \"CallbackFunction\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The callback function to deserialize internal fields.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"void*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"User-provided data to be passed to the callback function.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Object\",\n                    \"StartupData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct DeserializeInternalFieldsCallback {\n  using CallbackFunction = void (*)(Local<Object> holder, int index,\n                                    StartupData payload, void* data);\n  DeserializeInternalFieldsCallback(CallbackFunction function = nullptr,\n                                    void* data_arg = nullptr)\n      : callback(function), data(data_arg) {}\n\n  CallbackFunction callback;\n  void* data;\n};\n        ]]></code>\n    </struct>\n    <struct>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"DeserializeContextDataCallback\",\n                \"about\": \"Structure to hold the callback function and data used to deserialize embedder data in a v8::Context.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback\",\n                        \"type\": \"CallbackFunction\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The callback function to deserialize context embedder data.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"void*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"User-provided data to be passed to the callback function.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Context\",\n                    \"StartupData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct DeserializeContextDataCallback {\n  using CallbackFunction = void (*)(Local<Context> holder, int index,\n                                    StartupData payload, void* data);\n  DeserializeContextDataCallback(CallbackFunction function = nullptr,\n                                 void* data_arg = nullptr)\n      : callback(function), data(data_arg) {}\n  CallbackFunction callback;\n  void* data;\n};\n        ]]></code>\n    </struct>\n    <struct>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"DeserializeAPIWrapperCallback\",\n                \"about\": \"Structure to hold the callback function and data used to deserialize API wrappers.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback\",\n                        \"type\": \"CallbackFunction\",\n                        \"access\": \"public\",\n                        \"purpose\": \"The callback function to deserialize API wrappers.\"\n                    },\n                    {\n                        \"name\": \"data\",\n                        \"type\": \"void*\",\n                        \"access\": \"public\",\n                        \"purpose\": \"User-provided data to be passed to the callback function.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Object\",\n                    \"StartupData\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstruct DeserializeAPIWrapperCallback {\n  using CallbackFunction = void (*)(Local<Object> holder, StartupData payload,\n                                    void* data);\n  explicit DeserializeAPIWrapperCallback(CallbackFunction function = nullptr,\n                                         void* data = nullptr)\n      : callback(function), data(data) {}\n\n  CallbackFunction callback;\n  void* data;\n};\n        ]]></code>\n    </struct>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SnapshotCreator\",\n                \"about\": \"Helper class to create a snapshot data blob.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"StartupData\",\n                    \"Local\",\n                    \"Context\",\n                    \"SerializeInternalFieldsCallback\",\n                    \"SerializeContextDataCallback\",\n                    \"SerializeAPIWrapperCallback\",\n                    \"internal::SnapshotCreatorImpl\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT SnapshotCreator {\n public:\n  enum class FunctionCodeHandling { kClear, kKeep };\n\n  /**\n   * Initialize and enter an isolate, and set it up for serialization.\n   * The isolate is either created from scratch or from an existing snapshot.\n   * The caller keeps ownership of the argument snapshot.\n   * \\param existing_blob existing snapshot from which to create this one.\n   * \\param external_references a null-terminated array of external references\n   *        that must be equivalent to CreateParams::external_references.\n   * \\param owns_isolate whether this SnapshotCreator should call\n   *        v8::Isolate::Dispose() during its destructor.\n   */\n  V8_DEPRECATE_SOON(\"Use the version that passes CreateParams instead.\")\n  explicit SnapshotCreator(Isolate* isolate,\n                           const intptr_t* external_references = nullptr,\n                           const StartupData* existing_blob = nullptr,\n                           bool owns_isolate = true);\n\n  /**\n   * Create and enter an isolate, and set it up for serialization.\n   * The isolate is either created from scratch or from an existing snapshot.\n   * The caller keeps ownership of the argument snapshot.\n   * \\param existing_blob existing snapshot from which to create this one.\n   * \\param external_references a null-terminated array of external references\n   *        that must be equivalent to CreateParams::external_references.\n   */\n  V8_DEPRECATE_SOON(\"Use the version that passes CreateParams instead.\")\n  explicit SnapshotCreator(const intptr_t* external_references = nullptr,\n                           const StartupData* existing_blob = nullptr);\n\n  /**\n   * Creates an Isolate for serialization and enters it. The creator fully owns\n   * the Isolate and will invoke `v8::Isolate::Dispose()` during destruction.\n   *\n   * \\param params The parameters to initialize the Isolate for. Details:\n   *               - `params.external_references` are expected to be a\n   *                 null-terminated array of external references.\n   *               - `params.existing_blob` is an optional snapshot blob from\n   *                 which can be used to initialize the new blob.\n   */\n  explicit SnapshotCreator(const v8::Isolate::CreateParams& params);\n\n  /**\n   * Initializes an Isolate for serialization and enters it. The creator does\n   * not own the Isolate but merely initialize it properly.\n   *\n   * \\param isolate The isolate that was allocated by `Isolate::Allocate()~.\n   * \\param params The parameters to initialize the Isolate for. Details:\n   *               - `params.external_references` are expected to be a\n   *                 null-terminated array of external references.\n   *               - `params.existing_blob` is an optional snapshot blob from\n   *                 which can be used to initialize the new blob.\n   */\n  SnapshotCreator(v8::Isolate* isolate,\n                  const v8::Isolate::CreateParams& params);\n\n  /**\n   * Destroy the snapshot creator, and exit and dispose of the Isolate\n   * associated with it.\n   */\n  ~SnapshotCreator();\n\n  /**\n   * \\returns the isolate prepared by the snapshot creator.\n   */\n  Isolate* GetIsolate();\n\n  /**\n   * Set the default context to be included in the snapshot blob.\n   * The snapshot will not contain the global proxy, and we expect one or a\n   * global object template to create one, to be provided upon deserialization.\n   *\n   * \\param internal_fields_serializer An optional callback used to serialize\n   * internal pointer fields set by\n   * v8::Object::SetAlignedPointerInInternalField().\n   *\n   * \\param context_data_serializer An optional callback used to serialize\n   * context embedder data set by\n   * v8::Context::SetAlignedPointerInEmbedderData().\n   *\n   * \\param api_wrapper_serializer An optional callback used to serialize API\n   * wrapper references set via `v8::Object::Wrap()`.\n   */\n  void SetDefaultContext(\n      Local<Context> context,\n      SerializeInternalFieldsCallback internal_fields_serializer =\n          SerializeInternalFieldsCallback(),\n      SerializeContextDataCallback context_data_serializer =\n          SerializeContextDataCallback(),\n      SerializeAPIWrapperCallback api_wrapper_serializer =\n          SerializeAPIWrapperCallback());\n\n  /**\n   * Add additional context to be included in the snapshot blob.\n   * The snapshot will include the global proxy.\n   *\n   * \\param internal_fields_serializer Similar to internal_fields_serializer\n   * in SetDefaultContext() but only applies to the context being added.\n   *\n   * \\param context_data_serializer Similar to context_data_serializer\n   * in SetDefaultContext() but only applies to the context being added.\n   *\n   * \\param api_wrapper_serializer Similar to api_wrapper_serializer\n   * in SetDefaultContext() but only applies to the context being added.\n   */\n  size_t AddContext(Local<Context> context,\n                    SerializeInternalFieldsCallback internal_fields_serializer =\n                        SerializeInternalFieldsCallback(),\n                    SerializeContextDataCallback context_data_serializer =\n                        SerializeContextDataCallback(),\n                    SerializeAPIWrapperCallback api_wrapper_serializer =\n                        SerializeAPIWrapperCallback());\n\n  /**\n   * Attach arbitrary V8::Data to the context snapshot, which can be retrieved\n   * via Context::GetDataFromSnapshotOnce after deserialization. This data does\n   * not survive when a new snapshot is created from an existing snapshot.\n   * \\returns the index for retrieval.\n   */\n  template <class T>\n  V8_INLINE size_t AddData(Local<Context> context, Local<T> object);\n\n  /**\n   * Attach arbitrary V8::Data to the isolate snapshot, which can be retrieved\n   * via Isolate::GetDataFromSnapshotOnce after deserialization. This data does\n   * not survive when a new snapshot is created from an existing snapshot.\n   * \\returns the index for retrieval.\n   */\n  template <class T>\n  V8_INLINE size_t AddData(Local<T> object);\n\n  /**\n   * Created a snapshot data blob.\n   * This must not be called from within a handle scope.\n   * \\param function_code_handling whether to include compiled function code\n   *        in the snapshot.\n   * \\returns { nullptr, 0 } on failure, and a startup snapshot on success. The\n   *        caller acquires ownership of the data array in the return value.\n   */\n  StartupData CreateBlob(FunctionCodeHandling function_code_handling);\n\n  // Disallow copying and assigning.\n  SnapshotCreator(const SnapshotCreator&) = delete;\n  void operator=(const SnapshotCreator&) = delete;\n\n private:\n  size_t AddData(Local<Context> context, internal::Address object);\n  size_t AddData(internal::Address object);\n\n  internal::SnapshotCreatorImpl* impl_;\n  friend class internal::SnapshotCreatorImpl;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"AddData\",\n                \"parent\": \"SnapshotCreator\",\n                \"about\": \"Adds V8::Data to the context snapshot\",\n                \"logic\": \"Calls the private AddData with the address of the object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"context\",\n                        \"type\": \"Local<Context>\",\n                        \"purpose\": \"The context to which the data is attached.\"\n                    },\n                    {\n                        \"name\": \"object\",\n                        \"type\": \"Local<T>\",\n                        \"purpose\": \"The V8::Data object to attach.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"Index for retrieval\"\n                },\n                \"dependencies\": [\n                    \"internal::ValueHelper\",\n                    \"Local\",\n                    \"Context\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nsize_t SnapshotCreator::AddData(Local<Context> context, Local<T> object) {\n  return AddData(context, internal::ValueHelper::ValueAsAddress(*object));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"AddData\",\n                \"parent\": \"SnapshotCreator\",\n                \"about\": \"Adds V8::Data to the isolate snapshot.\",\n                \"logic\": \"Calls the private AddData with the address of the object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"object\",\n                        \"type\": \"Local<T>\",\n                        \"purpose\": \"The V8::Data object to attach.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"Index for retrieval\"\n                },\n                \"dependencies\": [\n                    \"internal::ValueHelper\",\n                    \"Local\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <class T>\nsize_t SnapshotCreator::AddData(Local<T> object) {\n  return AddData(internal::ValueHelper::ValueAsAddress(*object));\n}\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Object\",\n                    \"about\": \"Base class for all JavaScript objects.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Object;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Local\",\n                    \"about\": \"Represents a local handle to a V8 object.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Local {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Context\",\n                    \"about\": \"Represents a JavaScript execution context.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Context;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"internal::SnapshotCreatorImpl\",\n                    \"about\": \"Internal implementation details for SnapshotCreator.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace internal { class SnapshotCreatorImpl; }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"v8::Isolate::CreateParams\",\n                    \"about\": \"Parameters used to initialize a V8 Isolate.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace v8 { namespace Isolate { struct CreateParams; }}\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"internal::Address\",\n                    \"about\": \"Internal address type.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace internal { typedef uintptr_t Address; }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"internal::ValueHelper\",\n                    \"about\": \"Internal helper class for working with V8 values.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace internal { class ValueHelper { public: static Address ValueAsAddress(Local<void> value); }; }\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}