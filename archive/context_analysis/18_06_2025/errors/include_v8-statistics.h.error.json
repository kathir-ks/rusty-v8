{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-statistics.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 120, column 55",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-statistics.h\",\n            \"file_name\": \"v8-statistics.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares classes and enums for accessing V8's memory and heap statistics.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard C++ headers for size definitions, integer types, memory management, and containers.\",\n                \"standard\": true\n            }\n        </metadata>\n        <code><![CDATA[\n#include <stddef.h>\n#include <stdint.h>\n\n#include <memory>\n#include <utility>\n#include <vector>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes V8-specific headers for local handles, memory spans, promises, and build configuration.\",\n                \"standard\": false\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n#include \"v8-memory-span.h\"   // NOLINT(build/include_directory)\n#include \"v8-promise.h\"       // NOLINT(build/include_directory)\n#include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum class\",\n                \"name\": \"MeasureMemoryMode\",\n                \"about\": \"Controls the level of detail reported by MeasureMemoryDelegate when measuring memory.\",\n                \"values\": [\n                    \"kSummary\",\n                    \"kDetailed\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nenum class MeasureMemoryMode { kSummary, kDetailed };\n        ]]></code>\n    </enum>\n    <enum>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum class\",\n                \"name\": \"MeasureMemoryExecution\",\n                \"about\": \"Controls how promptly a memory measurement request is executed.\",\n                \"values\": [\n                    \"kDefault\",\n                    \"kEager\",\n                    \"kLazy\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nenum class MeasureMemoryExecution { kDefault, kEager, kLazy };\n        ]]></code>\n    </enum>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"MeasureMemoryDelegate\",\n                \"about\": \"Abstract delegate class for customizing memory measurement in V8.\",\n                \"methods\": [\n                    {\n                        \"name\": \"ShouldMeasure\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"context\",\n                                \"type\": \"Local<Context>\"\n                            }\n                        ],\n                        \"return\": \"bool\",\n                        \"purpose\": \"Determines whether the size of a given context should be measured.\"\n                    },\n                    {\n                        \"name\": \"MeasurementComplete\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"result\",\n                                \"type\": \"Result\"\n                            }\n                        ],\n                        \"return\": \"void\",\n                        \"purpose\": \"Callback function invoked when memory measurement completes.\"\n                    },\n                    {\n                        \"name\": \"Default\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"isolate\",\n                                \"type\": \"Isolate*\"\n                            },\n                            {\n                                \"name\": \"context\",\n                                \"type\": \"Local<Context>\"\n                            },\n                            {\n                                \"name\": \"promise_resolver\",\n                                \"type\": \"Local<Promise::Resolver>\"\n                            },\n                            {\n                                \"name\": \"mode\",\n                                \"type\": \"MeasureMemoryMode\"\n                            }\n                        ],\n                        \"return\": \"std::unique_ptr<MeasureMemoryDelegate>\",\n                        \"purpose\": \"Static factory method that returns a default delegate that resolves a given promise when the memory measurement completes.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Local\",\n                    \"Context\",\n                    \"Promise::Resolver\",\n                    \"MeasureMemoryMode\",\n                    \"MemorySpan\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT MeasureMemoryDelegate {\n public:\n  virtual ~MeasureMemoryDelegate() = default;\n\n  /**\n   * Returns true if the size of the given context needs to be measured.\n   */\n  virtual bool ShouldMeasure(Local<Context> context) = 0;\n\n  /** Holds the result of a memory measurement request. */\n  struct Result {\n    /**\n     * Two spans of equal length: the first includes each context for which\n     * ShouldMeasure returned true and that was not garbage collected while\n     * the memory measurement was in progress; the second includes the size\n     * of the respective context.\n     */\n    const MemorySpan<const Local<Context>>& contexts;\n    const MemorySpan<const size_t>& sizes_in_bytes;\n\n    /**\n     * Total size of objects that were not attributed to any context (i.e. are\n     * likely shared objects).\n     */\n    size_t unattributed_size_in_bytes;\n\n    /** Total size of generated code for Wasm (shared across contexts). */\n    size_t wasm_code_size_in_bytes;\n\n    /** Total size of Wasm metadata (except code; shared across contexts). */\n    size_t wasm_metadata_size_in_bytes;\n  };\n\n  /**\n   * This function is called when memory measurement finishes.\n   *\n   * \\param result the result of the measurement.\n   */\n  virtual void MeasurementComplete(Result result) {}\n\n  /**\n   * Returns a default delegate that resolves the given promise when\n   * the memory measurement completes.\n   *\n   * \\param isolate the current isolate\n   * \\param context the current context\n   * \\param promise_resolver the promise resolver that is given the\n   *   result of the memory measurement.\n   * \\param mode the detail level of the result.\n   */\n  static std::unique_ptr<MeasureMemoryDelegate> Default(\n      Isolate* isolate, Local<Context> context,\n      Local<Promise::Resolver> promise_resolver, MeasureMemoryMode mode);\n};\n        ]]></code>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"struct\",\n                    \"name\": \"Result\",\n                    \"parent\": \"MeasureMemoryDelegate\",\n                    \"about\": \"Holds the result of a memory measurement request.\",\n                    \"attributes\": [\n                        {\n                            \"name\": \"contexts\",\n                            \"type\": \"const MemorySpan<const Local<Context>>&\",\n                            \"access\": \"public\",\n                            \"purpose\": \"A span of contexts for which ShouldMeasure returned true and that were not garbage collected.\"\n                        },\n                        {\n                            \"name\": \"sizes_in_bytes\",\n                            \"type\": \"const MemorySpan<const size_t>&\",\n                            \"access\": \"public\",\n                            \"purpose\": \"A span of sizes corresponding to the contexts in the contexts span.\"\n                        },\n                        {\n                            \"name\": \"unattributed_size_in_bytes\",\n                            \"type\": \"size_t\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Total size of objects not attributed to any context.\"\n                        },\n                        {\n                            \"name\": \"wasm_code_size_in_bytes\",\n                            \"type\": \"size_t\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Total size of generated code for Wasm.\"\n                        },\n                        {\n                            \"name\": \"wasm_metadata_size_in_bytes\",\n                            \"type\": \"size_t\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Total size of Wasm metadata (except code).\"\n                        }\n                    ],\n                    \"dependencies\": [\n                        \"MemorySpan\",\n                        \"Local\",\n                        \"Context\"\n                    ]\n                }\n            </metadata>\n            <code><![CDATA[\n  struct Result {\n    /**\n     * Two spans of equal length: the first includes each context for which\n     * ShouldMeasure returned true and that was not garbage collected while\n     * the memory measurement was in progress; the second includes the size\n     * of the respective context.\n     */\n    const MemorySpan<const Local<Context>>& contexts;\n    const MemorySpan<const size_t>& sizes_in_bytes;\n\n    /**\n     * Total size of objects that were not attributed to any context (i.e. are\n     * likely shared objects).\n     */\n    size_t unattributed_size_in_bytes;\n\n    /** Total size of generated code for Wasm (shared across contexts). */\n    size_t wasm_code_size_in_bytes;\n\n    /** Total size of Wasm metadata (except code; shared across contexts). */\n    size_t wasm_metadata_size_in_bytes;\n  };\n            ]]></code>\n        </class>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SharedMemoryStatistics\",\n                \"about\": \"Collects shared per-process V8 memory information.\",\n                \"methods\": [\n                    {\n                        \"name\": \"SharedMemoryStatistics\",\n                        \"parameters\": [],\n                        \"return\": \"void\",\n                        \"purpose\": \"Constructor.\"\n                    },\n                    {\n                        \"name\": \"read_only_space_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of the read-only space.\"\n                    },\n                    {\n                        \"name\": \"read_only_space_used_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the used size of the read-only space.\"\n                    },\n                    {\n                        \"name\": \"read_only_space_physical_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the physical size of the read-only space.\"\n                    }\n                ],\n                \"attributes\": [\n                    {\n                        \"name\": \"read_only_space_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of the read-only space.\"\n                    },\n                    {\n                        \"name\": \"read_only_space_used_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the used size of the read-only space.\"\n                    },\n                    {\n                        \"name\": \"read_only_space_physical_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the physical size of the read-only space.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT SharedMemoryStatistics {\n public:\n  SharedMemoryStatistics();\n  size_t read_only_space_size() { return read_only_space_size_; }\n  size_t read_only_space_used_size() { return read_only_space_used_size_; }\n  size_t read_only_space_physical_size() {\n    return read_only_space_physical_size_;\n  }\n\n private:\n  size_t read_only_space_size_;\n  size_t read_only_space_used_size_;\n  size_t read_only_space_physical_size_;\n\n  friend class V8;\n  friend class internal::ReadOnlyHeap;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HeapStatistics\",\n                \"about\": \"Collects V8 heap information.\",\n                \"methods\": [\n                    {\n                        \"name\": \"HeapStatistics\",\n                        \"parameters\": [],\n                        \"return\": \"void\",\n                        \"purpose\": \"Constructor.\"\n                    },\n                    {\n                        \"name\": \"total_heap_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the total heap size.\"\n                    },\n                    {\n                        \"name\": \"total_heap_size_executable\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the total heap size for executable memory.\"\n                    },\n                    {\n                        \"name\": \"total_physical_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the total physical size.\"\n                    },\n                    {\n                        \"name\": \"total_available_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the total available size.\"\n                    },\n                    {\n                        \"name\": \"total_global_handles_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the total size of global handles.\"\n                    },\n                    {\n                        \"name\": \"used_global_handles_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the used size of global handles.\"\n                    },\n                    {\n                        \"name\": \"used_heap_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the used heap size.\"\n                    },\n                    {\n                        \"name\": \"heap_size_limit\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the heap size limit.\"\n                    },\n                    {\n                        \"name\": \"malloced_memory\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the amount of memory allocated by malloc.\"\n                    },\n                    {\n                        \"name\": \"external_memory\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the amount of external memory.\"\n                    },\n                    {\n                        \"name\": \"peak_malloced_memory\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the peak amount of memory allocated by malloc.\"\n                    },\n                    {\n                        \"name\": \"number_of_native_contexts\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the number of native contexts.\"\n                    },\n                    {\n                        \"name\": \"number_of_detached_contexts\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the number of detached contexts.\"\n                    },\n                    {\n                        \"name\": \"does_zap_garbage\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns whether V8 overwrites heap garbage with a bit pattern.\"\n                    }\n                ],\n                \"attributes\": [\n                    {\n                        \"name\": \"total_heap_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the total heap size.\"\n                    },\n                    {\n                        \"name\": \"total_heap_size_executable_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the total heap size for executable memory.\"\n                    },\n                    {\n                        \"name\": \"total_physical_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the total physical size.\"\n                    },\n                    {\n                        \"name\": \"total_available_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the total available size.\"\n                    },\n                    {\n                        \"name\": \"used_heap_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the used heap size.\"\n                    },\n                    {\n                        \"name\": \"heap_size_limit_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the heap size limit.\"\n                    },\n                    {\n                        \"name\": \"malloced_memory_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the amount of memory allocated by malloc.\"\n                    },\n                    {\n                        \"name\": \"external_memory_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the amount of external memory.\"\n                    },\n                    {\n                        \"name\": \"peak_malloced_memory_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the peak amount of memory allocated by malloc.\"\n                    },\n                    {\n                        \"name\": \"does_zap_garbage_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores whether V8 overwrites heap garbage with a bit pattern.\"\n                    },\n                    {\n                        \"name\": \"number_of_native_contexts_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the number of native contexts.\"\n                    },\n                    {\n                        \"name\": \"number_of_detached_contexts_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the number of detached contexts.\"\n                    },\n                    {\n                        \"name\": \"total_global_handles_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the total size of global handles.\"\n                    },\n                    {\n                        \"name\": \"used_global_handles_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the used size of global handles.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT HeapStatistics {\n public:\n  HeapStatistics();\n  size_t total_heap_size() { return total_heap_size_; }\n  size_t total_heap_size_executable() { return total_heap_size_executable_; }\n  size_t total_physical_size() { return total_physical_size_; }\n  size_t total_available_size() { return total_available_size_; }\n  size_t total_global_handles_size() { return total_global_handles_size_; }\n  size_t used_global_handles_size() { return used_global_handles_size_; }\n  size_t used_heap_size() { return used_heap_size_; }\n  size_t heap_size_limit() { return heap_size_limit_; }\n  size_t malloced_memory() { return malloced_memory_; }\n  size_t external_memory() { return external_memory_; }\n  size_t peak_malloced_memory() { return peak_malloced_memory_; }\n  size_t number_of_native_contexts() { return number_of_native_contexts_; }\n  size_t number_of_detached_contexts() { return number_of_detached_contexts_; }\n\n  /**\n   * Returns a 0/1 boolean, which signifies whether the V8 overwrite heap\n   * garbage with a bit pattern.\n   */\n  size_t does_zap_garbage() { return does_zap_garbage_; }\n\n private:\n  size_t total_heap_size_;\n  size_t total_heap_size_executable_;\n  size_t total_physical_size_;\n  size_t total_available_size_;\n  size_t used_heap_size_;\n  size_t heap_size_limit_;\n  size_t malloced_memory_;\n  size_t external_memory_;\n  size_t peak_malloced_memory_;\n  bool does_zap_garbage_;\n  size_t number_of_native_contexts_;\n  size_t number_of_detached_contexts_;\n  size_t total_global_handles_size_;\n  size_t used_global_handles_size_;\n\n  friend class V8;\n  friend class Isolate;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HeapSpaceStatistics\",\n                \"about\": \"Collects V8 heap space information.\",\n                \"methods\": [\n                    {\n                        \"name\": \"HeapSpaceStatistics\",\n                        \"parameters\": [],\n                        \"return\": \"void\",\n                        \"purpose\": \"Constructor.\"\n                    },\n                    {\n                        \"name\": \"space_name\",\n                        \"parameters\": [],\n                        \"return\": \"const char*\",\n                        \"purpose\": \"Returns the name of the heap space.\"\n                    },\n                    {\n                        \"name\": \"space_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of the heap space.\"\n                    },\n                    {\n                        \"name\": \"space_used_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the used size of the heap space.\"\n                    },\n                    {\n                        \"name\": \"space_available_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the available size of the heap space.\"\n                    },\n                    {\n                        \"name\": \"physical_space_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the physical size of the heap space.\"\n                    }\n                ],\n                \"attributes\": [\n                    {\n                        \"name\": \"space_name_\",\n                        \"type\": \"const char*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the name of the heap space.\"\n                    },\n                    {\n                        \"name\": \"space_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of the heap space.\"\n                    },\n                    {\n                        \"name\": \"space_used_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the used size of the heap space.\"\n                    },\n                    {\n                        \"name\": \"space_available_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the available size of the heap space.\"\n                    },\n                    {\n                        \"name\": \"physical_space_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the physical size of the heap space.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT HeapSpaceStatistics {\n public:\n  HeapSpaceStatistics();\n  const char* space_name() { return space_name_; }\n  size_t space_size() { return space_size_; }\n  size_t space_used_size() { return space_used_size_; }\n  size_t space_available_size() { return space_available_size_; }\n  size_t physical_space_size() { return physical_space_size_; }\n\n private:\n  const char* space_name_;\n  size_t space_size_;\n  size_t space_used_size_;\n  size_t space_available_size_;\n  size_t physical_space_size_;\n\n  friend class Isolate;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HeapObjectStatistics\",\n                \"about\": \"Collects V8 heap object information.\",\n                \"methods\": [\n                    {\n                        \"name\": \"HeapObjectStatistics\",\n                        \"parameters\": [],\n                        \"return\": \"void\",\n                        \"purpose\": \"Constructor.\"\n                    },\n                    {\n                        \"name\": \"object_type\",\n                        \"parameters\": [],\n                        \"return\": \"const char*\",\n                        \"purpose\": \"Returns the type of the heap object.\"\n                    },\n                    {\n                        \"name\": \"object_sub_type\",\n                        \"parameters\": [],\n                        \"return\": \"const char*\",\n                        \"purpose\": \"Returns the sub-type of the heap object.\"\n                    },\n                    {\n                        \"name\": \"object_count\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the count of the heap object.\"\n                    },\n                    {\n                        \"name\": \"object_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of the heap object.\"\n                    }\n                ],\n                \"attributes\": [\n                    {\n                        \"name\": \"object_type_\",\n                        \"type\": \"const char*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the type of the heap object.\"\n                    },\n                    {\n                        \"name\": \"object_sub_type_\",\n                        \"type\": \"const char*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the sub-type of the heap object.\"\n                    },\n                    {\n                        \"name\": \"object_count_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the count of the heap object.\"\n                    },\n                    {\n                        \"name\": \"object_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of the heap object.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT HeapObjectStatistics {\n public:\n  HeapObjectStatistics();\n  const char* object_type() { return object_type_; }\n  const char* object_sub_type() { return object_sub_type_; }\n  size_t object_count() { return object_count_; }\n  size_t object_size() { return object_size_; }\n\n private:\n  const char* object_type_;\n  const char* object_sub_type_;\n  size_t object_count_;\n  size_t object_size_;\n\n  friend class Isolate;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"HeapCodeStatistics\",\n                \"about\": \"Collects V8 heap code information.\",\n                \"methods\": [\n                    {\n                        \"name\": \"HeapCodeStatistics\",\n                        \"parameters\": [],\n                        \"return\": \"void\",\n                        \"purpose\": \"Constructor.\"\n                    },\n                    {\n                        \"name\": \"code_and_metadata_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of code and metadata.\"\n                    },\n                    {\n                        \"name\": \"bytecode_and_metadata_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of bytecode and metadata.\"\n                    },\n                    {\n                        \"name\": \"external_script_source_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of external script source.\"\n                    },\n                    {\n                        \"name\": \"cpu_profiler_metadata_size\",\n                        \"parameters\": [],\n                        \"return\": \"size_t\",\n                        \"purpose\": \"Returns the size of CPU profiler metadata.\"\n                    }\n                ],\n                \"attributes\": [\n                    {\n                        \"name\": \"code_and_metadata_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of code and metadata.\"\n                    },\n                    {\n                        \"name\": \"bytecode_and_metadata_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of bytecode and metadata.\"\n                    },\n                    {\n                        \"name\": \"external_script_source_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of external script source.\"\n                    },\n                    {\n                        \"name\": \"cpu_profiler_metadata_size_\",\n                        \"type\": \"size_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the size of CPU profiler metadata.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT HeapCodeStatistics {\n public:\n  HeapCodeStatistics();\n  size_t code_and_metadata_size() { return code_and_metadata_size_; }\n  size_t bytecode_and_metadata_size() { return bytecode_and_metadata_size_; }\n  size_t external_script_source_size() { return external_script_source_size_; }\n  size_t cpu_profiler_metadata_size() { return cpu_profiler_metadata_size_; }\n\n private:\n  size_t code_and_metadata_size_;\n  size_t bytecode_and_metadata_size_;\n  size_t external_script_source_size_;\n  size_t cpu_profiler_metadata_size_;\n\n  friend class Isolate;\n};\n        ]]></code>\n    </class>\n</file>\n```"
}