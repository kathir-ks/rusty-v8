{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/pipeline-statistics.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 109, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/pipeline-statistics.h\",\n        \"file_name\": \"pipeline-statistics.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares classes for collecting and reporting statistics about the Turbofan compiler pipeline phases.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary standard library and V8 headers.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <memory>\n#include <string>\n\n#include \"src/base/export-template.h\"\n#include \"src/base/platform/elapsed-timer.h\"\n#include \"src/compiler/zone-stats.h\"\n#include \"src/diagnostics/compilation-statistics.h\"\n#include \"src/objects/code-kind.h\"\n#include \"src/tracing/trace-event.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PipelineStatisticsBase\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Base class for collecting pipeline statistics.\",\n            \"attributes\": [\n                {\n                    \"name\": \"outer_zone_\",\n                    \"type\": \"Zone*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The zone in which the compiler operates.\"\n                },\n                {\n                    \"name\": \"zone_stats_\",\n                    \"type\": \"ZoneStats*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Statistics about zone usage.\"\n                },\n                {\n                    \"name\": \"compilation_stats_\",\n                    \"type\": \"std::shared_ptr<CompilationStatistics>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Overall compilation statistics.\"\n                },\n                {\n                    \"name\": \"code_kind_\",\n                    \"type\": \"CodeKind\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The kind of code being compiled.\"\n                },\n                {\n                    \"name\": \"function_name_\",\n                    \"type\": \"std::string\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The name of the function being compiled.\"\n                },\n                {\n                    \"name\": \"total_stats_\",\n                    \"type\": \"CommonStats\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Statistics for the entire compilation.\"\n                },\n                {\n                    \"name\": \"phase_kind_name_\",\n                    \"type\": \"const char*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The name of the current phase kind.\"\n                },\n                {\n                    \"name\": \"phase_kind_stats_\",\n                    \"type\": \"CommonStats\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Statistics for the current phase kind.\"\n                },\n                {\n                    \"name\": \"phase_name_\",\n                    \"type\": \"const char*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The name of the current phase.\"\n                },\n                {\n                    \"name\": \"phase_stats_\",\n                    \"type\": \"CommonStats\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Statistics for the current phase.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Zone\",\n                \"ZoneStats\",\n                \"CompilationStatistics\",\n                \"CodeKind\",\n                \"CommonStats\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass PipelineStatisticsBase {\n protected:\n  using Base = PipelineStatisticsBase;\n\n  PipelineStatisticsBase(\n      Zone* outer_zone, ZoneStats* zone_stats,\n      std::shared_ptr<CompilationStatistics> compilation_stats,\n      CodeKind code_kind);\n  ~PipelineStatisticsBase();\n\n  // No copying.\n  PipelineStatisticsBase(const PipelineStatisticsBase&) = delete;\n  PipelineStatisticsBase& operator=(const PipelineStatisticsBase&) = delete;\n\n  void BeginPhaseKind(const char* phase_kind_name);\n  void EndPhaseKind(CompilationStatistics::BasicStats* diff);\n\n  size_t OuterZoneSize() {\n    return static_cast<size_t>(outer_zone_->allocation_size());\n  }\n\n  class CommonStats {\n   public:\n    CommonStats() : outer_zone_initial_size_(0) {}\n    CommonStats(const CommonStats&) = delete;\n    CommonStats& operator=(const CommonStats&) = delete;\n\n    void Begin(PipelineStatisticsBase* pipeline_stats);\n    void End(PipelineStatisticsBase* pipeline_stats,\n             CompilationStatistics::BasicStats* diff);\n\n    std::unique_ptr<ZoneStats::StatsScope> scope_;\n    base::ElapsedTimer timer_;\n    size_t outer_zone_initial_size_;\n    size_t allocated_bytes_at_start_;\n    size_t graph_size_at_start_ = 0;\n  };\n\n  bool InPhaseKind() { return !!phase_kind_stats_.scope_; }\n\n  friend class PhaseScope;\n  bool InPhase() { return !!phase_stats_.scope_; }\n  void BeginPhase(const char* name);\n  void EndPhase(CompilationStatistics::BasicStats* diff);\n\n  CodeKind code_kind() const { return code_kind_; }\n  const char* phase_kind_name() const { return phase_kind_name_; }\n  const char* phase_name() const { return phase_name_; }\n\n  void set_function_name(std::string function_name) {\n    function_name_.assign(function_name);\n  }\n\n private:\n  Zone* const outer_zone_;\n  ZoneStats* const zone_stats_;\n  const std::shared_ptr<CompilationStatistics> compilation_stats_;\n  const CodeKind code_kind_;\n  std::string function_name_;\n\n  // Stats for the entire compilation.\n  CommonStats total_stats_;\n\n  // Stats for phase kind.\n  const char* phase_kind_name_ = nullptr;\n  CommonStats phase_kind_stats_;\n\n  // Stats for phase.\n  const char* phase_name_ = nullptr;\n  CommonStats phase_stats_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"TurbofanPipelineStatistics\",\n            \"extends\": \"PipelineStatisticsBase\",\n            \"implements\": [\n                \"Malloced\"\n            ],\n            \"about\": \"Collects Turbofan specific pipeline statistics, inheriting from PipelineStatisticsBase.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"OptimizedCompilationInfo\",\n                \"CompilationStatistics\",\n                \"ZoneStats\",\n                \"PipelineStatisticsBase\",\n                \"Malloced\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass TurbofanPipelineStatistics : public PipelineStatisticsBase,\n                                   public Malloced {\n public:\n  TurbofanPipelineStatistics(OptimizedCompilationInfo* info,\n                             std::shared_ptr<CompilationStatistics> turbo_stats,\n                             ZoneStats* zone_stats);\n  ~TurbofanPipelineStatistics();\n  TurbofanPipelineStatistics(const TurbofanPipelineStatistics&) = delete;\n  TurbofanPipelineStatistics& operator=(const TurbofanPipelineStatistics&) =\n      delete;\n\n  // We log detailed phase information about the pipeline\n  // in both the v8.turbofan and the v8.wasm.turbofan categories.\n  static constexpr char kTraceCategory[] =\n      TRACE_DISABLED_BY_DEFAULT(\"v8.turbofan\") \",\"  // --\n      TRACE_DISABLED_BY_DEFAULT(\"v8.wasm.turbofan\");\n\n  void BeginPhaseKind(const char* name);\n  void EndPhaseKind();\n  void BeginPhase(const char* name);\n  void EndPhase();\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"PhaseScope\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Manages the lifetime of a pipeline phase for statistical tracking.\",\n            \"attributes\": [\n                {\n                    \"name\": \"pipeline_stats_\",\n                    \"type\": \"TurbofanPipelineStatistics*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the pipeline statistics object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TurbofanPipelineStatistics\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_NODISCARD PhaseScope {\n public:\n  PhaseScope(TurbofanPipelineStatistics* pipeline_stats, const char* name)\n      : pipeline_stats_(pipeline_stats) {\n    if (pipeline_stats_ != nullptr) pipeline_stats_->BeginPhase(name);\n  }\n  ~PhaseScope() {\n    if (pipeline_stats_ != nullptr) pipeline_stats_->EndPhase();\n  }\n  PhaseScope(const PhaseScope&) = delete;\n  PhaseScope& operator=(const PhaseScope&) = delete;\n\n private:\n  TurbofanPipelineStatistics* const pipeline_stats_;\n};\n        ]]></code>\n    </class>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CommonStats\",\n            \"parent\": \"PipelineStatisticsBase\",\n            \"about\": \"Nested class for collecting common statistics related to phases and compilation as a whole\",\n            \"attributes\": [\n            {\n                \"name\": \"scope_\",\n                \"type\": \"std::unique_ptr<ZoneStats::StatsScope>\",\n                \"access\": \"public\",\n                \"purpose\": \"Statistics scope for zone usage\"\n            },\n            {\n                \"name\": \"timer_\",\n                \"type\": \"base::ElapsedTimer\",\n                \"access\": \"public\",\n                \"purpose\": \"Timer for measuring elapsed time\"\n            },\n            {\n                \"name\": \"outer_zone_initial_size_\",\n                \"type\": \"size_t\",\n                \"access\": \"public\",\n                \"purpose\": \"Initial size of outer zone\"\n            },\n            {\n                \"name\": \"allocated_bytes_at_start_\",\n                \"type\": \"size_t\",\n                \"access\": \"public\",\n                \"purpose\": \"Number of allocated bytes at start\"\n            },\n            {\n                \"name\": \"graph_size_at_start_\",\n                \"type\": \"size_t\",\n                \"access\": \"public\",\n                \"purpose\": \"Size of the graph at the start\"\n            }\n            ],\n            \"dependencies\": [\n                \"PipelineStatisticsBase\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n   class CommonStats {\n   public:\n    CommonStats() : outer_zone_initial_size_(0) {}\n    CommonStats(const CommonStats&) = delete;\n    CommonStats& operator=(const CommonStats&) = delete;\n\n    void Begin(PipelineStatisticsBase* pipeline_stats);\n    void End(PipelineStatisticsBase* pipeline_stats,\n             CompilationStatistics::BasicStats* diff);\n\n    std::unique_ptr<ZoneStats::StatsScope> scope_;\n    base::ElapsedTimer timer_;\n    size_t outer_zone_initial_size_;\n    size_t allocated_bytes_at_start_;\n    size_t graph_size_at_start_ = 0;\n  };\n        ]]></code>\n    </class>\n</file>\n```"
}