{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/deoptimized-frame-info.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 74, column 47",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/deoptimizer/deoptimized-frame-info.cc\",\n        \"file_name\": \"deoptimized-frame-info.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides information about deoptimized frames for debugging and other purposes.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for deoptimization frame information, execution, and object manipulation.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/deoptimizer/deoptimized-frame-info.h\"\n\n#include \"src/execution/isolate.h\"\n#include \"src/objects/js-function-inl.h\"\n#include \"src/objects/oddball.h\"\n        ]]></code>\n    </imports>\n\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"v8::internal\",\n            \"purpose\": \"Encloses V8 internal implementation details.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\nnamespace internal {\n        ]]></code>\n    </namespace>\n\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"anonymous\",\n            \"purpose\": \"Contains file-local helper functions.\"\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace {\n\nHandle<Object> GetValueForDebugger(TranslatedFrame::iterator it,\n                                   Isolate* isolate) {\n  if (it->GetRawValue() == ReadOnlyRoots(isolate).arguments_marker() &&\n      !it->IsMaterializableByDebugger()) {\n    return isolate->factory()->optimized_out();\n  }\n  return it->GetValue();\n}\n\n}  // namespace\n        ]]></code>\n    </namespace>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"DeoptimizedFrameInfo\",\n            \"about\": \"Stores information about a deoptimized frame, including parameters, context, and expression stack.\",\n            \"attributes\": [\n                {\n                    \"name\": \"parameters_\",\n                    \"type\": \"std::vector<Handle<Object>>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the parameters of the deoptimized function.\"\n                },\n                {\n                    \"name\": \"context_\",\n                    \"type\": \"Handle<Object>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the context of the deoptimized function.\"\n                },\n                {\n                    \"name\": \"expression_stack_\",\n                    \"type\": \"std::vector<Handle<Object>>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the expression stack of the deoptimized function.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TranslatedState\",\n                \"TranslatedFrame\",\n                \"Isolate\",\n                \"Object\",\n                \"JSFunction\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nDeoptimizedFrameInfo::DeoptimizedFrameInfo(TranslatedState* state,\n                                           TranslatedState::iterator frame_it,\n                                           Isolate* isolate) {\n  int parameter_count =\n      frame_it->shared_info()\n          ->internal_formal_parameter_count_without_receiver();\n  TranslatedFrame::iterator stack_it = frame_it->begin();\n\n  // Get the function. Note that this might materialize the function.\n  // In case the debugger mutates this value, we should deoptimize\n  // the function and remember the value in the materialized value store.\n  DCHECK_EQ(parameter_count,\n            Cast<JSFunction>(stack_it->GetValue())\n                ->shared()\n                ->internal_formal_parameter_count_without_receiver());\n\n  stack_it++;  // Skip the function.\n  stack_it++;  // Skip the receiver.\n\n  DCHECK_EQ(TranslatedFrame::kUnoptimizedFunction, frame_it->kind());\n\n  parameters_.resize(static_cast<size_t>(parameter_count));\n  for (int i = 0; i < parameter_count; i++) {\n    Handle<Object> parameter = GetValueForDebugger(stack_it, isolate);\n    SetParameter(i, parameter);\n    stack_it++;\n  }\n\n  // Get the context.\n  context_ = GetValueForDebugger(stack_it, isolate);\n  stack_it++;\n\n  // Get the expression stack.\n  DCHECK_EQ(TranslatedFrame::kUnoptimizedFunction, frame_it->kind());\n  const int stack_height = frame_it->height();  // Accumulator *not* included.\n\n  expression_stack_.resize(static_cast<size_t>(stack_height));\n  for (int i = 0; i < stack_height; i++) {\n    Handle<Object> expression = GetValueForDebugger(stack_it, isolate);\n    SetExpression(i, expression);\n    stack_it++;\n  }\n\n  DCHECK_EQ(TranslatedFrame::kUnoptimizedFunction, frame_it->kind());\n  stack_it++;  // Skip the accumulator.\n\n  CHECK(stack_it == frame_it->end());\n}\n        ]]></code>\n    </class>\n\n    <namespace>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"name\": \"v8::internal\",\n            \"purpose\": \"Closes V8 internal implementation details.\"\n        }\n        </metadata>\n        <code><![CDATA[\n}  // namespace internal\n}  // namespace v8\n        ]]></code>\n    </namespace>\n\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TranslatedState\",\n                \"about\": \"Represents the state of a translated frame during deoptimization.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TranslatedState {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TranslatedFrame\",\n                \"about\": \"Represents a translated frame during deoptimization.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TranslatedFrame {\n                public:\n                    enum Kind { kUnoptimizedFunction };\n                    class iterator {\n                    public:\n                        Handle<Object> GetValue();\n                        Object* GetRawValue();\n                        bool IsMaterializableByDebugger();\n                    };\n\n                    iterator begin();\n                    iterator end();\n                    Kind kind();\n                    int height();\n                    Object* shared_info();\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {\n                public:\n                    class Factory {\n                    public:\n                        Handle<Object> optimized_out();\n                    };\n                    Factory* factory();\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Object\",\n                \"about\": \"Base class for all V8 objects.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Object {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSFunction\",\n                \"about\": \"Represents a JavaScript function.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class JSFunction : public Object {\n                public:\n                    Object* shared();\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ReadOnlyRoots\",\n                    \"about\": \"Provides access to read-only roots in the isolate.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class ReadOnlyRoots {\n                public:\n                    Object* arguments_marker();\n                };\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}