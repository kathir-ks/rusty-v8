{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/zone/accounting-allocator.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 63, column 50",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/zone/accounting-allocator.h\",\n        \"file_name\": \"accounting-allocator.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the AccountingAllocator class, which manages memory allocation and tracks memory usage for Zones in V8.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers for atomic operations and memory management.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <atomic>\n            #include <memory>\n        ]]></code>\n    </imports>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes V8 specific headers for platform definitions, macros, and tracing flags.\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include \"include/v8-platform.h\"\n            #include \"src/base/macros.h\"\n            #include \"src/logging/tracing-flags.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"AccountingAllocator\",\n            \"about\": \"Manages memory allocation for Zones, tracks memory usage, and provides tracing capabilities.\",\n            \"attributes\": [\n                {\n                    \"name\": \"current_memory_usage_\",\n                    \"type\": \"std::atomic<size_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Tracks the current memory usage.\"\n                },\n                {\n                    \"name\": \"max_memory_usage_\",\n                    \"type\": \"std::atomic<size_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Tracks the maximum memory usage.\"\n                },\n                {\n                    \"name\": \"reserved_area_\",\n                    \"type\": \"std::unique_ptr<VirtualMemory>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Manages a reserved virtual memory area.\"\n                },\n                {\n                    \"name\": \"bounded_page_allocator_\",\n                    \"type\": \"std::unique_ptr<base::BoundedPageAllocator>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Allocates memory within a bounded page range.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Segment\",\n                \"VirtualMemory\",\n                \"Zone\",\n                \"base::BoundedPageAllocator\",\n                \"TracingFlags\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n        class V8_EXPORT_PRIVATE AccountingAllocator {\n         public:\n          AccountingAllocator();\n          AccountingAllocator(const AccountingAllocator&) = delete;\n          AccountingAllocator& operator=(const AccountingAllocator&) = delete;\n          virtual ~AccountingAllocator();\n\n          // Allocates a new segment. Returns nullptr on failed allocation.\n          Segment* AllocateSegment(size_t bytes, bool supports_compression);\n\n          // Return unneeded segments to either insert them into the pool or release\n          // them if the pool is already full or memory pressure is high.\n          void ReturnSegment(Segment* memory, bool supports_compression);\n\n          size_t GetCurrentMemoryUsage() const {\n            return current_memory_usage_.load(std::memory_order_relaxed);\n          }\n\n          size_t GetMaxMemoryUsage() const {\n            return max_memory_usage_.load(std::memory_order_relaxed);\n          }\n\n          void TraceZoneCreation(const Zone* zone) {\n            if (V8_LIKELY(!TracingFlags::is_zone_stats_enabled())) return;\n            TraceZoneCreationImpl(zone);\n          }\n\n          void TraceZoneDestruction(const Zone* zone) {\n            if (V8_LIKELY(!TracingFlags::is_zone_stats_enabled())) return;\n            TraceZoneDestructionImpl(zone);\n          }\n\n          void TraceAllocateSegment(Segment* segment) {\n            if (V8_LIKELY(!TracingFlags::is_zone_stats_enabled())) return;\n            TraceAllocateSegmentImpl(segment);\n          }\n\n         protected:\n          virtual void TraceZoneCreationImpl(const Zone* zone) {}\n          virtual void TraceZoneDestructionImpl(const Zone* zone) {}\n          virtual void TraceAllocateSegmentImpl(Segment* segment) {}\n\n         private:\n          std::atomic<size_t> current_memory_usage_{0};\n          std::atomic<size_t> max_memory_usage_{0};\n\n          std::unique_ptr<VirtualMemory> reserved_area_;\n          std::unique_ptr<base::BoundedPageAllocator> bounded_page_allocator_;\n        };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Segment\",\n                \"about\": \"Represents a contiguous block of memory used by the allocator.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Segment;\n            ]]></code>\n        </class>\n    </dependencies>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"VirtualMemory\",\n                \"about\": \"Abstraction for managing virtual memory regions.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class VirtualMemory;\n            ]]></code>\n        </class>\n    </dependencies>\n        <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Represents a memory allocation area in V8.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Zone;\n            ]]></code>\n        </class>\n    </dependencies>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BoundedPageAllocator\",\n                \"about\": \"Allocates memory within a set of pre-allocated pages.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace base {\n                class BoundedPageAllocator;\n            }\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}