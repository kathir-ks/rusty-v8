{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/vm-state.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 127, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/execution/vm-state.h\",\n            \"file_name\": \"vm-state.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines classes for managing VM state, used for logging, profiling, and handling external callbacks.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for V8 unwinding, global definitions, counter scopes, and internal V8 definitions.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"include/v8-unwinder.h\"\n#include \"src/common/globals.h\"\n#include \"src/logging/counters-scopes.h\"\n#include \"v8-internal.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"VMState\",\n                \"about\": \"Represents a state of the V8 VM. Used for logging and profiling.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"isolate_\",\n                        \"type\": \"Isolate*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the current Isolate.\"\n                    },\n                    {\n                        \"name\": \"previous_tag_\",\n                        \"type\": \"StateTag\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The previous state tag.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"StateTag\",\n                    \"ExternalCallbackScope\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ntemplate <StateTag Tag>\nclass VMState {\n public:\n  explicit inline VMState(Isolate* isolate);\n  inline ~VMState();\n\n  Isolate* isolate() { return isolate_; }\n\n private:\n  Isolate* const isolate_;\n  StateTag const previous_tag_;\n\n  friend ExternalCallbackScope;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ExternalCallbackScope\",\n                \"about\": \"Manages the scope for external callbacks into the V8 engine.  Used for profiling and handling JavaScript to C++ calls.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"callback_\",\n                        \"type\": \"Address\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Address of the callback function.\"\n                    },\n                    {\n                        \"name\": \"callback_info_\",\n                        \"type\": \"const void*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Opaque pointer to callback info (FunctionCallbackInfo, PropertyCallbackInfo, etc.).\"\n                    },\n                    {\n                        \"name\": \"previous_scope_\",\n                        \"type\": \"ExternalCallbackScope*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the previous ExternalCallbackScope.\"\n                    },\n                    {\n                        \"name\": \"vm_state_\",\n                        \"type\": \"VMState<EXTERNAL>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"VMState object for the EXTERNAL state.\"\n                    },\n                    {\n                        \"name\": \"exception_context_\",\n                        \"type\": \"v8::ExceptionContext\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Context for exception handling during the callback\"\n                    },\n                    {\n                        \"name\": \"pause_timed_histogram_scope_\",\n                        \"type\": \"PauseNestedTimedHistogramScope\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Manages timing histograms.\"\n                    },\n                    {\n                        \"name\": \"js_stack_comparable_address_\",\n                        \"type\": \"Address\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Address used for stack comparison (only present under certain build configurations).\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"VMState\",\n                    \"EXTERNAL\",\n                    \"PauseNestedTimedHistogramScope\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_NODISCARD ExternalCallbackScope {\n public:\n  inline ExternalCallbackScope(\n      Isolate* isolate, Address callback,\n      v8::ExceptionContext exception_context = v8::ExceptionContext::kUnknown,\n      const void* callback_info = nullptr);\n  inline ~ExternalCallbackScope();\n  Address callback() { return callback_; }\n  Address* callback_entrypoint_address() {\n    if (callback_ == kNullAddress) return nullptr;\n#if USES_FUNCTION_DESCRIPTORS\n    return FUNCTION_ENTRYPOINT_ADDRESS(callback_);\n#else\n    return const_cast<Address*>(&callback_);\n#endif\n  }\n  ExternalCallbackScope* previous() { return previous_scope_; }\n  inline Address JSStackComparableAddress();\n\n  v8::ExceptionContext exception_context() const { return exception_context_; }\n  const void* callback_info() { return callback_info_; }\n\n private:\n  Address const callback_;\n  // v8::FunctionCallbackInfo* or v8::PropertyCallbackInfo* or nullptr.\n  const void* const callback_info_;\n  ExternalCallbackScope* const previous_scope_;\n  VMState<EXTERNAL> const vm_state_;\n  v8::ExceptionContext exception_context_;\n  PauseNestedTimedHistogramScope const pause_timed_histogram_scope_;\n#if USE_SIMULATOR || V8_USE_ADDRESS_SANITIZER || V8_USE_SAFE_STACK\n  Address js_stack_comparable_address_;\n#endif\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"PauseNestedTimedHistogramScope\",\n                    \"about\": \"A class for timing nested histogram scopes.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class PauseNestedTimedHistogramScope;\n            ]]></code>\n        </class>\n        <enum>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"enum\",\n                    \"name\": \"StateTag\",\n                    \"about\": \"An enum representing possible VM states.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                enum StateTag;\n            ]]></code>\n        </enum>\n    </dependencies>\n</file>\n```"
}