{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/pipeline.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 163, column 30",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/pipeline.h\",\n        \"file_name\": \"pipeline.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the Pipeline class, which provides static methods for creating compilation jobs and generating code for JavaScript and WebAssembly.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for memory management, code generation interfaces, global definitions, object representations, zone management, WebAssembly support (if enabled), standard function objects, and compiler-related data structures.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <memory>\n\n// Clients of this interface shouldn't depend on lots of compiler internals.\n// Do not include anything from src/compiler here!\n#include \"src/codegen/interface-descriptors.h\"\n#include \"src/common/globals.h\"\n#include \"src/objects/code.h\"\n#include \"src/zone/zone-containers.h\"\n\n#if V8_ENABLE_WEBASSEMBLY\n#include \"src/wasm/module-instantiate.h\"\n#include \"src/wasm/value-type.h\"\n#endif\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"Pipeline\",\n            \"extends\": \"AllStatic\",\n            \"about\": \"Provides static methods for creating compilation jobs and generating code for JavaScript and WebAssembly.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"TurbofanCompilationJob\",\n                \"OptimizedCompilationInfo\",\n                \"CodeAssemblerState\",\n                \"CallDescriptor\",\n                \"TFGraph\",\n                \"InstructionSequence\",\n                \"JSGraph\",\n                \"JSHeapBroker\",\n                \"MachineGraph\",\n                \"Schedule\",\n                \"SourcePositionTable\",\n                \"WasmCompilationData\",\n                \"TFPipelineData\",\n                \"ZoneStats\",\n                \"compiler::turboshaft::PipelineData\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass Pipeline : public AllStatic {\n public:\n  // Returns a new compilation job for the given JavaScript function.\n  static V8_EXPORT_PRIVATE std::unique_ptr<TurbofanCompilationJob>\n  NewCompilationJob(Isolate* isolate, Handle<JSFunction> function,\n                    CodeKind code_kind, bool has_script,\n                    BytecodeOffset osr_offset = BytecodeOffset::None());\n\n  using CodeAssemblerGenerator =\n      std::function<void(compiler::CodeAssemblerState*)>;\n  using CodeAssemblerInstaller =\n      std::function<void(Builtin builtin, Handle<Code> code)>;\n\n  static std::unique_ptr<TurbofanCompilationJob>\n  NewCSLinkageCodeStubBuiltinCompilationJob(\n      Isolate* isolate, Builtin builtin, CodeAssemblerGenerator generator,\n      CodeAssemblerInstaller installer,\n      const AssemblerOptions& assembler_options,\n      CallDescriptors::Key interface_descriptor, const char* name,\n      const ProfileDataFromFile* profile_data, int finalize_order);\n\n  static std::unique_ptr<TurbofanCompilationJob>\n  NewJSLinkageCodeStubBuiltinCompilationJob(\n      Isolate* isolate, Builtin builtin, CodeAssemblerGenerator generator,\n      CodeAssemblerInstaller installer,\n      const AssemblerOptions& assembler_options, int argc, const char* name,\n      const ProfileDataFromFile* profile_data, int finalize_order);\n\n  static std::unique_ptr<TurbofanCompilationJob>\n  NewBytecodeHandlerCompilationJob(Isolate* isolate, Builtin builtin,\n                                   CodeAssemblerGenerator generator,\n                                   CodeAssemblerInstaller installer,\n                                   const AssemblerOptions& assembler_options,\n                                   const char* name,\n                                   const ProfileDataFromFile* profile_data,\n                                   int finalize_order);\n\n#if V8_ENABLE_WEBASSEMBLY\n  // Run the pipeline on a machine graph and generate code.\n  static wasm::WasmCompilationResult GenerateCodeForWasmNativeStub(\n      CallDescriptor* call_descriptor, MachineGraph* mcgraph, CodeKind kind,\n      const char* debug_name, const AssemblerOptions& assembler_options,\n      SourcePositionTable* source_positions = nullptr);\n\n  static wasm::WasmCompilationResult\n  GenerateCodeForWasmNativeStubFromTurboshaft(\n      const wasm::CanonicalSig* sig, wasm::WrapperCompilationInfo wrapper_info,\n      const char* debug_name, const AssemblerOptions& assembler_options,\n      SourcePositionTable* source_positions);\n\n  static wasm::WasmCompilationResult GenerateWasmCode(\n      wasm::CompilationEnv* env, WasmCompilationData& compilation_data,\n      wasm::WasmDetectedFeatures* detected, Counters* counters);\n\n  // Returns a new compilation job for a wasm heap stub.\n  static std::unique_ptr<TurbofanCompilationJob> NewWasmHeapStubCompilationJob(\n      Isolate* isolate, CallDescriptor* call_descriptor,\n      std::unique_ptr<Zone> zone, TFGraph* graph, CodeKind kind,\n      std::unique_ptr<char[]> debug_name, const AssemblerOptions& options);\n\n  static std::unique_ptr<compiler::turboshaft::TurboshaftCompilationJob>\n  NewWasmTurboshaftWrapperCompilationJob(\n      Isolate* isolate, const wasm::CanonicalSig* sig,\n      wasm::WrapperCompilationInfo wrapper_info,\n      std::unique_ptr<char[]> debug_name, const AssemblerOptions& options);\n#endif\n\n  static MaybeHandle<Code> GenerateCodeForTurboshaftBuiltin(\n      turboshaft::PipelineData* turboshaft_data,\n      CallDescriptor* call_descriptor, Builtin builtin, const char* debug_name,\n      const ProfileDataFromFile* profile_data);\n\n  // ---------------------------------------------------------------------------\n  // The following methods are for testing purposes only. Avoid production use.\n  // ---------------------------------------------------------------------------\n\n  // Run the pipeline on JavaScript bytecode and generate code.\n  V8_EXPORT_PRIVATE static MaybeHandle<Code> GenerateCodeForTesting(\n      OptimizedCompilationInfo* info, Isolate* isolate);\n\n  // Run the pipeline on a machine graph and generate code. If {schedule} is\n  // {nullptr}, then compute a new schedule for code generation.\n  V8_EXPORT_PRIVATE static MaybeHandle<Code> GenerateCodeForTesting(\n      OptimizedCompilationInfo* info, Isolate* isolate,\n      CallDescriptor* call_descriptor, TFGraph* graph,\n      const AssemblerOptions& options, Schedule* schedule = nullptr);\n\n  // Run the instruction selector on a turboshaft graph and generate code.\n  V8_EXPORT_PRIVATE static MaybeHandle<Code> GenerateTurboshaftCodeForTesting(\n      CallDescriptor* call_descriptor, turboshaft::PipelineData* data);\n\n private:\n  DISALLOW_IMPLICIT_CONSTRUCTORS(Pipeline);\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the << operator for InstructionRangesAsJSON to allow printing to an ostream.\",\n            \"logic\": \"Allows printing the content of InstructionRangesAsJSON objects to an output stream.\",\n            \"parameters\": [\n                {\n                    \"name\": \"out\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream to write to.\"\n                },\n                {\n                    \"name\": \"s\",\n                    \"type\": \"const InstructionRangesAsJSON&\",\n                    \"purpose\": \"The InstructionRangesAsJSON object to print.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"InstructionRangesAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& out, const InstructionRangesAsJSON& s);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"InstructionRangesAsJSON\",\n            \"about\": \"A structure to hold instruction sequence and their origins for JSON output.\",\n            \"attributes\": [\n                {\n                    \"name\": \"sequence\",\n                    \"type\": \"const InstructionSequence*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The instruction sequence.\"\n                },\n                {\n                    \"name\": \"instr_origins\",\n                    \"type\": \"const ZoneVector<std::pair<int, int>>*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"A vector of instruction origins.\"\n                }\n            ],\n            \"dependencies\": [\n                \"InstructionSequence\",\n                \"ZoneVector\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct InstructionRangesAsJSON {\n  const InstructionSequence* sequence;\n  const ZoneVector<std::pair<int, int>>* instr_origins;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TurbofanCompilationJob\",\n                \"about\": \"Represents a compilation job for Turbofan.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class TurbofanCompilationJob;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"OptimizedCompilationInfo\",\n                \"about\": \"Stores information about an optimized compilation.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class OptimizedCompilationInfo;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ProfileDataFromFile\",\n                \"about\": \"Represents profile data read from a file.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class ProfileDataFromFile;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"AssemblerOptions\",\n                \"about\": \"Options to configure the assembler.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            struct AssemblerOptions;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CodeAssemblerState\",\n                \"about\": \"Represents the state of the CodeAssembler.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class CodeAssemblerState;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallDescriptor\",\n                \"about\": \"Describes the calling convention for a function call.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class CallDescriptor;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TFGraph\",\n                \"about\": \"Represents a Turbofan graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class TFGraph;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"InstructionSequence\",\n                \"about\": \"Represents a sequence of instructions.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class InstructionSequence;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSGraph\",\n                \"about\": \"Represents a JavaScript graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class JSGraph;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JSHeapBroker\",\n                \"about\": \"Provides access to the JS heap.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class JSHeapBroker;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"MachineGraph\",\n                \"about\": \"Represents a machine graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class MachineGraph;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Schedule\",\n                \"about\": \"Represents a schedule for code generation.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Schedule;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourcePositionTable\",\n                \"about\": \"Maps instructions to source code positions.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class SourcePositionTable;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmCompilationData\",\n                \"about\": \"Stores data needed for WebAssembly compilation.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            struct WasmCompilationData;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TFPipelineData\",\n                \"about\": \"Data structure for the Turbofan pipeline.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class TFPipelineData;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ZoneStats\",\n                \"about\": \"Statistics about memory zones.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class ZoneStats;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Graph\",\n                \"namespace\": \"compiler::turboshaft\",\n                \"about\": \"Represents a Turboshaft graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace compiler::turboshaft {\n            class Graph;\n            }  // namespace compiler::turboshaft\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"PipelineData\",\n                \"namespace\": \"compiler::turboshaft\",\n                \"about\": \"Stores data for the Turboshaft pipeline.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace compiler::turboshaft {\n            class PipelineData;\n            }  // namespace compiler::turboshaft\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TurboshaftCompilationJob\",\n                \"namespace\": \"compiler::turboshaft\",\n                \"about\": \"Compilation Job for Turboshaft\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace compiler::turboshaft {\n            class TurboshaftCompilationJob;\n            }  // namespace compiler::turboshaft\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"CompilationEnv\",\n                \"namespace\": \"wasm\",\n                \"about\": \"Stores environment settings for WebAssembly compilation.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace wasm {\n            struct CompilationEnv;\n            }  // namespace wasm\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"FunctionBody\",\n                \"namespace\": \"wasm\",\n                \"about\": \"Represents the body of a WebAssembly function.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace wasm {\n            struct FunctionBody;\n            }  // namespace wasm\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmCompilationResult\",\n                \"namespace\": \"wasm\",\n                \"about\": \"Stores the result of WebAssembly compilation.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace wasm {\n            struct WasmCompilationResult;\n            }  // namespace wasm\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"WasmDetectedFeatures\",\n                \"namespace\": \"wasm\",\n                \"about\": \"Stores detected features in WebAssembly code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace wasm {\n            class WasmDetectedFeatures;\n            }  // namespace wasm\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WasmInliningPosition\",\n                \"about\": \"Represents the inlining position for WebAssembly code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            struct WasmInliningPosition;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"RegisterConfiguration\",\n                \"about\": \"Holds register configuration data for code generation\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class RegisterConfiguration;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"CanonicalSig\",\n                \"namespace\": \"wasm\",\n                \"about\": \"Canonical signature of a WebAssembly function.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace wasm {\n                struct CanonicalSig;\n            }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"WrapperCompilationInfo\",\n                \"namespace\": \"wasm\",\n                \"about\": \"Info for compiling WebAssembly wrappers.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            namespace wasm {\n                struct WrapperCompilationInfo;\n            }\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}