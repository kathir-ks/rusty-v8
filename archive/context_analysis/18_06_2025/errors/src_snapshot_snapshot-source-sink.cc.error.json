{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/snapshot-source-sink.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 44, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/snapshot/snapshot-source-sink.cc\",\n        \"file_name\": \"snapshot-source-sink.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Implements snapshot byte sink and source classes for serializing and deserializing data during snapshot creation and loading in V8.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library and V8 specific headers for vector, logging, handle management, and object representation.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/snapshot/snapshot-source-sink.h\"\n\n#include <vector>\n\n#include \"src/base/logging.h\"\n#include \"src/handles/handles-inl.h\"\n#include \"src/objects/objects-inl.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SnapshotByteSink\",\n            \"about\": \"A sink for writing bytes to a buffer during snapshot creation.\",\n            \"attributes\": [\n                {\n                    \"name\": \"data_\",\n                    \"type\": \"std::vector<uint8_t>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The internal buffer to store the bytes.\"\n                }\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\nnamespace internal {\n\nclass SnapshotByteSink {\n public:\n  void PutN(int number_of_bytes, const uint8_t v,\n                            const char* description);\n  void PutUint30(uint32_t integer, const char* description);\n  void PutRaw(const uint8_t* data, int number_of_bytes,\n                              const char* description);\n  void Append(const SnapshotByteSink& other);\n\n private:\n  std::vector<uint8_t> data_;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"PutN\",\n            \"parent\": \"SnapshotByteSink\",\n            \"about\": \"Writes a specified number of bytes with a given value to the sink.\",\n            \"logic\": \"Inserts 'number_of_bytes' copies of the byte 'v' into the 'data_' vector.\",\n            \"parameters\": [\n                {\n                    \"name\": \"number_of_bytes\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of bytes to write.\"\n                },\n                {\n                    \"name\": \"v\",\n                    \"type\": \"const uint8_t\",\n                    \"purpose\": \"The byte value to write.\"\n                },\n                {\n                    \"name\": \"description\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"A description for debugging purposes.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SnapshotByteSink::PutN(int number_of_bytes, const uint8_t v,\n                            const char* description) {\n  data_.insert(data_.end(), number_of_bytes, v);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"PutUint30\",\n            \"parent\": \"SnapshotByteSink\",\n            \"about\": \"Writes a 30-bit unsigned integer to the sink, encoding its size in the lower bits of the first byte.\",\n            \"logic\": \"Encodes the integer into 1-4 bytes, with the size encoded in the lower 2 bits of the first byte.  The encoded integer is then written to the 'data_' vector.\",\n            \"parameters\": [\n                {\n                    \"name\": \"integer\",\n                    \"type\": \"uint32_t\",\n                    \"purpose\": \"The integer to write.\"\n                },\n                {\n                    \"name\": \"description\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"A description for debugging purposes.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"CHECK_LT\",\n                \"Put\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SnapshotByteSink::PutUint30(uint32_t integer, const char* description) {\n  CHECK_LT(integer, 1UL << 30);\n  integer <<= 2;\n  int bytes = 1;\n  if (integer > 0xFF) bytes = 2;\n  if (integer > 0xFFFF) bytes = 3;\n  if (integer > 0xFFFFFF) bytes = 4;\n  integer |= (bytes - 1);\n  Put(static_cast<uint8_t>(integer & 0xFF), \"IntPart1\");\n  if (bytes > 1) Put(static_cast<uint8_t>((integer >> 8) & 0xFF), \"IntPart2\");\n  if (bytes > 2) Put(static_cast<uint8_t>((integer >> 16) & 0xFF), \"IntPart3\");\n  if (bytes > 3) Put(static_cast<uint8_t>((integer >> 24) & 0xFF), \"IntPart4\");\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"PutRaw\",\n            \"parent\": \"SnapshotByteSink\",\n            \"about\": \"Writes raw byte data to the sink.\",\n            \"logic\": \"Copies 'number_of_bytes' from 'data' into the 'data_' vector. Includes a memory sanitizer check in debug builds.\",\n            \"parameters\": [\n                {\n                    \"name\": \"data\",\n                    \"type\": \"const uint8_t*\",\n                    \"purpose\": \"The data to write.\"\n                },\n                {\n                    \"name\": \"number_of_bytes\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The number of bytes to write.\"\n                },\n                {\n                    \"name\": \"description\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"A description for debugging purposes.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"__msan_check_mem_is_initialized\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SnapshotByteSink::PutRaw(const uint8_t* data, int number_of_bytes,\n                              const char* description) {\n#ifdef MEMORY_SANITIZER\n  __msan_check_mem_is_initialized(data, number_of_bytes);\n#endif\n  data_.insert(data_.end(), data, data + number_of_bytes);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"Append\",\n            \"parent\": \"SnapshotByteSink\",\n            \"about\": \"Appends the contents of another SnapshotByteSink to this sink.\",\n            \"logic\": \"Copies all the bytes from the other sink's 'data_' vector to this sink's 'data_' vector.\",\n            \"parameters\": [\n                {\n                    \"name\": \"other\",\n                    \"type\": \"const SnapshotByteSink&\",\n                    \"purpose\": \"The other sink to append.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nvoid SnapshotByteSink::Append(const SnapshotByteSink& other) {\n  data_.insert(data_.end(), other.data_.begin(), other.data_.end());\n}\n        ]]></code>\n    </func>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SnapshotByteSource\",\n            \"about\": \"A source for reading bytes from a buffer during snapshot loading.\",\n            \"attributes\": [\n                {\n                    \"name\": \"data_\",\n                    \"type\": \"const uint8_t*\",\n                    \"access\": \"private\", // implied\n                    \"purpose\": \"Pointer to the beginning of the data buffer.\"\n                },\n                {\n                    \"name\": \"length_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\", // implied\n                    \"purpose\": \"The total length of the data buffer.\"\n                },\n                {\n                    \"name\": \"position_\",\n                    \"type\": \"int\",\n                    \"access\": \"private\", // implied\n                    \"purpose\": \"The current read position in the data buffer.\"\n                }\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass SnapshotByteSource {\n public:\n  int GetBlob(const uint8_t** data);\n\n private:\n  const uint8_t* data_;\n  int length_;\n  int position_;\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"GetBlob\",\n            \"parent\": \"SnapshotByteSource\",\n            \"about\": \"Reads a blob of data from the source.\",\n            \"logic\": \"Reads the size of the blob using GetUint30().  Then, it returns a pointer to the start of the blob and advances the current position.\",\n            \"parameters\": [\n                {\n                    \"name\": \"data\",\n                    \"type\": \"const uint8_t**\",\n                    \"purpose\": \"A pointer to store the address of the blob.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"int\",\n                \"description\": \"The size of the blob.\"\n            },\n            \"dependencies\": [\n                \"GetUint30\",\n                \"CHECK_LE\",\n                \"Advance\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nint SnapshotByteSource::GetBlob(const uint8_t** data) {\n  int size = GetUint30();\n  CHECK_LE(position_ + size, length_);\n  *data = &data_[position_];\n  Advance(size);\n  return size;\n}\n        ]]></code>\n    </func>\n</file>\n```"
}