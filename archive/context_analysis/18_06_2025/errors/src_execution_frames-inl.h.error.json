{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/execution/frames-inl.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/execution/frames-inl.h\",\n            \"file_name\": \"frames-inl.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Provides inline implementations for the StackFrame and related classes, offering methods to access frame data and manipulate the stack.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers and V8-specific headers for memory management, frame constants, frame structures, isolate management, pointer authentication, and object representation.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/base/memory.h\"\n#include \"src/execution/frame-constants.h\"\n#include \"src/execution/frames.h\"\n#include \"src/execution/isolate.h\"\n#include \"src/execution/pointer-authentication.h\"\n#include \"src/objects/objects-inl.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"InnerPointerToCodeCache\",\n                \"about\": \"Caches the mapping between inner pointers and Code objects for fast lookup.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"isolate_\",\n                        \"type\": \"Isolate*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the isolate.\"\n                    },\n                    {\n                        \"name\": \"cache_\",\n                        \"type\": \"InnerPointerToCodeCacheEntry[kInnerPointerToCodeCacheSize]\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Array of cache entries.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"GcSafeCode\",\n                    \"SafepointEntry\",\n                    \"MaglevSafepointEntry\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass InnerPointerToCodeCache final {\n public:\n  struct InnerPointerToCodeCacheEntry {\n    Address inner_pointer;\n    std::optional<Tagged<GcSafeCode>> code;\n    union {\n      SafepointEntry safepoint_entry;\n      MaglevSafepointEntry maglev_safepoint_entry;\n    };\n    InnerPointerToCodeCacheEntry() : safepoint_entry() {}\n  };\n\n  explicit InnerPointerToCodeCache(Isolate* isolate) : isolate_(isolate) {\n    Flush();\n  }\n\n  InnerPointerToCodeCache(const InnerPointerToCodeCache&) = delete;\n  InnerPointerToCodeCache& operator=(const InnerPointerToCodeCache&) = delete;\n\n  void Flush() { memset(static_cast<void*>(&cache_[0]), 0, sizeof(cache_)); }\n\n  InnerPointerToCodeCacheEntry* GetCacheEntry(Address inner_pointer);\n\n private:\n  InnerPointerToCodeCacheEntry* cache(int index) { return &cache_[index]; }\n\n  Isolate* const isolate_;\n\n  static const int kInnerPointerToCodeCacheSize = 1024;\n  InnerPointerToCodeCacheEntry cache_[kInnerPointerToCodeCacheSize];\n};\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"address\",\n                \"parent\": \"StackHandler\",\n                \"about\": \"Returns the address of the StackHandler object.\",\n                \"logic\": \"Reinterprets the StackHandler pointer as an Address.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The address of the StackHandler object.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address StackHandler::address() const {\n  return reinterpret_cast<Address>(const_cast<StackHandler*>(this));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"next\",\n                \"parent\": \"StackHandler\",\n                \"about\": \"Returns the next StackHandler in the stack handler chain.\",\n                \"logic\": \"Reads the next handler's address from memory at a fixed offset and converts it back to a StackHandler pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"StackHandler*\",\n                    \"description\": \"The next StackHandler in the chain.\"\n                },\n                \"dependencies\": [\n                    \"StackHandlerConstants\",\n                    \"base::Memory\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline StackHandler* StackHandler::next() const {\n  const int offset = StackHandlerConstants::kNextOffset;\n  return FromAddress(base::Memory<Address>(address() + offset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"next_address\",\n                \"parent\": \"StackHandler\",\n                \"about\": \"Returns the address of the next StackHandler in the stack handler chain.\",\n                \"logic\": \"Calculates the memory address where the next handler pointer is stored.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The address of the next StackHandler.\"\n                },\n                \"dependencies\": [\n                    \"StackHandlerConstants\",\n                    \"base::Memory\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address StackHandler::next_address() const {\n  return base::Memory<Address>(address() + StackHandlerConstants::kNextOffset);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"FromAddress\",\n                \"parent\": \"StackHandler\",\n                \"about\": \"Converts an address to a StackHandler pointer.\",\n                \"logic\": \"Reinterprets the address as a StackHandler pointer.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"address\",\n                        \"type\": \"Address\",\n                        \"purpose\": \"The address to convert.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"StackHandler*\",\n                    \"description\": \"A StackHandler pointer.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ninline StackHandler* StackHandler::FromAddress(Address address) {\n  return reinterpret_cast<StackHandler*>(address);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"StackFrame\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Constructor for the StackFrame class.\",\n                \"logic\": \"Initializes the StackFrame with a StackFrameIteratorBase and isolate.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"StackFrameIteratorBase\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline StackFrame::StackFrame(StackFrameIteratorBase* iterator)\n    : iterator_(iterator), isolate_(iterator_->isolate()) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"top_handler\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Returns the top StackHandler for the frame.\",\n                \"logic\": \"Delegates to the iterator to get the top handler.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"StackHandler*\",\n                    \"description\": \"The top StackHandler.\"\n                },\n                \"dependencies\": [\n                    \"StackFrameIteratorBase\",\n                    \"StackHandler\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline StackFrame::top_handler() const {\n  return iterator_->handler();\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"pc\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Returns the program counter (PC) for the frame.\",\n                \"logic\": \"Reads and authenticates the PC from the PC address.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The authenticated program counter.\"\n                },\n                \"dependencies\": [\n                    \"ReadPC\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address StackFrame::pc() const { return ReadPC(pc_address()); }\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"unauthenticated_pc\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Returns the unauthenticated program counter (PC) for the frame.\",\n                \"logic\": \"Removes any pointer authentication code (PAC) from the PC address.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The unauthenticated program counter.\"\n                },\n                \"dependencies\": [\n                    \"PointerAuthentication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address StackFrame::unauthenticated_pc() const {\n  return unauthenticated_pc(pc_address());\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"unauthenticated_pc\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Static method to return the unauthenticated program counter (PC) from an address.\",\n                \"logic\": \"Removes any pointer authentication code (PAC) from the provided PC address.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"pc_address\",\n                        \"type\": \"Address*\",\n                        \"purpose\": \"The address containing the program counter.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The unauthenticated program counter.\"\n                },\n                \"dependencies\": [\n                    \"PointerAuthentication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n// static\ninline Address StackFrame::unauthenticated_pc(Address* pc_address) {\n  return PointerAuthentication::StripPAC(*pc_address);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"maybe_unauthenticated_pc\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Returns the potentially unauthenticated program counter (PC) for the frame.\",\n                \"logic\": \"Conditionally returns the authenticated or unauthenticated PC based on the frame type. Uses unauthenticated PC for fast C calls and profiler entry frames.  Uses authenticated PC otherwise.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The potentially unauthenticated program counter.\"\n                },\n                \"dependencies\": [\n                    \"InFastCCall\",\n                    \"is_profiler_entry_frame\",\n                    \"is_stack_exit_frame\",\n                    \"pc\",\n                    \"unauthenticated_pc\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address StackFrame::maybe_unauthenticated_pc() const {\n  if (!InFastCCall() && !is_profiler_entry_frame() && !is_stack_exit_frame()) {\n    // Here the pc_address() is on the stack and properly authenticated.\n    return pc();\n  } else {\n    // For fast C calls pc_address() points into IsolateData and the pc in there\n    // is unauthenticated. For the profiler, the pc_address of the first visited\n    // frame is also not written by a call instruction.\n    // For wasm stacks, the exit frame's pc is stored in the jump buffer\n    // unsigned.\n    return unauthenticated_pc(pc_address());\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ReadPC\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Authenticates the program counter (PC) read from the given address.\",\n                \"logic\": \"Uses pointer authentication to validate and potentially modify the PC.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"pc_address\",\n                        \"type\": \"Address*\",\n                        \"purpose\": \"The address of the program counter.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Address\",\n                    \"description\": \"The authenticated program counter.\"\n                },\n                \"dependencies\": [\n                    \"PointerAuthentication\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address StackFrame::ReadPC(Address* pc_address) {\n  return PointerAuthentication::AuthenticatePC(pc_address, kSystemPointerSize);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ResolveReturnAddressLocation\",\n                \"parent\": \"StackFrame\",\n                \"about\": \"Resolves the actual memory location of the return address, allowing for indirect return addresses.\",\n                \"logic\": \"If a return address location resolver is set, it uses the resolver to find the actual return address location; otherwise, it returns the original address.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"pc_address\",\n                        \"type\": \"Address*\",\n                        \"purpose\": \"The address of the program counter (potentially the return address).\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Address*\",\n                    \"description\": \"The resolved memory location of the return address.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\ninline Address* StackFrame::ResolveReturnAddressLocation(Address* pc_address) {\n  if (return_address_location_resolver_ == nullptr) {\n    return pc_address;\n  } else {\n    return reinterpret_cast<Address*>(return_address_location_resolver_(\n        reinterpret_cast<uintptr_t>(pc_address)));\n  }\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TypedFrame\",\n                \"parent\": \"TypedFrame\",\n                \"about\": \"Constructor for the TypedFrame class.\",\n                \"logic\": \"Initializes the TypedFrame by calling the CommonFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"CommonFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline TypedFrame::TypedFrame(StackFrameIteratorBase* iterator)\n    : CommonFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"CommonFrameWithJSLinkage\",\n                \"parent\": \"CommonFrameWithJSLinkage\",\n                \"about\": \"Constructor for the CommonFrameWithJSLinkage class.\",\n                \"logic\": \"Initializes the CommonFrameWithJSLinkage by calling the CommonFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"CommonFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline CommonFrameWithJSLinkage::CommonFrameWithJSLinkage(\n    StackFrameIteratorBase* iterator)\n    : CommonFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"TypedFrameWithJSLinkage\",\n                \"parent\": \"TypedFrameWithJSLinkage\",\n                \"about\": \"Constructor for the TypedFrameWithJSLinkage class.\",\n                \"logic\": \"Initializes the TypedFrameWithJSLinkage by calling the CommonFrameWithJSLinkage constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"CommonFrameWithJSLinkage\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline TypedFrameWithJSLinkage::TypedFrameWithJSLinkage(\n    StackFrameIteratorBase* iterator)\n    : CommonFrameWithJSLinkage(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"NativeFrame\",\n                \"parent\": \"NativeFrame\",\n                \"about\": \"Constructor for the NativeFrame class.\",\n                \"logic\": \"Initializes the NativeFrame by calling the TypedFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"TypedFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline NativeFrame::NativeFrame(StackFrameIteratorBase* iterator)\n    : TypedFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"EntryFrame\",\n                \"parent\": \"EntryFrame\",\n                \"about\": \"Constructor for the EntryFrame class.\",\n                \"logic\": \"Initializes the EntryFrame by calling the TypedFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"TypedFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline EntryFrame::EntryFrame(StackFrameIteratorBase* iterator)\n    : TypedFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ConstructEntryFrame\",\n                \"parent\": \"ConstructEntryFrame\",\n                \"about\": \"Constructor for the ConstructEntryFrame class.\",\n                \"logic\": \"Initializes the ConstructEntryFrame by calling the EntryFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"EntryFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline ConstructEntryFrame::ConstructEntryFrame(\n    StackFrameIteratorBase* iterator)\n    : EntryFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ExitFrame\",\n                \"parent\": \"ExitFrame\",\n                \"about\": \"Constructor for the ExitFrame class.\",\n                \"logic\": \"Initializes the ExitFrame by calling the TypedFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"TypedFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline ExitFrame::ExitFrame(StackFrameIteratorBase* iterator)\n    : TypedFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"BuiltinExitFrame\",\n                \"parent\": \"BuiltinExitFrame\",\n                \"about\": \"Constructor for the BuiltinExitFrame class.\",\n                \"logic\": \"Initializes the BuiltinExitFrame by calling the ExitFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"ExitFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline BuiltinExitFrame::BuiltinExitFrame(StackFrameIteratorBase* iterator)\n    : ExitFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"receiver_slot_object\",\n                \"parent\": \"BuiltinExitFrame\",\n                \"about\": \"Returns the receiver object from the BuiltinExitFrame.\",\n                \"logic\": \"Reads the receiver object's address from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \"The receiver object.\"\n                },\n                \"dependencies\": [\n                    \"BuiltinExitFrameConstants\",\n                    \"base::Memory\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Tagged<Object> BuiltinExitFrame::receiver_slot_object() const {\n  return Tagged<Object>(\n      base::Memory<Address>(fp() + BuiltinExitFrameConstants::kReceiverOffset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"argc_slot_object\",\n                \"parent\": \"BuiltinExitFrame\",\n                \"about\": \"Returns the argument count object from the BuiltinExitFrame.\",\n                \"logic\": \"Reads the argument count object's address from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \"The argument count object.\"\n                },\n                \"dependencies\": [\n                    \"BuiltinExitFrameConstants\",\n                    \"base::Memory\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Tagged<Object> BuiltinExitFrame::argc_slot_object() const {\n  return Tagged<Object>(\n      base::Memory<Address>(fp() + BuiltinExitFrameConstants::kArgcOffset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"target_slot_object\",\n                \"parent\": \"BuiltinExitFrame\",\n                \"about\": \"Returns the target object from the BuiltinExitFrame.\",\n                \"logic\": \"Reads the target object's address from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \"The target object.\"\n                },\n                \"dependencies\": [\n                    \"BuiltinExitFrameConstants\",\n                    \"base::Memory\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Tagged<Object> BuiltinExitFrame::target_slot_object() const {\n  return Tagged<Object>(\n      base::Memory<Address>(fp() + BuiltinExitFrameConstants::kTargetOffset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"new_target_slot_object\",\n                \"parent\": \"BuiltinExitFrame\",\n                \"about\": \"Returns the new target object from the BuiltinExitFrame.\",\n                \"logic\": \"Reads the new target object's address from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \"The new target object.\"\n                },\n                \"dependencies\": [\n                    \"BuiltinExitFrameConstants\",\n                    \"base::Memory\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Tagged<Object> BuiltinExitFrame::new_target_slot_object() const {\n  return Tagged<Object>(base::Memory<Address>(\n      fp() + BuiltinExitFrameConstants::kNewTargetOffset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ApiCallbackExitFrame\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Constructor for the ApiCallbackExitFrame class.\",\n                \"logic\": \"Initializes the ApiCallbackExitFrame by calling the ExitFrame constructor.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"iterator\",\n                        \"type\": \"StackFrameIteratorBase*\",\n                        \"purpose\": \"The iterator providing stack frame information.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"ExitFrame\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline ApiCallbackExitFrame::ApiCallbackExitFrame(\n    StackFrameIteratorBase* iterator)\n    : ExitFrame(iterator) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"context\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Returns the context object from the ApiCallbackExitFrame.\",\n                \"logic\": \"Reads the context object's address from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \"The context object.\"\n                },\n                \"dependencies\": [\n                    \"ApiCallbackExitFrameConstants\",\n                    \"base::Memory\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline Tagged<Object> ApiCallbackExitFrame::context() const {\n  return Tagged<Object>(base::Memory<Address>(\n      fp() + ApiCallbackExitFrameConstants::kContextOffset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"target_slot\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Returns the FullObjectSlot for the target object in the ApiCallbackExitFrame.\",\n                \"logic\": \"Calculates the memory address of the target object slot based on the frame pointer and a constant offset.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"FullObjectSlot\",\n                    \"description\": \"The FullObjectSlot for the target object.\"\n                },\n                \"dependencies\": [\n                    \"ApiCallbackExitFrameConstants\",\n                    \"FullObjectSlot\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\ninline FullObjectSlot ApiCallbackExitFrame::target_slot() const {\n  return FullObjectSlot(fp() + ApiCallbackExitFrameConstants::kTargetOffset);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"receiver\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Returns the receiver object from the ApiCallbackExitFrame.\",\n                \"logic\": \"Reads the receiver object's address from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \"The receiver object.\"\n                },\n                \"dependencies\": [\n                    \"ApiCallbackExitFrameConstants\",\n                    \"base::Memory\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nTagged<Object> ApiCallbackExitFrame::receiver() const {\n  return Tagged<Object>(base::Memory<Address>(\n      fp() + ApiCallbackExitFrameConstants::kReceiverOffset));\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"target\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Returns the target HeapObject from the ApiCallbackExitFrame.\",\n                \"logic\": \"Retrieves the target object slot, checks if it's a JSFunction or FunctionTemplateInfo, and casts it to a HeapObject.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"Tagged<HeapObject>\",\n                    \"description\": \"The target HeapObject.\"\n                },\n                \"dependencies\": [\n                    \"target_slot\",\n                    \"IsJSFunction\",\n                    \"IsFunctionTemplateInfo\",\n                    \"Cast\",\n                    \"HeapObject\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nTagged<HeapObject> ApiCallbackExitFrame::target() const {\n  Tagged<Object> function = *target_slot();\n  DCHECK(IsJSFunction(function) || IsFunctionTemplateInfo(function));\n  return Cast<HeapObject>(function);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"set_target\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Sets the target object in the ApiCallbackExitFrame.\",\n                \"logic\": \"Stores the provided HeapObject in the target slot, after verifying it's either a JSFunction or FunctionTemplateInfo.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"function\",\n                        \"type\": \"Tagged<HeapObject>\",\n                        \"purpose\": \"The HeapObject to set as the target.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"target_slot\",\n                    \"IsJSFunction\",\n                    \"IsFunctionTemplateInfo\",\n                    \"HeapObject\",\n                    \"Tagged<Object>\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nvoid ApiCallbackExitFrame::set_target(Tagged<HeapObject> function) const {\n  DCHECK(IsJSFunction(function) || IsFunctionTemplateInfo(function));\n  target_slot().store(function);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"ComputeParametersCount\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Computes the number of parameters passed to the API callback.\",\n                \"logic\": \"Reads the argument count from memory at a fixed offset from the frame pointer.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"int\",\n                    \"description\": \"The number of parameters.\"\n                },\n                \"dependencies\": [\n                    \"ApiCallbackExitFrameConstants\",\n                    \"base::Memory\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nint ApiCallbackExitFrame::ComputeParametersCount() const {\n  int argc = static_cast<int>(base::Memory<Address>(\n      fp() + ApiCallbackExitFrameConstants::kFCIArgcOffset));\n  DCHECK_GE(argc, 0);\n  return argc;\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetParameter\",\n                \"parent\": \"ApiCallbackExitFrame\",\n                \"about\": \"Retrieves a parameter from the ApiCallbackExitFrame at a given index.\",\n                \"logic\": \"Calculates the offset of the parameter based on the index and retrieves the parameter object from memory.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"i\",\n                        \"type\": \"int\",\n                        \"purpose\": \"The index of the parameter to retrieve.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Tagged<Object>\",\n                    \"description\": \""
}