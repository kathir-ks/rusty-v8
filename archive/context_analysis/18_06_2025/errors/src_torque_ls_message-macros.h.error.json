{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message-macros.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 28, column 107",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/ls/message-macros.h\",\n            \"file_name\": \"message-macros.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines macros for generating JSON accessors for Torque language server messages.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library string and size_t, though not explicitly via #include in this header.  The `CHECK` macro likely depends on other V8 headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            // Implicit dependencies: std::string, std::size_t, CHECK macro (from V8 codebase)\n        ]]></code>\n    </imports>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"JSON_STRING_ACCESSORS\",\n                \"about\": \"Defines inline getter and setter methods for string-valued JSON properties.\",\n                \"logic\": \"Expands to three inline functions: `name() const`, `set_##name(const std::string& str)`, and `has_##name() const`.  These functions access and modify the JSON object's properties using the provided `name`.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The name of the JSON property to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"N/A (macro)\"\n                },\n                \"dependencies\": [\n                    \"std::string\",\n                    \"JsonValue\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define JSON_STRING_ACCESSORS(name)                \\\n  inline const std::string& name() const {         \\\n    return object().at(#name).ToString();          \\\n  }                                                \\\n  inline void set_##name(const std::string& str) { \\\n    object()[#name] = JsonValue::From(str);        \\\n  }                                                \\\n  inline bool has_##name() const {                 \\\n    return object().find(#name) != object().end(); \\\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"JSON_BOOL_ACCESSORS\",\n                \"about\": \"Defines inline getter and setter methods for boolean-valued JSON properties.\",\n                \"logic\": \"Expands to two inline functions: `name() const` and `set_##name(bool b)`. These functions access and modify the JSON object's boolean properties using the provided `name`.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The name of the JSON property to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"N/A (macro)\"\n                },\n                \"dependencies\": [\n                    \"JsonValue\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define JSON_BOOL_ACCESSORS(name)                                  \\\n  inline bool name() const { return object().at(#name).ToBool(); } \\\n  inline void set_##name(bool b) { object()[#name] = JsonValue::From(b); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"JSON_INT_ACCESSORS\",\n                \"about\": \"Defines inline getter and setter methods for integer-valued JSON properties.\",\n                \"logic\": \"Expands to two inline functions: `name() const` and `set_##name(int n)`. These functions access and modify the JSON object's integer properties using the provided `name`. Note the cast to `double` when setting the value, as JSON numbers are often represented as doubles.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The name of the JSON property to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"N/A (macro)\"\n                },\n                \"dependencies\": [\n                    \"JsonValue\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define JSON_INT_ACCESSORS(name)                                    \\\n  inline int name() const { return object().at(#name).ToNumber(); } \\\n  inline void set_##name(int n) {                                   \\\n    object()[#name] = JsonValue::From(static_cast<double>(n));      \\\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"JSON_OBJECT_ACCESSORS\",\n                \"about\": \"Defines an inline getter method for JSON object properties with a specific type.\",\n                \"logic\": \"Expands to one inline function: `name()`. This function retrieves a JSON object property with the specified type using `GetObject<type>(#name)`.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"type\",\n                        \"type\": \"typename\",\n                        \"purpose\": \"The type of the JSON object property.\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The name of the JSON property to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"N/A (macro)\"\n                },\n                \"dependencies\": [\n                    \"GetObject\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define JSON_OBJECT_ACCESSORS(type, name) \\\n  inline type name() { return GetObject<type>(#name); }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"JSON_DYNAMIC_OBJECT_ACCESSORS\",\n                \"about\": \"Defines a template inline getter method for JSON object properties, allowing the type to be specified dynamically.\",\n                \"logic\": \"Expands to a template inline function `name()`. This function retrieves a JSON object property with a dynamically specified type T using `GetObject<T>(#name)`.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The name of the JSON property to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"N/A (macro)\"\n                },\n                \"dependencies\": [\n                    \"GetObject\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define JSON_DYNAMIC_OBJECT_ACCESSORS(name) \\\n  template <class T>                        \\\n  inline T name() {                         \\\n    return GetObject<T>(#name);             \\\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"macro\",\n                \"name\": \"JSON_ARRAY_OBJECT_ACCESSORS\",\n                \"about\": \"Defines inline methods for accessing and adding elements to JSON array properties where the array elements are objects.\",\n                \"logic\": \"Expands to three inline methods: `add_##name()`, `name##_size()`, and `name(size_t idx)`. `add_##name()` creates a new object element in the array, `name##_size()` returns the size of the array, and `name(size_t idx)` returns the object at a given index. Includes a CHECK to ensure the index is within bounds.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"type\",\n                        \"type\": \"typename\",\n                        \"purpose\": \"The type of the JSON array element.\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"string\",\n                        \"purpose\": \"The name of the JSON property to access.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"N/A (macro)\"\n                },\n                \"dependencies\": [\n                    \"JsonObject\",\n                    \"AddObjectElementToArrayProperty\",\n                    \"GetArrayProperty\",\n                    \"CHECK\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n#define JSON_ARRAY_OBJECT_ACCESSORS(type, name)                               \\\n  inline type add_##name() {                                                  \\\n    JsonObject& new_element = AddObjectElementToArrayProperty(#name);         \\\n    return type(new_element);                                                 \\\n  }                                                                           \\\n  inline std::size_t name##_size() { return GetArrayProperty(#name).size(); } \\\n  inline type name(size_t idx) {                                              \\\n    CHECK(idx < name##_size());                                               \\\n    return type(GetArrayProperty(#name)[idx].ToObject());                     \\\n  }\n        ]]></code>\n    </func>\n</file>\n```"
}