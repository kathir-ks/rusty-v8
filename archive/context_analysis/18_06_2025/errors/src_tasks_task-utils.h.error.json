{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/tasks/task-utils.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 93, column 51",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/tasks/task-utils.h\",\n            \"file_name\": \"task-utils.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Provides utility functions for creating cancelable tasks and idle tasks within the V8 engine.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library headers for functional programming (std::function) and smart pointers (std::unique_ptr, std::shared_ptr)\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <functional>\n#include <memory>\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CancelableIdleTask\",\n                \"about\": \"Forward declaration of the CancelableIdleTask class.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass CancelableIdleTask;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CancelableTask\",\n                \"about\": \"Forward declaration of the CancelableTask class.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass CancelableTask;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CancelableTaskManager\",\n                \"about\": \"Forward declaration of the CancelableTaskManager class.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass CancelableTaskManager;\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Forward declaration of the Isolate class.\",\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nclass Isolate;\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"MakeCancelableTask\",\n                \"about\": \"Creates a cancelable task using an Isolate.\",\n                \"logic\": \"Wraps a given function into a CancelableTask object, managed by a unique pointer.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Isolate*\",\n                        \"type\": \"Isolate*\",\n                        \"purpose\": \"A pointer to the isolate the task will be associated with.\"\n                    },\n                    {\n                        \"name\": \"std::function<void()>\",\n                        \"type\": \"std::function<void()>\",\n                        \"purpose\": \"The function to be executed by the task.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::unique_ptr<CancelableTask>\",\n                    \"description\": \"A unique pointer to the created CancelableTask.\"\n                },\n                \"dependencies\": [\n                    \"CancelableTask\",\n                    \"Isolate\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableTask> MakeCancelableTask(Isolate*,\n                                                   std::function<void()>);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"MakeCancelableTask\",\n                \"about\": \"Creates a cancelable task using a CancelableTaskManager.\",\n                \"logic\": \"Wraps a given function into a CancelableTask object, managed by the provided manager.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"CancelableTaskManager*\",\n                        \"type\": \"CancelableTaskManager*\",\n                        \"purpose\": \"A pointer to the task manager the task will be managed by.\"\n                    },\n                    {\n                        \"name\": \"std::function<void()>\",\n                        \"type\": \"std::function<void()>\",\n                        \"purpose\": \"The function to be executed by the task.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::unique_ptr<CancelableTask>\",\n                    \"description\": \"A unique pointer to the created CancelableTask.\"\n                },\n                \"dependencies\": [\n                    \"CancelableTask\",\n                    \"CancelableTaskManager\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableTask> MakeCancelableTask(CancelableTaskManager*,\n                                                   std::function<void()>);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"MakeCancelableIdleTask\",\n                \"about\": \"Creates a cancelable idle task using an Isolate.\",\n                \"logic\": \"Wraps a given function into a CancelableIdleTask object, managed by a unique pointer.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Isolate*\",\n                        \"type\": \"Isolate*\",\n                        \"purpose\": \"A pointer to the isolate the idle task will be associated with.\"\n                    },\n                    {\n                        \"name\": \"std::function<void(double)>\",\n                        \"type\": \"std::function<void(double)>\",\n                        \"purpose\": \"The function to be executed by the idle task.  Takes a double representing the time remaining.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::unique_ptr<CancelableIdleTask>\",\n                    \"description\": \"A unique pointer to the created CancelableIdleTask.\"\n                },\n                \"dependencies\": [\n                    \"CancelableIdleTask\",\n                    \"Isolate\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableIdleTask> MakeCancelableIdleTask(\n    Isolate*, std::function<void(double)>);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"MakeCancelableIdleTask\",\n                \"about\": \"Creates a cancelable idle task using a CancelableTaskManager.\",\n                \"logic\": \"Wraps a given function into a CancelableIdleTask object, managed by the provided manager.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"CancelableTaskManager*\",\n                        \"type\": \"CancelableTaskManager*\",\n                        \"purpose\": \"A pointer to the task manager the idle task will be managed by.\"\n                    },\n                    {\n                        \"name\": \"std::function<void(double)>\",\n                        \"type\": \"std::function<void(double)>\",\n                        \"purpose\": \"The function to be executed by the idle task. Takes a double representing the time remaining.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::unique_ptr<CancelableIdleTask>\",\n                    \"description\": \"A unique pointer to the created CancelableIdleTask.\"\n                },\n                \"dependencies\": [\n                    \"CancelableIdleTask\",\n                    \"CancelableTaskManager\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<CancelableIdleTask> MakeCancelableIdleTask(\n    CancelableTaskManager* manager, std::function<void(double)>);\n        ]]></code>\n    </func>\n</file>\n```"
}