{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-operator.cc",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/js-operator.cc\",\n            \"file_name\": \"js-operator.cc\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the JSOperatorBuilder class and related operator parameter structures for the V8 JavaScript compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Include necessary V8 headers and standard library headers.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"src/compiler/js-operator.h\"\n\n#include <limits>\n\n#include \"src/base/lazy-instance.h\"\n#include \"src/compiler/js-graph.h\"\n#include \"src/compiler/js-heap-broker.h\"\n#include \"src/compiler/node-matchers.h\"\n#include \"src/compiler/operator-properties.h\"\n#include \"src/compiler/operator.h\"\n#include \"src/handles/handles-inl.h\"\n#include \"src/objects/objects-inl.h\"\n#include \"src/objects/template-objects.h\"\n        ]]></code>\n    </imports>\n    <namespace>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"name\": \"v8::internal::compiler\",\n                \"purpose\": \"Encapsulates compiler-related classes and functions within the V8 namespace.\"\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\nnamespace internal {\nnamespace compiler {\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"name\": \"(anonymous)\",\n                \"purpose\": \"Contains file-static helper functions and variables.\"\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace {\n\n// Returns properties for the given binary op.\nconstexpr Operator::Properties BinopProperties(Operator::Opcode opcode) {\n  DCHECK(JSOperator::IsBinaryWithFeedback(opcode));\n  return opcode == IrOpcode::kJSStrictEqual ? Operator::kPure\n                                            : Operator::kNoProperties;\n}\n\ntemplate <class T>\nAddress AddressOrNull(OptionalRef<T> ref) {\n  if (!ref.has_value()) return kNullAddress;\n  return ref->object().address();\n}\n\n}  // namespace\n        ]]></code>\n    </namespace>\n    <namespace>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"name\": \"js_node_wrapper_utils\",\n                \"purpose\": \"Provides utilities for working with JSGraph nodes.\"\n            }\n        </metadata>\n        <code><![CDATA[\nnamespace js_node_wrapper_utils {\n\nTNode<Oddball> UndefinedConstant(JSGraph* jsgraph) {\n  return TNode<Oddball>::UncheckedCast(jsgraph->UndefinedConstant());\n}\n\n}  // namespace js_node_wrapper_utils\n        ]]></code>\n    </namespace>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"GetFeedbackCellRefChecked\",\n                \"parent\": \"JSCreateClosureNode\",\n                \"about\": \"Retrieves the FeedbackCellRef associated with a JSCreateClosureNode.\",\n                \"logic\": \"Asserts that the feedback cell is resolved and returns a reference to it.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"broker\",\n                        \"type\": \"JSHeapBroker*\",\n                        \"purpose\": \"The JSHeapBroker used to retrieve the FeedbackCellRef.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"FeedbackCellRef\",\n                    \"description\": \"The FeedbackCellRef associated with the node.\"\n                },\n                \"dependencies\": [\n                    \"FeedbackCellRef\",\n                    \"JSHeapBroker\",\n                    \"HeapObjectMatcher\",\n                    \"Cast\",\n                    \"FeedbackCell\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nFeedbackCellRef JSCreateClosureNode::GetFeedbackCellRefChecked(\n    JSHeapBroker* broker) const {\n  HeapObjectMatcher m(feedback_cell());\n  CHECK(m.HasResolvedValue());\n  return MakeRef(broker, Cast<FeedbackCell>(m.ResolvedValue()));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallFrequency to print its value.\",\n                \"logic\": \"If the CallFrequency is unknown, prints 'unknown'; otherwise, prints its value.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"f\",\n                        \"type\": \"CallFrequency const&\",\n                        \"purpose\": \"The CallFrequency to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, CallFrequency const& f) {\n  if (f.IsUnknown()) return os << \"unknown\";\n  return os << f.value();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for ConstructForwardVarargsParameters to print its arity and start index.\",\n                \"logic\": \"Prints the arity and start_index members of the ConstructForwardVarargsParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"ConstructForwardVarargsParameters const&\",\n                        \"purpose\": \"The ConstructForwardVarargsParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os,\n                         ConstructForwardVarargsParameters const& p) {\n  return os << p.arity() << \", \" << p.start_index();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ConstructForwardVarargsParametersOf\",\n                \"about\": \"Retrieves the ConstructForwardVarargsParameters from an Operator.\",\n                \"logic\": \"Asserts that the operator is a kJSConstructForwardVarargs operator and returns the associated parameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The Operator from which to retrieve the parameters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"ConstructForwardVarargsParameters const&\",\n                    \"description\": \"The ConstructForwardVarargsParameters associated with the operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"ConstructForwardVarargsParameters\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nConstructForwardVarargsParameters const& ConstructForwardVarargsParametersOf(\n    Operator const* op) {\n  DCHECK_EQ(IrOpcode::kJSConstructForwardVarargs, op->opcode());\n  return OpParameter<ConstructForwardVarargsParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Compares two ConstructParameters objects for equality.\",\n                \"logic\": \"Returns true if the arity, frequency, and feedback members of the two objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The left-hand side ConstructParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The right-hand side ConstructParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(ConstructParameters const& lhs,\n                ConstructParameters const& rhs) {\n  return lhs.arity() == rhs.arity() && lhs.frequency() == rhs.frequency() &&\n         lhs.feedback() == rhs.feedback();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"about\": \"Compares two ConstructParameters objects for inequality.\",\n                \"logic\": \"Returns the negation of the equality comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The left-hand side ConstructParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The right-hand side ConstructParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(ConstructParameters const& lhs,\n                ConstructParameters const& rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a ConstructParameters object.\",\n                \"logic\": \"Combines the hash values of the arity, frequency, and feedback members.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The ConstructParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\",\n                    \"FeedbackSource::Hash\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(ConstructParameters const& p) {\n  return base::hash_combine(p.arity(), p.frequency(),\n                            FeedbackSource::Hash()(p.feedback()));\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for ConstructParameters to print its arity and frequency.\",\n                \"logic\": \"Prints the arity and frequency members of the ConstructParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"ConstructParameters const&\",\n                        \"purpose\": \"The ConstructParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, ConstructParameters const& p) {\n  return os << p.arity() << \", \" << p.frequency();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ConstructParametersOf\",\n                \"about\": \"Retrieves the ConstructParameters from an Operator.\",\n                \"logic\": \"Asserts that the operator is a kJSConstruct, kJSConstructWithArrayLike, kJSConstructWithSpread or kJSConstructForwardAllArgs operator and returns the associated parameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The Operator from which to retrieve the parameters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"ConstructParameters const&\",\n                    \"description\": \"The ConstructParameters associated with the operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"ConstructParameters\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nConstructParameters const& ConstructParametersOf(Operator const* op) {\n  DCHECK(op->opcode() == IrOpcode::kJSConstruct ||\n         op->opcode() == IrOpcode::kJSConstructWithArrayLike ||\n         op->opcode() == IrOpcode::kJSConstructWithSpread ||\n         op->opcode() == IrOpcode::kJSConstructForwardAllArgs);\n  return OpParameter<ConstructParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallParameters to print its arity, frequency, convert mode, speculation mode and feedback relation.\",\n                \"logic\": \"Prints the arity, frequency, convert_mode, speculation_mode and feedback_relation members of the CallParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallParameters const&\",\n                        \"purpose\": \"The CallParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, CallParameters const& p) {\n  return os << p.arity() << \", \" << p.frequency() << \", \" << p.convert_mode()\n            << \", \" << p.speculation_mode() << \", \" << p.feedback_relation();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallParametersOf\",\n                \"about\": \"Retrieves the CallParameters from an Operator.\",\n                \"logic\": \"Asserts that the operator is a kJSCall, kJSCallWithArrayLike or kJSCallWithSpread operator and returns the associated parameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The Operator from which to retrieve the parameters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"CallParameters const&\",\n                    \"description\": \"The CallParameters associated with the operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"CallParameters\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nconst CallParameters& CallParametersOf(const Operator* op) {\n  DCHECK(op->opcode() == IrOpcode::kJSCall ||\n         op->opcode() == IrOpcode::kJSCallWithArrayLike ||\n         op->opcode() == IrOpcode::kJSCallWithSpread);\n  return OpParameter<CallParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallForwardVarargsParameters to print its arity and start index.\",\n                \"logic\": \"Prints the arity and start_index members of the CallForwardVarargsParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallForwardVarargsParameters const&\",\n                        \"purpose\": \"The CallForwardVarargsParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os,\n                         CallForwardVarargsParameters const& p) {\n  return os << p.arity() << \", \" << p.start_index();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallForwardVarargsParametersOf\",\n                \"about\": \"Retrieves the CallForwardVarargsParameters from an Operator.\",\n                \"logic\": \"Asserts that the operator is a kJSCallForwardVarargs operator and returns the associated parameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The Operator from which to retrieve the parameters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"CallForwardVarargsParameters const&\",\n                    \"description\": \"The CallForwardVarargsParameters associated with the operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"CallForwardVarargsParameters\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nCallForwardVarargsParameters const& CallForwardVarargsParametersOf(\n    Operator const* op) {\n  DCHECK_EQ(IrOpcode::kJSCallForwardVarargs, op->opcode());\n  return OpParameter<CallForwardVarargsParameters>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Compares two CallRuntimeParameters objects for equality.\",\n                \"logic\": \"Returns true if the id and arity members of the two objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The left-hand side CallRuntimeParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The right-hand side CallRuntimeParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(CallRuntimeParameters const& lhs,\n                CallRuntimeParameters const& rhs) {\n  return lhs.id() == rhs.id() && lhs.arity() == rhs.arity();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"about\": \"Compares two CallRuntimeParameters objects for inequality.\",\n                \"logic\": \"Returns the negation of the equality comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The left-hand side CallRuntimeParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The right-hand side CallRuntimeParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(CallRuntimeParameters const& lhs,\n                CallRuntimeParameters const& rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a CallRuntimeParameters object.\",\n                \"logic\": \"Combines the hash values of the id and arity members.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The CallRuntimeParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(CallRuntimeParameters const& p) {\n  return base::hash_combine(p.id(), p.arity());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for CallRuntimeParameters to print its id and arity.\",\n                \"logic\": \"Prints the id and arity members of the CallRuntimeParameters object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"p\",\n                        \"type\": \"CallRuntimeParameters const&\",\n                        \"purpose\": \"The CallRuntimeParameters object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, CallRuntimeParameters const& p) {\n  return os << p.id() << \", \" << p.arity();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"CallRuntimeParametersOf\",\n                \"about\": \"Retrieves the CallRuntimeParameters from an Operator.\",\n                \"logic\": \"Asserts that the operator is a kJSCallRuntime operator and returns the associated parameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The Operator from which to retrieve the parameters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"CallRuntimeParameters const&\",\n                    \"description\": \"The CallRuntimeParameters associated with the operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"CallRuntimeParameters\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nconst CallRuntimeParameters& CallRuntimeParametersOf(const Operator* op) {\n  DCHECK_EQ(IrOpcode::kJSCallRuntime, op->opcode());\n  return OpParameter<CallRuntimeParameters>(op);\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ContextAccess\",\n                \"about\": \"Represents access to a context variable.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"immutable_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Indicates whether the context variable is immutable.\"\n                    },\n                    {\n                        \"name\": \"depth_\",\n                        \"type\": \"uint16_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The depth of the context.\"\n                    },\n                    {\n                        \"name\": \"index_\",\n                        \"type\": \"uint32_t\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The index of the variable within the context.\"\n                    }\n                ],\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nContextAccess::ContextAccess(size_t depth, size_t index, bool immutable)\n    : immutable_(immutable),\n      depth_(static_cast<uint16_t>(depth)),\n      index_(static_cast<uint32_t>(index)) {\n  DCHECK(depth <= std::numeric_limits<uint16_t>::max());\n  DCHECK(index <= std::numeric_limits<uint32_t>::max());\n}\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Compares two ContextAccess objects for equality.\",\n                \"logic\": \"Returns true if the depth, index, and immutable members of the two objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"The left-hand side ContextAccess object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"The right-hand side ContextAccess object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(ContextAccess const& lhs, ContextAccess const& rhs) {\n  return lhs.depth() == rhs.depth() && lhs.index() == rhs.index() &&\n         lhs.immutable() == rhs.immutable();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"about\": \"Compares two ContextAccess objects for inequality.\",\n                \"logic\": \"Returns the negation of the equality comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"The left-hand side ContextAccess object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"The right-hand side ContextAccess object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(ContextAccess const& lhs, ContextAccess const& rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a ContextAccess object.\",\n                \"logic\": \"Combines the hash values of the depth, index, and immutable members.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"access\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"The ContextAccess object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the object.\"\n                },\n                \"dependencies\": [\n                    \"base::hash_combine\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nsize_t hash_value(ContextAccess const& access) {\n  return base::hash_combine(access.depth(), access.index(), access.immutable());\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator<<\",\n                \"about\": \"Overloads the << operator for ContextAccess to print its depth, index, and immutability.\",\n                \"logic\": \"Prints the depth, index, and immutable members of the ContextAccess object.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"os\",\n                        \"type\": \"std::ostream&\",\n                        \"purpose\": \"The output stream.\"\n                    },\n                    {\n                        \"name\": \"access\",\n                        \"type\": \"ContextAccess const&\",\n                        \"purpose\": \"The ContextAccess object to print.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"std::ostream&\",\n                    \"description\": \"The output stream.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, ContextAccess const& access) {\n  return os << access.depth() << \", \" << access.index() << \", \"\n            << access.immutable();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"ContextAccessOf\",\n                \"about\": \"Retrieves the ContextAccess from an Operator.\",\n                \"logic\": \"Asserts that the operator is a kJSLoadContext, kJSLoadScriptContext, kJSStoreContext, or kJSStoreScriptContext operator and returns the associated parameters.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"op\",\n                        \"type\": \"Operator const*\",\n                        \"purpose\": \"The Operator from which to retrieve the parameters.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"ContextAccess const&\",\n                    \"description\": \"The ContextAccess associated with the operator.\"\n                },\n                \"dependencies\": [\n                    \"OpParameter\",\n                    \"ContextAccess\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nContextAccess const& ContextAccessOf(Operator const* op) {\n  DCHECK(op->opcode() == IrOpcode::kJSLoadContext ||\n         op->opcode() == IrOpcode::kJSLoadScriptContext ||\n         op->opcode() == IrOpcode::kJSStoreContext ||\n         op->opcode() == IrOpcode::kJSStoreScriptContext);\n  return OpParameter<ContextAccess>(op);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator==\",\n                \"about\": \"Compares two CreateFunctionContextParameters objects for equality.\",\n                \"logic\": \"Returns true if the scope_info location, slot_count, and scope_type members of the two objects are equal.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"CreateFunctionContextParameters const&\",\n                        \"purpose\": \"The left-hand side CreateFunctionContextParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"CreateFunctionContextParameters const&\",\n                        \"purpose\": \"The right-hand side CreateFunctionContextParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator==(CreateFunctionContextParameters const& lhs,\n                CreateFunctionContextParameters const& rhs) {\n  return lhs.scope_info_.object().location() ==\n             rhs.scope_info_.object().location() &&\n         lhs.slot_count() == rhs.slot_count() &&\n         lhs.scope_type() == rhs.scope_type();\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"operator!=\",\n                \"about\": \"Compares two CreateFunctionContextParameters objects for inequality.\",\n                \"logic\": \"Returns the negation of the equality comparison.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"lhs\",\n                        \"type\": \"CreateFunctionContextParameters const&\",\n                        \"purpose\": \"The left-hand side CreateFunctionContextParameters object.\"\n                    },\n                    {\n                        \"name\": \"rhs\",\n                        \"type\": \"CreateFunctionContextParameters const&\",\n                        \"purpose\": \"The right-hand side CreateFunctionContextParameters object.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the objects are not equal, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool operator!=(CreateFunctionContextParameters const& lhs,\n                CreateFunctionContextParameters const& rhs) {\n  return !(lhs == rhs);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"hash_value\",\n                \"about\": \"Calculates the hash value for a CreateFunctionContextParameters object.\",\n                \"logic\": \"Combines the hash values of the scope_info location, slot_count, and scope_type members.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"parameters\",\n                        \"type\": \"CreateFunctionContextParameters const&\",\n                        \"purpose\": \"The CreateFunctionContextParameters object to hash.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"size_t\",\n                    \"description\": \"The hash value of the"
}