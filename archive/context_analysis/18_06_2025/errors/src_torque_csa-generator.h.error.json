{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/torque/csa-generator.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 34, column 51",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/torque/csa-generator.h\",\n        \"file_name\": \"csa-generator.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares the CSAGenerator class, which generates CSA (CodeStubAssembler) code from a Control Flow Graph (CFG) in Torque.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for optional types, Torque code generation, and standard output stream.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <optional>\n\n#include \"src/torque/torque-code-generator.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"CSAGenerator\",\n            \"extends\": \"TorqueCodeGenerator\",\n            \"about\": \"Generates CSA (CodeStubAssembler) code from a Control Flow Graph (CFG).\",\n            \"attributes\": [\n                {\n                    \"name\": \"linkage_\",\n                    \"type\": \"std::optional<Builtin::Kind>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Specifies the linkage type of the generated code (e.g., Builtin).  Optional, and can be empty if not a builtin.\"\n                }\n            ],\n            \"dependencies\": [\n                \"ControlFlowGraph\",\n                \"TorqueCodeGenerator\",\n                \"Builtin::Kind\",\n                \"SourcePosition\",\n                \"Block\",\n                \"Type\",\n                \"TypeVector\",\n                \"Stack\",\n                \"VisitResult\",\n                \"DefinitionLocation\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass CSAGenerator : public TorqueCodeGenerator {\n public:\n  CSAGenerator(const ControlFlowGraph& cfg, std::ostream& out,\n               std::optional<Builtin::Kind> linkage = std::nullopt)\n      : TorqueCodeGenerator(cfg, out), linkage_(linkage) {}\n  std::optional<Stack<std::string>> EmitGraph(Stack<std::string> parameters);\n\n  static constexpr const char* ARGUMENTS_VARIABLE_STRING = \"arguments\";\n\n  static void EmitCSAValue(VisitResult result, const Stack<std::string>& values,\n                           std::ostream& out);\n\n private:\n  std::optional<Builtin::Kind> linkage_;\n\n  void EmitSourcePosition(SourcePosition pos,\n                          bool always_emit = false) override;\n\n  std::string PreCallableExceptionPreparation(\n      std::optional<Block*> catch_block);\n  void PostCallableExceptionPreparation(\n      const std::string& catch_name, const Type* return_type,\n      std::optional<Block*> catch_block, Stack<std::string>* stack,\n      const std::optional<DefinitionLocation>& exception_object_definition);\n\n  std::vector<std::string> ProcessArgumentsCommon(\n      const TypeVector& parameter_types,\n      std::vector<std::string> constexpr_arguments, Stack<std::string>* stack);\n\n  Stack<std::string> EmitBlock(const Block* block);\n#define EMIT_INSTRUCTION_DECLARATION(T)                                 \\\n  void EmitInstruction(const T& instruction, Stack<std::string>* stack) \\\n      override;\n  TORQUE_BACKEND_DEPENDENT_INSTRUCTION_LIST(EMIT_INSTRUCTION_DECLARATION)\n#undef EMIT_INSTRUCTION_DECLARATION\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TorqueCodeGenerator\",\n                \"about\": \"Base class for Torque code generators.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TorqueCodeGenerator {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"ControlFlowGraph\",\n                \"about\": \"Represents the control flow graph of a Torque procedure.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class ControlFlowGraph {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"Builtin::Kind\",\n                \"about\": \"Represents the kind of a built-in function.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                namespace Builtin { enum Kind {}; }\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SourcePosition\",\n                \"about\": \"Represents a position in the source code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class SourcePosition {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Block\",\n                \"about\": \"Represents a basic block in the control flow graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Block {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Type\",\n                \"about\": \"Represents a type in the Torque type system.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Type {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TypeVector\",\n                \"about\": \"Represents a vector of types.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TypeVector {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Stack\",\n                \"about\": \"Represents a stack of strings.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Stack {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"VisitResult\",\n                \"about\": \"Represents the result of visiting a node in the control flow graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class VisitResult {};\n            ]]></code>\n        </class>\n         <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"DefinitionLocation\",\n                \"about\": \"Represents the location of a definition in the source code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                struct DefinitionLocation {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}