{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/logging/code-events.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 123, column 61",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/logging/code-events.h\",\n            \"file_name\": \"code-events.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines interfaces and classes for logging code events within the V8 JavaScript engine, enabling tools to track code creation, movement, optimization, and deoptimization.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes standard library and V8-specific headers for data structures, mutexes, and object representations.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include <vector>\n\n#include \"src/base/platform/mutex.h\"\n#include \"src/base/vector.h\"\n#include \"src/common/globals.h\"\n#include \"src/objects/bytecode-array.h\"\n#include \"src/objects/code.h\"\n#include \"src/objects/instruction-stream.h\"\n#include \"src/objects/name.h\"\n#include \"src/objects/shared-function-info.h\"\n#include \"src/objects/string.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"LogEventListener\",\n                \"about\": \"Abstract base class for listeners that receive code events. Defines virtual methods for handling various code-related events.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"AbstractCode\",\n                    \"Name\",\n                    \"SharedFunctionInfo\",\n                    \"String\",\n                    \"wasm::WasmCode\",\n                    \"wasm::WasmName\",\n                    \"InstructionStream\",\n                    \"BytecodeArray\",\n                    \"Code\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass LogEventListener {\n public:\n#define DECLARE_ENUM(enum_item, _) enum_item,\n  enum class Event : uint8_t { LOG_EVENT_LIST(DECLARE_ENUM) kLength };\n  enum class CodeTag : uint8_t { CODE_TYPE_LIST(DECLARE_ENUM) kLength };\n#undef DECLARE_ENUM\n\n  virtual ~LogEventListener() = default;\n\n  virtual void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                               const char* name) = 0;\n  virtual void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                               DirectHandle<Name> name) = 0;\n  virtual void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                               DirectHandle<SharedFunctionInfo> shared,\n                               DirectHandle<Name> script_name) = 0;\n  virtual void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                               DirectHandle<SharedFunctionInfo> shared,\n                               DirectHandle<Name> script_name, int line,\n                               int column) = 0;\n#if V8_ENABLE_WEBASSEMBLY\n  virtual void CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                               wasm::WasmName name, const char* source_url,\n                               int code_offset, int script_id) = 0;\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  virtual void CallbackEvent(DirectHandle<Name> name, Address entry_point) = 0;\n  virtual void GetterCallbackEvent(DirectHandle<Name> name,\n                                   Address entry_point) = 0;\n  virtual void SetterCallbackEvent(DirectHandle<Name> name,\n                                   Address entry_point) = 0;\n  virtual void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                                     DirectHandle<String> source,\n                                     RegExpFlags flags) = 0;\n  // Not handlified as this happens during GC. No allocation allowed.\n  virtual void CodeMoveEvent(Tagged<InstructionStream> from,\n                             Tagged<InstructionStream> to) = 0;\n  virtual void BytecodeMoveEvent(Tagged<BytecodeArray> from,\n                                 Tagged<BytecodeArray> to) = 0;\n  virtual void SharedFunctionInfoMoveEvent(Address from, Address to) = 0;\n  virtual void NativeContextMoveEvent(Address from, Address to) = 0;\n  virtual void CodeMovingGCEvent() = 0;\n  virtual void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                                   DirectHandle<SharedFunctionInfo> shared) = 0;\n  virtual void CodeDeoptEvent(DirectHandle<Code> code, DeoptimizeKind kind,\n                              Address pc, int fp_to_sp_delta) = 0;\n  // These events can happen when 1. an assumption made by optimized code fails\n  // or 2. a weakly embedded object dies.\n  virtual void CodeDependencyChangeEvent(\n      DirectHandle<Code> code, DirectHandle<SharedFunctionInfo> shared,\n      const char* reason) = 0;\n  // Called during GC shortly after any weak references to code objects are\n  // cleared.\n  virtual void WeakCodeClearEvent() = 0;\n\n  virtual bool is_listening_to_code_events() { return false; }\n  virtual bool allows_code_compaction() { return true; }\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Logger\",\n                \"about\": \"Dispatches code events to a set of registered LogEventListener objects. Manages a list of listeners and provides methods for adding and removing them.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"listeners_\",\n                        \"type\": \"std::vector<LogEventListener*>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the registered event listeners.\"\n                    },\n                    {\n                        \"name\": \"mutex_\",\n                        \"type\": \"base::RecursiveMutex\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Protects access to the listeners_ vector.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"LogEventListener\",\n                    \"AbstractCode\",\n                    \"Name\",\n                    \"SharedFunctionInfo\",\n                    \"String\",\n                    \"wasm::WasmCode\",\n                    \"wasm::WasmName\",\n                    \"InstructionStream\",\n                    \"BytecodeArray\",\n                    \"Code\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n// Dispatches events to a set of registered listeners.\nclass Logger {\n public:\n  using Event = LogEventListener::Event;\n  using CodeTag = LogEventListener::CodeTag;\n\n  Logger() = default;\n  Logger(const Logger&) = delete;\n  Logger& operator=(const Logger&) = delete;\n\n  bool AddListener(LogEventListener* listener) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    auto position = std::find(listeners_.begin(), listeners_.end(), listener);\n    if (position != listeners_.end()) return false;\n    // Add the listener to the end and update the element\n    listeners_.push_back(listener);\n    return true;\n  }\n\n  bool RemoveListener(LogEventListener* listener) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    auto position = std::find(listeners_.begin(), listeners_.end(), listener);\n    if (position == listeners_.end()) return false;\n    listeners_.erase(position);\n    return true;\n  }\n\n  bool is_listening_to_code_events() {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      if (listener->is_listening_to_code_events()) return true;\n    }\n    return false;\n  }\n\n  bool allows_code_compaction() {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      if (!listener->allows_code_compaction()) return false;\n    }\n    return true;\n  }\n\n  void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                       const char* comment) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeCreateEvent(tag, code, comment);\n    }\n  }\n\n  void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                       DirectHandle<Name> name) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeCreateEvent(tag, code, name);\n    }\n  }\n\n  void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                       DirectHandle<SharedFunctionInfo> shared,\n                       DirectHandle<Name> name) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeCreateEvent(tag, code, shared, name);\n    }\n  }\n\n  void CodeCreateEvent(CodeTag tag, DirectHandle<AbstractCode> code,\n                       DirectHandle<SharedFunctionInfo> shared,\n                       DirectHandle<Name> source, int line, int column) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeCreateEvent(tag, code, shared, source, line, column);\n    }\n  }\n\n#if V8_ENABLE_WEBASSEMBLY\n  void CodeCreateEvent(CodeTag tag, const wasm::WasmCode* code,\n                       wasm::WasmName name, const char* source_url,\n                       int code_offset, int script_id) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeCreateEvent(tag, code, name, source_url, code_offset,\n                                script_id);\n    }\n  }\n#endif  // V8_ENABLE_WEBASSEMBLY\n\n  void CallbackEvent(DirectHandle<Name> name, Address entry_point) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CallbackEvent(name, entry_point);\n    }\n  }\n\n  void GetterCallbackEvent(DirectHandle<Name> name, Address entry_point) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->GetterCallbackEvent(name, entry_point);\n    }\n  }\n\n  void SetterCallbackEvent(DirectHandle<Name> name, Address entry_point) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->SetterCallbackEvent(name, entry_point);\n    }\n  }\n\n  void RegExpCodeCreateEvent(DirectHandle<AbstractCode> code,\n                             DirectHandle<String> source, RegExpFlags flags) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->RegExpCodeCreateEvent(code, source, flags);\n    }\n  }\n\n  void CodeMoveEvent(Tagged<InstructionStream> from,\n                     Tagged<InstructionStream> to) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeMoveEvent(from, to);\n    }\n  }\n\n  void BytecodeMoveEvent(Tagged<BytecodeArray> from, Tagged<BytecodeArray> to) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->BytecodeMoveEvent(from, to);\n    }\n  }\n\n  void SharedFunctionInfoMoveEvent(Address from, Address to) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->SharedFunctionInfoMoveEvent(from, to);\n    }\n  }\n\n  void NativeContextMoveEvent(Address from, Address to) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->NativeContextMoveEvent(from, to);\n    }\n  }\n\n  void CodeMovingGCEvent() {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeMovingGCEvent();\n    }\n  }\n\n  void CodeDisableOptEvent(DirectHandle<AbstractCode> code,\n                           DirectHandle<SharedFunctionInfo> shared) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeDisableOptEvent(code, shared);\n    }\n  }\n\n  void CodeDeoptEvent(DirectHandle<Code> code, DeoptimizeKind kind, Address pc,\n                      int fp_to_sp_delta) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeDeoptEvent(code, kind, pc, fp_to_sp_delta);\n    }\n  }\n\n  void CodeDependencyChangeEvent(DirectHandle<Code> code,\n                                 DirectHandle<SharedFunctionInfo> sfi,\n                                 const char* reason) {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->CodeDependencyChangeEvent(code, sfi, reason);\n    }\n  }\n\n  void WeakCodeClearEvent() {\n    base::RecursiveMutexGuard guard(&mutex_);\n    for (auto listener : listeners_) {\n      listener->WeakCodeClearEvent();\n    }\n  }\n\n private:\n  std::vector<LogEventListener*> listeners_;\n  base::RecursiveMutex mutex_;\n};\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"AbstractCode\",\n                    \"about\": \"Represents an abstract code object in V8.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass AbstractCode {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Name\",\n                    \"about\": \"Represents a name (identifier) in V8.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Name {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SharedFunctionInfo\",\n                    \"about\": \"Contains information shared between multiple instances of the same function.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass SharedFunctionInfo {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"String\",\n                    \"about\": \"Represents a string object in V8.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass String {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"InstructionStream\",\n                    \"about\": \"Represents a stream of instructions.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass InstructionStream {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"BytecodeArray\",\n                    \"about\": \"Represents an array of bytecode instructions.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass BytecodeArray {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Code\",\n                    \"about\": \"Represents a compiled code object in V8.\"\n                }\n            </metadata>\n            <code><![CDATA[\nclass Code {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}