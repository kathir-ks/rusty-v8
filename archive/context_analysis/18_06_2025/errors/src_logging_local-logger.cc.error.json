{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/logging/local-logger.cc",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 151, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/logging/local-logger.cc\",\n        \"file_name\": \"local-logger.cc\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Provides a local logger that proxies calls to the global V8 file logger. It's designed to be used from the main thread and simplifies logging operations.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for local logger functionality and V8 specific classes.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/logging/local-logger.h\"\n\n#include \"src/execution/isolate.h\"\n#include \"src/objects/map.h\"\n        ]]></code>\n    </imports>\n\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"LocalLogger\",\n            \"about\": \"A logger that proxies calls to the global V8 file logger. Designed for main thread usage.\",\n            \"attributes\": [\n                {\n                    \"name\": \"v8_file_logger_\",\n                    \"type\": \"V8FileLogger*\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Pointer to the global V8 file logger.\"\n                },\n                {\n                    \"name\": \"is_logging_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates if logging is enabled.\"\n                },\n                {\n                    \"name\": \"is_listening_to_code_events_\",\n                    \"type\": \"bool\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Indicates if the logger is listening to code events.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Isolate\",\n                \"V8FileLogger\",\n                \"Script\",\n                \"Map\",\n                \"ScriptEventType\",\n                \"TrustedByteArray\",\n                \"JitCodeEvent\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nnamespace v8 {\nnamespace internal {\n\n// TODO(leszeks): Add support for logging from off-thread.\nclass LocalLogger {\n public:\n  LocalLogger(Isolate* isolate);\n\n  void ScriptDetails(Tagged<Script> script);\n  void ScriptEvent(ScriptEventType type, int script_id);\n  void CodeLinePosInfoRecordEvent(Address code_start, Tagged<TrustedByteArray> source_position_table,\n                                  JitCodeEvent::CodeType code_type);\n\n  void MapCreate(Tagged<Map> map);\n\n  void MapDetails(Tagged<Map> map);\n\n private:\n  V8FileLogger* v8_file_logger_;\n  bool is_logging_;\n  bool is_listening_to_code_events_;\n};\n\n}  // namespace internal\n}  // namespace v8\n        ]]></code>\n    </class>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"constructor\",\n            \"name\": \"LocalLogger\",\n            \"parent\": \"LocalLogger\",\n            \"about\": \"Constructor for the LocalLogger class.\",\n            \"logic\": \"Initializes the LocalLogger by obtaining the global V8 file logger from the isolate, and copying its logging and code event listening status.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"Pointer to the V8 isolate.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"V8FileLogger\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nLocalLogger::LocalLogger(Isolate* isolate)\n    : v8_file_logger_(isolate->v8_file_logger()),\n      is_logging_(v8_file_logger_->is_logging()),\n      is_listening_to_code_events_(\n          v8_file_logger_->is_listening_to_code_events()) {}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ScriptDetails\",\n            \"parent\": \"LocalLogger\",\n            \"about\": \"Logs script details using the global V8 file logger.\",\n            \"logic\": \"Proxies the call to the ScriptDetails method of the global V8 file logger.\",\n            \"parameters\": [\n                {\n                    \"name\": \"script\",\n                    \"type\": \"Tagged<Script>\",\n                    \"purpose\": \"The script to log details for.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Script\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid LocalLogger::ScriptDetails(Tagged<Script> script) {\n  v8_file_logger_->ScriptDetails(script);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"ScriptEvent\",\n            \"parent\": \"LocalLogger\",\n            \"about\": \"Logs a script event using the global V8 file logger.\",\n            \"logic\": \"Proxies the call to the ScriptEvent method of the global V8 file logger.\",\n            \"parameters\": [\n                {\n                    \"name\": \"type\",\n                    \"type\": \"ScriptEventType\",\n                    \"purpose\": \"The type of script event.\"\n                },\n                {\n                    \"name\": \"script_id\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The ID of the script.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"ScriptEventType\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid LocalLogger::ScriptEvent(ScriptEventType type, int script_id) {\n  v8_file_logger_->ScriptEvent(type, script_id);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"CodeLinePosInfoRecordEvent\",\n            \"parent\": \"LocalLogger\",\n            \"about\": \"Logs code line position information record event using the global V8 file logger.\",\n            \"logic\": \"Proxies the call to the CodeLinePosInfoRecordEvent method of the global V8 file logger.\",\n            \"parameters\": [\n                {\n                    \"name\": \"code_start\",\n                    \"type\": \"Address\",\n                    \"purpose\": \"The starting address of the code.\"\n                },\n                {\n                    \"name\": \"source_position_table\",\n                    \"type\": \"Tagged<TrustedByteArray>\",\n                    \"purpose\": \"The source position table.\"\n                },\n                {\n                    \"name\": \"code_type\",\n                    \"type\": \"JitCodeEvent::CodeType\",\n                    \"purpose\": \"The type of code.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Address\",\n                \"TrustedByteArray\",\n                \"JitCodeEvent\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid LocalLogger::CodeLinePosInfoRecordEvent(\n    Address code_start, Tagged<TrustedByteArray> source_position_table,\n    JitCodeEvent::CodeType code_type) {\n  v8_file_logger_->CodeLinePosInfoRecordEvent(code_start, source_position_table,\n                                              code_type);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"MapCreate\",\n            \"parent\": \"LocalLogger\",\n            \"about\": \"Logs a map creation event using the global V8 file logger.\",\n            \"logic\": \"Proxies the call to the MapCreate method of the global V8 file logger.\",\n            \"parameters\": [\n                {\n                    \"name\": \"map\",\n                    \"type\": \"Tagged<Map>\",\n                    \"purpose\": \"The map that was created.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Map\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid LocalLogger::MapCreate(Tagged<Map> map) {\n  v8_file_logger_->MapCreate(map);\n}\n        ]]></code>\n    </func>\n\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"method\",\n            \"name\": \"MapDetails\",\n            \"parent\": \"LocalLogger\",\n            \"about\": \"Logs map details using the global V8 file logger.\",\n            \"logic\": \"Proxies the call to the MapDetails method of the global V8 file logger.\",\n            \"parameters\": [\n                {\n                    \"name\": \"map\",\n                    \"type\": \"Tagged<Map>\",\n                    \"purpose\": \"The map to log details for.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"Map\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid LocalLogger::MapDetails(Tagged<Map> map) {\n  v8_file_logger_->MapDetails(map);\n}\n        ]]></code>\n    </func>\n\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Isolate {\n                 public:\n                  V8FileLogger* v8_file_logger();\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"V8FileLogger\",\n                \"about\": \"The global V8 file logger, responsible for handling logging events.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class V8FileLogger {\n                 public:\n                  bool is_logging();\n                  bool is_listening_to_code_events();\n                  void ScriptDetails(Tagged<Script> script);\n                  void ScriptEvent(ScriptEventType type, int script_id);\n                  void CodeLinePosInfoRecordEvent(Address code_start, Tagged<TrustedByteArray> source_position_table, JitCodeEvent::CodeType code_type);\n                  void MapCreate(Tagged<Map> map);\n                  void MapDetails(Tagged<Map> map);\n                };\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Script\",\n                \"about\": \"Represents a JavaScript script.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Script {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Map\",\n                \"about\": \"Represents the map (hidden class) of an object.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class Map {};\n            ]]></code>\n        </class>\n        <enum>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"enum\",\n                \"name\": \"ScriptEventType\",\n                \"about\": \"Represents the type of a script event.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                enum ScriptEventType {};\n            ]]></code>\n        </enum>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TrustedByteArray\",\n                \"about\": \"Represents a trusted byte array.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class TrustedByteArray {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"JitCodeEvent\",\n                \"about\": \"Represents a JIT code event.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                class JitCodeEvent {\n                 public:\n                  enum CodeType {};\n                };\n            ]]></code>\n        </class>\n        <type>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"type\",\n                \"name\": \"Address\",\n                \"about\": \"Represents a memory address.\"\n            }\n            </metadata>\n            <code><![CDATA[\n                typedef uintptr_t Address;\n            ]]></code>\n        </type>\n    </dependencies>\n</file>\n```"
}