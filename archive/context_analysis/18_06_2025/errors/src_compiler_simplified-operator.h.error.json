{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/simplified-operator.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 86, column 50",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/simplified-operator.h\",\n        \"file_name\": \"simplified-operator.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines the SimplifiedOperatorBuilder class and related structures for creating simplified node operators in the V8 compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers for standard library, base utilities, codegen, common compiler components, handles, objects, and webassembly (if enabled).\"\n        }\n        </metadata>\n        <code><![CDATA[\n            #include <iosfwd>\n\n            #include \"src/base/compiler-specific.h\"\n            #include \"src/base/container-utils.h\"\n            #include \"src/codegen/machine-type.h\"\n            #include \"src/codegen/tnode.h\"\n            #include \"src/common/globals.h\"\n            #include \"src/compiler/common-operator.h\"\n            #include \"src/compiler/feedback-source.h\"\n            #include \"src/compiler/globals.h\"\n            #include \"src/compiler/node-properties.h\"\n            #include \"src/compiler/operator.h\"\n            #include \"src/compiler/turbofan-types.h\"\n            #include \"src/compiler/write-barrier-kind.h\"\n            #include \"src/deoptimizer/deoptimize-reason.h\"\n            #include \"src/handles/handles.h\"\n            #include \"src/handles/maybe-handles.h\"\n            #include \"src/objects/objects.h\"\n\n            #ifdef V8_ENABLE_WEBASSEMBLY\n            #include \"src/compiler/wasm-compiler-definitions.h\"\n            #endif\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"ConstFieldInfo\",\n            \"about\": \"Stores information about constant fields, including the map that introduced the field.\",\n            \"attributes\": [\n                {\n                    \"name\": \"owner_map\",\n                    \"type\": \"OptionalMapRef\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The map that introduced the const field, if any.  Null if field is mutable.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct ConstFieldInfo {\n            // the map that introduced the const field, if any. An access is considered\n            // mutable iff the handle is null.\n            OptionalMapRef owner_map;\n\n            ConstFieldInfo() : owner_map(OptionalMapRef()) {}\n            explicit ConstFieldInfo(MapRef owner_map) : owner_map(owner_map) {}\n\n            bool IsConst() const { return owner_map.has_value(); }\n\n            // No const field owner, i.e., a mutable field\n            static ConstFieldInfo None() { return ConstFieldInfo(); }\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for ConstFieldInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"ConstFieldInfo const&\",\n                    \"purpose\": \"Left-hand side operand\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"ConstFieldInfo const&\",\n                    \"purpose\": \"Right-hand side operand\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the ConstFieldInfo objects are equal, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE bool operator==(ConstFieldInfo const&, ConstFieldInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates the hash value for ConstFieldInfo objects.\",\n            \"parameters\": [\n                {\n                    \"name\": \"field_info\",\n                    \"type\": \"ConstFieldInfo const&\",\n                    \"purpose\": \"The ConstFieldInfo to hash\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The calculated hash value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            size_t hash_value(ConstFieldInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the << operator for ConstFieldInfo, enabling printing to an ostream.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream\"\n                },\n                {\n                    \"name\": \"field_info\",\n                    \"type\": \"ConstFieldInfo const&\",\n                    \"purpose\": \"The ConstFieldInfo to print\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&,\n                                                       ConstFieldInfo const&);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"WasmFieldInfo\",\n            \"about\": \"Stores information about Wasm fields.\",\n            \"attributes\": [\n                {\n                    \"name\": \"type\",\n                    \"type\": \"const wasm::StructType*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The type of the Wasm struct.\"\n                },\n                {\n                    \"name\": \"field_index\",\n                    \"type\": \"int\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The index of the field in the struct.\"\n                },\n                {\n                    \"name\": \"is_signed\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates whether the field is signed.\"\n                },\n                {\n                    \"name\": \"null_check\",\n                    \"type\": \"CheckForNull\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates whether a null check is required.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            #if V8_ENABLE_WEBASSEMBLY\n            struct WasmFieldInfo {\n            const wasm::StructType* type;\n            int field_index;\n            bool is_signed;\n            CheckForNull null_check;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for WasmFieldInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"WasmFieldInfo const&\",\n                    \"purpose\": \"Left-hand side operand\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"WasmFieldInfo const&\",\n                    \"purpose\": \"Right-hand side operand\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the WasmFieldInfo objects are equal, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE bool operator==(WasmFieldInfo const&, WasmFieldInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates the hash value for WasmFieldInfo objects.\",\n            \"parameters\": [\n                {\n                    \"name\": \"field_info\",\n                    \"type\": \"WasmFieldInfo const&\",\n                    \"purpose\": \"The WasmFieldInfo to hash\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The calculated hash value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            size_t hash_value(WasmFieldInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the << operator for WasmFieldInfo, enabling printing to an ostream.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream\"\n                },\n                {\n                    \"name\": \"field_info\",\n                    \"type\": \"WasmFieldInfo const&\",\n                    \"purpose\": \"The WasmFieldInfo to print\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, WasmFieldInfo const&);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"WasmElementInfo\",\n            \"about\": \"Stores information about Wasm element accesses.\",\n            \"attributes\": [\n                {\n                    \"name\": \"type\",\n                    \"type\": \"const wasm::ArrayType*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The type of the Wasm array.\"\n                },\n                {\n                    \"name\": \"is_signed\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates whether the element is signed.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            struct WasmElementInfo {\n            const wasm::ArrayType* type;\n            bool is_signed;\n            };\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator==\",\n            \"about\": \"Equality operator for WasmElementInfo.\",\n            \"parameters\": [\n                {\n                    \"name\": \"a\",\n                    \"type\": \"WasmElementInfo const&\",\n                    \"purpose\": \"Left-hand side operand\"\n                },\n                {\n                    \"name\": \"b\",\n                    \"type\": \"WasmElementInfo const&\",\n                    \"purpose\": \"Right-hand side operand\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"bool\",\n                \"description\": \"True if the WasmElementInfo objects are equal, false otherwise.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE bool operator==(WasmElementInfo const&,\n                                            WasmElementInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"hash_value\",\n            \"about\": \"Calculates the hash value for WasmElementInfo objects.\",\n            \"parameters\": [\n                {\n                    \"name\": \"element_info\",\n                    \"type\": \"WasmElementInfo const&\",\n                    \"purpose\": \"The WasmElementInfo to hash\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"size_t\",\n                \"description\": \"The calculated hash value.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            size_t hash_value(WasmElementInfo const&);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"about\": \"Overloads the << operator for WasmElementInfo, enabling printing to an ostream.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream\"\n                },\n                {\n                    \"name\": \"element_info\",\n                    \"type\": \"WasmElementInfo const&\",\n                    \"purpose\": \"The WasmElementInfo to print\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\n            V8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&,\n                                                        WasmElementInfo const&);\n        ]]></code>\n    </func>\n    </file>\n    <file>\n        <metadata>\n            {\n                \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/simplified-operator.h\",\n                \"file_name\": \"simplified-operator.h\",\n                \"language\": \"cpp\",\n                \"purpose\": \"Defines the SimplifiedOperatorBuilder class and related structures for creating simplified node operators in the V8 compiler. (Part 2)\"\n            }\n        </metadata>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"struct\",\n                    \"name\": \"FieldAccess\",\n                    \"about\": \"Describes access to fields of heap objects.\",\n                    \"attributes\": [\n                        {\n                            \"name\": \"base_is_tagged\",\n                            \"type\": \"BaseTaggedness\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Specifies whether the base pointer is tagged.\"\n                        },\n                        {\n                            \"name\": \"offset\",\n                            \"type\": \"int\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Offset of the field, without tag.\"\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"MaybeHandle<Name>\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Debugging information, name of the field.\"\n                        },\n                        {\n                            \"name\": \"map\",\n                            \"type\": \"OptionalMapRef\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Map of the field value (if known).\"\n                        },\n                        {\n                            \"name\": \"type\",\n                            \"type\": \"Type\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Type of the field.\"\n                        },\n                        {\n                            \"name\": \"machine_type\",\n                            \"type\": \"MachineType\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Machine type of the field.\"\n                        },\n                        {\n                            \"name\": \"write_barrier_kind\",\n                            \"type\": \"WriteBarrierKind\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Write barrier hint.\"\n                        },\n                        {\n                            \"name\": \"creator_mnemonic\",\n                            \"type\": \"const char*\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Name of factory/creator method (debugging).\"\n                        },\n                        {\n                            \"name\": \"const_field_info\",\n                            \"type\": \"ConstFieldInfo\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Constness of the access and field owner map.\"\n                        },\n                        {\n                            \"name\": \"is_store_in_literal\",\n                            \"type\": \"bool\",\n                            \"access\": \"public\",\n                            \"purpose\": \"True if originates from a kStoreInLiteral access.\"\n                        },\n                        {\n                            \"name\": \"external_pointer_tag\",\n                            \"type\": \"ExternalPointerTag\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Tag for external pointers.\"\n                        },\n                        {\n                            \"name\": \"maybe_initializing_or_transitioning_store\",\n                            \"type\": \"bool\",\n                            \"access\": \"public\",\n                            \"purpose\": \"True if store might be initializing a newly allocated object or part of a map transition.\"\n                        },\n                        {\n                            \"name\": \"is_bounded_size_access\",\n                            \"type\": \"bool\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Whether this field is stored as a bounded size field.\"\n                        },\n                        {\n                            \"name\": \"is_immutable\",\n                            \"type\": \"bool\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Whether this field is known to be immutable for the purpose of loads.\"\n                        },\n                        {\n                            \"name\": \"indirect_pointer_tag\",\n                            \"type\": \"IndirectPointerTag\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Tag for indirect pointers.\"\n                        }\n                    ],\n                    \"dependencies\": [\n                        \"BaseTaggedness\",\n                        \"MaybeHandle\",\n                        \"Name\",\n                        \"OptionalMapRef\",\n                        \"Type\",\n                        \"MachineType\",\n                        \"WriteBarrierKind\",\n                        \"ConstFieldInfo\",\n                        \"ExternalPointerTag\",\n                        \"IndirectPointerTag\"\n                    ]\n                }\n            </metadata>\n            <code><![CDATA[\n                struct FieldAccess {\n                BaseTaggedness base_is_tagged;  // specifies if the base pointer is tagged.\n                int offset;                     // offset of the field, without tag.\n                MaybeHandle<Name> name;         // debugging only.\n                OptionalMapRef map;             // map of the field value (if known).\n                Type type;                      // type of the field.\n                MachineType machine_type;       // machine type of the field.\n                WriteBarrierKind write_barrier_kind;  // write barrier hint.\n                const char* creator_mnemonic;   // store the name of factory/creator method\n                ConstFieldInfo const_field_info;// the constness of this access, and the\n                                                // field owner map, if the access is const\n                bool is_store_in_literal;       // originates from a kStoreInLiteral access\n                ExternalPointerTag external_pointer_tag = kExternalPointerNullTag;\n                bool maybe_initializing_or_transitioning_store;  // store is potentially\n                                                                // initializing a newly\n                                                                // allocated object or part\n                                                                // of a map transition.\n                bool is_bounded_size_access = false;  // Whether this field is stored as a\n                                                        // bounded size field. In that case,\n                                                        // the size is shifted to the left to\n                                                        // guarantee that the value is at most\n                                                        // kMaxSafeBufferSizeForSandbox after\n                                                        // decoding.\n                bool is_immutable = false;  // Whether this field is known to be immutable for\n                                            // the purpose of loads.\n                IndirectPointerTag indirect_pointer_tag = kIndirectPointerNullTag;\n\n                FieldAccess()\n                    : base_is_tagged(kTaggedBase),\n                    offset(0),\n                    type(Type::None()),\n                    machine_type(MachineType::None()),\n                    write_barrier_kind(kFullWriteBarrier),\n                    creator_mnemonic(nullptr),\n                    const_field_info(ConstFieldInfo::None()),\n                    is_store_in_literal(false),\n                    maybe_initializing_or_transitioning_store(false) {}\n\n                FieldAccess(BaseTaggedness base_is_tagged, int offset, MaybeHandle<Name> name,\n                            OptionalMapRef map, Type type, MachineType machine_type,\n                            WriteBarrierKind write_barrier_kind,\n                            const char* creator_mnemonic = nullptr,\n                            ConstFieldInfo const_field_info = ConstFieldInfo::None(),\n                            bool is_store_in_literal = false,\n                            ExternalPointerTag external_pointer_tag = kExternalPointerNullTag,\n                            bool maybe_initializing_or_transitioning_store = false,\n                            bool is_immutable = false,\n                            IndirectPointerTag indirect_pointer_tag = kIndirectPointerNullTag)\n                    : base_is_tagged(base_is_tagged),\n                    offset(offset),\n                    name(name),\n                    map(map),\n                    type(type),\n                    machine_type(machine_type),\n                    write_barrier_kind(write_barrier_kind),\n                    const_field_info(const_field_info),\n                    is_store_in_literal(is_store_in_literal),\n                    external_pointer_tag(external_pointer_tag),\n                    maybe_initializing_or_transitioning_store(\n                        maybe_initializing_or_transitioning_store),\n                    is_immutable(is_immutable),\n                    indirect_pointer_tag(indirect_pointer_tag) {\n                DCHECK_GE(offset, 0);\n                DCHECK_IMPLIES(\n                    machine_type.IsMapWord(),\n                    offset == HeapObject::kMapOffset && base_is_tagged != kUntaggedBase);\n                DCHECK_IMPLIES(machine_type.IsMapWord(),\n                               (write_barrier_kind == kMapWriteBarrier ||\n                                write_barrier_kind == kNoWriteBarrier ||\n                                write_barrier_kind == kAssertNoWriteBarrier));\n                #if !defined(OFFICIAL_BUILD)\n                this->creator_mnemonic = creator_mnemonic;\n                #else\n                this->creator_mnemonic = nullptr;\n                #endif\n                }\n\n                int tag() const { return base_is_tagged == kTaggedBase ? kHeapObjectTag : 0; }\n                };\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"operator==\",\n                    \"about\": \"Equality operator for FieldAccess.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"a\",\n                            \"type\": \"FieldAccess const&\",\n                            \"purpose\": \"Left-hand side operand\"\n                        },\n                        {\n                            \"name\": \"b\",\n                            \"type\": \"FieldAccess const&\",\n                            \"purpose\": \"Right-hand side operand\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"bool\",\n                        \"description\": \"True if the FieldAccess objects are equal, false otherwise.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                V8_EXPORT_PRIVATE bool operator==(FieldAccess const&, FieldAccess const&);\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"hash_value\",\n                    \"about\": \"Calculates the hash value for FieldAccess objects.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"field_access\",\n                            \"type\": \"FieldAccess const&\",\n                            \"purpose\": \"The FieldAccess to hash\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"size_t\",\n                        \"description\": \"The calculated hash value.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                size_t hash_value(FieldAccess const&);\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"operator<<\",\n                    \"about\": \"Overloads the << operator for FieldAccess, enabling printing to an ostream.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"os\",\n                            \"type\": \"std::ostream&\",\n                            \"purpose\": \"The output stream\"\n                        },\n                        {\n                            \"name\": \"field_access\",\n                            \"type\": \"FieldAccess const&\",\n                            \"purpose\": \"The FieldAccess to print\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"std::ostream&\",\n                        \"description\": \"The output stream.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                V8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, FieldAccess const&);\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"FieldAccessOf\",\n                    \"about\": \"Retrieves the FieldAccess from an Operator.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"op\",\n                            \"type\": \"const Operator*\",\n                            \"purpose\": \"The Operator to retrieve the FieldAccess from\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"FieldAccess const&\",\n                        \"description\": \"The FieldAccess associated with the operator.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                V8_EXPORT_PRIVATE FieldAccess const& FieldAccessOf(const Operator* op)\n                    V8_WARN_UNUSED_RESULT;\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"method\",\n                    \"name\": \"PrintParameter\",\n                    \"parent\": \"Operator1<FieldAccess>\",\n                    \"about\": \"Prints the FieldAccess parameter of an Operator1.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"os\",\n                            \"type\": \"std::ostream&\",\n                            \"purpose\": \"The output stream\"\n                        },\n                        {\n                            \"name\": \"verbose\",\n                            \"type\": \"PrintVerbosity\",\n                            \"purpose\": \"Verbosity level for printing\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"void\",\n                        \"description\": \"No return value.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                template <>\n                void Operator1<FieldAccess>::PrintParameter(std::ostream& os,\n                                                            PrintVerbosity verbose) const;\n            ]]></code>\n        </func>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"struct\",\n                    \"name\": \"ElementAccess\",\n                    \"about\": \"Describes access to elements of indexed structures.\",\n                    \"attributes\": [\n                        {\n                            \"name\": \"base_is_tagged\",\n                            \"type\": \"BaseTaggedness\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Specifies whether the base pointer is tagged.\"\n                        },\n                        {\n                            \"name\": \"header_size\",\n                            \"type\": \"int\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Size of the header, without tag.\"\n                        },\n                        {\n                            \"name\": \"type\",\n                            \"type\": \"Type\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Type of the element.\"\n                        },\n                        {\n                            \"name\": \"machine_type\",\n                            \"type\": \"MachineType\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Machine type of the element.\"\n                        },\n                        {\n                            \"name\": \"write_barrier_kind\",\n                            \"type\": \"WriteBarrierKind\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Write barrier hint.\"\n                        }\n                    ],\n                    \"dependencies\": [\n                        \"BaseTaggedness\",\n                        \"Type\",\n                        \"MachineType\",\n                        \"WriteBarrierKind\"\n                    ]\n                }\n            </metadata>\n            <code><![CDATA[\n                struct ElementAccess {\n                BaseTaggedness base_is_tagged;  // specifies if the base pointer is tagged.\n                int header_size;                // size of the header, without tag.\n                Type type;                      // type of the element.\n                MachineType machine_type;       // machine type of the element.\n                WriteBarrierKind write_barrier_kind;  // write barrier hint.\n\n                ElementAccess()\n                    : base_is_tagged(kTaggedBase),\n                    header_size(0),\n                    type(Type::None()),\n                    machine_type(MachineType::None()),\n                    write_barrier_kind(kFullWriteBarrier) {}\n\n                ElementAccess(BaseTaggedness base_is_tagged, int header_size, Type type,\n                                MachineType machine_type, WriteBarrierKind write_barrier_kind)\n                    : base_is_tagged(base_is_tagged),\n                    header_size(header_size),\n                    type(type),\n                    machine_type(machine_type),\n                    write_barrier_kind(write_barrier_kind) {}\n\n                int tag() const { return base_is_tagged == kTaggedBase ? kHeapObjectTag : 0; }\n                };\n            ]]></code>\n        </class>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"operator==\",\n                    \"about\": \"Equality operator for ElementAccess.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"a\",\n                            \"type\": \"ElementAccess const&\",\n                            \"purpose\": \"Left-hand side operand\"\n                        },\n                        {\n                            \"name\": \"b\",\n                            \"type\": \"ElementAccess const&\",\n                            \"purpose\": \"Right-hand side operand\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"bool\",\n                        \"description\": \"True if the ElementAccess objects are equal, false otherwise.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                V8_EXPORT_PRIVATE bool operator==(ElementAccess const&, ElementAccess const&);\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"hash_value\",\n                    \"about\": \"Calculates the hash value for ElementAccess objects.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"element_access\",\n                            \"type\": \"ElementAccess const&\",\n                            \"purpose\": \"The ElementAccess to hash\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"size_t\",\n                        \"description\": \"The calculated hash value.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                size_t hash_value(ElementAccess const&);\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"operator<<\",\n                    \"about\": \"Overloads the << operator for ElementAccess, enabling printing to an ostream.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"os\",\n                            \"type\": \"std::ostream&\",\n                            \"purpose\": \"The output stream\"\n                        },\n                        {\n                            \"name\": \"element_access\",\n                            \"type\": \"ElementAccess const&\",\n                            \"purpose\": \"The ElementAccess to print\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"std::ostream&\",\n                        \"description\": \"The output stream.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                V8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream&, ElementAccess const&);\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"ElementAccessOf\",\n                    \"about\": \"Retrieves the ElementAccess from an Operator.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"op\",\n                            \"type\": \"const Operator*\",\n                            \"purpose\": \"The Operator to retrieve the ElementAccess from\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"ElementAccess const&\",\n                        \"description\": \"The ElementAccess associated with the operator.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                V8_EXPORT_PRIVATE ElementAccess const& ElementAccessOf(const Operator* op)\n                    V8_WARN_UNUSED_RESULT;\n            ]]></code>\n        </func>\n        <func>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"function\",\n                    \"name\": \"ExternalArrayTypeOf\",\n                    \"about\": \"Retrieves the ExternalArrayType from an Operator.\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"op\",\n                            \"type\": \"const Operator*\",\n                            \"purpose\": \"The Operator to retrieve the ExternalArrayType from\"\n                        }\n                    ],\n                    \"return\": {\n                        \"type\": \"ExternalArrayType\",\n                        \"description\": \"The ExternalArrayType associated with the operator.\"\n                    },\n                    \"dependencies\": []\n                }\n            </metadata>\n            <code><![CDATA[\n                ExternalArrayType ExternalArrayTypeOf(const Operator* op) V8_WARN_UNUSED_RESULT;\n            ]]></code>\n        </func>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"struct\",\n                    \"name\": \"ObjectAccess\",\n                    \"about\": \"Describes access to CSA-accessible structures.\",\n                    \"attributes\": [\n                        {\n                            \"name\": \"machine_type\",\n                            \"type\": \"MachineType\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Machine type of the field.\"\n                        },\n                        {\n                            \"name\": \"write_barrier_kind\",\n                            \"type\": \"WriteBarrierKind\",\n                            \"access\": \"public\",\n                            \"purpose\": \"Write barrier hint.\"\n                        }\n                    ],\n                    \"dependencies\": [\n                        \"MachineType\",\n                        \"WriteBarrierKind\"\n                    ]\n                }\n            </metadata>\n            <code><![CDATA[\n                struct ObjectAccess {\n                MachineType machine_type;             // machine type of the field.\n                WriteBarrierKind write_barrier_kind;  // write barrier hint.\n\n                ObjectAccess()\n                    : machine_type(MachineType::"
}