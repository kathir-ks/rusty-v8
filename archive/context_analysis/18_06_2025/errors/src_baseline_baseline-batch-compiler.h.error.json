{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/baseline/baseline-batch-compiler.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "mismatched tag: line 80, column 10",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/baseline/baseline-batch-compiler.h\",\n            \"file_name\": \"baseline-batch-compiler.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Declares the BaselineBatchCompiler class, which manages batch compilation of SharedFunctionInfo objects for the V8 JavaScript engine's baseline compiler.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for atomic operations, global handles, and handles.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <atomic>\n\n            #include \"src/handles/global-handles.h\"\n            #include \"src/handles/handles.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BaselineBatchCompiler\",\n                \"about\": \"Manages batch compilation of SharedFunctionInfo objects for the V8 JavaScript engine's baseline compiler.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"isolate_\",\n                        \"type\": \"Isolate*\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Pointer to the V8 isolate.\"\n                    },\n                    {\n                        \"name\": \"compilation_queue_\",\n                        \"type\": \"Handle<WeakFixedArray>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Global handle to a weak fixed array containing SharedFunctionInfo objects enqueued for compilation.\"\n                    },\n                    {\n                        \"name\": \"last_index_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"The last index set in the compilation queue.\"\n                    },\n                    {\n                        \"name\": \"estimated_instruction_size_\",\n                        \"type\": \"int\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Estimated instruction size of the current batch of functions being compiled.\"\n                    },\n                    {\n                        \"name\": \"enabled_\",\n                        \"type\": \"bool\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Flag indicating whether batch compilation is enabled. Can be dynamically disabled, e.g., when creating snapshots.\"\n                    },\n                    {\n                        \"name\": \"concurrent_compiler_\",\n                        \"type\": \"std::unique_ptr<ConcurrentBaselineCompiler>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Handle to the background compilation jobs handled by ConcurrentBaselineCompiler\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"DirectHandle\",\n                    \"JSFunction\",\n                    \"Tagged\",\n                    \"SharedFunctionInfo\",\n                    \"Handle\",\n                    \"WeakFixedArray\",\n                    \"ConcurrentBaselineCompiler\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            class BaselineBatchCompiler {\n            public:\n                static const int kInitialQueueSize = 32;\n\n                explicit BaselineBatchCompiler(Isolate* isolate);\n                ~BaselineBatchCompiler();\n                // Enqueues SharedFunctionInfo of |function| for compilation.\n                void EnqueueFunction(DirectHandle<JSFunction> function);\n                void EnqueueSFI(Tagged<SharedFunctionInfo> shared);\n\n                void set_enabled(bool enabled) { enabled_ = enabled; }\n                bool is_enabled() { return enabled_; }\n\n                void InstallBatch();\n\n            private:\n                bool concurrent() const;\n\n                // Ensure there is enough space in the compilation queue to enqueue another\n                // function, growing the queue if necessary.\n                void EnsureQueueCapacity();\n\n                // Enqueues SharedFunctionInfo.\n                void Enqueue(DirectHandle<SharedFunctionInfo> shared);\n\n                // Returns true if the current batch exceeds the threshold and should be\n                // compiled.\n                bool ShouldCompileBatch(Tagged<SharedFunctionInfo> shared);\n\n                // Compiles the current batch.\n                void CompileBatch(DirectHandle<JSFunction> function);\n\n                // Compiles the current batch concurrently.\n                void CompileBatchConcurrent(Tagged<SharedFunctionInfo> shared);\n\n                // Resets the current batch.\n                void ClearBatch();\n\n                // Tries to compile |maybe_sfi|. Returns false if compilation was not possible\n                // (e.g. bytecode was fushed, weak handle no longer valid, ...).\n                bool MaybeCompileFunction(Tagged<MaybeObject> maybe_sfi);\n\n                Isolate* isolate_;\n\n                // Global handle to shared function infos enqueued for compilation in the\n                // current batch.\n                Handle<WeakFixedArray> compilation_queue_;\n\n                // Last index set in compilation_queue_;\n                int last_index_;\n\n                // Estimated insturction size of current batch.\n                int estimated_instruction_size_;\n\n                // Flag indicating whether batch compilation is enabled.\n                // Batch compilation can be dynamically disabled e.g. when creating snapshots.\n                bool enabled_;\n\n                // Handle to the background compilation jobs.\n                std::unique_ptr<ConcurrentBaselineCompiler> concurrent_compiler_;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Isolate\",\n                    \"about\": \"Represents an isolated instance of the V8 JavaScript engine.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"DirectHandle\",\n                    \"about\": \"A direct handle to a JavaScript object.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class DirectHandle;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"JSFunction\",\n                    \"about\": \"Represents a JavaScript function.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class JSFunction;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Tagged\",\n                    \"about\": \"Represents a tagged pointer to a JavaScript object.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Tagged;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SharedFunctionInfo\",\n                    \"about\": \"Stores information shared between multiple instances of the same JavaScript function.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class SharedFunctionInfo;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Handle\",\n                    \"about\": \"A managed pointer to a JavaScript object.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <typename T> class Handle;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"WeakFixedArray\",\n                    \"about\": \"A fixed-size array that holds weak references to JavaScript objects.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class WeakFixedArray;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ConcurrentBaselineCompiler\",\n                    \"about\": \"Compiles code in a background thread.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class ConcurrentBaselineCompiler;\n            ]]></code>\n        </class>\n                <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"MaybeObject\",\n                    \"about\": \"Represents either an object or an indication that the object may have been collected.\"\n                }\n            </metadata>\n            <code><![CDATA[\n            class MaybeObject;\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}