{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/v8-value.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/v8-value.h\",\n            \"file_name\": \"v8-value.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the v8::Value class, the superclass of all JavaScript values and objects in the V8 JavaScript engine.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary V8 headers for data representation, internal utilities, local handles, maybe types, and configuration.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"v8-data.h\"          // NOLINT(build/include_directory)\n#include \"v8-internal.h\"      // NOLINT(build/include_directory)\n#include \"v8-local-handle.h\"  // NOLINT(build/include_directory)\n#include \"v8-maybe.h\"         // NOLINT(build/include_directory)\n#include \"v8config.h\"         // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Value\",\n                \"extends\": \"Data\",\n                \"about\": \"The superclass of all JavaScript values and objects.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"Data\",\n                    \"Primitive\",\n                    \"Numeric\",\n                    \"BigInt\",\n                    \"Int32\",\n                    \"Integer\",\n                    \"Number\",\n                    \"Object\",\n                    \"String\",\n                    \"Uint32\",\n                    \"Boolean\",\n                    \"Isolate\",\n                    \"Context\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT Value : public Data {\n public:\n  /**\n   * Returns true if this value is the undefined value.  See ECMA-262\n   * 4.3.10.\n   *\n   * This is equivalent to `value === undefined` in JS.\n   */\n  V8_INLINE bool IsUndefined() const;\n\n  /**\n   * Returns true if this value is the null value.  See ECMA-262\n   * 4.3.11.\n   *\n   * This is equivalent to `value === null` in JS.\n   */\n  V8_INLINE bool IsNull() const;\n\n  /**\n   * Returns true if this value is either the null or the undefined value.\n   * See ECMA-262\n   * 4.3.11. and 4.3.12\n   *\n   * This is equivalent to `value == null` in JS.\n   */\n  V8_INLINE bool IsNullOrUndefined() const;\n\n  /**\n   * Returns true if this value is true.\n   *\n   * This is not the same as `BooleanValue()`. The latter performs a\n   * conversion to boolean, i.e. the result of `Boolean(value)` in JS, whereas\n   * this checks `value === true`.\n   */\n  V8_INLINE bool IsTrue() const;\n\n  /**\n   * Returns true if this value is false.\n   *\n   * This is not the same as `!BooleanValue()`. The latter performs a\n   * conversion to boolean, i.e. the result of `!Boolean(value)` in JS, whereas\n   * this checks `value === false`.\n   */\n  V8_INLINE bool IsFalse() const;\n\n  /**\n   * Returns true if this value is a symbol or a string.\n   *\n   * This is equivalent to\n   * `typeof value === 'string' || typeof value === 'symbol'` in JS.\n   */\n  bool IsName() const;\n\n  /**\n   * Returns true if this value is an instance of the String type.\n   * See ECMA-262 8.4.\n   *\n   * This is equivalent to `typeof value === 'string'` in JS.\n   */\n  V8_INLINE bool IsString() const;\n\n  /**\n   * Returns true if this value is a symbol.\n   *\n   * This is equivalent to `typeof value === 'symbol'` in JS.\n   */\n  bool IsSymbol() const;\n\n  /**\n   * Returns true if this value is a function.\n   *\n   * This is equivalent to `typeof value === 'function'` in JS.\n   */\n  bool IsFunction() const;\n\n  /**\n   * Returns true if this value is an array. Note that it will return false for\n   * an Proxy for an array.\n   */\n  bool IsArray() const;\n\n  /**\n   * Returns true if this value is an object.\n   */\n  bool IsObject() const;\n\n  /**\n   * Returns true if this value is a bigint.\n   *\n   * This is equivalent to `typeof value === 'bigint'` in JS.\n   */\n  bool IsBigInt() const;\n\n  /**\n   * Returns true if this value is boolean.\n   *\n   * This is equivalent to `typeof value === 'boolean'` in JS.\n   */\n  bool IsBoolean() const;\n\n  /**\n   * Returns true if this value is a number.\n   *\n   * This is equivalent to `typeof value === 'number'` in JS.\n   */\n  bool IsNumber() const;\n\n  /**\n   * Returns true if this value is an `External` object.\n   */\n  bool IsExternal() const;\n\n  /**\n   * Returns true if this value is a 32-bit signed integer.\n   */\n  bool IsInt32() const;\n\n  /**\n   * Returns true if this value is a 32-bit unsigned integer.\n   */\n  bool IsUint32() const;\n\n  /**\n   * Returns true if this value is a Date.\n   */\n  bool IsDate() const;\n\n  /**\n   * Returns true if this value is an Arguments object.\n   */\n  bool IsArgumentsObject() const;\n\n  /**\n   * Returns true if this value is a BigInt object.\n   */\n  bool IsBigIntObject() const;\n\n  /**\n   * Returns true if this value is a Boolean object.\n   */\n  bool IsBooleanObject() const;\n\n  /**\n   * Returns true if this value is a Number object.\n   */\n  bool IsNumberObject() const;\n\n  /**\n   * Returns true if this value is a String object.\n   */\n  bool IsStringObject() const;\n\n  /**\n   * Returns true if this value is a Symbol object.\n   */\n  bool IsSymbolObject() const;\n\n  /**\n   * Returns true if this value is a NativeError.\n   */\n  bool IsNativeError() const;\n\n  /**\n   * Returns true if this value is a RegExp.\n   */\n  bool IsRegExp() const;\n\n  /**\n   * Returns true if this value is an async function.\n   */\n  bool IsAsyncFunction() const;\n\n  /**\n   * Returns true if this value is a Generator function.\n   */\n  bool IsGeneratorFunction() const;\n\n  /**\n   * Returns true if this value is a Generator object (iterator).\n   */\n  bool IsGeneratorObject() const;\n\n  /**\n   * Returns true if this value is a Promise.\n   */\n  bool IsPromise() const;\n\n  /**\n   * Returns true if this value is a Map.\n   */\n  bool IsMap() const;\n\n  /**\n   * Returns true if this value is a Set.\n   */\n  bool IsSet() const;\n\n  /**\n   * Returns true if this value is a Map Iterator.\n   */\n  bool IsMapIterator() const;\n\n  /**\n   * Returns true if this value is a Set Iterator.\n   */\n  bool IsSetIterator() const;\n\n  /**\n   * Returns true if this value is a WeakMap.\n   */\n  bool IsWeakMap() const;\n\n  /**\n   * Returns true if this value is a WeakSet.\n   */\n  bool IsWeakSet() const;\n\n  /**\n   * Returns true if this value is a WeakRef.\n   */\n  bool IsWeakRef() const;\n\n  /**\n   * Returns true if this value is an ArrayBuffer.\n   */\n  bool IsArrayBuffer() const;\n\n  /**\n   * Returns true if this value is an ArrayBufferView.\n   */\n  bool IsArrayBufferView() const;\n\n  /**\n   * Returns true if this value is one of TypedArrays.\n   */\n  bool IsTypedArray() const;\n\n  /**\n   * Returns true if this value is an Uint8Array.\n   */\n  bool IsUint8Array() const;\n\n  /**\n   * Returns true if this value is an Uint8ClampedArray.\n   */\n  bool IsUint8ClampedArray() const;\n\n  /**\n   * Returns true if this value is an Int8Array.\n   */\n  bool IsInt8Array() const;\n\n  /**\n   * Returns true if this value is an Uint16Array.\n   */\n  bool IsUint16Array() const;\n\n  /**\n   * Returns true if this value is an Int16Array.\n   */\n  bool IsInt16Array() const;\n\n  /**\n   * Returns true if this value is an Uint32Array.\n   */\n  bool IsUint32Array() const;\n\n  /**\n   * Returns true if this value is an Int32Array.\n   */\n  bool IsInt32Array() const;\n\n  /**\n   * Returns true if this value is a Float16Array.\n   */\n  bool IsFloat16Array() const;\n\n  /**\n   * Returns true if this value is a Float32Array.\n   */\n  bool IsFloat32Array() const;\n\n  /**\n   * Returns true if this value is a Float64Array.\n   */\n  bool IsFloat64Array() const;\n\n  /**\n   * Returns true if this value is a BigInt64Array.\n   */\n  bool IsBigInt64Array() const;\n\n  /**\n   * Returns true if this value is a BigUint64Array.\n   */\n  bool IsBigUint64Array() const;\n\n  /**\n   * Returns true if this value is a DataView.\n   */\n  bool IsDataView() const;\n\n  /**\n   * Returns true if this value is a SharedArrayBuffer.\n   */\n  bool IsSharedArrayBuffer() const;\n\n  /**\n   * Returns true if this value is a JavaScript Proxy.\n   */\n  bool IsProxy() const;\n\n  /**\n   * Returns true if this value is a WasmMemoryObject.\n   */\n  bool IsWasmMemoryObject() const;\n\n  /**\n   * Returns true if this value is a WasmMemoryMapDescriptor.\n   */\n  bool IsWasmMemoryMapDescriptor() const;\n\n  /**\n   * Returns true if this value is a WasmModuleObject.\n   */\n  bool IsWasmModuleObject() const;\n\n  /**\n   * Returns true if this value is the WasmNull object.\n   */\n  bool IsWasmNull() const;\n\n  /**\n   * Returns true if the value is a Module Namespace Object.\n   */\n  bool IsModuleNamespaceObject() const;\n\n  /**\n   * Returns true if the value is a primitive.\n   */\n  bool IsPrimitive() const;\n\n  /**\n   * Perform `ToPrimitive(value)` as specified in:\n   * https://tc39.es/ecma262/#sec-toprimitive.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Primitive> ToPrimitive(\n      Local<Context> context) const;\n  /**\n   * Perform `ToNumeric(value)` as specified in:\n   * https://tc39.es/ecma262/#sec-tonumeric.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Numeric> ToNumeric(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `BigInt(value)` in JS.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<BigInt> ToBigInt(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `Number(value)` in JS.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Number> ToNumber(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `String(value)` in JS.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<String> ToString(\n      Local<Context> context) const;\n  /**\n   * Provide a string representation of this value usable for debugging.\n   * This operation has no observable side effects and will succeed\n   * unless e.g. execution is being terminated.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<String> ToDetailString(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `Tagged<Object>(value)` in JS.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Object> ToObject(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `Number(value)` in JS and convert the result\n   * to an integer. Negative values are rounded up, positive values are rounded\n   * down. NaN is converted to 0. Infinite values yield undefined results.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Integer> ToInteger(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `Number(value)` in JS and convert the result\n   * to an unsigned 32-bit integer by performing the steps in\n   * https://tc39.es/ecma262/#sec-touint32.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Uint32> ToUint32(\n      Local<Context> context) const;\n  /**\n   * Perform the equivalent of `Number(value)` in JS and convert the result\n   * to a signed 32-bit integer by performing the steps in\n   * https://tc39.es/ecma262/#sec-toint32.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Int32> ToInt32(Local<Context> context) const;\n\n  /**\n   * Perform the equivalent of `Boolean(value)` in JS. This can never fail.\n   */\n  Local<Boolean> ToBoolean(Isolate* isolate) const;\n\n  /**\n   * Attempts to convert a string to an array index.\n   * Returns an empty handle if the conversion fails.\n   */\n  V8_WARN_UNUSED_RESULT MaybeLocal<Uint32> ToArrayIndex(\n      Local<Context> context) const;\n\n  /** Returns the equivalent of `ToBoolean()->Value()`. */\n  bool BooleanValue(Isolate* isolate) const;\n\n  /** Returns the equivalent of `ToNumber()->Value()`. */\n  V8_WARN_UNUSED_RESULT Maybe<double> NumberValue(Local<Context> context) const;\n  /** Returns the equivalent of `ToInteger()->Value()`. */\n  V8_WARN_UNUSED_RESULT Maybe<int64_t> IntegerValue(\n      Local<Context> context) const;\n  /** Returns the equivalent of `ToUint32()->Value()`. */\n  V8_WARN_UNUSED_RESULT Maybe<uint32_t> Uint32Value(\n      Local<Context> context) const;\n  /** Returns the equivalent of `ToInt32()->Value()`. */\n  V8_WARN_UNUSED_RESULT Maybe<int32_t> Int32Value(Local<Context> context) const;\n\n  /** JS == */\n  V8_WARN_UNUSED_RESULT Maybe<bool> Equals(Local<Context> context,\n                                           Local<Value> that) const;\n  bool StrictEquals(Local<Value> that) const;\n  bool SameValue(Local<Value> that) const;\n\n  template <class T>\n  V8_INLINE static Value* Cast(T* value) {\n    return static_cast<Value*>(value);\n  }\n\n  Local<String> TypeOf(Isolate*);\n\n  Maybe<bool> InstanceOf(Local<Context> context, Local<Object> object);\n\n  /**\n   * Get the hash of this value. The hash is not guaranteed to be\n   * unique. For |Object| and |Name| instances the result is equal to\n   * |GetIdentityHash|. Hashes are not guaranteed to be stable across\n   * different isolates or processes.\n   */\n  uint32_t GetHash();\n\n private:\n  V8_INLINE bool QuickIsUndefined() const;\n  V8_INLINE bool QuickIsNull() const;\n  V8_INLINE bool QuickIsNullOrUndefined() const;\n#if V8_STATIC_ROOTS_BOOL\n  V8_INLINE bool QuickIsTrue() const;\n  V8_INLINE bool QuickIsFalse() const;\n#endif  // V8_STATIC_ROOTS_BOOL\n  V8_INLINE bool QuickIsString() const;\n  bool FullIsUndefined() const;\n  bool FullIsNull() const;\n  bool FullIsTrue() const;\n  bool FullIsFalse() const;\n  bool FullIsString() const;\n\n  static void CheckCast(Data* that);\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsUndefined\",\n                \"parent\": \"Value\",\n                \"about\": \"Checks if the value is undefined.\",\n                \"logic\": \"Checks if the value represents the JavaScript undefined value. Uses a quick check if checks are disabled and a full check if checks are enabled.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is undefined, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::IsUndefined() const {\n#ifdef V8_ENABLE_CHECKS\n  return FullIsUndefined();\n#else\n  return QuickIsUndefined();\n#endif\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"QuickIsUndefined\",\n                \"parent\": \"Value\",\n                \"about\": \"Quickly checks if the value is undefined.\",\n                \"logic\": \"Performs a fast check to determine if the value is the JavaScript undefined value. It uses internal V8 APIs to directly compare the value's address with the address of the undefined value stored in the V8 heap.  It uses static roots if they are enabled, otherwise checks instance type and kind.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is undefined, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::QuickIsUndefined() const {\n  using A = internal::Address;\n  using I = internal::Internals;\n  A obj = internal::ValueHelper::ValueAsAddress(this);\n#if V8_STATIC_ROOTS_BOOL\n  return I::is_identical(obj, I::StaticReadOnlyRoot::kUndefinedValue);\n#else\n  if (!I::HasHeapObjectTag(obj)) return false;\n  if (I::GetInstanceType(obj) != I::kOddballType) return false;\n  return (I::GetOddballKind(obj) == I::kUndefinedOddballKind);\n#endif  // V8_STATIC_ROOTS_BOOL\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsNull\",\n                \"parent\": \"Value\",\n                \"about\": \"Checks if the value is null.\",\n                \"logic\": \"Checks if the value represents the JavaScript null value. Uses a quick check if checks are disabled and a full check if checks are enabled.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is null, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::IsNull() const {\n#ifdef V8_ENABLE_CHECKS\n  return FullIsNull();\n#else\n  return QuickIsNull();\n#endif\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"QuickIsNull\",\n                \"parent\": \"Value\",\n                \"about\": \"Quickly checks if the value is null.\",\n                \"logic\": \"Performs a fast check to determine if the value is the JavaScript null value. It uses internal V8 APIs to directly compare the value's address with the address of the null value stored in the V8 heap. It uses static roots if they are enabled, otherwise checks instance type and kind.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is null, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::QuickIsNull() const {\n  using A = internal::Address;\n  using I = internal::Internals;\n  A obj = internal::ValueHelper::ValueAsAddress(this);\n#if V8_STATIC_ROOTS_BOOL\n  return I::is_identical(obj, I::StaticReadOnlyRoot::kNullValue);\n#else\n  if (!I::HasHeapObjectTag(obj)) return false;\n  if (I::GetInstanceType(obj) != I::kOddballType) return false;\n  return (I::GetOddballKind(obj) == I::kNullOddballKind);\n#endif  // V8_STATIC_ROOTS_BOOL\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsNullOrUndefined\",\n                \"parent\": \"Value\",\n                \"about\": \"Checks if the value is either null or undefined.\",\n                \"logic\": \"Checks if the value is either the JavaScript null or undefined value. Uses a quick check if checks are disabled and a full check if checks are enabled.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is null or undefined, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::IsNullOrUndefined() const {\n#ifdef V8_ENABLE_CHECKS\n  return FullIsNull() || FullIsUndefined();\n#else\n  return QuickIsNullOrUndefined();\n#endif\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"QuickIsNullOrUndefined\",\n                \"parent\": \"Value\",\n                \"about\": \"Quickly checks if the value is either null or undefined.\",\n                \"logic\": \"Performs a fast check to determine if the value is either the JavaScript null or undefined value. It uses internal V8 APIs and either checks against static roots or checks the instance type and kind.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is null or undefined, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::QuickIsNullOrUndefined() const {\n#if V8_STATIC_ROOTS_BOOL\n  return QuickIsNull() || QuickIsUndefined();\n#else\n  using A = internal::Address;\n  using I = internal::Internals;\n  A obj = internal::ValueHelper::ValueAsAddress(this);\n  if (!I::HasHeapObjectTag(obj)) return false;\n  if (I::GetInstanceType(obj) != I::kOddballType) return false;\n  int kind = I::GetOddballKind(obj);\n  return kind == I::kNullOddballKind || kind == I::kUndefinedOddballKind;\n#endif  // V8_STATIC_ROOTS_BOOL\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsTrue\",\n                \"parent\": \"Value\",\n                \"about\": \"Checks if the value is true.\",\n                \"logic\": \"Checks if the value represents the JavaScript true value. Uses a quick check if checks are disabled and static roots are enabled, and a full check otherwise.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is true, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::IsTrue() const {\n#if V8_STATIC_ROOTS_BOOL && !defined(V8_ENABLE_CHECKS)\n  return QuickIsTrue();\n#else\n  return FullIsTrue();\n#endif\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"QuickIsTrue\",\n                \"parent\": \"Value\",\n                \"about\": \"Quickly checks if the value is true.\",\n                \"logic\": \"Performs a fast check to determine if the value is the JavaScript true value using static roots.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is true, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_STATIC_ROOTS_BOOL\nbool Value::QuickIsTrue() const {\n  using A = internal::Address;\n  using I = internal::Internals;\n  A obj = internal::ValueHelper::ValueAsAddress(this);\n  return I::is_identical(obj, I::StaticReadOnlyRoot::kTrueValue);\n}\n#endif  // V8_STATIC_ROOTS_BOOL\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsFalse\",\n                \"parent\": \"Value\",\n                \"about\": \"Checks if the value is false.\",\n                \"logic\": \"Checks if the value represents the JavaScript false value. Uses a quick check if checks are disabled and static roots are enabled, and a full check otherwise.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is false, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::IsFalse() const {\n#if V8_STATIC_ROOTS_BOOL && !defined(V8_ENABLE_CHECKS)\n  return QuickIsFalse();\n#else\n  return FullIsFalse();\n#endif\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"QuickIsFalse\",\n                \"parent\": \"Value\",\n                \"about\": \"Quickly checks if the value is false.\",\n                \"logic\": \"Performs a fast check to determine if the value is the JavaScript false value using static roots.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is false, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\n#if V8_STATIC_ROOTS_BOOL\nbool Value::QuickIsFalse() const {\n  using A = internal::Address;\n  using I = internal::Internals;\n  A obj = internal::ValueHelper::ValueAsAddress(this);\n  return I::is_identical(obj, I::StaticReadOnlyRoot::kFalseValue);\n}\n#endif  // V8_STATIC_ROOTS_BOOL\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"IsString\",\n                \"parent\": \"Value\",\n                \"about\": \"Checks if the value is a string.\",\n                \"logic\": \"Checks if the value represents a JavaScript string. Uses a quick check if checks are disabled and a full check if checks are enabled.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is a string, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::IsString() const {\n#ifdef V8_ENABLE_CHECKS\n  return FullIsString();\n#else\n  return QuickIsString();\n#endif\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"QuickIsString\",\n                \"parent\": \"Value\",\n                \"about\": \"Quickly checks if the value is a string.\",\n                \"logic\": \"Performs a fast check to determine if the value is a JavaScript string. It uses internal V8 APIs to check the instance type.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the value is a string, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool Value::QuickIsString() const {\n  using A = internal::Address;\n  using I = internal::Internals;\n  A obj = internal::ValueHelper::ValueAsAddress(this);\n  if (!I::HasHeapObjectTag(obj)) return false;\n#if V8_STATIC_ROOTS_BOOL && !V8_MAP_PACKING\n  return I::CheckInstanceMapRange(obj,\n                                  I::StaticReadOnlyRoot::kStringMapLowerBound,\n                                  I::StaticReadOnlyRoot::kStringMapUpperBound);\n#else\n  return (I::GetInstanceType(obj) < I::kFirstNonstringType);\n#endif  // V8_STATIC_ROOTS_BOOL\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"TypecheckWitness\",\n                \"about\": \"Used to avoid repeated expensive type checks for groups of objects expected to be similar.\",\n                \"attributes\": [],\n                \"dependencies\": [\n                    \"Isolate\",\n                    \"Value\",\n                    \"Data\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n/**\n * Can be used to avoid repeated expensive type checks for groups of objects\n * that are expected to be similar (e.g. when Blink converts a bunch of\n * JavaScript objects to \"ScriptWrappable\" after a \"HasInstance\" check) by\n * making use of V8-internal \"hidden classes\". An object that has passed the\n * full check can be remembered via {Update}; further objects can be queried\n * using {Matches}.\n * Note that the answer will be conservative/\"best-effort\": when {Matches}\n * returns true, then the {candidate} can be relied upon to have the same\n * shape/constructor/prototype/etc. as the {baseline}. Otherwise, no reliable\n * statement can be made (the objects might still have indistinguishable shapes\n * for all intents and purposes, but this mechanism, being optimized for speed,\n * couldn't determine that quickly).\n */\nclass V8_EXPORT TypecheckWitness {\n public:\n  explicit TypecheckWitness(Isolate* isolate);\n\n  /**\n   * Checks whether {candidate} can cheaply be identified as being \"similar\"\n   * to the {baseline} that was passed to {Update} earlier.\n   * It's safe to call this on an uninitialized {TypecheckWitness} instance:\n   * it will then return {false} for any input.\n   */\n  V8_INLINE bool Matches(Local<Value> candidate) const;\n\n  /**\n   * Remembers a new baseline for future {Matches} queries.\n   */\n  void Update(Local<Value> baseline);\n\n private:\n  Local<Data> cached_map_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"Matches\",\n                \"parent\": \"TypecheckWitness\",\n                \"about\": \"Checks whether a candidate can be cheaply identified as being similar to a baseline.\",\n                \"logic\": \"Compares the hidden class (map) of the candidate with the cached map of the baseline.  If they match, the candidate is considered similar. This is an optimization to avoid repeated expensive type checks.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"candidate\",\n                        \"type\": \"Local<Value>\",\n                        \"purpose\": \"The value to check for similarity.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"bool\",\n                    \"description\": \"True if the candidate is similar to the baseline, false otherwise.\"\n                },\n                \"dependencies\": []\n            }\n        </metadata>\n        <code><![CDATA[\nbool TypecheckWitness::Matches(Local<Value> candidate) const {\n  internal::Address obj = internal::ValueHelper::ValueAsAddress(*candidate);\n  internal::Address obj_map = internal::Internals::LoadMap(obj);\n  internal::Address cached =\n      internal::ValueHelper::ValueAsAddress(*cached_map_);\n  return obj_map == cached;\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"function\",\n                \"name\": \"Cast\",\n                \"about\": \"Casts a Data pointer to a Value pointer.\",\n                \"logic\": \"Performs a static cast from a Data pointer to a Value pointer, with optional checks enabled.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"Data*\",\n                        \"purpose\": \"The Data pointer to cast.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"Value*\",\n                    \"description\": \"The Value pointer after casting.\"\n                },\n                \"dependencies\": [\n                    \"Data\",\n                    \"Value\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA"
}