{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turbofan-graph-visualizer.h",
  "error": "Response not JSON and not XML-like after cleanup",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turbofan-graph-visualizer.h\",\n        \"file_name\": \"turbofan-graph-visualizer.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Defines classes and functions for visualizing the Turbofan graph, including JSON output and CFG generation.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes standard library headers and V8-specific headers for I/O, memory management, data structures, and compiler components.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include <stdio.h>\n\n#include <fstream>\n#include <iosfwd>\n#include <memory>\n#include <optional>\n#include <vector>\n\n#include \"src/common/globals.h\"\n#include \"src/handles/handles.h\"\n#include \"src/objects/code.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSONEscaped\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Escapes a string for JSON output, handling special characters like quotes, backslashes, and control characters.\",\n            \"attributes\": [\n                {\n                    \"name\": \"str_\",\n                    \"type\": \"std::string\",\n                    \"access\": \"private\",\n                    \"purpose\": \"The string to be escaped.\"\n                }\n            ],\n            \"dependencies\": []\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSONEscaped {\n public:\n  template <typename T>\n  explicit JSONEscaped(const T& value) {\n    std::ostringstream s;\n    s << value;\n    str_ = s.str();\n  }\n  explicit JSONEscaped(std::string str) : str_(std::move(str)) {}\n  explicit JSONEscaped(const std::ostringstream& os) : str_(os.str()) {}\n\n  friend std::ostream& operator<<(std::ostream& os, const JSONEscaped& e) {\n    for (char c : e.str_) PipeCharacter(os, c);\n    return os;\n  }\n\n private:\n  static std::ostream& PipeCharacter(std::ostream& os, char c) {\n    if (c == '\"') return os << \"\\\\\\\"\";\n    if (c == '\\\\') return os << \"\\\\\\\\\";\n    if (c == '\\b') return os << \"\\\\b\";\n    if (c == '\\f') return os << \"\\\\f\";\n    if (c == '\\n') return os << \"\\\\n\";\n    if (c == '\\r') return os << \"\\\\r\";\n    if (c == '\\t') return os << \"\\\\t\";\n    return os << c;\n  }\n\n  std::string str_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"TurboJsonFile\",\n            \"extends\": \"std::ofstream\",\n            \"implements\": [],\n            \"about\": \"Represents a JSON file for Turbofan graph visualization. Extends std::ofstream.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"OptimizedCompilationInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct V8_EXPORT_PRIVATE TurboJsonFile : public std::ofstream {\n  TurboJsonFile(OptimizedCompilationInfo* info, std::ios_base::openmode mode);\n  ~TurboJsonFile() override;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"TurboCfgFile\",\n            \"extends\": \"std::ofstream\",\n            \"implements\": [],\n            \"about\": \"Represents a CFG file for Turbofan graph visualization. Extends std::ofstream.\",\n            \"attributes\": [],\n            \"dependencies\": [\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct TurboCfgFile : public std::ofstream {\n  explicit TurboCfgFile(Isolate* isolate = nullptr);\n  ~TurboCfgFile() override;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"SourcePositionAsJSON\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Wraps a SourcePosition object for JSON output.\",\n            \"attributes\": [\n                {\n                    \"name\": \"sp\",\n                    \"type\": \"const SourcePosition&\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The SourcePosition object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"SourcePosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct SourcePositionAsJSON {\n  explicit SourcePositionAsJSON(const SourcePosition& sp) : sp(sp) {}\n  const SourcePosition& sp;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"AsJSON\",\n            \"parent\": null,\n            \"about\": \"Creates a SourcePositionAsJSON object from a SourcePosition.\",\n            \"logic\": \"Wraps the given SourcePosition in a SourcePositionAsJSON struct.\",\n            \"parameters\": [\n                {\n                    \"name\": \"sp\",\n                    \"type\": \"const SourcePosition&\",\n                    \"purpose\": \"The SourcePosition object.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"SourcePositionAsJSON\",\n                \"description\": \"A SourcePositionAsJSON object wrapping the SourcePosition.\"\n            },\n            \"dependencies\": [\n                \"SourcePosition\",\n                \"SourcePositionAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_INLINE V8_EXPORT_PRIVATE SourcePositionAsJSON\nAsJSON(const SourcePosition& sp) {\n  return SourcePositionAsJSON(sp);\n}\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"NodeOriginAsJSON\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Wraps a NodeOrigin object for JSON output.\",\n            \"attributes\": [\n                {\n                    \"name\": \"no\",\n                    \"type\": \"const NodeOrigin&\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The NodeOrigin object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"NodeOrigin\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct NodeOriginAsJSON {\n  explicit NodeOriginAsJSON(const NodeOrigin& no) : no(no) {}\n  const NodeOrigin& no;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"AsJSON\",\n            \"parent\": null,\n            \"about\": \"Creates a NodeOriginAsJSON object from a NodeOrigin.\",\n            \"logic\": \"Wraps the given NodeOrigin in a NodeOriginAsJSON struct.\",\n            \"parameters\": [\n                {\n                    \"name\": \"no\",\n                    \"type\": \"const NodeOrigin&\",\n                    \"purpose\": \"The NodeOrigin object.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"NodeOriginAsJSON\",\n                \"description\": \"A NodeOriginAsJSON object wrapping the NodeOrigin.\"\n            },\n            \"dependencies\": [\n                \"NodeOrigin\",\n                \"NodeOriginAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_INLINE V8_EXPORT_PRIVATE NodeOriginAsJSON AsJSON(const NodeOrigin& no) {\n  return NodeOriginAsJSON(no);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"parent\": null,\n            \"about\": \"Overloads the << operator for SourcePositionAsJSON to output JSON representation.\",\n            \"logic\": \"Formats and outputs the SourcePosition data to the provided output stream as JSON.\",\n            \"parameters\": [\n                {\n                    \"name\": \"out\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"pos\",\n                    \"type\": \"const SourcePositionAsJSON&\",\n                    \"purpose\": \"The SourcePositionAsJSON object to output.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"SourcePositionAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& out, const SourcePositionAsJSON& pos);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"parent\": null,\n            \"about\": \"Overloads the << operator for NodeOriginAsJSON to output JSON representation.\",\n            \"logic\": \"Formats and outputs the NodeOrigin data to the provided output stream as JSON.\",\n            \"parameters\": [\n                {\n                    \"name\": \"out\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"asJSON\",\n                    \"type\": \"const NodeOriginAsJSON&\",\n                    \"purpose\": \"The NodeOriginAsJSON object to output.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"NodeOriginAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& out, const NodeOriginAsJSON& asJSON);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"SourceIdAssigner\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Assigns unique IDs to SharedFunctionInfo objects to deduplicate them in JSON output.\",\n            \"attributes\": [\n                {\n                    \"name\": \"printed_\",\n                    \"type\": \"std::vector<Handle<SharedFunctionInfo>>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the SharedFunctionInfo objects that have been assigned IDs.\"\n                },\n                {\n                    \"name\": \"source_ids_\",\n                    \"type\": \"std::vector<int>\",\n                    \"access\": \"private\",\n                    \"purpose\": \"Stores the assigned IDs for each SharedFunctionInfo object.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Handle<SharedFunctionInfo>\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass V8_EXPORT_PRIVATE SourceIdAssigner {\n public:\n  explicit SourceIdAssigner(size_t size) {\n    printed_.reserve(size);\n    source_ids_.reserve(size);\n  }\n  int GetIdFor(Handle<SharedFunctionInfo> shared);\n  int GetIdAt(size_t pos) const { return source_ids_[pos]; }\n\n private:\n  std::vector<Handle<SharedFunctionInfo>> printed_;\n  std::vector<int> source_ids_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"JsonPrintAllBytecodeSources\",\n            \"parent\": null,\n            \"about\": \"Prints all bytecode sources to a JSON stream.\",\n            \"logic\": \"Iterates through the bytecode sources and prints them to the specified output stream in JSON format.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"info\",\n                    \"type\": \"OptimizedCompilationInfo*\",\n                    \"purpose\": \"The compilation info object.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"OptimizedCompilationInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid JsonPrintAllBytecodeSources(std::ostream& os,\n                                 OptimizedCompilationInfo* info);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"JsonPrintBytecodeSource\",\n            \"parent\": null,\n            \"about\": \"Prints a single bytecode source to a JSON stream.\",\n            \"logic\": \"Prints the given bytecode array to the specified output stream in JSON format.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"source_id\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The ID of the source.\"\n                },\n                {\n                    \"name\": \"function_name\",\n                    \"type\": \"std::unique_ptr<char[]>\",\n                    \"purpose\": \"The name of the function.\"\n                },\n                {\n                    \"name\": \"bytecode_array\",\n                    \"type\": \"DirectHandle<BytecodeArray>\",\n                    \"purpose\": \"The bytecode array to print.\"\n                },\n                {\n                    \"name\": \"feedback_vector\",\n                    \"type\": \"Tagged<FeedbackVector>\",\n                    \"purpose\": \"The feedback vector (optional).\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"BytecodeArray\",\n                \"FeedbackVector\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid JsonPrintBytecodeSource(std::ostream& os, int source_id,\n                             std::unique_ptr<char[]> function_name,\n                             DirectHandle<BytecodeArray> bytecode_array,\n                             Tagged<FeedbackVector> feedback_vector = {});\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"JsonPrintAllSourceWithPositions\",\n            \"parent\": null,\n            \"about\": \"Prints all source code with position information to a JSON stream.\",\n            \"logic\": \"Iterates through the source code and prints the code along with its position information to the specified output stream in JSON format.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"info\",\n                    \"type\": \"OptimizedCompilationInfo*\",\n                    \"purpose\": \"The compilation info object.\"\n                },\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The isolate.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"OptimizedCompilationInfo\",\n                \"Isolate\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid JsonPrintAllSourceWithPositions(std::ostream& os,\n                                     OptimizedCompilationInfo* info,\n                                     Isolate* isolate);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"JsonPrintAllSourceWithPositionsWasm\",\n            \"parent\": null,\n            \"about\": \"Prints all WASM source code with position information to a JSON stream.\",\n            \"logic\": \"Iterates through the WASM source code and prints the code along with its position information to the specified output stream in JSON format.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"module\",\n                    \"type\": \"const wasm::WasmModule*\",\n                    \"purpose\": \"The WASM module.\"\n                },\n                {\n                    \"name\": \"wire_bytes\",\n                    \"type\": \"const wasm::WireBytesStorage*\",\n                    \"purpose\": \"The WASM wire bytes storage.\"\n                },\n                {\n                    \"name\": \"positions\",\n                    \"type\": \"base::Vector<WasmInliningPosition>\",\n                    \"purpose\": \"The WASM inlining positions.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"wasm::WasmModule\",\n                \"wasm::WireBytesStorage\",\n                \"WasmInliningPosition\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\n#if V8_ENABLE_WEBASSEMBLY\nvoid JsonPrintAllSourceWithPositionsWasm(\n    std::ostream& os, const wasm::WasmModule* module,\n    const wasm::WireBytesStorage* wire_bytes,\n    base::Vector<WasmInliningPosition> positions);\n#endif\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"JsonPrintFunctionSource\",\n            \"parent\": null,\n            \"about\": \"Prints function source code to a JSON stream.\",\n            \"logic\": \"Prints the source code of the specified function to the output stream in JSON format.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"source_id\",\n                    \"type\": \"int\",\n                    \"purpose\": \"The source ID.\"\n                },\n                {\n                    \"name\": \"function_name\",\n                    \"type\": \"std::unique_ptr<char[]>\",\n                    \"purpose\": \"The function name.\"\n                },\n                {\n                    \"name\": \"script\",\n                    \"type\": \"DirectHandle<Script>\",\n                    \"purpose\": \"The script handle.\"\n                },\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The isolate.\"\n                },\n                {\n                    \"name\": \"shared\",\n                    \"type\": \"DirectHandle<SharedFunctionInfo>\",\n                    \"purpose\": \"The shared function info handle.\"\n                },\n                 {\n                    \"name\": \"with_key\",\n                    \"type\": \"bool\",\n                    \"purpose\": \"Whether to print the key or not.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"Script\",\n                \"Isolate\",\n                \"SharedFunctionInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nvoid JsonPrintFunctionSource(std::ostream& os, int source_id,\n                             std::unique_ptr<char[]> function_name,\n                             DirectHandle<Script> script, Isolate* isolate,\n                             DirectHandle<SharedFunctionInfo> shared,\n                             bool with_key = false);\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"GetVisualizerLogFileName\",\n            \"parent\": null,\n            \"about\": \"Generates a file name for the visualizer log.\",\n            \"logic\": \"Constructs a file name based on the compilation info, optional base directory, phase, and suffix.\",\n            \"parameters\": [\n                {\n                    \"name\": \"info\",\n                    \"type\": \"OptimizedCompilationInfo*\",\n                    \"purpose\": \"The compilation info object.\"\n                },\n                {\n                    \"name\": \"optional_base_dir\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"An optional base directory.\"\n                },\n                {\n                    \"name\": \"phase\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The compilation phase.\"\n                },\n                {\n                    \"name\": \"suffix\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The file suffix.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::unique_ptr<char[]>\",\n                \"description\": \"A unique pointer to the generated file name.\"\n            },\n            \"dependencies\": [\n                \"OptimizedCompilationInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::unique_ptr<char[]> GetVisualizerLogFileName(OptimizedCompilationInfo* info,\n                                                 const char* optional_base_dir,\n                                                 const char* phase,\n                                                 const char* suffix);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"class\",\n            \"name\": \"JSONGraphWriter\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Writes the Turbofan graph to a JSON stream.\",\n            \"attributes\": [\n                {\n                    \"name\": \"os_\",\n                    \"type\": \"std::ostream&\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"zone_\",\n                    \"type\": \"Zone*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"The zone allocator.\"\n                },\n                {\n                    \"name\": \"graph_\",\n                    \"type\": \"const TFGraph*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"The Turbofan graph.\"\n                },\n                {\n                    \"name\": \"positions_\",\n                    \"type\": \"const SourcePositionTable*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"The source position table.\"\n                },\n                {\n                    \"name\": \"origins_\",\n                    \"type\": \"const NodeOriginTable*\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"The node origin table.\"\n                },\n                {\n                    \"name\": \"first_node_\",\n                    \"type\": \"bool\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"A flag indicating if this is the first node being printed.\"\n                },\n                {\n                    \"name\": \"first_edge_\",\n                    \"type\": \"bool\",\n                    \"access\": \"protected\",\n                    \"purpose\": \"A flag indicating if this is the first edge being printed.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TFGraph\",\n                \"SourcePositionTable\",\n                \"NodeOriginTable\",\n                \"Node\",\n                \"Type\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nclass JSONGraphWriter {\n public:\n  JSONGraphWriter(std::ostream& os, const TFGraph* graph,\n                  const SourcePositionTable* positions,\n                  const NodeOriginTable* origins);\n\n  JSONGraphWriter(const JSONGraphWriter&) = delete;\n  JSONGraphWriter& operator=(const JSONGraphWriter&) = delete;\n\n  void PrintPhase(const char* phase_name);\n  void Print();\n\n protected:\n  void PrintNode(Node* node, bool is_live);\n  void PrintEdges(Node* node);\n  void PrintEdge(Node* from, int index, Node* to);\n  virtual std::optional<Type> GetType(Node* node);\n\n protected:\n  std::ostream& os_;\n  Zone* zone_;\n  const TFGraph* graph_;\n  const SourcePositionTable* positions_;\n  const NodeOriginTable* origins_;\n  bool first_node_;\n  bool first_edge_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"GraphAsJSON\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Wraps a TFGraph with its associated SourcePositionTable and NodeOriginTable for JSON serialization.\",\n            \"attributes\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"const TFGraph&\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The Turbofan graph.\"\n                },\n                {\n                    \"name\": \"positions\",\n                    \"type\": \"const SourcePositionTable*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The source position table.\"\n                },\n                {\n                    \"name\": \"origins\",\n                    \"type\": \"const NodeOriginTable*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The node origin table.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TFGraph\",\n                \"SourcePositionTable\",\n                \"NodeOriginTable\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct GraphAsJSON {\n  GraphAsJSON(const TFGraph& g, SourcePositionTable* p, NodeOriginTable* o)\n      : graph(g), positions(p), origins(o) {}\n  const TFGraph& graph;\n  const SourcePositionTable* positions;\n  const NodeOriginTable* origins;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"AsJSON\",\n            \"parent\": null,\n            \"about\": \"Creates a GraphAsJSON object from a TFGraph, SourcePositionTable, and NodeOriginTable.\",\n            \"logic\": \"Wraps the given graph and tables in a GraphAsJSON struct.\",\n            \"parameters\": [\n                {\n                    \"name\": \"g\",\n                    \"type\": \"const TFGraph&\",\n                    \"purpose\": \"The Turbofan graph.\"\n                },\n                {\n                    \"name\": \"p\",\n                    \"type\": \"SourcePositionTable*\",\n                    \"purpose\": \"The source position table.\"\n                },\n                {\n                    \"name\": \"o\",\n                    \"type\": \"NodeOriginTable*\",\n                    \"purpose\": \"The node origin table.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"GraphAsJSON\",\n                \"description\": \"A GraphAsJSON object wrapping the graph and tables.\"\n            },\n            \"dependencies\": [\n                \"TFGraph\",\n                \"SourcePositionTable\",\n                \"NodeOriginTable\",\n                \"GraphAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_INLINE V8_EXPORT_PRIVATE GraphAsJSON AsJSON(const TFGraph& g,\n                                               SourcePositionTable* p,\n                                               NodeOriginTable* o) {\n  return GraphAsJSON(g, p, o);\n}\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"parent\": null,\n            \"about\": \"Overloads the << operator for GraphAsJSON to output JSON representation.\",\n            \"logic\": \"Formats and outputs the GraphAsJSON data to the provided output stream as JSON.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"ad\",\n                    \"type\": \"const GraphAsJSON&\",\n                    \"purpose\": \"The GraphAsJSON object to output.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"GraphAsJSON\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream& os,\n                                           const GraphAsJSON& ad);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"AsRPO\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents a TFGraph for reverse postorder traversal.\",\n            \"attributes\": [\n                {\n                    \"name\": \"graph\",\n                    \"type\": \"const TFGraph&\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The Turbofan graph.\"\n                }\n            ],\n            \"dependencies\": [\n                \"TFGraph\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct AsRPO {\n  explicit AsRPO(const TFGraph& g) : graph(g) {}\n  const TFGraph& graph;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"parent\": null,\n            \"about\": \"Overloads the << operator for AsRPO to output representation.\",\n            \"logic\": \"Formats and outputs the AsRPO data to the provided output stream.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"ad\",\n                    \"type\": \"const AsRPO&\",\n                    \"purpose\": \"The AsRPO object to output.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"AsRPO\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE std::ostream& operator<<(std::ostream& os, const AsRPO& ad);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"AsC1VCompilation\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents a compilation info for C1 visualizer.\",\n            \"attributes\": [\n                {\n                    \"name\": \"info_\",\n                    \"type\": \"const OptimizedCompilationInfo*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The optimized compilation info.\"\n                }\n            ],\n            \"dependencies\": [\n                \"OptimizedCompilationInfo\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct AsC1VCompilation {\n  explicit AsC1VCompilation(const OptimizedCompilationInfo* info)\n      : info_(info) {}\n  const OptimizedCompilationInfo* info_;\n};\n        ]]></code>\n    </class>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"AsScheduledGraph\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents a scheduled graph for visualization.\",\n            \"attributes\": [\n                {\n                    \"name\": \"schedule\",\n                    \"type\": \"const Schedule*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The schedule of the graph.\"\n                }\n            ],\n            \"dependencies\": [\n                \"Schedule\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct AsScheduledGraph {\n  explicit AsScheduledGraph(const Schedule* schedule) : schedule(schedule) {}\n  const Schedule* schedule;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"operator<<\",\n            \"parent\": null,\n            \"about\": \"Overloads the << operator for AsScheduledGraph to output representation.\",\n            \"logic\": \"Formats and outputs the AsScheduledGraph data to the provided output stream.\",\n            \"parameters\": [\n                {\n                    \"name\": \"os\",\n                    \"type\": \"std::ostream&\",\n                    \"purpose\": \"The output stream.\"\n                },\n                {\n                    \"name\": \"scheduled\",\n                    \"type\": \"const AsScheduledGraph&\",\n                    \"purpose\": \"The AsScheduledGraph object to output.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"std::ostream&\",\n                \"description\": \"The output stream.\"\n            },\n            \"dependencies\": [\n                \"std::ostream\",\n                \"AsScheduledGraph\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstd::ostream& operator<<(std::ostream& os, const AsScheduledGraph& scheduled);\n        ]]></code>\n    </func>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"AsC1V\",\n            \"extends\": null,\n            \"implements\": [],\n            \"about\": \"Represents a schedule, instruction sequence and source position table for C1 visualizer.\",\n            \"attributes\": [\n                {\n                    \"name\": \"schedule_\",\n                    \"type\": \"const Schedule*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The schedule.\"\n                },\n                {\n                    \"name\": \"instructions_\",\n                    \"type\": \"const InstructionSequence*\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The instruction sequence.\"\n                },\n                {\n                    \"name\": \"positions_\",\n                    \"type\": \"const SourcePositionTable*\",\n                    \"access\": \"public\",\n                    \"purpose"
}