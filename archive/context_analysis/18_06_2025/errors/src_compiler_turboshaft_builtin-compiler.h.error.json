{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/builtin-compiler.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 117, column 52",
  "raw_response": "```xml\n<file>\n    <metadata>\n    {\n        \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/builtin-compiler.h\",\n        \"file_name\": \"builtin-compiler.h\",\n        \"language\": \"cpp\",\n        \"purpose\": \"Declares functions and data structures related to compiling builtins using the Turboshaft compiler.\"\n    }\n    </metadata>\n    <imports>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"purpose\": \"Includes necessary headers from the V8 codebase for builtins, bytecode interpretation, and code object manipulation.\"\n        }\n        </metadata>\n        <code><![CDATA[\n#include \"src/builtins/builtins.h\"\n#include \"src/interpreter/bytecodes.h\"\n#include \"src/objects/code-kind.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"struct\",\n            \"name\": \"BytecodeHandlerData\",\n            \"about\": \"Stores data associated with a bytecode handler, used during builtin compilation.\",\n            \"attributes\": [\n                {\n                    \"name\": \"bytecode\",\n                    \"type\": \"interpreter::Bytecode\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The bytecode being handled.\"\n                },\n                {\n                    \"name\": \"operand_scale\",\n                    \"type\": \"interpreter::OperandScale\",\n                    \"access\": \"public\",\n                    \"purpose\": \"The operand scale of the bytecode.\"\n                },\n                {\n                    \"name\": \"implicit_register_use\",\n                    \"type\": \"interpreter::ImplicitRegisterUse\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Implicit register usage of the bytecode (default: kNone).\"\n                },\n                {\n                    \"name\": \"made_call\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates if the bytecode handler made a call (default: false).\"\n                },\n                {\n                    \"name\": \"reloaded_frame_ptr\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates if the frame pointer was reloaded (default: false).\"\n                },\n                {\n                    \"name\": \"bytecode_array_valid\",\n                    \"type\": \"bool\",\n                    \"access\": \"public\",\n                    \"purpose\": \"Indicates if the bytecode array is still valid (default: true).\"\n                }\n            ],\n            \"dependencies\": [\n                \"interpreter::Bytecode\",\n                \"interpreter::OperandScale\",\n                \"interpreter::ImplicitRegisterUse\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nstruct BytecodeHandlerData {\n  BytecodeHandlerData(interpreter::Bytecode bytecode,\n                      interpreter::OperandScale operand_scale)\n      : bytecode(bytecode), operand_scale(operand_scale) {}\n\n  interpreter::Bytecode bytecode;\n  interpreter::OperandScale operand_scale;\n  interpreter::ImplicitRegisterUse implicit_register_use =\n      interpreter::ImplicitRegisterUse::kNone;\n  bool made_call = false;\n  bool reloaded_frame_ptr = false;\n  bool bytecode_array_valid = true;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"function\",\n            \"name\": \"BuildWithTurboshaftAssemblerImpl\",\n            \"about\": \"Builds a code object using the Turboshaft assembler based on a provided generator function.\",\n            \"logic\": \"This function takes a generator function, a call descriptor builder, and other parameters, and uses them to construct a code object via Turboshaft.\",\n            \"parameters\": [\n                {\n                    \"name\": \"isolate\",\n                    \"type\": \"Isolate*\",\n                    \"purpose\": \"The V8 isolate.\"\n                },\n                {\n                    \"name\": \"builtin\",\n                    \"type\": \"Builtin\",\n                    \"purpose\": \"The builtin being compiled.\"\n                },\n                {\n                    \"name\": \"generator\",\n                    \"type\": \"TurboshaftAssemblerGenerator\",\n                    \"purpose\": \"The generator function that produces the assembly code.\"\n                },\n                {\n                    \"name\": \"call_descriptor_builder\",\n                    \"type\": \"std::function<compiler::CallDescriptor*(Zone*)>\",\n                    \"purpose\": \"A function that builds the call descriptor for the builtin.\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"const char*\",\n                    \"purpose\": \"The name of the builtin.\"\n                },\n                {\n                    \"name\": \"options\",\n                    \"type\": \"const AssemblerOptions&\",\n                    \"purpose\": \"Assembler options.\"\n                },\n                {\n                    \"name\": \"code_kind\",\n                    \"type\": \"CodeKind\",\n                    \"purpose\": \"The kind of code being generated (default: CodeKind::BUILTIN).\"\n                },\n                {\n                    \"name\": \"bytecode_handler_data\",\n                    \"type\": \"std::optional<BytecodeHandlerData>\",\n                    \"purpose\": \"Optional data for bytecode handlers.\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"DirectHandle<Code>\",\n                \"description\": \"A direct handle to the generated code object.\"\n            },\n            \"dependencies\": [\n                \"Isolate\",\n                \"Builtin\",\n                \"TurboshaftAssemblerGenerator\",\n                \"compiler::CallDescriptor\",\n                \"AssemblerOptions\",\n                \"CodeKind\",\n                \"BytecodeHandlerData\",\n                \"Code\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nV8_EXPORT_PRIVATE DirectHandle<Code> BuildWithTurboshaftAssemblerImpl(\n    Isolate* isolate, Builtin builtin, TurboshaftAssemblerGenerator generator,\n    std::function<compiler::CallDescriptor*(Zone*)> call_descriptor_builder,\n    const char* name, const AssemblerOptions& options,\n    CodeKind code_kind = CodeKind::BUILTIN,\n    std::optional<BytecodeHandlerData> bytecode_handler_data = {});\n        ]]></code>\n    </func>\n    <typedef>\n        <metadata>\n        {\n            \"language\": \"cpp\",\n            \"type\": \"typedef\",\n            \"name\": \"TurboshaftAssemblerGenerator\",\n            \"about\": \"Defines a function pointer type for Turboshaft assembler generators.\",\n            \"dependencies\": [\n                \"compiler::turboshaft::PipelineData\",\n                \"Isolate\",\n                \"compiler::turboshaft::Graph\",\n                \"Zone\"\n            ]\n        }\n        </metadata>\n        <code><![CDATA[\nusing TurboshaftAssemblerGenerator =\n    void (*)(compiler::turboshaft::PipelineData*, Isolate*,\n             compiler::turboshaft::Graph&, Zone*);\n        ]]></code>\n    </typedef>\n    <dependencies>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"AssemblerOptions\",\n                \"about\": \"Options for the assembler.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            struct AssemblerOptions;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Isolate\",\n                \"about\": \"Represents a V8 isolate.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Isolate;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Zone\",\n                \"about\": \"Represents a memory allocation zone.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Zone;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"CallDescriptor\",\n                \"about\": \"Describes the calling convention for a function call.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class CallDescriptor;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"struct\",\n                \"name\": \"CustomPipelineDataComponent\",\n                \"about\": \"A custom component for pipeline data.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            struct CustomPipelineDataComponent;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Graph\",\n                \"about\": \"Represents a compiler graph.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Graph;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"PipelineData\",\n                \"about\": \"Data used during the compilation pipeline.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class PipelineData;\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"Code\",\n                \"about\": \"Represents compiled code.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            class Code;\n            ]]></code>\n        </class>\n        <typedef>\n            <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"typedef\",\n                \"name\": \"DirectHandle\",\n                \"about\": \"A direct handle to a V8 object.\"\n            }\n            </metadata>\n            <code><![CDATA[\n            template <typename T> class DirectHandle {};\n            ]]></code>\n        </typedef>\n    </dependencies>\n</file>\n```"
}