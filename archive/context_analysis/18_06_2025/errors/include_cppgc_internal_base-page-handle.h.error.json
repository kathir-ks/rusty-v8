{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/internal/base-page-handle.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 34, column 44",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/include/cppgc/internal/base-page-handle.h\",\n            \"file_name\": \"base-page-handle.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines the BasePageHandle class for managing pages in the cppgc garbage collector.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for HeapHandle, API constants, logging, and V8 configuration.\"\n            }\n        </metadata>\n        <code><![CDATA[\n#include \"cppgc/heap-handle.h\"\n#include \"cppgc/internal/api-constants.h\"\n#include \"cppgc/internal/logging.h\"\n#include \"v8config.h\"  // NOLINT(build/include_directory)\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"BasePageHandle\",\n                \"about\": \"Manages a page in the cppgc garbage collector. Provides methods for accessing the associated HeapHandle.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"heap_handle_\",\n                        \"type\": \"HeapHandle&\",\n                        \"access\": \"protected\",\n                        \"purpose\": \"Reference to the HeapHandle associated with this page.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"HeapHandle\",\n                    \"api_constants\",\n                    \"CPPGC_DCHECK\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\nclass BasePageHandle {\n public:\n  static V8_INLINE BasePageHandle* FromPayload(void* payload) {\n    return reinterpret_cast<BasePageHandle*>(\n        reinterpret_cast<uintptr_t>(payload) & ~(api_constants::kPageSize - 1));\n  }\n  static V8_INLINE const BasePageHandle* FromPayload(const void* payload) {\n    return FromPayload(const_cast<void*>(payload));\n  }\n\n  HeapHandle& heap_handle() { return heap_handle_; }\n  const HeapHandle& heap_handle() const { return heap_handle_; }\n\n protected:\n  explicit BasePageHandle(HeapHandle& heap_handle) : heap_handle_(heap_handle) {\n    CPPGC_DCHECK(reinterpret_cast<uintptr_t>(this) % api_constants::kPageSize ==\n                 0);\n  }\n\n  HeapHandle& heap_handle_;\n};\n        ]]></code>\n    </class>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"FromPayload\",\n                \"parent\": \"BasePageHandle\",\n                \"about\": \"Calculates the BasePageHandle from a given payload address.\",\n                \"logic\": \"Masks the payload address to get the page aligned address.  This relies on the assumption that BasePageHandle objects are page-aligned.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"payload\",\n                        \"type\": \"void*\",\n                        \"purpose\": \"The payload address.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"BasePageHandle*\",\n                    \"description\": \"The BasePageHandle corresponding to the payload.\"\n                },\n                \"dependencies\": [\n                    \"api_constants\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static V8_INLINE BasePageHandle* FromPayload(void* payload) {\n    return reinterpret_cast<BasePageHandle*>(\n        reinterpret_cast<uintptr_t>(payload) & ~(api_constants::kPageSize - 1));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"FromPayload\",\n                \"parent\": \"BasePageHandle\",\n                \"about\": \"Calculates the BasePageHandle from a given const payload address.\",\n                \"logic\": \"Calls the non-const overload of FromPayload after casting away constness.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"payload\",\n                        \"type\": \"const void*\",\n                        \"purpose\": \"The const payload address.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"const BasePageHandle*\",\n                    \"description\": \"The BasePageHandle corresponding to the payload.\"\n                },\n                \"dependencies\": [\n                    \"FromPayload\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  static V8_INLINE const BasePageHandle* FromPayload(const void* payload) {\n    return FromPayload(const_cast<void*>(payload));\n  }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"heap_handle\",\n                \"parent\": \"BasePageHandle\",\n                \"about\": \"Returns a reference to the HeapHandle.\",\n                \"logic\": \"Accessor method for the heap_handle_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"HeapHandle&\",\n                    \"description\": \"A reference to the HeapHandle.\"\n                },\n                \"dependencies\": [\n                    \"HeapHandle\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  HeapHandle& heap_handle() { return heap_handle_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"heap_handle\",\n                \"parent\": \"BasePageHandle\",\n                \"about\": \"Returns a const reference to the HeapHandle.\",\n                \"logic\": \"Const accessor method for the heap_handle_ member.\",\n                \"parameters\": [],\n                \"return\": {\n                    \"type\": \"const HeapHandle&\",\n                    \"description\": \"A const reference to the HeapHandle.\"\n                },\n                \"dependencies\": [\n                    \"HeapHandle\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  const HeapHandle& heap_handle() const { return heap_handle_; }\n        ]]></code>\n    </func>\n    <func>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"method\",\n                \"name\": \"BasePageHandle\",\n                \"parent\": \"BasePageHandle\",\n                \"about\": \"Constructor for BasePageHandle.\",\n                \"logic\": \"Initializes the heap_handle_ member and asserts that the object is page-aligned.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"heap_handle\",\n                        \"type\": \"HeapHandle&\",\n                        \"purpose\": \"The HeapHandle to associate with this page.\"\n                    }\n                ],\n                \"return\": {\n                    \"type\": \"void\",\n                    \"description\": \"No return value.\"\n                },\n                \"dependencies\": [\n                    \"CPPGC_DCHECK\",\n                    \"api_constants\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n  explicit BasePageHandle(HeapHandle& heap_handle) : heap_handle_(heap_handle) {\n    CPPGC_DCHECK(reinterpret_cast<uintptr_t>(this) % api_constants::kPageSize ==\n                 0);\n  }\n        ]]></code>\n    </func>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"HeapHandle\",\n                    \"about\": \"Handle to the heap.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class HeapHandle {};\n            ]]></code>\n        </class>\n        <variable>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"constant\",\n                    \"name\": \"api_constants::kPageSize\",\n                    \"about\": \"The size of a page in the heap.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                namespace api_constants {\n                  constexpr size_t kPageSize = 4096;\n                }\n            ]]></code>\n        </variable>\n        <macro>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"macro\",\n                    \"name\": \"CPPGC_DCHECK\",\n                    \"about\": \"A debug check macro.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                #define CPPGC_DCHECK(condition) assert(condition)\n            ]]></code>\n        </macro>\n    </dependencies>\n</file>\n```"
}