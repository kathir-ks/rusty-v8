{
  "file_path": "/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/snapshot-table-opindex.h",
  "error": "JSON and XML parsing failed",
  "json_error_if_any": "Skipped JSON parsing for whole response due to presence of XML tags; XML is primary.",
  "xml_error": "not well-formed (invalid token): line 30, column 47",
  "raw_response": "```xml\n<file>\n    <metadata>\n        {\n            \"path\": \"/home/kathirks_gc/v8_go/archive/codebase/src/compiler/turboshaft/snapshot-table-opindex.h\",\n            \"file_name\": \"snapshot-table-opindex.h\",\n            \"language\": \"cpp\",\n            \"purpose\": \"Defines a sparse snapshot table that maps OpIndex to keys in a SnapshotTable, using a hash map for efficient lookup when not all OpIndices have a corresponding key.\"\n        }\n    </metadata>\n    <imports>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"purpose\": \"Includes necessary headers for optional types, index definitions, and the base SnapshotTable class.\"\n            }\n        </metadata>\n        <code><![CDATA[\n            #include <optional>\n\n            #include \"src/compiler/turboshaft/index.h\"\n            #include \"src/compiler/turboshaft/snapshot-table.h\"\n        ]]></code>\n    </imports>\n    <class>\n        <metadata>\n            {\n                \"language\": \"cpp\",\n                \"type\": \"class\",\n                \"name\": \"SparseOpIndexSnapshotTable\",\n                \"extends\": \"SnapshotTable<Value, KeyData>\",\n                \"about\": \"A wrapper around a SnapshotTable that maps OpIndex to Key. Uses a ZoneAbslFlatHashMap to store this mapping, making it suitable for cases where not many OpIndex values have a corresponding key.\",\n                \"attributes\": [\n                    {\n                        \"name\": \"indices_to_keys_\",\n                        \"type\": \"ZoneAbslFlatHashMap<OpIndex, Key>\",\n                        \"access\": \"private\",\n                        \"purpose\": \"Stores the mapping from OpIndex to Key.\"\n                    }\n                ],\n                \"dependencies\": [\n                    \"SnapshotTable\",\n                    \"OpIndex\",\n                    \"ZoneAbslFlatHashMap\",\n                    \"Key\",\n                    \"Value\",\n                    \"KeyData\",\n                    \"Zone\"\n                ]\n            }\n        </metadata>\n        <code><![CDATA[\n            template <class Value, class KeyData = NoKeyData>\n            class SparseOpIndexSnapshotTable : public SnapshotTable<Value, KeyData> {\n            public:\n              using Base = SnapshotTable<Value, KeyData>;\n              using Key = typename SnapshotTable<Value, KeyData>::Key;\n\n              explicit SparseOpIndexSnapshotTable(Zone* zone)\n                  : Base(zone), indices_to_keys_(zone) {}\n\n              using Base::Get;\n              Value Get(OpIndex idx) const {\n                auto it = indices_to_keys_.find(idx);\n                if (it == indices_to_keys_.end()) return Value{};\n                return Base::Get(it->second);\n              }\n\n              Value GetPredecessorValue(OpIndex idx, int predecessor_index) {\n                auto it = indices_to_keys_.find(idx);\n                if (it == indices_to_keys_.end()) return Value{};\n                return Base::GetPredecessorValue(it->second, predecessor_index);\n              }\n\n              using Base::Set;\n              bool Set(OpIndex idx, Value new_value) {\n                Key key = GetOrCreateKey(idx);\n                return Base::Set(key, new_value);\n              }\n\n              void NewKey(OpIndex idx, KeyData data, Value initial_value = Value{}) {\n                DCHECK(!indices_to_keys_[idx].has_value());\n                indices_to_keys_[idx] = Base::NewKey(data, initial_value);\n              }\n              void NewKey(OpIndex idx, Value initial_value = Value{}) {\n                NewKey(idx, KeyData{}, initial_value);\n              }\n\n              bool HasKeyFor(OpIndex idx) const {\n                return indices_to_keys_.find(idx) != indices_to_keys_.end();\n              }\n\n              std::optional<Key> TryGetKeyFor(OpIndex idx) const {\n                auto it = indices_to_keys_.find(idx);\n                if (it != indices_to_keys_.end()) return it->second;\n                return std::nullopt;\n              }\n\n             private:\n              Key GetOrCreateKey(OpIndex idx) {\n                auto it = indices_to_keys_.find(idx);\n                if (it != indices_to_keys_.end()) return it->second;\n                Key key = Base::NewKey();\n                indices_to_keys_.insert({idx, key});\n                return key;\n              }\n              ZoneAbslFlatHashMap<OpIndex, Key> indices_to_keys_;\n            };\n        ]]></code>\n    </class>\n    <dependencies>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"SnapshotTable\",\n                    \"about\": \"Base class for snapshot tables.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <class Value, class KeyData = NoKeyData>\n                class SnapshotTable {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"ZoneAbslFlatHashMap\",\n                    \"about\": \"A hash map with zone allocation.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                template <class K, class V>\n                class ZoneAbslFlatHashMap {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"Zone\",\n                    \"about\": \"Memory management zone.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class Zone {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"OpIndex\",\n                    \"about\": \"Index type for operations.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class OpIndex {};\n            ]]></code>\n        </class>\n        <class>\n            <metadata>\n                {\n                    \"language\": \"cpp\",\n                    \"type\": \"class\",\n                    \"name\": \"NoKeyData\",\n                    \"about\": \"Default type for KeyData when no extra data is needed.\"\n                }\n            </metadata>\n            <code><![CDATA[\n                class NoKeyData {};\n            ]]></code>\n        </class>\n    </dependencies>\n</file>\n```"
}