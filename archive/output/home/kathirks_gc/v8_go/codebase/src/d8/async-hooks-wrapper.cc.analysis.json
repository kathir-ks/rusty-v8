{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/d8/async-hooks-wrapper.cc",
  "imports": [
    "src/d8/async-hooks-wrapper.h",
    "include/v8-function.h",
    "include/v8-local-handle.h",
    "include/v8-primitive.h",
    "include/v8-template.h",
    "src/api/api-inl.h",
    "src/api/api.h",
    "src/d8/d8.h",
    "src/execution/isolate-inl.h",
    "src/objects/managed-inl.h"
  ],
  "classes": [
    {
      "name": "AsyncHooks",
      "properties": [
        "v8_isolate_",
        "async_hook_ctor",
        "async_hooks_templ",
        "async_id_symbol",
        "trigger_id_symbol",
        "asyncContexts",
        "current_async_id",
        "async_wraps_",
        "skip_after_termination_"
      ],
      "methods": [
        {
          "name": "AsyncHooks",
          "parameters": [
            "v8::Isolate* v8_isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for AsyncHooks. Initializes async context stack, creates function templates for AsyncHook class, and sets the PromiseHook for the isolate."
        },
        {
          "name": "~AsyncHooks",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for AsyncHooks.  Unsets the promise hook and clears the async_wraps_ vector."
        },
        {
          "name": "GetExecutionAsyncId",
          "parameters": [],
          "return_type": "async_id_t",
          "logic": "Returns the current execution async ID from the top of the async context stack."
        },
        {
          "name": "GetTriggerAsyncId",
          "parameters": [],
          "return_type": "async_id_t",
          "logic": "Returns the current trigger async ID from the top of the async context stack."
        },
        {
          "name": "CreateHook",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "Local<Object>",
          "logic": "Creates a new AsyncHook instance.  Takes an object argument containing hook functions (init, before, after, promiseResolve), wraps them in an AsyncHooksWrap, and associates the wrapper with a new JavaScript object. Returns the newly created JS object."
        },
        {
          "name": "ShellPromiseHook",
          "parameters": [
            "PromiseHookType type",
            "Local<Promise> promise",
            "Local<Value> parent"
          ],
          "return_type": "void",
          "logic": "The global promise hook that gets triggered at different stages of a promise lifecycle (init, before, after, resolve). It retrieves the relevant AsyncHooksWrap instances and dispatches to PromiseHookDispatch."
        },
        {
          "name": "PromiseHookDispatch",
          "parameters": [
            "PromiseHookType type",
            "Local<Promise> promise",
            "Local<Value> parent",
            "const AsyncHooksWrap& wrap",
            "AsyncHooks* hooks"
          ],
          "return_type": "void",
          "logic": "Dispatches to the individual hooks (init, before, after, promiseResolve) defined within AsyncHooksWrap.  It calls the Javascript hook functions if they are defined and if the hook is enabled."
        }
      ]
    },
    {
      "name": "AsyncHooksWrap",
      "properties": [
        "isolate_",
        "init_function_",
        "before_function_",
        "after_function_",
        "promiseResolve_function_",
        "enabled_"
      ],
      "methods": [
        {
          "name": "Enable",
          "parameters": [],
          "return_type": "void",
          "logic": "Enables the async hook wrapper."
        },
        {
          "name": "Disable",
          "parameters": [],
          "return_type": "void",
          "logic": "Disables the async hook wrapper."
        },
        {
          "name": "init_function",
          "parameters": [],
          "return_type": "v8::Local<v8::Function>",
          "logic": "Getter for the init function."
        },
        {
          "name": "set_init_function",
          "parameters": [
            "v8::Local<v8::Function> value"
          ],
          "return_type": "void",
          "logic": "Setter for the init function."
        },
        {
          "name": "before_function",
          "parameters": [],
          "return_type": "v8::Local<v8::Function>",
          "logic": "Getter for the before function."
        },
        {
          "name": "set_before_function",
          "parameters": [
            "v8::Local<v8::Function> value"
          ],
          "return_type": "void",
          "logic": "Setter for the before function."
        },
        {
          "name": "after_function",
          "parameters": [],
          "return_type": "v8::Local<v8::Function>",
          "logic": "Getter for the after function."
        },
        {
          "name": "set_after_function",
          "parameters": [
            "v8::Local<v8::Function> value"
          ],
          "return_type": "void",
          "logic": "Setter for the after function."
        },
        {
          "name": "promiseResolve_function",
          "parameters": [],
          "return_type": "v8::Local<v8::Function>",
          "logic": "Getter for the promiseResolve function."
        },
        {
          "name": "set_promiseResolve_function",
          "parameters": [
            "v8::Local<v8::Function> value"
          ],
          "return_type": "void",
          "logic": "Setter for the promiseResolve function."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "UnwrapHook",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "std::shared_ptr<AsyncHooksWrap>",
      "logic": "Retrieves the AsyncHooksWrap instance associated with the given JavaScript object. This function is used by EnableHook and DisableHook.  It validates that the `this` value is an instance of the AsyncHook constructor."
    },
    {
      "name": "EnableHook",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Enables the async hook associated with the `this` object."
    },
    {
      "name": "DisableHook",
      "parameters": [
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "void",
      "logic": "Disables the async hook associated with the `this` object."
    }
  ]
}