{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/d8/d8-console.h",
  "imports": [
    "<map>",
    "src/base/platform/time.h",
    "src/debug/interface-types.h"
  ],
  "classes": [
    {
      "name": "D8Console",
      "properties": [
        "isolate_",
        "timers_",
        "origin_",
        "profiler_",
        "profiler_active_"
      ],
      "methods": [
        {
          "name": "D8Console",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for the D8Console class.  Likely initializes the isolate_ member."
        },
        {
          "name": "~D8Console",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the D8Console class."
        },
        {
          "name": "profiler",
          "parameters": [],
          "return_type": "CpuProfiler*",
          "logic": "Returns a pointer to the CpuProfiler instance."
        },
        {
          "name": "DisposeProfiler",
          "parameters": [],
          "return_type": "void",
          "logic": "Disposes of the CpuProfiler instance, likely deleting it and setting the pointer to nullptr."
        },
        {
          "name": "Assert",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.assert() calls in JavaScript. Evaluates the assertion and logs an error if it fails."
        },
        {
          "name": "Log",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.log() calls in JavaScript. Logs the provided arguments to the console."
        },
        {
          "name": "Error",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.error() calls in JavaScript. Logs the provided arguments as an error to the console."
        },
        {
          "name": "Warn",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.warn() calls in JavaScript. Logs the provided arguments as a warning to the console."
        },
        {
          "name": "Info",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.info() calls in JavaScript. Logs the provided arguments as informational messages to the console."
        },
        {
          "name": "Debug",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.debug() calls in JavaScript. Logs the provided arguments as debug messages to the console."
        },
        {
          "name": "Profile",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Handles console.profile() calls in JavaScript. Starts a CPU profiling session with the given name."
        },
        {
          "name": "ProfileEnd",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext& context"
          ],
          "return_type": "void",
          "logic": "Handles console.profileEnd() calls in JavaScript. Ends the CPU profiling session with the given name and outputs the profile data."
        },
        {
          "name": "Time",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.time() calls in JavaScript. Starts a timer with the given name."
        },
        {
          "name": "TimeLog",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.timeLog() calls in JavaScript. Logs the time elapsed since the timer was started."
        },
        {
          "name": "TimeEnd",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.timeEnd() calls in JavaScript. Ends the timer with the given name and logs the elapsed time."
        },
        {
          "name": "TimeStamp",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.timeStamp() calls in JavaScript. Logs a timestamp relative to the origin time."
        },
        {
          "name": "Trace",
          "parameters": [
            "const debug::ConsoleCallArguments& args",
            "const v8::debug::ConsoleContext&"
          ],
          "return_type": "void",
          "logic": "Handles console.trace() calls in JavaScript. Logs a stack trace to the console."
        }
      ]
    }
  ],
  "functions": []
}