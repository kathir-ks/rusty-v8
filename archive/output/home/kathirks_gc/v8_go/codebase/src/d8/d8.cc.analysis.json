{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/d8/d8.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/d8/d8.cc\",\n  \"imports\": [\n    \"<errno.h>\",\n    \"<fcntl.h>\",\n    \"<stdlib.h>\",\n    \"<string.h>\",\n    \"<sys/stat.h>\",\n    \"<algorithm>\",\n    \"<fstream>\",\n    \"<iomanip>\",\n    \"<iterator>\",\n    \"<string>\",\n    \"<tuple>\",\n    \"<type_traits>\",\n    \"<unordered_map>\",\n    \"<utility>\",\n    \"<vector>\",\n    \"third_party/vtune/v8-vtune.h\",\n    \"include/libplatform/libplatform.h\",\n    \"include/libplatform/v8-tracing.h\",\n    \"include/v8-function.h\",\n    \"include/v8-initialization.h\",\n    \"include/v8-inspector.h\",\n    \"include/v8-isolate.h\",\n    \"include/v8-json.h\",\n    \"include/v8-locker.h\",\n    \"include/v8-profiler.h\",\n    \"include/v8-wasm.h\",\n    \"src/api/api-inl.h\",\n    \"src/base/cpu.h\",\n    \"src/base/fpu.h\",\n    \"src/base/logging.h\",\n    \"src/base/platform/memory.h\",\n    \"src/base/platform/platform.h\",\n    \"src/base/platform/time.h\",\n    \"src/base/platform/wrappers.h\",\n    \"src/base/sanitizer/msan.h\",\n    \"src/base/sys-info.h\",\n    \"src/base/utils/random-number-generator.h\",\n    \"src/compiler-dispatcher/optimizing-compile-dispatcher.h\",\n    \"src/d8/d8-console.h\",\n    \"src/d8/d8-platforms.h\",\n    \"src/d8/d8.h\",\n    \"src/debug/debug-interface.h\",\n    \"src/deoptimizer/deoptimizer.h\",\n    \"src/diagnostics/basic-block-profiler.h\",\n    \"src/execution/microtask-queue.h\",\n    \"src/execution/v8threads.h\",\n    \"src/execution/vm-state-inl.h\",\n    \"src/flags/flags.h\",\n    \"src/handles/maybe-handles.h\",\n    \"src/heap/parked-scope-inl.h\",\n    \"src/init/v8.h\",\n    \"src/interpreter/interpreter.h\",\n    \"src/logging/counters.h\",\n    \"src/logging/log-file.h\",\n    \"src/objects/js-array.h\",\n    \"src/objects/managed-inl.h\",\n    \"src/objects/objects-inl.h\",\n    \"src/objects/objects.h\",\n    \"src/parsing/parse-info.h\",\n    \"src/parsing/parsing.h\",\n    \"src/parsing/scanner-character-streams.h\",\n    \"src/profiler/profile-generator.h\",\n    \"src/snapshot/snapshot.h\",\n    \"src/tasks/cancelable-task.h\",\n    \"src/utils/ostreams.h\",\n    \"src/utils/utils.h\",\n    \"<mach/mach.h>\",\n    \"<mach/task_policy.h>\",\n    \"src/maglev/maglev-concurrent-dispatcher.h\",\n    \"<partition_alloc/shim/allocator_shim_default_dispatch_to_partition_alloc.h>\",\n    \"<signal.h>\",\n    \"src/fuzzilli/cov.h\",\n    \"src/fuzzilli/fuzzilli.h\",\n    \"perfetto/tracing/track_event.h\",\n    \"perfetto/tracing/track_event_legacy.h\",\n    \"unicode/locid.h\",\n    \"<sys/mman.h>\",\n    \"<windows.h>\",\n    \"<unistd.h>\",\n    \"src/trap-handler/trap-handler.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"ArrayBufferAllocatorBase\",\n      \"properties\": [\n        \"allocator_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates a buffer of the given length using the default V8 allocator.\"\n        },\n        {\n          \"name\": \"AllocateUninitialized\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates an uninitialized buffer of the given length using the default V8 allocator.\"\n        },\n        {\n          \"name\": \"Free\",\n          \"parameters\": [\n            \"void* data\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees the allocated buffer of the given length using the default V8 allocator.\"\n        },\n        {\n          \"name\": \"GetPageAllocator\",\n          \"parameters\": [],\n          \"return_type\": \"PageAllocator*\",\n          \"logic\": \"Returns the page allocator used by this allocator.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ShellArrayBufferAllocator\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates a buffer using virtual memory if the length exceeds kVMThreshold, otherwise delegates to ArrayBufferAllocatorBase::Allocate.\"\n        },\n        {\n          \"name\": \"AllocateUninitialized\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates an uninitialized buffer using virtual memory if the length exceeds kVMThreshold, otherwise delegates to ArrayBufferAllocatorBase::AllocateUninitialized.\"\n        },\n        {\n          \"name\": \"Free\",\n          \"parameters\": [\n            \"void* data\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees a buffer allocated using virtual memory or by ArrayBufferAllocatorBase, depending on the length.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MockArrayBufferAllocator\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates a buffer using the base class allocator after adjusting the length, limiting it to 10MB.\"\n        },\n        {\n          \"name\": \"AllocateUninitialized\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates an uninitialized buffer using the base class allocator after adjusting the length, limiting it to 10MB.\"\n        },\n        {\n          \"name\": \"Free\",\n          \"parameters\": [\n            \"void* data\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees a buffer using the base class allocator after adjusting the length, limiting it to 10MB.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MockArrayBufferAllocatiorWithLimit\",\n      \"properties\": [\n        \"limit_\",\n        \"space_left_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Attempts to allocate a buffer with the adjusted length, failing if it exceeds the remaining space (space_left_). It reduces the remaining space on success.\"\n        },\n        {\n          \"name\": \"AllocateUninitialized\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Attempts to allocate an uninitialized buffer with the adjusted length, failing if it exceeds the remaining space. It reduces the remaining space on success.\"\n        },\n        {\n          \"name\": \"Free\",\n          \"parameters\": [\n            \"void* data\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees a buffer and increases the remaining space.\"\n        },\n        {\n          \"name\": \"MaxAllocationSize\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the allocation limit.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MultiMappedAllocator\",\n      \"properties\": [\n        \"regions_\",\n        \"regions_mutex_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates memory using multiple mappings if the length exceeds kChunkSize, otherwise delegates to ArrayBufferAllocatorBase::Allocate.\"\n        },\n        {\n          \"name\": \"AllocateUninitialized\",\n          \"parameters\": [\n            \"size_t length\"\n          ],\n          \"return_type\": \"void*\",\n          \"logic\": \"Allocates uninitialized memory using multiple mappings if the length exceeds kChunkSize, otherwise delegates to ArrayBufferAllocatorBase::AllocateUninitialized.\"\n        },\n        {\n          \"name\": \"Free\",\n          \"parameters\": [\n            \"void* data\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Frees memory allocated using multiple mappings or by ArrayBufferAllocatorBase, depending on the length.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TraceConfigParser\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"FillTraceConfig\",\n          \"parameters\": [\n            \"v8::Isolate* isolate\",\n            \"platform::tracing::TraceConfig* trace_config\",\n            \"const char* json_str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Parses a JSON string and fills a TraceConfig object with the included categories.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExternalOwningOneByteStringResource\",\n      \"properties\": [\n        \"file_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns a pointer to the mapped file's data.\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the size of the mapped file.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Shell\",\n      \"properties\": [\n        \"counter_map_\",\n        \"counter_mutex_\",\n        \"counters_file_\",\n        \"local_counters_\",\n        \"counters_\",\n        \"context_mutex_\",\n        \"kInitialTicks\",\n        \"stringify_function_\",\n        \"profiler_end_callback_lock_\",\n        \"profiler_end_callback_\",\n        \"workers_mutex_\",\n        \"allow_new_workers_\",\n        \"running_workers_\",\n        \"script_executed_\",\n        \"valid_fuzz_script_\",\n        \"cached_code_mutex_\",\n        \"cached_code_map_\",\n        \"unhandled_promise_rejections_\",\n        \"evaluation_context_\",\n        \"array_buffer_allocator\",\n        \"check_d8_flag_contradictions\",\n        \"options\",\n        \"quit_once_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LookupCodeCache\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<Value> source\"\n          ],\n          \"return_type\": \"ScriptCompiler::CachedData*\",\n          \"logic\": \"Looks up code cache from previous executions.\"\n        },\n        {\n          \"name\": \"StoreInCodeCache\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<Value> source\",\n            \"const ScriptCompiler::CachedData* cache_data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores code cache from execution to reuse on following runs.\"\n        },\n        {\n          \"name\": \"CompileString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<Context> context\",\n            \"Local<String> source\",\n            \"const ScriptOrigin& origin\"\n          ],\n          \"return_type\": \"MaybeLocal<T>\",\n          \"logic\": \"Compiles a string into a Script or Module.\"\n        },\n        {\n          \"name\": \"ExecuteString\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<String> source\",\n            \"Local<String> name\",\n            \"ReportExceptions report_exceptions\",\n            \"Global<Value>* out_result\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Executes a string of Javascript code within a given isolate's context.\"\n        },\n        {\n          \"name\": \"FetchModuleSource\",\n          \"parameters\": [\n            \"Local<Module> referrer\",\n            \"Local<Context> context\",\n            \"const std::string& module_specifier\",\n            \"ModuleType module_type\"\n          ],\n          \"return_type\": \"MaybeLocal<Object>\",\n          \"logic\": \"Fetches the source object (WasmModuleObject) for the module specified by module_specifier and of module_type\"\n        },\n        {\n          \"name\": \"FetchModuleTree\",\n          \"parameters\": [\n            \"Local<Module> referrer\",\n            \"Local<Context> context\",\n            \"const std::string& module_specifier\",\n            \"ModuleType module_type\"\n          ],\n          \"return_type\": \"MaybeLocal<Module>\",\n          \"logic\": \"Recursively fetches, compiles, and instantiates a module and its dependencies.\"\n        },\n        {\n          \"name\": \"JSONModuleEvaluationSteps\",\n          \"parameters\": [\n            \"Local<Context> context\",\n            \"Local<Module> module\"\n          ],\n          \"return_type\": \"MaybeLocal<Value>\",\n          \"logic\": \"Provides the implementation for synthetic JSON module exports, specifically exporting the default property.\"\n        },\n        {\n          \"name\": \"HostImportModuleDynamically\",\n          \"parameters\": [\n            \"Local<Context> context\",\n            \"Local<Data> host_defined_options\",\n            \"Local<Value> resource_name\",\n            \"Local<String> specifier\",\n            \"Local<FixedArray> import_attributes\"\n          ],\n          \"return_type\": \"MaybeLocal<Promise>\",\n          \"logic\": \"Starts asynchronous module loading. The loading is asynchronous to allow for the possibility of performing I/O, for example.\"\n        },\n                {\n          \"name\": \"HostImportModuleWithPhaseDynamically\",\n          \"parameters\": [\n            \"Local<Context> context\",\n            \"Local<Data> host_defined_options\",\n            \"Local<Value> resource_name\",\n            \"Local<String> specifier\",\n            \"ModuleImportPhase phase\",\n            \"Local<FixedArray> import_attributes\"\n          ],\n          \"return_type\": \"MaybeLocal<Promise>\",\n          \"logic\": \"Starts asynchronous module loading with a given phase\"\n        },\n        {\n          \"name\": \"HostInitializeImportMetaObject\",\n          \"parameters\": [\n            \"Local<Context> context\",\n            \"Local<Module> module\",\n            \"Local<Object> meta\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the import.meta object for a module.\"\n        },\n        {\n          \"name\": \"HostCreateShadowRealmContext\",\n          \"parameters\": [\n            \"Local<Context> initiator_context\"\n          ],\n          \"return_type\": \"MaybeLocal<Context>\",\n          \"logic\": \"Creates a ShadowRealm context for a module.\"\n        },\n        {\n          \"name\": \"ExecuteModule\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* file_name\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Executes a module.\"\n        },\n        {\n          \"name\": \"LoadJSON\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* file_name\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Treats every line as a JSON value and parse it.\"\n        },\n        {\n          \"name\": \"GetTimestamp\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns a timestamp measured in milliseconds.\"\n        },\n        {\n          \"name\": \"GetTracingTimestampFromPerformanceTimestamp\",\n          \"parameters\": [\n            \"double performance_timestamp\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Convert a timestamp from performance.now() to tracing's timestamp base.\"\n        },\n        {\n          \"name\": \"PerformanceNow\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.now().\"\n        },\n        {\n          \"name\": \"PerformanceMark\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.mark().\"\n        },\n        {\n          \"name\": \"PerformanceMeasure\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.measure().\"\n        },\n        {\n          \"name\": \"PerformanceMeasureMemory\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for performance.measureMemory().\"\n        },\n        {\n          \"name\": \"RealmCurrent\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.current().\"\n        },\n        {\n          \"name\": \"RealmOwner\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.owner().\"\n        },\n        {\n          \"name\": \"RealmGlobal\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.global().\"\n        },\n        {\n          \"name\": \"RealmCreate\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.create().\"\n        },\n        {\n          \"name\": \"RealmCreateAllowCrossRealmAccess\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.createAllowCrossRealmAccess().\"\n        },\n        {\n          \"name\": \"RealmNavigate\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.navigate().\"\n        },\n        {\n          \"name\": \"RealmDetachGlobal\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.detachGlobal().\"\n        },\n        {\n          \"name\": \"RealmDispose\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.dispose().\"\n        },\n        {\n          \"name\": \"RealmSwitch\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.switch().\"\n        },\n        {\n          \"name\": \"RealmEval\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback for Realm.eval().\"\n        },\n        {\n          \"name\": \"LogGetAndStop\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Callback to get and stop the log.\"\n        },\n                {\n          \"name\": \"TestVerifySourcePositions\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Verifies source positions for a function.\"\n        },\n        {\n          \"name\": \"InstallConditionalFeatures\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Installs conditional features for a given isolate.\"\n        },\n         {\n          \"name\": \"EnableJSPI\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Enables JSPI (JavaScript Platform Interface) on the isolate.\"\n        },\n        {\n          \"name\": \"SetFlushDenormals\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets flush denormals mode.\"\n        },\n        {\n          \"name\": \"AsyncHooksCreateHook\",\n          \"parameters\": [\n            \"const v8::FunctionCallbackInfo<v8::Value>& info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Creates AsyncHooks for a given isolate\"\n        },\n        {\n          \"name\": \"DoHostImportModuleDynamically\",\n          \"parameters\": [\n            \"void* import_data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Dynamically imports a module\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DummySourceStream\",\n      \"properties\": [\n        \"source_length_\",\n        \"source_buffer_\",\n        \"done_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetMoreData\",\n          \"parameters\": [\n            \"const uint8_t** src\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Provides more data from the source string for streaming compilation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StreamerThread\",\n      \"properties\": [\n        \"task_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs the assigned ScriptStreamingTask.\"\n        }\n      ]\n    },\n     {\n      \"name\": \"ModuleEmbedderData\",\n      \"properties\": [\n        \"isolate_\",\n        \"module_map\",\n        \"module_source_map\",\n        \"module_to_specifier_map\",\n        \"json_module_to_parsed_json_map\",\n        \"origin\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetModuleSpecifier\",\n          \"parameters\": [\n            \"Local<Module> module\"\n          ],\n          \"return_type\": \"std::string\",\n          \"logic\": \"Returns the module specifier for a given module.\"\n        },\n        {\n          \"name\": \"GetModule\",\n          \"parameters\": [\n            \"std::pair<std::string, ModuleType> module_specifier_and_type\"\n          ],\n          \"return_type\": \"Local<Module>\",\n          \"logic\": \"Returns the module corresponding to the given specifier and type.\"\n        },\n        {\n          \"name\": \"GetModuleSource\",\n          \"parameters\": [\n            \"std::pair<std::string, ModuleType> module_specifier_and_type\"\n          ],\n          \"return_type\": \"Local<Object>\",\n          \"logic\": \"Returns the module source object corresponding to the given specifier and type.\"\n        },\n        {\n          \"name\": \"GetJsonModuleValue\",\n          \"parameters\": [\n            \"Local<Module> module\"\n          ],\n          \"return_type\": \"Local<Value>\",\n          \"logic\": \"Returns the parsed JSON value for a given JSON module.\"\n        },\n        {\n          \"name\": \"ModuleTypeFromImportSpecifierAndAttributes\",\n          \"parameters\": [\n            \"Local<Context> context\",\n            \"const std::string& specifier\",\n            \"Local<FixedArray> import_attributes\",\n            \"bool hasPositions\"\n          ],\n          \"return_type\": \"ModuleType\",\n          \"logic\": \"Determines the module type based on the specifier and import attributes.\"\n        }\n      ]\n    },\n     {\n      \"name\": \"D8WasmAsyncResolvePromiseTask\",\n      \"properties\": [\n        \"isolate_\",\n        \"context_\",\n        \"resolver_\",\n        \"result_\",\n        \"success_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Asynchronously resolves or rejects a promise with a WASM module evaluation result.\"\n        }\n      ]\n    },\n        {\n          \"name\": \"PerIsolateData\",\n          \"properties\": [\n            \"isolate_\",\n            \"realms_\",\n            \"async_hooks_wrapper_\",\n            \"ignore_unhandled_promises_\",\n            \"realm_count_\",\n            \"realm_current_\",\n            \"realm_switch_\",\n            \"realm_shared_\",\n            \"test_api_object_ctor_\",\n            \"dom_node_ctor_\",\n            \"registered_workers_\",\n            \"worker_message_callbacks_\"\n            ],\n          \"methods\": [\n            {\n              \"name\": \"RemoveUnhandledPromise\",\n              \"parameters\": [\n                \"Local<Promise> promise\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Removes promise from the list of unhandled ones if it now has a rejection handler attached.\"\n            },\n            {\n              \"name\": \"AddUnhandledPromise\",\n              \"parameters\": [\n                \"Local<Promise> promise\",\n                \"Local<Message> message\",\n                \"Local<Value> exception\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Adds promise to the list of promises that have been rejected but don't have an error handler attached yet.\"\n            },\n            {\n              \"name\": \"HandleUnhandledPromiseRejections\",\n              \"parameters\": [],\n              \"return_type\": \"int\",\n              \"logic\": \"Reports unhandled rejections and clears the list of those.\"\n            },\n                {\n              \"name\": \"AddDynamicImportData\",\n              \"parameters\": [\n                \"DynamicImportData* data\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Adds data to keep track of dynamic import data (mainly for LeakSanitizer purposes).\"\n            },\n                {\n              \"name\": \"DeleteDynamicImportData\",\n              \"parameters\": [\n                \"DynamicImportData* data\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Deletes dynamic import data.\"\n            },\n              {\n              \"name\": \"GetTestApiObjectCtor\",\n              \"parameters\": [],\n              \"return_type\": \"Local<FunctionTemplate>\",\n              \"logic\": \"Returns the test API object constructor template.\"\n            },\n                {\n              \"name\": \"SetTestApiObjectCtor\",\n              \"parameters\": [\n                \"Local<FunctionTemplate> ctor\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Sets the test API object constructor template.\"\n            },\n           {\n              \"name\": \"GetDomNodeCtor\",\n              \"parameters\": [],\n              \"return_type\": \"Local<FunctionTemplate>\",\n              \"logic\": \"Returns the DOM node constructor template.\"\n            },\n             {\n              \"name\": \"SetDomNodeCtor\",\n              \"parameters\": [\n                \"Local<FunctionTemplate> ctor\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Sets the DOM node constructor template.\"\n            },\n             {\n              \"name\": \"HasRunningSubscribedWorkers\",\n              \"parameters\": [],\n              \"return_type\": \"bool\",\n              \"logic\": \"Returns true if there are any subscribed workers still running.\"\n            },\n          {\n              \"name\": \"RegisterWorker\",\n              \"parameters\": [\n                \"std::shared_ptr<Worker> worker\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Registers a worker.\"\n            },\n            {\n              \"name\": \"SubscribeWorkerOnMessage\",\n              \"parameters\": [\n                \"const std::shared_ptr<Worker>& worker\",\n                \"Local<Context> context\",\n                \"Local<Function> callback\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Subscribes to message events from the given worker.\"\n            },\n            {\n              \"name\": \"GetWorkerOnMessage\",\n              \"parameters\": [\n                \"const std::shared_ptr<Worker>& worker\"\n              ],\n              \"return_type\": \"std::pair<Local<Context>, Local<Function>>\",\n              \"logic\": \"Returns the message callback for the given worker.\"\n            },\n            {\n              \"name\": \"UnregisterWorker\",\n              \"parameters\": [\n                \"const std::shared_ptr<Worker>& worker\"\n              ],\n              \"return_type\": \"void\",\n              \"logic\": \"Unregisters the given worker.\"\n            },\n              {\n              \"name\": \"RealmFind\",\n              \"parameters\": [\n               \"Local<Context> context\"\n              ],\n              \"return_type\": \"int\",\n              \"logic\": \"Returns the index in the realm array in the PerIsolateData.\"\n            },\n                   {\n              \"name\": \"RealmIndexOrThrow\",\n              \"parameters\": [\n               \"const v8::FunctionCallbackInfo<v8::Value>& info\",\n                \"int arg_offset\"\n              ],\n              \"return_type\": \"int\",\n              \"logic\": \"Return realm index or throws an error message if invalid.\"\n            }\n\n          ]\n        },\n          {\n          \"name\": \"DynamicImportData\",\n          \"properties\": [\n             \"isolate\",\n            \"context\",\n            \"referrer\",\n            \"specifier\",\n            \"phase\",\n            \"import_attributes\",\n            \"resolver\"\n          ],\n          \"methods\": []\n         }\n\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"ThrowError\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"const char (&message)[N]\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Throws an error with the given message.\"\n    },\n    {\n      \"name\": \"ThrowError\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Local<String> message\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Throws an error with the given message.\"\n    },\n    {\n      \"name\": \"TryGetValue\",\n      \"parameters\": [\n        \"v8::Isolate* isolate\",\n        \"Local<Context> context\",\n        \"Local<v8::Object> object\",\n        \"const char* property\"\n      ],\n      \"return_type\": \"MaybeLocal<Value>\",\n      \"logic\": \"Tries to get a value from an object's property, returning an empty MaybeLocal if it fails.\"\n    },\n    {\n      \"name\": \"GetValue\",\n      \"parameters\": [\n        \"v8::Isolate* isolate\",\n        \"Local<Context> context\",\n        \"Local<v8::Object> object\",\n        \"const char* property\"\n      ],\n      \"return_type\": \"Local<Value>\",\n      \"logic\": \"Gets a value from an object's property, unwrapping the MaybeLocal.\"\n    },\n    {\n      \"name\": \"GetWorkerFromInternalField\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Local<Object> object\"\n      ],\n      \"return_type\": \"std::shared_ptr<Worker>\",\n      \"logic\": \"Retrieves a Worker from the internal field of a JS object, throwing an error if it's not a Worker or is defunct.\"\n    },\n    {\n      \"name\": \"GetThreadOptions\",\n      \"parameters\": [\n        \"const char* name\"\n      ],\n      \"return_type\": \"base::Thread::Options\",\n      \"logic\": \"Returns thread options with a specified name and a stack size of 2MB.\"\n    },\n    {\n      \"name\": \"CreateScriptOrigin\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Local<String> resource_name\",\n        \"v8::ScriptType type\"\n      ],\n      \"return_type\": \"ScriptOrigin\",\n      \"logic\": \"Creates a ScriptOrigin object.\"\n    },\n    {\n      \"name\": \"IsValidHostDefinedOptions\",\n      \"parameters\": [\n        \"Local<Context> context\",\n        \"Local<Data> options\",\n        \"Local<Value> resource_name\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if the host defined options are"
}