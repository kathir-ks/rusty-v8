{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/deoptimizer/translated-state.cc",
  "imports": [
    "src/deoptimizer/translated-state.h",
    "<inttypes.h>",
    "<iomanip>",
    "<optional>",
    "src/base/memory.h",
    "src/common/assert-scope.h",
    "src/deoptimizer/deoptimizer.h",
    "src/deoptimizer/materialized-object-store.h",
    "src/deoptimizer/translation-opcode.h",
    "src/diagnostics/disasm.h",
    "src/execution/frames.h",
    "src/execution/isolate.h",
    "src/heap/heap.h",
    "src/numbers/conversions.h",
    "src/objects/arguments.h",
    "src/objects/deoptimization-data.h",
    "src/objects/heap-number-inl.h",
    "src/objects/heap-object.h",
    "src/objects/oddball.h",
    "src/objects/object-macros.h",
    "src/objects/string.h"
  ],
  "classes": [
    {
      "name": "TranslatedValue",
      "properties": [
        "container_",
        "kind_",
        "raw_literal_",
        "int32_value_",
        "int64_value_",
        "uint64_value_",
        "uint32_value_",
        "float_value_",
        "double_value_",
        "simd128_value_",
        "materialization_info_",
        "storage_",
        "materialization_state_"
      ],
      "methods": [
        {
          "name": "NewDeferredObject",
          "parameters": [
            "TranslatedState* container",
            "int length",
            "int object_index"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a deferred object materialization."
        },
        {
          "name": "NewDuplicateObject",
          "parameters": [
            "TranslatedState* container",
            "int id"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a duplicated object, referencing an existing object by ID."
        },
        {
          "name": "NewStringConcat",
          "parameters": [
            "TranslatedState* container",
            "int id"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a string concatenation, deferring its materialization."
        },
        {
          "name": "NewFloat",
          "parameters": [
            "TranslatedState* container",
            "Float32 value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a float value."
        },
        {
          "name": "NewDouble",
          "parameters": [
            "TranslatedState* container",
            "Float64 value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a double value."
        },
        {
          "name": "NewHoleyDouble",
          "parameters": [
            "TranslatedState* container",
            "Float64 value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a holey double value (double with possible NaN hole)."
        },
        {
          "name": "NewSimd128",
          "parameters": [
            "TranslatedState* container",
            "Simd128 value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a SIMD128 value."
        },
        {
          "name": "NewInt32",
          "parameters": [
            "TranslatedState* container",
            "int32_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing an int32 value."
        },
        {
          "name": "NewInt64",
          "parameters": [
            "TranslatedState* container",
            "int64_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing an int64 value."
        },
        {
          "name": "NewInt64ToBigInt",
          "parameters": [
            "TranslatedState* container",
            "int64_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing an int64 value that will be converted to BigInt."
        },
        {
          "name": "NewUint64ToBigInt",
          "parameters": [
            "TranslatedState* container",
            "uint64_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a uint64 value that will be converted to BigInt."
        },
        {
          "name": "NewUint32",
          "parameters": [
            "TranslatedState* container",
            "uint32_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a uint32 value."
        },
        {
          "name": "NewUint64",
          "parameters": [
            "TranslatedState* container",
            "uint64_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a uint64 value."
        },
        {
          "name": "NewBool",
          "parameters": [
            "TranslatedState* container",
            "uint32_t value"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a boolean value (encoded as a uint32)."
        },
        {
          "name": "NewTagged",
          "parameters": [
            "TranslatedState* container",
            "Tagged<Object> literal"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing a tagged Object (a V8 object)."
        },
        {
          "name": "NewInvalid",
          "parameters": [
            "TranslatedState* container"
          ],
          "return_type": "TranslatedValue",
          "logic": "Creates a new TranslatedValue representing an invalid or uninitialized value."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate associated with the container."
        },
        {
          "name": "raw_literal",
          "parameters": [],
          "return_type": "Tagged<Object>",
          "logic": "Returns the raw literal object if the kind is kTagged."
        },
        {
          "name": "int32_value",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the int32 value if the kind is kInt32."
        },
        {
          "name": "int64_value",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Returns the int64 value if the kind is kInt64 or kInt64ToBigInt."
        },
        {
          "name": "uint64_value",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the uint64 value if the kind is kUint64ToBigInt."
        },
        {
          "name": "uint32_value",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the uint32 value if the kind is kUint32 or kBoolBit."
        },
        {
          "name": "float_value",
          "parameters": [],
          "return_type": "Float32",
          "logic": "Returns the float value if the kind is kFloat."
        },
        {
          "name": "double_value",
          "parameters": [],
          "return_type": "Float64",
          "logic": "Returns the double value if the kind is kDouble or kHoleyDouble."
        },
        {
          "name": "simd_value",
          "parameters": [],
          "return_type": "Simd128",
          "logic": "Returns the Simd128 value if the kind is kSimd128."
        },
        {
          "name": "object_length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the length of the object if the kind is kCapturedObject."
        },
        {
          "name": "object_index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the index of the object if the kind is kCapturedObject, kDuplicatedObject, or kCapturedStringConcat."
        },
        {
          "name": "GetRawValue",
          "parameters": [],
          "return_type": "Tagged<Object>",
          "logic": "Returns the raw tagged object value, materializing sliced strings if necessary. If no value is available it returns arguments_marker."
        },
        {
          "name": "set_initialized_storage",
          "parameters": [
            "Handle<HeapObject> storage"
          ],
          "return_type": "void",
          "logic": "Sets the storage for the translated value when materialization is complete."
        },
        {
          "name": "GetValue",
          "parameters": [],
          "return_type": "Handle<Object>",
          "logic": "Returns a Handle to the materialized value, materializing it if necessary.  Allocates memory."
        },
        {
          "name": "IsMaterializedObject",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the translated value represents an object that needs to be materialized."
        },
        {
          "name": "IsMaterializableByDebugger",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the translated value can be materialized by the debugger (currently only doubles)."
        },
        {
          "name": "GetChildrenCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of child values associated with this translated value (for objects and string concatenations)."
        },
        {
          "name": "Handlify",
          "parameters": [],
          "return_type": "void",
          "logic": "Converts raw tagged pointers to Handles to protect them from GC."
        },
        {
          "name": "ReplaceElementsArrayWithCopy",
          "parameters": [],
          "return_type": "void",
          "logic": "Replaces a fixed array elements store with a copy to prevent accidental sharing between frames."
        },
        {
          "name": "GetSmiValue",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the Smi value represented by the object."
        }
      ]
    },
    {
      "name": "TranslatedFrame",
      "properties": [
        "kind_",
        "raw_shared_info_",
        "shared_info_",
        "raw_bytecode_array_",
        "bytecode_array_",
        "bytecode_offset_",
        "height_",
        "formal_parameter_count_",
        "wasm_function_index_",
        "return_kind_",
        "values_",
        "handle_state_"
      ],
      "methods": [
        {
          "name": "UnoptimizedJSFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "Tagged<SharedFunctionInfo> shared_info",
            "Tagged<BytecodeArray> bytecode_array",
            "uint32_t height",
            "int return_value_offset",
            "int return_value_count"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for an unoptimized JavaScript frame."
        },
        {
          "name": "InlinedExtraArguments",
          "parameters": [
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height",
            "uint32_t formal_parameter_count"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for inlined extra arguments."
        },
        {
          "name": "ConstructCreateStubFrame",
          "parameters": [
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a construct create stub frame."
        },
        {
          "name": "ConstructInvokeStubFrame",
          "parameters": [
            "Tagged<SharedFunctionInfo> shared_info"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a construct invoke stub frame."
        },
        {
          "name": "BuiltinContinuationFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a builtin continuation frame."
        },
        {
          "name": "WasmInlinedIntoJSFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a WebAssembly frame inlined into JS frame."
        },
        {
          "name": "JSToWasmBuiltinContinuationFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height",
            "std::optional<wasm::ValueKind> return_kind"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a JavaScript to WebAssembly builtin continuation frame."
        },
        {
          "name": "LiftoffFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "uint32_t height",
            "uint32_t function_index"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a Liftoff (WebAssembly compiler) frame."
        },
        {
          "name": "JavaScriptBuiltinContinuationFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a JavaScript builtin continuation frame."
        },
        {
          "name": "JavaScriptBuiltinContinuationWithCatchFrame",
          "parameters": [
            "BytecodeOffset bytecode_offset",
            "Tagged<SharedFunctionInfo> shared_info",
            "uint32_t height"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates a TranslatedFrame for a JavaScript builtin continuation frame with catch."
        },
        {
          "name": "GetValueCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of values associated with this frame."
        },
        {
          "name": "Handlify",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Converts raw tagged pointers in the frame to Handles."
        },
        {
          "name": "AdvanceIterator",
          "parameters": [
            "std::deque<TranslatedValue>::iterator* iter"
          ],
          "return_type": "void",
          "logic": "Advances the iterator over the translated value tree."
        }
      ]
    },
    {
      "name": "DeoptimizationLiteralProvider",
      "properties": [
        "literals_on_heap_",
        "literals_off_heap_"
      ],
      "methods": [
        {
          "name": "Get",
          "parameters": [
            "TranslatedState* container",
            "int literal_index"
          ],
          "return_type": "TranslatedValue",
          "logic": "Retrieves a TranslatedValue from either the on-heap or off-heap literal array."
        }
      ]
    },
    {
      "name": "TranslatedState",
      "properties": [
        "purpose_",
        "stack_frame_pointer_",
        "formal_parameter_count_",
        "actual_argument_count_",
        "isolate_",
        "frames_",
        "object_positions_",
        "feedback_vector_",
        "feedback_vector_handle_"
      ],
      "methods": [
        {
          "name": "GetUInt64Slot",
          "parameters": [
            "Address fp",
            "int slot_offset"
          ],
          "return_type": "uint64_t",
          "logic": "Reads a uint64_t value from the stack at the specified offset."
        },
        {
          "name": "GetUInt32Slot",
          "parameters": [
            "Address fp",
            "int slot_offset"
          ],
          "return_type": "uint32_t",
          "logic": "Reads a uint32_t value from the stack at the specified offset."
        },
        {
          "name": "GetFloatSlot",
          "parameters": [
            "Address fp",
            "int slot_offset"
          ],
          "return_type": "Float32",
          "logic": "Reads a Float32 value from the stack at the specified offset."
        },
        {
          "name": "GetDoubleSlot",
          "parameters": [
            "Address fp",
            "int slot_offset"
          ],
          "return_type": "Float64",
          "logic": "Reads a Float64 value from the stack at the specified offset."
        },
        {
          "name": "getSimd128Slot",
          "parameters": [
            "Address fp",
            "int slot_offset"
          ],
          "return_type": "Simd128",
          "logic": "Reads a Simd128 value from the stack at the specified offset."
        },
        {
          "name": "CreateNextTranslatedFrame",
          "parameters": [
            "DeoptTranslationIterator* iterator",
            "Tagged<ProtectedDeoptimizationLiteralArray> protected_literal_array",
            "const DeoptimizationLiteralProvider& literal_array",
            "Address fp",
            "FILE* trace_file"
          ],
          "return_type": "TranslatedFrame",
          "logic": "Creates the next TranslatedFrame based on the translation opcode and literal array."
        },
        {
          "name": "CreateArgumentsElementsTranslatedValues",
          "parameters": [
            "int frame_index",
            "Address input_frame_pointer",
            "CreateArgumentsType type",
            "FILE* trace_file"
          ],
          "return_type": "void",
          "logic": "Creates TranslatedValue objects for arguments backing store or rest parameters based on type."
        },
        {
          "name": "CreateNextTranslatedValue",
          "parameters": [
            "int frame_index",
            "DeoptTranslationIterator* iterator",
            "const DeoptimizationLiteralProvider& literal_array",
            "Address fp",
            "RegisterValues* registers",
            "FILE* trace_file"
          ],
          "return_type": "int",
          "logic": "Creates the next TranslatedValue based on the translation opcode and other dynamic information."
        },
        {
          "name": "DecompressIfNeeded",
          "parameters": [
            "intptr_t value"
          ],
          "return_type": "Address",
          "logic": "Decompresses a compressed pointer value if compression is enabled."
        },
        {
          "name": "Init",
          "parameters": [
            "Isolate* isolate",
            "Address input_frame_pointer",
            "Address stack_frame_pointer",
            "DeoptTranslationIterator* iterator",
            "Tagged<ProtectedDeoptimizationLiteralArray> protected_literal_array",
            "const DeoptimizationLiteralProvider& literal_array",
            "RegisterValues* registers",
            "FILE* trace_file",
            "int formal_parameter_count",
            "int actual_argument_count"
          ],
          "return_type": "void",
          "logic": "Initializes the TranslatedState by reading translation data and creating TranslatedFrame and TranslatedValue objects."
        },
        {
          "name": "Prepare",
          "parameters": [
            "Address stack_frame_pointer"
          ],
          "return_type": "void",
          "logic": "Prepares the TranslatedState for materialization, converting raw pointers to Handles and updating from previously materialized objects."
        },
        {
          "name": "GetValueByObjectIndex",
          "parameters": [
            "int object_index"
          ],
          "return_type": "TranslatedValue*",
          "logic": "Returns the TranslatedValue corresponding to a given object index."
        },
        {
          "name": "ResolveStringConcat",
          "parameters": [
            "TranslatedValue* slot"
          ],
          "return_type": "Handle<HeapObject>",
          "logic": "Materializes a string concatenation."
        },
        {
          "name": "InitializeObjectAt",
          "parameters": [
            "TranslatedValue* slot"
          ],
          "return_type": "Handle<HeapObject>",
          "logic": "Initializes an object (and its transitive closure) at a given TranslatedValue, ensuring all its fields are properly set."
        },
        {
          "name": "InitializeCapturedObjectAt",
          "parameters": [
            "int object_index",
            "std::stack<int>* worklist",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "void",
          "logic": "Initializes a captured object and its fields."
        },
        {
          "name": "EnsureObjectAllocatedAt",
          "parameters": [
            "TranslatedValue* slot"
          ],
          "return_type": "void",
          "logic": "Ensures that storage is allocated for an object at a given TranslatedValue (and transitively for its children if applicable)."
        },
        {
          "name": "EnsureCapturedObjectAllocatedAt",
          "parameters": [
            "int object_index",
            "std::stack<int>* worklist"
          ],
          "return_type": "void",
          "logic": "Ensures that a captured object is allocated."
        },
        {
          "name": "MaterializeFixedDoubleArray",
          "parameters": [
            "TranslatedFrame* frame",
            "int* value_index",
            "TranslatedValue* slot",
            "DirectHandle<Map> map"
          ],
          "return_type": "void",
          "logic": "Materializes a FixedDoubleArray."
        },
        {
          "name": "MaterializeHeapNumber",
          "parameters": [
            "TranslatedFrame* frame",
            "int* value_index",
            "TranslatedValue* slot"
          ],
          "return_type": "void",
          "logic": "Materializes a HeapNumber."
        },
        {
          "name": "SkipSlots",
          "parameters": [
            "int slots_to_skip",
            "TranslatedFrame* frame",
            "int* value_index"
          ],
          "return_type": "void",
          "logic": "Skips a specified number of slots in a translated frame."
        },
        {
          "name": "EnsureChildrenAllocated",
          "parameters": [
            "int count",
            "TranslatedFrame* frame",
            "int* value_index",
            "std::stack<int>* worklist"
          ],
          "return_type": "void",
          "logic": "Ensures that all children of a given TranslatedValue are allocated."
        },
        {
          "name": "EnsurePropertiesAllocatedAndMarked",
          "parameters": [
            "TranslatedValue* properties_slot",
            "DirectHandle<Map> map"
          ],
          "return_type": "void",
          "logic": "Ensures that the properties array for an object is allocated and marked for deferred initialization."
        },
        {
          "name": "AllocateStorageFor",
          "parameters": [
            "TranslatedValue* slot"
          ],
          "return_type": "Handle<ByteArray>",
          "logic": "Allocates storage for a translated value."
        },
        {
          "name": "EnsureJSObjectAllocated",
          "parameters": [
            "TranslatedValue* slot",
            "DirectHandle<Map> map"
          ],
          "return_type": "void",
          "logic": "Ensures that a JSObject is allocated."
        },
        {
          "name": "GetResolvedSlot",
          "parameters": [
            "TranslatedFrame* frame",
            "int value_index"
          ],
          "return_type": "TranslatedValue*",
          "logic": "Gets the resolved TranslatedValue* at the given index."
        },
        {
          "name": "GetResolvedSlotAndAdvance",
          "parameters": [
            "TranslatedFrame* frame",
            "int* value_index"
          ],
          "return_type": "TranslatedValue*",
          "logic": "Gets the resolved TranslatedValue* at the given index, and advances the index."
        },
        {
          "name": "GetValueAndAdvance",
          "parameters": [
            "TranslatedFrame* frame",
            "int* value_index"
          ],
          "return_type": "DirectHandle<Object>",
          "logic": "Gets a DirectHandle<Object> corresponding to a slot, and advances the index."
        },
        {
          "name": "InitializeJSObjectAt",
          "parameters": [
            "TranslatedFrame* frame",
            "int* value_index",
            "TranslatedValue* slot",
            "DirectHandle<Map> map",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "void",
          "logic": "Initializes a JSObject's fields."
        },
        {
          "name": "ReadUpdateFeedback",
          "parameters": [
            "DeoptTranslationIterator* iterator",
            "Tagged<DeoptimizationLiteralArray> literal_array",
            "FILE* trace_file"
          ],
          "return_type": "void",
          "logic": "Reads and applies feedback updates from the deoptimization data, specifically for updating FeedbackVectors."
        },
        {
          "name": "ResolveCapturedObject",
          "parameters": [
            "TranslatedValue* slot"
          ],
          "return_type": "TranslatedValue*",
          "logic": "Resolves a potentially duplicated captured object."
        },
        {
          "name": "UpdateFromPreviouslyMaterializedObjects",
          "parameters": [],
          "return_type": "void",
          "logic": "Propagates state from materialized objects to translated value object state so that later materializations share the same storage."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DeoptimizationFrameTranslationPrintSingleOpcode",
      "parameters": [
        "std::ostream& os",
        "TranslationOpcode opcode",
        "DeoptimizationFrameTranslation::Iterator& iterator",
        "Tagged<ProtectedDeoptimizationLiteralArray> protected_literal_array",
        "Tagged<DeoptimizationLiteralArray> literal_array"
      ],
      "return_type": "void",
      "logic": "Prints a single deoptimization frame translation opcode with its operands to the given output stream.  This function is used for debugging purposes to visualize the deoptimization information."
    }
  ]
}