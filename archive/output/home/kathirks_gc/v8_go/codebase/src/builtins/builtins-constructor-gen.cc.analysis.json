{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/builtins/builtins-constructor-gen.cc",
  "imports": [
    "src/builtins/builtins-constructor-gen.h",
    "<optional>",
    "src/ast/ast.h",
    "src/builtins/builtins-call-gen.h",
    "src/builtins/builtins-constructor.h",
    "src/builtins/builtins-inl.h",
    "src/builtins/builtins-utils-gen.h",
    "src/codegen/code-stub-assembler-inl.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/macro-assembler.h",
    "src/common/globals.h",
    "src/logging/counters.h",
    "src/objects/objects-inl.h"
  ],
  "classes": [
    {
      "name": "Builtins",
      "properties": [],
      "methods": [
        {
          "name": "Generate_ConstructVarargs",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Generates code for constructing objects using varargs by calling Generate_CallOrConstructVarargs with Builtin::kConstruct."
        },
        {
          "name": "Generate_ConstructForwardVarargs",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Generates code for constructing objects using forward varargs by calling Generate_CallOrConstructForwardVarargs with CallOrConstructMode::kConstruct and Builtin::kConstruct."
        },
        {
          "name": "Generate_ConstructFunctionForwardVarargs",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Generates code for constructing function objects using forward varargs by calling Generate_CallOrConstructForwardVarargs with CallOrConstructMode::kConstruct and Builtin::kConstructFunction."
        },
        {
          "name": "Generate_InterpreterForwardAllArgsThenConstruct",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Generates code for constructing objects by forwarding all arguments from the interpreter's parent frame to Generate_ConstructForwardAllArgsImpl with ForwardWhichFrame::kParentFrame."
        },
        {
          "name": "Generate_ConstructForwardAllArgs",
          "parameters": [
            "MacroAssembler* masm"
          ],
          "return_type": "void",
          "logic": "Generates code for constructing objects by forwarding all arguments from the current frame to Generate_ConstructForwardAllArgsImpl with ForwardWhichFrame::kCurrentFrame."
        }
      ]
    },
    {
      "name": "CallOrConstructBuiltinsAssembler",
      "properties": [],
      "methods": [
        {
          "name": "BuildConstruct",
          "parameters": [
            "TNode<JSAny> target",
            "TNode<JSAny> new_target",
            "TNode<Int32T> argc",
            "const LazyNode<Context>& context",
            "const LazyNode<Union<Undefined, FeedbackVector>>& feedback_vector",
            "TNode<UintPtrT> slot",
            "UpdateFeedbackMode mode"
          ],
          "return_type": "void",
          "logic": "Builds code to construct objects, handling feedback and potentially routing to the ArrayConstructorImpl."
        },
        {
          "name": "BuildConstructWithSpread",
          "parameters": [
            "TNode<JSAny> target",
            "TNode<JSAny> new_target",
            "TNode<JSAny> spread",
            "TNode<Int32T> argc",
            "const LazyNode<Context>& context",
            "const LazyNode<Union<Undefined, FeedbackVector>>& feedback_vector",
            "TNode<TaggedIndex> slot",
            "UpdateFeedbackMode mode"
          ],
          "return_type": "void",
          "logic": "Builds code to construct objects with spread arguments, handling feedback and potentially routing to the CallOrConstructWithSpread."
        },
        {
          "name": "BuildConstructForwardAllArgs",
          "parameters": [
            "TNode<JSAny> target",
            "TNode<JSAny> new_target",
            "const LazyNode<Context>& context",
            "const LazyNode<Union<Undefined, FeedbackVector>>& feedback_vector",
            "TNode<TaggedIndex> slot"
          ],
          "return_type": "void",
          "logic": "Builds code to construct objects by forwarding all arguments, handling feedback."
        },
        {
          "name": "FastNewObject",
          "parameters": [
            "TNode<Context> context",
            "TNode<JSFunction> target",
            "TNode<JSReceiver> new_target"
          ],
          "return_type": "TNode<JSObject>",
          "logic": "Fast path for creating a new object, falls back to runtime call if necessary."
        },
        {
          "name": "FastNewObject",
          "parameters": [
            "TNode<Context> context",
            "TNode<JSFunction> target",
            "TNode<JSReceiver> new_target",
            "Label* call_runtime"
          ],
          "return_type": "TNode<JSObject>",
          "logic": "Fast path implementation details.  Allocates JSObject given map if everything looks good, or jumps to the runtime call if it doesn't."
        },
        {
          "name": "FastNewFunctionContext",
          "parameters": [
            "TNode<ScopeInfo> scope_info",
            "TNode<Uint32T> slots",
            "TNode<Context> context",
            "ScopeType scope_type"
          ],
          "return_type": "TNode<Context>",
          "logic": "Creates a new function context in new space and initializes it."
        },
        {
          "name": "CreateRegExpLiteral",
          "parameters": [
            "TNode<HeapObject> maybe_feedback_vector",
            "TNode<TaggedIndex> slot",
            "TNode<Object> pattern",
            "TNode<Smi> flags",
            "TNode<Context> context"
          ],
          "return_type": "TNode<JSRegExp>",
          "logic": "Creates a regular expression literal, potentially using a boilerplate from the feedback vector or falling back to a runtime call."
        },
        {
          "name": "CreateShallowArrayLiteral",
          "parameters": [
            "TNode<FeedbackVector> feedback_vector",
            "TNode<TaggedIndex> slot",
            "TNode<Context> context",
            "AllocationSiteMode allocation_site_mode",
            "Label* call_runtime"
          ],
          "return_type": "TNode<JSArray>",
          "logic": "Creates a shallow copy of an array literal, potentially using a boilerplate from the feedback vector or falling back to a runtime call."
        },
        {
          "name": "CreateEmptyArrayLiteral",
          "parameters": [
            "TNode<FeedbackVector> feedback_vector",
            "TNode<TaggedIndex> slot",
            "TNode<Context> context"
          ],
          "return_type": "TNode<JSArray>",
          "logic": "Creates an empty array literal, using an AllocationSite to track elements transitions."
        },
        {
          "name": "CreateShallowObjectLiteral",
          "parameters": [
            "TNode<FeedbackVector> feedback_vector",
            "TNode<TaggedIndex> slot",
            "Label* call_runtime"
          ],
          "return_type": "TNode<HeapObject>",
          "logic": "Creates a shallow copy of an object literal, using a boilerplate from the feedback vector or falling back to a runtime call."
        },
        {
          "name": "CreateShallowObjectLiteral",
          "parameters": [
            "TNode<AllocationSite> allocation_site",
            "TNode<JSObject> boilerplate",
            "Label* call_runtime",
            "bool bailout_if_dictionary_properties"
          ],
          "return_type": "TNode<HeapObject>",
          "logic": "Creates a shallow copy of an object literal from an existing boilerplate, used for optimized object literal creation."
        },
        {
          "name": "CreateEmptyObjectLiteral",
          "parameters": [
            "TNode<Context> context"
          ],
          "return_type": "TNode<JSObject>",
          "logic": "Creates an empty object literal."
        },
        {
          "name": "CopyMutableHeapNumbersInObject",
          "parameters": [
            "TNode<HeapObject> copy",
            "TNode<IntPtrT> start_offset",
            "TNode<IntPtrT> end_offset"
          ],
          "return_type": "void",
          "logic": "Copies mutable HeapNumber values from a source object to a destination object, ensuring correct handling of mutability."
        }
      ]
    },
    {
      "name": "ConstructorBuiltinsAssembler",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "Construct_Baseline",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that implements object construction with baseline feedback, delegating to BuildConstruct."
    },
    {
      "name": "Construct_WithFeedback",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that implements object construction with explicit feedback, delegating to BuildConstruct."
    },
    {
      "name": "ConstructWithArrayLike",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that constructs objects with array-like arguments, delegating to CallOrConstructWithArrayLike."
    },
    {
      "name": "ConstructWithSpread",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that constructs objects with spread arguments, delegating to CallOrConstructWithSpread."
    },
    {
      "name": "ConstructWithSpread_Baseline",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that constructs objects with spread arguments and baseline feedback, delegating to BuildConstructWithSpread."
    },
    {
      "name": "ConstructWithSpread_WithFeedback",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that constructs objects with spread arguments and explicit feedback, delegating to BuildConstructWithSpread."
    },
    {
      "name": "ConstructForwardAllArgs_Baseline",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that forwards all arguments during object construction with baseline feedback, delegating to BuildConstructForwardAllArgs."
    },
    {
      "name": "ConstructForwardAllArgs_WithFeedback",
      "parameters": [
        "CallOrConstructBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "A TurboFan builtin that forwards all arguments during object construction with explicit feedback, delegating to BuildConstructForwardAllArgs."
    },
    {
      "name": "FastNewClosure",
      "parameters": [
        "ConstructorBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "Creates a new closure (function) using fast paths when possible, optimizing for common cases and falling back to runtime if necessary."
    },
    {
      "name": "FastNewObject",
      "parameters": [
        "ConstructorBuiltinsAssembler* this"
      ],
      "return_type": "void",
      "logic": "Creates a new object using fast paths when possible, optimizing for common cases and falling back to runtime if necessary."
    }
  ]
}