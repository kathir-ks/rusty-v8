{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-parser.h",
  "imports": [
    "src/common/assert-scope.h",
    "src/handles/handles.h",
    "src/regexp/regexp-flags.h"
  ],
  "classes": [
    {
      "name": "RegExpParser",
      "properties": [],
      "methods": [
        {
          "name": "ParseRegExpFromHeapString",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "DirectHandle<String> input",
            "RegExpFlags flags",
            "RegExpCompileData* result"
          ],
          "return_type": "bool",
          "logic": "Parses a regular expression from a heap string, taking into account flags and storing the result in RegExpCompileData."
        },
        {
          "name": "VerifyRegExpSyntax",
          "parameters": [
            "Zone* zone",
            "uintptr_t stack_limit",
            "const CharT* input",
            "int input_length",
            "RegExpFlags flags",
            "RegExpCompileData* result",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "bool",
          "logic": "Verifies the syntax of a regular expression given as a character array, flags, and other parameters, storing the result in RegExpCompileData.  It takes a generic character type CharT, allowing it to work with both narrow and wide strings. It also takes a stack limit for safety and a DisallowGarbageCollection object to prevent GC during the verification process."
        }
      ]
    },
    {
      "name": "AllStatic",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [],
  "comments": [
    "Copyright 2016 the V8 project authors.",
    "Use of this source code is governed by a BSD-style license that can be found in the LICENSE file."
  ]
}