{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/riscv/regexp-macro-assembler-riscv.h",
  "imports": [
    "src/base/strings.h",
    "src/codegen/assembler-arch.h",
    "src/codegen/macro-assembler.h",
    "src/regexp/regexp-macro-assembler.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerRISCV",
      "properties": [
        "masm_",
        "no_root_array_scope_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "internal_failure_label_",
        "fallback_label_",
        "kFramePointerOffset",
        "kStoredRegistersOffset",
        "kNumCalleeRegsToRetain",
        "kReturnAddressOffset",
        "kStackFrameHeaderOffset",
        "kFrameTypeOffset",
        "kIsolateOffset",
        "kDirectCallOffset",
        "kNumOutputRegistersOffset",
        "kRegisterOutputOffset",
        "kInputEndOffset",
        "kInputStartOffset",
        "kStartIndexOffset",
        "kInputStringOffset",
        "kSuccessfulCapturesOffset",
        "kStringStartMinusOneOffset",
        "kBacktrackCountOffset",
        "kRegExpStackBasePointerOffset",
        "kNumberOfStackLocals",
        "kRegisterZeroOffset",
        "kInitialBufferSize"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerRISCV",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor for the RegExpMacroAssemblerRISCV class. Initializes the assembler with the given isolate, zone, mode, and number of registers to save."
        },
        {
          "name": "~RegExpMacroAssemblerRISCV",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the RegExpMacroAssemblerRISCV class."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack slots to leave slack for stack limit checks."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current input position by the given amount."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value in the given register by the given amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs a backtrack operation in the regular expression matching process."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds the given label to the current position in the generated code."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with the given offset is at the start of the input string. Branches to on_at_start if it is."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to the given character c. Branches to on_equal if it is."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after ANDing with mask is equal to the given character c. Branches to on_equal if it is."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than the given limit. Branches to on_greater if it is."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than the given limit. Branches to on_less if it is."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_tos_equals_current_position"
          ],
          "return_type": "void",
          "logic": "Checks if the top of the stack equals the current position (used for greedy loops)."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with the given offset is not at the start of the input string. Branches to on_not_at_start if it is not."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the backreference specified by start_reg matches the current input. Branches to on_no_match if it doesn't."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the backreference specified by start_reg matches the current input, ignoring case. Branches to on_no_match if it doesn't."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to the given character c. Branches to on_not_equal if it is not."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character after ANDing with mask is not equal to the given character c. Branches to on_not_equal if it is not."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after subtracting 'minus' and ANDing with 'mask', is not equal to 'c'. Branches to on_not_equal if it is not."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within the range [from, to]. Branches to on_in_range if it is."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within the range [from, to]. Branches to on_not_in_range if it is not."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is within any of the ranges in the given array. Branches to on_in_range if it is. Returns true if a range check was actually generated, false if the character is always or never in range."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is not within any of the ranges in the given array. Branches to on_not_in_range if it is not. Returns true if a range check was actually generated, false if the character is always or never in range."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if the bit corresponding to the current character is set in the given table. Branches to on_bit_set if it is."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips characters until a character with a bit set in the table is found. Advances the current position."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if the given offset from the current position is outside the input string. Branches to on_outside_input if it is."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to the given special character class.  Branches to on_no_match if there's no match. Returns true if a range check was actually generated, false if the character is always or never in the range."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Indicates that the regular expression matching failed."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Generates the executable code for the regular expression."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Unconditionally jumps to the given label."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Branches to the 'if_ge' label if the value in register 'reg' is greater than or equal to 'comparand'."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Branches to the 'if_lt' label if the value in register 'reg' is less than 'comparand'."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Branches to the 'if_eq' label if the value in register 'reg' equals the current position."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "IrregexpImplementation",
          "logic": "Returns the implementation type of the regular expression engine."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int character_count"
          ],
          "return_type": "void",
          "logic": "Loads the current character from the input string at the given offset, without checking bounds."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from the backtrack stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack into the specified register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes the given label onto the backtrack stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto the backtrack stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of the specified register onto the backtrack stack. May check the stack limit."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current input position from the given register."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the backtrack stack pointer from the specified register."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current input position to be 'by' characters from the end of the input string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified register to the given value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates that the regular expression matching succeeded."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current input position plus offset to the given register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears the values of the registers from reg_from to reg_to (inclusive)."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the current backtrack stack pointer to the given register."
        },
        {
          "name": "CanReadUnaligned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the architecture can read unaligned memory. Only present when RISCV_HAS_NO_UNALIGNED is defined. In that case it always return false."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int64_t",
          "logic": "Checks if the stack guard has been triggered. If the code object is relocated, the return address is fixed before returning."
        },
        {
          "name": "print_regexp_frame_constants",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the constants related to the regexp frame layout (for debugging purposes)."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from Irregexp generated code."
        },
        {
          "name": "PushCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes all caller-saved registers onto the stack."
        },
        {
          "name": "PopCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops all caller-saved registers from the stack."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks whether preemption has been requested."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks whether we are exceeding the stack limit on the backtrack stack."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the stack pointer is above the stack limit minus a slack value."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Register scratch",
            "Operand extra_space_for_variables"
          ],
          "return_type": "void",
          "logic": "Calls the CheckStackGuardState function with specified scratch register and extra space for local variables."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a C++ helper function to determine if a character is within any range in a list of ranges."
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand representing the ebp-relative location of a regexp register."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Label* to",
            "Condition condition",
            "Register rs",
            "const Operand& rt"
          ],
          "return_type": "void",
          "logic": "Equivalent to a conditional branch to the label, unless the label is nullptr, in which case it is a conditional Backtrack."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to",
            "Condition cond",
            "Register rs",
            "const Operand& rt"
          ],
          "return_type": "void",
          "logic": "Call internally in the generated code in a way that is GC-safe."
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Return internally in the generated code in a way that is GC-safe."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* name"
          ],
          "return_type": "void",
          "logic": "Define a target to which SafeCall can jump."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the backtrack stack."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack into a register."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the RegExp stack pointer from memory into a register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the RegExp stack pointer from a register into memory."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the RegExp base pointer onto the stack."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the RegExp base pointer from the stack."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate."
        },
        {
          "name": "char_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the byte size of characters in the string to match based on the mode."
        }
      ]
    }
  ],
  "functions": []
}