{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/ppc/regexp-macro-assembler-ppc.cc",
  "imports": [
    "src/regexp/ppc/regexp-macro-assembler-ppc.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/ppc/assembler-ppc-inl.h",
    "src/heap/factory.h",
    "src/logging/log.h",
    "src/objects/code-inl.h",
    "src/regexp/regexp-stack.h",
    "src/snapshot/embedded/embedded-data-inl.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerPPC",
      "properties": [
        "masm_",
        "no_root_array_scope_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "internal_failure_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "fallback_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerPPC",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the macro assembler, labels, mode, and register counts. Sets up initial jumps for entry and internal failure points."
        },
        {
          "name": "~RegExpMacroAssemblerPPC",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Unuses all labels to prevent memory leaks when the assembler is discarded without generating code."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack limit slack slots."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current input position by a specified number of characters."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value of a specified register by a specified amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles backtracking in the regular expression matching process.  Pops the return address from the backtrack stack and jumps to it after accounting for backtracking limits."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current position in the generated code."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to a given character, and branches to a label if they are equal."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a given limit, and branches to a label if it is."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with offset is at the start of the input, and branches to a label if it is."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position with offset is NOT at the start of the input, and branches to a label if it is not."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a given limit, and branches to a label if it is."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks for a greedy loop condition. Branches to a specified label if the current input offset is equal to the offset on the backtrack stack."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input matches a backreference, ignoring case. Branches to a label if there is no match."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if the current input matches a backreference. Branches to a label if there is no match."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "unsigned c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to a given character, and branches to a label if they are not equal."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after a bitwise AND with a mask, is equal to a given character. Branches to a label if they are equal."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "unsigned c",
            "unsigned mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after a bitwise AND with a mask, is NOT equal to a given character. Branches to a label if they are not equal."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character minus a value, after a bitwise AND with a mask, is not equal to a given character. Branches to a label if they are not equal."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a given range. Branches to a label if it is."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within a given range. Branches to a label if it is not."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a C function to check if the current character is in the specified character range array."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is in the specified range array. Calls a C function and branches according to the result."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is NOT in the specified range array. Calls a C function and branches according to the result."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit is set in a given byte array table, based on the current character. Branches to a label if it is set."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips forward until a bit is set in a given byte array table, based on the current character."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a special character class (e.g., whitespace, digit). Branches to a label if there is no match."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the return value to indicate failure and jumps to the exit label."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the RegExp stack pointer from memory into a register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the RegExp stack pointer from a register into memory."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register stack_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the RegExp base pointer to the backtrack stack."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register stack_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the RegExp base pointer from the backtrack stack."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Finalizes the generated code, performs checks for stack space, and creates a Code object representing the compiled regular expression."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Unconditionally branches to the specified label."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Branches to if_ge if the value of register 'reg' is greater or equal to 'comparand'."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Branches to if_lt if the value of register 'reg' is less than 'comparand'."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Branches to if_eq if the value in the register is equal to the current position."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "RegExpMacroAssembler::IrregexpImplementation",
          "logic": "Returns the implementation type."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current input position from the backtrack stack."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack and stores it in the specified register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes the address of a label onto the backtrack stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current input position onto the backtrack stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the backtrack stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads value from register and updates the current position with the value"
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the current backtrack stack pointer value (offset from base) into the specified register."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the value of backtrack stack pointer (offset from base) from a register, and adds the stack base to the pointer, and stores to the backtrack pointer"
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current input position relative to the end of the string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of a register to a specified constant."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Branches to the success label and returns whether the regexp is global."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current input position to a register, optionally with an offset."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears the specified registers, setting their values to the \"string start - 1\" offset."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Register scratch",
            "Operand extra_space"
          ],
          "return_type": "void",
          "logic": "Calls the CheckStackGuardState C function to check for stack overflows."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int",
          "logic": "Static method that forwards arguments to a C function implementing stack guard checks."
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand representing the memory location of a given register."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from within the generated Irregexp code."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Check if the current position with offset lies inside input boundary or not."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Condition condition",
            "Label* to",
            "CRegister cr"
          ],
          "return_type": "void",
          "logic": "Branches to a given label based on a condition, or backtracks if no label is provided."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to",
            "Condition cond",
            "CRegister cr"
          ],
          "return_type": "void",
          "logic": "Calls the passed label and adds return instruction"
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Returns from safe call and cleans up any modifications that may have been done for making it a safe call."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* name"
          ],
          "return_type": "void",
          "logic": "Binds to a label and creates the call target which is safe."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes value of given register to the backtrack stack"
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack to the given register"
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for preemption by comparing the stack pointer to the stack limit."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for stack overflow by comparing backtrack stack pointer to the stack limit"
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the backtrack stack pointer is above the stack limit minus slack.  This is a debug-only check."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int characters"
          ],
          "return_type": "void",
          "logic": "Loads the current character (without checking bounds) from the input string, using the given offset from the current input position."
        }
      ]
    }
  ],
  "functions": []
}