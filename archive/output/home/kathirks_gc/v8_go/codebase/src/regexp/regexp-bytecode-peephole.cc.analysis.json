{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-bytecode-peephole.cc",
  "imports": [
    "src/regexp/regexp-bytecode-peephole.h",
    "src/flags/flags.h",
    "src/objects/fixed-array-inl.h",
    "src/regexp/regexp-bytecodes.h",
    "src/utils/memcopy.h",
    "src/utils/utils.h",
    "src/zone/zone-containers.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "BytecodeSequenceNode",
      "properties": [
        "bytecode_",
        "bytecode_replacement_",
        "index_in_sequence_",
        "start_offset_",
        "parent_",
        "children_",
        "argument_mapping_",
        "argument_check_",
        "argument_ignored_",
        "zone_"
      ],
      "methods": [
        {
          "name": "BytecodeSequenceNode",
          "parameters": [
            "int bytecode",
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the BytecodeSequenceNode. Initializes member variables."
        },
        {
          "name": "FollowedBy",
          "parameters": [
            "int bytecode"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Adds a new node as a child of the current node if it's not already a child.  Returns a reference to the child node."
        },
        {
          "name": "ReplaceWith",
          "parameters": [
            "int bytecode"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Marks the end of a sequence and sets the optimized bytecode to replace the sequence with. Returns a reference to the current node."
        },
        {
          "name": "MapArgument",
          "parameters": [
            "int bytecode_index_in_sequence",
            "int argument_offset",
            "int argument_byte_length",
            "int new_argument_byte_length"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Maps arguments of bytecodes in the sequence to the optimized bytecode. Order of invocation determines order of arguments in optimized bytecode. Returns a reference to the current node."
        },
        {
          "name": "IfArgumentEqualsOffset",
          "parameters": [
            "int argument_offset",
            "int argument_byte_length",
            "int check_byte_offset"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Adds a check to the sequence node, ensuring it's only a valid sequence if the argument of the current bytecode at the specified offset matches the offset to check against. Returns a reference to the current node."
        },
        {
          "name": "IfArgumentEqualsValueAtOffset",
          "parameters": [
            "int argument_offset",
            "int argument_byte_length",
            "int other_bytecode_index_in_sequence",
            "int other_argument_offset",
            "int other_argument_byte_length"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Adds a check to the sequence node. This check ensures that the value of an argument in the current bytecode matches the value of another argument in a different bytecode within the sequence. Returns a reference to the current node."
        },
        {
          "name": "IgnoreArgument",
          "parameters": [
            "int bytecode_index_in_sequence",
            "int argument_offset",
            "int argument_byte_length"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Marks an argument as unused. All arguments that are not mapped explicitly must be marked as unused. Returns a reference to the current node."
        },
        {
          "name": "CheckArguments",
          "parameters": [
            "const uint8_t* bytecode",
            "int pc"
          ],
          "return_type": "bool",
          "logic": "Checks if the current node is valid for the sequence. I.e. all conditions set by IfArgumentEqualsOffset and IfArgumentEquals are fulfilled by this node for the actual bytecode sequence."
        },
        {
          "name": "IsSequence",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether this node marks the end of a valid sequence (i.e. can be replaced with an optimized bytecode)."
        },
        {
          "name": "SequenceLength",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the length of the sequence in bytes."
        },
        {
          "name": "OptimizedBytecode",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the optimized bytecode for the node or kDummyBytecode if it is not the end of a valid sequence."
        },
        {
          "name": "Find",
          "parameters": [
            "int bytecode"
          ],
          "return_type": "BytecodeSequenceNode*",
          "logic": "Returns the child of the current node matching the given bytecode or nullptr if no such child is found."
        },
        {
          "name": "ArgumentSize",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns number of arguments mapped to the current node."
        },
        {
          "name": "ArgumentMapping",
          "parameters": [
            "size_t index"
          ],
          "return_type": "BytecodeArgumentMapping",
          "logic": "Returns the argument-mapping of the argument at index."
        },
        {
          "name": "ArgumentIgnoredBegin",
          "parameters": [],
          "return_type": "ZoneLinkedList<BytecodeArgument>::iterator",
          "logic": "Returns an iterator to begin of ignored arguments."
        },
        {
          "name": "ArgumentIgnoredEnd",
          "parameters": [],
          "return_type": "ZoneLinkedList<BytecodeArgument>::iterator",
          "logic": "Returns an iterator to end of ignored arguments."
        },
        {
          "name": "HasIgnoredArguments",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the current node has ignored argument or not."
        },
        {
          "name": "GetNodeByIndexInSequence",
          "parameters": [
            "int index_in_sequence"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Returns a node in the sequence specified by its index within the sequence."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone of the BytecodeSequenceNode."
        }
      ]
    },
    {
      "name": "RegExpBytecodePeephole",
      "properties": [
        "optimized_bytecode_buffer_",
        "sequences_",
        "jump_edges_",
        "jump_edges_mapped_",
        "jump_usage_counts_",
        "jump_source_fixups_",
        "jump_destination_fixups_",
        "zone_"
      ],
      "methods": [
        {
          "name": "RegExpBytecodePeephole",
          "parameters": [
            "Zone* zone",
            "size_t buffer_size",
            "const ZoneUnorderedMap<int, int>& jump_edges"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the RegExpBytecodePeephole class. Initializes the internal buffer and jump structures."
        },
        {
          "name": "OptimizeBytecode",
          "parameters": [
            "const uint8_t* bytecode",
            "int length"
          ],
          "return_type": "bool",
          "logic": "Parses the bytecode and fills the internal buffer with the potentially optimized bytecode. Returns true if optimizations were performed, false otherwise."
        },
        {
          "name": "CopyOptimizedBytecode",
          "parameters": [
            "uint8_t* to_address"
          ],
          "return_type": "void",
          "logic": "Copies the internal bytecode buffer to another buffer. The caller is responsible for allocating/freeing the memory."
        },
        {
          "name": "Length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the length of the optimized bytecode."
        },
        {
          "name": "DefineStandardSequences",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets up all sequences that are going to be used for optimization."
        },
        {
          "name": "CreateSequence",
          "parameters": [
            "int bytecode"
          ],
          "return_type": "BytecodeSequenceNode&",
          "logic": "Starts a new bytecode sequence for optimization purposes."
        },
        {
          "name": "TryOptimizeSequence",
          "parameters": [
            "const uint8_t* bytecode",
            "int bytecode_length",
            "int start_pc"
          ],
          "return_type": "int",
          "logic": "Checks for optimization candidates at the given program counter (pc) and emits the optimized bytecode to the internal buffer. Returns the length of replaced bytecodes in bytes."
        },
        {
          "name": "EmitOptimization",
          "parameters": [
            "int start_pc",
            "const uint8_t* bytecode",
            "const BytecodeSequenceNode& last_node"
          ],
          "return_type": "void",
          "logic": "Emits optimized bytecode to the internal buffer. start_pc points to the start of the sequence in bytecode and last_node is the last BytecodeSequenceNode of the matching sequence found."
        },
        {
          "name": "AddJumpSourceFixup",
          "parameters": [
            "int fixup",
            "int pos"
          ],
          "return_type": "void",
          "logic": "Adds a relative jump source fixup at pos. Jump source fixups are used to find offsets in the new bytecode that contain jump sources."
        },
        {
          "name": "AddJumpDestinationFixup",
          "parameters": [
            "int fixup",
            "int pos"
          ],
          "return_type": "void",
          "logic": "Adds a relative jump destination fixup at pos. Jump destination fixups are used to find offsets in the new bytecode that can be jumped to."
        },
        {
          "name": "SetJumpDestinationFixup",
          "parameters": [
            "int fixup",
            "int pos"
          ],
          "return_type": "void",
          "logic": "Sets an absolute jump destination fixup at pos."
        },
        {
          "name": "PrepareJumpStructures",
          "parameters": [
            "const ZoneUnorderedMap<int, int>& jump_edges"
          ],
          "return_type": "void",
          "logic": "Prepares internal structures used to fixup jumps."
        },
        {
          "name": "FixJumps",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates all jump targets in the new bytecode after optimization."
        },
        {
          "name": "FixJump",
          "parameters": [
            "int jump_source",
            "int jump_destination"
          ],
          "return_type": "void",
          "logic": "Updates a single jump target after optimization."
        },
        {
          "name": "AddSentinelFixups",
          "parameters": [
            "int pos"
          ],
          "return_type": "void",
          "logic": "Adds sentinel fixups to the jump fixup maps, used to avoid boundary checks during fixup processing."
        },
        {
          "name": "EmitValue",
          "parameters": [
            "T value"
          ],
          "return_type": "void",
          "logic": "Emits a value of type T to the optimized bytecode buffer."
        },
        {
          "name": "OverwriteValue",
          "parameters": [
            "int offset",
            "T value"
          ],
          "return_type": "void",
          "logic": "Overwrites a value of type T at a specific offset in the optimized bytecode buffer."
        },
        {
          "name": "CopyRangeToOutput",
          "parameters": [
            "const uint8_t* orig_bytecode",
            "int start",
            "int length"
          ],
          "return_type": "void",
          "logic": "Copies a range of bytes from the original bytecode to the optimized bytecode buffer."
        },
        {
          "name": "SetRange",
          "parameters": [
            "uint8_t value",
            "int count"
          ],
          "return_type": "void",
          "logic": "Sets a range of bytes in the optimized bytecode buffer to a specific value."
        },
        {
          "name": "EmitArgument",
          "parameters": [
            "int start_pc",
            "const uint8_t* bytecode",
            "BytecodeArgumentMapping arg"
          ],
          "return_type": "void",
          "logic": "Emits an argument from the original bytecode to the optimized bytecode buffer, using information from the argument mapping."
        },
        {
          "name": "pc",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current program counter (pc) which represents the current length of the optimized bytecode buffer."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone used by the RegExpBytecodePeephole."
        }
      ]
    },
    {
      "name": "RegExpBytecodePeepholeOptimization",
      "properties": [],
      "methods": [
        {
          "name": "OptimizeBytecode",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "DirectHandle<String> source",
            "const uint8_t* bytecode",
            "int length",
            "const ZoneUnorderedMap<int, int>& jump_edges"
          ],
          "return_type": "DirectHandle<TrustedByteArray>",
          "logic": "Performs peephole optimization on the bytecode using the RegExpBytecodePeephole class. Returns a DirectHandle to the optimized TrustedByteArray."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetValue",
      "parameters": [
        "const uint8_t* buffer",
        "int pos"
      ],
      "return_type": "T",
      "logic": "Reads a value of type T from a buffer at a given position."
    },
    {
      "name": "GetArgumentValue",
      "parameters": [
        "const uint8_t* bytecode",
        "int offset",
        "int length"
      ],
      "return_type": "int32_t",
      "logic": "Retrieves the argument value from bytecode at a specific offset with a specified length. Uses GetValue to read the underlying data."
    }
  ]
}