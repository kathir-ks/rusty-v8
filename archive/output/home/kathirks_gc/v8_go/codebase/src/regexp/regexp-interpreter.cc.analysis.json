{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-interpreter.cc",
  "imports": [
    "src/regexp/regexp-interpreter.h",
    "src/base/small-vector.h",
    "src/base/strings.h",
    "src/execution/isolate.h",
    "src/logging/counters.h",
    "src/objects/js-regexp-inl.h",
    "src/objects/string-inl.h",
    "src/regexp/regexp-bytecodes.h",
    "src/regexp/regexp-macro-assembler.h",
    "src/regexp/regexp-stack.h",
    "src/regexp/regexp-utils.h",
    "src/regexp/regexp.h",
    "src/strings/unicode.h",
    "src/utils/memcopy.h",
    "src/utils/utils.h",
    "unicode/uchar.h"
  ],
  "classes": [
    {
      "name": "BacktrackStack",
      "properties": [
        "data_",
        "kStaticCapacity",
        "ValueT",
        "kMaxSize"
      ],
      "methods": [
        {
          "name": "push",
          "parameters": [
            "int v"
          ],
          "return_type": "bool",
          "logic": "Pushes an integer value onto the stack. Returns false if the stack is full."
        },
        {
          "name": "peek",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the top element of the stack without removing it."
        },
        {
          "name": "pop",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns and removes the top element of the stack."
        },
        {
          "name": "sp",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current stack pointer (index of the first empty element)."
        },
        {
          "name": "set_sp",
          "parameters": [
            "uint32_t new_sp"
          ],
          "return_type": "void",
          "logic": "Sets the stack pointer to a new value. Used for restoring the stack state."
        }
      ]
    },
    {
      "name": "InterpreterRegisters",
      "properties": [
        "registers_",
        "output_registers_",
        "total_register_count_",
        "output_register_count_",
        "RegisterT",
        "kStaticCapacity"
      ],
      "methods": [
        {
          "name": "InterpreterRegisters",
          "parameters": [
            "int total_register_count",
            "RegisterT* output_registers",
            "int output_register_count"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the registers. Sets up output registers and internal registers.  Initializes output registers to -1 (no match)."
        },
        {
          "name": "operator[]",
          "parameters": [
            "size_t index"
          ],
          "return_type": "const RegisterT&",
          "logic": "Returns a constant reference to the register at the given index."
        },
        {
          "name": "operator[]",
          "parameters": [
            "size_t index"
          ],
          "return_type": "RegisterT&",
          "logic": "Returns a reference to the register at the given index."
        },
        {
          "name": "CopyToOutputRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Copies the contents of the internal registers to the output registers."
        }
      ]
    },
    {
      "name": "IrregexpInterpreter",
      "properties": [],
      "methods": [
        {
          "name": "Match",
          "parameters": [
            "Isolate* isolate",
            "Tagged<IrRegExpData> regexp_data",
            "Tagged<String> subject_string",
            "int* output_registers",
            "int output_register_count",
            "int start_position",
            "RegExp::CallOrigin call_origin"
          ],
          "return_type": "int",
          "logic": "Entry point for matching a regular expression. It retrieves data from IrRegExpData object and then repeatedly calls MatchInternal until the output registers are filled or no more matches are found."
        },
        {
          "name": "MatchInternal",
          "parameters": [
            "Isolate* isolate",
            "Tagged<TrustedByteArray>* code_array",
            "Tagged<String>* subject_string",
            "int* output_registers",
            "int output_register_count",
            "int total_register_count",
            "int start_position",
            "RegExp::CallOrigin call_origin",
            "uint32_t backtrack_limit"
          ],
          "return_type": "IrregexpInterpreter::Result",
          "logic": "Performs the actual matching using the bytecode interpreter. It retrieves the string contents and dispatches to RawMatch based on the string encoding (one-byte or two-byte)."
        },
        {
          "name": "MatchForCallFromJs",
          "parameters": [
            "Address subject",
            "int32_t start_position",
            "Address",
            "Address",
            "int* output_registers",
            "int32_t output_register_count",
            "RegExp::CallOrigin call_origin",
            "Isolate* isolate",
            "Address regexp_data"
          ],
          "return_type": "int",
          "logic": "Entry point called from JavaScript.  Wraps the call to Match after performing necessary type conversions and safety checks."
        },
        {
          "name": "MatchForCallFromRuntime",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<IrRegExpData> regexp_data",
            "DirectHandle<String> subject_string",
            "int* output_registers",
            "int output_register_count",
            "int start_position"
          ],
          "return_type": "int",
          "logic": "Entry point called from the runtime.  Wraps the call to Match with the appropriate call origin."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "BackRefMatchesNoCase",
      "parameters": [
        "Isolate* isolate",
        "int from",
        "int current",
        "int len",
        "base::Vector<const base::uc16> subject",
        "bool unicode"
      ],
      "return_type": "bool",
      "logic": "Compares a backreference with the current position in the subject string, ignoring case (Unicode version)."
    },
    {
      "name": "BackRefMatchesNoCase",
      "parameters": [
        "Isolate* isolate",
        "int from",
        "int current",
        "int len",
        "base::Vector<const uint8_t> subject",
        "bool unicode"
      ],
      "return_type": "bool",
      "logic": "Compares a backreference with the current position in the subject string, ignoring case (Latin1 version)."
    },
    {
      "name": "MaybeTraceInterpreter",
      "parameters": [
        "const uint8_t* code_base",
        "const uint8_t* pc",
        "int stack_depth",
        "int current_position",
        "uint32_t current_char",
        "int bytecode_length",
        "const char* bytecode_name"
      ],
      "return_type": "void",
      "logic": "Debugging function that traces the execution of the bytecode interpreter. Prints information about the current state."
    },
    {
      "name": "Load32Aligned",
      "parameters": [
        "const uint8_t* pc"
      ],
      "return_type": "int32_t",
      "logic": "Loads a 32-bit integer from the given memory location. Assumes the address is aligned."
    },
    {
      "name": "Load16AlignedUnsigned",
      "parameters": [
        "const uint8_t* pc"
      ],
      "return_type": "uint32_t",
      "logic": "Loads a 16-bit unsigned integer from the given memory location. Assumes the address is aligned."
    },
    {
      "name": "Load16AlignedSigned",
      "parameters": [
        "const uint8_t* pc"
      ],
      "return_type": "int32_t",
      "logic": "Loads a 16-bit signed integer from the given memory location. Assumes the address is aligned."
    },
    {
      "name": "LoadPacked24Signed",
      "parameters": [
        "int32_t bytecode_and_packed_arg"
      ],
      "return_type": "int32_t",
      "logic": "Extracts the signed 24-bit argument from the packed bytecode and argument integer."
    },
    {
      "name": "LoadPacked24Unsigned",
      "parameters": [
        "int32_t bytecode_and_packed_arg"
      ],
      "return_type": "uint32_t",
      "logic": "Extracts the unsigned 24-bit argument from the packed bytecode and argument integer."
    },
    {
      "name": "ThrowStackOverflow",
      "parameters": [
        "Isolate* isolate",
        "RegExp::CallOrigin call_origin"
      ],
      "return_type": "IrregexpInterpreter::Result",
      "logic": "Throws a stack overflow exception. Only called from the runtime."
    },
    {
      "name": "MaybeThrowStackOverflow",
      "parameters": [
        "Isolate* isolate",
        "RegExp::CallOrigin call_origin"
      ],
      "return_type": "IrregexpInterpreter::Result",
      "logic": "Throws a stack overflow exception if called from runtime, otherwise returns EXCEPTION."
    },
    {
      "name": "UpdateCodeAndSubjectReferences",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<TrustedByteArray> code_array",
        "DirectHandle<String> subject_string",
        "Tagged<TrustedByteArray>* code_array_out",
        "const uint8_t** code_base_out",
        "const uint8_t** pc_out",
        "Tagged<String>* subject_string_out",
        "base::Vector<const Char>* subject_string_vector_out"
      ],
      "return_type": "void",
      "logic": "Updates the code array and subject string references after a garbage collection."
    },
    {
      "name": "HandleInterrupts",
      "parameters": [
        "Isolate* isolate",
        "RegExp::CallOrigin call_origin",
        "Tagged<TrustedByteArray>* code_array_out",
        "Tagged<String>* subject_string_out",
        "const uint8_t** code_base_out",
        "base::Vector<const Char>* subject_string_vector_out",
        "const uint8_t** pc_out"
      ],
      "return_type": "IrregexpInterpreter::Result",
      "logic": "Handles interrupts during execution. Checks for stack overflows and interrupts requested by the stack guard.  Updates references after GC if necessary."
    },
    {
      "name": "CheckBitInTable",
      "parameters": [
        "const uint32_t current_char",
        "const uint8_t* const table"
      ],
      "return_type": "bool",
      "logic": "Checks if a bit corresponding to the current character is set in the provided table."
    },
    {
      "name": "IndexIsInBounds",
      "parameters": [
        "int index",
        "int length"
      ],
      "return_type": "bool",
      "logic": "Checks if the index is within the bounds of the length."
    },
    {
      "name": "RawMatch",
      "parameters": [
        "Isolate* isolate",
        "Tagged<TrustedByteArray>* code_array",
        "Tagged<String>* subject_string",
        "base::Vector<const Char> subject",
        "int* output_registers",
        "int output_register_count",
        "int total_register_count",
        "int current",
        "uint32_t current_char",
        "RegExp::CallOrigin call_origin",
        "const uint32_t backtrack_limit"
      ],
      "return_type": "IrregexpInterpreter::Result",
      "logic": "The core bytecode interpreter loop. Executes bytecode instructions to match the regular expression against the subject string."
    }
  ]
}