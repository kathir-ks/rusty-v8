{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp.h",
  "imports": [
    "src/common/assert-scope.h",
    "src/handles/handles.h",
    "src/regexp/regexp-error.h",
    "src/regexp/regexp-flags.h",
    "src/regexp/regexp-result-vector.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "RegExp",
      "properties": [],
      "methods": [
        {
          "name": "CanGenerateBytecode",
          "parameters": [],
          "return_type": "static bool",
          "logic": "Determines whether the irregexp engine generates interpreter bytecode."
        },
        {
          "name": "VerifyFlags",
          "parameters": [
            "RegExpFlags flags"
          ],
          "return_type": "V8_EXPORT_PRIVATE static bool",
          "logic": "Verifies that the given flags combination is valid."
        },
        {
          "name": "VerifySyntax",
          "parameters": [
            "Zone* zone",
            "uintptr_t stack_limit",
            "const CharT* input",
            "int input_length",
            "RegExpFlags flags",
            "RegExpError* regexp_error_out",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "template <class CharT>\n  static bool",
          "logic": "Verifies the given pattern, i.e. checks that parsing succeeds. If verification fails, `regexp_error_out` is set."
        },
        {
          "name": "Compile",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSRegExp> re",
            "DirectHandle<String> pattern",
            "RegExpFlags flags",
            "uint32_t backtrack_limit"
          ],
          "return_type": "V8_WARN_UNUSED_RESULT static MaybeDirectHandle<Object>",
          "logic": "Parses the RegExp pattern and prepares the JSRegExp object with generic data and choice of implementation - as well as what the implementation wants to store in the data field. Returns false if compilation fails."
        },
        {
          "name": "EnsureFullyCompiled",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<RegExpData> re_data",
            "DirectHandle<String> subject"
          ],
          "return_type": "V8_WARN_UNUSED_RESULT static bool",
          "logic": "Ensures that a regexp is fully compiled and ready to be executed on a subject string. Returns true on success. Throw and return false on failure."
        },
        {
          "name": "Exec",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSRegExp> regexp",
            "DirectHandle<String> subject",
            "int index",
            "int32_t* result_offsets_vector",
            "uint32_t result_offsets_vector_length"
          ],
          "return_type": "V8_EXPORT_PRIVATE V8_WARN_UNUSED_RESULT static std::optional<int>",
          "logic": "Executes the regexp on the given subject string, starting at the given index. This function may call the garbage collector."
        },
        {
          "name": "Exec_Single",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSRegExp> regexp",
            "DirectHandle<String> subject",
            "int index",
            "DirectHandle<RegExpMatchInfo> last_match_info"
          ],
          "return_type": "V8_EXPORT_PRIVATE V8_WARN_UNUSED_RESULT static MaybeDirectHandle<Object>",
          "logic": "Executes the regexp on the given subject string, starting at the given index and passing the result through the old-style RegExpMatchInfo|Null interface. At most one match is returned."
        },
        {
          "name": "ExperimentalOneshotExec",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSRegExp> regexp",
            "DirectHandle<String> subject",
            "int index",
            "int32_t* result_offsets_vector",
            "uint32_t result_offsets_vector_length"
          ],
          "return_type": "V8_EXPORT_PRIVATE V8_WARN_UNUSED_RESULT static std::optional<int>",
          "logic": "Experimental single-shot execution of the regular expression."
        },
        {
          "name": "AtomExecRaw",
          "parameters": [
            "Isolate* isolate",
            "Address /* AtomRegExpData */ data_address",
            "Address /* String */ subject_address",
            "int32_t index",
            "int32_t* result_offsets_vector",
            "int32_t result_offsets_vector_length"
          ],
          "return_type": "V8_EXPORT_PRIVATE static intptr_t",
          "logic": "Called directly from generated code through ExternalReference. Used for atom regexp execution."
        },
        {
          "name": "SetLastMatchInfo",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<RegExpMatchInfo> last_match_info",
            "DirectHandle<String> subject",
            "int capture_count",
            "int32_t* match"
          ],
          "return_type": "static DirectHandle<RegExpMatchInfo>",
          "logic": "Sets the last match info. If match is nullptr, then setting captures is omitted."
        },
        {
          "name": "CompileForTesting",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "RegExpCompileData* input",
            "RegExpFlags flags",
            "DirectHandle<String> pattern",
            "DirectHandle<String> sample_subject",
            "bool is_one_byte"
          ],
          "return_type": "V8_EXPORT_PRIVATE static bool",
          "logic": "Compiles a regular expression for testing purposes."
        },
        {
          "name": "DotPrintForTesting",
          "parameters": [
            "const char* label",
            "RegExpNode* node"
          ],
          "return_type": "V8_EXPORT_PRIVATE static void",
          "logic": "Prints the regular expression node as a DOT graph for testing purposes."
        },
        {
          "name": "ThrowRegExpException",
          "parameters": [
            "Isolate* isolate",
            "RegExpFlags flags",
            "DirectHandle<String> pattern",
            "RegExpError error"
          ],
          "return_type": "V8_WARN_UNUSED_RESULT\n  static MaybeDirectHandle<Object>",
          "logic": "Throws a RegExp exception."
        },
        {
          "name": "ThrowRegExpException",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<RegExpData> re_data",
            "RegExpError error_text"
          ],
          "return_type": "static void",
          "logic": "Throws a RegExp exception."
        },
        {
          "name": "IsUnmodifiedRegExp",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSRegExp> regexp"
          ],
          "return_type": "static bool",
          "logic": "Checks if a RegExp is unmodified."
        },
        {
          "name": "CreateCaptureNameMap",
          "parameters": [
            "Isolate* isolate",
            "ZoneVector<RegExpCapture*>* named_captures"
          ],
          "return_type": "static DirectHandle<FixedArray>",
          "logic": "Creates a capture name map from named captures."
        }
      ]
    },
    {
      "name": "RegExpGlobalExecRunner",
      "properties": [],
      "methods": [
        {
          "name": "RegExpGlobalExecRunner",
          "parameters": [
            "DirectHandle<RegExpData> regexp_data",
            "DirectHandle<String> subject",
            "Isolate* isolate"
          ],
          "return_type": null,
          "logic": "Constructor for RegExpGlobalExecRunner."
        },
        {
          "name": "FetchNext",
          "parameters": [],
          "return_type": "int32_t*",
          "logic": "Fetch the next entry in the cache for global regexp match results."
        },
        {
          "name": "LastSuccessfulMatch",
          "parameters": [],
          "return_type": "int32_t* const",
          "logic": "Returns the last successful match."
        },
        {
          "name": "HasException",
          "parameters": [],
          "return_type": "bool const",
          "logic": "Checks if an exception occurred."
        }
      ]
    },
    {
      "name": "RegExpResultsCache",
      "properties": [],
      "methods": [
        {
          "name": "Lookup",
          "parameters": [
            "Heap* heap",
            "Tagged<String> key_string",
            "Tagged<Object> key_pattern",
            "Tagged<FixedArray>* last_match_out",
            "ResultsCacheType type"
          ],
          "return_type": "static Tagged<Object>",
          "logic": "Attempt to retrieve a cached result.  On failure, 0 is returned as a Smi. On success, the returned result is guaranteed to be a COW-array."
        },
        {
          "name": "Enter",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<String> key_string",
            "DirectHandle<Object> key_pattern",
            "DirectHandle<FixedArray> value_array",
            "DirectHandle<FixedArray> last_match_cache",
            "ResultsCacheType type"
          ],
          "return_type": "static void",
          "logic": "Attempt to add value_array to the cache specified by type.  On success, value_array is turned into a COW-array."
        },
        {
          "name": "Clear",
          "parameters": [
            "Tagged<FixedArray> cache"
          ],
          "return_type": "static void",
          "logic": "Clears the cache."
        }
      ]
    },
    {
      "name": "RegExpResultsCache_MatchGlobalAtom",
      "properties": [],
      "methods": [
        {
          "name": "TryInsert",
          "parameters": [
            "Isolate* isolate",
            "Tagged<String> subject",
            "Tagged<String> pattern",
            "int number_of_matches",
            "int last_match_index"
          ],
          "return_type": "static void",
          "logic": "Tries to insert a result into the cache."
        },
        {
          "name": "TryGet",
          "parameters": [
            "Isolate* isolate",
            "Tagged<String> subject",
            "Tagged<String> pattern",
            "int* number_of_matches_out",
            "int* last_match_index_out"
          ],
          "return_type": "static bool",
          "logic": "Tries to get a result from the cache."
        },
        {
          "name": "Clear",
          "parameters": [
            "Heap* heap"
          ],
          "return_type": "static void",
          "logic": "Clears the cache."
        }
      ]
    }
  ],
  "functions": []
}