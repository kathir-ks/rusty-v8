{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/experimental/experimental-bytecode.cc",
  "imports": [
    "src/regexp/experimental/experimental-bytecode.h",
    "cctype",
    "iomanip"
  ],
  "classes": [],
  "functions": [
    {
      "name": "PrintAsciiOrHex",
      "parameters": [
        "std::ostream& os",
        "base::uc16 c"
      ],
      "return_type": "std::ostream&",
      "logic": "Prints a character to the output stream either as its ASCII representation if it's printable and less than 128, or as its hexadecimal value otherwise. Returns the output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const RegExpInstruction& inst"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to provide a human-readable string representation of a RegExpInstruction. It uses a switch statement based on the instruction's opcode to format the output string appropriately. Returns the output stream."
    },
    {
      "name": "DigitsRequiredBelow",
      "parameters": [
        "int n"
      ],
      "return_type": "int",
      "logic": "Calculates the number of digits required to represent a non-negative integer less than 'n' in base 10.  Used for formatting instruction numbers when printing a list of instructions."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "base::Vector<const RegExpInstruction> insts"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to provide a human-readable string representation of a sequence of RegExpInstructions.  It iterates through the instructions, printing the instruction number (formatted with leading zeros) and the instruction itself (using the other operator<< overload). Returns the output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const RegExpInstruction::LookaroundPayload& payload"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for LookaroundPayload to output a descriptive string that includes the index, type (ahead or behind), and positivity (positive or negative) of the lookaround.  Returns the output stream."
    }
  ]
}