{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-dotprinter.cc",
  "imports": [
    "src/regexp/regexp-dotprinter.h",
    "src/base/strings.h",
    "src/regexp/regexp-compiler.h",
    "src/utils/ostreams.h"
  ],
  "classes": [
    {
      "name": "DotPrinterImpl",
      "properties": [
        "os_"
      ],
      "methods": [
        {
          "name": "DotPrinterImpl",
          "parameters": [
            "std::ostream& os"
          ],
          "return_type": "explicit DotPrinterImpl",
          "logic": "Constructor for DotPrinterImpl. Initializes the output stream."
        },
        {
          "name": "PrintNode",
          "parameters": [
            "const char* label",
            "RegExpNode* node"
          ],
          "return_type": "void",
          "logic": "Prints the graph structure to the output stream in DOT format. Handles escaping characters in the label, calls Visit to traverse the graph, and outputs the DOT graph structure."
        },
        {
          "name": "Visit",
          "parameters": [
            "RegExpNode* node"
          ],
          "return_type": "void",
          "logic": "Visits a RegExpNode. It checks if the node has already been visited, and if not, marks it as visited and calls Accept on the node (which then invokes the appropriate Visit* method)."
        },
        {
          "name": "PrintAttributes",
          "parameters": [
            "RegExpNode* that"
          ],
          "return_type": "void",
          "logic": "Prints the attributes of a given RegExpNode to the output stream in a format suitable for displaying in a DOT graph."
        },
        {
          "name": "PrintOnFailure",
          "parameters": [
            "RegExpNode* from",
            "RegExpNode* on_failure"
          ],
          "return_type": "void",
          "logic": "Prints an edge to the on_failure node with a dotted style in the DOT graph. Also calls Visit to visit the on_failure node."
        },
        {
          "name": "VisitChoice",
          "parameters": [
            "ChoiceNode* that"
          ],
          "return_type": "void",
          "logic": "Visits a ChoiceNode. Prints the node with '?' label, then iterates through alternatives, printing edge to each alternative and recursively calling Accept on those alternative nodes. Also prints the node attributes."
        },
        {
          "name": "VisitLoopChoice",
          "parameters": [
            "LoopChoiceNode* that"
          ],
          "return_type": "void",
          "logic": "Visits a LoopChoiceNode by calling the VisitChoice method."
        },
        {
          "name": "VisitNegativeLookaroundChoice",
          "parameters": [
            "NegativeLookaroundChoiceNode* that"
          ],
          "return_type": "void",
          "logic": "Visits a NegativeLookaroundChoiceNode by calling the VisitChoice method."
        },
        {
          "name": "VisitText",
          "parameters": [
            "TextNode* that"
          ],
          "return_type": "void",
          "logic": "Visits a TextNode. Prints the textual content of the node, along with node attributes, and edge to the on_success node. Then recursively calls Visit on the successor."
        },
        {
          "name": "VisitBackReference",
          "parameters": [
            "BackReferenceNode* that"
          ],
          "return_type": "void",
          "logic": "Visits a BackReferenceNode. Prints the backreference information, node attributes, and edge to the on_success node.  Then recursively calls Visit on the successor."
        },
        {
          "name": "VisitEnd",
          "parameters": [
            "EndNode* that"
          ],
          "return_type": "void",
          "logic": "Visits an EndNode. Prints the node with a bold style. Prints node attributes."
        },
        {
          "name": "VisitAssertion",
          "parameters": [
            "AssertionNode* that"
          ],
          "return_type": "void",
          "logic": "Visits an AssertionNode. Prints the node label depending on the assertion type, the node attributes, and edge to on_success node. Then recursively calls Visit on the successor."
        },
        {
          "name": "VisitAction",
          "parameters": [
            "ActionNode* that"
          ],
          "return_type": "void",
          "logic": "Visits an ActionNode. Prints node label corresponding to type of action being performed. Prints node attributes, adds edge to on_success node, and recursively calls Visit on the successor."
        }
      ]
    },
    {
      "name": "AttributePrinter",
      "properties": [
        "os_",
        "first_"
      ],
      "methods": [
        {
          "name": "AttributePrinter",
          "parameters": [
            "std::ostream& os"
          ],
          "return_type": "explicit AttributePrinter",
          "logic": "Constructor, initializes the output stream and the first_ flag."
        },
        {
          "name": "PrintSeparator",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a separator '|' unless it is the first attribute being printed."
        },
        {
          "name": "PrintBit",
          "parameters": [
            "const char* name",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Prints a bit attribute if the value is true."
        },
        {
          "name": "PrintPositive",
          "parameters": [
            "const char* name",
            "int value"
          ],
          "return_type": "void",
          "logic": "Prints a positive attribute if the value is non-negative."
        }
      ]
    },
    {
      "name": "DotPrinter",
      "properties": [],
      "methods": [
        {
          "name": "DotPrint",
          "parameters": [
            "const char* label",
            "RegExpNode* node"
          ],
          "return_type": "void",
          "logic": "Static method to print a RegExpNode graph to standard output in DOT format. Creates a StdoutStream, a DotPrinterImpl, and calls PrintNode."
        }
      ]
    }
  ],
  "functions": []
}