{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/regexp-stack.cc",
  "imports": [
    "src/regexp/regexp-stack.h",
    "src/execution/isolate.h",
    "src/utils/memcopy.h"
  ],
  "classes": [
    {
      "name": "RegExpStackScope",
      "properties": [
        "regexp_stack_",
        "old_sp_top_delta_"
      ],
      "methods": [
        {
          "name": "RegExpStackScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes regexp_stack_ with the isolate's regexp stack and stores the initial sp_top_delta_ value. Asserts that the regexp stack is valid."
        },
        {
          "name": "~RegExpStackScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Checks that the sp_top_delta_ has not changed during the scope and resets the regexp stack if it's empty."
        }
      ]
    },
    {
      "name": "RegExpStack",
      "properties": [
        "thread_local_"
      ],
      "methods": [
        {
          "name": "RegExpStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor. Initializes the thread_local_ field."
        },
        {
          "name": "~RegExpStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Frees the thread-local storage and invalidates it."
        },
        {
          "name": "ArchiveStack",
          "parameters": [
            "char* to"
          ],
          "return_type": "char*",
          "logic": "Archives the current stack state to a buffer pointed to by 'to'. It first ensures the stack is dynamic. Then copies the thread_local_ data to the provided buffer and resets the current thread local storage and returns a pointer to the next location after the archived data."
        },
        {
          "name": "RestoreStack",
          "parameters": [
            "char* from"
          ],
          "return_type": "char*",
          "logic": "Restores the stack state from a buffer pointed to by 'from'. Copies the data from the provided buffer to the thread_local_ field and returns pointer to the next location after the restored data."
        },
        {
          "name": "EnsureCapacity",
          "parameters": [
            "size_t size"
          ],
          "return_type": "Address",
          "logic": "Ensures that the stack has at least the specified capacity. If the current capacity is less than the requested size, it allocates a new, larger memory block, copies the existing stack data (if any) to the new block, and updates the thread-local storage. It returns the address of the top of the stack memory."
        }
      ]
    },
    {
      "name": "RegExpStack::ThreadLocal",
      "properties": [
        "memory_",
        "memory_top_",
        "memory_size_",
        "stack_pointer_",
        "limit_",
        "owns_memory_"
      ],
      "methods": [
        {
          "name": "ResetToStaticStack",
          "parameters": [
            "RegExpStack* regexp_stack"
          ],
          "return_type": "void",
          "logic": "Resets the thread-local stack to use the static stack associated with the provided RegExpStack object. Frees the currently allocated memory if any and sets the pointers to point to the static stack."
        },
        {
          "name": "FreeAndInvalidate",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees the memory allocated for the stack (if any) and sets the member variables to invalid values (nullptr and 0) to prevent accidental use of the freed memory."
        }
      ]
    }
  ],
  "functions": []
}