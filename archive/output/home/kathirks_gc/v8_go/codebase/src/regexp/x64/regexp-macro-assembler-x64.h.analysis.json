{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/x64/regexp-macro-assembler-x64.h",
  "imports": [
    "src/codegen/macro-assembler.h",
    "src/regexp/regexp-macro-assembler.h",
    "src/zone/zone-chunk-list.h"
  ],
  "classes": [
    {
      "name": "RegExpMacroAssemblerX64",
      "properties": [
        "masm_",
        "no_root_array_scope_",
        "code_relative_fixup_positions_",
        "mode_",
        "num_registers_",
        "num_saved_registers_",
        "entry_label_",
        "start_label_",
        "success_label_",
        "backtrack_label_",
        "exit_label_",
        "check_preempt_label_",
        "stack_overflow_label_",
        "fallback_label_"
      ],
      "methods": [
        {
          "name": "RegExpMacroAssemblerX64",
          "parameters": [
            "Isolate* isolate",
            "Zone* zone",
            "Mode mode",
            "int registers_to_save"
          ],
          "return_type": "void",
          "logic": "Constructor for the RegExpMacroAssemblerX64 class. Initializes the object with the isolate, zone, mode, and number of registers to save."
        },
        {
          "name": "~RegExpMacroAssemblerX64",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the RegExpMacroAssemblerX64 class. Performs cleanup."
        },
        {
          "name": "stack_limit_slack_slot_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of stack slots available for slack before reaching the stack limit."
        },
        {
          "name": "AdvanceCurrentPosition",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the current position in the input string by a specified amount."
        },
        {
          "name": "AdvanceRegister",
          "parameters": [
            "int reg",
            "int by"
          ],
          "return_type": "void",
          "logic": "Advances the value of a specified register by a specified amount."
        },
        {
          "name": "Backtrack",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs a backtrack operation, jumping to the last saved backtrack point."
        },
        {
          "name": "Bind",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a label to the current position in the generated code."
        },
        {
          "name": "CheckAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is at the start of the input string. If so, jumps to the specified label."
        },
        {
          "name": "CheckCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is equal to a specified character. If so, jumps to the specified label."
        },
        {
          "name": "CheckCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after applying a bitwise AND with a mask, is equal to a specified character. If so, jumps to the specified label."
        },
        {
          "name": "CheckCharacterGT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_greater"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is greater than a specified limit. If so, jumps to the specified label."
        },
        {
          "name": "CheckCharacterLT",
          "parameters": [
            "base::uc16 limit",
            "Label* on_less"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is less than a specified limit. If so, jumps to the specified label."
        },
        {
          "name": "CheckGreedyLoop",
          "parameters": [
            "Label* on_tos_equals_current_position"
          ],
          "return_type": "void",
          "logic": "Checks if the top of the stack (TOS) is equal to the current position. Used for greedy loop optimization."
        },
        {
          "name": "CheckNotAtStart",
          "parameters": [
            "int cp_offset",
            "Label* on_not_at_start"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is not at the start of the input string. If so, jumps to the specified label."
        },
        {
          "name": "CheckNotBackReference",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if a backreference (specified by a register) does not match the substring it refers to. If not, jumps to the specified label."
        },
        {
          "name": "CheckNotBackReferenceIgnoreCase",
          "parameters": [
            "int start_reg",
            "bool read_backward",
            "bool unicode",
            "Label* on_no_match"
          ],
          "return_type": "void",
          "logic": "Checks if a backreference (specified by a register) does not match the substring it refers to, ignoring case. If not, jumps to the specified label."
        },
        {
          "name": "CheckNotCharacter",
          "parameters": [
            "uint32_t c",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not equal to a specified character. If so, jumps to the specified label."
        },
        {
          "name": "CheckNotCharacterAfterAnd",
          "parameters": [
            "uint32_t c",
            "uint32_t mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after applying a bitwise AND with a mask, is not equal to a specified character. If so, jumps to the specified label."
        },
        {
          "name": "CheckNotCharacterAfterMinusAnd",
          "parameters": [
            "base::uc16 c",
            "base::uc16 minus",
            "base::uc16 mask",
            "Label* on_not_equal"
          ],
          "return_type": "void",
          "logic": "Checks if the current character, after subtracting 'minus' and applying a bitwise AND with 'mask', is not equal to 'c'. Jumps if not equal."
        },
        {
          "name": "CheckCharacterInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is within a specified range (inclusive). If so, jumps to the specified label."
        },
        {
          "name": "CheckCharacterNotInRange",
          "parameters": [
            "base::uc16 from",
            "base::uc16 to",
            "Label* on_not_in_range"
          ],
          "return_type": "void",
          "logic": "Checks if the current character is not within a specified range (inclusive). If so, jumps to the specified label."
        },
        {
          "name": "CheckCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is within any of the ranges specified in an array of character ranges. If so, jumps to the specified label. Returns true if the check is possible."
        },
        {
          "name": "CheckCharacterNotInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges",
            "Label* on_not_in_range"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character is not within any of the ranges specified in an array of character ranges. If so, jumps to the specified label. Returns true if the check is possible."
        },
        {
          "name": "CheckBitInTable",
          "parameters": [
            "Handle<ByteArray> table",
            "Label* on_bit_set"
          ],
          "return_type": "void",
          "logic": "Checks if a bit corresponding to the current character is set in a specified byte array table. If so, jumps to the specified label."
        },
        {
          "name": "SkipUntilBitInTable",
          "parameters": [
            "int cp_offset",
            "Handle<ByteArray> table",
            "Handle<ByteArray> nibble_table",
            "int advance_by"
          ],
          "return_type": "void",
          "logic": "Skips characters in the input string until a bit corresponding to a character is set in a specified byte array table."
        },
        {
          "name": "SkipUntilBitInTableUseSimd",
          "parameters": [
            "int advance_by"
          ],
          "return_type": "bool",
          "logic": "Uses SIMD instructions to skip characters in the input string until a bit corresponding to a character is set in a specified byte array table. Returns true if SIMD is available/possible."
        },
        {
          "name": "CheckPosition",
          "parameters": [
            "int cp_offset",
            "Label* on_outside_input"
          ],
          "return_type": "void",
          "logic": "Checks if the current position plus an offset is within the bounds of the input string. If not, jumps to the specified label."
        },
        {
          "name": "CheckSpecialClassRanges",
          "parameters": [
            "StandardCharacterSet type",
            "Label* on_no_match"
          ],
          "return_type": "bool",
          "logic": "Checks if the current character belongs to a specified special character class (e.g., whitespace, digit). If it doesn't, jumps to the specified label. Returns true if the check is possible."
        },
        {
          "name": "BindJumpTarget",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Binds a jump target label. Used for implementing goto-like functionality."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Indicates that the regular expression matching has failed."
        },
        {
          "name": "GetCode",
          "parameters": [
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Finalizes the generated code and returns a handle to the compiled code object."
        },
        {
          "name": "GoTo",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Unconditionally jumps to a specified label."
        },
        {
          "name": "IfRegisterGE",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_ge"
          ],
          "return_type": "void",
          "logic": "Checks if the value in a specified register is greater than or equal to a specified value. If so, jumps to the specified label."
        },
        {
          "name": "IfRegisterLT",
          "parameters": [
            "int reg",
            "int comparand",
            "Label* if_lt"
          ],
          "return_type": "void",
          "logic": "Checks if the value in a specified register is less than a specified value. If so, jumps to the specified label."
        },
        {
          "name": "IfRegisterEqPos",
          "parameters": [
            "int reg",
            "Label* if_eq"
          ],
          "return_type": "void",
          "logic": "Checks if the value in a specified register is equal to the current position. If so, jumps to the specified label."
        },
        {
          "name": "Implementation",
          "parameters": [],
          "return_type": "IrregexpImplementation",
          "logic": "Returns the implementation type for this macro assembler."
        },
        {
          "name": "LoadCurrentCharacterUnchecked",
          "parameters": [
            "int cp_offset",
            "int character_count"
          ],
          "return_type": "void",
          "logic": "Loads the current character from the input string into the current_character register (rdx) without checking bounds."
        },
        {
          "name": "PopCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the current position from the backtrack stack and updates the current position."
        },
        {
          "name": "PopRegister",
          "parameters": [
            "int register_index"
          ],
          "return_type": "void",
          "logic": "Pops the value of a register from the backtrack stack and updates the register."
        },
        {
          "name": "PushBacktrack",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes a backtrack point (a label) onto the backtrack stack."
        },
        {
          "name": "PushCurrentPosition",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes the current position onto the backtrack stack."
        },
        {
          "name": "PushRegister",
          "parameters": [
            "int register_index",
            "StackCheckFlag check_stack_limit"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the backtrack stack."
        },
        {
          "name": "ReadCurrentPositionFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the current position from a register."
        },
        {
          "name": "ReadStackPointerFromRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads the stack pointer from a register."
        },
        {
          "name": "SetCurrentPositionFromEnd",
          "parameters": [
            "int by"
          ],
          "return_type": "void",
          "logic": "Sets the current position to a position relative to the end of the input string."
        },
        {
          "name": "SetRegister",
          "parameters": [
            "int register_index",
            "int to"
          ],
          "return_type": "void",
          "logic": "Sets the value of a specified register to a specified value."
        },
        {
          "name": "Succeed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates that the regular expression matching has succeeded."
        },
        {
          "name": "WriteCurrentPositionToRegister",
          "parameters": [
            "int reg",
            "int cp_offset"
          ],
          "return_type": "void",
          "logic": "Writes the current position plus an offset to a specified register."
        },
        {
          "name": "ClearRegisters",
          "parameters": [
            "int reg_from",
            "int reg_to"
          ],
          "return_type": "void",
          "logic": "Clears a range of registers by setting them to zero."
        },
        {
          "name": "WriteStackPointerToRegister",
          "parameters": [
            "int reg"
          ],
          "return_type": "void",
          "logic": "Writes the stack pointer to a register."
        },
        {
          "name": "CheckStackGuardState",
          "parameters": [
            "Address* return_address",
            "Address raw_code",
            "Address re_frame",
            "uintptr_t extra_space"
          ],
          "return_type": "int",
          "logic": "Static method called when the stack guard is triggered. Used to relocate the code object if it has been moved by the garbage collector."
        },
        {
          "name": "CallCFunctionFromIrregexpCode",
          "parameters": [
            "ExternalReference function",
            "int num_arguments"
          ],
          "return_type": "void",
          "logic": "Calls a C function from the generated Irregexp code."
        },
        {
          "name": "PushCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pushes caller-saved registers onto the stack."
        },
        {
          "name": "PopCallerSavedRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops caller-saved registers from the stack."
        },
        {
          "name": "CheckPreemption",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks whether a preemption has been requested and handles it if so."
        },
        {
          "name": "CheckStackLimit",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks whether the stack limit has been exceeded and jumps to stack_overflow_label_ if so."
        },
        {
          "name": "AssertAboveStackLimitMinusSlack",
          "parameters": [],
          "return_type": "void",
          "logic": "Asserts that the current stack pointer is above the stack limit minus some slack."
        },
        {
          "name": "CallCheckStackGuardState",
          "parameters": [
            "Immediate extra_space"
          ],
          "return_type": "void",
          "logic": "Calls the CheckStackGuardState function with an optional extra space argument."
        },
        {
          "name": "CallIsCharacterInRangeArray",
          "parameters": [
            "const ZoneList<CharacterRange>* ranges"
          ],
          "return_type": "void",
          "logic": "Calls a helper function to determine if the current character is within a character range array."
        },
        {
          "name": "register_location",
          "parameters": [
            "int register_index"
          ],
          "return_type": "Operand",
          "logic": "Returns an Operand representing the memory location of a regexp register relative to the base pointer (rbp)."
        },
        {
          "name": "char_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of characters in the string (1 for LATIN1, 2 for UC16)."
        },
        {
          "name": "CharSizeScaleFactor",
          "parameters": [],
          "return_type": "ScaleFactor",
          "logic": "Returns the scale factor to use based on the character size (LATIN1 or UC16)."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Branches to the label if it's not null; otherwise, performs a backtrack."
        },
        {
          "name": "BranchOrBacktrack",
          "parameters": [
            "Condition condition",
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Branches to the label conditionally if it's not null; otherwise, performs a conditional backtrack."
        },
        {
          "name": "MarkPositionForCodeRelativeFixup",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the current position in the code for a code-relative fixup, used when patching code addresses."
        },
        {
          "name": "FixupCodeRelativePositions",
          "parameters": [],
          "return_type": "void",
          "logic": "Fixes up code-relative positions by adjusting the offsets."
        },
        {
          "name": "SafeCall",
          "parameters": [
            "Label* to"
          ],
          "return_type": "void",
          "logic": "Performs a GC-safe call to a label within the generated code."
        },
        {
          "name": "SafeCallTarget",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Marks a label as a safe call target."
        },
        {
          "name": "SafeReturn",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs a GC-safe return from a function call within the generated code."
        },
        {
          "name": "Push",
          "parameters": [
            "Register source"
          ],
          "return_type": "void",
          "logic": "Pushes the value of a register onto the backtrack stack."
        },
        {
          "name": "Push",
          "parameters": [
            "Immediate value"
          ],
          "return_type": "void",
          "logic": "Pushes an immediate value onto the backtrack stack."
        },
        {
          "name": "Push",
          "parameters": [
            "Label* label"
          ],
          "return_type": "void",
          "logic": "Pushes the InstructionStream object relative offset of a label onto the backtrack stack."
        },
        {
          "name": "Pop",
          "parameters": [
            "Register target"
          ],
          "return_type": "void",
          "logic": "Pops a value from the backtrack stack into a register."
        },
        {
          "name": "Drop",
          "parameters": [],
          "return_type": "void",
          "logic": "Drops the top value from the backtrack stack (increments the stack pointer)."
        },
        {
          "name": "LoadRegExpStackPointerFromMemory",
          "parameters": [
            "Register dst"
          ],
          "return_type": "void",
          "logic": "Loads the regexp stack pointer from memory into the destination register."
        },
        {
          "name": "StoreRegExpStackPointerToMemory",
          "parameters": [
            "Register src",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Stores the regexp stack pointer from the source register to memory, using a scratch register."
        },
        {
          "name": "PushRegExpBasePointer",
          "parameters": [
            "Register scratch_pointer",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pushes the regexp base pointer onto the backtrack stack using scratch registers."
        },
        {
          "name": "PopRegExpBasePointer",
          "parameters": [
            "Register scratch_pointer_out",
            "Register scratch"
          ],
          "return_type": "void",
          "logic": "Pops the regexp base pointer from the backtrack stack into the output register using a scratch register."
        },
        {
          "name": "ReadPositionFromRegister",
          "parameters": [
            "Register dst",
            "int reg"
          ],
          "return_type": "void",
          "logic": "Reads a position from a regexp register."
        }
      ]
    }
  ],
  "functions": []
}