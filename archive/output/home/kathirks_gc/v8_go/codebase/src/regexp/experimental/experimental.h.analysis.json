{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/regexp/experimental/experimental.h",
  "imports": [
    "src/regexp/regexp-flags.h",
    "src/regexp/regexp.h"
  ],
  "classes": [
    {
      "name": "ExperimentalRegExp",
      "properties": [],
      "methods": [
        {
          "name": "CanBeHandled",
          "parameters": [
            "RegExpTree* tree",
            "DirectHandle<String> pattern",
            "RegExpFlags flags",
            "int capture_count"
          ],
          "return_type": "bool",
          "logic": "Checks if a parsed regexp pattern can be compiled and executed by the EXPERIMENTAL engine.  It examines the RegExpTree to determine if the engine can handle the pattern."
        },
        {
          "name": "Initialize",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSRegExp> re",
            "DirectHandle<String> pattern",
            "RegExpFlags flags",
            "int capture_count"
          ],
          "return_type": "void",
          "logic": "Initializes the experimental regexp engine with the provided isolate, JSRegExp handle, pattern, flags, and capture count."
        },
        {
          "name": "IsCompiled",
          "parameters": [
            "DirectHandle<IrRegExpData> re_data",
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if the provided IrRegExpData has been compiled for the experimental engine."
        },
        {
          "name": "Compile",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<IrRegExpData> re_data"
          ],
          "return_type": "bool",
          "logic": "Compiles the provided IrRegExpData using the experimental engine for a given isolate."
        },
        {
          "name": "MatchForCallFromJs",
          "parameters": [
            "Address subject",
            "int32_t start_position",
            "Address input_start",
            "Address input_end",
            "int* output_registers",
            "int32_t output_register_count",
            "RegExp::CallOrigin call_origin",
            "Isolate* isolate",
            "Address regexp_data"
          ],
          "return_type": "int32_t",
          "logic": "Matches the subject string against the compiled regexp data. Used when the regexp is called from JavaScript."
        },
        {
          "name": "Exec",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<IrRegExpData> regexp_data",
            "DirectHandle<String> subject",
            "int index",
            "int32_t* result_offsets_vector",
            "uint32_t result_offsets_vector_length"
          ],
          "return_type": "std::optional<int>",
          "logic": "Executes the experimental regular expression on the subject string, returning an optional index of the match."
        },
        {
          "name": "ExecRaw",
          "parameters": [
            "Isolate* isolate",
            "RegExp::CallOrigin call_origin",
            "Tagged<IrRegExpData> regexp_data",
            "Tagged<String> subject",
            "int32_t* output_registers",
            "int32_t output_register_count",
            "int32_t subject_index"
          ],
          "return_type": "int32_t",
          "logic": "Executes the experimental regular expression on the subject string, stores results in provided registers, raw version without handle."
        },
        {
          "name": "OneshotExec",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<IrRegExpData> regexp_data",
            "DirectHandle<String> subject",
            "int index",
            "int32_t* result_offsets_vector",
            "uint32_t result_offsets_vector_length"
          ],
          "return_type": "std::optional<int>",
          "logic": "Executes the experimental regular expression in a oneshot fashion, regardless of its type tag. Returns an optional index of the match."
        },
        {
          "name": "OneshotExecRaw",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<IrRegExpData> regexp_data",
            "DirectHandle<String> subject",
            "int32_t* output_registers",
            "int32_t output_register_count",
            "int32_t subject_index"
          ],
          "return_type": "int32_t",
          "logic": "Executes the experimental regular expression in a oneshot fashion, stores results in provided registers, raw version with handle."
        }
      ]
    }
  ],
  "functions": [],
  "constants": [
    {
      "name": "kSupportsUnicode",
      "type": "bool",
      "value": "false"
    }
  ]
}