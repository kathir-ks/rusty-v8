{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ic/binary-op-assembler.h",
  "imports": [
    "<functional>",
    "src/codegen/code-stub-assembler.h"
  ],
  "classes": [
    {
      "name": "BinaryOpAssembler",
      "properties": [],
      "methods": [
        {
          "name": "BinaryOpAssembler",
          "parameters": [
            "compiler::CodeAssemblerState* state"
          ],
          "return_type": "explicit",
          "logic": "Constructor for BinaryOpAssembler. Initializes the base class CodeStubAssembler with the given state."
        },
        {
          "name": "Generate_AddWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the addition operation with type feedback."
        },
        {
          "name": "Generate_SubtractWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the subtraction operation with type feedback."
        },
        {
          "name": "Generate_MultiplyWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the multiplication operation with type feedback."
        },
        {
          "name": "Generate_DivideWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> dividend",
            "TNode<Object> divisor",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the division operation with type feedback."
        },
        {
          "name": "Generate_ModulusWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> dividend",
            "TNode<Object> divisor",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the modulus operation with type feedback."
        },
        {
          "name": "Generate_ExponentiateWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> base",
            "TNode<Object> exponent",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the exponentiation operation with type feedback."
        },
        {
          "name": "Generate_BitwiseOrWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the bitwise OR operation with type feedback.  Calls Generate_BitwiseBinaryOpWithFeedback."
        },
        {
          "name": "Generate_BitwiseXorWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the bitwise XOR operation with type feedback. Calls Generate_BitwiseBinaryOpWithFeedback."
        },
        {
          "name": "Generate_BitwiseAndWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the bitwise AND operation with type feedback. Calls Generate_BitwiseBinaryOpWithFeedback."
        },
        {
          "name": "Generate_ShiftLeftWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the left shift operation with type feedback. Calls Generate_BitwiseBinaryOpWithFeedback."
        },
        {
          "name": "Generate_ShiftRightWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the right shift operation with type feedback. Calls Generate_BitwiseBinaryOpWithFeedback."
        },
        {
          "name": "Generate_ShiftRightLogicalWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for the unsigned right shift operation with type feedback. Calls Generate_BitwiseBinaryOpWithFeedback."
        },
        {
          "name": "Generate_BitwiseBinaryOpWithFeedback",
          "parameters": [
            "Operation bitwise_op",
            "TNode<Object> left",
            "TNode<Object> right",
            "const LazyNode<Context>& context",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a generic bitwise binary operation with type feedback. Dispatches to Smi specific or general feedback based on rhs_known_smi."
        },
        {
          "name": "Generate_BitwiseBinaryOp",
          "parameters": [
            "Operation bitwise_op",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<Context> context"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a bitwise binary operation without explicit feedback, using the context. Calls Generate_BitwiseBinaryOpWithOptionalFeedback."
        },
        {
          "name": "Generate_BinaryOperationWithFeedback",
          "parameters": [
            "const LazyNode<Context>& context",
            "TNode<Object> left",
            "TNode<Object> right",
            "TNode<UintPtrT> slot",
            "const LazyNode<HeapObject>& maybe_feedback_vector",
            "const SmiOperation& smiOperation",
            "const FloatOperation& floatOperation",
            "Operation op",
            "UpdateFeedbackMode update_feedback_mode",
            "bool rhs_known_smi"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a binary operation with type feedback, handling Smi and Float64 cases."
        },
        {
          "name": "Generate_BitwiseBinaryOpWithOptionalFeedback",
          "parameters": [
            "Operation bitwise_op",
            "TNode<Object> left",
            "TNode<Object> right",
            "const LazyNode<Context>& context",
            "TNode<UintPtrT>* slot",
            "const LazyNode<HeapObject>* maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a generic bitwise binary operation with optional type feedback."
        },
        {
          "name": "Generate_BitwiseBinaryOpWithSmiOperandAndOptionalFeedback",
          "parameters": [
            "Operation bitwise_op",
            "TNode<Object> left",
            "TNode<Object> right",
            "const LazyNode<Context>& context",
            "TNode<UintPtrT>* slot",
            "const LazyNode<HeapObject>* maybe_feedback_vector",
            "UpdateFeedbackMode update_feedback_mode"
          ],
          "return_type": "TNode<Object>",
          "logic": "Generates code for a bitwise binary operation with an Smi operand and optional type feedback."
        },
        {
          "name": "IsBitwiseOutputKnownSmi",
          "parameters": [
            "Operation bitwise_op"
          ],
          "return_type": "bool",
          "logic": "Checks if the output of a bitwise operation is known to be an Smi when both operands are Smis."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [],
  "typedefs": [
    {
      "name": "SmiOperation",
      "type": "std::function<TNode<Object>(TNode<Smi>, TNode<Smi>, TVariable<Smi>*)>"
    },
    {
      "name": "FloatOperation",
      "type": "std::function<TNode<Float64T>(TNode<Float64T>, TNode<Float64T>)>"
    }
  ]
}