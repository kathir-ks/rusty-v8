{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/logging/code-events.h",
  "imports": [
    "<vector>",
    "src/base/platform/mutex.h",
    "src/base/vector.h",
    "src/common/globals.h",
    "src/objects/bytecode-array.h",
    "src/objects/code.h",
    "src/objects/instruction-stream.h",
    "src/objects/name.h",
    "src/objects/shared-function-info.h",
    "src/objects/string.h"
  ],
  "classes": [
    {
      "name": "LogEventListener",
      "properties": [],
      "methods": [
        {
          "name": "~LogEventListener",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor to ensure proper cleanup in derived classes."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "const char* name"
          ],
          "return_type": "virtual void",
          "logic": "Records a code creation event with a comment for the code."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<Name> name"
          ],
          "return_type": "virtual void",
          "logic": "Records a code creation event with a name object for the code."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> script_name"
          ],
          "return_type": "virtual void",
          "logic": "Records a code creation event associated with a shared function info and script name."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> script_name",
            "int line",
            "int column"
          ],
          "return_type": "virtual void",
          "logic": "Records a code creation event with shared function info, script name, line number, and column number."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "const wasm::WasmCode* code",
            "wasm::WasmName name",
            "const char* source_url",
            "int code_offset",
            "int script_id"
          ],
          "return_type": "virtual void",
          "logic": "Records a WASM code creation event with WASM specific information like source URL, code offset, and script ID."
        },
        {
          "name": "CallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "virtual void",
          "logic": "Records a callback event."
        },
        {
          "name": "GetterCallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "virtual void",
          "logic": "Records a getter callback event."
        },
        {
          "name": "SetterCallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "virtual void",
          "logic": "Records a setter callback event."
        },
        {
          "name": "RegExpCodeCreateEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "virtual void",
          "logic": "Records a regular expression code creation event."
        },
        {
          "name": "CodeMoveEvent",
          "parameters": [
            "Tagged<InstructionStream> from",
            "Tagged<InstructionStream> to"
          ],
          "return_type": "virtual void",
          "logic": "Records a code move event from one instruction stream location to another."
        },
        {
          "name": "BytecodeMoveEvent",
          "parameters": [
            "Tagged<BytecodeArray> from",
            "Tagged<BytecodeArray> to"
          ],
          "return_type": "virtual void",
          "logic": "Records a bytecode move event from one bytecode array to another."
        },
        {
          "name": "SharedFunctionInfoMoveEvent",
          "parameters": [
            "Address from",
            "Address to"
          ],
          "return_type": "virtual void",
          "logic": "Records a shared function info move event."
        },
        {
          "name": "NativeContextMoveEvent",
          "parameters": [
            "Address from",
            "Address to"
          ],
          "return_type": "virtual void",
          "logic": "Records a native context move event."
        },
        {
          "name": "CodeMovingGCEvent",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Records a code moving garbage collection event."
        },
        {
          "name": "CodeDisableOptEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared"
          ],
          "return_type": "virtual void",
          "logic": "Records a code disable optimization event."
        },
        {
          "name": "CodeDeoptEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "DeoptimizeKind kind",
            "Address pc",
            "int fp_to_sp_delta"
          ],
          "return_type": "virtual void",
          "logic": "Records a code deoptimization event, including the kind of deoptimization and relevant addresses."
        },
        {
          "name": "CodeDependencyChangeEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "const char* reason"
          ],
          "return_type": "virtual void",
          "logic": "Records a code dependency change event with a reason."
        },
        {
          "name": "WeakCodeClearEvent",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Records an event indicating that weak references to code objects have been cleared."
        },
        {
          "name": "is_listening_to_code_events",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Returns whether the listener is interested in code events. Defaults to false."
        },
        {
          "name": "allows_code_compaction",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Returns whether the listener allows code compaction. Defaults to true."
        }
      ]
    },
    {
      "name": "Logger",
      "properties": [
        "listeners_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "AddListener",
          "parameters": [
            "LogEventListener* listener"
          ],
          "return_type": "bool",
          "logic": "Adds a LogEventListener to the list of listeners.  Returns true if the listener was added, false if it was already present."
        },
        {
          "name": "RemoveListener",
          "parameters": [
            "LogEventListener* listener"
          ],
          "return_type": "bool",
          "logic": "Removes a LogEventListener from the list of listeners. Returns true if the listener was removed, false if it wasn't found."
        },
        {
          "name": "is_listening_to_code_events",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if any of the listeners are listening to code events."
        },
        {
          "name": "allows_code_compaction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all listeners allow code compaction. Returns false if any listener disallows it."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "const char* comment"
          ],
          "return_type": "void",
          "logic": "Dispatches a code creation event with a comment to all registered listeners."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<Name> name"
          ],
          "return_type": "void",
          "logic": "Dispatches a code creation event with a name object to all registered listeners."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> name"
          ],
          "return_type": "void",
          "logic": "Dispatches a code creation event with shared function info and script name to all registered listeners."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> source",
            "int line",
            "int column"
          ],
          "return_type": "void",
          "logic": "Dispatches a code creation event with shared function info, script name, line number, and column number to all registered listeners."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "const wasm::WasmCode* code",
            "wasm::WasmName name",
            "const char* source_url",
            "int code_offset",
            "int script_id"
          ],
          "return_type": "void",
          "logic": "Dispatches a WASM code creation event to all listeners."
        },
        {
          "name": "CallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "void",
          "logic": "Dispatches a callback event to all registered listeners."
        },
        {
          "name": "GetterCallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "void",
          "logic": "Dispatches a getter callback event to all registered listeners."
        },
        {
          "name": "SetterCallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "void",
          "logic": "Dispatches a setter callback event to all registered listeners."
        },
        {
          "name": "RegExpCodeCreateEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "void",
          "logic": "Dispatches a regular expression code creation event to all registered listeners."
        },
        {
          "name": "CodeMoveEvent",
          "parameters": [
            "Tagged<InstructionStream> from",
            "Tagged<InstructionStream> to"
          ],
          "return_type": "void",
          "logic": "Dispatches a code move event to all registered listeners."
        },
        {
          "name": "BytecodeMoveEvent",
          "parameters": [
            "Tagged<BytecodeArray> from",
            "Tagged<BytecodeArray> to"
          ],
          "return_type": "void",
          "logic": "Dispatches a bytecode move event to all registered listeners."
        },
        {
          "name": "SharedFunctionInfoMoveEvent",
          "parameters": [
            "Address from",
            "Address to"
          ],
          "return_type": "void",
          "logic": "Dispatches a shared function info move event to all registered listeners."
        },
        {
          "name": "NativeContextMoveEvent",
          "parameters": [
            "Address from",
            "Address to"
          ],
          "return_type": "void",
          "logic": "Dispatches a native context move event to all registered listeners."
        },
        {
          "name": "CodeMovingGCEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Dispatches a code moving garbage collection event to all registered listeners."
        },
        {
          "name": "CodeDisableOptEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared"
          ],
          "return_type": "void",
          "logic": "Dispatches a code disable optimization event to all registered listeners."
        },
        {
          "name": "CodeDeoptEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "DeoptimizeKind kind",
            "Address pc",
            "int fp_to_sp_delta"
          ],
          "return_type": "void",
          "logic": "Dispatches a code deoptimization event to all registered listeners."
        },
        {
          "name": "CodeDependencyChangeEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "DirectHandle<SharedFunctionInfo> sfi",
            "const char* reason"
          ],
          "return_type": "void",
          "logic": "Dispatches a code dependency change event to all registered listeners."
        },
        {
          "name": "WeakCodeClearEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Dispatches a weak code clear event to all registered listeners."
        }
      ]
    }
  ],
  "functions": []
}