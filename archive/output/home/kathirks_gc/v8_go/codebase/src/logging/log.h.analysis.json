{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/logging/log.h",
  "imports": [
    "<atomic>",
    "<memory>",
    "<set>",
    "<string>",
    "\"include/v8-callbacks.h\"",
    "\"include/v8-profiler.h\"",
    "\"src/base/platform/elapsed-timer.h\"",
    "\"src/execution/isolate.h\"",
    "\"src/logging/code-events.h\"",
    "\"src/objects/objects.h\"",
    "\"src/regexp/regexp-flags.h\""
  ],
  "classes": [
    {
      "name": "ExistingCodeLogger",
      "properties": [
        "isolate_",
        "listener_"
      ],
      "methods": [
        {
          "name": "ExistingCodeLogger",
          "parameters": [
            "Isolate* isolate",
            "LogEventListener* listener = nullptr"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the isolate and listener pointers."
        },
        {
          "name": "LogCodeObjects",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all code objects present in the isolate."
        },
        {
          "name": "LogBuiltins",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all builtin code objects."
        },
        {
          "name": "LogCompiledFunctions",
          "parameters": [
            "bool ensure_source_positions_available = true"
          ],
          "return_type": "void",
          "logic": "Logs all compiled functions, ensuring source position information is available if specified."
        },
        {
          "name": "LogExistingFunction",
          "parameters": [
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<AbstractCode> code",
            "LogEventListener::CodeTag tag = LogEventListener::CodeTag::kFunction"
          ],
          "return_type": "void",
          "logic": "Logs information about a specific function that already exists."
        },
        {
          "name": "LogCodeObject",
          "parameters": [
            "Tagged<AbstractCode> object"
          ],
          "return_type": "void",
          "logic": "Logs information about a given abstract code object."
        },
        {
          "name": "LogInterpretedFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all interpreted functions (only available when V8_ENABLE_ETW_STACK_WALKING is defined)."
        }
      ]
    },
    {
      "name": "V8FileLogger",
      "properties": [
        "isolate_",
        "ticker_",
        "profiler_",
        "is_logging_",
        "log_file_",
        "perf_basic_logger_",
        "perf_jit_logger_",
        "ll_logger_",
        "jit_logger_",
        "gdb_jit_logger_",
        "etw_jit_logger_",
        "logged_source_code_",
        "next_source_info_id_",
        "is_initialized_",
        "existing_code_logger_",
        "timer_"
      ],
      "methods": [
        {
          "name": "V8FileLogger",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for V8FileLogger. Initializes the logger for a specific Isolate."
        },
        {
          "name": "~V8FileLogger",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for V8FileLogger. Cleans up resources acquired during the logger's lifetime."
        },
        {
          "name": "SetUp",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Acquires resources and sets up the logging system based on command line flags."
        },
        {
          "name": "LateSetup",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Performs setup actions after the logger is already created."
        },
        {
          "name": "TearDownAndGetLogFile",
          "parameters": [],
          "return_type": "FILE*",
          "logic": "Frees resources, closes the log file, and returns the file stream. It might return a temporary file if one was used."
        },
        {
          "name": "SetCodeEventHandler",
          "parameters": [
            "uint32_t options",
            "JitCodeEventHandler event_handler"
          ],
          "return_type": "void",
          "logic": "Sets the JIT code event handler."
        },
        {
          "name": "SetEtwCodeEventHandler",
          "parameters": [
            "uint32_t options"
          ],
          "return_type": "void",
          "logic": "Sets the ETW code event handler for stack walking (only available when V8_ENABLE_ETW_STACK_WALKING is defined)."
        },
        {
          "name": "ResetEtwCodeEventHandler",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the ETW code event handler (only available when V8_ENABLE_ETW_STACK_WALKING is defined)."
        },
        {
          "name": "sampler",
          "parameters": [],
          "return_type": "sampler::Sampler*",
          "logic": "Returns the sampler instance used for profiling."
        },
        {
          "name": "file_name",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the log file."
        },
        {
          "name": "StopProfilerThread",
          "parameters": [],
          "return_type": "void",
          "logic": "Stops the profiler thread, if it's running."
        },
        {
          "name": "StringEvent",
          "parameters": [
            "const char* name",
            "const char* value"
          ],
          "return_type": "void",
          "logic": "Emits an event with a string name and value."
        },
        {
          "name": "IntPtrTEvent",
          "parameters": [
            "const char* name",
            "intptr_t value"
          ],
          "return_type": "void",
          "logic": "Emits an event with a string name and an intptr_t value."
        },
        {
          "name": "NewEvent",
          "parameters": [
            "const char* name",
            "void* object",
            "size_t size"
          ],
          "return_type": "void",
          "logic": "Emits a memory allocation event."
        },
        {
          "name": "DeleteEvent",
          "parameters": [
            "const char* name",
            "void* object"
          ],
          "return_type": "void",
          "logic": "Emits a memory deallocation event."
        },
        {
          "name": "FunctionEvent",
          "parameters": [
            "const char* reason",
            "int script_id",
            "double time_delta_ms",
            "int start_position",
            "int end_position",
            "Tagged<String> function_name"
          ],
          "return_type": "void",
          "logic": "Logs function events with Tagged<String> function_name."
        },
        {
          "name": "FunctionEvent",
          "parameters": [
            "const char* reason",
            "int script_id",
            "double time_delta_ms",
            "int start_position",
            "int end_position",
            "const char* function_name = nullptr",
            "size_t function_name_length = 0",
            "bool is_one_byte = true"
          ],
          "return_type": "void",
          "logic": "Logs function events. Overloaded version for C-style strings."
        },
        {
          "name": "CompilationCacheEvent",
          "parameters": [
            "const char* action",
            "const char* cache_type",
            "Tagged<SharedFunctionInfo> sfi"
          ],
          "return_type": "void",
          "logic": "Logs compilation cache events."
        },
        {
          "name": "ScriptEvent",
          "parameters": [
            "ScriptEventType type",
            "int script_id"
          ],
          "return_type": "void",
          "logic": "Logs script events, such as creation and deletion."
        },
        {
          "name": "ScriptDetails",
          "parameters": [
            "Tagged<Script> script"
          ],
          "return_type": "void",
          "logic": "Logs details about a given script."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Logs code creation events with a C-style string name. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<Name> name"
          ],
          "return_type": "void",
          "logic": "Logs code creation events with a DirectHandle<Name> name. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> script_name"
          ],
          "return_type": "void",
          "logic": "Logs code creation event with a SharedFunctionInfo and script name. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> script_name",
            "int line",
            "int column"
          ],
          "return_type": "void",
          "logic": "Logs a code creation event with SharedFunctionInfo, script name, line number, and column number. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "const wasm::WasmCode* code",
            "wasm::WasmName name",
            "const char* source_url",
            "int code_offset",
            "int script_id"
          ],
          "return_type": "void",
          "logic": "Logs a WebAssembly code creation event (only available when V8_ENABLE_WEBASSEMBLY is defined). Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "void",
          "logic": "Logs callback events."
        },
        {
          "name": "GetterCallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "void",
          "logic": "Logs getter callback events."
        },
        {
          "name": "SetterCallbackEvent",
          "parameters": [
            "DirectHandle<Name> name",
            "Address entry_point"
          ],
          "return_type": "void",
          "logic": "Logs setter callback events."
        },
        {
          "name": "RegExpCodeCreateEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "void",
          "logic": "Logs regular expression code creation events."
        },
        {
          "name": "CodeMoveEvent",
          "parameters": [
            "Tagged<InstructionStream> from",
            "Tagged<InstructionStream> to"
          ],
          "return_type": "void",
          "logic": "Logs the move of an instruction stream in memory."
        },
        {
          "name": "BytecodeMoveEvent",
          "parameters": [
            "Tagged<BytecodeArray> from",
            "Tagged<BytecodeArray> to"
          ],
          "return_type": "void",
          "logic": "Logs the move of a bytecode array in memory."
        },
        {
          "name": "SharedFunctionInfoMoveEvent",
          "parameters": [
            "Address from",
            "Address to"
          ],
          "return_type": "void",
          "logic": "Logs the movement of a SharedFunctionInfo object."
        },
        {
          "name": "NativeContextMoveEvent",
          "parameters": [
            "Address from",
            "Address to"
          ],
          "return_type": "void",
          "logic": "Logs the movement of a NativeContext object."
        },
        {
          "name": "CodeMovingGCEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs a code moving garbage collection event."
        },
        {
          "name": "CodeDisableOptEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared"
          ],
          "return_type": "void",
          "logic": "Logs a code deoptimization event."
        },
        {
          "name": "CodeDeoptEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "DeoptimizeKind kind",
            "Address pc",
            "int fp_to_sp_delta"
          ],
          "return_type": "void",
          "logic": "Logs a code deoptimization event with details about the deoptimization."
        },
        {
          "name": "CodeDependencyChangeEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "DirectHandle<SharedFunctionInfo> sfi",
            "const char* reason"
          ],
          "return_type": "void",
          "logic": "Logs a code dependency change event."
        },
        {
          "name": "FeedbackVectorEvent",
          "parameters": [
            "Tagged<FeedbackVector> vector",
            "Tagged<AbstractCode> code"
          ],
          "return_type": "void",
          "logic": "Logs a feedback vector event."
        },
        {
          "name": "WeakCodeClearEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs an event when weak code is cleared."
        },
        {
          "name": "ProcessDeoptEvent",
          "parameters": [
            "DirectHandle<Code> code",
            "SourcePosition position",
            "const char* kind",
            "const char* reason"
          ],
          "return_type": "void",
          "logic": "Processes and logs deoptimization events."
        },
        {
          "name": "CodeLinePosInfoRecordEvent",
          "parameters": [
            "Address code_start",
            "Tagged<TrustedByteArray> source_position_table",
            "JitCodeEvent::CodeType code_type"
          ],
          "return_type": "void",
          "logic": "Emits code line position information event."
        },
        {
          "name": "WasmCodeLinePosInfoRecordEvent",
          "parameters": [
            "Address code_start",
            "base::Vector<const uint8_t> source_position_table"
          ],
          "return_type": "void",
          "logic": "Emits WebAssembly code line position information event (only available when V8_ENABLE_WEBASSEMBLY is defined)."
        },
        {
          "name": "CodeNameEvent",
          "parameters": [
            "Address addr",
            "int pos",
            "const char* code_name"
          ],
          "return_type": "void",
          "logic": "Logs a code name event."
        },
        {
          "name": "ICEvent",
          "parameters": [
            "const char* type",
            "bool keyed",
            "DirectHandle<Map> map",
            "DirectHandle<Object> key",
            "char old_state",
            "char new_state",
            "const char* modifier",
            "const char* slow_stub_reason"
          ],
          "return_type": "void",
          "logic": "Logs inline cache (IC) events."
        },
        {
          "name": "MapEvent",
          "parameters": [
            "const char* type",
            "DirectHandle<Map> from",
            "DirectHandle<Map> to",
            "const char* reason = nullptr",
            "DirectHandle<HeapObject> name_or_sfi = DirectHandle<HeapObject>()"
          ],
          "return_type": "void",
          "logic": "Logs map events related to map transitions."
        },
        {
          "name": "MapCreate",
          "parameters": [
            "Tagged<Map> map"
          ],
          "return_type": "void",
          "logic": "Logs map creation events."
        },
        {
          "name": "MapDetails",
          "parameters": [
            "Tagged<Map> map"
          ],
          "return_type": "void",
          "logic": "Logs details about a map object."
        },
        {
          "name": "MapMoveEvent",
          "parameters": [
            "Tagged<Map> from",
            "Tagged<Map> to"
          ],
          "return_type": "void",
          "logic": "Logs a map move event."
        },
        {
          "name": "SharedLibraryEvent",
          "parameters": [
            "const std::string& library_path",
            "uintptr_t start",
            "uintptr_t end",
            "intptr_t aslr_slide"
          ],
          "return_type": "void",
          "logic": "Logs shared library load event."
        },
        {
          "name": "SharedLibraryEnd",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs the end of shared library events."
        },
        {
          "name": "CurrentTimeEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs the current time."
        },
        {
          "name": "TimerEvent",
          "parameters": [
            "v8::LogEventStatus se",
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Logs timer events."
        },
        {
          "name": "EnterExternal",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Marks entry into external code."
        },
        {
          "name": "LeaveExternal",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Marks exit from external code."
        },
        {
          "name": "CallEventLoggerInternal",
          "parameters": [
            "Isolate* isolate",
            "const char* name",
            "v8::LogEventStatus se",
            "bool expose_to_api"
          ],
          "return_type": "void",
          "logic": "Internal implementation of the CallEventLogger. Logs event and calls the isolate's event logger."
        },
        {
          "name": "CallEventLogger",
          "parameters": [
            "Isolate* isolate",
            "const char* name",
            "v8::LogEventStatus se",
            "bool expose_to_api"
          ],
          "return_type": "void",
          "logic": "Conditionally logs timer events using CallEventLoggerInternal if v8_flags.log_timer_events is true."
        },
        {
          "name": "is_logging",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether logging is enabled."
        },
        {
          "name": "is_listening_to_code_events",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if the logger is listening to code events based on different jit logger types."
        },
        {
          "name": "allows_code_compaction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the logging configuration permits code compaction (ETWJitLogger prevents code compaction)."
        },
        {
          "name": "LogExistingFunction",
          "parameters": [
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<AbstractCode> code"
          ],
          "return_type": "void",
          "logic": "Logs a function based on its SharedFunctionInfo and AbstractCode."
        },
        {
          "name": "LogCompiledFunctions",
          "parameters": [
            "bool ensure_source_positions_available = true"
          ],
          "return_type": "void",
          "logic": "Logs all compiled functions found in the heap."
        },
        {
          "name": "LogAccessorCallbacks",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all accessor callbacks found in the heap."
        },
        {
          "name": "LogCodeObjects",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all code objects found in the snapshot."
        },
        {
          "name": "LogBuiltins",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all builtin code objects."
        },
        {
          "name": "LogAllMaps",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all Maps found on the heap."
        },
        {
          "name": "ToNativeByScript",
          "parameters": [
            "CodeTag tag",
            "Tagged<Script> script"
          ],
          "return_type": "CodeTag",
          "logic": "Converts a tag to a corresponding NATIVE_... if the script is native."
        },
        {
          "name": "LogInterpretedFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs all interpreted functions (only when V8_ENABLE_ETW_STACK_WALKING is defined)."
        }
      ]
    },
    {
      "name": "CodeEventLogger",
      "properties": [
        "isolate_",
        "name_buffer_"
      ],
      "methods": [
        {
          "name": "CodeEventLogger",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for CodeEventLogger."
        },
        {
          "name": "~CodeEventLogger",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for CodeEventLogger."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Logs code creation events with a C-style string name. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<Name> name"
          ],
          "return_type": "void",
          "logic": "Logs code creation events with a DirectHandle<Name> name. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> script_name"
          ],
          "return_type": "void",
          "logic": "Logs code creation event with a SharedFunctionInfo and script name. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> script_name",
            "int line",
            "int column"
          ],
          "return_type": "void",
          "logic": "Logs a code creation event with SharedFunctionInfo, script name, line number, and column number. Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "const wasm::WasmCode* code",
            "wasm::WasmName name",
            "const char* source_url",
            "int code_offset",
            "int script_id"
          ],
          "return_type": "void",
          "logic": "Logs a WebAssembly code creation event (only available when V8_ENABLE_WEBASSEMBLY is defined). Overrides LogEventListener::CodeCreateEvent."
        },
        {
          "name": "RegExpCodeCreateEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "void",
          "logic": "Logs regular expression code creation events. Overrides LogEventListener::RegExpCodeCreateEvent"
        },
        {
          "name": "is_listening_to_code_events",
          "parameters": [],
          "return_type": "bool",
          "logic": "Always returns true, indicating that the logger is always listening to code events."
        }
      ]
    },
    {
      "name": "ExternalLogEventListener",
      "properties": [
        "is_listening_",
        "isolate_",
        "code_event_handler_"
      ],
      "methods": [
        {
          "name": "ExternalLogEventListener",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for ExternalLogEventListener."
        },
        {
          "name": "~ExternalLogEventListener",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for ExternalLogEventListener."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "const char* comment"
          ],
          "return_type": "void",
          "logic": "Logs code creation event with a comment."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<Name> name"
          ],
          "return_type": "void",
          "logic": "Logs code creation event with a name."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> name"
          ],
          "return_type": "void",
          "logic": "Logs code creation event with SharedFunctionInfo and a name."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "DirectHandle<AbstractCode> code",
            "DirectHandle<SharedFunctionInfo> shared",
            "DirectHandle<Name> source",
            "int line",
            "int column"
          ],
          "return_type": "void",
          "logic": "Logs code creation event with SharedFunctionInfo, source name, line, and column."
        },
        {
          "name": "CodeCreateEvent",
          "parameters": [
            "CodeTag tag",
            "const wasm::WasmCode* code",
            "wasm::WasmName name",
            "const char* source_url",
            "int code_offset",
            "int script_id"
          ],
          "return_type": "void",
          "logic": "Logs WebAssembly code creation event (only available when V8_ENABLE_WEBASSEMBLY is defined)."
        },
        {
          "name": "RegExpCodeCreateEvent",
          "parameters": [
            "DirectHandle<AbstractCode> code",
            "DirectHandle<String> source",
            "RegExpFlags flags"
          ],
          "return_type": "void",
          "logic": "Logs regular expression code creation event."
        },
        {
          "name": "CodeMoveEvent",
          "parameters": [
            "Tagged<InstructionStream> from",
            "Tagged<InstructionStream> to"
          ],
          "return_type": "void",
          "logic": "Logs the move of an instruction stream in memory."
        },
        {
          "name": "BytecodeMoveEvent",
          "parameters": [
            "Tagged<BytecodeArray> from",
            "Tagged<BytecodeArray> to"
          ],
          "return_type": "void",
          "logic": "Logs the move of a bytecode array in memory."
        },
        {
          "name": "StartListening",
          "parameters": [
            "v8::CodeEventHandler* code_event_handler"
          ],
          "return_type": "void",
          "logic": "Starts listening for code events and sets the code event handler."
        },
        {
          "name": "StopListening",
          "parameters": [],
          "return_type": "void",
          "logic": "Stops listening for code events."
        },
        {
          "name": "is_listening_to_code_events",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true, indicating it's always listening for code events when active."
        }
      ]
    },
    {
      "name": "TimerEventScope",
      "properties": [
        "isolate_"
      ],
      "methods": [
        {
          "name": "TimerEventScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor. Logs the start of a timer event."
        },
        {
          "name": "~TimerEventScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Logs the end of a timer event."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [],
  "structs": [
    {
      "name": "CodeEvent",
      "properties": [
        "Isolate* isolate_",
        "uintptr_t code_start_address",
        "size_t code_size",
        "DirectHandle<String> function_name",
        "DirectHandle<String> script_name",
        "int script_line",
        "int script_column",
        "CodeEventType code_type",
        "const char* comment",
        "uintptr_t previous_code_start_address"
      ]
    }
  ]
}