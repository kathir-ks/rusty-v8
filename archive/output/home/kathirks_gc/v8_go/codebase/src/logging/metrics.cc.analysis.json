{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/logging/metrics.cc",
  "imports": [
    "src/logging/metrics.h",
    "include/v8-platform.h"
  ],
  "classes": [
    {
      "name": "Recorder::Task",
      "properties": [
        "recorder_"
      ],
      "methods": [
        {
          "name": "Task",
          "parameters": [
            "const std::shared_ptr<Recorder>& recorder"
          ],
          "return_type": "explicit",
          "logic": "Constructor for the Task class. It takes a shared pointer to a Recorder object and stores it in the recorder_ member."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Implements the v8::Task::Run method.  It retrieves the delayed events from the recorder's queue, processes them by calling their Run methods with the recorder, and then removes them from the queue."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Recorder::SetEmbedderRecorder",
      "parameters": [
        "Isolate* isolate",
        "const std::shared_ptr<v8::metrics::Recorder>& embedder_recorder"
      ],
      "return_type": "void",
      "logic": "Sets the embedder's recorder for this Recorder. It obtains the foreground task runner using the isolate and stores the provided embedder recorder.  It also asserts that an embedder recorder wasn't previously set."
    },
    {
      "name": "Recorder::HasEmbedderRecorder",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if an embedder recorder has been set. Returns true if embedder_recorder_ is not null, indicating an embedder recorder exists."
    },
    {
      "name": "Recorder::NotifyIsolateDisposal",
      "parameters": [],
      "return_type": "void",
      "logic": "Notifies the embedder's recorder of isolate disposal. If an embedder recorder is set, it calls its NotifyIsolateDisposal method."
    },
    {
      "name": "Recorder::Delay",
      "parameters": [
        "std::unique_ptr<Recorder::DelayedEventBase>&& event"
      ],
      "return_type": "void",
      "logic": "Delays an event by adding it to the delayed_events_ queue.  If the queue was previously empty, it posts a delayed task to the foreground task runner to process the events after a short delay."
    }
  ]
}