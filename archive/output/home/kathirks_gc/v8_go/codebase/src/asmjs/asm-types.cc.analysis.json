{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/asmjs/asm-types.cc",
  "imports": [
    "src/asmjs/asm-types.h",
    "cinttypes"
  ],
  "classes": [
    {
      "name": "AsmType",
      "properties": [],
      "methods": [
        {
          "name": "AsCallableType",
          "parameters": [],
          "return_type": "AsmCallableType*",
          "logic": "Returns the AsmType as an AsmCallableType if it is not a value type, otherwise returns nullptr."
        },
        {
          "name": "Name",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the AsmType. If it's a value type, it returns its name; otherwise, it delegates to the AsmCallableType's Name method."
        },
        {
          "name": "IsExactly",
          "parameters": [
            "AsmType* x",
            "AsmType* y"
          ],
          "return_type": "bool",
          "logic": "Checks if two AsmTypes are exactly the same. For value types, it compares their bitsets. For other types, it compares their pointers."
        },
        {
          "name": "IsA",
          "parameters": [
            "AsmType* that"
          ],
          "return_type": "bool",
          "logic": "Checks if the current AsmType is a subtype of the given AsmType (inheritance relationship). For value types, it checks if the bitset of 'that' is a subset of the current type's bitset. For callable types, it delegates to the callable type's IsA method."
        },
        {
          "name": "ElementSizeInBytes",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the element size in bytes for array types (e.g., Int8Array, Float64Array). Returns kNotHeapType if the type is not a heap type."
        },
        {
          "name": "LoadType",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Returns the type loaded from the array (e.g., Int8Array loads Intish).  Returns None for non-array types."
        },
        {
          "name": "StoreType",
          "parameters": [],
          "return_type": "AsmType*",
          "logic": "Returns the type stored into the array (e.g., Int8Array stores Intish). Returns None for non-array types."
        },
        {
          "name": "FroundType",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "AsmType*",
          "logic": "Creates and returns an AsmFroundType representing the fround function type."
        },
        {
          "name": "MinMaxType",
          "parameters": [
            "Zone* zone",
            "AsmType* dest",
            "AsmType* src"
          ],
          "return_type": "AsmType*",
          "logic": "Creates and returns an AsmMinMaxType representing the min/max function type."
        }
      ]
    },
    {
      "name": "AsmCallableType",
      "properties": [],
      "methods": [
        {
          "name": "IsA",
          "parameters": [
            "AsmType* other"
          ],
          "return_type": "bool",
          "logic": "Checks if the current AsmCallableType is the same as the given AsmType when cast to an AsmCallableType."
        }
      ]
    },
    {
      "name": "AsmFunctionType",
      "properties": [
        "args_",
        "return_type_"
      ],
      "methods": [
        {
          "name": "Name",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the function type, including argument types and return type (e.g., (int, float) -> double)."
        },
        {
          "name": "IsA",
          "parameters": [
            "AsmType* other"
          ],
          "return_type": "bool",
          "logic": "Checks if the current AsmFunctionType is exactly the same as the given AsmType when cast to an AsmFunctionType (same argument types and return type)."
        },
        {
          "name": "CanBeInvokedWith",
          "parameters": [
            "AsmType* return_type",
            "const ZoneVector<AsmType*>& args"
          ],
          "return_type": "bool",
          "logic": "Checks if the function type can be invoked with the given return type and arguments.  Checks return type exactly and arguments using IsA."
        }
      ]
    },
    {
      "name": "AsmFroundType",
      "properties": [],
      "methods": [
        {
          "name": "CanBeInvokedWith",
          "parameters": [
            "AsmType* return_type",
            "const ZoneVector<AsmType*>& args"
          ],
          "return_type": "bool",
          "logic": "Checks if the fround function can be invoked with the given return type and arguments. It requires one argument that is Floatish, DoubleQ, Signed, or Unsigned."
        },
        {
          "name": "Name",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the fround function type (fround)."
        }
      ]
    },
    {
      "name": "AsmMinMaxType",
      "properties": [
        "return_type_",
        "arg_"
      ],
      "methods": [
        {
          "name": "CanBeInvokedWith",
          "parameters": [
            "AsmType* return_type",
            "const ZoneVector<AsmType*>& args"
          ],
          "return_type": "bool",
          "logic": "Checks if the min/max function type can be invoked with the given return type and arguments. Requires at least two arguments, all of which must be subtypes of the expected argument type.  The return type must match exactly."
        },
        {
          "name": "Name",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the min/max function type, including argument type and return type (e.g., (int, int...) -> int)."
        }
      ]
    },
    {
      "name": "AsmOverloadedFunctionType",
      "properties": [
        "overloads_"
      ],
      "methods": [
        {
          "name": "Name",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the overloaded function type, concatenating the names of its overloads with \" /\\ \"."
        },
        {
          "name": "CanBeInvokedWith",
          "parameters": [
            "AsmType* return_type",
            "const ZoneVector<AsmType*>& args"
          ],
          "return_type": "bool",
          "logic": "Checks if any of the overloads can be invoked with the given return type and arguments."
        },
        {
          "name": "AddOverload",
          "parameters": [
            "AsmType* overload"
          ],
          "return_type": "void",
          "logic": "Adds an overload to the list of overloads."
        }
      ]
    }
  ],
  "functions": []
}