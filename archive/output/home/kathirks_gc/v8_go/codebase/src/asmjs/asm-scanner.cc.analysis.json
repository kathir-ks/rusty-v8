{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/asmjs/asm-scanner.cc",
  "imports": [
    "src/asmjs/asm-scanner.h",
    "<cinttypes>",
    "src/base/iterator.h",
    "src/flags/flags.h",
    "src/numbers/conversions.h",
    "src/parsing/scanner.h",
    "src/strings/char-predicates-inl.h"
  ],
  "classes": [
    {
      "name": "AsmJsScanner",
      "properties": [
        "stream_",
        "token_",
        "preceding_token_",
        "next_token_",
        "position_",
        "preceding_position_",
        "next_position_",
        "rewind_",
        "in_local_scope_",
        "global_count_",
        "double_value_",
        "unsigned_value_",
        "preceded_by_newline_",
        "property_names_",
        "global_names_",
        "local_names_",
        "identifier_string_"
      ],
      "methods": [
        {
          "name": "AsmJsScanner",
          "parameters": [
            "Utf16CharacterStream* stream"
          ],
          "return_type": "void",
          "logic": "Constructor for the AsmJsScanner class. Initializes the scanner with a character stream and sets up the initial state, including pre-populating the scanner with standard library and keyword names and tokens. Calls Next() to fetch the first token."
        },
        {
          "name": "Next",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the scanner to the next token in the input stream. Handles rewinding, whitespace skipping, comment parsing, string literal parsing, number and identifier parsing, and stores the current token, position and preceding token and position."
        },
        {
          "name": "Rewind",
          "parameters": [],
          "return_type": "void",
          "logic": "Rewinds the scanner to the previously scanned token. Used to look back at a token."
        },
        {
          "name": "ResetLocals",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the local names map, effectively resetting the local scope."
        },
        {
          "name": "Name",
          "parameters": [
            "token_t token"
          ],
          "return_type": "std::string",
          "logic": "Debug function that returns the string representation of a given token. Useful for debugging the scanner's output."
        },
        {
          "name": "Seek",
          "parameters": [
            "size_t pos"
          ],
          "return_type": "void",
          "logic": "Seeks to a specific position in the input stream and resets the scanner state. After seeking, it retrieves the next token."
        },
        {
          "name": "ConsumeIdentifier",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "void",
          "logic": "Consumes and identifies an identifier from the input stream. Checks if it's a property, local, or global variable. If not found, it adds it to the corresponding map and assigns a new token ID."
        },
        {
          "name": "ConsumeNumber",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "void",
          "logic": "Consumes and parses a number from the input stream. Determines if it's an integer or a floating-point number and stores the value accordingly.  Handles prefixed numbers (binary, octal, hex) and implicit octals. Sets the appropriate token based on the number's type and value."
        },
        {
          "name": "ConsumeCComment",
          "parameters": [],
          "return_type": "bool",
          "logic": "Consumes a C-style comment (/* ... */) from the input stream. Returns true if the comment is properly terminated, false otherwise.  Tracks newlines encountered within the comment."
        },
        {
          "name": "ConsumeCPPComment",
          "parameters": [],
          "return_type": "void",
          "logic": "Consumes a C++-style comment (// ... ) from the input stream until a newline or the end of the input is reached. Tracks newlines."
        },
        {
          "name": "ConsumeString",
          "parameters": [
            "base::uc32 quote"
          ],
          "return_type": "void",
          "logic": "Consumes a string literal from the input stream. Only recognizes the string 'use asm'. Sets the token to kToken_UseAsm if successful, or kParseError otherwise."
        },
        {
          "name": "ConsumeCompareOrShift",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "void",
          "logic": "Consumes a comparison or shift operator from the input stream. Handles operators like ==, !=, <=, >=, <<, >>, and >>>. Sets the appropriate token accordingly."
        },
        {
          "name": "IsIdentifierStart",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "bool",
          "logic": "Checks if a given character is a valid starting character for an identifier."
        },
        {
          "name": "IsIdentifierPart",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "bool",
          "logic": "Checks if a given character is a valid part of an identifier."
        },
        {
          "name": "IsNumberStart",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "bool",
          "logic": "Checks if a given character can start a number."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsValidImplicitOctal",
      "parameters": [
        "std::string_view number"
      ],
      "return_type": "bool",
      "logic": "Checks if a given number string is a valid implicit octal number (starts with '0' and contains only octal digits)."
    }
  ]
}