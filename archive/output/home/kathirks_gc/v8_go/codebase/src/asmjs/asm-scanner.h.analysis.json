{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/asmjs/asm-scanner.h",
  "imports": [
    "<memory>",
    "<string>",
    "<unordered_map>",
    "src/asmjs/asm-names.h",
    "src/base/logging.h",
    "src/base/strings.h"
  ],
  "classes": [
    {
      "name": "AsmJsScanner",
      "properties": [
        "stream_",
        "token_",
        "preceding_token_",
        "next_token_",
        "position_",
        "preceding_position_",
        "next_position_",
        "rewind_",
        "identifier_string_",
        "in_local_scope_",
        "local_names_",
        "global_names_",
        "property_names_",
        "global_count_",
        "double_value_",
        "unsigned_value_",
        "preceded_by_newline_"
      ],
      "methods": [
        {
          "name": "AsmJsScanner",
          "parameters": [
            "Utf16CharacterStream* stream"
          ],
          "return_type": "explicit",
          "logic": "Constructor for the AsmJsScanner class, initializes the scanner with a character stream."
        },
        {
          "name": "Token",
          "parameters": [],
          "return_type": "token_t",
          "logic": "Returns the current token."
        },
        {
          "name": "Position",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the position of the current token in the input stream."
        },
        {
          "name": "Next",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the scanner to the next token."
        },
        {
          "name": "Rewind",
          "parameters": [],
          "return_type": "void",
          "logic": "Backs up the scanner by one token."
        },
        {
          "name": "GetIdentifierString",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the raw string representation of the current identifier. The string becomes invalid after advancing the scanner."
        },
        {
          "name": "IsPrecededByNewline",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current token is preceded by a newline character."
        },
        {
          "name": "Name",
          "parameters": [
            "token_t token"
          ],
          "return_type": "std::string",
          "logic": "Debug-only method to retrieve the name of a given token (slow, for debugging purposes only)."
        },
        {
          "name": "Seek",
          "parameters": [
            "size_t pos"
          ],
          "return_type": "void",
          "logic": "Restores the scanner to a previous position in the input stream (token after that position)."
        },
        {
          "name": "EnterLocalScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Enters the local scope, indicating that identifiers should be resolved locally and new identifiers added to the local string table."
        },
        {
          "name": "EnterGlobalScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Enters the global scope, indicating that identifiers should be resolved globally and new identifiers added to the global string table."
        },
        {
          "name": "ResetLocals",
          "parameters": [],
          "return_type": "void",
          "logic": "Drops all current local identifiers."
        },
        {
          "name": "IsLocal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current token is a local identifier."
        },
        {
          "name": "IsGlobal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current token is a global identifier."
        },
        {
          "name": "IsLocal",
          "parameters": [
            "token_t token"
          ],
          "return_type": "static bool",
          "logic": "Static method that checks if a token is a local identifier."
        },
        {
          "name": "IsGlobal",
          "parameters": [
            "token_t token"
          ],
          "return_type": "static bool",
          "logic": "Static method that checks if a token is a global identifier."
        },
        {
          "name": "LocalIndex",
          "parameters": [
            "token_t token"
          ],
          "return_type": "static size_t",
          "logic": "Static method that returns the index of a local identifier in the local string table."
        },
        {
          "name": "GlobalIndex",
          "parameters": [
            "token_t token"
          ],
          "return_type": "static size_t",
          "logic": "Static method that returns the index of a global identifier in the global string table."
        },
        {
          "name": "IsUnsigned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current token is an unsigned numeric literal."
        },
        {
          "name": "AsUnsigned",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the value of the current unsigned numeric literal."
        },
        {
          "name": "IsDouble",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current token is a floating point number literal."
        },
        {
          "name": "AsDouble",
          "parameters": [],
          "return_type": "double",
          "logic": "Returns the value of the current floating point number literal."
        },
        {
          "name": "ConsumeIdentifier",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "void",
          "logic": "Consumes an identifier from the input stream."
        },
        {
          "name": "ConsumeNumber",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "void",
          "logic": "Consumes a number from the input stream."
        },
        {
          "name": "ConsumeCComment",
          "parameters": [],
          "return_type": "bool",
          "logic": "Consumes a C-style comment from the input stream."
        },
        {
          "name": "ConsumeCPPComment",
          "parameters": [],
          "return_type": "void",
          "logic": "Consumes a C++-style comment from the input stream."
        },
        {
          "name": "ConsumeString",
          "parameters": [
            "base::uc32 quote"
          ],
          "return_type": "void",
          "logic": "Consumes a string literal from the input stream."
        },
        {
          "name": "ConsumeCompareOrShift",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "void",
          "logic": "Consumes a comparison or shift operator from the input stream."
        },
        {
          "name": "IsIdentifierStart",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "bool",
          "logic": "Checks if a character can start an identifier."
        },
        {
          "name": "IsIdentifierPart",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "bool",
          "logic": "Checks if a character can be part of an identifier."
        },
        {
          "name": "IsNumberStart",
          "parameters": [
            "base::uc32 ch"
          ],
          "return_type": "bool",
          "logic": "Checks if a character can start a number."
        }
      ]
    }
  ],
  "functions": []
}