{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/init/isolate-group.h",
  "imports": [
    "<memory>",
    "include/v8-memory-span.h",
    "src/base/once.h",
    "src/base/page-allocator.h",
    "src/base/platform/mutex.h",
    "src/codegen/external-reference-table.h",
    "src/common/globals.h",
    "src/flags/flags.h",
    "src/heap/memory-chunk-constants.h",
    "src/sandbox/code-pointer-table.h",
    "src/utils/allocation.h",
    "src/sandbox/js-dispatch-table.h",
    "src/base/region-allocator.h"
  ],
  "classes": [
    {
      "name": "internal::SandboxedArrayBufferAllocator",
      "properties": [
        "static constexpr size_t kAllocationGranularity = 128",
        "static constexpr size_t kChunkSize = 1 * MB",
        "std::unique_ptr<base::RegionAllocator> region_alloc_",
        "size_t end_of_accessible_region_ = 0",
        "Sandbox* sandbox_ = nullptr",
        "base::Mutex mutex_"
      ],
      "methods": [
        {
          "name": "SandboxedArrayBufferAllocator",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "SandboxedArrayBufferAllocator",
          "parameters": [
            "const SandboxedArrayBufferAllocator&"
          ],
          "return_type": "SandboxedArrayBufferAllocator&",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const SandboxedArrayBufferAllocator&"
          ],
          "return_type": "SandboxedArrayBufferAllocator&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "LazyInitialize",
          "parameters": [
            "Sandbox* sandbox"
          ],
          "return_type": "void",
          "logic": "Initializes the allocator with a sandbox pointer."
        },
        {
          "name": "is_initialized",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the allocator is initialized."
        },
        {
          "name": "page_allocator",
          "parameters": [],
          "return_type": "v8::PageAllocator*",
          "logic": "Returns the page allocator used for the V8 heap."
        },
        {
          "name": "~SandboxedArrayBufferAllocator",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor."
        },
        {
          "name": "Allocate",
          "parameters": [
            "size_t length"
          ],
          "return_type": "void*",
          "logic": "Allocates a memory buffer of the specified length."
        },
        {
          "name": "Free",
          "parameters": [
            "void* data"
          ],
          "return_type": "void",
          "logic": "Frees a previously allocated memory buffer."
        }
      ]
    },
    {
      "name": "internal::IsolateGroup",
      "properties": [
        "static IsolateGroup* default_isolate_group_",
        "std::atomic<int> reference_count_{1}",
        "int isolate_count_{0}",
        "v8::PageAllocator* page_allocator_ = nullptr",
        "VirtualMemoryCage* trusted_pointer_compression_cage_ = nullptr",
        "VirtualMemoryCage* pointer_compression_cage_ = nullptr",
        "VirtualMemoryCage reservation_",
        "thread_local static IsolateGroup* current_",
        "base::OnceType init_code_range_ = V8_ONCE_INIT",
        "std::unique_ptr<CodeRange> code_range_",
        "Address external_ref_table_[ExternalReferenceTable::kSizeIsolateIndependent] = {0}",
        "bool process_wide_",
        "base::Mutex mutex_",
        "std::unique_ptr<ReadOnlyArtifacts> read_only_artifacts_",
        "ReadOnlyHeap* shared_read_only_heap_ = nullptr",
        "Isolate* shared_space_isolate_ = nullptr",
        "std::unique_ptr<OptimizingCompileTaskExecutor> optimizing_compile_task_executor_",
        "Sandbox* sandbox_ = nullptr",
        "CodePointerTable code_pointer_table_",
        "MemoryChunkMetadata* metadata_pointer_table_[MemoryChunkConstants::kMetadataPointerTableSize] = {nullptr}",
        "SandboxedArrayBufferAllocator backend_allocator_",
        "JSDispatchTable js_dispatch_table_"
      ],
      "methods": [
        {
          "name": "AcquireDefault",
          "parameters": [],
          "return_type": "IsolateGroup*",
          "logic": "Acquires the default isolate group."
        },
        {
          "name": "CanCreateNewGroups",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if new isolate groups can be created based on the build configuration."
        },
        {
          "name": "New",
          "parameters": [],
          "return_type": "IsolateGroup*",
          "logic": "Creates a new isolate group, allocating a fresh pointer cage if pointer compression is enabled."
        },
        {
          "name": "InitializeOncePerProcess",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the process-wide isolate group. Should be called early in the process."
        },
        {
          "name": "TearDownOncePerProcess",
          "parameters": [],
          "return_type": "void",
          "logic": "Tears down the process-wide isolate group."
        },
        {
          "name": "Acquire",
          "parameters": [],
          "return_type": "IsolateGroup*",
          "logic": "Obtains a fresh reference on the isolate group."
        },
        {
          "name": "Release",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases a reference on an isolate group, possibly freeing any shared memory resources."
        },
        {
          "name": "page_allocator",
          "parameters": [],
          "return_type": "v8::PageAllocator*",
          "logic": "Returns the page allocator associated with this IsolateGroup."
        },
        {
          "name": "GetPtrComprCage",
          "parameters": [],
          "return_type": "VirtualMemoryCage*",
          "logic": "Returns the pointer compression cage, if enabled."
        },
        {
          "name": "GetTrustedPtrComprCage",
          "parameters": [],
          "return_type": "VirtualMemoryCage*",
          "logic": "Returns the trusted pointer compression cage, if enabled."
        },
        {
          "name": "GetPtrComprCageBase",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the base address of the pointer compression cage."
        },
        {
          "name": "GetTrustedPtrComprCageBase",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the base address of the trusted pointer compression cage."
        },
        {
          "name": "EnsureCodeRange",
          "parameters": [
            "size_t requested_size"
          ],
          "return_type": "CodeRange*",
          "logic": "Ensures that a code range of the requested size is available."
        },
        {
          "name": "GetCodeRange",
          "parameters": [],
          "return_type": "CodeRange*",
          "logic": "Returns the code range."
        },
        {
          "name": "current",
          "parameters": [],
          "return_type": "IsolateGroup*",
          "logic": "Returns the current isolate group."
        },
        {
          "name": "set_current",
          "parameters": [
            "IsolateGroup* group"
          ],
          "return_type": "void",
          "logic": "Sets the current isolate group."
        },
        {
          "name": "external_ref_table",
          "parameters": [],
          "return_type": "MemorySpan<Address>",
          "logic": "Returns the external reference table."
        },
        {
          "name": "has_shared_space_isolate",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the isolate group has a shared space isolate."
        },
        {
          "name": "shared_space_isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the shared space isolate."
        },
        {
          "name": "init_shared_space_isolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Initializes the shared space isolate."
        },
        {
          "name": "optimizing_compile_task_executor",
          "parameters": [],
          "return_type": "OptimizingCompileTaskExecutor*",
          "logic": "Returns the optimizing compile task executor."
        },
        {
          "name": "shared_read_only_heap",
          "parameters": [],
          "return_type": "ReadOnlyHeap*",
          "logic": "Returns the shared read-only heap."
        },
        {
          "name": "set_shared_read_only_heap",
          "parameters": [
            "ReadOnlyHeap* heap"
          ],
          "return_type": "void",
          "logic": "Sets the shared read-only heap."
        },
        {
          "name": "mutex",
          "parameters": [],
          "return_type": "base::Mutex*",
          "logic": "Returns a pointer to the mutex used for synchronization."
        },
        {
          "name": "read_only_artifacts",
          "parameters": [],
          "return_type": "ReadOnlyArtifacts*",
          "logic": "Returns the read-only artifacts."
        },
        {
          "name": "InitializeReadOnlyArtifacts",
          "parameters": [],
          "return_type": "ReadOnlyArtifacts*",
          "logic": "Initializes the read-only artifacts."
        },
        {
          "name": "GetBackingStorePageAllocator",
          "parameters": [],
          "return_type": "PageAllocator*",
          "logic": "Returns the page allocator for array backing stores or Wasm memory."
        },
        {
          "name": "sandbox",
          "parameters": [],
          "return_type": "Sandbox*",
          "logic": "Returns the sandbox."
        },
        {
          "name": "code_pointer_table",
          "parameters": [],
          "return_type": "CodePointerTable*",
          "logic": "Returns the code pointer table."
        },
        {
          "name": "metadata_pointer_table",
          "parameters": [],
          "return_type": "MemoryChunkMetadata**",
          "logic": "Returns the metadata pointer table."
        },
        {
          "name": "GetSandboxedArrayBufferAllocator",
          "parameters": [],
          "return_type": "SandboxedArrayBufferAllocator*",
          "logic": "Returns the sandboxed array buffer allocator."
        },
        {
          "name": "js_dispatch_table",
          "parameters": [],
          "return_type": "JSDispatchTable*",
          "logic": "Returns the JavaScript dispatch table (for leap tiering)."
        },
        {
          "name": "SetupReadOnlyHeap",
          "parameters": [
            "Isolate* isolate",
            "SnapshotData* read_only_snapshot_data",
            "bool can_rehash"
          ],
          "return_type": "void",
          "logic": "Sets up the read-only heap."
        },
        {
          "name": "AddIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Adds an isolate to this isolate group."
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Removes an isolate from this isolate group."
        },
        {
          "name": "GetDefault",
          "parameters": [],
          "return_type": "IsolateGroup*",
          "logic": "Returns the default isolate group."
        },
        {
          "name": "ReleaseDefault",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases the default isolate group (for testing purposes only)."
        },
        {
          "name": "Initialize",
          "parameters": [
            "bool process_wide",
            "Sandbox* sandbox"
          ],
          "return_type": "void",
          "logic": "Initializes the isolate group."
        },
        {
          "name": "current_non_inlined",
          "parameters": [],
          "return_type": "IsolateGroup*",
          "logic": "Internal helper to access current isolate group (non-inlined)."
        },
        {
          "name": "set_current_non_inlined",
          "parameters": [
            "IsolateGroup* group"
          ],
          "return_type": "void",
          "logic": "Internal helper to set the current isolate group (non-inlined)."
        },
        {
          "name": "~IsolateGroup",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor."
        },
        {
          "name": "IsolateGroup",
          "parameters": [
            "const IsolateGroup&"
          ],
          "return_type": "IsolateGroup&",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const IsolateGroup&"
          ],
          "return_type": "IsolateGroup&",
          "logic": "Deleted assignment operator."
        }
      ]
    }
  ],
  "functions": []
}