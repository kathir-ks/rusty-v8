{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/accounting-allocator.h",
  "imports": [
    "<atomic>",
    "<memory>",
    "include/v8-platform.h",
    "src/base/macros.h",
    "src/logging/tracing-flags.h"
  ],
  "classes": [
    {
      "name": "AccountingAllocator",
      "properties": [
        "std::atomic<size_t> current_memory_usage_",
        "std::atomic<size_t> max_memory_usage_",
        "std::unique_ptr<VirtualMemory> reserved_area_",
        "std::unique_ptr<base::BoundedPageAllocator> bounded_page_allocator_"
      ],
      "methods": [
        {
          "name": "AccountingAllocator",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for the AccountingAllocator class.  Initializes internal state."
        },
        {
          "name": "AccountingAllocator",
          "parameters": [
            "const AccountingAllocator&"
          ],
          "return_type": "deleted",
          "logic": "Deleted copy constructor to prevent unwanted copies."
        },
        {
          "name": "operator=",
          "parameters": [
            "const AccountingAllocator&"
          ],
          "return_type": "AccountingAllocator& deleted",
          "logic": "Deleted assignment operator to prevent unwanted copies."
        },
        {
          "name": "~AccountingAllocator",
          "parameters": [],
          "return_type": "",
          "logic": "Virtual destructor for the AccountingAllocator class.  Can be overridden in derived classes."
        },
        {
          "name": "AllocateSegment",
          "parameters": [
            "size_t bytes",
            "bool supports_compression"
          ],
          "return_type": "Segment*",
          "logic": "Allocates a new segment of the specified size. Returns nullptr on failure. The 'supports_compression' parameter likely indicates whether the segment will be used for data that can be compressed."
        },
        {
          "name": "ReturnSegment",
          "parameters": [
            "Segment* memory",
            "bool supports_compression"
          ],
          "return_type": "void",
          "logic": "Returns an unneeded segment, potentially inserting it into a pool or releasing it directly if the pool is full or memory pressure is high. The 'supports_compression' parameter likely indicates whether the segment was used for data that can be compressed."
        },
        {
          "name": "GetCurrentMemoryUsage",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the current memory usage of the allocator. Uses atomic load for thread safety."
        },
        {
          "name": "GetMaxMemoryUsage",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the maximum memory usage of the allocator since it was created. Uses atomic load for thread safety."
        },
        {
          "name": "TraceZoneCreation",
          "parameters": [
            "const Zone* zone"
          ],
          "return_type": "void",
          "logic": "Traces the creation of a Zone object. This is only enabled if zone statistics tracing is enabled via `TracingFlags`. Calls TraceZoneCreationImpl."
        },
        {
          "name": "TraceZoneDestruction",
          "parameters": [
            "const Zone* zone"
          ],
          "return_type": "void",
          "logic": "Traces the destruction of a Zone object. This is only enabled if zone statistics tracing is enabled via `TracingFlags`. Calls TraceZoneDestructionImpl."
        },
        {
          "name": "TraceAllocateSegment",
          "parameters": [
            "Segment* segment"
          ],
          "return_type": "void",
          "logic": "Traces the allocation of a Segment object. This is only enabled if zone statistics tracing is enabled via `TracingFlags`. Calls TraceAllocateSegmentImpl."
        },
        {
          "name": "TraceZoneCreationImpl",
          "parameters": [
            "const Zone* zone"
          ],
          "return_type": "void",
          "logic": "Virtual method, can be overridden, implementation for tracing zone creation. Does nothing in the base class."
        },
        {
          "name": "TraceZoneDestructionImpl",
          "parameters": [
            "const Zone* zone"
          ],
          "return_type": "void",
          "logic": "Virtual method, can be overridden, implementation for tracing zone destruction. Does nothing in the base class."
        },
        {
          "name": "TraceAllocateSegmentImpl",
          "parameters": [
            "Segment* segment"
          ],
          "return_type": "void",
          "logic": "Virtual method, can be overridden, implementation for tracing segment allocation. Does nothing in the base class."
        }
      ]
    }
  ],
  "functions": []
}