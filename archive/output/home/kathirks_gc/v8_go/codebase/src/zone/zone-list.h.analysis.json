{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/zone-list.h",
  "imports": [
    "src/base/logging.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "ZoneList",
      "properties": [
        "data_",
        "capacity_",
        "length_"
      ],
      "methods": [
        {
          "name": "ZoneList",
          "parameters": [
            "int capacity",
            "Zone* zone"
          ],
          "return_type": "ZoneList",
          "logic": "Constructor. Creates a ZoneList with the given capacity, allocated in the given zone. Initializes length to zero."
        },
        {
          "name": "ZoneList",
          "parameters": [
            "const ZoneList<T>& other",
            "Zone* zone"
          ],
          "return_type": "ZoneList",
          "logic": "Copy constructor. Creates a new ZoneList by copying the elements of the given ZoneList into the given zone."
        },
        {
          "name": "ZoneList",
          "parameters": [
            "base::Vector<const T> other",
            "Zone* zone"
          ],
          "return_type": "ZoneList",
          "logic": "Constructor that copies elements from a base::Vector."
        },
        {
          "name": "ZoneList",
          "parameters": [
            "ZoneList<T>&& other"
          ],
          "return_type": "ZoneList",
          "logic": "Move constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "ZoneList&& other"
          ],
          "return_type": "ZoneList&",
          "logic": "Move assignment operator.  Transfers ownership of the underlying data from the rvalue to the lvalue, and then resets the rvalue."
        },
        {
          "name": "~ZoneList",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor.  Does nothing, intentionally.  This is because the memory pointed to by `data_` is Zone allocated and Zone deallocation manages this memory."
        },
        {
          "name": "operator[]",
          "parameters": [
            "int i"
          ],
          "return_type": "T&",
          "logic": "Returns a reference to the element at index i.  Performs bounds checking."
        },
        {
          "name": "at",
          "parameters": [
            "int i"
          ],
          "return_type": "T&",
          "logic": "Returns a reference to the element at index i using operator[]."
        },
        {
          "name": "last",
          "parameters": [],
          "return_type": "T&",
          "logic": "Returns a reference to the last element."
        },
        {
          "name": "first",
          "parameters": [],
          "return_type": "T&",
          "logic": "Returns a reference to the first element."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the beginning of the list."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the end of the list."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const_iterator to the beginning of the list."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const_iterator to the end of the list."
        },
        {
          "name": "is_empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the list is empty."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the length of the list."
        },
        {
          "name": "capacity",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the capacity of the list."
        },
        {
          "name": "ToVector",
          "parameters": [],
          "return_type": "base::Vector<T>",
          "logic": "Creates a base::Vector from the ZoneList's data."
        },
        {
          "name": "ToVector",
          "parameters": [
            "int start",
            "int length"
          ],
          "return_type": "base::Vector<T>",
          "logic": "Creates a base::Vector from a portion of the ZoneList's data, starting at 'start' with 'length' elements."
        },
        {
          "name": "ToConstVector",
          "parameters": [],
          "return_type": "base::Vector<const T>",
          "logic": "Creates a const base::Vector from the ZoneList's data."
        },
        {
          "name": "Add",
          "parameters": [
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds a copy of the given element to the end of the list, expanding the list if necessary."
        },
        {
          "name": "AddAll",
          "parameters": [
            "const ZoneList<T>& other",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds all the elements from the argument list to this list."
        },
        {
          "name": "AddAll",
          "parameters": [
            "base::Vector<const T> other",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds all the elements from the vector to this list."
        },
        {
          "name": "InsertAt",
          "parameters": [
            "int index",
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Inserts the element at the specific index."
        },
        {
          "name": "AddBlock",
          "parameters": [
            "T value",
            "int count",
            "Zone* zone"
          ],
          "return_type": "base::Vector<T>",
          "logic": "Adds 'count' elements with the value 'value' and returns a vector that allows access to the elements."
        },
        {
          "name": "Set",
          "parameters": [
            "int index",
            "const T& element"
          ],
          "return_type": "void",
          "logic": "Overwrites the element at the specific index."
        },
        {
          "name": "Remove",
          "parameters": [
            "int i"
          ],
          "return_type": "T",
          "logic": "Removes the i'th element without deleting it; moves all elements above i \"down\". Returns the removed element."
        },
        {
          "name": "RemoveLast",
          "parameters": [],
          "return_type": "T",
          "logic": "Removes the last element without deleting it. Returns the removed element."
        },
        {
          "name": "Clear",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Clears the list by freeing the storage memory."
        },
        {
          "name": "DropAndClear",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the list but unlike Clear(), it doesn't free the storage memory."
        },
        {
          "name": "Rewind",
          "parameters": [
            "int pos"
          ],
          "return_type": "void",
          "logic": "Drops all but the first 'pos' elements from the list."
        },
        {
          "name": "Contains",
          "parameters": [
            "const T& elm"
          ],
          "return_type": "bool",
          "logic": "Checks if the list contains the given element."
        },
        {
          "name": "Iterate",
          "parameters": [
            "Visitor* visitor"
          ],
          "return_type": "void",
          "logic": "Iterates through all list entries, starting at index 0, and calls the visitor's method on each element."
        },
        {
          "name": "Sort",
          "parameters": [
            "CompareFunction cmp"
          ],
          "return_type": "void",
          "logic": "Sorts all list entries (using QuickSort)."
        },
        {
          "name": "StableSort",
          "parameters": [
            "CompareFunction cmp",
            "size_t start",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Sorts the list using stable sort algorithm from index 'start' with 'length' elements."
        },
        {
          "name": "ResizeAdd",
          "parameters": [
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Increase the capacity of a full list, and add an element. List must be full already."
        },
        {
          "name": "ResizeAddInternal",
          "parameters": [
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Inlined implementation of ResizeAdd, shared by inlined and non-inlined versions of ResizeAdd."
        },
        {
          "name": "Resize",
          "parameters": [
            "int new_capacity",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Resize the list."
        }
      ]
    }
  ],
  "functions": []
}