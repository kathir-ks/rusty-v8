{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/zone.h",
  "imports": [
    "<limits>",
    "<memory>",
    "<type_traits>",
    "<utility>",
    "src/base/logging.h",
    "src/base/vector.h",
    "src/common/globals.h",
    "src/zone/accounting-allocator.h",
    "src/zone/type-stats.h",
    "src/zone/zone-segment.h",
    "src/zone/zone-type-traits.h"
  ],
  "classes": [
    {
      "name": "Zone",
      "properties": [
        "allocation_size_",
        "segment_bytes_allocated_",
        "position_",
        "limit_",
        "allocator_",
        "segment_head_",
        "name_",
        "supports_compression_",
        "sealed_",
        "type_stats_",
        "allocation_size_for_tracing_",
        "freed_size_for_tracing_",
        "kAlignmentInBytes",
        "kMinimumSegmentSize",
        "kMaximumSegmentSize"
      ],
      "methods": [
        {
          "name": "Zone",
          "parameters": [
            "AccountingAllocator* allocator",
            "const char* name",
            "bool support_compression"
          ],
          "return_type": "void",
          "logic": "Constructor for the Zone class. Initializes the zone with an allocator, a name, and a flag indicating whether compression is supported."
        },
        {
          "name": "~Zone",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the Zone class. Deallocates all memory allocated in the Zone."
        },
        {
          "name": "supports_compression",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the zone supports zone pointer compression."
        },
        {
          "name": "Allocate",
          "parameters": [
            "size_t size"
          ],
          "return_type": "void*",
          "logic": "Allocates 'size' bytes of uninitialized memory in the Zone."
        },
        {
          "name": "Delete",
          "parameters": [
            "void* pointer",
            "size_t size"
          ],
          "return_type": "void",
          "logic": "Return 'size' bytes of memory back to Zone."
        },
        {
          "name": "New",
          "parameters": [
            "Args&&... args"
          ],
          "return_type": "T*",
          "logic": "Allocates memory for a T instance and constructs the object by calling the respective Args... constructor."
        },
        {
          "name": "AllocateArray",
          "parameters": [
            "size_t length"
          ],
          "return_type": "T*",
          "logic": "Allocates uninitialized memory for 'length' number of T instances."
        },
        {
          "name": "AllocateVector",
          "parameters": [
            "size_t length"
          ],
          "return_type": "base::Vector<T>",
          "logic": "Allocates a Vector with 'length' uninitialized entries."
        },
        {
          "name": "NewVector",
          "parameters": [
            "size_t length"
          ],
          "return_type": "base::Vector<T>",
          "logic": "Allocates a Vector with 'length' elements and value-constructs them."
        },
        {
          "name": "NewVector",
          "parameters": [
            "size_t length",
            "T value"
          ],
          "return_type": "base::Vector<T>",
          "logic": "Allocates a Vector with 'length' elements and initializes them with 'value'."
        },
        {
          "name": "CloneVector",
          "parameters": [
            "base::Vector<T> v"
          ],
          "return_type": "base::Vector<std::remove_const_t<T>>",
          "logic": "Clones a Vector by allocating memory and copying the contents of the original vector."
        },
        {
          "name": "DeleteArray",
          "parameters": [
            "T* pointer",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Return array of 'length' elements back to Zone. "
        },
        {
          "name": "Seal",
          "parameters": [],
          "return_type": "void",
          "logic": "Seals the zone to prevent any further allocation."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Allows the zone to be safely reused. Releases the memory except for the last page."
        },
        {
          "name": "segment_bytes_allocated",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of bytes allocated in segments."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the Zone."
        },
        {
          "name": "allocation_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns precise value of used zone memory, allowed to be called only from thread owning the zone."
        },
        {
          "name": "allocation_size_for_tracing",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns used zone memory for tracing purposes."
        },
        {
          "name": "freed_size_for_tracing",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns number of bytes freed in this zone via Delete<T>()/DeleteArray<T>() calls."
        },
        {
          "name": "allocator",
          "parameters": [],
          "return_type": "AccountingAllocator*",
          "logic": "Returns the AccountingAllocator associated with this zone."
        },
        {
          "name": "type_stats",
          "parameters": [],
          "return_type": "const TypeStats&",
          "logic": "Returns the TypeStats object, which provides statistics on the types of objects allocated in the zone. (Only enabled when V8_ENABLE_PRECISE_ZONE_STATS is defined)"
        },
        {
          "name": "Contains",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "bool",
          "logic": "Checks if a given pointer is within the memory allocated by the Zone (DEBUG build only)."
        },
        {
          "name": "Snapshot",
          "parameters": [],
          "return_type": "ZoneSnapshot",
          "logic": "Creates a snapshot of the current state of the Zone."
        },
        {
          "name": "AsanNew",
          "parameters": [
            "size_t size"
          ],
          "return_type": "void*",
          "logic": "Allocates memory using the Address Sanitizer (ASan) for debugging memory errors."
        },
        {
          "name": "DeleteAll",
          "parameters": [],
          "return_type": "void",
          "logic": "Deletes all objects and frees all memory allocated in the Zone."
        },
        {
          "name": "ReleaseSegment",
          "parameters": [
            "Segment* segment"
          ],
          "return_type": "void",
          "logic": "Releases the current segment without performing any local bookkeeping."
        },
        {
          "name": "Expand",
          "parameters": [
            "size_t size"
          ],
          "return_type": "void",
          "logic": "Expands the Zone to hold at least 'size' more bytes."
        }
      ]
    },
    {
      "name": "ZoneSnapshot",
      "properties": [
        "allocation_size_for_tracing_",
        "freed_size_for_tracing_",
        "allocation_size_",
        "segment_bytes_allocated_",
        "position_",
        "limit_",
        "segment_head_"
      ],
      "methods": [
        {
          "name": "Restore",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Reset the `Zone` from which this snapshot was taken to the state stored in this snapshot."
        }
      ]
    },
    {
      "name": "ZoneScope",
      "properties": [
        "zone_",
        "snapshot_"
      ],
      "methods": [
        {
          "name": "ZoneScope",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the ZoneScope class. Takes a snapshot of the Zone."
        },
        {
          "name": "~ZoneScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the ZoneScope class. Restores the Zone to the state it was in when the scope was created."
        }
      ]
    },
    {
      "name": "ZoneObject",
      "properties": [],
      "methods": [
        {
          "name": "operator new",
          "parameters": [
            "size_t",
            "Zone*"
          ],
          "return_type": "void*",
          "logic": "Deleted. Prevents allocation using `new (zone) SomeObject(...)`."
        },
        {
          "name": "operator new",
          "parameters": [
            "size_t size",
            "void* ptr"
          ],
          "return_type": "void*",
          "logic": "Allows non-allocating placement new."
        },
        {
          "name": "operator delete",
          "parameters": [
            "void*",
            "size_t"
          ],
          "return_type": "void",
          "logic": "Should never be called."
        },
        {
          "name": "operator delete",
          "parameters": [
            "void* pointer",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Deleted. Prevents deletion using `delete (zone) SomeObject(...)`."
        }
      ]
    },
    {
      "name": "ZoneAllocationPolicy",
      "properties": [
        "zone_"
      ],
      "methods": [
        {
          "name": "ZoneAllocationPolicy",
          "parameters": [],
          "return_type": "void",
          "logic": "Creates unusable allocation policy."
        },
        {
          "name": "ZoneAllocationPolicy",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructs a ZoneAllocationPolicy associated with the given zone."
        },
        {
          "name": "AllocateArray",
          "parameters": [
            "size_t length"
          ],
          "return_type": "T*",
          "logic": "Allocates an array of type T in the Zone."
        },
        {
          "name": "DeleteArray",
          "parameters": [
            "T* p",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Deallocates an array of type T in the Zone."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone associated with this allocation policy."
        }
      ]
    }
  ],
  "functions": []
}