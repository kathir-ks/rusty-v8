{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/zone-compression.h",
  "imports": [
    "src/base/bits.h",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "ZoneCompression",
      "properties": [
        "kReservationSize",
        "kReservationAlignment",
        "kOffsetMask"
      ],
      "methods": [
        {
          "name": "base_of",
          "parameters": [
            "const void* zone_pointer"
          ],
          "return_type": "Address",
          "logic": "Computes the base address of the zone cage by masking off the lower bits of the input address. This is the start address of the 4GB aligned region."
        },
        {
          "name": "CheckSameBase",
          "parameters": [
            "const void* p1",
            "const void* p2"
          ],
          "return_type": "bool",
          "logic": "Checks if two pointers belong to the same zone cage. Returns true if either pointer is null. Otherwise, it checks if their base addresses (computed using `base_of`) are equal and asserts that they are."
        },
        {
          "name": "Compress",
          "parameters": [
            "const void* value"
          ],
          "return_type": "uint32_t",
          "logic": "Compresses a pointer by masking it with `kOffsetMask`, effectively storing only the offset within the zone cage. Returns 0 if the input is nullptr, ensuring that nullptr can be represented. Includes assertions to verify the compressed value is valid and less than `kReservationSize`."
        },
        {
          "name": "Decompress",
          "parameters": [
            "const void* zone_pointer",
            "uint32_t compressed_value"
          ],
          "return_type": "Address",
          "logic": "Decompresses a compressed value by adding it to the base address of the zone cage. If the compressed value is 0, it returns kNullAddress (likely 0). The base address is calculated from an arbitrary pointer to the zone."
        }
      ]
    }
  ],
  "functions": []
}