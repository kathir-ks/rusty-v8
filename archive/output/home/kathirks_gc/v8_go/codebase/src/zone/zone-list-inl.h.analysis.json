{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/zone-list-inl.h",
  "imports": [
    "src/base/macros.h",
    "src/base/platform/platform.h",
    "src/utils/memcopy.h",
    "src/zone/zone-list.h"
  ],
  "classes": [
    {
      "name": "ZoneList<T>",
      "properties": [],
      "methods": [
        {
          "name": "Add",
          "parameters": [
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds an element to the list. If the list is full, it calls ResizeAdd to increase capacity."
        },
        {
          "name": "AddAll",
          "parameters": [
            "const ZoneList<T>& other",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds all elements from another ZoneList to this list."
        },
        {
          "name": "AddAll",
          "parameters": [
            "base::Vector<const T> other",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds all elements from a base::Vector to this list. If the capacity is not sufficient, it resizes the list. Uses memcpy if the type is trivially copyable for performance."
        },
        {
          "name": "ResizeAdd",
          "parameters": [
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Resizes the list and then adds the element. This acts as an entry point to call ResizeAddInternal."
        },
        {
          "name": "ResizeAddInternal",
          "parameters": [
            "const T& element",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Resizes the list by doubling the capacity (or setting it to 1 if it's currently 0) and then adds the given element. Creates a temporary copy of the element before resizing to avoid potential issues if the element is part of the existing data array."
        },
        {
          "name": "Resize",
          "parameters": [
            "int new_capacity",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Resizes the internal data array to the given capacity. Allocates a new array using the provided zone, copies the existing elements (using memcpy for trivially copyable types), and deletes the old array if it exists."
        },
        {
          "name": "AddBlock",
          "parameters": [
            "T value",
            "int count",
            "Zone* zone"
          ],
          "return_type": "base::Vector<T>",
          "logic": "Adds a block of 'count' elements with the given 'value' to the list and returns a base::Vector pointing to the newly added elements."
        },
        {
          "name": "Set",
          "parameters": [
            "int index",
            "const T& elm"
          ],
          "return_type": "void",
          "logic": "Sets the element at the given index to the provided value."
        },
        {
          "name": "InsertAt",
          "parameters": [
            "int index",
            "const T& elm",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Inserts the given element at the specified index, shifting subsequent elements to make room. First Add is called to add the element at the end, then the array values are moved back until the specified index to insert the value."
        },
        {
          "name": "Remove",
          "parameters": [
            "int i"
          ],
          "return_type": "T",
          "logic": "Removes the element at the given index, shifting subsequent elements to fill the gap and returning the removed element."
        },
        {
          "name": "Clear",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Deallocates the internal data array using the provided zone and then resets the length and capacity to 0."
        },
        {
          "name": "Rewind",
          "parameters": [
            "int pos"
          ],
          "return_type": "void",
          "logic": "Sets the length of the list to the given position, effectively truncating the list."
        },
        {
          "name": "Iterate",
          "parameters": [
            "Visitor* visitor"
          ],
          "return_type": "void",
          "logic": "Iterates through the elements of the list, applying the given visitor to each element."
        },
        {
          "name": "Sort",
          "parameters": [
            "CompareFunction cmp"
          ],
          "return_type": "void",
          "logic": "Sorts the elements of the list using the provided comparison function."
        },
        {
          "name": "StableSort",
          "parameters": [
            "CompareFunction cmp",
            "size_t s",
            "size_t l"
          ],
          "return_type": "void",
          "logic": "Sorts the elements of the list using a stable sort algorithm with the provided comparison function and sorts only a block of the list from index s to s+l."
        }
      ]
    }
  ],
  "functions": []
}