{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/zone/accounting-allocator.cc",
  "imports": [
    "src/zone/accounting-allocator.h",
    "memory",
    "src/base/bounded-page-allocator.h",
    "src/base/logging.h",
    "src/base/macros.h",
    "src/utils/allocation.h",
    "src/zone/zone-compression.h",
    "src/zone/zone-segment.h"
  ],
  "classes": [
    {
      "name": "AccountingAllocator",
      "properties": [
        "reserved_area_",
        "bounded_page_allocator_",
        "current_memory_usage_",
        "max_memory_usage_"
      ],
      "methods": [
        {
          "name": "AccountingAllocator",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor. If zone compression is enabled, it reserves address space using VirtualMemory and creates a BoundedPageAllocator."
        },
        {
          "name": "~AccountingAllocator",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor. Defined as default."
        },
        {
          "name": "AllocateSegment",
          "parameters": [
            "size_t bytes",
            "bool supports_compression"
          ],
          "return_type": "Segment*",
          "logic": "Allocates a segment of memory. If compression is enabled and supported, it uses the bounded page allocator. Otherwise, it uses the standard allocator.  It tracks memory usage and updates the maximum memory usage if necessary."
        },
        {
          "name": "ReturnSegment",
          "parameters": [
            "Segment* segment",
            "bool supports_compression"
          ],
          "return_type": "void",
          "logic": "Returns a segment of memory. If compression is enabled and supported, it frees the pages using the bounded page allocator. Otherwise, it uses the standard free. It updates the current memory usage."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ReserveAddressSpace",
      "parameters": [
        "v8::PageAllocator* platform_allocator"
      ],
      "return_type": "VirtualMemory",
      "logic": "Reserves a virtual memory address space using the provided PageAllocator for compressed zones."
    },
    {
      "name": "CreateBoundedAllocator",
      "parameters": [
        "v8::PageAllocator* platform_allocator",
        "Address reservation_start"
      ],
      "return_type": "std::unique_ptr<v8::base::BoundedPageAllocator>",
      "logic": "Creates a BoundedPageAllocator which allocates within the reserved address space for compressed zones. It excludes the first page for null pointer detection."
    }
  ]
}