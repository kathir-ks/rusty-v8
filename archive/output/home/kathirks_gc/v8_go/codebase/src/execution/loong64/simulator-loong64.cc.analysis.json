{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/loong64/simulator-loong64.cc",
  "imports": [
    "src/execution/loong64/simulator-loong64.h",
    "limits.h",
    "stdarg.h",
    "stdlib.h",
    "cmath",
    "src/base/bits.h",
    "src/base/platform/memory.h",
    "src/base/platform/platform.h",
    "src/base/strings.h",
    "src/base/vector.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/loong64/constants-loong64.h",
    "src/codegen/macro-assembler.h",
    "src/diagnostics/disasm.h",
    "src/heap/combined-heap.h",
    "src/runtime/runtime-utils.h",
    "src/utils/ostreams.h",
    "src/trap-handler/trap-handler-simulator.h"
  ],
  "classes": [
    {
      "name": "Loong64Debugger",
      "properties": [
        "sim_"
      ],
      "methods": [
        {
          "name": "Loong64Debugger",
          "parameters": [
            "Simulator* sim"
          ],
          "return_type": "void",
          "logic": "Constructor for the Loong64Debugger class. Takes a pointer to a Simulator object and initializes the sim_ member."
        },
        {
          "name": "Stop",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Stops the simulator at a given instruction, prints a message, and enters the debug loop."
        },
        {
          "name": "Debug",
          "parameters": [],
          "return_type": "void",
          "logic": "Enters an interactive debugger shell that allows the user to step through instructions, inspect registers and memory, set breakpoints, and more."
        },
        {
          "name": "PrintAllRegs",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the values of all general-purpose registers with formatted output."
        },
        {
          "name": "PrintAllRegsIncludingFPU",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the values of all general-purpose registers and floating-point registers with formatted output."
        },
        {
          "name": "GetRegisterValue",
          "parameters": [
            "int regnum"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value of a general-purpose register given its number. Handles the special case for the PC register."
        },
        {
          "name": "GetFPURegisterValue",
          "parameters": [
            "int regnum"
          ],
          "return_type": "int64_t",
          "logic": "Returns the 64-bit value of a FPU register, handling the special case for returning the PC."
        },
        {
          "name": "GetFPURegisterValueFloat",
          "parameters": [
            "int regnum"
          ],
          "return_type": "float",
          "logic": "Returns the single-precision floating-point value of a FPU register."
        },
        {
          "name": "GetFPURegisterValueDouble",
          "parameters": [
            "int regnum"
          ],
          "return_type": "double",
          "logic": "Returns the double-precision floating-point value of a FPU register."
        },
        {
          "name": "GetValue",
          "parameters": [
            "const char* desc",
            "int64_t* value"
          ],
          "return_type": "bool",
          "logic": "Parses a string description of a register or memory address and stores the corresponding value in the provided pointer."
        },
        {
          "name": "SetBreakpoint",
          "parameters": [
            "Instruction* breakpc"
          ],
          "return_type": "bool",
          "logic": "Sets a breakpoint at a given instruction address by replacing the original instruction with a breakpoint instruction."
        },
        {
          "name": "DeleteBreakpoint",
          "parameters": [
            "Instruction* breakpc"
          ],
          "return_type": "bool",
          "logic": "Deletes a breakpoint at a given instruction address by restoring the original instruction."
        },
        {
          "name": "UndoBreakpoints",
          "parameters": [],
          "return_type": "void",
          "logic": "Restores all breakpoints to their original instructions."
        },
        {
          "name": "RedoBreakpoints",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets all breakpoints back to the breakpoint instruction."
        }
      ]
    },
    {
      "name": "Simulator",
      "properties": [
        "isolate_",
        "stack_",
        "stack_limit_",
        "pc_modified_",
        "icount_",
        "break_count_",
        "break_pc_",
        "break_instr_",
        "registers_",
        "FPUregisters_",
        "CFregisters_",
        "FCSR_",
        "last_debugger_input_",
        "global_monitor_thread_",
        "local_monitor_"
      ],
      "methods": [
        {
          "name": "Simulator",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "N/A",
          "logic": "Constructor for the Simulator class. Initializes the simulator state, including registers, stack, and other related data."
        },
        {
          "name": "~Simulator",
          "parameters": [],
          "return_type": "N/A",
          "logic": "Destructor for the Simulator class. Frees allocated memory and removes the linked address from the global monitor."
        },
        {
          "name": "current",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "Simulator*",
          "logic": "Returns the active Simulator for the current thread within a given Isolate."
        },
        {
          "name": "ceil",
          "parameters": [
            "double value"
          ],
          "return_type": "double",
          "logic": "Override ceil to handle NaNs"
        },
        {
          "name": "floor",
          "parameters": [
            "double value"
          ],
          "return_type": "double",
          "logic": "Override floor to handle NaNs"
        },
        {
          "name": "trunc",
          "parameters": [
            "double value"
          ],
          "return_type": "double",
          "logic": "Override trunc to handle NaNs"
        },
        {
          "name": "set_register",
          "parameters": [
            "int reg",
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Sets the value of a general-purpose register in the simulator's state."
        },
        {
          "name": "set_dw_register",
          "parameters": [
            "int reg",
            "const int* dbl"
          ],
          "return_type": "void",
          "logic": "Sets a register using two 32-bit integers."
        },
        {
          "name": "set_fpu_register",
          "parameters": [
            "int fpureg",
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Sets the 64-bit value of an FPU register."
        },
        {
          "name": "set_fpu_register_word",
          "parameters": [
            "int fpureg",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the lower 32-bits of an FPU register, leaving the upper bits untouched."
        },
        {
          "name": "set_fpu_register_hi_word",
          "parameters": [
            "int fpureg",
            "int32_t value"
          ],
          "return_type": "void",
          "logic": "Sets the upper 32-bits of an FPU register, leaving the lower bits untouched."
        },
        {
          "name": "set_fpu_register_float",
          "parameters": [
            "int fpureg",
            "float value"
          ],
          "return_type": "void",
          "logic": "Sets the value of an FPU register using a float value."
        },
        {
          "name": "set_fpu_register_double",
          "parameters": [
            "int fpureg",
            "double value"
          ],
          "return_type": "void",
          "logic": "Sets the value of an FPU register using a double value."
        },
        {
          "name": "set_cf_register",
          "parameters": [
            "int cfreg",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets the value of a condition flag register."
        },
        {
          "name": "get_register",
          "parameters": [
            "int reg"
          ],
          "return_type": "int64_t",
          "logic": "Gets the value of a general-purpose register in the simulator's state."
        },
        {
          "name": "get_double_from_register_pair",
          "parameters": [
            "int reg"
          ],
          "return_type": "double",
          "logic": "Reads a double value from a register pair, converting the bits accordingly."
        },
        {
          "name": "get_fpu_register",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int64_t",
          "logic": "Gets the 64-bit value of an FPU register."
        },
        {
          "name": "get_fpu_register_word",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the lower 32-bits of an FPU register."
        },
        {
          "name": "get_fpu_register_signed_word",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the lower 32-bits of an FPU register as a signed integer."
        },
        {
          "name": "get_fpu_register_hi_word",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Gets the upper 32-bits of an FPU register."
        },
        {
          "name": "get_fpu_register_float",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "float",
          "logic": "Gets the value of an FPU register as a float."
        },
        {
          "name": "get_fpu_register_double",
          "parameters": [
            "int fpureg"
          ],
          "return_type": "double",
          "logic": "Gets the value of an FPU register as a double."
        },
        {
          "name": "get_cf_register",
          "parameters": [
            "int cfreg"
          ],
          "return_type": "bool",
          "logic": "Gets the value of a condition flag register."
        },
        {
          "name": "GetFpArgs",
          "parameters": [
            "double* x",
            "double* y",
            "int32_t* z"
          ],
          "return_type": "void",
          "logic": "Retrieves floating-point arguments from the FPU registers."
        },
        {
          "name": "SetFpResult",
          "parameters": [
            "const double& result"
          ],
          "return_type": "void",
          "logic": "Sets the floating-point result in the appropriate FPU register."
        },
        {
          "name": "set_fcsr_bit",
          "parameters": [
            "uint32_t cc",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets a specific bit in the Floating-Point Control and Status Register (FCSR)."
        },
        {
          "name": "test_fcsr_bit",
          "parameters": [
            "uint32_t cc"
          ],
          "return_type": "bool",
          "logic": "Tests a specific bit in the FCSR."
        },
        {
          "name": "set_fcsr_rounding_mode",
          "parameters": [
            "FPURoundingMode mode"
          ],
          "return_type": "void",
          "logic": "Sets the rounding mode in the FCSR."
        },
        {
          "name": "get_fcsr_rounding_mode",
          "parameters": [],
          "return_type": "unsigned int",
          "logic": "Gets the current rounding mode from the FCSR."
        },
        {
          "name": "set_fcsr_round_error",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "bool",
          "logic": "Sets the rounding error codes in the FCSR based on the difference between the original and rounded values. Returns true if the operation was invalid."
        },
        {
          "name": "set_fcsr_round64_error",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "bool",
          "logic": "Sets the rounding error codes in the FCSR for 64-bit operations."
        },
        {
          "name": "set_fcsr_round_error",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "bool",
          "logic": "Sets the rounding error codes in the FCSR based on the difference between the original and rounded values for float numbers."
        },
        {
          "name": "set_fpu_register_word_invalid_result",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "void",
          "logic": "Sets FPU register word to zero if original was NaN, or to kFPUInvalidResult if the rounded result is out of range."
        },
        {
          "name": "set_fpu_register_invalid_result",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "void",
          "logic": "Sets FPU register to zero if original was NaN, or to kFPUInvalidResult if the rounded result is out of range."
        },
        {
          "name": "set_fpu_register_invalid_result64",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "void",
          "logic": "Sets FPU register to zero if original was NaN, or to kFPU64InvalidResult if the rounded result is out of range."
        },
        {
          "name": "set_fpu_register_word_invalid_result",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "void",
          "logic": "Sets FPU register word to zero if original was NaN, or to kFPUInvalidResult if the rounded result is out of range for a double input."
        },
        {
          "name": "set_fpu_register_invalid_result",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "void",
          "logic": "Sets FPU register to zero if original was NaN, or to kFPUInvalidResult if the rounded result is out of range for a double input."
        },
        {
          "name": "set_fpu_register_invalid_result64",
          "parameters": [
            "double original",
            "double rounded"
          ],
          "return_type": "void",
          "logic": "Sets FPU register to zero if original was NaN, or to kFPU64InvalidResult if the rounded result is out of range for a double input."
        },
        {
          "name": "set_fcsr_round64_error",
          "parameters": [
            "float original",
            "float rounded"
          ],
          "return_type": "bool",
          "logic": "Sets the rounding error codes in the FCSR based on the difference between the original and rounded values for 64-bit float operations."
        },
        {
          "name": "round_according_to_fcsr",
          "parameters": [
            "double toRound",
            "double* rounded",
            "int32_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a double value to an integer according to the current FCSR rounding mode (32-bit)."
        },
        {
          "name": "round64_according_to_fcsr",
          "parameters": [
            "double toRound",
            "double* rounded",
            "int64_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a double value to an integer according to the current FCSR rounding mode (64-bit)."
        },
        {
          "name": "round_according_to_fcsr",
          "parameters": [
            "float toRound",
            "float* rounded",
            "int32_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a float value to an integer according to the current FCSR rounding mode (32-bit)."
        },
        {
          "name": "round64_according_to_fcsr",
          "parameters": [
            "float toRound",
            "float* rounded",
            "int64_t* rounded_int"
          ],
          "return_type": "void",
          "logic": "Rounds a float value to an integer according to the current FCSR rounding mode (64-bit)."
        },
        {
          "name": "set_pc",
          "parameters": [
            "int64_t value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the program counter (PC)."
        },
        {
          "name": "has_bad_pc",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the PC has a known bad value."
        },
        {
          "name": "get_pc",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Gets the value of the program counter (PC)."
        },
        {
          "name": "DieOrDebug",
          "parameters": [],
          "return_type": "void",
          "logic": "Enters the debugger or aborts the program if debugging is not enabled."
        },
        {
          "name": "TraceRegWr",
          "parameters": [
            "int64_t value",
            "TraceType t"
          ],
          "return_type": "void",
          "logic": "Traces register writes with different formatting based on the data type."
        },
        {
          "name": "TraceMemRd",
          "parameters": [
            "int64_t addr",
            "int64_t value",
            "TraceType t"
          ],
          "return_type": "void",
          "logic": "Traces memory reads with different formatting based on the data type."
        },
        {
          "name": "TraceMemWr",
          "parameters": [
            "int64_t addr",
            "int64_t value",
            "TraceType t"
          ],
          "return_type": "void",
          "logic": "Traces memory writes with different formatting based on the data type."
        },
        {
          "name": "ProbeMemory",
          "parameters": [
            "uintptr_t address",
            "uintptr_t access_size"
          ],
          "return_type": "bool",
          "logic": "Checks if the memory access is valid; if invalid, invokes the trap handler."
        },
        {
          "name": "ReadW",
          "parameters": [
            "int64_t addr",
            "Instruction* instr",
            "TraceType t"
          ],
          "return_type": "int32_t",
          "logic": "Reads a 32-bit word from memory, handling null pointer dereferences and tracing."
        },
        {
          "name": "ReadWU",
          "parameters": [
            "int64_t addr",
            "Instruction* instr"
          ],
          "return_type": "uint32_t",
          "logic": "Reads an unsigned 32-bit word from memory, handling null pointer dereferences and tracing."
        },
        {
          "name": "WriteW",
          "parameters": [
            "int64_t addr",
            "int32_t value",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Writes a 32-bit word to memory, handling null pointer dereferences and tracing."
        },
        {
          "name": "WriteConditionalW",
          "parameters": [
            "int64_t addr",
            "int32_t value",
            "Instruction* instr",
            "int32_t* done"
          ],
          "return_type": "void",
          "logic": "Conditionally writes a 32-bit word to memory, based on LL/SC semantic."
        },
        {
          "name": "Read2W",
          "parameters": [
            "int64_t addr",
            "Instruction* instr"
          ],
          "return_type": "int64_t",
          "logic": "Reads a 64-bit double word from memory."
        },
        {
          "name": "Write2W",
          "parameters": [
            "int64_t addr",
            "int64_t value",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Writes a 64-bit double word to memory."
        },
        {
          "name": "WriteConditional2W",
          "parameters": [
            "int64_t addr",
            "int64_t value",
            "Instruction* instr",
            "int32_t* done"
          ],
          "return_type": "void",
          "logic": "Conditionally writes a 64-bit double word to memory, based on LL/SC semantic."
        },
        {
          "name": "ReadD",
          "parameters": [
            "int64_t addr",
            "Instruction* instr"
          ],
          "return_type": "double",
          "logic": "Reads a double from memory."
        },
        {
          "name": "WriteD",
          "parameters": [
            "int64_t addr",
            "double value",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Writes a double to memory."
        },
        {
          "name": "ReadHU",
          "parameters": [
            "int64_t addr",
            "Instruction* instr"
          ],
          "return_type": "uint16_t",
          "logic": "Reads an unsigned 16-bit halfword from memory."
        },
        {
          "name": "ReadH",
          "parameters": [
            "int64_t addr",
            "Instruction* instr"
          ],
          "return_type": "int16_t",
          "logic": "Reads a signed 16-bit halfword from memory."
        },
        {
          "name": "WriteH",
          "parameters": [
            "int64_t addr",
            "uint16_t value",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Writes an unsigned 16-bit halfword to memory."
        },
        {
          "name": "WriteH",
          "parameters": [
            "int64_t addr",
            "int16_t value",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Writes a signed 16-bit halfword to memory."
        },
        {
          "name": "ReadBU",
          "parameters": [
            "int64_t addr"
          ],
          "return_type": "uint32_t",
          "logic": "Reads an unsigned byte from memory and returns it as a 32-bit integer."
        },
        {
          "name": "ReadB",
          "parameters": [
            "int64_t addr"
          ],
          "return_type": "int32_t",
          "logic": "Reads a signed byte from memory and returns it as a 32-bit integer."
        },
        {
          "name": "WriteB",
          "parameters": [
            "int64_t addr",
            "uint8_t value"
          ],
          "return_type": "void",
          "logic": "Writes an unsigned byte to memory."
        },
        {
          "name": "WriteB",
          "parameters": [
            "int64_t addr",
            "int8_t value"
          ],
          "return_type": "void",
          "logic": "Writes a signed byte to memory."
        },
        {
          "name": "StackLimit",
          "parameters": [
            "uintptr_t c_limit"
          ],
          "return_type": "uintptr_t",
          "logic": "Returns the limit of the stack area to enable checking for stack overflows."
        },
        {
          "name": "GetCentralStackView",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns a view of the central stack area."
        },
        {
          "name": "Format",
          "parameters": [
            "Instruction* instr",
            "const char* format"
          ],
          "return_type": "void",
          "logic": "Prints an error message for unsupported instructions."
        },
        {
          "name": "SoftwareInterrupt",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles software interrupts (SWI) used to call into the V8 runtime or for debugging."
        },
        {
          "name": "IsWatchpoint",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "bool",
          "logic": "Checks if a given code represents a watchpoint."
        },
        {
          "name": "PrintWatchpoint",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "void",
          "logic": "Prints information about a watchpoint."
        },
        {
          "name": "HandleStop",
          "parameters": [
            "uint64_t code",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Handles stop instructions."
        },
        {
          "name": "IsStopInstruction",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction is a stop instruction."
        },
        {
          "name": "IsEnabledStop",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "bool",
          "logic": "Checks if a given stop code is enabled."
        },
        {
          "name": "EnableStop",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "void",
          "logic": "Enables a given stop code."
        },
        {
          "name": "DisableStop",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "void",
          "logic": "Disables a given stop code."
        },
        {
          "name": "IncreaseStopCounter",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "void",
          "logic": "Increases the counter for a given stop code."
        },
        {
          "name": "PrintStopInfo",
          "parameters": [
            "uint64_t code"
          ],
          "return_type": "void",
          "logic": "Prints information about a stop code."
        },
        {
          "name": "SignalException",
          "parameters": [
            "Exception e"
          ],
          "return_type": "void",
          "logic": "Signals an exception and aborts the program."
        },
        {
          "name": "DecodeTypeOp6",
          "parameters": [],
          "return_type": "void",
          "logic": "Decode and execute instructions of type Op6 (Branch and immediate instructions)."
        },
        {
          "name": "DecodeTypeOp7",
          "parameters": [],
          "return_type": "void",
          "logic": "Decode and execute instructions of type Op7 (Load upper immediate instructions)."
        },
        {
          "name": "DecodeTypeOp8",
          "parameters": [],
          "return_type": "void",
          "logic": "Decode and execute instructions of type Op8 (Load and Store Pointer instructions)."
        },
        {
          "name": "DecodeTypeRegImm",
          "parameters": [],
          "return_type": "void",
          "logic": "Decode and execute instructions of type RegImm."
        },
        {
          "name": "InstructionDecode",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Decodes and executes a single instruction."
        },
        {
          "name": "ICacheMatch",
          "parameters": [
            "void* one",
            "void* two"
          ],
          "return_type": "bool",
          "logic": "Checks if two ICache entries match."
        },
        {
          "name": "FlushICache",
          "parameters": [
            "base::CustomMatcherHashMap* i_cache",
            "void* start_addr",
            "size_t size"
          ],
          "return_type": "void",
          "logic": "Flushes the instruction cache for a given address range."
        },
        {
          "name": "SetRedirectInstruction",
          "parameters": [
            "Instruction* instruction"
          ],
          "return_type": "void",
          "logic": "Set redirect instruction to a call redirected runtime instruction"
        }
      ]
    },
    {
      "name": "Simulator::GlobalMonitor",
      "properties": [],
      "methods": [
        {
          "name": "Get",
          "parameters": [],
          "return_type": "Simulator::GlobalMonitor*",
          "logic": "Returns the global monitor instance (lazy, leaky getter)."
        }
      ]
    },
    {
      "name": "CachePage",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "HaveSameSign",
      "parameters": [
        "int64_t a",
        "int64_t b"
      ],
      "return_type": "bool",
      "logic": "Checks if two 64-bit integers have the same sign."
    },
    {
      "name": "get_fcsr_condition_bit",
      "parameters": [
        "uint32_t cc"
      ],
      "return_type": "uint32_t",
      "logic": "Gets the bit position in the FCSR register corresponding to a floating-point condition code."
    },
    {
      "name": "UNSUPPORTED",
      "parameters": [],
      "return_type": "void",
      "logic": "Prints an error message and signals that an instruction is not supported."
    }
  ]
}