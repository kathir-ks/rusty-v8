{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/execution.h",
  "imports": [
    "src/base/vector.h",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "Execution",
      "properties": [],
      "methods": [
        {
          "name": "Call",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Object> callable",
            "DirectHandle<Object> receiver",
            "base::Vector<const DirectHandle<Object>> args"
          ],
          "return_type": "MaybeHandle<Object>",
          "logic": "Calls a JavaScript function with a given receiver and arguments.  If the function is not strict mode, the receiver will be converted to an object."
        },
        {
          "name": "CallScript",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSFunction> callable",
            "DirectHandle<Object> receiver",
            "DirectHandle<Object> host_defined_options"
          ],
          "return_type": "MaybeHandle<Object>",
          "logic": "Runs a JavaScript script (as opposed to a regular JavaScript function). Requires a host-defined options object."
        },
        {
          "name": "CallBuiltin",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSFunction> builtin",
            "DirectHandle<Object> receiver",
            "base::Vector<const DirectHandle<Object>> args"
          ],
          "return_type": "MaybeHandle<Object>",
          "logic": "Calls a built-in JavaScript function with a given receiver and arguments."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Object> constructor",
            "base::Vector<const DirectHandle<Object>> args"
          ],
          "return_type": "MaybeDirectHandle<JSReceiver>",
          "logic": "Constructs a new JavaScript object from a constructor function with the provided arguments."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Object> constructor",
            "DirectHandle<Object> new_target",
            "base::Vector<const DirectHandle<Object>> args"
          ],
          "return_type": "MaybeDirectHandle<JSReceiver>",
          "logic": "Constructs a new JavaScript object from a constructor function with the provided arguments and new target."
        },
        {
          "name": "TryCall",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Object> callable",
            "DirectHandle<Object> receiver",
            "base::Vector<const DirectHandle<Object>> args",
            "MessageHandling message_handling",
            "MaybeDirectHandle<Object>* exception_out"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Calls a JavaScript function, but handles exceptions internally.  Exceptions can be reported or kept pending.  Optionally captures exception info in exception_out."
        },
        {
          "name": "TryCallScript",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSFunction> script_function",
            "DirectHandle<Object> receiver",
            "DirectHandle<FixedArray> host_defined_options"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Calls a JavaScript script, handling exceptions internally. Requires a host-defined options object. This is the \"Try\" version of CallScript."
        },
        {
          "name": "TryRunMicrotasks",
          "parameters": [
            "Isolate* isolate",
            "MicrotaskQueue* microtask_queue"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Runs microtasks associated with the given Isolate and MicrotaskQueue, catching and handling exceptions that occur during microtask execution."
        },
        {
          "name": "CallWasm",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<Code> wrapper_code",
            "WasmCodePointer wasm_call_target",
            "DirectHandle<Object> object_ref",
            "Address packed_args"
          ],
          "return_type": "void",
          "logic": "Calls a WebAssembly function through a wrapper code. Returns via exception or stores return values in packed_args."
        }
      ]
    }
  ],
  "functions": []
}