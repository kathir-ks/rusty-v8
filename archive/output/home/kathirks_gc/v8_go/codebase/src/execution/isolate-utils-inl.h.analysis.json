{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/isolate-utils-inl.h",
  "imports": [
    "src/execution/isolate-utils.h",
    "src/common/ptr-compr-inl.h",
    "src/execution/isolate.h",
    "src/sandbox/isolate.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "GetHeapFromWritableObject",
      "parameters": [
        "Tagged<HeapObject> object"
      ],
      "return_type": "Heap*",
      "logic": "Given a HeapObject, it returns the Heap associated with the memory chunk the object resides in. It asserts that the chunk is not in the writable shared space to avoid issues with worker isolates. The heap is retrieved directly from the MemoryChunk using `GetHeap()`."
    },
    {
      "name": "GetIsolateFromWritableObject",
      "parameters": [
        "Tagged<HeapObject> object"
      ],
      "return_type": "Isolate*",
      "logic": "Given a HeapObject, it retrieves the Heap associated with it using GetHeapFromWritableObject and then retrieves the Isolate associated with that Heap using Isolate::FromHeap."
    },
    {
      "name": "GetHeapFromWritableObject",
      "parameters": [
        "const HeapObjectLayout& object"
      ],
      "return_type": "Heap*",
      "logic": "Given a HeapObjectLayout, converts it to a Tagged<HeapObject> and calls the other GetHeapFromWritableObject function."
    },
    {
      "name": "GetIsolateFromWritableObject",
      "parameters": [
        "const HeapObjectLayout& object"
      ],
      "return_type": "Isolate*",
      "logic": "Given a HeapObjectLayout, converts it to a Tagged<HeapObject> and calls the other GetIsolateFromWritableObject function."
    },
    {
      "name": "GetIsolateFromHeapObject",
      "parameters": [
        "Tagged<HeapObject> object",
        "Isolate** isolate"
      ],
      "return_type": "bool",
      "logic": "Given a HeapObject, it attempts to find the Isolate associated with it.  If the object is in read-only space, it sets the Isolate pointer to null and returns false. Otherwise, it sets the Isolate pointer to the Isolate from the Heap and returns true."
    },
    {
      "name": "GetIsolateForSandbox",
      "parameters": [
        "Tagged<HeapObject> object"
      ],
      "return_type": "IsolateForSandbox",
      "logic": "In sandbox mode, it returns an IsolateForSandbox associated with the given HeapObject by first obtaining the MemoryChunk, then getting the isolate from the heap. It is designed to be used on shared objects. In non-sandbox mode, it returns an empty IsolateForSandbox.  This function should ideally return the current Isolate instead, but is used in places where that cannot be guaranteed."
    }
  ]
}