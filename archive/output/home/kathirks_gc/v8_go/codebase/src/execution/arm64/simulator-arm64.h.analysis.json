{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/arm64/simulator-arm64.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/arm64/simulator-arm64.h\",\n  \"imports\": [\n    \"src/common/globals.h\",\n    \"<stdarg.h>\",\n    \"<vector>\",\n    \"src/base/compiler-specific.h\",\n    \"src/codegen/arm64/assembler-arm64.h\",\n    \"src/codegen/arm64/decoder-arm64.h\",\n    \"src/codegen/assembler.h\",\n    \"src/diagnostics/arm64/disasm-arm64.h\",\n    \"src/execution/simulator-base.h\",\n    \"src/utils/allocation.h\",\n    \"src/utils/utils.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CachePage\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"SimMemory\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"AddressUntag\",\n          \"parameters\": [\n            \"T address\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Removes address tagging from a given address. It performs a bitwise AND operation with a mask to clear the tag bits.\"\n        },\n        {\n          \"name\": \"Read\",\n          \"parameters\": [\n            \"A address\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Reads a value of type T from the specified memory address. It removes address tagging and uses memcpy to read the value.\"\n        },\n        {\n          \"name\": \"Write\",\n          \"parameters\": [\n            \"A address\",\n            \"T value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a value of type T to the specified memory address.  It removes address tagging and uses memcpy to write the value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimSystemRegister\",\n      \"properties\": [\n        \"value_\",\n        \"write_ignore_mask_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SimSystemRegister\",\n          \"parameters\": [],\n          \"return_type\": \"SimSystemRegister\",\n          \"logic\": \"Default constructor. Initializes the register with a value of 0 and sets the write_ignore_mask to prevent any modifications.\"\n        },\n        {\n          \"name\": \"RawValue\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the raw value of the system register.\"\n        },\n        {\n          \"name\": \"SetRawValue\",\n          \"parameters\": [\n            \"uint32_t new_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the raw value of the system register, respecting the write ignore mask.\"\n        },\n        {\n          \"name\": \"Bits\",\n          \"parameters\": [\n            \"int msb\",\n            \"int lsb\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Extracts a range of bits from the register's value and returns it as an unsigned integer.\"\n        },\n        {\n          \"name\": \"SignedBits\",\n          \"parameters\": [\n            \"int msb\",\n            \"int lsb\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Extracts a range of bits from the register's value and returns it as a signed integer.\"\n        },\n        {\n          \"name\": \"SetBits\",\n          \"parameters\": [\n            \"int msb\",\n            \"int lsb\",\n            \"uint32_t bits\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a range of bits in the register's value.\"\n        },\n        {\n          \"name\": \"DefaultValueFor\",\n          \"parameters\": [\n            \"SystemRegister id\"\n          ],\n          \"return_type\": \"SimSystemRegister\",\n          \"logic\": \"Returns a default SimSystemRegister object for a given SystemRegister ID.\"\n        },\n        {\n          \"name\": \"SimSystemRegister\",\n          \"parameters\": [\n            \"uint32_t value\",\n            \"uint32_t write_ignore_mask\"\n          ],\n          \"return_type\": \"SimSystemRegister\",\n          \"logic\": \"Protected constructor to initialize the register with a specific value and write ignore mask.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimRegisterBase\",\n      \"properties\": [\n        \"value_\",\n        \"written_since_last_log_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Set\",\n          \"parameters\": [\n            \"T new_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the register, zero-extending it if necessary. Notifies that the register has been written to.\"\n        },\n        {\n          \"name\": \"Insert\",\n          \"parameters\": [\n            \"int lane\",\n            \"T new_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Inserts a typed value into a specific lane of the register. Notifies that the register has been written to.\"\n        },\n        {\n          \"name\": \"Get\",\n          \"parameters\": [\n            \"int lane\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Gets the value from the register at a specific lane.\"\n        },\n        {\n          \"name\": \"WrittenSinceLastLog\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the register has been written to since the last log.\"\n        },\n        {\n          \"name\": \"NotifyRegisterLogged\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the 'written since last log' flag.\"\n        },\n        {\n          \"name\": \"NotifyRegisterWrite\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the 'written since last log' flag.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LogicVRegister\",\n      \"properties\": [\n        \"register_\",\n        \"saturated_\",\n        \"round_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LogicVRegister\",\n          \"parameters\": [\n            \"SimVRegister& other\"\n          ],\n          \"return_type\": \"LogicVRegister\",\n          \"logic\": \"Constructor. Initializes a LogicVRegister from a SimVRegister.  Also initializes saturation and rounding state for each lane.\"\n        },\n        {\n          \"name\": \"Int\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Reads a signed integer from a lane in the vector register, based on the specified format.\"\n        },\n        {\n          \"name\": \"Uint\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Reads an unsigned integer from a lane in the vector register, based on the specified format.\"\n        },\n        {\n          \"name\": \"UintLeftJustified\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Reads an unsigned integer from a lane, left-justifies it, and returns it.\"\n        },\n        {\n          \"name\": \"IntLeftJustified\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Reads a signed integer from a lane, left-justifies it (as unsigned), and then converts back to signed.\"\n        },\n        {\n          \"name\": \"SetInt\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a signed integer value in a lane of the vector register, based on the specified format.\"\n        },\n        {\n          \"name\": \"SetIntArray\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"const int64_t* src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an array of signed integer values into the vector register lanes based on the specified format.\"\n        },\n        {\n          \"name\": \"SetUint\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\",\n            \"uint64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an unsigned integer value in a lane of the vector register, based on the specified format.\"\n        },\n        {\n          \"name\": \"SetUint\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\",\n            \"sim_uint128_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an unsigned integer value in a lane (or lanes) of the vector register, supporting 128 bit values.\"\n        },\n        {\n          \"name\": \"SetUintArray\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"const uint64_t* src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an array of unsigned integer values into the vector register lanes based on the specified format.\"\n        },\n        {\n          \"name\": \"ReadUintFromMem\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\",\n            \"uint64_t addr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reads an unsigned integer from memory and stores into a register lane.\"\n        },\n        {\n          \"name\": \"WriteUintToMem\",\n          \"parameters\": [\n            \"VectorFormat vform\",\n            \"int index\",\n            \"uint64_t addr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes an unsigned integer from a register lane to memory.\"\n        },\n        {\n          \"name\": \"Float\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Gets a floating-point value of type T from a lane in the vector register.\"\n        },\n        {\n          \"name\": \"SetFloat\",\n          \"parameters\": [\n            \"int index\",\n            \"T value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a floating-point value of type T in a lane of the vector register.\"\n        },\n        {\n          \"name\": \"ClearForWrite\",\n          \"parameters\": [\n            \"VectorFormat vform\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the top bits of the register to ensure they are zeroed when setting a result that is smaller than a Q register.\"\n        },\n        {\n          \"name\": \"GetSignedSaturation\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Saturation\",\n          \"logic\": \"Gets the signed saturation state for a specific lane.\"\n        },\n        {\n          \"name\": \"GetUnsignedSaturation\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Saturation\",\n          \"logic\": \"Gets the unsigned saturation state for a specific lane.\"\n        },\n        {\n          \"name\": \"ClearSat\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the saturation state for a specific lane.\"\n        },\n        {\n          \"name\": \"SetSignedSat\",\n          \"parameters\": [\n            \"int index\",\n            \"bool positive\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the signed saturation state for a specific lane based on the sign of the result.\"\n        },\n        {\n          \"name\": \"SetUnsignedSat\",\n          \"parameters\": [\n            \"int index\",\n            \"bool positive\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the unsigned saturation state for a specific lane based on the sign of the result.\"\n        },\n        {\n          \"name\": \"SetSatFlag\",\n          \"parameters\": [\n            \"int index\",\n            \"Saturation sat\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a saturation flag on a specific lane.\"\n        },\n        {\n          \"name\": \"SignedSaturate\",\n          \"parameters\": [\n            \"VectorFormat vform\"\n          ],\n          \"return_type\": \"LogicVRegister&\",\n          \"logic\": \"Saturates the signed lanes of the vector register, replacing values exceeding the maximum or minimum signed value.\"\n        },\n        {\n          \"name\": \"UnsignedSaturate\",\n          \"parameters\": [\n            \"VectorFormat vform\"\n          ],\n          \"return_type\": \"LogicVRegister&\",\n          \"logic\": \"Saturates the unsigned lanes of the vector register, replacing values exceeding the maximum unsigned value or less than 0.\"\n        },\n        {\n          \"name\": \"GetRounding\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Gets the rounding state for a specific lane.\"\n        },\n        {\n          \"name\": \"SetRounding\",\n          \"parameters\": [\n            \"int index\",\n            \"bool round\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the rounding state for a specific lane.\"\n        },\n        {\n          \"name\": \"Round\",\n          \"parameters\": [\n            \"VectorFormat vform\"\n          ],\n          \"return_type\": \"LogicVRegister&\",\n          \"logic\": \"Rounds the lanes of the vector register based on the rounding state.\"\n        },\n        {\n          \"name\": \"Uhalve\",\n          \"parameters\": [\n            \"VectorFormat vform\"\n          ],\n          \"return_type\": \"LogicVRegister&\",\n          \"logic\": \"Unsigned halving the lanes of the vector register, shifting right by 1, and setting top bit if there is unsigned saturation.\"\n        },\n        {\n          \"name\": \"Halve\",\n          \"parameters\": [\n            \"VectorFormat vform\"\n          ],\n          \"return_type\": \"LogicVRegister&\",\n          \"logic\": \"Signed halving the lanes of the vector register, shifting right by 1, and setting carry bit if there is signed saturation.\"\n        },\n        {\n          \"name\": \"Is\",\n          \"parameters\": [\n            \"const LogicVRegister& r\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this LogicVRegister refers to the same SimVRegister as another LogicVRegister.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simulator\",\n      \"properties\": [\n        \"stream_\",\n        \"print_disasm_\",\n        \"registers_\",\n        \"vregisters_\",\n        \"nzcv_\",\n        \"fpcr_\",\n        \"stack_\",\n        \"stack_limit_\",\n        \"decoder_\",\n        \"disassembler_decoder_\",\n        \"pc_modified_\",\n        \"pc_\",\n        \"btype_\",\n        \"breakpoints_\",\n        \"break_on_next_\",\n        \"log_parameters_\",\n        \"guard_pages_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SetRedirectInstruction\",\n          \"parameters\": [\n            \"Instruction* instruction\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Sets a redirect instruction. Placeholder, currently empty.\"\n        },\n        {\n          \"name\": \"ICacheMatch\",\n          \"parameters\": [\n            \"void* one\",\n            \"void* two\"\n          ],\n          \"return_type\": \"static bool\",\n          \"logic\": \"Checks if two objects match. Placeholder, currently always returns false.\"\n        },\n        {\n          \"name\": \"FlushICache\",\n          \"parameters\": [\n            \"base::CustomMatcherHashMap* i_cache\",\n            \"void* start\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Flushes the instruction cache. Placeholder, currently empty.\"\n        },\n        {\n          \"name\": \"Simulator\",\n          \"parameters\": [\n            \"Decoder<DispatchingDecoderVisitor>* decoder\",\n            \"Isolate* isolate\",\n            \"FILE* stream\"\n          ],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Constructor for the Simulator, initializes decoder, isolate and stream.\"\n        },\n        {\n          \"name\": \"Simulator\",\n          \"parameters\": [],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Default constructor for Simulator.\"\n        },\n        {\n          \"name\": \"~Simulator\",\n          \"parameters\": [],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Destructor for Simulator.\"\n        },\n        {\n          \"name\": \"current\",\n          \"parameters\": [\n            \"v8::internal::Isolate* isolate\"\n          ],\n          \"return_type\": \"static Simulator*\",\n          \"logic\": \"Returns the current simulator instance for a given isolate.\"\n        },\n        {\n          \"name\": \"Call\",\n          \"parameters\": [\n            \"Address entry\",\n            \"Args... args\"\n          ],\n          \"return_type\": \"Return\",\n          \"logic\": \"Calls an arbitrary function taking an arbitrary number of arguments and converts all arguments to CallArgument.\"\n        },\n        {\n          \"name\": \"Debug\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts the debugging command line.\"\n        },\n        {\n          \"name\": \"ExecDebugCommand\",\n          \"parameters\": [\n            \"ArrayUniquePtr<char> command\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Executes a single debug command.  Takes ownership of the command, and returns true if the debugger should resume execution.\"\n        },\n        {\n          \"name\": \"GetValue\",\n          \"parameters\": [\n            \"const char* desc\",\n            \"int64_t* value\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Gets a value from a description.\"\n        },\n        {\n          \"name\": \"PrintValue\",\n          \"parameters\": [\n            \"const char* desc\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Prints a value from a description.\"\n        },\n        {\n          \"name\": \"PushAddress\",\n          \"parameters\": [\n            \"uintptr_t address\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Pushes an address onto the JS stack.\"\n        },\n        {\n          \"name\": \"PopAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Pops an address from the JS stack.\"\n        },\n        {\n          \"name\": \"StackLimit\",\n          \"parameters\": [\n            \"uintptr_t c_limit\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Accessor to the internal simulator stack area, adding a safety margin.\"\n        },\n        {\n          \"name\": \"StackBase\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Returns the base of the stack.\"\n        },\n        {\n          \"name\": \"SetStackLimit\",\n          \"parameters\": [\n            \"uintptr_t limit\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the stack limit.\"\n        },\n        {\n          \"name\": \"GetCentralStackView\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Returns central stack view, without additional safety margins.\"\n        },\n        {\n          \"name\": \"IterateRegistersAndStack\",\n          \"parameters\": [\n            \"::heap::base::StackVisitor* visitor\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates registers and stack.\"\n        },\n        {\n          \"name\": \"ResetState\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the state of the simulator.\"\n        },\n        {\n          \"name\": \"DoRuntimeCall\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs a runtime call.\"\n        },\n        {\n          \"name\": \"DecodeInstruction\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Decodes the instruction at the current program counter.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs the simulator, starting from the current program counter.\"\n        },\n        {\n          \"name\": \"RunFrom\",\n          \"parameters\": [\n            \"Instruction* start\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs the simulator, starting from the specified address.\"\n        },\n        {\n          \"name\": \"set_pc\",\n          \"parameters\": [\n            \"T new_pc\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the program counter to a new value.\"\n        },\n        {\n          \"name\": \"pc\",\n          \"parameters\": [],\n          \"return_type\": \"Instruction*\",\n          \"logic\": \"Returns the current program counter.\"\n        },\n        {\n          \"name\": \"increment_pc\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Increments the program counter.\"\n        },\n        {\n          \"name\": \"Decode\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Decodes an instruction using the decoder.\"\n        },\n        {\n          \"name\": \"btype\",\n          \"parameters\": [],\n          \"return_type\": \"BType\",\n          \"logic\": \"Returns the current branch type.\"\n        },\n        {\n          \"name\": \"ResetBType\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the branch type to the default value.\"\n        },\n        {\n          \"name\": \"set_btype\",\n          \"parameters\": [\n            \"BType btype\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the branch type.\"\n        },\n        {\n          \"name\": \"GetBTypeFromInstruction\",\n          \"parameters\": [\n            \"const Instruction* instr\"\n          ],\n          \"return_type\": \"BType\",\n          \"logic\": \"Helper function to determine BType for branches.\"\n        },\n        {\n          \"name\": \"PcIsInGuardedPage\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the current program counter is in a guarded page.\"\n        },\n        {\n          \"name\": \"SetGuardedPages\",\n          \"parameters\": [\n            \"bool guard_pages\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets whether to enable guarded pages.\"\n        },\n        {\n          \"name\": \"CheckBTypeForPAuth\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks Branch Type requirements for pointer authentication\"\n        },\n        {\n          \"name\": \"CheckBTypeForBti\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks Branch Type requirements for Branch Target Identification\"\n        },\n        {\n          \"name\": \"CheckBType\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks branch target identification conditions and raises an error if violated.\"\n        },\n        {\n          \"name\": \"ExecuteInstruction\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes a single instruction at the current program counter.\"\n        },\n        {\n          \"name\": \"Visit[InstructionType]\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Virtual visitor function for specific instruction types. (Declared using macros).\"\n        },\n        {\n          \"name\": \"VisitNEON3SameFP\",\n          \"parameters\": [\n            \"NEON3SameOp op\",\n            \"VectorFormat vf\",\n            \"SimVRegister& rd\",\n            \"SimVRegister& rn\",\n            \"SimVRegister& rm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Helper method to handle Neon3SameOp instructions.\"\n        },\n        {\n          \"name\": \"IsZeroRegister\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a register code represents the zero register, considering Reg31Mode.\"\n        },\n        {\n          \"name\": \"reg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Returns the value of a general-purpose register, zero-extending if necessary.  Considers Reg31Mode.\"\n        },\n        {\n          \"name\": \"wreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the value of a 32-bit general-purpose register, considering Reg31Mode.\"\n        },\n        {\n          \"name\": \"xreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the value of a 64-bit general-purpose register, considering Reg31Mode.\"\n        },\n        {\n          \"name\": \"set_reg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"T value\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a general-purpose register, zero-extending if necessary. Logs register update.\"\n        },\n        {\n          \"name\": \"set_wreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"int32_t value\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a 32-bit general-purpose register. Logs register update.\"\n        },\n        {\n          \"name\": \"set_xreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"int64_t value\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a 64-bit general-purpose register. Logs register update.\"\n        },\n        {\n          \"name\": \"set_reg_no_log\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"T value\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a general-purpose register, zero-extending if necessary, without logging the update.\"\n        },\n        {\n          \"name\": \"set_wreg_no_log\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"int32_t value\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a 32-bit general-purpose register, without logging the update.\"\n        },\n        {\n          \"name\": \"set_xreg_no_log\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"int64_t value\",\n            \"Reg31Mode r31mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of a 64-bit general-purpose register, without logging the update.\"\n        },\n        {\n          \"name\": \"set_lr\",\n          \"parameters\": [\n            \"T value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the link register.\"\n        },\n        {\n          \"name\": \"set_sp\",\n          \"parameters\": [\n            \"T value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the stack pointer.\"\n        },\n        {\n          \"name\": \"vreg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Basic accessor: read the register as the specified type\"\n        },\n        {\n          \"name\": \"vreg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"inline SimVRegister&\",\n          \"logic\": \"Returns a vector register.\"\n        },\n        {\n          \"name\": \"sp\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the stack pointer.\"\n        },\n        {\n          \"name\": \"fp\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the frame pointer.\"\n        },\n        {\n          \"name\": \"lr\",\n          \"parameters\": [],\n          \"return_type\": \"Instruction*\",\n          \"logic\": \"Returns the link register.\"\n        },\n        {\n          \"name\": \"get_sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the stack pointer address.\"\n        },\n        {\n          \"name\": \"breg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"uint8_t\",\n          \"logic\": \"Returns a byte from the vector register.\"\n        },\n        {\n          \"name\": \"hreg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns a half-precision float (uint16_t, reinterpreted as float) from the vector register.\"\n        },\n        {\n          \"name\": \"sreg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns a single-precision float from the vector register.\"\n        },\n        {\n          \"name\": \"sreg_bits\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns single-precision bits.\"\n        },\n        {\n          \"name\": \"dreg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns a double-precision float from the vector register.\"\n        },\n        {\n          \"name\": \"dreg_bits\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the bits of a double.\"\n        },\n        {\n          \"name\": \"qreg\",\n          \"parameters\": [\n            \"unsigned code\"\n          ],\n          \"return_type\": \"qreg_t\",\n          \"logic\": \"Returns a Q register.\"\n        },\n        {\n          \"name\": \"vreg\",\n          \"parameters\": [\n            \"unsigned size\",\n            \"unsigned code\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Returns a vector register element of given size.\"\n        },\n        {\n          \"name\": \"set_vreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"T value\",\n            \"RegLogMode log_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes value into float reg, matches AArch64 register write and logs.\"\n        },\n        {\n          \"name\": \"set_breg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"int8_t value\",\n            \"RegLogMode log_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes int8 value into float reg, matches AArch64 register write and logs.\"\n        },\n        {\n          \"name\": \"set_hreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"int16_t value\",\n            \"RegLogMode log_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes int16 value into float reg, matches AArch64 register write and logs.\"\n        },\n        {\n          \"name\": \"set_sreg\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"float value\",\n            \"RegLogMode log_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes float value into float reg, matches AArch64 register write and logs.\"\n        },\n         {\n          \"name\": \"set_sreg_bits\",\n          \"parameters\": [\n            \"unsigned code\",\n            \"uint32_t value\",\n            \"RegLogMode log_mode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes float bits value into float reg, matches AArch64 register write and logs.\"\n        },\n        {\n          \"name\": \"set_dreg\",\n          "
}