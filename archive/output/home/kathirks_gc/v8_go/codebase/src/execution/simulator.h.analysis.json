{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/simulator.h",
  "imports": [
    "src/common/globals.h",
    "src/objects/code.h",
    "src/base/platform/platform.h",
    "src/execution/isolate.h",
    "src/utils/utils.h",
    "src/execution/arm64/simulator-arm64.h",
    "src/execution/arm/simulator-arm.h",
    "src/execution/ppc/simulator-ppc.h",
    "src/execution/mips64/simulator-mips64.h",
    "src/execution/loong64/simulator-loong64.h",
    "src/execution/s390/simulator-s390.h",
    "src/execution/riscv/simulator-riscv.h"
  ],
  "classes": [
    {
      "name": "SimulatorStack",
      "properties": [],
      "methods": [
        {
          "name": "JsLimitFromCLimit",
          "parameters": [
            "v8::internal::Isolate* isolate",
            "uintptr_t c_limit"
          ],
          "return_type": "uintptr_t",
          "logic": "Calculates the JavaScript stack limit based on the C stack limit when using the simulator. Returns the C stack limit directly when not using a simulator."
        },
        {
          "name": "GetCentralStackView",
          "parameters": [
            "v8::internal::Isolate* isolate"
          ],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns a view of the central stack, used by WebAssembly.  When the simulator is active it delegates to the simulator, otherwise calculates a stack view based on the system."
        },
        {
          "name": "IterateRegistersAndStack",
          "parameters": [
            "Isolate* isolate",
            "::heap::base::StackVisitor* visitor"
          ],
          "return_type": "void",
          "logic": "Iterates the simulator registers and stack for conservative stack scanning when using the simulator. Does nothing when not using the simulator."
        },
        {
          "name": "ShouldSwitchCStackForWasmStackSwitching",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if the C stack should be switched when switching WebAssembly stacks. Returns false when using the simulator, true otherwise."
        },
        {
          "name": "RegisterJSStackComparableAddress",
          "parameters": [
            "v8::internal::Isolate* isolate"
          ],
          "return_type": "uintptr_t",
          "logic": "Registers a JS stack address that's comparable on the native stack. When using a simulator, it pushes a placeholder address to the simulator stack. When not using a simulator, it returns current stack position."
        },
        {
          "name": "UnregisterJSStackComparableAddress",
          "parameters": [
            "v8::internal::Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Unregisters the JS stack address. When using a simulator, it pops an address from the simulator stack. When not using a simulator, it does nothing."
        }
      ]
    },
    {
      "name": "GeneratedCode",
      "properties": [
        "Isolate* isolate_",
        "Signature* fn_ptr_"
      ],
      "methods": [
        {
          "name": "FromAddress",
          "parameters": [
            "Isolate* isolate",
            "Address addr"
          ],
          "return_type": "GeneratedCode",
          "logic": "Creates a GeneratedCode object from a given address."
        },
        {
          "name": "FromBuffer",
          "parameters": [
            "Isolate* isolate",
            "uint8_t* buffer"
          ],
          "return_type": "GeneratedCode",
          "logic": "Creates a GeneratedCode object from a buffer."
        },
        {
          "name": "FromCode",
          "parameters": [
            "Isolate* isolate",
            "Tagged<Code> code"
          ],
          "return_type": "GeneratedCode",
          "logic": "Creates a GeneratedCode object from a Code object."
        },
        {
          "name": "Call",
          "parameters": [
            "Args... args"
          ],
          "return_type": "Return",
          "logic": "Calls the generated code. When using the simulator, it uses the simulator's call function. When not using the simulator, it calls the function pointer directly, accounting for function descriptors where necessary."
        }
      ]
    }
  ],
  "functions": []
}