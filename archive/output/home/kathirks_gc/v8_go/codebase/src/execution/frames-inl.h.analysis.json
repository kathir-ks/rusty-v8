{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/frames-inl.h",
  "imports": [
    "<optional>",
    "src/base/memory.h",
    "src/execution/frame-constants.h",
    "src/execution/frames.h",
    "src/execution/isolate.h",
    "src/execution/pointer-authentication.h",
    "src/objects/objects-inl.h"
  ],
  "classes": [
    {
      "name": "InnerPointerToCodeCache",
      "properties": [
        "isolate_",
        "kInnerPointerToCodeCacheSize",
        "cache_"
      ],
      "methods": [
        {
          "name": "InnerPointerToCodeCache",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for InnerPointerToCodeCache. Takes an Isolate pointer and initializes the cache by calling Flush()."
        },
        {
          "name": "Flush",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the cache by setting all entries to zero using memset."
        },
        {
          "name": "GetCacheEntry",
          "parameters": [
            "Address inner_pointer"
          ],
          "return_type": "InnerPointerToCodeCacheEntry*",
          "logic": "Retrieves the appropriate cache entry given an inner pointer. (Implementation not provided)"
        },
        {
          "name": "cache",
          "parameters": [
            "int index"
          ],
          "return_type": "InnerPointerToCodeCacheEntry*",
          "logic": "Returns a pointer to the cache entry at the given index."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "StackHandler::address",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns the address of the StackHandler object itself."
    },
    {
      "name": "StackHandler::next",
      "parameters": [],
      "return_type": "StackHandler*",
      "logic": "Returns a pointer to the next StackHandler in the stack handler chain. Calculates the address using StackHandlerConstants::kNextOffset."
    },
    {
      "name": "StackHandler::next_address",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns the address of the next StackHandler in the stack handler chain. Calculates the address using StackHandlerConstants::kNextOffset."
    },
    {
      "name": "StackHandler::FromAddress",
      "parameters": [
        "Address address"
      ],
      "return_type": "StackHandler*",
      "logic": "Converts an address to a StackHandler pointer."
    },
    {
      "name": "StackFrame::StackFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for StackFrame. Takes a StackFrameIteratorBase and initializes the iterator_ and isolate_ members."
    },
    {
      "name": "StackFrame::top_handler",
      "parameters": [],
      "return_type": "StackHandler*",
      "logic": "Returns the top handler from the iterator."
    },
    {
      "name": "StackFrame::pc",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns the program counter (PC) value by reading the pc address and authenticating it using `ReadPC`."
    },
    {
      "name": "StackFrame::unauthenticated_pc",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns the unauthenticated program counter (PC) value by reading the pc address and stripping the PAC."
    },
    {
      "name": "StackFrame::unauthenticated_pc",
      "parameters": [
        "Address* pc_address"
      ],
      "return_type": "Address",
      "logic": "Removes pointer authentication code (PAC) from the provided PC address."
    },
    {
      "name": "StackFrame::maybe_unauthenticated_pc",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns potentially unauthenticated PC value. If in fast call, profiler entry or stack exit frames, return unauthenticated PC, else return the authenticated PC."
    },
    {
      "name": "StackFrame::ReadPC",
      "parameters": [
        "Address* pc_address"
      ],
      "return_type": "Address",
      "logic": "Authenticates the given PC address using PointerAuthentication::AuthenticatePC."
    },
    {
      "name": "StackFrame::ResolveReturnAddressLocation",
      "parameters": [
        "Address* pc_address"
      ],
      "return_type": "Address*",
      "logic": "Resolves the return address location, or returns the original pc_address if no resolver is set"
    },
    {
      "name": "TypedFrame::TypedFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for TypedFrame. Calls the CommonFrame constructor with the same iterator."
    },
    {
      "name": "CommonFrameWithJSLinkage::CommonFrameWithJSLinkage",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for CommonFrameWithJSLinkage. Calls the CommonFrame constructor with the same iterator."
    },
    {
      "name": "TypedFrameWithJSLinkage::TypedFrameWithJSLinkage",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for TypedFrameWithJSLinkage. Calls the CommonFrameWithJSLinkage constructor with the same iterator."
    },
    {
      "name": "NativeFrame::NativeFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for NativeFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "EntryFrame::EntryFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for EntryFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "ConstructEntryFrame::ConstructEntryFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for ConstructEntryFrame. Calls the EntryFrame constructor with the same iterator."
    },
    {
      "name": "ExitFrame::ExitFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for ExitFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "BuiltinExitFrame::BuiltinExitFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for BuiltinExitFrame. Calls the ExitFrame constructor with the same iterator."
    },
    {
      "name": "BuiltinExitFrame::receiver_slot_object",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the receiver object stored in the frame."
    },
    {
      "name": "BuiltinExitFrame::argc_slot_object",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the argument count object stored in the frame."
    },
    {
      "name": "BuiltinExitFrame::target_slot_object",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the target object (JSFunction) stored in the frame."
    },
    {
      "name": "BuiltinExitFrame::new_target_slot_object",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the new target object stored in the frame."
    },
    {
      "name": "ApiCallbackExitFrame::ApiCallbackExitFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for ApiCallbackExitFrame. Calls the ExitFrame constructor with the same iterator."
    },
    {
      "name": "ApiCallbackExitFrame::context",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the context stored in the frame."
    },
    {
      "name": "ApiCallbackExitFrame::target_slot",
      "parameters": [],
      "return_type": "FullObjectSlot",
      "logic": "Returns the FullObjectSlot where the target function is stored."
    },
    {
      "name": "ApiCallbackExitFrame::receiver",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the receiver object stored in the frame."
    },
    {
      "name": "ApiCallbackExitFrame::target",
      "parameters": [],
      "return_type": "Tagged<HeapObject>",
      "logic": "Returns the target function (JSFunction or FunctionTemplateInfo) stored in the frame."
    },
    {
      "name": "ApiCallbackExitFrame::set_target",
      "parameters": [
        "Tagged<HeapObject> function"
      ],
      "return_type": "void",
      "logic": "Sets the target function (JSFunction or FunctionTemplateInfo) in the frame."
    },
    {
      "name": "ApiCallbackExitFrame::ComputeParametersCount",
      "parameters": [],
      "return_type": "int",
      "logic": "Computes the number of parameters passed to the API callback function."
    },
    {
      "name": "ApiCallbackExitFrame::GetParameter",
      "parameters": [
        "int i"
      ],
      "return_type": "Tagged<Object>",
      "logic": "Retrieves the parameter at the given index passed to the API callback function."
    },
    {
      "name": "ApiCallbackExitFrame::IsConstructor",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if the API callback was called as a constructor (i.e., with 'new')."
    },
    {
      "name": "ApiAccessorExitFrame::ApiAccessorExitFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for ApiAccessorExitFrame. Calls the ExitFrame constructor with the same iterator."
    },
    {
      "name": "ApiAccessorExitFrame::property_name_slot",
      "parameters": [],
      "return_type": "FullObjectSlot",
      "logic": "Returns the FullObjectSlot where the property name is stored."
    },
    {
      "name": "ApiAccessorExitFrame::receiver_slot",
      "parameters": [],
      "return_type": "FullObjectSlot",
      "logic": "Returns the FullObjectSlot where the receiver object is stored."
    },
    {
      "name": "ApiAccessorExitFrame::holder_slot",
      "parameters": [],
      "return_type": "FullObjectSlot",
      "logic": "Returns the FullObjectSlot where the holder object is stored."
    },
    {
      "name": "ApiAccessorExitFrame::property_name",
      "parameters": [],
      "return_type": "Tagged<Name>",
      "logic": "Returns the property name accessed by the API accessor."
    },
    {
      "name": "ApiAccessorExitFrame::receiver",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the receiver object for the API accessor."
    },
    {
      "name": "ApiAccessorExitFrame::holder",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the holder object for the API accessor."
    },
    {
      "name": "CommonFrame::CommonFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for CommonFrame. Calls the StackFrame constructor with the same iterator."
    },
    {
      "name": "CommonFrame::GetExpression",
      "parameters": [
        "int index"
      ],
      "return_type": "Tagged<Object>",
      "logic": "Returns the expression value at the given index."
    },
    {
      "name": "CommonFrame::SetExpression",
      "parameters": [
        "int index",
        "Tagged<Object> value"
      ],
      "return_type": "void",
      "logic": "Sets the expression value at the given index."
    },
    {
      "name": "CommonFrame::caller_fp",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns the frame pointer (FP) of the caller frame."
    },
    {
      "name": "CommonFrame::caller_pc",
      "parameters": [],
      "return_type": "Address",
      "logic": "Returns the program counter (PC) of the caller frame."
    },
    {
      "name": "CommonFrameWithJSLinkage::IsConstructFrame",
      "parameters": [
        "Address fp"
      ],
      "return_type": "bool",
      "logic": "Checks if a frame pointer is a constructor frame based on the frame type."
    },
    {
      "name": "JavaScriptFrame::JavaScriptFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for JavaScriptFrame. Calls the CommonFrameWithJSLinkage constructor with the same iterator."
    },
    {
      "name": "CommonFrameWithJSLinkage::GetParameterSlot",
      "parameters": [
        "int index"
      ],
      "return_type": "Address",
      "logic": "Computes the address of the parameter slot for the given index"
    },
    {
      "name": "CommonFrameWithJSLinkage::GetActualArgumentCount",
      "parameters": [],
      "return_type": "int",
      "logic": "Returns the number of actual arguments passed to the function. Always returns 0 in CommonFrameWithJSLinkage."
    },
    {
      "name": "JavaScriptFrame::set_receiver",
      "parameters": [
        "Tagged<Object> value"
      ],
      "return_type": "void",
      "logic": "Sets the receiver object for the JavaScript frame."
    },
    {
      "name": "UnoptimizedJSFrame::SetFeedbackVector",
      "parameters": [
        "Tagged<FeedbackVector> feedback_vector"
      ],
      "return_type": "void",
      "logic": "Sets the feedback vector for the unoptimized JavaScript frame."
    },
    {
      "name": "JavaScriptFrame::function_slot_object",
      "parameters": [],
      "return_type": "Tagged<Object>",
      "logic": "Returns the object in function slot."
    },
    {
      "name": "TurbofanStubWithContextFrame::TurbofanStubWithContextFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for TurbofanStubWithContextFrame. Calls the CommonFrame constructor with the same iterator."
    },
    {
      "name": "StubFrame::StubFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for StubFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "OptimizedJSFrame::OptimizedJSFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for OptimizedJSFrame. Calls the JavaScriptFrame constructor with the same iterator."
    },
    {
      "name": "UnoptimizedJSFrame::UnoptimizedJSFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for UnoptimizedJSFrame. Calls the JavaScriptFrame constructor with the same iterator."
    },
    {
      "name": "InterpretedFrame::InterpretedFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for InterpretedFrame. Calls the UnoptimizedJSFrame constructor with the same iterator."
    },
    {
      "name": "BaselineFrame::BaselineFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for BaselineFrame. Calls the UnoptimizedJSFrame constructor with the same iterator."
    },
    {
      "name": "MaglevFrame::MaglevFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for MaglevFrame. Calls the OptimizedJSFrame constructor with the same iterator."
    },
    {
      "name": "TurbofanJSFrame::TurbofanJSFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for TurbofanJSFrame. Calls the OptimizedJSFrame constructor with the same iterator."
    },
    {
      "name": "BuiltinFrame::BuiltinFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for BuiltinFrame. Calls the TypedFrameWithJSLinkage constructor with the same iterator."
    },
    {
      "name": "WasmFrame::WasmFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "WasmSegmentStartFrame::WasmSegmentStartFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmSegmentStartFrame. Calls the WasmFrame constructor with the same iterator."
    },
    {
      "name": "WasmExitFrame::WasmExitFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmExitFrame. Calls the WasmFrame constructor with the same iterator."
    },
    {
      "name": "WasmInterpreterEntryFrame::WasmInterpreterEntryFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmInterpreterEntryFrame. Calls the WasmFrame constructor with the same iterator."
    },
    {
      "name": "WasmDebugBreakFrame::WasmDebugBreakFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmDebugBreakFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "WasmToJsFrame::WasmToJsFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmToJsFrame. Calls the WasmFrame constructor with the same iterator."
    },
    {
      "name": "WasmToJsFunctionFrame::WasmToJsFunctionFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmToJsFunctionFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "JsToWasmFrame::JsToWasmFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for JsToWasmFrame. Calls the StubFrame constructor with the same iterator."
    },
    {
      "name": "StackSwitchFrame::StackSwitchFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for StackSwitchFrame. Calls the ExitFrame constructor with the same iterator."
    },
    {
      "name": "CWasmEntryFrame::CWasmEntryFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for CWasmEntryFrame. Calls the StubFrame constructor with the same iterator."
    },
    {
      "name": "WasmLiftoffSetupFrame::WasmLiftoffSetupFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for WasmLiftoffSetupFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "InternalFrame::InternalFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for InternalFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "ConstructFrame::ConstructFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for ConstructFrame. Calls the InternalFrame constructor with the same iterator."
    },
    {
      "name": "FastConstructFrame::FastConstructFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for FastConstructFrame. Calls the InternalFrame constructor with the same iterator."
    },
    {
      "name": "BuiltinContinuationFrame::BuiltinContinuationFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for BuiltinContinuationFrame. Calls the InternalFrame constructor with the same iterator."
    },
    {
      "name": "JavaScriptBuiltinContinuationFrame::JavaScriptBuiltinContinuationFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for JavaScriptBuiltinContinuationFrame. Calls the TypedFrameWithJSLinkage constructor with the same iterator."
    },
    {
      "name": "JavaScriptBuiltinContinuationWithCatchFrame::JavaScriptBuiltinContinuationWithCatchFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for JavaScriptBuiltinContinuationWithCatchFrame. Calls the JavaScriptBuiltinContinuationFrame constructor with the same iterator."
    },
    {
      "name": "IrregexpFrame::IrregexpFrame",
      "parameters": [
        "StackFrameIteratorBase* iterator"
      ],
      "return_type": "void",
      "logic": "Constructor for IrregexpFrame. Calls the TypedFrame constructor with the same iterator."
    },
    {
      "name": "DebuggableStackFrameIterator::frame",
      "parameters": [],
      "return_type": "CommonFrame*",
      "logic": "Returns the current frame of the iterator, cast to a CommonFrame*."
    },
    {
      "name": "DebuggableStackFrameIterator::Reframe",
      "parameters": [],
      "return_type": "CommonFrame*",
      "logic": "Re-frames the iterator and returns the new frame."
    },
    {
      "name": "DebuggableStackFrameIterator::is_javascript",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if the current frame is a JavaScript frame."
    },
    {
      "name": "DebuggableStackFrameIterator::is_wasm",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if the current frame is a WebAssembly frame."
    },
    {
      "name": "DebuggableStackFrameIterator::is_wasm_interpreter_entry",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if the current frame is a Wasm Interpreter entry frame."
    },
    {
      "name": "DebuggableStackFrameIterator::javascript_frame",
      "parameters": [],
      "return_type": "JavaScriptFrame*",
      "logic": "Returns the current frame as a JavaScriptFrame*."
    },
    {
      "name": "StackFrameIteratorForProfiler::IsValidFrameType",
      "parameters": [
        "StackFrame::Type type"
      ],
      "return_type": "bool",
      "logic": "Checks if the given frame type is a valid frame type for profiling."
    },
    {
      "name": "StackFrameIteratorForProfiler::frame",
      "parameters": [],
      "return_type": "StackFrame*",
      "logic": "Returns the current frame."
    }
  ]
}