{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/isolate.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/isolate.cc\",\n  \"imports\": [\n    \"src/execution/isolate.h\",\n    \"<stdlib.h>\",\n    \"<atomic>\",\n    \"<cinttypes>\",\n    \"<cstdint>\",\n    \"<fstream>\",\n    \"<memory>\",\n    \"<optional>\",\n    \"<sstream>\",\n    \"<string>\",\n    \"<unordered_map>\",\n    \"<utility>\",\n    \"include/v8-template.h\",\n    \"src/api/api-arguments-inl.h\",\n    \"src/api/api-inl.h\",\n    \"src/ast/ast-value-factory.h\",\n    \"src/ast/scopes.h\",\n    \"src/base/fpu.h\",\n    \"src/base/hashmap.h\",\n    \"src/base/logging.h\",\n    \"src/base/platform/mutex.h\",\n    \"src/base/platform/platform.h\",\n    \"src/base/platform/wrappers.h\",\n    \"src/base/sys-info.h\",\n    \"src/base/utils/random-number-generator.h\",\n    \"src/baseline/baseline-batch-compiler.h\",\n    \"src/bigint/bigint.h\",\n    \"src/builtins/builtins-promise.h\",\n    \"src/builtins/builtins.h\",\n    \"src/builtins/constants-table-builder.h\",\n    \"src/codegen/assembler-inl.h\",\n    \"src/codegen/compilation-cache.h\",\n    \"src/codegen/flush-instruction-cache.h\",\n    \"src/common/assert-scope.h\",\n    \"src/common/globals.h\",\n    \"src/common/ptr-compr-inl.h\",\n    \"src/common/thread-local-storage.h\",\n    \"src/compiler-dispatcher/lazy-compile-dispatcher.h\",\n    \"src/compiler-dispatcher/optimizing-compile-dispatcher.h\",\n    \"src/date/date.h\",\n    \"src/debug/debug-frames.h\",\n    \"src/debug/debug.h\",\n    \"src/deoptimizer/deoptimizer.h\",\n    \"src/deoptimizer/materialized-object-store.h\",\n    \"src/diagnostics/basic-block-profiler.h\",\n    \"src/diagnostics/compilation-statistics.h\",\n    \"src/execution/frames-inl.h\",\n    \"src/execution/frames.h\",\n    \"src/execution/isolate-inl.h\",\n    \"src/execution/local-isolate.h\",\n    \"src/execution/messages.h\",\n    \"src/execution/microtask-queue.h\",\n    \"src/execution/protectors-inl.h\",\n    \"src/execution/simulator.h\",\n    \"src/execution/tiering-manager.h\",\n    \"src/execution/v8threads.h\",\n    \"src/execution/vm-state-inl.h\",\n    \"src/flags/flags.h\",\n    \"src/handles/global-handles-inl.h\",\n    \"src/handles/persistent-handles.h\",\n    \"src/heap/heap-inl.h\",\n    \"src/heap/heap-verifier.h\",\n    \"src/heap/local-heap-inl.h\",\n    \"src/heap/parked-scope.h\",\n    \"src/heap/read-only-heap.h\",\n    \"src/heap/safepoint.h\",\n    \"src/ic/stub-cache.h\",\n    \"src/init/bootstrapper.h\",\n    \"src/init/setup-isolate.h\",\n    \"src/init/v8.h\",\n    \"src/interpreter/bytecode-array-iterator.h\",\n    \"src/interpreter/bytecodes.h\",\n    \"src/interpreter/interpreter.h\",\n    \"src/libsampler/sampler.h\",\n    \"src/logging/counters.h\",\n    \"src/logging/log.h\",\n    \"src/logging/metrics.h\",\n    \"src/logging/runtime-call-stats-scope.h\",\n    \"src/numbers/hash-seed-inl.h\",\n    \"src/objects/backing-store.h\",\n    \"src/objects/call-site-info-inl.h\",\n    \"src/objects/call-site-info.h\",\n    \"src/objects/elements.h\",\n    \"src/objects/feedback-vector.h\",\n    \"src/objects/hash-table-inl.h\",\n    \"src/objects/instance-type-inl.h\",\n    \"src/objects/js-array-buffer-inl.h\",\n    \"src/objects/js-array-inl.h\",\n    \"src/objects/js-atomics-synchronization-inl.h\",\n    \"src/objects/js-function.h\",\n    \"src/objects/js-generator-inl.h\",\n    \"src/objects/js-struct-inl.h\",\n    \"src/objects/js-weak-refs-inl.h\",\n    \"src/objects/managed-inl.h\",\n    \"src/objects/module-inl.h\",\n    \"src/objects/promise-inl.h\",\n    \"src/objects/property-descriptor.h\",\n    \"src/objects/prototype.h\",\n    \"src/objects/slots.h\",\n    \"src/objects/smi.h\",\n    \"src/objects/source-text-module-inl.h\",\n    \"src/objects/string-set-inl.h\",\n    \"src/objects/visitors.h\",\n    \"src/objects/waiter-queue-node.h\",\n    \"src/profiler/heap-profiler.h\",\n    \"src/profiler/tracing-cpu-profiler.h\",\n    \"src/regexp/regexp-stack.h\",\n    \"src/roots/roots.h\",\n    \"src/roots/static-roots.h\",\n    \"src/sandbox/js-dispatch-table-inl.h\",\n    \"src/snapshot/embedded/embedded-data-inl.h\",\n    \"src/snapshot/embedded/embedded-file-writer-interface.h\",\n    \"src/snapshot/read-only-deserializer.h\",\n    \"src/snapshot/shared-heap-deserializer.h\",\n    \"src/snapshot/snapshot.h\",\n    \"src/snapshot/startup-deserializer.h\",\n    \"src/strings/string-builder-inl.h\",\n    \"src/strings/string-stream.h\",\n    \"src/tasks/cancelable-task.h\",\n    \"src/tracing/perfetto-logger.h\",\n    \"src/tracing/tracing-category-observer.h\",\n    \"src/utils/address-map.h\",\n    \"src/utils/ostreams.h\",\n    \"src/utils/version.h\",\n    \"src/zone/accounting-allocator.h\",\n    \"src/zone/type-stats.h\",\n    \"src/objects/intl-objects.h\",\n    \"unicode/locid.h\",\n    \"unicode/uobject.h\",\n    \"src/maglev/maglev-concurrent-dispatcher.h\",\n    \"src/builtins/builtins-inl.h\",\n    \"src/debug/debug-wasm-objects.h\",\n    \"src/trap-handler/trap-handler.h\",\n    \"src/wasm/stacks.h\",\n    \"src/wasm/wasm-code-manager.h\",\n    \"src/wasm/wasm-code-pointer-table-inl.h\",\n    \"src/wasm/wasm-engine.h\",\n    \"src/wasm/wasm-module.h\",\n    \"src/wasm/wasm-objects.h\",\n    \"src/wasm/interpreter/wasm-interpreter.h\",\n    \"src/diagnostics/etw-jit-win.h\",\n    \"src/diagnostics/unwinding-info-win64.h\",\n    \"src/execution/simulator-base.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CallSiteBuilder\",\n      \"properties\": [\n        \"isolate_\",\n        \"mode_\",\n        \"index_\",\n        \"limit_\",\n        \"caller_\",\n        \"skip_next_frame_\",\n        \"skipped_prev_frame_\",\n        \"encountered_strict_function_\",\n        \"elements_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallSiteBuilder\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"FrameSkipMode mode\",\n            \"int limit\",\n            \"Handle<Object> caller\"\n          ],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Constructor for the CallSiteBuilder class. Initializes the object's state and allocates a FixedArray to store call site information.\"\n        },\n        {\n          \"name\": \"SetPrevFrameAsConstructCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the kIsConstructor flag in the CallSiteInfo object for the previous frame if it exists.\"\n        },\n        {\n          \"name\": \"Visit\",\n          \"parameters\": [\"FrameSummary const& summary\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines the type of frame from the FrameSummary and dispatches to the appropriate AppendFrame method (AppendWasmFrame, AppendJavaScriptFrame, etc.). Returns false if the limit has been reached.\"\n        },\n        {\n          \"name\": \"AppendAsyncFrame\",\n          \"parameters\": [\"DirectHandle<JSGeneratorObject> generator_object\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for an async function frame, extracting details from the provided JSGeneratorObject.\"\n        },\n        {\n          \"name\": \"AppendPromiseCombinatorFrame\",\n          \"parameters\": [\n            \"DirectHandle<JSFunction> element_function\",\n            \"DirectHandle<JSFunction> combinator\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for a Promise combinator (e.g., Promise.all) frame, extracting details from the provided JSFunctions.\"\n        },\n        {\n          \"name\": \"AppendJavaScriptFrame\",\n          \"parameters\": [\"FrameSummary::JavaScriptFrameSummary const& summary\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for a JavaScript frame, extracting details from the provided JavaScriptFrameSummary.\"\n        },\n        {\n          \"name\": \"AppendWasmFrame\",\n          \"parameters\": [\"FrameSummary::WasmFrameSummary const& summary\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for a WebAssembly frame, extracting details from the provided WasmFrameSummary.\"\n        },\n        {\n          \"name\": \"AppendWasmInterpretedFrame\",\n          \"parameters\": [\"FrameSummary::WasmInterpretedFrameSummary const& summary\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for a WebAssembly frame running in the interpreter. \"\n        },\n        {\n          \"name\": \"AppendWasmInlinedFrame\",\n          \"parameters\": [\"FrameSummary::WasmInlinedFrameSummary const& summary\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for an inlined WebAssembly frame.\"\n        },\n        {\n          \"name\": \"AppendBuiltinFrame\",\n          \"parameters\": [\"FrameSummary::BuiltinFrameSummary const& summary\"],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends call site information for a builtin function frame, extracting details from the provided BuiltinFrameSummary.\"\n        },\n        {\n          \"name\": \"Full\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the call site limit has been reached.\"\n        },\n        {\n          \"name\": \"Build\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<FixedArray>\",\n          \"logic\": \"Builds and returns the FixedArray containing the collected call site information. Trims unused space if needed.\"\n        },\n        {\n          \"name\": \"IsStrictFrame\",\n          \"parameters\": [\"DirectHandle<JSFunction> function\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a frame is running in strict mode.\"\n        },\n        {\n          \"name\": \"IsVisibleInStackTrace\",\n          \"parameters\": [\"DirectHandle<JSFunction> function\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines whether the given stack frame should be displayed in a stack trace, based on whether the frame should be included and whether the given function is not hidden.\"\n        },\n        {\n          \"name\": \"ShouldIncludeFrame\",\n          \"parameters\": [\"DirectHandle<JSFunction> function\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"This mechanism excludes a number of uninteresting frames from the stack trace.\"\n        },\n        {\n          \"name\": \"IsNotHidden\",\n          \"parameters\": [\"DirectHandle<JSFunction> function\"],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a function frame should be hidden from stack traces.\"\n        },\n        {\n          \"name\": \"AppendFrame\",\n          \"parameters\": [\n            \"DirectHandle<UnionOf<JSAny, Hole>> receiver_or_instance\",\n            \"DirectHandle<UnionOf<Smi, JSFunction>> function\",\n            \"DirectHandle<HeapObject> code\",\n            \"int offset\",\n            \"int flags\",\n            \"DirectHandle<FixedArray> parameters\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends the data required of call site info, setting the receiver, JS function, the code, offset, flags, and parameters.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackTraceFailureMessage\",\n      \"properties\": [\n        \"isolate_\",\n        \"ptr1_\",\n        \"ptr2_\",\n        \"ptr3_\",\n        \"ptr4_\",\n        \"ptr5_\",\n        \"ptr6_\",\n        \"js_stack_trace_\",\n        \"code_objects_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Print\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the details of this failure message object, including its own address to force stack allocation.\"\n        },\n        {\n          \"name\": \"StackTraceFailureMessage\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"StackTraceFailureMessage::StackTraceMode mode\",\n            \"void* ptr1\",\n            \"void* ptr2\",\n            \"void* ptr3\",\n            \"void* ptr4\",\n            \"void* ptr5\",\n            \"void* ptr6\"\n          ],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Constructor for the StackTraceFailureMessage class that initializes member variables, and captures a stack trace into a buffer if necessary.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrameBuilder\",\n      \"properties\": [\n        \"isolate_\",\n        \"frames_\",\n        \"index_\",\n        \"limit_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StackFrameBuilder\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int limit\"\n          ],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Initializes a new StackFrameBuilder instance with the given Isolate and limit.\"\n        },\n        {\n          \"name\": \"SetPrevFrameAsConstructCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation.\"\n        },\n        {\n          \"name\": \"Visit\",\n          \"parameters\": [\n            \"FrameSummary& summary\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Visits a single frame, adds it to the list, and returns whether to continue.\"\n        },\n        {\n          \"name\": \"Build\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<FixedArray>\",\n          \"logic\": \"Creates and returns the fixed array with all stack frames captured.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CurrentScriptNameStackVisitor\",\n      \"properties\": [\n        \"isolate_\",\n        \"name_or_url_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CurrentScriptNameStackVisitor\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Default Constructor\"\n        },\n        {\n          \"name\": \"SetPrevFrameAsConstructCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation.\"\n        },\n        {\n          \"name\": \"Visit\",\n          \"parameters\": [\n            \"FrameSummary& summary\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Visitor for stack frames to find and return the URL/Name of the Script.\"\n        },\n        {\n          \"name\": \"CurrentScriptNameOrSourceURL\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<String>\",\n          \"logic\": \"Gets the captured script or name url\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CurrentScriptStackVisitor\",\n      \"properties\": [\n        \"current_script_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SetPrevFrameAsConstructCall\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty implementation.\"\n        },\n        {\n          \"name\": \"Visit\",\n          \"parameters\": [\n            \"FrameSummary& summary\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Visitor for stack frames to find and return the Script.\"\n        },\n        {\n          \"name\": \"CurrentScript\",\n          \"parameters\": [],\n          \"return_type\": \"MaybeDirectHandle<Script>\",\n          \"logic\": \"Gets the captured script\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SetThreadInWasmFlagScope\",\n      \"properties\": [\n        \"enabled_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SetThreadInWasmFlagScope\",\n          \"parameters\": [],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Contructor.\"\n        },\n        {\n          \"name\": \"~SetThreadInWasmFlagScope\",\n          \"parameters\": [],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Destructor.\"\n        },\n        {\n          \"name\": \"Enable\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the enabling flag.\"\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"DefaultEmbeddedBlobCode\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns a pointer to the default embedded blob code.\"\n    },\n    {\n      \"name\": \"DefaultEmbeddedBlobCodeSize\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the size of the default embedded blob code.\"\n    },\n    {\n      \"name\": \"DefaultEmbeddedBlobData\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns a pointer to the default embedded blob data.\"\n    },\n    {\n      \"name\": \"DefaultEmbeddedBlobDataSize\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the size of the default embedded blob data.\"\n    },\n    {\n      \"name\": \"StickyEmbeddedBlobCode\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns a pointer to the sticky embedded blob code.\"\n    },\n    {\n      \"name\": \"StickyEmbeddedBlobCodeSize\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the size of the sticky embedded blob code.\"\n    },\n    {\n      \"name\": \"StickyEmbeddedBlobData\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns a pointer to the sticky embedded blob data.\"\n    },\n    {\n      \"name\": \"StickyEmbeddedBlobDataSize\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the size of the sticky embedded blob data.\"\n    },\n    {\n      \"name\": \"SetStickyEmbeddedBlob\",\n      \"parameters\": [\n        \"const uint8_t* code\",\n        \"uint32_t code_size\",\n        \"const uint8_t* data\",\n        \"uint32_t data_size\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Sets the sticky embedded blob with the provided code, code size, data, and data size.\"\n    },\n    {\n      \"name\": \"DisableEmbeddedBlobRefcounting\",\n      \"parameters\": [],\n      \"return_type\": \"void\",\n      \"logic\": \"Disables reference counting for the embedded blob.\"\n    },\n    {\n      \"name\": \"FreeCurrentEmbeddedBlob\",\n      \"parameters\": [],\n      \"return_type\": \"void\",\n      \"logic\": \"Frees the current embedded blob.\"\n    },\n    {\n      \"name\": \"Isolate::CurrentEmbeddedBlobIsBinaryEmbedded\",\n      \"parameters\": [],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if the current embedded blob is binary embedded, and is therefore immovable.\"\n    },\n    {\n      \"name\": \"Isolate::SetEmbeddedBlob\",\n      \"parameters\": [\n        \"const uint8_t* code\",\n        \"uint32_t code_size\",\n        \"const uint8_t* data\",\n        \"uint32_t data_size\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Sets embedded blob for isolate.\"\n    },\n    {\n      \"name\": \"Isolate::ClearEmbeddedBlob\",\n      \"parameters\": [],\n      \"return_type\": \"void\",\n      \"logic\": \"Clears embedded blob for isolate.\"\n    },\n    {\n      \"name\": \"Isolate::embedded_blob_code\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns the embedded blob code.\"\n    },\n    {\n      \"name\": \"Isolate::embedded_blob_code_size\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the embedded blob code size.\"\n    },\n    {\n      \"name\": \"Isolate::embedded_blob_data\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns the embedded blob data.\"\n    },\n    {\n      \"name\": \"Isolate::embedded_blob_data_size\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the embedded blob data size.\"\n    },\n    {\n      \"name\": \"Isolate::CurrentEmbeddedBlobCode\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns a pointer to the current embedded blob code.\"\n    },\n    {\n      \"name\": \"Isolate::CurrentEmbeddedBlobCodeSize\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the size of the current embedded blob code.\"\n    },\n    {\n      \"name\": \"Isolate::CurrentEmbeddedBlobData\",\n      \"parameters\": [],\n      \"return_type\": \"const uint8_t*\",\n      \"logic\": \"Returns a pointer to the current embedded blob data.\"\n    },\n    {\n      \"name\": \"Isolate::CurrentEmbeddedBlobDataSize\",\n      \"parameters\": [],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Returns the size of the current embedded blob data.\"\n    },\n    {\n      \"name\": \"Isolate::GetShortBuiltinsCallRegion\",\n      \"parameters\": [],\n      \"return_type\": \"base::AddressRegion\",\n      \"logic\": \"Returns the address region for short builtin calls.\"\n    },\n    {\n      \"name\": \"Isolate::HashIsolateForEmbeddedBlob\",\n      \"parameters\": [],\n      \"return_type\": \"size_t\",\n      \"logic\": \"Calculate hash for isolate to use for embedded blob.\"\n    },\n    {\n      \"name\": \"Isolate::SetCurrent\",\n      \"parameters\": [\n        \"Isolate* isolate\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Set current isolate.\"\n    },\n    {\n      \"name\": \"Isolate::InitializeOncePerProcess\",\n      \"parameters\": [],\n      \"return_type\": \"void\",\n      \"logic\": \"Initializes static Heap variables.\"\n    },\n    {\n      \"name\": \"Isolate::get_address_from_id\",\n      \"parameters\": [\n        \"IsolateAddressId id\"\n      ],\n      \"return_type\": \"Address\",\n      \"logic\": \"Returns the address based on IsolateAddressId\"\n    },\n    {\n      \"name\": \"Isolate::Iterate\",\n      \"parameters\": [\n        \"RootVisitor* v\",\n        \"char* thread_storage\"\n      ],\n      \"return_type\": \"char*\",\n      \"logic\": \"Iterates over the roots for a given thread.\"\n    },\n    {\n      \"name\": \"Isolate::IterateThread\",\n      \"parameters\": [\n        \"ThreadVisitor* v\",\n        \"char* t\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Visit thread's data.\"\n    },\n    {\n      \"name\": \"Isolate::Iterate\",\n      \"parameters\": [\n        \"RootVisitor* v\",\n        \"ThreadLocalTop* thread\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Iterates over the roots in ThreadLocalTop.\"\n    },\n    {\n      \"name\": \"Isolate::Iterate\",\n      \"parameters\": [\n        \"RootVisitor* v\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Iterates the stack using root visitor\"\n    },\n    {\n      \"name\": \"Isolate::RegisterTryCatchHandler\",\n      \"parameters\": [\n        \"v8::TryCatch* that\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Registers a TryCatch handler.\"\n    },\n    {\n      \"name\": \"Isolate::UnregisterTryCatchHandler\",\n      \"parameters\": [\n        \"v8::TryCatch* that\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Unregisters the specified TryCatch handler.\"\n    },\n    {\n      \"name\": \"Isolate::StackTraceString\",\n      \"parameters\": [],\n      \"return_type\": \"DirectHandle<String>\",\n      \"logic\": \"Generates and returns a stack trace string.\"\n    },\n    {\n      \"name\": \"Isolate::PushStackTraceAndDie\",\n      \"parameters\": [\n        \"void* ptr1\",\n        \"void* ptr2\",\n        \"void* ptr3\",\n        \"void* ptr4\",\n        \"void* ptr5\",\n        \"void* ptr6\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Prints the details of this failure message object, then aborts.\"\n    },\n    {\n      \"name\": \"Isolate::PushParamsAndDie\",\n      \"parameters\": [\n        \"void* ptr1\",\n        \"void* ptr2\",\n        \"void* ptr3\",\n        \"void* ptr4\",\n        \"void* ptr5\",\n        \"void* ptr6\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Prints parameters and aborts.\"\n    },\n    {\n      \"name\": \"Isolate::PushStackTraceAndContinue\",\n      \"parameters\": [\n        \"void* ptr1\",\n        \"void* ptr2\",\n        \"void* ptr3\",\n        \"void* ptr4\",\n        \"void* ptr5\",\n        \"void* ptr6\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Prints the details of this failure message object, then continues.\"\n    },\n    {\n      \"name\": \"Isolate::PushParamsAndContinue\",\n      \"parameters\": [\n        \"void* ptr1\",\n        \"void* ptr2\",\n        \"void* ptr3\",\n        \"void* ptr4\",\n        \"void* ptr5\",\n        \"void* ptr6\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Prints parameters and continues.\"\n    },\n    {\n      \"name\": \"NoExtension\",\n      \"parameters\": [\n        \"const v8::FunctionCallbackInfo<v8::Value>&\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Returns false.\"\n    },\n    {\n      \"name\": \"IsBuiltinFunction\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Tagged<HeapObject> object\",\n        \"Builtin builtin\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if a HeapObject is a JSFunction with a specific Builtin code.\"\n    },\n    {\n      \"name\": \"IsBuiltinAsyncFulfillHandler\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Tagged<HeapObject> object\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if the HeapObject is a known async function or async generator fulfill handler.\"\n    },\n    {\n      \"name\": \"IsBuiltinAsyncRejectHandler\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Tagged<HeapObject> object\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if the HeapObject is a known async function or async generator reject handler.\"\n    },\n    {\n      \"name\": \"IsBuiltinForwardingRejectHandler\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Tagged<HeapObject> object\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks if the HeapObject is a known builtin rejection handler that rethrows the exception.\"\n    },\n    {\n      \"name\": \"TryGetAsyncGenerator\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"DirectHandle<PromiseReaction> reaction\"\n      ],\n      \"return_type\": \"MaybeHandle<JSGeneratorObject>\",\n      \"logic\": \"Attempts to retrieve the JSGeneratorObject from an async function/generator based on the PromiseReaction.\"\n    },\n    {\n      \"name\": \"TryGetWasmSuspender\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Tagged<HeapObject> handler\"\n      ],\n      \"return_type\": \"MaybeDirectHandle<WasmSuspenderObject>\",\n      \"logic\": \"Tries to get a WasmSuspenderObject from the provided handler.\"\n    },\n    {\n      \"name\": \"GetGeneratorBytecodeOffset\",\n      \"parameters\": [\n        \"DirectHandle<JSGeneratorObject> generator_object\"\n      ],\n      \"return_type\": \"int\",\n      \"logic\": \"Calculates the bytecode offset of a generator object.\"\n    },\n    {\n      \"name\": \"CaptureAsyncStackTrace\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"DirectHandle<JSPromise> promise\",\n        \"CallSiteBuilder* builder\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Captures the async stack trace from a given Promise.\"\n    },\n    {\n      \"name\": \"TryGetCurrentTaskPromise\",\n      \"parameters\": [\n        \"Isolate* isolate\"\n      ],\n      \"return_type\": \"MaybeDirectHandle<JSPromise>\",\n      \"logic\": \"Tries to get the Promise associated with the current microtask.\"\n    },\n    {\n      \"name\": \"CaptureAsyncStackTrace\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"CallSiteBuilder* builder\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Captures async stack trace by finding the current promise.\"\n    },\n    {\n      \"name\": \"VisitStack\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"Visitor* visitor\",\n        \"StackTrace::StackTraceOptions options\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Generic stack visiting function to get stack trace\"\n    },\n    {\n      \"name\": \"CaptureSimpleStackTrace\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"int limit\",\n        \"FrameSkipMode mode\",\n        \"Handle<Object> caller\"\n      ],\n      \"return_type\": \"Handle<FixedArray>\",\n      \"logic\": \"Captures a simple stack trace with the specified limit, skip mode, and caller.\"\n    },\n    {\n      \"name\": \"GetDetailedStackTraceFromCallSiteInfos\",\n      \"parameters\": [\n        \"Isolate* isolate\",\n        \"DirectHandle<FixedArray> call_site_infos\",\n        \"int limit\"\n      ],\n      \"return_type\": \"DirectHandle<StackTraceInfo>\",\n      \"logic\": \"Builds a detailed stack trace from the already collected call site infos array.\"\n    },\n    {\n      \"name\": \"Isolate::CaptureAndSetErrorStack\",\n      \"parameters\": [\n        \"DirectHandle<JSObject> error_object\",\n        \"FrameSkipMode mode\",\n        \"Handle<Object> caller\"\n      ],\n      \"return_type\": \"MaybeDirectHandle<JSObject>\",\n      \"logic\": \"Captures and sets the stack trace on a provided error object.\"\n    },\n    {\n      \"name\": \"Isolate::GetDetailedStackTrace\",\n      \"parameters\": [\n        \"DirectHandle<JSReceiver> maybe_error_object\"\n      ],\n      \"return_type\": \"Handle<StackTraceInfo>\",\n      \"logic\": \"Get detailed stack trace.\"\n    },\n    {\n      \"name\": \"Isolate::GetSimpleStackTrace\",\n      \"parameters\": [\n        \"DirectHandle<JSReceiver> maybe_"
}