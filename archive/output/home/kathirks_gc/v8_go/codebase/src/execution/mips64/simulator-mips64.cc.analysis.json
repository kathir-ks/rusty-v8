{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/mips64/simulator-mips64.cc",
  "imports": [
    "src/execution/mips64/simulator-mips64.h",
    "limits.h",
    "stdarg.h",
    "stdlib.h",
    "cmath",
    "src/base/bits.h",
    "src/base/platform/memory.h",
    "src/base/platform/platform.h",
    "src/base/strings.h",
    "src/base/vector.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/mips64/constants-mips64.h",
    "src/diagnostics/disasm.h",
    "src/heap/combined-heap.h",
    "src/runtime/runtime-utils.h",
    "src/utils/ostreams.h"
  ],
  "classes": [
    {
      "name": "MipsDebugger",
      "properties": [
        "sim_"
      ],
      "methods": [
        {
          "name": "MipsDebugger",
          "parameters": [
            "sim"
          ],
          "return_type": "void",
          "logic": "Constructor for MipsDebugger, initializes the sim_ pointer."
        },
        {
          "name": "Stop",
          "parameters": [
            "instr"
          ],
          "return_type": "void",
          "logic": "Stops the simulator execution at a breakpoint, prints the stop code, and enters the debug mode."
        },
        {
          "name": "Debug",
          "parameters": [],
          "return_type": "void",
          "logic": "Enters the debugging shell, allowing the user to inspect and modify the simulator state."
        },
        {
          "name": "PrintAllRegs",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the values of all general-purpose registers with names, hexadecimal and decimal values."
        },
        {
          "name": "PrintAllRegsIncludingFPU",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the values of all general-purpose and floating-point registers, including their hexadecimal values and double representation."
        },
        {
          "name": "GetRegisterValue",
          "parameters": [
            "regnum"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value of the specified register.  If the register number corresponds to kNumSimuRegisters, it returns the PC value.  Otherwise, it returns the value of the requested register."
        },
        {
          "name": "GetFPURegisterValue",
          "parameters": [
            "regnum"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value of the specified FPU register. If the register number corresponds to kNumFPURegisters, it returns the PC value, else the FPU register."
        },
        {
          "name": "GetFPURegisterValueFloat",
          "parameters": [
            "regnum"
          ],
          "return_type": "float",
          "logic": "Returns the single-precision float value of the specified FPU register. Returns PC if regnum is kNumFPURegisters."
        },
        {
          "name": "GetFPURegisterValueDouble",
          "parameters": [
            "regnum"
          ],
          "return_type": "double",
          "logic": "Returns the double-precision float value of the specified FPU register. Returns PC if regnum is kNumFPURegisters."
        },
        {
          "name": "GetValue",
          "parameters": [
            "desc",
            "value"
          ],
          "return_type": "bool",
          "logic": "Parses a string description of a register or address and stores its value in the given value pointer. Returns true if parsing was successful, false otherwise."
        },
        {
          "name": "SetBreakpoint",
          "parameters": [
            "breakpc"
          ],
          "return_type": "bool",
          "logic": "Sets a breakpoint at the given instruction address.  Returns true if successful, false otherwise (e.g., if breakpoint already set)."
        },
        {
          "name": "DeleteBreakpoint",
          "parameters": [
            "breakpc"
          ],
          "return_type": "bool",
          "logic": "Deletes the breakpoint at the given instruction address.  Returns true if successful."
        },
        {
          "name": "UndoBreakpoints",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes any set breakpoints by restoring the original instruction at the breakpoint location."
        },
        {
          "name": "RedoBreakpoints",
          "parameters": [],
          "return_type": "void",
          "logic": "Re-inserts all set breakpoints by replacing the instruction at the breakpoint location with the breakpoint instruction."
        }
      ]
    },
    {
      "name": "Simulator",
      "properties": [
        "isolate_",
        "stack_",
        "stack_limit_",
        "pc_modified_",
        "icount_",
        "break_count_",
        "break_pc_",
        "break_instr_",
        "registers_",
        "FPUregisters_",
        "FCSR_",
        "MSACSR_",
        "last_debugger_input_",
        "watched_stops_",
        "local_monitor_",
        "global_monitor_thread_",
        "instr_",
        "trace_buf_"
      ],
      "methods": [
        {
          "name": "Simulator",
          "parameters": [
            "isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for the Simulator class. Sets up simulator state, initializes registers, stack pointer, and other simulator-related data structures."
        },
        {
          "name": "~Simulator",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the Simulator class. Frees memory allocated for the stack and removes the thread from the global monitor."
        },
        {
          "name": "current",
          "parameters": [
            "isolate"
          ],
          "return_type": "Simulator*",
          "logic": "Returns the active Simulator for the current thread and isolate. If a simulator doesn't exist, it allocates a new one."
        },
        {
          "name": "set_register",
          "parameters": [
            "reg",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified register in the architecture state. If the register is the PC, it sets the pc_modified_ flag."
        },
        {
          "name": "set_dw_register",
          "parameters": [
            "reg",
            "dbl"
          ],
          "return_type": "void",
          "logic": "Sets the value of a 64-bit register from two 32-bit integers."
        },
        {
          "name": "set_fpu_register",
          "parameters": [
            "fpureg",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified FPU register."
        },
        {
          "name": "set_fpu_register_word",
          "parameters": [
            "fpureg",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the lower 32 bits of the specified FPU register, leaving the upper bits untouched."
        },
        {
          "name": "set_fpu_register_hi_word",
          "parameters": [
            "fpureg",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the upper 32 bits of the specified FPU register, leaving the lower bits untouched."
        },
        {
          "name": "set_fpu_register_float",
          "parameters": [
            "fpureg",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified FPU register using float."
        },
        {
          "name": "set_fpu_register_double",
          "parameters": [
            "fpureg",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the value of the specified FPU register using double."
        },
        {
          "name": "get_register",
          "parameters": [
            "reg"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value of the specified register. If it is PC register, returns value + Instruction::kPCReadOffset. Returns 0 if register is zero register."
        },
        {
          "name": "get_double_from_register_pair",
          "parameters": [
            "reg"
          ],
          "return_type": "double",
          "logic": "Returns the double value from a register pair."
        },
        {
          "name": "get_fpu_register",
          "parameters": [
            "fpureg"
          ],
          "return_type": "int64_t",
          "logic": "Returns the value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_word",
          "parameters": [
            "fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Returns the lower 32 bits of the specified FPU register."
        },
        {
          "name": "get_fpu_register_signed_word",
          "parameters": [
            "fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Returns the lower 32 bits of the specified FPU register as a signed integer."
        },
        {
          "name": "get_fpu_register_hi_word",
          "parameters": [
            "fpureg"
          ],
          "return_type": "int32_t",
          "logic": "Returns the upper 32 bits of the specified FPU register."
        },
        {
          "name": "get_fpu_register_float",
          "parameters": [
            "fpureg"
          ],
          "return_type": "float",
          "logic": "Returns the float value of the specified FPU register."
        },
        {
          "name": "get_fpu_register_double",
          "parameters": [
            "fpureg"
          ],
          "return_type": "double",
          "logic": "Returns the double value of the specified FPU register."
        },
        {
          "name": "GetFpArgs",
          "parameters": [
            "x",
            "y",
            "z"
          ],
          "return_type": "void",
          "logic": "Retrieves floating-point arguments from registers or the stack based on the ABI."
        },
        {
          "name": "SetFpResult",
          "parameters": [
            "result"
          ],
          "return_type": "void",
          "logic": "Sets the floating-point result in the appropriate register based on the ABI."
        },
        {
          "name": "set_fcsr_bit",
          "parameters": [
            "cc",
            "value"
          ],
          "return_type": "void",
          "logic": "Sets a specific bit in the FCSR (Floating-Point Control and Status Register)."
        },
        {
          "name": "test_fcsr_bit",
          "parameters": [
            "cc"
          ],
          "return_type": "bool",
          "logic": "Tests a specific bit in the FCSR (Floating-Point Control and Status Register)."
        },
        {
          "name": "clear_fcsr_cause",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the cause bits in the FCSR (Floating-Point Control and Status Register)."
        },
        {
          "name": "set_fcsr_rounding_mode",
          "parameters": [
            "mode"
          ],
          "return_type": "void",
          "logic": "Sets the rounding mode in the FCSR (Floating-Point Control and Status Register)."
        },
        {
          "name": "set_msacsr_rounding_mode",
          "parameters": [
            "mode"
          ],
          "return_type": "void",
          "logic": "Sets the rounding mode in the MSACSR."
        },
        {
          "name": "get_fcsr_rounding_mode",
          "parameters": [],
          "return_type": "unsigned int",
          "logic": "Returns the rounding mode from the FCSR (Floating-Point Control and Status Register)."
        },
        {
          "name": "get_msacsr_rounding_mode",
          "parameters": [],
          "return_type": "unsigned int",
          "logic": "Returns the rounding mode from the MSACSR."
        },
        {
          "name": "set_fcsr_round_error",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "bool",
          "logic": "Sets the rounding error codes in FCSR based on the result of the rounding. Returns true if the operation was invalid."
        },
        {
          "name": "set_fcsr_round64_error",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "bool",
          "logic": "Sets the rounding error codes in FCSR based on the result of the rounding. Returns true if the operation was invalid (64 bit version)."
        },
        {
          "name": "set_fpu_register_word_invalid_result",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "void",
          "logic": "Sets a specific value to FPU result based on rounding flags and invalid result."
        },
        {
          "name": "set_fpu_register_invalid_result",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "void",
          "logic": "Sets a specific value to FPU result based on rounding flags and invalid result."
        },
        {
          "name": "set_fpu_register_invalid_result64",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "void",
          "logic": "Sets a specific value to FPU result based on rounding flags and invalid result (64 bit)."
        },
        {
          "name": "set_fpu_register_word_invalid_result",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "void",
          "logic": "Sets a specific value to FPU result based on rounding flags and invalid result (word version)."
        },
        {
          "name": "set_fpu_register_invalid_result",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "void",
          "logic": "Sets a specific value to FPU result based on rounding flags and invalid result (double version)."
        },
        {
          "name": "set_fpu_register_invalid_result64",
          "parameters": [
            "original",
            "rounded"
          ],
          "return_type": "void",
          "logic": "Sets a specific value to FPU result based on rounding flags and invalid result (double version 64 bit)."
        },
        {
          "name": "round_according_to_fcsr",
          "parameters": [
            "toRound",
            "rounded",
            "rounded_int",
            "fs"
          ],
          "return_type": "void",
          "logic": "Rounds double according to current fcsr setting."
        },
        {
          "name": "round64_according_to_fcsr",
          "parameters": [
            "toRound",
            "rounded",
            "rounded_int",
            "fs"
          ],
          "return_type": "void",
          "logic": "Rounds double to int64_t according to current fcsr setting."
        },
        {
          "name": "round_according_to_fcsr",
          "parameters": [
            "toRound",
            "rounded",
            "rounded_int",
            "fs"
          ],
          "return_type": "void",
          "logic": "Rounds float according to current fcsr setting."
        },
        {
          "name": "round64_according_to_fcsr",
          "parameters": [
            "toRound",
            "rounded",
            "rounded_int",
            "fs"
          ],
          "return_type": "void",
          "logic": "Rounds float to int64_t according to current fcsr setting."
        },
        {
          "name": "set_pc",
          "parameters": [
            "value"
          ],
          "return_type": "void",
          "logic": "Sets the PC register directly, also setting the pc_modified_ flag."
        },
        {
          "name": "has_bad_pc",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the PC register has a bad value (bad_ra or end_sim_pc)."
        },
        {
          "name": "get_pc",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Returns the value of the PC register directly."
        },
        {
          "name": "DieOrDebug",
          "parameters": [],
          "return_type": "void",
          "logic": "Either invokes the debugger or aborts, depending on a flag."
        },
        {
          "name": "TraceRegWr",
          "parameters": [
            "value",
            "t"
          ],
          "return_type": "void",
          "logic": "Formats and prints the value written to a register if tracing is enabled, depending on data type."
        },
        {
          "name": "TraceMemRd",
          "parameters": [
            "addr",
            "value",
            "t"
          ],
          "return_type": "void",
          "logic": "Formats and prints the value read from memory if tracing is enabled, depending on data type."
        },
        {
          "name": "TraceMemWr",
          "parameters": [
            "addr",
            "value",
            "t"
          ],
          "return_type": "void",
          "logic": "Formats and prints the value written to memory if tracing is enabled, depending on data type."
        },
        {
          "name": "ReadW",
          "parameters": [
            "addr",
            "instr",
            "t"
          ],
          "return_type": "int32_t",
          "logic": "Reads a 32-bit word from memory. Checks for alignment. If unaligned or invalid address calls DieOrDebug()."
        },
        {
          "name": "ReadWU",
          "parameters": [
            "addr",
            "instr"
          ],
          "return_type": "uint32_t",
          "logic": "Reads an unsigned 32-bit word from memory. Checks for alignment. If unaligned or invalid address calls DieOrDebug()."
        },
        {
          "name": "WriteW",
          "parameters": [
            "addr",
            "value",
            "instr"
          ],
          "return_type": "void",
          "logic": "Writes a 32-bit word to memory. Checks for alignment. If unaligned or invalid address calls DieOrDebug()."
        },
        {
          "name": "WriteConditionalW",
          "parameters": [
            "addr",
            "value",
            "instr",
            "rt_reg"
          ],
          "return_type": "void",
          "logic": "Writes a 32-bit word to memory conditionally. Checks for alignment. Updates register with conditional status"
        },
        {
          "name": "Read2W",
          "parameters": [
            "addr",
            "instr"
          ],
          "return_type": "int64_t",
          "logic": "Reads a 64-bit double word from memory. Checks for alignment. If unaligned or invalid address calls DieOrDebug()."
        },
        {
          "name": "Write2W",
          "parameters": [
            "addr",
            "value",
            "instr"
          ],
          "return_type": "void",
          "logic": "Writes a 64-bit double word to memory. Checks for alignment. If unaligned or invalid address calls DieOrDebug()."
        },
        {
          "name": "WriteConditional2W",
          "parameters": [
            "addr",
            "value",
            "instr",
            "rt_reg"
          ],
          "return_type": "void",
          "logic": "Writes a 64-bit double word to memory conditionally. Checks for alignment. Updates register with conditional status."
        },
        {
          "name": "ReadD",
          "parameters": [
            "addr",
            "instr"
          ],
          "return_type": "double",
          "logic": "Reads a double from memory. Checks for alignment. If unaligned or invalid address calls abort()."
        },
        {
          "name": "WriteD",
          "parameters": [
            "addr",
            "value",
            "instr"
          ],
          "return_type": "void",
          "logic": "Writes a double to memory. Checks for alignment. If unaligned or invalid address calls DieOrDebug()."
        },
        {
          "name": "ReadHU",
          "parameters": [
            "addr",
            "instr"
          ],
          "return_type": "uint16_t",
          "logic": "Reads an unsigned 16-bit halfword from memory. Checks for alignment. If unaligned calls DieOrDebug()."
        },
        {
          "name": "ReadH",
          "parameters": [
            "addr",
            "instr"
          ],
          "return_type": "int16_t",
          "logic": "Reads a signed 16-bit halfword from memory. Checks for alignment. If unaligned calls DieOrDebug()."
        },
        {
          "name": "WriteH",
          "parameters": [
            "addr",
            "value",
            "instr"
          ],
          "return_type": "void",
          "logic": "Writes an unsigned 16-bit halfword to memory. Checks for alignment. If unaligned calls DieOrDebug()."
        },
        {
          "name": "WriteH",
          "parameters": [
            "addr",
            "value",
            "instr"
          ],
          "return_type": "void",
          "logic": "Writes a signed 16-bit halfword to memory. Checks for alignment. If unaligned calls DieOrDebug()."
        },
        {
          "name": "ReadBU",
          "parameters": [
            "addr"
          ],
          "return_type": "uint32_t",
          "logic": "Reads an unsigned byte from memory."
        },
        {
          "name": "ReadB",
          "parameters": [
            "addr"
          ],
          "return_type": "int32_t",
          "logic": "Reads a signed byte from memory."
        },
        {
          "name": "WriteB",
          "parameters": [
            "addr",
            "value"
          ],
          "return_type": "void",
          "logic": "Writes an unsigned byte to memory."
        },
        {
          "name": "WriteB",
          "parameters": [
            "addr",
            "value"
          ],
          "return_type": "void",
          "logic": "Writes a signed byte to memory."
        },
        {
          "name": "StackLimit",
          "parameters": [
            "c_limit"
          ],
          "return_type": "uintptr_t",
          "logic": "Returns the limit of the stack area to enable checking for stack overflows."
        },
        {
          "name": "GetCentralStackView",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns a Vector representing the current stack view."
        },
        {
          "name": "Format",
          "parameters": [
            "instr",
            "format"
          ],
          "return_type": "void",
          "logic": "Prints an error message for unsupported instructions and stops execution."
        },
        {
          "name": "SoftwareInterrupt",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles software interrupt instructions (break or traps) to call runtime functions or debug the simulator."
        },
        {
          "name": "IsWatchpoint",
          "parameters": [
            "code"
          ],
          "return_type": "bool",
          "logic": "Checks if a break code corresponds to a watchpoint."
        },
        {
          "name": "PrintWatchpoint",
          "parameters": [
            "code"
          ],
          "return_type": "void",
          "logic": "Prints watchpoint information (registers) when hitting a watchpoint."
        },
        {
          "name": "HandleStop",
          "parameters": [
            "code",
            "instr"
          ],
          "return_type": "void",
          "logic": "Handles a stop instruction by either invoking the debugger or jumping over the stop instruction."
        },
        {
          "name": "IsStopInstruction",
          "parameters": [
            "instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction is a stop instruction."
        },
        {
          "name": "IsEnabledStop",
          "parameters": [
            "code"
          ],
          "return_type": "bool",
          "logic": "Checks if a stop code is currently enabled."
        },
        {
          "name": "EnableStop",
          "parameters": [
            "code"
          ],
          "return_type": "void",
          "logic": "Enables a specific stop code."
        },
        {
          "name": "DisableStop",
          "parameters": [
            "code"
          ],
          "return_type": "void",
          "logic": "Disables a specific stop code."
        },
        {
          "name": "IncreaseStopCounter",
          "parameters": [
            "code"
          ],
          "return_type": "void",
          "logic": "Increases the counter for a specific stop code."
        },
        {
          "name": "PrintStopInfo",
          "parameters": [
            "code"
          ],
          "return_type": "void",
          "logic": "Prints the status information for a stop code."
        },
        {
          "name": "SignalException",
          "parameters": [
            "e"
          ],
          "return_type": "void",
          "logic": "Signals an exception and aborts the execution."
        }
      ]
    },
    {
      "name": "Simulator::GlobalMonitor",
      "properties": [
        "mutex"
      ],
      "methods": [
        {
          "name": "Get",
          "parameters": [],
          "return_type": "Simulator::GlobalMonitor*",
          "logic": "Returns a singleton instance of the GlobalMonitor."
        },
        {
          "name": "NotifyStore_Locked",
          "parameters": [
            "thread"
          ],
          "return_type": "void",
          "logic": "Notifies the global monitor that a store operation has occurred (locked version)."
        },
        {
          "name": "NotifyStoreConditional_Locked",
          "parameters": [
            "addr",
            "thread"
          ],
          "return_type": "bool",
          "logic": "Notifies the global monitor that a store conditional operation is attempted (locked version)."
        },
        {
          "name": "RemoveLinkedAddress",
          "parameters": [
            "thread"
          ],
          "return_type": "void",
          "logic": "Removes a linked address from the global monitor for a specific thread."
        }
      ]
    },
    {
      "name": "Simulator::CachePage",
      "properties": [],
      "methods": []
    },
    {
      "name": "SimulatorData",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "HaveSameSign",
      "parameters": [
        "a",
        "b"
      ],
      "return_type": "bool",
      "logic": "Checks if two 64-bit integers have the same sign."
    },
    {
      "name": "get_fcsr_condition_bit",
      "parameters": [
        "cc"
      ],
      "return_type": "uint32_t",
      "logic": "Calculates the FCSR bit index based on the condition code."
    },
    {
      "name": "FPAbs",
      "parameters": [
        "a"
      ],
      "return_type": "T",
      "logic": "Returns absolute value of a double or float."
    },
    {
      "name": "FPUProcessNaNsAndZeros",
      "parameters": [
        "a",
        "b",
        "kind",
        "result"
      ],
      "return_type": "bool",
      "logic": "Process NaN or zero values for min/max function."
    },
    {
      "name": "FPUMin",
      "parameters": [
        "a",
        "b"
      ],
      "return_type": "T",
      "logic": "Returns the minimum value of two double or float values."
    },
    {
      "name": "FPUMax",
      "parameters": [
        "a",
        "b"
      ],
      "return_type": "T",
      "logic": "Returns the maximum value of two double or float values."
    }
  ]
}