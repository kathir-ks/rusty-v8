{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/stack-guard.h",
  "imports": [
    "include/v8-internal.h",
    "src/base/atomicops.h",
    "src/common/globals.h"
  ],
  "classes": [
    {
      "name": "StackGuard",
      "properties": [
        "isolate_",
        "thread_local_"
      ],
      "methods": [
        {
          "name": "StackGuard",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "StackGuard",
          "logic": "Constructor that initializes the `isolate_` member."
        },
        {
          "name": "SetStackLimit",
          "parameters": [
            "uintptr_t limit"
          ],
          "return_type": "void",
          "logic": "Sets the stack limit, adjusting for simulator environments."
        },
        {
          "name": "SetStackLimitForStackSwitching",
          "parameters": [
            "uintptr_t limit"
          ],
          "return_type": "void",
          "logic": "Attempts to set the stack limit for stack switching using compare-and-swap without the ExecutionAccess lock."
        },
        {
          "name": "AdjustStackLimitForSimulator",
          "parameters": [],
          "return_type": "void",
          "logic": "Adjusts the stack limit for the simulator to reflect C stack overflows."
        },
        {
          "name": "ResetStackLimitForSimulator",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the stack limit to the real limit after a stack overflow in the simulator."
        },
        {
          "name": "ArchiveStackGuard",
          "parameters": [
            "char* to"
          ],
          "return_type": "char*",
          "logic": "Archives the stack guard state to a buffer."
        },
        {
          "name": "RestoreStackGuard",
          "parameters": [
            "char* from"
          ],
          "return_type": "char*",
          "logic": "Restores the stack guard state from a buffer."
        },
        {
          "name": "ArchiveSpacePerThread",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of the thread-local storage required for archiving."
        },
        {
          "name": "FreeThreadResources",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees any thread-specific resources."
        },
        {
          "name": "InitThread",
          "parameters": [
            "const ExecutionAccess& lock"
          ],
          "return_type": "void",
          "logic": "Initializes the stack guard for a new thread."
        },
        {
          "name": "CheckTerminateExecution",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a terminate execution interrupt has been requested."
        },
        {
          "name": "RequestTerminateExecution",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a terminate execution interrupt."
        },
        {
          "name": "ClearTerminateExecution",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the terminate execution interrupt."
        },
        {
          "name": "CheckGC",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a garbage collection interrupt has been requested."
        },
        {
          "name": "RequestGC",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a garbage collection interrupt."
        },
        {
          "name": "ClearGC",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the garbage collection interrupt."
        },
        {
          "name": "CheckInstallCode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if an install code interrupt has been requested."
        },
        {
          "name": "RequestInstallCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests an install code interrupt."
        },
        {
          "name": "ClearInstallCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the install code interrupt."
        },
        {
          "name": "CheckInstallBaselineCode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if an install baseline code interrupt has been requested."
        },
        {
          "name": "RequestInstallBaselineCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests an install baseline code interrupt."
        },
        {
          "name": "ClearInstallBaselineCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the install baseline code interrupt."
        },
        {
          "name": "CheckApiInterrupt",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if an API interrupt has been requested."
        },
        {
          "name": "RequestApiInterrupt",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests an API interrupt."
        },
        {
          "name": "ClearApiInterrupt",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the API interrupt."
        },
        {
          "name": "CheckDeoptMarkedAllocationSites",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a deopt marked allocation sites interrupt has been requested."
        },
        {
          "name": "RequestDeoptMarkedAllocationSites",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a deopt marked allocation sites interrupt."
        },
        {
          "name": "ClearDeoptMarkedAllocationSites",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the deopt marked allocation sites interrupt."
        },
        {
          "name": "CheckGrowSharedMemory",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a grow shared memory interrupt has been requested."
        },
        {
          "name": "RequestGrowSharedMemory",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a grow shared memory interrupt."
        },
        {
          "name": "ClearGrowSharedMemory",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the grow shared memory interrupt."
        },
        {
          "name": "CheckLogWasmCode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a log wasm code interrupt has been requested."
        },
        {
          "name": "RequestLogWasmCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a log wasm code interrupt."
        },
        {
          "name": "ClearLogWasmCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the log wasm code interrupt."
        },
        {
          "name": "CheckWasmCodeGC",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a wasm code GC interrupt has been requested."
        },
        {
          "name": "RequestWasmCodeGC",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a wasm code GC interrupt."
        },
        {
          "name": "ClearWasmCodeGC",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the wasm code GC interrupt."
        },
        {
          "name": "CheckInstallMaglevCode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if an install maglev code interrupt has been requested."
        },
        {
          "name": "RequestInstallMaglevCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests an install maglev code interrupt."
        },
        {
          "name": "ClearInstallMaglevCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the install maglev code interrupt."
        },
        {
          "name": "CheckGlobalSafepoint",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a global safepoint interrupt has been requested."
        },
        {
          "name": "RequestGlobalSafepoint",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a global safepoint interrupt."
        },
        {
          "name": "ClearGlobalSafepoint",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the global safepoint interrupt."
        },
        {
          "name": "CheckStartIncrementalMarking",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a start incremental marking interrupt has been requested."
        },
        {
          "name": "RequestStartIncrementalMarking",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests a start incremental marking interrupt."
        },
        {
          "name": "ClearStartIncrementalMarking",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the start incremental marking interrupt."
        },
        {
          "name": "InterruptLevelMask",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "constexpr InterruptFlag",
          "logic": "Returns a mask of interrupts that correspond to a given interrupt level."
        },
        {
          "name": "climit",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the C++ stack limit. Returns the jslimit when not USE_SIMULATOR"
        },
        {
          "name": "jslimit",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the JavaScript stack limit."
        },
        {
          "name": "real_climit",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the real C++ stack limit. Returns the real_jslimit when not USE_SIMULATOR."
        },
        {
          "name": "real_jslimit",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the real JavaScript stack limit."
        },
        {
          "name": "address_of_jslimit",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the jslimit_ field."
        },
        {
          "name": "address_of_real_jslimit",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the real_jslimit_ field."
        },
        {
          "name": "address_of_interrupt_request",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "Address",
          "logic": "Returns the address of interrupt_requested_ for a given interrupt level."
        },
        {
          "name": "jslimit_offset",
          "parameters": [],
          "return_type": "constexpr int",
          "logic": "Returns the offset of the jslimit_ field within StackGuard."
        },
        {
          "name": "real_jslimit_offset",
          "parameters": [],
          "return_type": "constexpr int",
          "logic": "Returns the offset of the real_jslimit_ field within StackGuard."
        },
        {
          "name": "HandleInterrupts",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Handles pending interrupts, based on the given `InterruptLevel`. Returns a Tagged<Object>."
        },
        {
          "name": "HasTerminationRequest",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a termination request is pending."
        },
        {
          "name": "Iterate",
          "parameters": [
            "RootVisitor* v",
            "char* thread_storage"
          ],
          "return_type": "char*",
          "logic": "Iterates over thread-local data for garbage collection purposes."
        },
        {
          "name": "CheckInterrupt",
          "parameters": [
            "InterruptFlag flag"
          ],
          "return_type": "bool",
          "logic": "Checks if a specific interrupt flag is set."
        },
        {
          "name": "RequestInterrupt",
          "parameters": [
            "InterruptFlag flag"
          ],
          "return_type": "void",
          "logic": "Requests a specific interrupt by setting the corresponding flag."
        },
        {
          "name": "ClearInterrupt",
          "parameters": [
            "InterruptFlag flag"
          ],
          "return_type": "void",
          "logic": "Clears a specific interrupt flag."
        },
        {
          "name": "FetchAndClearInterrupts",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "int",
          "logic": "Atomically fetches and clears interrupts at a given level."
        },
        {
          "name": "SetStackLimitInternal",
          "parameters": [
            "const ExecutionAccess& lock",
            "uintptr_t limit",
            "uintptr_t jslimit"
          ],
          "return_type": "void",
          "logic": "Internal method to set both the OS stack limit and the jslimit, requiring the ExecutionAccess lock."
        },
        {
          "name": "has_pending_interrupts",
          "parameters": [
            "const ExecutionAccess& lock"
          ],
          "return_type": "bool",
          "logic": "Checks if there are any pending interrupts. Requires holding the ExecutionAccess lock."
        },
        {
          "name": "update_interrupt_requests_and_stack_limits",
          "parameters": [
            "const ExecutionAccess& lock"
          ],
          "return_type": "void",
          "logic": "Updates the interrupt requests and stack limits. Requires holding the ExecutionAccess lock."
        },
        {
          "name": "PushInterruptsScope",
          "parameters": [
            "InterruptsScope* scope"
          ],
          "return_type": "void",
          "logic": "Pushes an InterruptsScope onto a stack, effectively enabling interrupts."
        },
        {
          "name": "PopInterruptsScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops an InterruptsScope from the stack, effectively disabling interrupts previously enabled by that scope."
        }
      ]
    },
    {
      "name": "StackGuard::ThreadLocal",
      "properties": [
        "real_jslimit_",
        "real_climit_",
        "padding1_",
        "jslimit_",
        "climit_",
        "padding2_",
        "interrupt_requested_",
        "interrupt_scopes_",
        "interrupt_flags_"
      ],
      "methods": [
        {
          "name": "ThreadLocal",
          "parameters": [],
          "return_type": "ThreadLocal",
          "logic": "Constructor for ThreadLocal, initializing members."
        },
        {
          "name": "Initialize",
          "parameters": [
            "Isolate* isolate",
            "const ExecutionAccess& lock"
          ],
          "return_type": "void",
          "logic": "Initializes the ThreadLocal data for an isolate."
        },
        {
          "name": "jslimit",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the JavaScript stack limit, atomically loaded."
        },
        {
          "name": "set_jslimit",
          "parameters": [
            "uintptr_t limit"
          ],
          "return_type": "void",
          "logic": "Sets the JavaScript stack limit, atomically stored."
        },
        {
          "name": "climit",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the C++ stack limit, atomically loaded."
        },
        {
          "name": "set_climit",
          "parameters": [
            "uintptr_t limit"
          ],
          "return_type": "void",
          "logic": "Sets the C++ stack limit, atomically stored."
        },
        {
          "name": "set_interrupt_requested",
          "parameters": [
            "InterruptLevel level",
            "bool requested"
          ],
          "return_type": "void",
          "logic": "Sets the interrupt request status for a given interrupt level."
        },
        {
          "name": "has_interrupt_requested",
          "parameters": [
            "InterruptLevel level"
          ],
          "return_type": "bool",
          "logic": "Checks if a specific interrupt has been requested."
        }
      ]
    }
  ],
  "functions": []
}