{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/frames.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/frames.h\",\n  \"imports\": [\n    \"include/v8-initialization.h\",\n    \"src/base/bounds.h\",\n    \"src/codegen/handler-table.h\",\n    \"src/codegen/safepoint-table.h\",\n    \"src/common/assert-scope.h\",\n    \"src/common/globals.h\",\n    \"src/objects/code.h\",\n    \"src/objects/deoptimization-data.h\",\n    \"src/objects/objects.h\",\n    \"src/wasm/stacks.h\",\n    \"src/wasm/wasm-code-manager.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"StackHandlerConstants\",\n      \"properties\": [\n        \"static const int kNextOffset\",\n        \"static const int kPaddingOffset\",\n        \"static const int kSize\",\n        \"static const int kSlotCount\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"StackHandler\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"address\",\n          \"parameters\": [],\n          \"return_type\": \"inline Address\",\n          \"logic\": \"Get the address of this stack handler.\"\n        },\n        {\n          \"name\": \"next\",\n          \"parameters\": [],\n          \"return_type\": \"inline StackHandler*\",\n          \"logic\": \"Get the next stack handler in the chain.\"\n        },\n        {\n          \"name\": \"next_address\",\n          \"parameters\": [],\n          \"return_type\": \"inline Address\",\n          \"logic\": \"Get the next stack handler as an address.\"\n        },\n        {\n          \"name\": \"FromAddress\",\n          \"parameters\": [\n            \"Address address\"\n          ],\n          \"return_type\": \"static inline StackHandler*\",\n          \"logic\": \"Converts an address to a StackHandler pointer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StackFrame\",\n      \"properties\": [\n        \"Type\",\n        \"JsFrameMarker\",\n        \"State\",\n        \"Isolate* const isolate_\",\n        \"State state_\",\n        \"ReturnAddressLocationResolver return_address_location_resolver_\",\n        \"const StackFrameIteratorBase* const iterator_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TypeToMarker\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"static constexpr int32_t\",\n          \"logic\": \"Converts a stack frame type to an opaque marker value.\"\n        },\n        {\n          \"name\": \"MarkerToType\",\n          \"parameters\": [\n            \"intptr_t marker\"\n          ],\n          \"return_type\": \"static constexpr Type\",\n          \"logic\": \"Converts a stack frame type marker back to its enum type.\"\n        },\n        {\n          \"name\": \"IsTypeMarker\",\n          \"parameters\": [\n            \"uintptr_t function_or_marker\"\n          ],\n          \"return_type\": \"static constexpr bool\",\n          \"logic\": \"Checks if a given marker is a stack frame type marker.\"\n        },\n        {\n          \"name\": \"StackFrame\",\n          \"parameters\": [\n            \"const StackFrame& original\"\n          ],\n          \"return_type\": \"StackFrame\",\n          \"logic\": \"Copy constructor for StackFrame (breaks host iterator connection).\"\n        },\n        {\n          \"name\": \"is_entry\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an EntryFrame.\"\n        },\n        {\n          \"name\": \"is_construct_entry\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a ConstructEntryFrame.\"\n        },\n        {\n          \"name\": \"is_exit\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an ExitFrame.\"\n        },\n        {\n          \"name\": \"is_optimized_js\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an OptimizedJSFrame.\"\n        },\n        {\n          \"name\": \"is_unoptimized_js\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an UnoptimizedJSFrame.\"\n        },\n        {\n          \"name\": \"is_interpreted\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an InterpretedFrame.\"\n        },\n        {\n          \"name\": \"is_baseline\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a BaselineFrame.\"\n        },\n        {\n          \"name\": \"is_maglev\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a MaglevFrame.\"\n        },\n        {\n          \"name\": \"is_turbofan_js\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a TurbofanJSFrame.\"\n        },\n        {\n          \"name\": \"is_wasm\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a WasmFrame.\"\n        },\n        {\n          \"name\": \"is_c_wasm_entry\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a CWasmEntryFrame.\"\n        },\n        {\n          \"name\": \"is_wasm_liftoff_setup\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a WasmLiftoffSetupFrame.\"\n        },\n        {\n          \"name\": \"is_wasm_interpreter_entry\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a WasmInterpreterEntryFrame.\"\n        },\n        {\n          \"name\": \"is_wasm_debug_break\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a WasmDebugBreakFrame.\"\n        },\n        {\n          \"name\": \"is_wasm_to_js\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a WasmToJsFrame.\"\n        },\n        {\n          \"name\": \"is_js_to_wasm\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a JsToWasmFrame.\"\n        },\n        {\n          \"name\": \"is_builtin\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a BuiltinFrame.\"\n        },\n        {\n          \"name\": \"is_internal\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an InternalFrame.\"\n        },\n        {\n          \"name\": \"is_builtin_continuation\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a BuiltinContinuationFrame.\"\n        },\n        {\n          \"name\": \"is_javascript_builtin_continuation\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a JavaScriptBuiltinContinuationFrame.\"\n        },\n        {\n          \"name\": \"is_javascript_builtin_with_catch_continuation\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a JavaScriptBuiltinContinuationWithCatchFrame.\"\n        },\n        {\n          \"name\": \"is_construct\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a ConstructFrame.\"\n        },\n        {\n          \"name\": \"is_fast_construct\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a FastConstructFrame.\"\n        },\n        {\n          \"name\": \"is_builtin_exit\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a BuiltinExitFrame.\"\n        },\n        {\n          \"name\": \"is_api_accessor_exit\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an ApiAccessorExitFrame.\"\n        },\n        {\n          \"name\": \"is_api_callback_exit\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an ApiCallbackExitFrame.\"\n        },\n        {\n          \"name\": \"is_irregexp\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is an IrregexpFrame.\"\n        },\n        {\n          \"name\": \"IsJavaScript\",\n          \"parameters\": [\n            \"Type t\"\n          ],\n          \"return_type\": \"static bool\",\n          \"logic\": \"Checks if the given frame type is a javascript type\"\n        },\n        {\n          \"name\": \"is_javascript\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the frame is a javascript frame.\"\n        },\n        {\n          \"name\": \"sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the stack pointer of the frame.\"\n        },\n        {\n          \"name\": \"fp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the frame pointer of the frame.\"\n        },\n        {\n          \"name\": \"callee_fp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the callee frame pointer of the frame.\"\n        },\n        {\n          \"name\": \"callee_pc\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the callee program counter of the frame.\"\n        },\n        {\n          \"name\": \"caller_sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the caller stack pointer.\"\n        },\n        {\n          \"name\": \"pc\",\n          \"parameters\": [],\n          \"return_type\": \"inline Address\",\n          \"logic\": \"Returns the program counter.\"\n        },\n        {\n          \"name\": \"is_profiler_entry_frame\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this frame is a profiler entry frame\"\n        },\n        {\n          \"name\": \"is_stack_exit_frame\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this frame is a stack exit frame\"\n        },\n        {\n          \"name\": \"unauthenticated_pc\",\n          \"parameters\": [],\n          \"return_type\": \"inline Address\",\n          \"logic\": \"Skip authentication of the PC, when using CFI.\"\n        },\n        {\n          \"name\": \"unauthenticated_pc\",\n          \"parameters\": [\n            \"Address* pc_address\"\n          ],\n          \"return_type\": \"static inline Address\",\n          \"logic\": \"Skip authentication of the PC, when using CFI.\"\n        },\n        {\n          \"name\": \"maybe_unauthenticated_pc\",\n          \"parameters\": [],\n          \"return_type\": \"inline Address\",\n          \"logic\": \"Conditionally calls either pc() or unauthenticated_pc() based on whether this is fast C call stack frame.\"\n        },\n        {\n          \"name\": \"maybe_unauthenticated_pc\",\n          \"parameters\": [\n            \"Address* pc_address\"\n          ],\n          \"return_type\": \"static inline Address\",\n          \"logic\": \"Conditionally calls either pc() or unauthenticated_pc() based on whether this is fast C call stack frame.\"\n        },\n        {\n          \"name\": \"InFastCCall\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Check if stack pointer is missing (FastCCall frame).\"\n        },\n        {\n          \"name\": \"constant_pool\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the constant pool.\"\n        },\n        {\n          \"name\": \"set_constant_pool\",\n          \"parameters\": [\n            \"Address constant_pool\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the constant pool.\"\n        },\n        {\n          \"name\": \"pc_address\",\n          \"parameters\": [],\n          \"return_type\": \"Address*\",\n          \"logic\": \"Returns the address of the program counter.\"\n        },\n        {\n          \"name\": \"constant_pool_address\",\n          \"parameters\": [],\n          \"return_type\": \"Address*\",\n          \"logic\": \"Returns the address of the constant pool.\"\n        },\n        {\n          \"name\": \"id\",\n          \"parameters\": [],\n          \"return_type\": \"StackFrameId\",\n          \"logic\": \"Returns the ID of the stack frame.\"\n        },\n        {\n          \"name\": \"top_handler\",\n          \"parameters\": [],\n          \"return_type\": \"inline StackHandler*\",\n          \"logic\": \"Get the top handler from the current stack iterator.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"virtual Type\",\n          \"logic\": \"Returns the type of the frame (abstract).\"\n        },\n        {\n          \"name\": \"unchecked_code\",\n          \"parameters\": [],\n          \"return_type\": \"virtual Tagged<HeapObject>\",\n          \"logic\": \"Returns the code associated with the frame.\"\n        },\n        {\n          \"name\": \"LookupCode\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<Code>\",\n          \"logic\": \"Searches for the code associated with this frame.\"\n        },\n        {\n          \"name\": \"LookupCodeAndOffset\",\n          \"parameters\": [],\n          \"return_type\": \"std::pair<Tagged<Code>, int>\",\n          \"logic\": \"Searches for the code associated with this frame and returns offset.\"\n        },\n        {\n          \"name\": \"GcSafeLookupCode\",\n          \"parameters\": [],\n          \"return_type\": \"Tagged<GcSafeCode>\",\n          \"logic\": \"Searches for the code associated with this frame and returns a GC-safe variant\"\n        },\n        {\n          \"name\": \"GcSafeLookupCodeAndOffset\",\n          \"parameters\": [],\n          \"return_type\": \"std::pair<Tagged<GcSafeCode>, int>\",\n          \"logic\": \"Searches for the code associated with this frame and returns a GC-safe code and offset.\"\n        },\n        {\n          \"name\": \"Iterate\",\n          \"parameters\": [\n            \"RootVisitor* v\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Iterates over the frame, used for GC.\"\n        },\n        {\n          \"name\": \"IteratePc\",\n          \"parameters\": [\n            \"RootVisitor* v\",\n            \"Address* constant_pool_address\",\n            \"Tagged<GcSafeCode> holder\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates over the program counter for GC.\"\n        },\n        {\n          \"name\": \"SetReturnAddressLocationResolver\",\n          \"parameters\": [\n            \"ReturnAddressLocationResolver resolver\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Sets a callback function for return-address rewriting profilers.\"\n        },\n        {\n          \"name\": \"ReadPC\",\n          \"parameters\": [\n            \"Address* pc_address\"\n          ],\n          \"return_type\": \"static inline Address\",\n          \"logic\": \"Reads the program counter from the given address.\"\n        },\n        {\n          \"name\": \"ResolveReturnAddressLocation\",\n          \"parameters\": [\n            \"Address* pc_address\"\n          ],\n          \"return_type\": \"static inline Address*\",\n          \"logic\": \"Resolves pc_address through the resolution address function if one is set.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"StringStream* accumulator\",\n            \"PrintMode mode\",\n            \"int index\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Prints information about the frame.\"\n        },\n        {\n          \"name\": \"isolate\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the isolate.\"\n        },\n        {\n          \"name\": \"StackFrame\",\n          \"parameters\": [\n            \"StackFrameIteratorBase* iterator\"\n          ],\n          \"return_type\": \"explicit StackFrame\",\n          \"logic\": \"Constructor.\"\n        },\n        {\n          \"name\": \"GetCallerStackPointer\",\n          \"parameters\": [],\n          \"return_type\": \"virtual Address\",\n          \"logic\": \"Computes the stack pointer for the calling frame (abstract).\"\n        },\n        {\n          \"name\": \"ComputeCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Fills in the state of the calling frame.\"\n        },\n        {\n          \"name\": \"GetCallerState\",\n          \"parameters\": [\n            \"State* state\"\n          ],\n          \"return_type\": \"virtual Type\",\n          \"logic\": \"Get the type and the state of the calling frame.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FrameSummary\",\n      \"properties\": [\n        \"Kind\",\n        \"FrameSummaryBase\",\n        \"JavaScriptFrameSummary\",\n        \"WasmFrameSummary\",\n        \"WasmInlinedFrameSummary\",\n        \"BuiltinFrameSummary\",\n        \"WasmInterpretedFrameSummary\",\n        \"std::vector<FrameSummary> frames\",\n        \"bool top_frame_is_construct_call\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FrameSummaryBase\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Kind kind\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for FrameSummaryBase.\"\n        },\n        {\n          \"name\": \"isolate\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the isolate.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"Kind\",\n          \"logic\": \"Returns the kind.\"\n        },\n        {\n          \"name\": \"JavaScriptFrameSummary\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Tagged<Object> receiver\",\n            \"Tagged<JSFunction> function\",\n            \"Tagged<AbstractCode> abstract_code\",\n            \"int code_offset\",\n            \"bool is_constructor\",\n            \"Tagged<FixedArray> parameters\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for JavaScriptFrameSummary.\"\n        },\n        {\n          \"name\": \"EnsureSourcePositionsAvailable\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Ensures that source positions are available.\"\n        },\n        {\n          \"name\": \"AreSourcePositionsAvailable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether source positions are available.\"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the receiver.\"\n        },\n        {\n          \"name\": \"function\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<JSFunction>\",\n          \"logic\": \"Returns the function.\"\n        },\n        {\n          \"name\": \"abstract_code\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<AbstractCode>\",\n          \"logic\": \"Returns the abstract code.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset.\"\n        },\n        {\n          \"name\": \"is_constructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is a constructor.\"\n        },\n        {\n          \"name\": \"parameters\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<FixedArray>\",\n          \"logic\": \"Returns the parameters.\"\n        },\n        {\n          \"name\": \"is_subject_to_debugging\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is subject to debugging.\"\n        },\n        {\n          \"name\": \"SourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source position.\"\n        },\n        {\n          \"name\": \"SourceStatementPosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source statement position.\"\n        },\n        {\n          \"name\": \"script\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the script.\"\n        },\n        {\n          \"name\": \"native_context\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<Context>\",\n          \"logic\": \"Returns the native context.\"\n        },\n        {\n          \"name\": \"CreateStackFrameInfo\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<StackFrameInfo>\",\n          \"logic\": \"Creates the stack frame info.\"\n        },\n        {\n          \"name\": \"WasmFrameSummary\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Handle<WasmTrustedInstanceData> instance_data\",\n            \"wasm::WasmCode* code\",\n            \"int byte_offset\",\n            \"int function_index\",\n            \"bool at_to_number_conversion\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for WasmFrameSummary.\"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the receiver.\"\n        },\n        {\n          \"name\": \"function_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the function index.\"\n        },\n        {\n          \"name\": \"code\",\n          \"parameters\": [],\n          \"return_type\": \"wasm::WasmCode*\",\n          \"logic\": \"Returns the code.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset.\"\n        },\n        {\n          \"name\": \"is_constructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is a constructor.\"\n        },\n        {\n          \"name\": \"is_subject_to_debugging\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is subject to debugging.\"\n        },\n        {\n          \"name\": \"SourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source position.\"\n        },\n        {\n          \"name\": \"SourceStatementPosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source statement position.\"\n        },\n        {\n          \"name\": \"script\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Script>\",\n          \"logic\": \"Returns the script.\"\n        },\n        {\n          \"name\": \"wasm_instance\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<WasmInstanceObject>\",\n          \"logic\": \"Returns the wasm instance.\"\n        },\n        {\n          \"name\": \"wasm_trusted_instance_data\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<WasmTrustedInstanceData>\",\n          \"logic\": \"Returns the wasm trusted instance data.\"\n        },\n        {\n          \"name\": \"native_context\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<Context>\",\n          \"logic\": \"Returns the native context.\"\n        },\n        {\n          \"name\": \"at_to_number_conversion\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it's at to number conversion.\"\n        },\n        {\n          \"name\": \"CreateStackFrameInfo\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<StackFrameInfo>\",\n          \"logic\": \"Creates the stack frame info.\"\n        },\n        {\n          \"name\": \"WasmInlinedFrameSummary\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Handle<WasmTrustedInstanceData> instance_data\",\n            \"int function_index\",\n            \"int op_wire_bytes_offset\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for WasmInlinedFrameSummary.\"\n        },\n        {\n          \"name\": \"wasm_instance\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<WasmInstanceObject>\",\n          \"logic\": \"Returns the wasm instance.\"\n        },\n        {\n          \"name\": \"wasm_trusted_instance_data\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<WasmTrustedInstanceData>\",\n          \"logic\": \"Returns the wasm trusted instance data.\"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the receiver.\"\n        },\n        {\n          \"name\": \"function_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the function index.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset.\"\n        },\n        {\n          \"name\": \"is_constructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is a constructor.\"\n        },\n        {\n          \"name\": \"is_subject_to_debugging\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is subject to debugging.\"\n        },\n        {\n          \"name\": \"script\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Script>\",\n          \"logic\": \"Returns the script.\"\n        },\n        {\n          \"name\": \"SourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source position.\"\n        },\n        {\n          \"name\": \"SourceStatementPosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source statement position.\"\n        },\n        {\n          \"name\": \"native_context\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<Context>\",\n          \"logic\": \"Returns the native context.\"\n        },\n        {\n          \"name\": \"CreateStackFrameInfo\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<StackFrameInfo>\",\n          \"logic\": \"Creates the stack frame info.\"\n        },\n        {\n          \"name\": \"BuiltinFrameSummary\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"Builtin\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for BuiltinFrameSummary.\"\n        },\n        {\n          \"name\": \"builtin\",\n          \"parameters\": [],\n          \"return_type\": \"Builtin\",\n          \"logic\": \"Returns the builtin.\"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the receiver.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset.\"\n        },\n        {\n          \"name\": \"is_constructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is a constructor.\"\n        },\n        {\n          \"name\": \"is_subject_to_debugging\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is subject to debugging.\"\n        },\n        {\n          \"name\": \"script\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the script.\"\n        },\n        {\n          \"name\": \"SourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source position.\"\n        },\n        {\n          \"name\": \"SourceStatementPosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source statement position.\"\n        },\n        {\n          \"name\": \"native_context\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<Context>\",\n          \"logic\": \"Returns the native context.\"\n        },\n        {\n          \"name\": \"CreateStackFrameInfo\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<StackFrameInfo>\",\n          \"logic\": \"Creates the stack frame info.\"\n        },\n        {\n          \"name\": \"WasmInterpretedFrameSummary\",\n          \"parameters\": [\n            \"Isolate*\",\n            \"Handle<WasmInstanceObject>\",\n            \"uint32_t function_index\",\n            \"int byte_offset\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for WasmInterpretedFrameSummary.\"\n        },\n        {\n          \"name\": \"wasm_instance\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<WasmInstanceObject>\",\n          \"logic\": \"Returns the wasm instance.\"\n        },\n        {\n          \"name\": \"instance_data\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<WasmTrustedInstanceData>\",\n          \"logic\": \"Returns the instance data.\"\n        },\n        {\n          \"name\": \"function_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the function index.\"\n        },\n        {\n          \"name\": \"byte_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the byte offset.\"\n        },\n        {\n          \"name\": \"receiver\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Object>\",\n          \"logic\": \"Returns the receiver.\"\n        },\n        {\n          \"name\": \"code_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the code offset.\"\n        },\n        {\n          \"name\": \"is_constructor\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is a constructor.\"\n        },\n        {\n          \"name\": \"is_subject_to_debugging\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is subject to debugging.\"\n        },\n        {\n          \"name\": \"SourcePosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source position.\"\n        },\n        {\n          \"name\": \"SourceStatementPosition\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the source statement position.\"\n        },\n        {\n          \"name\": \"script\",\n          \"parameters\": [],\n          \"return_type\": \"Handle<Script>\",\n          \"logic\": \"Returns the script.\"\n        },\n        {\n          \"name\": \"native_context\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<Context>\",\n          \"logic\": \"Returns the native context.\"\n        },\n        {\n          \"name\": \"CreateStackFrameInfo\",\n          \"parameters\": [],\n          \"return_type\": \"DirectHandle<StackFrameInfo>\",\n          \"logic\": \"Creates the stack frame info.\"\n        },\n        {\n          \"name\": \"FrameSummary\",\n          \"parameters\": [\n            \"type summ\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor.\"\n        },\n        {\n          \"name\": \"~FrameSummary\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor.\"\n        },\n        {\n          \"name\": \"GetTop\",\n          \"parameters\": [\n            \"const CommonFrame* frame\"\n          ],\n          \"return_type\": \"FrameSummary\",\n          \"logic\": \"Returns the topmost frame summary.\"\n        },\n        {\n          \"name\": \"GetBottom\",\n          \"parameters\": [\n            \"const CommonFrame* frame\"\n          ],\n          \"return_type\": \"FrameSummary\",\n          \"logic\": \"Returns the bottommost frame summary.\"\n        },\n        {\n          \"name\": \"GetSingle\",\n          \"parameters\": [\n            \"const CommonFrame* frame\"\n          ],\n          \"return_type\": \"FrameSummary\",\n          \"logic\": \"Returns the single frame summary.\"\n        },\n        {\n          \"name\": \"Get\",\n          \"parameters\": [\n            \"const CommonFrame* frame\",\n            \"int index\"\n          ],\n          \"return"
}