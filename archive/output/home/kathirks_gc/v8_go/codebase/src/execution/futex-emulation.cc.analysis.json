{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/futex-emulation.cc",
  "imports": [
    "src/execution/futex-emulation.h",
    "<limits>",
    "src/api/api-inl.h",
    "src/base/lazy-instance.h",
    "src/base/logging.h",
    "src/base/macros.h",
    "src/base/small-map.h",
    "src/execution/isolate.h",
    "src/execution/vm-state-inl.h",
    "src/handles/handles-inl.h",
    "src/numbers/conversions.h",
    "src/objects/js-array-buffer-inl.h",
    "src/objects/js-promise-inl.h",
    "src/objects/objects-inl.h",
    "src/tasks/cancelable-task.h"
  ],
  "classes": [
    {
      "name": "FutexWaitList",
      "properties": [
        "mutex_",
        "location_lists_",
        "isolate_promises_to_resolve_"
      ],
      "methods": [
        {
          "name": "FutexWaitList",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor.  Does nothing."
        },
        {
          "name": "FutexWaitList",
          "parameters": [
            "const FutexWaitList&"
          ],
          "return_type": "void",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const FutexWaitList&"
          ],
          "return_type": "FutexWaitList&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "AddNode",
          "parameters": [
            "FutexWaitListNode* node"
          ],
          "return_type": "void",
          "logic": "Adds a FutexWaitListNode to the list associated with its wait location."
        },
        {
          "name": "RemoveNode",
          "parameters": [
            "FutexWaitListNode* node"
          ],
          "return_type": "void",
          "logic": "Removes a FutexWaitListNode from the list associated with its wait location."
        },
        {
          "name": "ToWaitLocation",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr"
          ],
          "return_type": "void*",
          "logic": "Calculates the memory address within the ArrayBuffer to wait on based on the ArrayBuffer's backing store and the offset (addr)."
        },
        {
          "name": "DeleteAsyncWaiterNode",
          "parameters": [
            "FutexWaitListNode* node"
          ],
          "return_type": "FutexWaitListNode*",
          "logic": "Deletes an asynchronous waiter node, unlinking it from the list and returning the next node in the list."
        },
        {
          "name": "DeleteNodesForIsolate",
          "parameters": [
            "Isolate* isolate",
            "FutexWaitListNode** head",
            "FutexWaitListNode** tail"
          ],
          "return_type": "void",
          "logic": "Deletes all asynchronous waiter nodes associated with a specific isolate, updating the head and tail pointers of the list."
        },
        {
          "name": "Verify",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs internal consistency checks on the FutexWaitList data structures during debugging."
        },
        {
          "name": "NodeIsOnList",
          "parameters": [
            "FutexWaitListNode* node",
            "FutexWaitListNode* head"
          ],
          "return_type": "bool",
          "logic": "Checks if a given FutexWaitListNode is present in the linked list starting at head."
        },
        {
          "name": "mutex",
          "parameters": [],
          "return_type": "base::Mutex*",
          "logic": "Returns a pointer to the mutex that protects the wait list."
        }
      ]
    },
    {
      "name": "ResolveAsyncWaiterPromisesTask",
      "properties": [
        "isolate_"
      ],
      "methods": [
        {
          "name": "ResolveAsyncWaiterPromisesTask",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for ResolveAsyncWaiterPromisesTask, initializes isolate_."
        },
        {
          "name": "RunInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Overrides CancelableTask::RunInternal() to resolve promises for async waiters on the associated isolate."
        }
      ]
    },
    {
      "name": "AsyncWaiterTimeoutTask",
      "properties": [
        "node_"
      ],
      "methods": [
        {
          "name": "AsyncWaiterTimeoutTask",
          "parameters": [
            "CancelableTaskManager* cancelable_task_manager",
            "FutexWaitListNode* node"
          ],
          "return_type": "void",
          "logic": "Constructor for AsyncWaiterTimeoutTask, initializing the cancelable task manager and the FutexWaitListNode."
        },
        {
          "name": "RunInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Overrides CancelableTask::RunInternal() to handle timeouts for async waiters."
        }
      ]
    },
    {
      "name": "AtomicsWaitWakeHandle",
      "properties": [
        "isolate_",
        "stopped_"
      ],
      "methods": [
        {
          "name": "Wake",
          "parameters": [],
          "return_type": "void",
          "logic": "Wakes a waiting thread associated with the handle, used for stopping the wait operation from the AtomicsWaitCallback."
        }
      ]
    },
    {
      "name": "FutexWaitListNode",
      "properties": [
        "wait_location_",
        "waiting_",
        "async_state_",
        "prev_",
        "next_",
        "cond_",
        "interrupted_"
      ],
      "methods": [
        {
          "name": "FutexWaitListNode",
          "parameters": [
            "std::weak_ptr<BackingStore> backing_store",
            "void* wait_location",
            "DirectHandle<JSObject> promise",
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for FutexWaitListNode, initializes the node's state, including the wait location, promise, and isolate."
        },
        {
          "name": "CancelTimeoutTask",
          "parameters": [],
          "return_type": "bool",
          "logic": "Attempts to cancel the timeout task associated with an asynchronous waiter node."
        },
        {
          "name": "NotifyWake",
          "parameters": [],
          "return_type": "void",
          "logic": "Notifies a waiting thread, used for the synchronous wait operation."
        }
      ]
    },
    {
      "name": "FutexEmulation",
      "properties": [],
      "methods": [
        {
          "name": "WaitJs32",
          "parameters": [
            "Isolate* isolate",
            "WaitMode mode",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int32_t value",
            "double rel_timeout_ms"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Wrapper for Wait function for 32 bit values. Translates the return into javascript strings."
        },
        {
          "name": "WaitJs64",
          "parameters": [
            "Isolate* isolate",
            "WaitMode mode",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int64_t value",
            "double rel_timeout_ms"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Wrapper for Wait function for 64 bit values. Translates the return into javascript strings."
        },
        {
          "name": "WaitWasm32",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int32_t value",
            "int64_t rel_timeout_ns"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Wrapper for Wait function for WASM 32 bit values."
        },
        {
          "name": "WaitWasm64",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int64_t value",
            "int64_t rel_timeout_ns"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Wrapper for Wait function for WASM 64 bit values."
        },
        {
          "name": "Wait",
          "parameters": [
            "Isolate* isolate",
            "WaitMode mode",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "T value",
            "double rel_timeout_ms"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Template function to handle both 32 and 64 bit wait operations based on timeout in milliseconds. Converts milliseconds to nanoseconds.  Dispatches to the correct synchronous or asynchronous Wait function."
        },
        {
          "name": "Wait",
          "parameters": [
            "Isolate* isolate",
            "WaitMode mode",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "T value",
            "bool use_timeout",
            "int64_t rel_timeout_ns",
            "CallType call_type"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Template function to handle both 32 and 64 bit wait operations based on nanoseconds.  Dispatches to the correct synchronous or asynchronous Wait function."
        },
        {
          "name": "WaitSync",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "T value",
            "bool use_timeout",
            "int64_t rel_timeout_ns",
            "CallType call_type"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Template function to perform a synchronous wait operation. It checks the value in memory and waits until it changes or a timeout occurs."
        },
        {
          "name": "WaitAsync",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "T value",
            "bool use_timeout",
            "int64_t rel_timeout_ns",
            "CallType call_type"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Template function to perform an asynchronous wait operation. It creates a promise and waits until the value in memory changes or a timeout occurs."
        },
        {
          "name": "Wake",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr",
            "uint32_t num_waiters_to_wake"
          ],
          "return_type": "int",
          "logic": "Wakes a specified number of waiting threads on the specified address in the ArrayBuffer."
        },
        {
          "name": "Wake",
          "parameters": [
            "void* wait_location",
            "uint32_t num_waiters_to_wake"
          ],
          "return_type": "int",
          "logic": "Wakes a specified number of waiting threads on the given wait location."
        },
        {
          "name": "CleanupAsyncWaiterPromise",
          "parameters": [
            "FutexWaitListNode* node"
          ],
          "return_type": "void",
          "logic": "Cleans up the resources associated with an asynchronous waiter promise."
        },
        {
          "name": "ResolveAsyncWaiterPromise",
          "parameters": [
            "FutexWaitListNode* node"
          ],
          "return_type": "void",
          "logic": "Resolves a promise for an asynchronous waiter."
        },
        {
          "name": "ResolveAsyncWaiterPromises",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Resolves all promises for asynchronous waiters associated with the given isolate."
        },
        {
          "name": "HandleAsyncWaiterTimeout",
          "parameters": [
            "FutexWaitListNode* node"
          ],
          "return_type": "void",
          "logic": "Handles a timeout event for an asynchronous waiter."
        },
        {
          "name": "IsolateDeinit",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Cleans up resources associated with the given isolate when it is being deinitialized."
        },
        {
          "name": "NumWaitersForTesting",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr"
          ],
          "return_type": "int",
          "logic": "Returns the number of waiting threads for testing purposes."
        },
        {
          "name": "NumUnresolvedAsyncPromisesForTesting",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr"
          ],
          "return_type": "int",
          "logic": "Returns the number of unresolved async promises for a wait location, used for testing."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "WaitTimeoutInMs",
      "parameters": [
        "double timeout_ns"
      ],
      "return_type": "double",
      "logic": "Converts timeout in nanoseconds to milliseconds."
    },
    {
      "name": "WaitJsTranslateReturn",
      "parameters": [
        "Isolate* isolate",
        "Tagged<Object> res"
      ],
      "return_type": "Tagged<Object>",
      "logic": "Translates an integer return value from Wait into a corresponding JavaScript string (ok, not-equal, timed-out)."
    }
  ]
}