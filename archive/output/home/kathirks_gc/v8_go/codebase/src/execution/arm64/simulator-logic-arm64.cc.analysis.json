{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/arm64/simulator-logic-arm64.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n    \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/arm64/simulator-logic-arm64.cc\",\n    \"imports\": [\n        \"src/execution/arm64/simulator-arm64.h\",\n        \"cmath\",\n        \"src/numbers/conversions-inl.h\",\n        \"third_party/fp16/src/include/fp16.h\"\n    ],\n    \"classes\": [\n        {\n            \"name\": \"half\",\n            \"properties\": [\n                \"uint16_t bits_\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"half\",\n                    \"parameters\": [],\n                    \"return_type\": \"half\",\n                    \"logic\": \"Default constructor, initializes bits_ to 0.\"\n                },\n                {\n                    \"name\": \"half\",\n                    \"parameters\": [\n                        \"float f\"\n                    ],\n                    \"return_type\": \"half\",\n                    \"logic\": \"Constructor, converts a float to a half-precision float.\"\n                },\n                {\n                    \"name\": \"half\",\n                    \"parameters\": [\n                        \"double d\"\n                    ],\n                    \"return_type\": \"half\",\n                    \"logic\": \"Constructor, converts a double to a half-precision float.\"\n                },\n                {\n                    \"name\": \"half\",\n                    \"parameters\": [\n                        \"uint16_t b\"\n                    ],\n                    \"return_type\": \"half\",\n                    \"logic\": \"Constructor, initializes half with the provided 16 bits.\"\n                },\n                {\n                    \"name\": \"operator float\",\n                    \"parameters\": [],\n                    \"return_type\": \"float\",\n                    \"logic\": \"Conversion operator, converts a half-precision float to a float.\"\n                },\n                {\n                    \"name\": \"bits\",\n                    \"parameters\": [],\n                    \"return_type\": \"uint16_t\",\n                    \"logic\": \"Returns the raw bit representation of the half-precision float.\"\n                }\n            ]\n        }\n    ],\n    \"functions\": [\n        {\n            \"name\": \"FPDefaultNaN<half>\",\n            \"parameters\": [],\n            \"return_type\": \"half\",\n            \"logic\": \"Returns the default NaN value for half-precision floats.\"\n        },\n        {\n            \"name\": \"ToQuietNaN\",\n            \"parameters\": [\n                \"half num\"\n            ],\n            \"return_type\": \"half\",\n            \"logic\": \"Converts a half-precision float to a quiet NaN.\"\n        },\n        {\n            \"name\": \"isnormal<T>\",\n            \"parameters\": [\n                \"T f\"\n            ],\n            \"return_type\": \"bool\",\n            \"logic\": \"Checks if a number is normal using std::isnormal (generic implementation).\"\n        },\n        {\n            \"name\": \"isnormal<half>\",\n            \"parameters\": [\n                \"half f\"\n            ],\n            \"return_type\": \"bool\",\n            \"logic\": \"Checks if a half-precision float is normal using float16classify.\"\n        },\n        {\n            \"name\": \"copysign\",\n            \"parameters\": [\n                \"double a\",\n                \"double f\"\n            ],\n            \"return_type\": \"double\",\n            \"logic\": \"Returns a double with the magnitude of a and the sign of f.\"\n        },\n        {\n            \"name\": \"copysign\",\n            \"parameters\": [\n                \"double a\",\n                \"float f\"\n            ],\n            \"return_type\": \"float\",\n            \"logic\": \"Returns a float with the magnitude of a and the sign of f.\"\n        },\n        {\n            \"name\": \"copysign\",\n            \"parameters\": [\n                \"double a\",\n                \"half f\"\n            ],\n            \"return_type\": \"half\",\n            \"logic\": \"Returns a half with the magnitude of a and the sign of f.\"\n        },\n        {\n            \"name\": \"FPRoundToDouble\",\n            \"parameters\": [\n                \"int64_t sign\",\n                \"int64_t exponent\",\n                \"uint64_t mantissa\",\n                \"FPRounding round_mode\"\n            ],\n            \"return_type\": \"double\",\n            \"logic\": \"Rounds a floating-point number (sign, exponent, mantissa) to a double.\"\n        },\n        {\n            \"name\": \"FPRoundToFloat\",\n            \"parameters\": [\n                \"int64_t sign\",\n                \"int64_t exponent\",\n                \"uint64_t mantissa\",\n                \"FPRounding round_mode\"\n            ],\n            \"return_type\": \"float\",\n            \"logic\": \"Rounds a floating-point number (sign, exponent, mantissa) to a float.\"\n        },\n        {\n            \"name\": \"FPRoundToFloat16\",\n            \"parameters\": [\n                \"int64_t sign\",\n                \"int64_t exponent\",\n                \"uint64_t mantissa\",\n                \"FPRounding round_mode\"\n            ],\n            \"return_type\": \"float16\",\n            \"logic\": \"Rounds a floating-point number (sign, exponent, mantissa) to a float16.\"\n        },\n        {\n            \"name\": \"Simulator::FixedToDouble\",\n            \"parameters\": [\n                \"int64_t src\",\n                \"int fbits\",\n                \"FPRounding round\"\n            ],\n            \"return_type\": \"double\",\n            \"logic\": \"Converts a fixed-point number to a double. Handles negative numbers and special case INT64_MIN by converting to a UFixedToDouble and then applying the proper sign.\"\n        },\n        {\n            \"name\": \"Simulator::UFixedToDouble\",\n            \"parameters\": [\n                \"uint64_t src\",\n                \"int fbits\",\n                \"FPRounding round\"\n            ],\n            \"return_type\": \"double\",\n            \"logic\": \"Converts an unsigned fixed-point number to a double, using FPRoundToDouble to perform rounding and exponent calculation.\"\n        },\n        {\n            \"name\": \"Simulator::FixedToFloat\",\n            \"parameters\": [\n                \"int64_t src\",\n                \"int fbits\",\n                \"FPRounding round\"\n            ],\n            \"return_type\": \"float\",\n            \"logic\": \"Converts a fixed-point number to a float. Handles negative numbers and special case INT64_MIN by converting to a UFixedToFloat and then applying the proper sign.\"\n        },\n        {\n            \"name\": \"Simulator::UFixedToFloat\",\n            \"parameters\": [\n                \"uint64_t src\",\n                \"int fbits\",\n                \"FPRounding round\"\n            ],\n            \"return_type\": \"float\",\n            \"logic\": \"Converts an unsigned fixed-point number to a float, using FPRoundToFloat to perform rounding and exponent calculation.\"\n        },\n        {\n            \"name\": \"Simulator::FixedToFloat16\",\n            \"parameters\": [\n                \"int64_t src\",\n                \"int fbits\",\n                \"FPRounding round\"\n            ],\n            \"return_type\": \"float16\",\n            \"logic\": \"Converts a fixed-point number to a float16. Handles negative numbers and special case INT64_MIN by converting to a UFixedToFloat16 and then applying the proper sign.\"\n        },\n        {\n            \"name\": \"Simulator::UFixedToFloat16\",\n            \"parameters\": [\n                \"uint64_t src\",\n                \"int fbits\",\n                \"FPRounding round\"\n            ],\n            \"return_type\": \"float16\",\n            \"logic\": \"Converts an unsigned fixed-point number to a float16, using FPRoundToFloat16 to perform rounding and exponent calculation.\"\n        },\n        {\n            \"name\": \"Simulator::FPToDouble\",\n            \"parameters\": [\n                \"float value\"\n            ],\n            \"return_type\": \"double\",\n            \"logic\": \"Converts a float to a double.  Handles NAN, ZERO, NORMAL, SUBNORMAL, and INFINITE values.\"\n        },\n        {\n            \"name\": \"Simulator::FPToFloat\",\n            \"parameters\": [\n                \"float16 value\"\n            ],\n            \"return_type\": \"float\",\n            \"logic\": \"Converts a float16 to a float. Handles NAN, ZERO, NORMAL, SUBNORMAL, and INFINITE values.\"\n        },\n        {\n            \"name\": \"Simulator::FPToFloat16\",\n            \"parameters\": [\n                \"float value\",\n                \"FPRounding round_mode\"\n            ],\n            \"return_type\": \"float16\",\n            \"logic\": \"Converts a float to a float16. Handles NAN, ZERO, INFINITE, NORMAL, and SUBNORMAL values.\"\n        },\n        {\n            \"name\": \"Simulator::FPToFloat16\",\n            \"parameters\": [\n                \"double value\",\n                \"FPRounding round_mode\"\n            ],\n            \"return_type\": \"float16\",\n            \"logic\": \"Converts a double to a float16. Handles NAN, ZERO, INFINITE, NORMAL, and SUBNORMAL values.\"\n        },\n        {\n            \"name\": \"Simulator::FPToFloat\",\n            \"parameters\": [\n                \"double value\",\n                \"FPRounding round_mode\"\n            ],\n            \"return_type\": \"float\",\n            \"logic\": \"Converts a double to a float. Handles NAN, ZERO, INFINITE, NORMAL, and SUBNORMAL values. Only FPTieEven and FPRoundOdd are supported round modes.\"\n        },\n        {\n            \"name\": \"Simulator::ld1\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads data from memory into a vector register (dst), reading a single lane's worth of data for each lane in the vector, incrementing the memory address by the lane size after each read.\"\n        },\n        {\n            \"name\": \"Simulator::ld1\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"int index\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a single lane of data from memory into a specific index of a vector register (dst).\"\n        },\n        {\n            \"name\": \"Simulator::ld1r\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads data from memory into a vector register (dst), replicating the data at the given address into all lanes of the vector.\"\n        },\n        {\n            \"name\": \"Simulator::ld2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"uint64_t addr1\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads data from memory into two vector registers (dst1, dst2), interleaving the data. It reads a lane from address addr1 into dst1 and the next lane starting esize bytes after addr1 into dst2.\"\n        },\n        {\n            \"name\": \"Simulator::ld2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"int index\",\n                \"uint64_t addr1\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a single lane of data into two vector registers (dst1, dst2) at a specific index, interleaving from addr1 and addr2\"\n        },\n        {\n            \"name\": \"Simulator::ld2r\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads two registers with the same value at two addresses addr and addr + esize for each lane. Where esize is the LaneSizeInBytesFromFormat.\"\n        },\n        {\n            \"name\": \"Simulator::ld3\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"uint64_t addr1\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads three registers with interleaved values in a similar manner to ld2, but three instead of two.\"\n        },\n        {\n            \"name\": \"Simulator::ld3\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"int index\",\n                \"uint64_t addr1\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads 3 registers with one lane each from addr1, addr2, addr3 for the given index\"\n        },\n        {\n            \"name\": \"Simulator::ld3r\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads 3 registers with repeated values as in ld2r.\"\n        },\n        {\n            \"name\": \"Simulator::ld4\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"LogicVRegister dst4\",\n                \"uint64_t addr1\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads four registers with interleaved values.\"\n        },\n        {\n            \"name\": \"Simulator::ld4\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"LogicVRegister dst4\",\n                \"int index\",\n                \"uint64_t addr1\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads 4 registers with one lane each from addr1, addr2, addr3, addr4 for the given index\"\n        },\n        {\n            \"name\": \"Simulator::ld4r\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst1\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"LogicVRegister dst4\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads four registers with repeated values.\"\n        },\n        {\n            \"name\": \"Simulator::st1\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister src\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores data from a vector register (src) to memory, writing a single lane's worth of data for each lane in the vector.\"\n        },\n        {\n            \"name\": \"Simulator::st1\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister src\",\n                \"int index\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores a single lane of data from a specific index of a vector register (src) to memory.\"\n        },\n        {\n            \"name\": \"Simulator::st2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"LogicVRegister dst2\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores interleaved lanes to dst and dst2 registers, to addresses addr and addr2 respectively.\"\n        },\n        {\n            \"name\": \"Simulator::st2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"LogicVRegister dst2\",\n                \"int index\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Store lanes from registers dst and dst2 to addresses addr and addr + esize, for the given index.\"\n        },\n        {\n            \"name\": \"Simulator::st3\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores data from three registers into memory in an interleaved manner.\"\n        },\n        {\n            \"name\": \"Simulator::st3\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"int index\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores lanes from 3 registers to memory at addresses offset by esize * register number, from the supplied address, for the given index.\"\n        },\n        {\n            \"name\": \"Simulator::st4\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"LogicVRegister dst4\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores data from four registers into memory in an interleaved manner.\"\n        },\n        {\n            \"name\": \"Simulator::st4\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"LogicVRegister dst2\",\n                \"LogicVRegister dst3\",\n                \"LogicVRegister dst4\",\n                \"int index\",\n                \"uint64_t addr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Store lanes from registers dst, dst2, dst3 and dst4 to addresses offset by esize * register number, from the supplied address, for the given index.\"\n        },\n        {\n            \"name\": \"Simulator::cmp\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"Condition cond\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Compares two vector registers (src1, src2) lane by lane based on the provided condition (cond). Stores the result (all 1's or all 0's) in the corresponding lane of the destination register (dst).\"\n        },\n        {\n            \"name\": \"Simulator::cmp\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"int imm\",\n                \"Condition cond\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Compares a vector register (src1) with an immediate value (imm) lane by lane based on the provided condition (cond). Uses dup_immediate to put the immediate value in a register before running cmp against src1.\"\n        },\n        {\n            \"name\": \"Simulator::cmptst\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Performs a bitwise AND on corresponding lanes of two vector registers (src1, src2). If the result is non-zero, sets the corresponding lane in the destination register (dst) to all 1's; otherwise, sets it to all 0's.\"\n        },\n        {\n            \"name\": \"Simulator::add\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Adds the corresponding lanes of two vector registers (src1, src2). Stores the result in the corresponding lane of the destination register (dst). Tests for unsigned and signed saturation.\"\n        },\n        {\n            \"name\": \"Simulator::addp\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Pairwise addition. Interleaves src1 and src2 into temp1 and temp2, adds temp1 and temp2, and stores the result in dst.\"\n        },\n        {\n            \"name\": \"Simulator::mla\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Multiply-accumulate: multiplies src1 and src2, adds the result to dst, and stores the sum in dst.\"\n        },\n        {\n            \"name\": \"Simulator::mls\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Multiply-subtract: multiplies src1 and src2, subtracts the result from dst, and stores the difference in dst.\"\n        },\n        {\n            \"name\": \"Simulator::mul\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Multiplies corresponding lanes of two vector registers (src1, src2). Stores the result in the corresponding lane of the destination register (dst).\"\n        },\n        {\n            \"name\": \"Simulator::mul\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Multiply a vector register by a scalar value in another vector register.\"\n        },\n        {\n            \"name\": \"Simulator::mla\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Scalar multiply and accumulate.\"\n        },\n        {\n            \"name\": \"Simulator::mls\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Scalar multiply and subtract.\"\n        },\n        {\n            \"name\": \"Simulator::smull\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed multiply long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::smull2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed multiply long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::umull\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Unsigned multiply long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::umull2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Unsigned multiply long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::smlal\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed multiply accumulate long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::smlal2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed multiply accumulate long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::umlal\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Unsigned multiply accumulate long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::umlal2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Unsigned multiply accumulate long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::smlsl\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed multiply subtract long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::smlsl2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed multiply subtract long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::umlsl\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Unsigned multiply subtract long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::umlsl2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Unsigned multiply subtract long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmull\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmull2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmlal\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply accumulate long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmlal2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n            \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply accumulate long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmlsl\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply subtract long - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmlsl2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply subtract long second half - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqdmulh\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating doubling multiply high - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::sqrdmulh\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\",\n                \"int index\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Signed saturating rounding doubling multiply high - scalar.\"\n        },\n        {\n            \"name\": \"Simulator::PolynomialMult\",\n            \"parameters\": [\n                \"uint8_t op1\",\n                \"uint8_t op2\"\n            ],\n            \"return_type\": \"uint16_t\",\n            \"logic\": \"Calculates the polynomial multiplication of two 8-bit operands.\"\n        },\n        {\n            \"name\": \"Simulator::pmul\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Performs polynomial multiplication on the vector values using the supplied source registers. The results are put in the supplied destination register.\"\n        },\n        {\n            \"name\": \"Simulator::pmull\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Performs polynomial multiplication on the source vector values, and puts the results in dst. Input vectors vform is half the size of destination vectors vform.\"\n        },\n        {\n            \"name\": \"Simulator::pmull2\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Performs polynomial multiplication on the vector values from the second half of the source registers, and puts the results in the destination register.\"\n        },\n        {\n            \"name\": \"Simulator::sub\",\n            \"parameters\": [\n                \"VectorFormat vform\",\n                \"LogicVRegister dst\",\n                \"const LogicVRegister& src1\",\n                \"const LogicVRegister& src2\"\n            ],\n            \"return_type\": \"LogicVRegister\",\n            \"logic\": \"Subtracts the corresponding lanes of two vector registers (src1, src2). Stores the result in the corresponding lane of the destination register (dst). Tests for unsigned and signed saturation.\"\n        },\n        {\n            \"name\": \"Simulator::and_\",\n            \"parameters\": [\n"
}