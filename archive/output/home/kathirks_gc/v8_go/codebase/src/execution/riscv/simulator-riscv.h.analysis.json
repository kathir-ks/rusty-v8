{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/riscv/simulator-riscv.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/riscv/simulator-riscv.h\",\n  \"imports\": [\n    \"src/common/globals.h\",\n    \"src/base/hashmap.h\",\n    \"src/codegen/assembler.h\",\n    \"src/codegen/constants-arch.h\",\n    \"src/execution/simulator-base.h\",\n    \"src/utils/allocation.h\",\n    \"src/utils/boxed-float.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CachePage\",\n      \"properties\": [\n        \"LINE_VALID\",\n        \"LINE_INVALID\",\n        \"kPageShift\",\n        \"kPageSize\",\n        \"kPageMask\",\n        \"kLineShift\",\n        \"kLineLength\",\n        \"kLineMask\",\n        \"data_[kPageSize]\",\n        \"validity_map_[kValidityMapSize]\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CachePage\",\n          \"parameters\": [],\n          \"return_type\": \"CachePage\",\n          \"logic\": \"Constructor. Initializes the validity map to LINE_INVALID, indicating that the cached data is initially invalid.\"\n        },\n        {\n          \"name\": \"ValidityByte\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns a pointer to the validity byte for the given offset. Used to track whether a cache line is valid.\"\n        },\n        {\n          \"name\": \"CachedData\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns a pointer to the cached data at the given offset.  This is where the actual data is stored.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimInstructionBase\",\n      \"properties\": [\n        \"operand_\",\n        \"instr_\",\n        \"type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"InstructionType\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns the instruction type.\"\n        },\n        {\n          \"name\": \"instr\",\n          \"parameters\": [],\n          \"return_type\": \"Instruction*\",\n          \"logic\": \"Returns a pointer to the underlying Instruction object.\"\n        },\n        {\n          \"name\": \"operand\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the operand of the instruction.\"\n        },\n        {\n          \"name\": \"SimInstructionBase\",\n          \"parameters\": [],\n          \"return_type\": \"SimInstructionBase\",\n          \"logic\": \"Default constructor. Initializes member variables.\"\n        },\n        {\n          \"name\": \"SimInstructionBase\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"SimInstructionBase\",\n          \"logic\": \"Constructor that takes an Instruction pointer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimInstruction\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"SimInstruction\",\n          \"parameters\": [],\n          \"return_type\": \"SimInstruction\",\n          \"logic\": \"Default constructor.\"\n        },\n        {\n          \"name\": \"SimInstruction\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"SimInstruction\",\n          \"logic\": \"Constructor that takes an Instruction pointer. Assigns the instruction to the current SimInstruction object\"\n        },\n        {\n          \"name\": \"operator=\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"SimInstruction&\",\n          \"logic\": \"Assignment operator. Copies data from the given Instruction to the SimInstruction, allowing for easy access to instruction details\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simulator\",\n      \"properties\": [\n        \"registers_[kNumSimuRegisters]\",\n        \"FPUregisters_[kNumFPURegisters]\",\n        \"FCSR_\",\n        \"stack_\",\n        \"stack_limit_\",\n        \"pc_modified_\",\n        \"icount_\",\n        \"watch_address_\",\n        \"watch_value_\",\n        \"break_count_\",\n        \"trace_buf_\",\n        \"last_debugger_input_\",\n        \"isolate_\",\n        \"builtins_\",\n        \"watched_stops_[kMaxStopCode + 1]\",\n        \"local_monitor_\",\n        \"global_monitor_thread_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Simulator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Constructor. Initializes the simulator state, including registers, stack, and other internal data structures.\"\n        },\n        {\n          \"name\": \"~Simulator\",\n          \"parameters\": [],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Destructor. Frees allocated memory and cleans up resources used by the simulator.\"\n        },\n        {\n          \"name\": \"current\",\n          \"parameters\": [\n            \"v8::internal::Isolate* isolate\"\n          ],\n          \"return_type\": \"Simulator*\",\n          \"logic\": \"Returns the currently executing Simulator instance for the given isolate.\"\n        },\n        {\n          \"name\": \"set_register\",\n          \"parameters\": [\n            \"int reg\",\n            \"sreg_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the specified integer register.\"\n        },\n        {\n          \"name\": \"set_register_word\",\n          \"parameters\": [\n            \"int reg\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the specified integer register using a 32-bit value.\"\n        },\n        {\n          \"name\": \"get_register\",\n          \"parameters\": [\n            \"int reg\"\n          ],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of the specified integer register.\"\n        },\n        {\n          \"name\": \"get_double_from_register_pair\",\n          \"parameters\": [\n            \"int reg\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Retrieves a double value stored in a register pair. Not fully described, implementation missing.\"\n        },\n        {\n          \"name\": \"set_fpu_register\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"set_fpu_register_word\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the lower 32 bits value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"set_fpu_register_hi_word\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the higher 32 bits value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"set_fpu_register_float\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"float value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the float value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"set_fpu_register_float\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"Float32 value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the float value of the specified FPU register from Float32.\"\n        },\n        {\n          \"name\": \"set_fpu_register_double\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"double value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the double value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"set_fpu_register_double\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"Float64 value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the double value of the specified FPU register from Float64.\"\n        },\n        {\n          \"name\": \"get_fpu_register\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_word\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the lower 32bit value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_signed_word\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the lower 32bit signed value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_hi_word\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the higher 32 bit value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_float\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the float value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_Float32\",\n          \"parameters\": [\n            \"int fpureg\",\n            \"bool check_nanbox\"\n          ],\n          \"return_type\": \"Float32\",\n          \"logic\": \"Returns the Float32 value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_double\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"get_fpu_register_Float64\",\n          \"parameters\": [\n            \"int fpureg\"\n          ],\n          \"return_type\": \"Float64\",\n          \"logic\": \"Returns the Float64 value of the specified FPU register.\"\n        },\n        {\n          \"name\": \"read_csr_value\",\n          \"parameters\": [\n            \"uint32_t csr\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Reads the value of the specified Control and Status Register (CSR).\"\n        },\n        {\n          \"name\": \"write_csr_value\",\n          \"parameters\": [\n            \"uint32_t csr\",\n            \"reg_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes the value of the specified Control and Status Register (CSR).\"\n        },\n        {\n          \"name\": \"set_csr_bits\",\n          \"parameters\": [\n            \"uint32_t csr\",\n            \"reg_t flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the specified bits in the Control and Status Register (CSR).\"\n        },\n        {\n          \"name\": \"clear_csr_bits\",\n          \"parameters\": [\n            \"uint32_t csr\",\n            \"reg_t flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the specified bits in the Control and Status Register (CSR).\"\n        },\n        {\n          \"name\": \"set_fflags\",\n          \"parameters\": [\n            \"uint32_t flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets floating point flags.\"\n        },\n        {\n          \"name\": \"clear_fflags\",\n          \"parameters\": [\n            \"int32_t flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clear floating point flags.\"\n        },\n        {\n          \"name\": \"get_vregister\",\n          \"parameters\": [\n            \"int vreg\"\n          ],\n          \"return_type\": \"__int128_t\",\n          \"logic\": \"Returns the value of the specified Vector register.\"\n        },\n        {\n          \"name\": \"rvv_vlen\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector Length.\"\n        },\n        {\n          \"name\": \"rvv_vtype\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector Type.\"\n        },\n        {\n          \"name\": \"rvv_vl\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector Length.\"\n        },\n        {\n          \"name\": \"rvv_vstart\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector Start.\"\n        },\n        {\n          \"name\": \"rvv_vxsat\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector XSaturate.\"\n        },\n        {\n          \"name\": \"rvv_vxrm\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector VXRM(Rounding Mode).\"\n        },\n        {\n          \"name\": \"rvv_vcsr\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector VCSR(Control and Status Register).\"\n        },\n        {\n          \"name\": \"rvv_vlenb\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector LENB(Length in bytes).\"\n        },\n        {\n          \"name\": \"rvv_zimm\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the Zero Immediate.\"\n        },\n        {\n          \"name\": \"rvv_vlmul\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the Vector LMUL.\"\n        },\n        {\n          \"name\": \"rvv_vflmul\",\n          \"parameters\": [],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the Vector FLMUL.\"\n        },\n        {\n          \"name\": \"rvv_vsew\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the Vector SEW.\"\n        },\n        {\n          \"name\": \"rvv_sew_s\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Return the SEW string\"\n        },\n        {\n          \"name\": \"rvv_lmul_s\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Return the LMUL string\"\n        },\n        {\n          \"name\": \"rvv_sew\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the Vector SEW.\"\n        },\n        {\n          \"name\": \"rvv_vlmax\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the Vector VLMAX(Max Vector Length).\"\n        },\n        {\n          \"name\": \"get_dynamic_rounding_mode\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Gets the current dynamic rounding mode from FCSR.\"\n        },\n        {\n          \"name\": \"test_fflags_bits\",\n          \"parameters\": [\n            \"uint32_t mask\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tests specified bits in the FFLAGS register (FCSR).\"\n        },\n        {\n          \"name\": \"RoundF2FHelper\",\n          \"parameters\": [\n            \"float input_val\",\n            \"int rmode\"\n          ],\n          \"return_type\": \"float\",\n          \"logic\": \"Helper function for float to float rounding\"\n        },\n        {\n          \"name\": \"RoundF2FHelper\",\n          \"parameters\": [\n            \"double input_val\",\n            \"int rmode\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Helper function for double to double rounding.\"\n        },\n        {\n          \"name\": \"RoundF2IHelper\",\n          \"parameters\": [\n            \"F_TYPE original\",\n            \"int rmode\"\n          ],\n          \"return_type\": \"I_TYPE\",\n          \"logic\": \"Helper function for floating-point to integer rounding.\"\n        },\n        {\n          \"name\": \"FMaxMinHelper\",\n          \"parameters\": [\n            \"T a\",\n            \"T b\",\n            \"MaxMinKind kind\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Helper function for finding the maximum or minimum between two floating point numbers.\"\n        },\n        {\n          \"name\": \"CompareFHelper\",\n          \"parameters\": [\n            \"T input1\",\n            \"T input2\",\n            \"FPUCondition cc\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Helper function for floating-point comparisons.\"\n        },\n        {\n          \"name\": \"set_pc\",\n          \"parameters\": [\n            \"sreg_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the program counter (PC) register to the given value.\"\n        },\n        {\n          \"name\": \"get_pc\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of the program counter (PC) register.\"\n        },\n        {\n          \"name\": \"get_sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the stack pointer (SP) value.\"\n        },\n        {\n          \"name\": \"StackLimit\",\n          \"parameters\": [\n            \"uintptr_t c_limit\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Returns the stack limit for the simulator, including a safety margin.\"\n        },\n        {\n          \"name\": \"StackBase\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Returns the base address of the stack used by the simulator.\"\n        },\n        {\n          \"name\": \"GetCentralStackView\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Return central stack view, without additional safety margins.\"\n        },\n        {\n          \"name\": \"IterateRegistersAndStack\",\n          \"parameters\": [\n            \"::heap::base::StackVisitor* visitor\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through registers and the stack, calling the visitor function on each entry.\"\n        },\n        {\n          \"name\": \"DoSwitchStackLimit\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pseudo instruction for switching stack limit.\"\n        },\n        {\n          \"name\": \"Execute\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes RISC-V instructions until the PC reaches end_sim_pc.\"\n        },\n        {\n          \"name\": \"set_last_debugger_input\",\n          \"parameters\": [\n            \"char* input\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the last debugger input string.\"\n        },\n        {\n          \"name\": \"last_debugger_input\",\n          \"parameters\": [],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns the last debugger input string.\"\n        },\n        {\n          \"name\": \"SetRedirectInstruction\",\n          \"parameters\": [\n            \"Instruction* instruction\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the redirect instruction.\"\n        },\n        {\n          \"name\": \"ICacheMatch\",\n          \"parameters\": [\n            \"void* one\",\n            \"void* two\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks whether two addresses match in the instruction cache.\"\n        },\n        {\n          \"name\": \"FlushICache\",\n          \"parameters\": [\n            \"base::CustomMatcherHashMap* i_cache\",\n            \"void* start\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Flushes the instruction cache for the given address range.\"\n        },\n        {\n          \"name\": \"has_bad_pc\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if pc register contains one of the 'special_values'.\"\n        },\n        {\n          \"name\": \"CallImpl\",\n          \"parameters\": [\n            \"Address entry\",\n            \"CallArgument* args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs the actual function call within the simulator. RISCV64\"\n        },\n        {\n          \"name\": \"CallAnyCTypeFunction\",\n          \"parameters\": [\n            \"Address target_address\",\n            \"const EncodedCSignature& signature\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls any c type function.\"\n        },\n        {\n          \"name\": \"ReadReturn\",\n          \"parameters\": [],\n          \"return_type\": \"T\",\n          \"logic\": \"Reads the return value of the function call (floating point types).\"\n        },\n        {\n          \"name\": \"ReadReturn\",\n          \"parameters\": [],\n          \"return_type\": \"T\",\n          \"logic\": \"Reads the return value of the function call (non floating point types).\"\n        },\n        {\n          \"name\": \"Format\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"const char* format\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints an error message and stops execution due to an unsupported instruction.\"\n        },\n        {\n          \"name\": \"ProbeMemory\",\n          \"parameters\": [\n            \"uintptr_t address\",\n            \"uintptr_t access_size\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Probes if an address range can be read.\"\n        },\n        {\n          \"name\": \"ReadMem\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Reads a value of type T from memory at the given address.\"\n        },\n        {\n          \"name\": \"WriteMem\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"T value\",\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a value of type T to memory at the given address.\"\n        },\n        {\n          \"name\": \"amo\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"OP f\",\n            \"Instruction* instr\",\n            \"TraceType t\"\n          ],\n          \"return_type\": \"T\",\n          \"logic\": \"Performs an atomic memory operation at the given address.\"\n        },\n        {\n          \"name\": \"DieOrDebug\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Helper for debugging memory access.\"\n        },\n        {\n          \"name\": \"TraceRegWr\",\n          \"parameters\": [\n            \"sreg_t value\",\n            \"TraceType t\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces register writes.\"\n        },\n        {\n          \"name\": \"TraceMemWr\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"sreg_t value\",\n            \"TraceType t\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory writes.\"\n        },\n        {\n          \"name\": \"TraceMemRd\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"T value\",\n            \"sreg_t reg_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory reads.\"\n        },\n        {\n          \"name\": \"TraceMemRdDouble\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"double value\",\n            \"int64_t reg_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory reads for double values.\"\n        },\n        {\n          \"name\": \"TraceMemRdDouble\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"Float64 value\",\n            \"int64_t reg_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory reads for Float64 values.\"\n        },\n        {\n          \"name\": \"TraceMemRdFloat\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"Float32 value\",\n            \"int64_t reg_value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory reads for Float32 values.\"\n        },\n        {\n          \"name\": \"TraceMemWr\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"T value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory writes.\"\n        },\n        {\n          \"name\": \"TraceMemWrDouble\",\n          \"parameters\": [\n            \"sreg_t addr\",\n            \"double value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces memory writes.\"\n        },\n        {\n          \"name\": \"rs1_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rs1 operand.\"\n        },\n        {\n          \"name\": \"rs1\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rs1 register.\"\n        },\n        {\n          \"name\": \"frs1\",\n          \"parameters\": [],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the float value of rs1 register.\"\n        },\n        {\n          \"name\": \"drs1\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value of rs1 register.\"\n        },\n        {\n          \"name\": \"frs1_boxed\",\n          \"parameters\": [],\n          \"return_type\": \"Float32\",\n          \"logic\": \"Returns the Float32 value of rs1 register (boxed).\"\n        },\n        {\n          \"name\": \"drs1_boxed\",\n          \"parameters\": [],\n          \"return_type\": \"Float64\",\n          \"logic\": \"Returns the Float64 value of rs1 register (boxed).\"\n        },\n        {\n          \"name\": \"rs2_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rs2 operand.\"\n        },\n        {\n          \"name\": \"rs2\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rs2 register.\"\n        },\n        {\n          \"name\": \"frs2\",\n          \"parameters\": [],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the float value of rs2 register.\"\n        },\n        {\n          \"name\": \"drs2\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value of rs2 register.\"\n        },\n        {\n          \"name\": \"frs2_boxed\",\n          \"parameters\": [],\n          \"return_type\": \"Float32\",\n          \"logic\": \"Returns the Float32 value of rs2 register (boxed).\"\n        },\n        {\n          \"name\": \"drs2_boxed\",\n          \"parameters\": [],\n          \"return_type\": \"Float64\",\n          \"logic\": \"Returns the Float64 value of rs2 register (boxed).\"\n        },\n        {\n          \"name\": \"rs3_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rs3 operand.\"\n        },\n        {\n          \"name\": \"rs3\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rs3 register.\"\n        },\n        {\n          \"name\": \"frs3\",\n          \"parameters\": [],\n          \"return_type\": \"float\",\n          \"logic\": \"Returns the float value of rs3 register.\"\n        },\n        {\n          \"name\": \"drs3\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value of rs3 register.\"\n        },\n        {\n          \"name\": \"frs3_boxed\",\n          \"parameters\": [],\n          \"return_type\": \"Float32\",\n          \"logic\": \"Returns the Float32 value of rs3 register (boxed).\"\n        },\n        {\n          \"name\": \"drs3_boxed\",\n          \"parameters\": [],\n          \"return_type\": \"Float64\",\n          \"logic\": \"Returns the Float64 value of rs3 register (boxed).\"\n        },\n        {\n          \"name\": \"rd_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rd operand.\"\n        },\n        {\n          \"name\": \"frd_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for frd operand.\"\n        },\n        {\n          \"name\": \"rvc_rs1_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rvc_rs1 operand.\"\n        },\n        {\n          \"name\": \"rvc_rs1\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rvc_rs1 register.\"\n        },\n        {\n          \"name\": \"rvc_rs2_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rvc_rs2 operand.\"\n        },\n        {\n          \"name\": \"rvc_rs2\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rvc_rs2 register.\"\n        },\n        {\n          \"name\": \"rvc_drs2\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value of rvc_rs2 register.\"\n        },\n        {\n          \"name\": \"rvc_rs1s_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rvc_rs1s operand.\"\n        },\n        {\n          \"name\": \"rvc_rs1s\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rvc_rs1s register.\"\n        },\n        {\n          \"name\": \"rvc_rs2s_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rvc_rs2s operand.\"\n        },\n        {\n          \"name\": \"rvc_rs2s\",\n          \"parameters\": [],\n          \"return_type\": \"sreg_t\",\n          \"logic\": \"Returns the value of rvc_rs2s register.\"\n        },\n        {\n          \"name\": \"rvc_drs2s\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value of rvc_rs2s register.\"\n        },\n        {\n          \"name\": \"rvc_rd_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rvc_rd operand.\"\n        },\n        {\n          \"name\": \"rvc_frd_reg\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the register number for rvc_frd operand.\"\n        },\n        {\n          \"name\":"
}