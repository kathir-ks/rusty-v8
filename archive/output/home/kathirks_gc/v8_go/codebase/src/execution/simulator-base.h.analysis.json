{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/simulator-base.h",
  "imports": [
    "<type_traits>",
    "include/v8-fast-api-calls.h",
    "src/base/hashmap.h",
    "src/common/globals.h",
    "src/execution/isolate.h"
  ],
  "classes": [
    {
      "name": "SimulatorBase",
      "properties": [
        "redirection_mutex_",
        "redirection_",
        "i_cache_mutex_",
        "i_cache_"
      ],
      "methods": [
        {
          "name": "InitializeOncePerProcess",
          "parameters": [],
          "return_type": "void",
          "logic": "Called on process start to initialize the simulator."
        },
        {
          "name": "GlobalTearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Called on process exit to clean up simulator resources."
        },
        {
          "name": "redirection_mutex",
          "parameters": [],
          "return_type": "base::Mutex*",
          "logic": "Returns the redirection mutex."
        },
        {
          "name": "redirection",
          "parameters": [],
          "return_type": "Redirection*",
          "logic": "Returns the redirection object."
        },
        {
          "name": "set_redirection",
          "parameters": [
            "Redirection* r"
          ],
          "return_type": "void",
          "logic": "Sets the redirection object."
        },
        {
          "name": "i_cache_mutex",
          "parameters": [],
          "return_type": "base::Mutex*",
          "logic": "Returns the instruction cache mutex."
        },
        {
          "name": "i_cache",
          "parameters": [],
          "return_type": "base::CustomMatcherHashMap*",
          "logic": "Returns the instruction cache."
        },
        {
          "name": "RedirectExternalReference",
          "parameters": [
            "Address external_function",
            "ExternalReference::Type type"
          ],
          "return_type": "Address",
          "logic": "Creates a trampoline to a given C function callable from generated code. It handles the redirection of external function calls made from simulated code to the actual function in the host environment."
        },
        {
          "name": "UnwrapRedirection",
          "parameters": [
            "Address redirection_trampoline"
          ],
          "return_type": "Address",
          "logic": "Extracts the target C function address from a given redirection trampoline."
        },
        {
          "name": "VariadicCall",
          "parameters": [
            "SimT* sim",
            "CallImpl call",
            "Address entry",
            "Args... args"
          ],
          "return_type": "Return",
          "logic": "A generic helper function for calling C functions with a variable number of arguments. It converts arguments to `intptr_t`, calls the function using a simulator-specific call implementation, and converts the return value back to the appropriate type."
        },
        {
          "name": "ConvertReturn",
          "parameters": [
            "intptr_t ret"
          ],
          "return_type": "T",
          "logic": "A template function to convert the intptr_t return of simulator calls back to the correct type depending on whether the return type is integral, pointer, tagged Object, AnyCType, or void"
        },
        {
          "name": "ConvertArg",
          "parameters": [
            "T arg"
          ],
          "return_type": "intptr_t",
          "logic": "A template function to convert function arguments to intptr_t for variadic calls. The different overloads handle different argument types: integrals and pointers. Arguments of floating point type cause program termination."
        }
      ]
    },
    {
      "name": "Redirection",
      "properties": [
        "external_function_",
        "instruction_",
        "type_",
        "next_",
        "function_descriptor_"
      ],
      "methods": [
        {
          "name": "Redirection",
          "parameters": [
            "Address external_function",
            "ExternalReference::Type type"
          ],
          "return_type": "Redirection",
          "logic": "Constructor for Redirection object"
        },
        {
          "name": "address_of_instruction",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the trapping instruction."
        },
        {
          "name": "external_function",
          "parameters": [],
          "return_type": "void*",
          "logic": "Returns the address of the external function being redirected to."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "ExternalReference::Type",
          "logic": "Returns the type of external reference."
        },
        {
          "name": "Get",
          "parameters": [
            "Address external_function",
            "ExternalReference::Type type"
          ],
          "return_type": "Redirection*",
          "logic": "Retrieves or creates a Redirection object for a given external function and type."
        },
        {
          "name": "FromInstruction",
          "parameters": [
            "Instruction* instruction"
          ],
          "return_type": "Redirection*",
          "logic": "Calculates the Redirection object from a given simulator instruction."
        },
        {
          "name": "UnwrapRedirection",
          "parameters": [
            "intptr_t reg"
          ],
          "return_type": "void*",
          "logic": "Extracts the address of the external function from a redirection instruction."
        },
        {
          "name": "DeleteChain",
          "parameters": [
            "Redirection* redirection"
          ],
          "return_type": "void",
          "logic": "Deletes a chain of Redirection objects."
        }
      ]
    },
    {
      "name": "SimulatorData",
      "properties": [
        "signature_map_mutex_",
        "target_to_signature_table_"
      ],
      "methods": [
        {
          "name": "RegisterFunctionsAndSignatures",
          "parameters": [
            "Address* c_functions",
            "const CFunctionInfo* const* c_signatures",
            "unsigned num_functions"
          ],
          "return_type": "void",
          "logic": "Registers function signatures for fast API calls in the simulator."
        },
        {
          "name": "GetSignatureForTarget",
          "parameters": [
            "Address target"
          ],
          "return_type": "const EncodedCSignature&",
          "logic": "Retrieves the signature for a given function target in the simulator."
        },
        {
          "name": "AddSignatureForTargetForTesting",
          "parameters": [
            "Address target",
            "const EncodedCSignature& signature"
          ],
          "return_type": "void",
          "logic": "Adds a function signature for testing purposes, bypassing synchronization."
        }
      ]
    }
  ],
  "functions": []
}