{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/futex-emulation.h",
  "imports": [
    "<stdint.h>",
    "include/v8-persistent-handle.h",
    "src/base/atomicops.h",
    "src/base/macros.h",
    "src/base/platform/condition-variable.h",
    "src/base/platform/time.h",
    "src/tasks/cancelable-task.h",
    "src/utils/allocation.h"
  ],
  "classes": [
    {
      "name": "AtomicsWaitWakeHandle",
      "properties": [
        "isolate_",
        "stopped_"
      ],
      "methods": [
        {
          "name": "AtomicsWaitWakeHandle",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for AtomicsWaitWakeHandle, initializes isolate_."
        },
        {
          "name": "Wake",
          "parameters": [],
          "return_type": "void",
          "logic": "Wakes up a thread waiting on the associated Atomics operation."
        },
        {
          "name": "has_stopped",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the handle has stopped (likely due to isolate shutdown)."
        }
      ]
    },
    {
      "name": "FutexWaitListNode",
      "properties": [
        "cond_",
        "prev_",
        "next_",
        "wait_location_",
        "waiting_",
        "interrupted_",
        "async_state_"
      ],
      "methods": [
        {
          "name": "FutexWaitListNode",
          "parameters": [],
          "return_type": "FutexWaitListNode",
          "logic": "Default constructor for creating a synchronous FutexWaitListNode."
        },
        {
          "name": "FutexWaitListNode",
          "parameters": [
            "std::weak_ptr<BackingStore> backing_store",
            "void* wait_location",
            "DirectHandle<JSObject> promise_capability",
            "Isolate* isolate"
          ],
          "return_type": "FutexWaitListNode",
          "logic": "Constructor for creating an asynchronous FutexWaitListNode."
        },
        {
          "name": "NotifyWake",
          "parameters": [],
          "return_type": "void",
          "logic": "Notifies a thread waiting on this node to wake up."
        },
        {
          "name": "IsAsync",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node represents an asynchronous wait."
        },
        {
          "name": "CancelTimeoutTask",
          "parameters": [],
          "return_type": "bool",
          "logic": "Cancels the timeout task associated with an async waiter."
        }
      ]
    },
    {
      "name": "FutexEmulation",
      "properties": [],
      "methods": [
        {
          "name": "WaitJs32",
          "parameters": [
            "Isolate* isolate",
            "WaitMode mode",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int32_t value",
            "double rel_timeout_ms"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Checks if array_buffer[addr] == value, and if so, blocks until woken or timeout. Operates on int32_t values in JS."
        },
        {
          "name": "WaitJs64",
          "parameters": [
            "Isolate* isolate",
            "WaitMode mode",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int64_t value",
            "double rel_timeout_ms"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Checks if array_buffer[addr] == value, and if so, blocks until woken or timeout. Operates on int64_t values in JS."
        },
        {
          "name": "WaitWasm32",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int32_t value",
            "int64_t rel_timeout_ns"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Wasm version of Wait, for int32_t values."
        },
        {
          "name": "WaitWasm64",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> array_buffer",
            "size_t addr",
            "int64_t value",
            "int64_t rel_timeout_ns"
          ],
          "return_type": "Tagged<Object>",
          "logic": "Wasm version of Wait, for int64_t values."
        },
        {
          "name": "Wake",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr",
            "uint32_t num_waiters_to_wake"
          ],
          "return_type": "int",
          "logic": "Wakes up specified number of threads waiting on the given address, using array_buffer and address."
        },
        {
          "name": "Wake",
          "parameters": [
            "void* addr",
            "uint32_t num_waiters_to_wake"
          ],
          "return_type": "int",
          "logic": "Wakes up specified number of threads waiting on the given raw address."
        },
        {
          "name": "IsolateDeinit",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Called when an isolate dies, to remove async waiters associated with it."
        },
        {
          "name": "NumWaitersForTesting",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr"
          ],
          "return_type": "int",
          "logic": "Returns the number of threads or async waiters waiting on the given address, used for testing purposes."
        },
        {
          "name": "NumUnresolvedAsyncPromisesForTesting",
          "parameters": [
            "Tagged<JSArrayBuffer> array_buffer",
            "size_t addr"
          ],
          "return_type": "int",
          "logic": "Returns number of async waiters waiting for promise resolution, used for testing."
        }
      ]
    }
  ],
  "functions": []
}