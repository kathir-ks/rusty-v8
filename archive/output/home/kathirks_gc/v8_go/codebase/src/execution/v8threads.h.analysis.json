{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/v8threads.h",
  "imports": [
    "<atomic>",
    "src/execution/isolate.h"
  ],
  "classes": [
    {
      "name": "ThreadState",
      "properties": [
        "id_",
        "data_",
        "next_",
        "previous_",
        "thread_manager_"
      ],
      "methods": [
        {
          "name": "Next",
          "parameters": [],
          "return_type": "ThreadState*",
          "logic": "Returns a pointer to the next ThreadState in the list, or nullptr if it's the last one."
        },
        {
          "name": "LinkInto",
          "parameters": [
            "List list"
          ],
          "return_type": "void",
          "logic": "Links the current ThreadState into either the free list or the in-use list."
        },
        {
          "name": "Unlink",
          "parameters": [],
          "return_type": "void",
          "logic": "Unlinks the current ThreadState from the list it's currently in."
        },
        {
          "name": "set_id",
          "parameters": [
            "ThreadId id"
          ],
          "return_type": "void",
          "logic": "Sets the thread ID of the ThreadState."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "ThreadId",
          "logic": "Returns the thread ID of the ThreadState."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "char*",
          "logic": "Returns a pointer to the data area associated with the ThreadState. This data area is likely used for archiving the thread's state."
        }
      ]
    },
    {
      "name": "ThreadVisitor",
      "properties": [],
      "methods": [
        {
          "name": "VisitThread",
          "parameters": [
            "Isolate* isolate",
            "ThreadLocalTop* top"
          ],
          "return_type": "void",
          "logic": "A virtual function that visits a thread.  ThreadLocalTop may be only available during this call."
        }
      ]
    },
    {
      "name": "ThreadManager",
      "properties": [
        "mutex_",
        "mutex_owner_",
        "lazily_archived_thread_",
        "lazily_archived_thread_state_",
        "free_anchor_",
        "in_use_anchor_",
        "isolate_"
      ],
      "methods": [
        {
          "name": "Lock",
          "parameters": [],
          "return_type": "void",
          "logic": "Acquires the thread manager's mutex."
        },
        {
          "name": "Unlock",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases the thread manager's mutex."
        },
        {
          "name": "InitThread",
          "parameters": [
            "const ExecutionAccess&"
          ],
          "return_type": "void",
          "logic": "Initializes a thread.  Likely allocates a ThreadState and performs other thread-specific setup."
        },
        {
          "name": "ArchiveThread",
          "parameters": [],
          "return_type": "void",
          "logic": "Archives the current thread's state. Saves the thread's data to a safe place for later restoration."
        },
        {
          "name": "RestoreThread",
          "parameters": [],
          "return_type": "bool",
          "logic": "Restores a previously archived thread's state. Returns true if successful, false otherwise."
        },
        {
          "name": "FreeThreadResources",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees the resources associated with a thread. Likely releases allocated memory and other thread-specific resources."
        },
        {
          "name": "IsArchived",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current thread is archived."
        },
        {
          "name": "Iterate",
          "parameters": [
            "RootVisitor* v"
          ],
          "return_type": "void",
          "logic": "Iterates over the currently active threads, visiting each one with the given RootVisitor."
        },
        {
          "name": "IterateArchivedThreads",
          "parameters": [
            "ThreadVisitor* v"
          ],
          "return_type": "void",
          "logic": "Iterates over archived threads, visiting each one with the given ThreadVisitor."
        },
        {
          "name": "IsLockedByCurrentThread",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the thread manager's mutex is currently held by the current thread."
        },
        {
          "name": "IsLockedByThread",
          "parameters": [
            "ThreadId id"
          ],
          "return_type": "bool",
          "logic": "Checks if the thread manager's mutex is held by a specific thread ID."
        },
        {
          "name": "CurrentId",
          "parameters": [],
          "return_type": "ThreadId",
          "logic": "Returns the current thread ID."
        },
        {
          "name": "FirstThreadStateInUse",
          "parameters": [],
          "return_type": "ThreadState*",
          "logic": "Returns a pointer to the first ThreadState in the in-use list."
        },
        {
          "name": "GetFreeThreadState",
          "parameters": [],
          "return_type": "ThreadState*",
          "logic": "Returns a pointer to a free ThreadState. If none are available, it may allocate a new one."
        }
      ]
    }
  ],
  "functions": []
}