{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/execution/ppc/simulator-ppc.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/execution/ppc/simulator-ppc.h\",\n  \"imports\": [\n    \"src/common/globals.h\",\n    \"src/base/hashmap.h\",\n    \"src/base/lazy-instance.h\",\n    \"src/base/platform/mutex.h\",\n    \"src/codegen/assembler.h\",\n    \"src/codegen/ppc/constants-ppc.h\",\n    \"src/execution/simulator-base.h\",\n    \"src/utils/allocation.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CachePage\",\n      \"properties\": [\n        \"LINE_VALID\",\n        \"LINE_INVALID\",\n        \"kPageShift\",\n        \"kPageSize\",\n        \"kPageMask\",\n        \"kLineShift\",\n        \"kLineLength\",\n        \"kLineMask\",\n        \"data_\",\n        \"kValidityMapSize\",\n        \"validity_map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CachePage\",\n          \"parameters\": [],\n          \"return_type\": \"CachePage\",\n          \"logic\": \"Constructor. Initializes the validity map to LINE_INVALID for all cache lines, effectively marking all lines as invalid.\"\n        },\n        {\n          \"name\": \"ValidityByte\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns a pointer to the validity byte corresponding to the given offset. The validity byte indicates whether the cache line at that offset is valid or invalid.\"\n        },\n        {\n          \"name\": \"CachedData\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns a pointer to the cached data at the given offset within the page.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simulator\",\n      \"properties\": [\n        \"no_reg\",\n        \"r0\",\n        \"sp\",\n        \"r2\",\n        \"r3\",\n        \"r4\",\n        \"r5\",\n        \"r6\",\n        \"r7\",\n        \"r8\",\n        \"r9\",\n        \"r10\",\n        \"r11\",\n        \"r12\",\n        \"r13\",\n        \"r14\",\n        \"r15\",\n        \"r16\",\n        \"r17\",\n        \"r18\",\n        \"r19\",\n        \"r20\",\n        \"r21\",\n        \"r22\",\n        \"r23\",\n        \"r24\",\n        \"r25\",\n        \"r26\",\n        \"r27\",\n        \"r28\",\n        \"r29\",\n        \"r30\",\n        \"fp\",\n        \"kNumGPRs\",\n        \"d0\",\n        \"d1\",\n        \"d2\",\n        \"d3\",\n        \"d4\",\n        \"d5\",\n        \"d6\",\n        \"d7\",\n        \"d8\",\n        \"d9\",\n        \"d10\",\n        \"d11\",\n        \"d12\",\n        \"d13\",\n        \"d14\",\n        \"d15\",\n        \"d16\",\n        \"d17\",\n        \"d18\",\n        \"d19\",\n        \"d20\",\n        \"d21\",\n        \"d22\",\n        \"d23\",\n        \"d24\",\n        \"d25\",\n        \"d26\",\n        \"d27\",\n        \"d28\",\n        \"d29\",\n        \"d30\",\n        \"d31\",\n        \"kNumFPRs\",\n        \"v0\",\n        \"v1\",\n        \"v2\",\n        \"v3\",\n        \"v4\",\n        \"v5\",\n        \"v6\",\n        \"v7\",\n        \"v8\",\n        \"v9\",\n        \"v10\",\n        \"v11\",\n        \"v12\",\n        \"v13\",\n        \"v14\",\n        \"v15\",\n        \"v16\",\n        \"v17\",\n        \"v18\",\n        \"v19\",\n        \"v20\",\n        \"v21\",\n        \"v22\",\n        \"v23\",\n        \"v24\",\n        \"v25\",\n        \"v26\",\n        \"v27\",\n        \"v28\",\n        \"v29\",\n        \"v30\",\n        \"v31\",\n        \"kNumSIMDRs\",\n        \"instruction_tracing_\",\n        \"registers_\",\n        \"condition_reg_\",\n        \"fp_condition_reg_\",\n        \"special_reg_lr_\",\n        \"special_reg_pc_\",\n        \"special_reg_ctr_\",\n        \"special_reg_xer_\",\n        \"fp_registers_\",\n        \"simd_registers_\",\n        \"stack_\",\n        \"kStackProtectionSize\",\n        \"pc_modified_\",\n        \"icount_\",\n        \"last_debugger_input_\",\n        \"break_pc_\",\n        \"break_instr_\",\n        \"isolate_\",\n        \"kNumOfWatchedStops\",\n        \"kStopDisabledBit\",\n        \"watched_stops_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Simulator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Constructor. Initializes the simulator instance for a given Isolate.\"\n        },\n        {\n          \"name\": \"~Simulator\",\n          \"parameters\": [],\n          \"return_type\": \"Simulator\",\n          \"logic\": \"Destructor. Cleans up simulator resources.\"\n        },\n        {\n          \"name\": \"current\",\n          \"parameters\": [\n            \"v8::internal::Isolate* isolate\"\n          ],\n          \"return_type\": \"Simulator*\",\n          \"logic\": \"Returns the currently executing Simulator instance for the given isolate. Potentially there can be one for each native thread.\"\n        },\n        {\n          \"name\": \"set_register\",\n          \"parameters\": [\n            \"int reg\",\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the specified general-purpose register.\"\n        },\n        {\n          \"name\": \"get_register\",\n          \"parameters\": [\n            \"int reg\"\n          ],\n          \"return_type\": \"intptr_t\",\n          \"logic\": \"Returns the value of the specified general-purpose register.\"\n        },\n        {\n          \"name\": \"get_double_from_register_pair\",\n          \"parameters\": [\n            \"int reg\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Retrieves a double value from a register pair.\"\n        },\n        {\n          \"name\": \"set_d_register_from_double\",\n          \"parameters\": [\n            \"int dreg\",\n            \"const double dbl\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a double-precision floating-point register's value from a double.\"\n        },\n        {\n          \"name\": \"get_double_from_d_register\",\n          \"parameters\": [\n            \"int dreg\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Retrieves the double-precision floating-point value from the specified d register.\"\n        },\n        {\n          \"name\": \"set_d_register\",\n          \"parameters\": [\n            \"int dreg\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the specified double-precision floating-point register using a 64-bit integer.\"\n        },\n        {\n          \"name\": \"get_d_register\",\n          \"parameters\": [\n            \"int dreg\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the value of the specified double-precision floating-point register.\"\n        },\n        {\n          \"name\": \"set_pc\",\n          \"parameters\": [\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the program counter (PC) to the given value.\"\n        },\n        {\n          \"name\": \"get_pc\",\n          \"parameters\": [],\n          \"return_type\": \"intptr_t\",\n          \"logic\": \"Returns the current value of the program counter (PC).\"\n        },\n        {\n          \"name\": \"get_sp\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the current stack pointer (SP).\"\n        },\n        {\n          \"name\": \"get_lr\",\n          \"parameters\": [],\n          \"return_type\": \"intptr_t\",\n          \"logic\": \"Returns the current value of the Link Register (LR).\"\n        },\n        {\n          \"name\": \"StackLimit\",\n          \"parameters\": [\n            \"uintptr_t c_limit\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Calculates the stack limit, including a safety margin to prevent overflows.\"\n        },\n        {\n          \"name\": \"StackBase\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Returns the base address of the simulator stack.\"\n        },\n        {\n          \"name\": \"GetCentralStackView\",\n          \"parameters\": [],\n          \"return_type\": \"base::Vector<uint8_t>\",\n          \"logic\": \"Returns the stack memory region as a byte vector, excluding any additional safety margins.\"\n        },\n        {\n          \"name\": \"IterateRegistersAndStack\",\n          \"parameters\": [\n            \"::heap::base::StackVisitor* visitor\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through the register and stack space, passing them to the provided visitor.\"\n        },\n        {\n          \"name\": \"Execute\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes PPC instructions until the PC reaches end_sim_pc.\"\n        },\n        {\n          \"name\": \"Call\",\n          \"parameters\": [\n            \"Address entry\",\n            \"Args... args\"\n          ],\n          \"return_type\": \"Return\",\n          \"logic\": \"Calls a function at the specified entry address with the given arguments. Uses VariadicCall to handle variable arguments.\"\n        },\n        {\n          \"name\": \"CallFP\",\n          \"parameters\": [\n            \"Address entry\",\n            \"double d0\",\n            \"double d1\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a function at the specified address, passing two double-precision floating-point arguments.\"\n        },\n        {\n          \"name\": \"CallFPReturnsInt\",\n          \"parameters\": [\n            \"Address entry\",\n            \"double d0\",\n            \"double d1\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Calls a function at the specified address, passing two double-precision floating-point arguments, and returns an int32_t result.\"\n        },\n        {\n          \"name\": \"CallFPReturnsDouble\",\n          \"parameters\": [\n            \"Address entry\",\n            \"double d0\",\n            \"double d1\"\n          ],\n          \"return_type\": \"double\",\n          \"logic\": \"Calls a function at the specified address, passing two double-precision floating-point arguments, and returns a double result.\"\n        },\n        {\n          \"name\": \"PushAddress\",\n          \"parameters\": [\n            \"uintptr_t address\"\n          ],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Pushes an address onto the simulated stack.\"\n        },\n        {\n          \"name\": \"PopAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Pops an address from the simulated stack.\"\n        },\n        {\n          \"name\": \"set_last_debugger_input\",\n          \"parameters\": [\n            \"char* input\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the last debugger input string.\"\n        },\n        {\n          \"name\": \"last_debugger_input\",\n          \"parameters\": [],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns the last debugger input string.\"\n        },\n        {\n          \"name\": \"SetRedirectInstruction\",\n          \"parameters\": [\n            \"Instruction* instruction\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a redirect instruction (purpose unclear without implementation details).\"\n        },\n        {\n          \"name\": \"ICacheMatch\",\n          \"parameters\": [\n            \"void* one\",\n            \"void* two\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if two ICache entries match (likely checks instruction equivalence).\"\n        },\n        {\n          \"name\": \"FlushICache\",\n          \"parameters\": [\n            \"base::CustomMatcherHashMap* i_cache\",\n            \"void* start\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Flushes a range of addresses from the instruction cache.\"\n        },\n        {\n          \"name\": \"has_bad_pc\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the program counter (PC) has a 'bad' value (e.g., bad_lr, end_sim_pc).\"\n        },\n        {\n          \"name\": \"InstructionTracingEnabled\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if instruction tracing is enabled.\"\n        },\n        {\n          \"name\": \"ToggleInstructionTracing\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Toggles instruction tracing on or off.\"\n        },\n        {\n          \"name\": \"CallImpl\",\n          \"parameters\": [\n            \"Address entry\",\n            \"int argument_count\",\n            \"const intptr_t* arguments\"\n          ],\n          \"return_type\": \"intptr_t\",\n          \"logic\": \"Implements the function call mechanism for the simulator. Handles argument passing and return values.\"\n        },\n        {\n          \"name\": \"Format\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"const char* format\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles unsupported instructions by printing an error message and stopping execution.\"\n        },\n        {\n          \"name\": \"CarryFrom\",\n          \"parameters\": [\n            \"int32_t left\",\n            \"int32_t right\",\n            \"int32_t carry\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Helper function to determine if a carry occurred during an arithmetic operation.\"\n        },\n        {\n          \"name\": \"BorrowFrom\",\n          \"parameters\": [\n            \"int32_t left\",\n            \"int32_t right\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Helper function to determine if a borrow occurred during a subtraction operation.\"\n        },\n        {\n          \"name\": \"OverflowFrom\",\n          \"parameters\": [\n            \"int32_t alu_out\",\n            \"int32_t left\",\n            \"int32_t right\",\n            \"bool addition\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Helper function to determine if an overflow occurred during an arithmetic operation.\"\n        },\n        {\n          \"name\": \"GetShiftRm\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"bool* carry_out\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Decodes a shift operation from the instruction and returns the shifted value.\"\n        },\n        {\n          \"name\": \"GetImm\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"bool* carry_out\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Extracts an immediate value from an instruction.\"\n        },\n        {\n          \"name\": \"ProcessPUW\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"int num_regs\",\n            \"int operand_size\",\n            \"intptr_t* start_address\",\n            \"intptr_t* end_address\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles push/pop multiple registers instructions.\"\n        },\n        {\n          \"name\": \"HandleRList\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"bool load\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles the register list for load/store multiple instructions.\"\n        },\n        {\n          \"name\": \"HandleVList\",\n          \"parameters\": [\n            \"Instruction* inst\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles vector list operation\"\n        },\n        {\n          \"name\": \"SoftwareInterrupt\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles software interrupts.\"\n        },\n        {\n          \"name\": \"DebugAtNextPC\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initiates debugging at the next program counter.\"\n        },\n        {\n          \"name\": \"isStopInstruction\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the instruction is a stop instruction (breakpoint).\"\n        },\n        {\n          \"name\": \"isWatchedStop\",\n          \"parameters\": [\n            \"uint32_t bkpt_code\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the breakpoint code is being watched.\"\n        },\n        {\n          \"name\": \"isEnabledStop\",\n          \"parameters\": [\n            \"uint32_t bkpt_code\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a breakpoint is enabled.\"\n        },\n        {\n          \"name\": \"EnableStop\",\n          \"parameters\": [\n            \"uint32_t bkpt_code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Enables a breakpoint.\"\n        },\n        {\n          \"name\": \"DisableStop\",\n          \"parameters\": [\n            \"uint32_t bkpt_code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Disables a breakpoint.\"\n        },\n        {\n          \"name\": \"IncreaseStopCounter\",\n          \"parameters\": [\n            \"uint32_t bkpt_code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Increases the counter for a breakpoint.\"\n        },\n        {\n          \"name\": \"PrintStopInfo\",\n          \"parameters\": [\n            \"uint32_t code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about a breakpoint.\"\n        },\n        {\n          \"name\": \"Read\",\n          \"parameters\": [\n            \"uintptr_t address\",\n            \"T* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reads a value of type T from memory at the specified address.\"\n        },\n        {\n          \"name\": \"ReadEx\",\n          \"parameters\": [\n            \"uintptr_t address\",\n            \"T* value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Reads a value of type T from memory at the specified address, with exclusive access.\"\n        },\n        {\n          \"name\": \"Write\",\n          \"parameters\": [\n            \"uintptr_t address\",\n            \"T value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a value of type T to memory at the specified address.\"\n        },\n        {\n          \"name\": \"WriteEx\",\n          \"parameters\": [\n            \"uintptr_t address\",\n            \"T value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a value of type T to memory at the specified address, with exclusive access. Returns 0 on success, 1 on failure.\"\n        },\n        {\n          \"name\": \"__builtin_bswap128\",\n          \"parameters\": [\n            \"__uint128_t v\"\n          ],\n          \"return_type\": \"__uint128_t\",\n          \"logic\": \"Byte reverses a 128 bit unsigned integer\"\n        },\n        {\n          \"name\": \"ReadQWU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"unsigned __int128\",\n          \"logic\": \"Reads a unsigned 128-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExQWU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"unsigned __int128\",\n          \"logic\": \"Reads a unsigned 128-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteQWU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"unsigned __int128 value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a unsigned 128-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExQWU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"unsigned __int128 value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a unsigned 128-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadQW\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"__int128\",\n          \"logic\": \"Reads a signed 128-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExQW\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"__int128\",\n          \"logic\": \"Reads a signed 128-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteQW\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"__int128 value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a signed 128-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExQW\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"__int128 value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a signed 128-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadDWU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Reads a unsigned 64-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExDWU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Reads a unsigned 64-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteDWU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a unsigned 64-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExDWU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint64_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a unsigned 64-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadDW\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Reads a signed 64-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExDW\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Reads a signed 64-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteDW\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a signed 64-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExDW\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int64_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a signed 64-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadWU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Reads a unsigned 32-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExWU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Reads a unsigned 32-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteWU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a unsigned 32-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExWU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint32_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a unsigned 32-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadW\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Reads a signed 32-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExW\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Reads a signed 32-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteW\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a signed 32-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExW\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a signed 32-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadHU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint16_t\",\n          \"logic\": \"Reads a unsigned 16-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExHU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint16_t\",\n          \"logic\": \"Reads a unsigned 16-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteHU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint16_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a unsigned 16-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExHU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint16_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a unsigned 16-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadH\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int16_t\",\n          \"logic\": \"Reads a signed 16-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExH\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int16_t\",\n          \"logic\": \"Reads a signed 16-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteH\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int16_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a signed 16-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExH\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int16_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a signed 16-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadBU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint8_t\",\n          \"logic\": \"Reads a unsigned 8-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExBU\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"uint8_t\",\n          \"logic\": \"Reads a unsigned 8-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteBU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint8_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a unsigned 8-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExBU\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"uint8_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a unsigned 8-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"ReadB\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int8_t\",\n          \"logic\": \"Reads a signed 8-bit value from memory.\"\n        },\n        {\n          \"name\": \"ReadExB\",\n          \"parameters\": [\n            \"uintptr_t addr\"\n          ],\n          \"return_type\": \"int8_t\",\n          \"logic\": \"Reads a signed 8-bit value from memory with exclusive access.\"\n        },\n        {\n          \"name\": \"WriteB\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int8_t value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Writes a signed 8-bit value to memory.\"\n        },\n        {\n          \"name\": \"WriteExB\",\n          \"parameters\": [\n            \"uintptr_t addr\",\n            \"int8_t value\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Writes a signed 8-bit value to memory with exclusive access.\"\n        },\n        {\n          \"name\": \"Trace\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Traces an instruction (likely prints debugging information).\"\n        },\n        {\n          \"name\": \"SetCR0\",\n          \"parameters\": [\n            \"intptr_t result\",\n            \"bool setSO\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets condition register 0 based on the result of an operation.\"\n        },\n        {\n          \"name\": \"SetCR6\",\n          \"parameters\": [\n            \"bool true_for_all\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets condition register 6 to true or false depending on input.\"\n        },\n        {\n          \"name\": \"ExecuteBranchConditional\",\n          \"parameters\": [\n            \"Instruction* instr\",\n            \"BCType type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes a conditional branch instruction.\"\n        },\n        {\n          \"name\": \"ExecuteGeneric\",\n          \"parameters\": [\n            \"Instruction* instr\"\n          "
}