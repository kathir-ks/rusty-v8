{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/extensions/gc-extension.cc",
  "imports": [
    "src/extensions/gc-extension.h",
    "include/v8-exception.h",
    "include/v8-isolate.h",
    "include/v8-maybe.h",
    "include/v8-microtask-queue.h",
    "include/v8-object.h",
    "include/v8-persistent-handle.h",
    "include/v8-platform.h",
    "include/v8-primitive.h",
    "include/v8-profiler.h",
    "include/v8-template.h",
    "src/api/api.h",
    "src/execution/isolate.h",
    "src/heap/heap.h",
    "src/profiler/heap-profiler.h",
    "src/tasks/cancelable-task.h"
  ],
  "classes": [
    {
      "name": "GCOptions",
      "properties": [
        "type",
        "execution",
        "flavor",
        "filename"
      ],
      "methods": [
        {
          "name": "GetDefault",
          "parameters": [],
          "return_type": "GCOptions",
          "logic": "Returns the default GCOptions: major GC, synchronous execution, regular flavor, default filename."
        },
        {
          "name": "GetDefaultForTruthyWithoutOptionsBag",
          "parameters": [],
          "return_type": "GCOptions",
          "logic": "Returns the default GCOptions when a truthy value is passed without a proper options object: minor GC, synchronous execution, regular flavor, default filename."
        },
        {
          "name": "GCOptions",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor. Used with Nothing<GCOptions>."
        },
        {
          "name": "GCOptions",
          "parameters": [
            "GCType type",
            "ExecutionType execution",
            "Flavor flavor",
            "std::string filename"
          ],
          "return_type": "void",
          "logic": "Private constructor to initialize all the properties of GCOptions."
        }
      ]
    },
    {
      "name": "AsyncGC",
      "properties": [
        "isolate_",
        "ctx_",
        "resolver_",
        "options_"
      ],
      "methods": [
        {
          "name": "~AsyncGC",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for AsyncGC."
        },
        {
          "name": "AsyncGC",
          "parameters": [
            "v8::Isolate* isolate",
            "v8::Local<v8::Promise::Resolver> resolver",
            "GCOptions options"
          ],
          "return_type": "void",
          "logic": "Constructor for AsyncGC. Takes an isolate, a promise resolver, and GCOptions."
        },
        {
          "name": "RunInternal",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs the garbage collection according to the options, then resolves the promise."
        }
      ]
    },
    {
      "name": "GCExtension",
      "properties": [],
      "methods": [
        {
          "name": "GetNativeFunctionTemplate",
          "parameters": [
            "v8::Isolate* isolate",
            "v8::Local<v8::String> str"
          ],
          "return_type": "v8::Local<v8::FunctionTemplate>",
          "logic": "Returns the function template for the GC extension's native function."
        },
        {
          "name": "GC",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "void",
          "logic": "Handles the garbage collection request from JavaScript. Parses options, and triggers either synchronous or asynchronous GC based on those options."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ReadProperty",
      "parameters": [
        "v8::Isolate* isolate",
        "v8::Local<v8::Context> ctx",
        "v8::Local<v8::Object> object",
        "const char* key"
      ],
      "return_type": "MaybeLocal<v8::String>",
      "logic": "Reads a string property from a v8 object."
    },
    {
      "name": "ParseType",
      "parameters": [
        "v8::Isolate* isolate",
        "MaybeLocal<v8::String> maybe_type",
        "GCOptions* options",
        "bool* found_options_object"
      ],
      "return_type": "void",
      "logic": "Parses the 'type' property from a v8 object and updates the GCOptions accordingly."
    },
    {
      "name": "ParseExecution",
      "parameters": [
        "v8::Isolate* isolate",
        "MaybeLocal<v8::String> maybe_execution",
        "GCOptions* options",
        "bool* found_options_object"
      ],
      "return_type": "void",
      "logic": "Parses the 'execution' property from a v8 object and updates the GCOptions accordingly."
    },
    {
      "name": "ParseFlavor",
      "parameters": [
        "v8::Isolate* isolate",
        "MaybeLocal<v8::String> maybe_execution",
        "GCOptions* options",
        "bool* found_options_object"
      ],
      "return_type": "void",
      "logic": "Parses the 'flavor' property from a v8 object and updates the GCOptions accordingly."
    },
    {
      "name": "Parse",
      "parameters": [
        "v8::Isolate* isolate",
        "const v8::FunctionCallbackInfo<v8::Value>& info"
      ],
      "return_type": "Maybe<GCOptions>",
      "logic": "Parses GCOptions from the v8 function callback info. Reads properties from the first argument if it's an object."
    },
    {
      "name": "InvokeGC",
      "parameters": [
        "v8::Isolate* isolate",
        "const GCOptions gc_options"
      ],
      "return_type": "void",
      "logic": "Invokes the garbage collector based on the provided GCOptions. Handles minor, major, and major-snapshot GCs."
    }
  ]
}