{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/extensions/vtunedomain-support-extension.h",
  "imports": [
    "include/v8-extension.h",
    "src/base/strings.h",
    "src/base/vector.h",
    "third_party/vtune/vtuneapi.h"
  ],
  "classes": [
    {
      "name": "VTuneDomainSupportExtension",
      "properties": [
        "buffer_[50]"
      ],
      "methods": [
        {
          "name": "VTuneDomainSupportExtension",
          "parameters": [
            "const char* fun_name = \"test\""
          ],
          "return_type": "N/A (Constructor)",
          "logic": "Constructor for the VTuneDomainSupportExtension class. Initializes the base Extension class with the name \"v8/vtunedomain\" and generates the JavaScript source code using BuildSource. The generated source declares a native function with the name provided (defaults to 'test')."
        },
        {
          "name": "GetNativeFunctionTemplate",
          "parameters": [
            "v8::Isolate* isolate",
            "v8::Local<v8::String> name"
          ],
          "return_type": "v8::Local<v8::FunctionTemplate>",
          "logic": "This method is expected to return a function template for a native function that can be exposed to JavaScript. However, its implementation is not provided in this header file, so its specific logic is unknown."
        },
        {
          "name": "Mark",
          "parameters": [
            "const v8::FunctionCallbackInfo<v8::Value>& info"
          ],
          "return_type": "void",
          "logic": "Presumably marks objects reachable from the given FunctionCallbackInfo. Its implementation is not provided in this header file."
        },
        {
          "name": "BuildSource",
          "parameters": [
            "char* buf",
            "size_t size",
            "const char* fun_name"
          ],
          "return_type": "const char*",
          "logic": "Builds the JavaScript source code that declares a native function with the given name. It uses SNPrintF to format a string like 'native function fun_name();' into the provided buffer."
        }
      ]
    }
  ],
  "functions": [],
  "constants": {
    "UNKNOWN_PARAMS": "1 << 0",
    "NO_DOMAIN_NAME": "1 << 1",
    "CREATE_DOMAIN_FAILED": "1 << 2",
    "NO_TASK_NAME": "1 << 3",
    "CREATE_TASK_FAILED": "1 << 4",
    "TASK_BEGIN_FAILED": "1 << 5",
    "TASK_END_FAILED": "1 << 6"
  }
}