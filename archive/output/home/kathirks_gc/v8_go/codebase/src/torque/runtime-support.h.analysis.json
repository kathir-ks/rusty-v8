{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/runtime-support.h",
  "imports": [
    "<type_traits>"
  ],
  "classes": [
    {
      "name": "Identity",
      "properties": [],
      "methods": [],
      "template_parameters": [
        "class T"
      ],
      "using_declarations": [
        {
          "name": "type",
          "type": "T"
        }
      ]
    },
    {
      "name": "UnderlyingTypeHelper",
      "properties": [],
      "methods": [],
      "template_parameters": [
        "class T"
      ],
      "inheritance": [
        "Identity<typename std::underlying_type<T>::type>"
      ]
    }
  ],
  "functions": [
    {
      "name": "CastToUnderlyingTypeIfEnum",
      "parameters": [
        "T x"
      ],
      "return_type": "UnderlyingTypeIfEnum<T>",
      "logic": "This function takes a value of type T and casts it to the underlying type if T is an enum. Otherwise, it returns the value as is.  It effectively converts an enum value to its integer representation while doing nothing for non-enum types.  The use of static_cast<UnderlyingTypeIfEnum<T>>(x) performs the type conversion (or no-op if T is not an enum).",
      "template_parameters": [
        "class T"
      ]
    }
  ],
  "using_declarations": [
    {
      "name": "UnderlyingTypeIfEnum",
      "type": "typename std::conditional_t<std::is_enum<T>::value, UnderlyingTypeHelper<T>, Identity<T>>::type",
      "template_parameters": [
        "class T"
      ]
    }
  ]
}