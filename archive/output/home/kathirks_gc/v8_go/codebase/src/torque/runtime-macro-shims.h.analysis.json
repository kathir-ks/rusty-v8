{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/runtime-macro-shims.h",
  "imports": [
    "<cstdint>",
    "src/numbers/integer-literal.h",
    "src/utils/utils.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "BoolConstant",
      "parameters": [
        "bool b"
      ],
      "return_type": "bool",
      "logic": "Returns the boolean value passed as input. Acts as an identity function for boolean values."
    },
    {
      "name": "ChangeInt32ToIntPtr",
      "parameters": [
        "int32_t i"
      ],
      "return_type": "intptr_t",
      "logic": "Converts an int32_t to an intptr_t. Performs type casting and value copying."
    },
    {
      "name": "ChangeUint32ToWord",
      "parameters": [
        "uint32_t u"
      ],
      "return_type": "uintptr_t",
      "logic": "Converts a uint32_t to a uintptr_t. Performs type casting and value copying."
    },
    {
      "name": "IntPtrAdd",
      "parameters": [
        "intptr_t a",
        "intptr_t b"
      ],
      "return_type": "intptr_t",
      "logic": "Adds two intptr_t values and returns the result."
    },
    {
      "name": "IntPtrMul",
      "parameters": [
        "intptr_t a",
        "intptr_t b"
      ],
      "return_type": "intptr_t",
      "logic": "Multiplies two intptr_t values and returns the result."
    },
    {
      "name": "IntPtrLessThan",
      "parameters": [
        "intptr_t a",
        "intptr_t b"
      ],
      "return_type": "bool",
      "logic": "Compares two intptr_t values and returns true if a < b, false otherwise."
    },
    {
      "name": "IntPtrLessThanOrEqual",
      "parameters": [
        "intptr_t a",
        "intptr_t b"
      ],
      "return_type": "bool",
      "logic": "Compares two intptr_t values and returns true if a <= b, false otherwise."
    },
    {
      "name": "Signed",
      "parameters": [
        "uintptr_t u"
      ],
      "return_type": "intptr_t",
      "logic": "Converts a uintptr_t to a signed intptr_t using static_cast."
    },
    {
      "name": "SmiUntag",
      "parameters": [
        "Smi s"
      ],
      "return_type": "int32_t",
      "logic": "Untags a Smi (Small Integer) value to get the underlying int32_t representation."
    },
    {
      "name": "UintPtrLessThan",
      "parameters": [
        "uintptr_t a",
        "uintptr_t b"
      ],
      "return_type": "bool",
      "logic": "Compares two uintptr_t values and returns true if a < b, false otherwise."
    },
    {
      "name": "Unsigned",
      "parameters": [
        "int32_t s"
      ],
      "return_type": "uint32_t",
      "logic": "Converts a signed int32_t to an unsigned uint32_t using static_cast."
    },
    {
      "name": "Unsigned",
      "parameters": [
        "intptr_t s"
      ],
      "return_type": "uintptr_t",
      "logic": "Converts a signed intptr_t to an unsigned uintptr_t using static_cast. Only defined when V8_HOST_ARCH_64_BIT is defined."
    },
    {
      "name": "Word32Equal",
      "parameters": [
        "uint32_t a",
        "uint32_t b"
      ],
      "return_type": "bool",
      "logic": "Compares two uint32_t values for equality and returns true if a == b, false otherwise."
    },
    {
      "name": "Word32NotEqual",
      "parameters": [
        "uint32_t a",
        "uint32_t b"
      ],
      "return_type": "bool",
      "logic": "Compares two uint32_t values for inequality and returns true if a != b, false otherwise."
    },
    {
      "name": "ConstexprIntegerLiteralToInt32",
      "parameters": [
        "const IntegerLiteral& i"
      ],
      "return_type": "int32_t",
      "logic": "Converts an IntegerLiteral (compile-time integer) to an int32_t."
    },
    {
      "name": "ConstexprIntegerLiteralToInt31",
      "parameters": [
        "const IntegerLiteral& i"
      ],
      "return_type": "int31_t",
      "logic": "Converts an IntegerLiteral (compile-time integer) to an int31_t, which is a narrower signed integer type."
    },
    {
      "name": "ConstexprIntegerLiteralToIntptr",
      "parameters": [
        "const IntegerLiteral& i"
      ],
      "return_type": "intptr_t",
      "logic": "Converts an IntegerLiteral (compile-time integer) to an intptr_t."
    },
    {
      "name": "Print",
      "parameters": [
        "const char* str"
      ],
      "return_type": "void",
      "logic": "Prints a string to the console using PrintF."
    }
  ]
}