{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/cpp-builder.h",
  "imports": [
    "src/torque/ast.h",
    "src/torque/types.h",
    "<stack>"
  ],
  "classes": [
    {
      "name": "TemplateParameter",
      "properties": [
        "name",
        "type"
      ],
      "methods": [
        {
          "name": "TemplateParameter",
          "parameters": [
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the TemplateParameter struct, initializes the name."
        },
        {
          "name": "TemplateParameter",
          "parameters": [
            "std::string type",
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the TemplateParameter struct, initializes the name and type."
        }
      ]
    },
    {
      "name": "Class",
      "properties": [
        "template_parameters_",
        "name_"
      ],
      "methods": [
        {
          "name": "Class",
          "parameters": [
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the Class, initializes the name."
        },
        {
          "name": "Class",
          "parameters": [
            "std::vector<TemplateParameter> template_parameters",
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the Class, initializes the name and template parameters."
        },
        {
          "name": "GetName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the name of the class."
        },
        {
          "name": "GetTemplateParameters",
          "parameters": [],
          "return_type": "std::vector<TemplateParameter>",
          "logic": "Returns the template parameters of the class."
        }
      ]
    },
    {
      "name": "Function",
      "properties": [
        "pos_",
        "owning_class_",
        "description_",
        "name_",
        "return_type_",
        "parameters_",
        "flags_"
      ],
      "methods": [
        {
          "name": "Function",
          "parameters": [
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the Function, initializes the name and current source position."
        },
        {
          "name": "Function",
          "parameters": [
            "Class* owning_class",
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the Function, initializes the owning class, name, and current source position."
        },
        {
          "name": "~Function",
          "parameters": [],
          "return_type": null,
          "logic": "Default destructor for the Function."
        },
        {
          "name": "DefaultGetter",
          "parameters": [
            "std::string return_type",
            "Class* owner",
            "std::string name"
          ],
          "return_type": "Function",
          "logic": "Creates a default getter function, setting return type, inline, and const flags."
        },
        {
          "name": "DefaultSetter",
          "parameters": [
            "Class* owner",
            "std::string name",
            "std::string parameter_type",
            "std::string parameter_name"
          ],
          "return_type": "Function",
          "logic": "Creates a default setter function, setting return type to void, adding a parameter, and setting inline flag."
        },
        {
          "name": "SetFlag",
          "parameters": [
            "FunctionFlag flag",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets or clears a specific function flag."
        },
        {
          "name": "SetFlags",
          "parameters": [
            "base::Flags<FunctionFlag> flags",
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets or clears a set of function flags."
        },
        {
          "name": "HasFlag",
          "parameters": [
            "FunctionFlag flag"
          ],
          "return_type": "bool",
          "logic": "Checks if a specific function flag is set."
        },
        {
          "name": "SetInline",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the Inline flag."
        },
        {
          "name": "IsInline",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the Inline flag is set."
        },
        {
          "name": "SetV8Inline",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the V8Inline flag."
        },
        {
          "name": "IsV8Inline",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the V8Inline flag is set."
        },
        {
          "name": "SetConst",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the Const flag."
        },
        {
          "name": "IsConst",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the Const flag is set."
        },
        {
          "name": "SetConstexpr",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the Constexpr flag."
        },
        {
          "name": "IsConstexpr",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the Constexpr flag is set."
        },
        {
          "name": "SetExport",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the Export flag."
        },
        {
          "name": "IsExport",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the Export flag is set."
        },
        {
          "name": "SetStatic",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the Static flag."
        },
        {
          "name": "IsStatic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the Static flag is set."
        },
        {
          "name": "SetOverride",
          "parameters": [
            "bool v"
          ],
          "return_type": "void",
          "logic": "Sets the Override flag."
        },
        {
          "name": "IsOverride",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the Override flag is set."
        },
        {
          "name": "SetDescription",
          "parameters": [
            "std::string description"
          ],
          "return_type": "void",
          "logic": "Sets the description of the function."
        },
        {
          "name": "SetName",
          "parameters": [
            "std::string name"
          ],
          "return_type": "void",
          "logic": "Sets the name of the function."
        },
        {
          "name": "SetReturnType",
          "parameters": [
            "std::string return_type"
          ],
          "return_type": "void",
          "logic": "Sets the return type of the function."
        },
        {
          "name": "AddParameter",
          "parameters": [
            "std::string type",
            "std::string name",
            "std::string default_value"
          ],
          "return_type": "void",
          "logic": "Adds a parameter to the function's parameter list."
        },
        {
          "name": "InsertParameter",
          "parameters": [
            "int index",
            "std::string type",
            "std::string name",
            "std::string default_value"
          ],
          "return_type": "void",
          "logic": "Inserts a parameter at a specific index in the function's parameter list."
        },
        {
          "name": "GetParameters",
          "parameters": [],
          "return_type": "std::vector<Parameter>",
          "logic": "Returns the function's parameter list."
        },
        {
          "name": "GetParameterNames",
          "parameters": [],
          "return_type": "std::vector<std::string>",
          "logic": "Returns a vector containing the names of the function's parameters."
        },
        {
          "name": "PrintDeclaration",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the function declaration to the output stream, taking indentation into account."
        },
        {
          "name": "PrintDefinition",
          "parameters": [
            "std::ostream& stream",
            "const std::function<void(std::ostream&)>& builder",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the function definition to the output stream, using the builder function to generate the function body."
        },
        {
          "name": "PrintInlineDefinition",
          "parameters": [
            "std::ostream& stream",
            "const std::function<void(std::ostream&)>& builder",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints an inline function definition to the output stream, using the builder function to generate the function body."
        },
        {
          "name": "PrintBeginDefinition",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the beginning of a function definition."
        },
        {
          "name": "PrintEndDefinition",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the end of a function definition."
        },
        {
          "name": "PrintDeclarationHeader",
          "parameters": [
            "std::ostream& stream",
            "int indentation"
          ],
          "return_type": "void",
          "logic": "Prints the header part of the function declaration."
        }
      ]
    },
    {
      "name": "File",
      "properties": [
        "stream_",
        "includes_",
        "namespaces_"
      ],
      "methods": [
        {
          "name": "File",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": null,
          "logic": "Constructor for the File class, initializes the output stream."
        },
        {
          "name": "BeginIncludeGuard",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "void",
          "logic": "Starts an include guard with the given name."
        },
        {
          "name": "EndIncludeGuard",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "void",
          "logic": "Ends the include guard with the given name."
        },
        {
          "name": "BeginNamespace",
          "parameters": [
            "std::string name"
          ],
          "return_type": "void",
          "logic": "Opens a namespace with the given name."
        },
        {
          "name": "BeginNamespace",
          "parameters": [
            "std::string name0",
            "std::string name1"
          ],
          "return_type": "void",
          "logic": "Opens a nested namespace."
        },
        {
          "name": "EndNamespace",
          "parameters": [
            "const std::string& name"
          ],
          "return_type": "void",
          "logic": "Closes a namespace."
        },
        {
          "name": "EndNamespace",
          "parameters": [
            "const std::string& name0",
            "const std::string& name1"
          ],
          "return_type": "void",
          "logic": "Closes a nested namespace."
        },
        {
          "name": "AddInclude",
          "parameters": [
            "std::string include"
          ],
          "return_type": "void",
          "logic": "Adds an include directive to the file."
        },
        {
          "name": "operator<<",
          "parameters": [
            "const T& value"
          ],
          "return_type": "File&",
          "logic": "Overloads the << operator to write values to the underlying output stream."
        }
      ]
    },
    {
      "name": "IncludeGuardScope",
      "properties": [
        "file_",
        "name_"
      ],
      "methods": [
        {
          "name": "IncludeGuardScope",
          "parameters": [
            "File* file",
            "std::string name"
          ],
          "return_type": null,
          "logic": "Constructor for the IncludeGuardScope, begins the include guard."
        },
        {
          "name": "~IncludeGuardScope",
          "parameters": [],
          "return_type": null,
          "logic": "Destructor for the IncludeGuardScope, ends the include guard."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "Function::FunctionFlag",
      "values": [
        "kInline",
        "kV8Inline",
        "kConst",
        "kConstexpr",
        "kExport",
        "kStatic",
        "kOverride"
      ]
    }
  ]
}