{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/utils.h",
  "imports": [
    "<algorithm>",
    "<optional>",
    "<ostream>",
    "<queue>",
    "<streambuf>",
    "<string>",
    "<unordered_set>",
    "src/base/contextual.h",
    "src/base/hashing.h",
    "src/torque/source-positions.h"
  ],
  "classes": [
    {
      "name": "TorqueMessage",
      "properties": [
        "message",
        "position",
        "kind"
      ],
      "methods": []
    },
    {
      "name": "MessageBuilder",
      "properties": [
        "message_",
        "extra_messages_"
      ],
      "methods": [
        {
          "name": "MessageBuilder",
          "parameters": [
            "message",
            "kind"
          ],
          "return_type": "MessageBuilder",
          "logic": "Constructor for the MessageBuilder class. Initializes the message and kind."
        },
        {
          "name": "Position",
          "parameters": [
            "position"
          ],
          "return_type": "MessageBuilder&",
          "logic": "Sets the source position of the message."
        },
        {
          "name": "Throw",
          "parameters": [],
          "return_type": "void",
          "logic": "Throws an exception indicating a Torque compilation abort."
        },
        {
          "name": "~MessageBuilder",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for MessageBuilder. Calls Report to report the message."
        },
        {
          "name": "Report",
          "parameters": [],
          "return_type": "void",
          "logic": "Reports the Torque message, likely logging it or adding it to a list of errors."
        }
      ]
    },
    {
      "name": "TorqueAbortCompilation",
      "properties": [],
      "methods": []
    },
    {
      "name": "Deduplicator",
      "properties": [
        "storage_"
      ],
      "methods": [
        {
          "name": "Add",
          "parameters": [
            "x"
          ],
          "return_type": "const T*",
          "logic": "Adds an element to the set and returns a pointer to the stored element. This ensures that only one copy of each element is stored."
        }
      ]
    },
    {
      "name": "ListPrintAdaptor",
      "properties": [
        "list",
        "separator",
        "transformer"
      ],
      "methods": []
    },
    {
      "name": "BottomOffset",
      "properties": [
        "offset"
      ],
      "methods": [
        {
          "name": "operator=",
          "parameters": [
            "other_offset"
          ],
          "return_type": "BottomOffset&",
          "logic": "Assignment operator. Sets the offset."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "BottomOffset&",
          "logic": "Pre-increment operator. Increments the offset."
        },
        {
          "name": "operator+",
          "parameters": [
            "x"
          ],
          "return_type": "BottomOffset",
          "logic": "Addition operator. Returns a new BottomOffset with the added offset."
        },
        {
          "name": "operator-",
          "parameters": [
            "x"
          ],
          "return_type": "BottomOffset",
          "logic": "Subtraction operator. Returns a new BottomOffset with the subtracted offset."
        },
        {
          "name": "operator<",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Less-than comparison operator."
        },
        {
          "name": "operator<=",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Less-than-or-equal-to comparison operator."
        },
        {
          "name": "operator==",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Equality comparison operator."
        },
        {
          "name": "operator!=",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Inequality comparison operator."
        }
      ]
    },
    {
      "name": "StackRange",
      "properties": [
        "begin_",
        "end_"
      ],
      "methods": [
        {
          "name": "StackRange",
          "parameters": [
            "begin",
            "end"
          ],
          "return_type": "StackRange",
          "logic": "Constructor.  Initializes the begin and end BottomOffsets."
        },
        {
          "name": "operator==",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Equality comparison operator."
        },
        {
          "name": "Extend",
          "parameters": [
            "adjacent"
          ],
          "return_type": "void",
          "logic": "Extends the range to include the adjacent range."
        },
        {
          "name": "Size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the range (end - begin)."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "BottomOffset",
          "logic": "Returns the starting BottomOffset of the range."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "BottomOffset",
          "logic": "Returns the ending BottomOffset of the range."
        }
      ]
    },
    {
      "name": "Stack",
      "properties": [
        "elements_"
      ],
      "methods": [
        {
          "name": "Size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the stack."
        },
        {
          "name": "Peek",
          "parameters": [
            "from_bottom"
          ],
          "return_type": "const T&",
          "logic": "Returns the element at the specified offset from the bottom of the stack."
        },
        {
          "name": "Poke",
          "parameters": [
            "from_bottom",
            "x"
          ],
          "return_type": "void",
          "logic": "Sets the element at the specified offset from the bottom of the stack."
        },
        {
          "name": "Push",
          "parameters": [
            "x"
          ],
          "return_type": "void",
          "logic": "Pushes an element onto the stack."
        },
        {
          "name": "TopRange",
          "parameters": [
            "slot_count"
          ],
          "return_type": "StackRange",
          "logic": "Returns a StackRange representing the top `slot_count` elements of the stack."
        },
        {
          "name": "PushMany",
          "parameters": [
            "v"
          ],
          "return_type": "StackRange",
          "logic": "Pushes multiple elements onto the stack and returns the StackRange of the pushed elements."
        },
        {
          "name": "Top",
          "parameters": [],
          "return_type": "const T&",
          "logic": "Returns the top element of the stack."
        },
        {
          "name": "Pop",
          "parameters": [],
          "return_type": "T",
          "logic": "Pops the top element from the stack and returns it."
        },
        {
          "name": "PopMany",
          "parameters": [
            "count"
          ],
          "return_type": "std::vector<T>",
          "logic": "Pops `count` elements from the stack and returns them as a vector."
        },
        {
          "name": "AboveTop",
          "parameters": [],
          "return_type": "BottomOffset",
          "logic": "Returns a BottomOffset representing the position above the top element of the stack."
        },
        {
          "name": "DeleteRange",
          "parameters": [
            "range"
          ],
          "return_type": "void",
          "logic": "Deletes the elements within the given StackRange from the stack."
        },
        {
          "name": "operator==",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Equality comparison operator."
        },
        {
          "name": "operator!=",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Inequality comparison operator."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "T*",
          "logic": "Returns a pointer to the beginning of the underlying vector."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "T*",
          "logic": "Returns a pointer to the end of the underlying vector."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const T*",
          "logic": "Returns a const pointer to the beginning of the underlying vector."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const T*",
          "logic": "Returns a const pointer to the end of the underlying vector."
        }
      ]
    },
    {
      "name": "NullStreambuf",
      "properties": [
        "buffer_"
      ],
      "methods": [
        {
          "name": "overflow",
          "parameters": [
            "c"
          ],
          "return_type": "int",
          "logic": "Overrides the overflow method of std::streambuf to discard output."
        }
      ]
    },
    {
      "name": "NullOStream",
      "properties": [
        "buffer_"
      ],
      "methods": [
        {
          "name": "NullOStream",
          "parameters": [],
          "return_type": "NullOStream",
          "logic": "Constructor.  Initializes the ostream with a NullStreambuf to discard output."
        }
      ]
    },
    {
      "name": "IfDefScope",
      "properties": [
        "os_",
        "d_"
      ],
      "methods": [
        {
          "name": "IfDefScope",
          "parameters": [
            "os",
            "d"
          ],
          "return_type": "IfDefScope",
          "logic": "Constructor.  Prints `#ifdef d` to the output stream."
        },
        {
          "name": "~IfDefScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Prints `#endif  // d` to the output stream."
        }
      ]
    },
    {
      "name": "NamespaceScope",
      "properties": [
        "os_",
        "d_"
      ],
      "methods": [
        {
          "name": "NamespaceScope",
          "parameters": [
            "os",
            "namespaces"
          ],
          "return_type": "NamespaceScope",
          "logic": "Constructor. Prints `namespace ns1 { namespace ns2 { ...` to the output stream."
        },
        {
          "name": "~NamespaceScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Prints `} } ...` to the output stream to close the namespaces."
        }
      ]
    },
    {
      "name": "IncludeGuardScope",
      "properties": [
        "os_",
        "d_"
      ],
      "methods": [
        {
          "name": "IncludeGuardScope",
          "parameters": [
            "os",
            "file_name"
          ],
          "return_type": "IncludeGuardScope",
          "logic": "Constructor.  Prints `#ifndef INCLUDE_GUARD_FILE_NAME`, `#define INCLUDE_GUARD_FILE_NAME` to create an include guard."
        },
        {
          "name": "~IncludeGuardScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Prints `#endif  // INCLUDE_GUARD_FILE_NAME` to end the include guard."
        }
      ]
    },
    {
      "name": "IncludeObjectMacrosScope",
      "properties": [
        "os_"
      ],
      "methods": [
        {
          "name": "IncludeObjectMacrosScope",
          "parameters": [
            "os"
          ],
          "return_type": "IncludeObjectMacrosScope",
          "logic": "Constructor.  Includes the macro definitions to make object instantiation easier in generated code."
        },
        {
          "name": "~IncludeObjectMacrosScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Undefines the macro definitions."
        }
      ]
    },
    {
      "name": "ResidueClass",
      "properties": [
        "value_",
        "modulus_log_2_"
      ],
      "methods": [
        {
          "name": "ResidueClass",
          "parameters": [
            "value",
            "modulus_log_2"
          ],
          "return_type": "ResidueClass",
          "logic": "Constructor.  Initializes the value and modulus_log_2.  Represents a congruence class modulo 2^modulus_log_2."
        },
        {
          "name": "Unknown",
          "parameters": [],
          "return_type": "ResidueClass",
          "logic": "Returns the ResidueClass representing all integers."
        },
        {
          "name": "SingleValue",
          "parameters": [],
          "return_type": "std::optional<size_t>",
          "logic": "Returns the single value if the modulus corresponds to the size of size_t; otherwise, returns std::nullopt."
        },
        {
          "name": "AlignmentLog2",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the base 2 logarithm of the largest power of 2 that divides all elements of the congruence class."
        },
        {
          "name": "Alignment",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the largest power of 2 that divides all elements of the congruence class."
        }
      ]
    },
    {
      "name": "Worklist",
      "properties": [
        "queue_",
        "contained_"
      ],
      "methods": [
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the worklist is empty."
        },
        {
          "name": "Enqueue",
          "parameters": [
            "value"
          ],
          "return_type": "bool",
          "logic": "Enqueues a value to the worklist if it is not already present. Returns true if the value was enqueued, false otherwise."
        },
        {
          "name": "Dequeue",
          "parameters": [],
          "return_type": "T",
          "logic": "Dequeues a value from the worklist and returns it."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "StringLiteralUnquote",
      "parameters": [
        "s"
      ],
      "return_type": "std::string",
      "logic": "Unquotes a string literal by removing surrounding quotes and unescaping special characters."
    },
    {
      "name": "StringLiteralQuote",
      "parameters": [
        "s"
      ],
      "return_type": "std::string",
      "logic": "Quotes a string literal by adding surrounding quotes and escaping special characters."
    },
    {
      "name": "FileUriDecode",
      "parameters": [
        "s"
      ],
      "return_type": "std::optional<std::string>",
      "logic": "Decodes a 'file://' URI into a file path. Returns an optional containing the path if the URI is valid, or an empty optional otherwise."
    },
    {
      "name": "ToString",
      "parameters": [
        "args..."
      ],
      "return_type": "std::string",
      "logic": "Converts a variable number of arguments to a string using a stringstream."
    },
    {
      "name": "Message",
      "parameters": [
        "kind",
        "args..."
      ],
      "return_type": "MessageBuilder",
      "logic": "Creates a MessageBuilder object with the given kind and message."
    },
    {
      "name": "Error",
      "parameters": [
        "args..."
      ],
      "return_type": "MessageBuilder",
      "logic": "Creates a MessageBuilder object with kind set to kError."
    },
    {
      "name": "Lint",
      "parameters": [
        "args..."
      ],
      "return_type": "MessageBuilder",
      "logic": "Creates a MessageBuilder object with kind set to kLint."
    },
    {
      "name": "IsLowerCamelCase",
      "parameters": [
        "s"
      ],
      "return_type": "bool",
      "logic": "Checks if a string is in lower camel case."
    },
    {
      "name": "IsUpperCamelCase",
      "parameters": [
        "s"
      ],
      "return_type": "bool",
      "logic": "Checks if a string is in upper camel case (Pascal case)."
    },
    {
      "name": "IsSnakeCase",
      "parameters": [
        "s"
      ],
      "return_type": "bool",
      "logic": "Checks if a string is in snake case."
    },
    {
      "name": "IsValidNamespaceConstName",
      "parameters": [
        "s"
      ],
      "return_type": "bool",
      "logic": "Checks if a string is a valid name for a constant within a namespace."
    },
    {
      "name": "IsValidTypeName",
      "parameters": [
        "s"
      ],
      "return_type": "bool",
      "logic": "Checks if a string is a valid type name."
    },
    {
      "name": "ReportError",
      "parameters": [
        "args..."
      ],
      "return_type": "void",
      "logic": "Reports an error using MessageBuilder and throws an exception."
    },
    {
      "name": "CapifyStringWithUnderscores",
      "parameters": [
        "camellified_string"
      ],
      "return_type": "std::string",
      "logic": "Converts a camellified string into a string where each word is capitalized and separated by underscores."
    },
    {
      "name": "CamelifyString",
      "parameters": [
        "underscore_string"
      ],
      "return_type": "std::string",
      "logic": "Converts a string with underscores into camel case."
    },
    {
      "name": "SnakeifyString",
      "parameters": [
        "camel_string"
      ],
      "return_type": "std::string",
      "logic": "Converts a camel case string into snake case."
    },
    {
      "name": "DashifyString",
      "parameters": [
        "underscore_string"
      ],
      "return_type": "std::string",
      "logic": "Converts a string with underscores into a dashed string."
    },
    {
      "name": "UnderlinifyPath",
      "parameters": [
        "path"
      ],
      "return_type": "std::string",
      "logic": "Replaces slashes in a path with underscores."
    },
    {
      "name": "StartsWithSingleUnderscore",
      "parameters": [
        "str"
      ],
      "return_type": "bool",
      "logic": "Checks if a string starts with a single underscore."
    },
    {
      "name": "ReplaceFileContentsIfDifferent",
      "parameters": [
        "file_path",
        "contents"
      ],
      "return_type": "void",
      "logic": "Replaces the contents of a file only if the new contents are different from the existing contents."
    },
    {
      "name": "DereferenceIfPointer",
      "parameters": [
        "x"
      ],
      "return_type": "T&",
      "logic": "If T is a pointer, dereferences it; otherwise returns the value directly (lvalue overload)."
    },
    {
      "name": "DereferenceIfPointer",
      "parameters": [
        "x"
      ],
      "return_type": "T&&",
      "logic": "If T is a pointer, dereferences it; otherwise returns the value directly (rvalue overload)."
    },
    {
      "name": "PrintList",
      "parameters": [
        "list",
        "separator"
      ],
      "return_type": "auto",
      "logic": "Creates a ListPrintAdaptor for a given list and separator. Defaults to comma separated. Uses a default lambda."
    },
    {
      "name": "PrintList",
      "parameters": [
        "list",
        "separator",
        "transformer"
      ],
      "return_type": "auto",
      "logic": "Creates a ListPrintAdaptor for a given list, separator, and transformer lambda."
    },
    {
      "name": "PrintCommaSeparatedList",
      "parameters": [
        "os",
        "list",
        "transform"
      ],
      "return_type": "void",
      "logic": "Prints a list to the output stream as comma-separated values, transforming each element."
    },
    {
      "name": "PrintCommaSeparatedList",
      "parameters": [
        "os",
        "list"
      ],
      "return_type": "void",
      "logic": "Prints a list to the output stream as comma-separated values."
    },
    {
      "name": "operator<<",
      "parameters": [
        "out",
        "from_bottom"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for BottomOffset to print a user-friendly representation."
    },
    {
      "name": "operator<<",
      "parameters": [
        "out",
        "range"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for StackRange to print a user-friendly representation."
    },
    {
      "name": "CheckNotNull",
      "parameters": [
        "x"
      ],
      "return_type": "T*",
      "logic": "Checks if a pointer is not null and returns it."
    },
    {
      "name": "operator<<",
      "parameters": [
        "os",
        "t"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for Stack<T> to print a user-friendly representation."
    },
    {
      "name": "EraseIf",
      "parameters": [
        "container",
        "f"
      ],
      "return_type": "void",
      "logic": "Erases elements from a container based on a predicate. Uses constant-time erase."
    },
    {
      "name": "StringStartsWith",
      "parameters": [
        "s",
        "prefix"
      ],
      "return_type": "bool",
      "logic": "Checks if a string starts with a given prefix."
    },
    {
      "name": "StringEndsWith",
      "parameters": [
        "s",
        "suffix"
      ],
      "return_type": "bool",
      "logic": "Checks if a string ends with a given suffix."
    },
    {
      "name": "operator+",
      "parameters": [
        "a",
        "b"
      ],
      "return_type": "ResidueClass",
      "logic": "Addition operator overload for ResidueClass."
    },
    {
      "name": "operator*",
      "parameters": [
        "a",
        "b"
      ],
      "return_type": "ResidueClass",
      "logic": "Multiplication operator overload for ResidueClass."
    },
    {
      "name": "operator<<",
      "parameters": [
        "os",
        "a"
      ],
      "return_type": "std::ostream&",
      "logic": "Output stream operator overload for ResidueClass."
    },
    {
      "name": "TransformVector",
      "parameters": [
        "v",
        "f"
      ],
      "return_type": "std::vector<T>",
      "logic": "Transforms a vector using a given function and returns a new vector with the transformed elements."
    },
    {
      "name": "TransformVector",
      "parameters": [
        "v"
      ],
      "return_type": "std::vector<T>",
      "logic": "Transforms a vector using the identity function and returns a new vector with the elements."
    }
  ]
}