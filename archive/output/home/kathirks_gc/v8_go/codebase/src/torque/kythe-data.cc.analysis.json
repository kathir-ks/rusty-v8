{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/kythe-data.cc",
  "imports": [
    "src/torque/kythe-data.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "AddConstantDefinition",
      "parameters": [
        "const Value* constant"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Adds a definition of a constant to the Kythe data. It first checks if the constant is already registered. If not, it registers the constant by creating a Kythe entity and associating it with the constant's position and name."
    },
    {
      "name": "AddConstantUse",
      "parameters": [
        "SourcePosition use_position",
        "const Value* constant"
      ],
      "return_type": "void",
      "logic": "Adds a use of a constant to the Kythe data. It retrieves the constant's ID (creating a definition if it doesn't exist yet) and then registers a 'use' relationship between the current position and the constant."
    },
    {
      "name": "AddFunctionDefinition",
      "parameters": [
        "Callable* callable"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Adds a definition of a callable (function) to the Kythe data. It first checks if the callable is already registered. If not, it registers the callable by creating a Kythe entity and associating it with the callable's identifier position and name."
    },
    {
      "name": "AddCall",
      "parameters": [
        "Callable* caller",
        "SourcePosition call_position",
        "Callable* callee"
      ],
      "return_type": "void",
      "logic": "Adds a 'call' relationship between a caller and a callee in the Kythe data. It retrieves the Kythe IDs of both caller and callee (creating definitions if they don't exist yet) and then registers a 'call' relationship between the caller and the callee at the given call position."
    },
    {
      "name": "AddClassFieldDefinition",
      "parameters": [
        "const Field* field"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Adds a definition of a class field to the Kythe data. It first checks if the field is already registered. If not, it registers the field by creating a Kythe entity and associating it with the field's position and name."
    },
    {
      "name": "AddClassFieldUse",
      "parameters": [
        "SourcePosition use_position",
        "const Field* field"
      ],
      "return_type": "void",
      "logic": "Adds a use of a class field to the Kythe data. It retrieves the field's ID (creating a definition if it doesn't exist yet) and then registers a 'use' relationship between the current position and the field."
    },
    {
      "name": "AddBindingDefinition",
      "parameters": [
        "Binding<LocalValue>* binding"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Adds a definition of a binding (local variable) to the Kythe data for LocalValue bindings. It calls AddBindingDefinitionImpl to handle the actual definition."
    },
    {
      "name": "AddBindingDefinition",
      "parameters": [
        "Binding<LocalLabel>* binding"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Adds a definition of a binding (local variable) to the Kythe data for LocalLabel bindings. It calls AddBindingDefinitionImpl to handle the actual definition."
    },
    {
      "name": "AddBindingDefinitionImpl",
      "parameters": [
        "uint64_t binding_index",
        "const std::string& name",
        "const SourcePosition& ident_pos"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Implements the addition of a binding definition to the Kythe data. It checks if the binding is already known based on its index. If not, a new Kythe entity is created and associated with the binding's information."
    },
    {
      "name": "AddBindingUse",
      "parameters": [
        "SourcePosition use_position",
        "Binding<LocalValue>* binding"
      ],
      "return_type": "void",
      "logic": "Adds a use of a binding (local variable) to the Kythe data for LocalValue bindings. It retrieves the binding's ID (creating a definition if it doesn't exist yet) and registers a 'use' relationship."
    },
    {
      "name": "AddBindingUse",
      "parameters": [
        "SourcePosition use_position",
        "Binding<LocalLabel>* binding"
      ],
      "return_type": "void",
      "logic": "Adds a use of a binding (local variable) to the Kythe data for LocalLabel bindings. It retrieves the binding's ID (creating a definition if it doesn't exist yet) and registers a 'use' relationship."
    },
    {
      "name": "AddTypeDefinition",
      "parameters": [
        "const Declarable* type_decl"
      ],
      "return_type": "kythe_entity_t",
      "logic": "Adds a definition of a type to the Kythe data. It first checks if the type is already registered. If not, it registers the type by creating a Kythe entity and associating it with the type's identifier position and name."
    },
    {
      "name": "AddTypeUse",
      "parameters": [
        "SourcePosition use_position",
        "const Declarable* type_decl"
      ],
      "return_type": "void",
      "logic": "Adds a use of a type to the Kythe data. It retrieves the type's ID (creating a definition if it doesn't exist yet) and then registers a 'use' relationship between the current position and the type."
    }
  ]
}