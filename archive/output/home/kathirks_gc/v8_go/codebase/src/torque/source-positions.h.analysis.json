{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/source-positions.h",
  "imports": [
    "<iostream>",
    "src/base/contextual.h"
  ],
  "classes": [
    {
      "name": "SourceId",
      "properties": [
        "id_"
      ],
      "methods": [
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "SourceId",
          "logic": "Returns an invalid SourceId object, identified by id_ == -1."
        },
        {
          "name": "IsValid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the SourceId is valid by verifying that id_ is not -1."
        },
        {
          "name": "operator==",
          "parameters": [
            "const SourceId& s"
          ],
          "return_type": "int",
          "logic": "Compares two SourceId objects for equality based on their id_ values."
        },
        {
          "name": "operator<",
          "parameters": [
            "const SourceId& s"
          ],
          "return_type": "bool",
          "logic": "Compares two SourceId objects to see if the left hand side SourceId is less than the right hand side SourceId based on their id_ values."
        },
        {
          "name": "SourceId",
          "parameters": [
            "int id"
          ],
          "return_type": "SourceId",
          "logic": "Private constructor. Creates a SourceId object with the given id."
        }
      ]
    },
    {
      "name": "LineAndColumn",
      "properties": [
        "offset",
        "line",
        "column"
      ],
      "methods": [
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "LineAndColumn",
          "logic": "Returns an invalid LineAndColumn object, with all fields set to -1."
        },
        {
          "name": "WithUnknownOffset",
          "parameters": [
            "int line",
            "int column"
          ],
          "return_type": "LineAndColumn",
          "logic": "Creates a LineAndColumn object with a specified line and column, but with an unknown offset (kUnknownOffset = -1)."
        },
        {
          "name": "operator==",
          "parameters": [
            "const LineAndColumn& other"
          ],
          "return_type": "bool",
          "logic": "Compares two LineAndColumn objects for equality. If either offset is unknown, compares only line and column.  If both offsets are known, compares offsets."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const LineAndColumn& other"
          ],
          "return_type": "bool",
          "logic": "Compares two LineAndColumn objects for inequality by negating the result of operator==."
        }
      ]
    },
    {
      "name": "SourcePosition",
      "properties": [
        "source",
        "start",
        "end"
      ],
      "methods": [
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "SourcePosition",
          "logic": "Returns an invalid SourcePosition object, with invalid SourceId, LineAndColumn for start and end."
        },
        {
          "name": "CompareStartIgnoreColumn",
          "parameters": [
            "const SourcePosition& pos"
          ],
          "return_type": "bool",
          "logic": "Compares the starting line and source of two SourcePosition objects, ignoring the column."
        },
        {
          "name": "Contains",
          "parameters": [
            "LineAndColumn pos"
          ],
          "return_type": "bool",
          "logic": "Checks if a given LineAndColumn position is within the range defined by the SourcePosition's start and end positions."
        },
        {
          "name": "operator==",
          "parameters": [
            "const SourcePosition& pos"
          ],
          "return_type": "bool",
          "logic": "Compares two SourcePosition objects for equality by comparing their source, start, and end positions."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const SourcePosition& pos"
          ],
          "return_type": "bool",
          "logic": "Compares two SourcePosition objects for inequality by negating the result of operator==."
        }
      ]
    },
    {
      "name": "SourceFileMap",
      "properties": [
        "sources_",
        "v8_root_"
      ],
      "methods": [
        {
          "name": "SourceFileMap",
          "parameters": [
            "std::string v8_root"
          ],
          "return_type": "SourceFileMap",
          "logic": "Constructor for SourceFileMap, initializing the v8_root_ member."
        },
        {
          "name": "PathFromV8Root",
          "parameters": [
            "SourceId file"
          ],
          "return_type": "const std::string&",
          "logic": "Returns the path of a source file relative to the V8 root directory, given its SourceId."
        },
        {
          "name": "PathFromV8RootWithoutExtension",
          "parameters": [
            "SourceId file"
          ],
          "return_type": "std::string",
          "logic": "Returns the path of a source file relative to the V8 root directory without the extension, given its SourceId."
        },
        {
          "name": "AbsolutePath",
          "parameters": [
            "SourceId file"
          ],
          "return_type": "std::string",
          "logic": "Returns the absolute path of a source file, given its SourceId."
        },
        {
          "name": "AddSource",
          "parameters": [
            "std::string path"
          ],
          "return_type": "SourceId",
          "logic": "Adds a new source file path to the map and returns its SourceId."
        },
        {
          "name": "GetSourceId",
          "parameters": [
            "const std::string& path"
          ],
          "return_type": "SourceId",
          "logic": "Retrieves the SourceId for a given source file path."
        },
        {
          "name": "AllSources",
          "parameters": [],
          "return_type": "std::vector<SourceId>",
          "logic": "Returns a vector containing the SourceId of all added source files."
        },
        {
          "name": "FileRelativeToV8RootExists",
          "parameters": [
            "const std::string& path"
          ],
          "return_type": "bool",
          "logic": "Checks if a file exists relative to the V8 root directory."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "PositionAsString",
      "parameters": [
        "SourcePosition pos"
      ],
      "return_type": "std::string",
      "logic": "Converts a SourcePosition object into a string representation in the format 'path:line:column'."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& out",
        "SourcePosition pos"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator to print a SourcePosition object as a link to the chromium source code."
    }
  ]
}