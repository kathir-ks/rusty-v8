{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/cc-generator.cc",
  "imports": [
    "src/torque/cc-generator.h",
    "<optional>",
    "src/common/globals.h",
    "src/torque/global-context.h",
    "src/torque/type-oracle.h",
    "src/torque/types.h",
    "src/torque/utils.h"
  ],
  "classes": [
    {
      "name": "CCGenerator",
      "properties": [
        "out_",
        "is_cc_debug_",
        "cfg_",
        "previous_position_"
      ],
      "methods": [
        {
          "name": "EmitGraph",
          "parameters": [
            "Stack<std::string> parameters"
          ],
          "return_type": "std::optional<Stack<std::string>>",
          "logic": "Emits the C++ code for a graph represented by the CFG. It iterates through the blocks, emitting code for each.  It handles parameter definitions, buffers the output for declarations, and returns the result from the end block if present."
        },
        {
          "name": "EmitBlock",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "Stack<std::string>",
          "logic": "Emits the C++ code for a single block. It handles block input definitions, iterates through the instructions in the block, and emits code for each instruction."
        },
        {
          "name": "EmitSourcePosition",
          "parameters": [
            "SourcePosition pos",
            "bool always_emit"
          ],
          "return_type": "void",
          "logic": "Emits a comment indicating the source position in the generated C++ code, if the position has changed since the last emission or `always_emit` is true."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const PushUninitializedInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because PushUninitialized instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const PushBuiltinPointerInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because PushBuiltinPointer instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const NamespaceConstantInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because NamespaceConstantInstruction is not supported in C++ output."
        },
        {
          "name": "ProcessArgumentsCommon",
          "parameters": [
            "const TypeVector& parameter_types",
            "std::vector<std::string> constexpr_arguments",
            "Stack<std::string>* stack"
          ],
          "return_type": "std::vector<std::string>",
          "logic": "Processes the arguments for a function call, handling both constexpr and regular arguments. It converts the stack values to string representations."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const CallIntrinsicInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits the C++ code for calling an intrinsic function. It handles argument processing, result variable creation, and calls the appropriate C++ function."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const CallCsaMacroInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits the C++ code for calling a CSA macro. It handles argument processing, result variable creation, and calls the corresponding C++ function."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const CallCsaMacroAndBranchInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because CallCsaMacroAndBranch instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const MakeLazyNodeInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because MakeLazyNode instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const CallBuiltinInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because CallBuiltin instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const CallBuiltinPointerInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because CallBuiltinPointer instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const CallRuntimeInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because CallRuntime instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const BranchInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits the C++ code for a branch instruction. It pops the condition from the stack and emits an if-else statement with goto statements to the corresponding blocks."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const ConstexprBranchInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits the C++ code for a constexpr branch instruction. It uses the constexpr condition directly and emits an if-else statement with goto statements to the corresponding blocks."
        },
        {
          "name": "EmitGoto",
          "parameters": [
            "const Block* destination",
            "Stack<std::string>* stack",
            "std::string indentation"
          ],
          "return_type": "void",
          "logic": "Emits a goto statement to the specified block. It handles phi variable assignments before the goto."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const GotoInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits a goto statement to the destination block."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const GotoExternalInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because GotoExternal instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const ReturnInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because Return instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const PrintErrorInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits code to print an error message to stderr."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const AbortInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits code to abort execution, based on the abort kind (Unreachable, DebugBreak, AssertionFailure)."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const UnsafeCastInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits code for an unsafe cast (static_cast) from the top of the stack to the destination type. Updates stack and definition variable."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const LoadReferenceInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits code to load a value from a reference (memory location). It uses TaggedField::load or ReadField depending on the type."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const StoreReferenceInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because StoreReference instruction is not supported in C++ output."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const LoadBitFieldInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Emits code to load a bit field from a struct. It uses base::BitField to decode the bit field value."
        },
        {
          "name": "EmitInstruction",
          "parameters": [
            "const StoreBitFieldInstruction& instruction",
            "Stack<std::string>* stack"
          ],
          "return_type": "void",
          "logic": "Reports an error because StoreBitField instruction is not supported in C++ output."
        },
        {
          "name": "EmitCCValue",
          "parameters": [
            "VisitResult result",
            "const Stack<std::string>& values",
            "std::ostream& out"
          ],
          "return_type": "void",
          "logic": "Emits a C++ value representation based on the VisitResult. It handles struct fields and complex types by collecting all individual fields recursively and outputting a tuple if necessary. Otherwise just print the single field value"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetBitFieldSpecialization",
      "parameters": [
        "const Type* container",
        "const BitField& field"
      ],
      "return_type": "std::string",
      "logic": "Constructs the C++ type name for a bitfield specialization using the container type and bitfield description."
    },
    {
      "name": "CollectAllFields",
      "parameters": [
        "const VisitResult& result",
        "const Stack<std::string>& values",
        "std::vector<std::string>& all_fields"
      ],
      "return_type": "void",
      "logic": "Recursively collects all fields from a VisitResult. If the result is a struct, it collects fields from all substructs. If it is not on stack, then adds constexpr value. Otherwise, adds stack element."
    }
  ]
}