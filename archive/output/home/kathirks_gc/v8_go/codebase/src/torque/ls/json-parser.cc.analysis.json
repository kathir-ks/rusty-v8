{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/ls/json-parser.cc",
  "imports": [
    "src/torque/ls/json-parser.h",
    "<cctype>",
    "<optional>",
    "src/torque/earley-parser.h"
  ],
  "classes": [
    {
      "name": "JsonGrammar",
      "properties": [
        "trueLiteral",
        "falseLiteral",
        "nullLiteral",
        "decimalLiteral",
        "stringLiteral",
        "elementList",
        "array",
        "member",
        "memberList",
        "object",
        "value",
        "file"
      ],
      "methods": [
        {
          "name": "MatchWhitespace",
          "parameters": [
            "InputPosition* pos"
          ],
          "return_type": "bool",
          "logic": "Matches and consumes whitespace characters in the input stream. Returns true if any whitespace was matched."
        },
        {
          "name": "MatchStringLiteral",
          "parameters": [
            "InputPosition* pos"
          ],
          "return_type": "bool",
          "logic": "Matches a string literal enclosed in either single or double quotes, handling escape sequences. Returns true if a string literal was matched."
        },
        {
          "name": "MatchHexLiteral",
          "parameters": [
            "InputPosition* pos"
          ],
          "return_type": "bool",
          "logic": "Matches a hexadecimal number literal (e.g., 0x123).  Returns true if a hexadecimal literal was matched."
        },
        {
          "name": "MatchDecimalLiteral",
          "parameters": [
            "InputPosition* pos"
          ],
          "return_type": "bool",
          "logic": "Matches a decimal number literal, including optional sign, fractional part, and exponent. Returns true if a decimal literal was matched."
        },
        {
          "name": "JsonGrammar",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for JsonGrammar. Initializes the grammar by setting the whitespace matcher."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "MakeBoolLiteral",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonValue representing a boolean literal (true or false) based on the template parameter."
    },
    {
      "name": "MakeNullLiteral",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonValue representing the null literal."
    },
    {
      "name": "MakeNumberLiteral",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonValue representing a number literal by converting the input string to a double."
    },
    {
      "name": "MakeStringLiteral",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonValue representing a string literal after unquoting the input string using StringLiteralUnquote."
    },
    {
      "name": "MakeArray",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonValue representing a JSON array by extracting the array from the child results."
    },
    {
      "name": "MakeMember",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonMember (key-value pair) for a JSON object, extracting the key and value from the child results and unquoting the key."
    },
    {
      "name": "MakeObject",
      "parameters": [
        "ParseResultIterator* child_results"
      ],
      "return_type": "std::optional<ParseResult>",
      "logic": "Creates a JsonValue representing a JSON object by extracting the member list from the child results and constructing the object."
    },
    {
      "name": "ParseJson",
      "parameters": [
        "const std::string& input"
      ],
      "return_type": "JsonParserResult",
      "logic": "Parses a JSON string using the JsonGrammar. Handles Torque-specific scoping and error reporting. Returns a JsonParserResult containing the parsed JsonValue or an error message."
    }
  ]
}