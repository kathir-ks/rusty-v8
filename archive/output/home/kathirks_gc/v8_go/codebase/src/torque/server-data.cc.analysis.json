{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/torque/server-data.cc",
  "imports": [
    "src/torque/server-data.h",
    "<optional>",
    "src/base/macros.h",
    "src/torque/declarable.h",
    "src/torque/implementation-visitor.h"
  ],
  "classes": [
    {
      "name": "LanguageServerData",
      "properties": [
        "definitions_map_",
        "symbols_map_"
      ],
      "methods": [
        {
          "name": "AddDefinition",
          "parameters": [
            "SourcePosition token",
            "SourcePosition definition"
          ],
          "return_type": "void",
          "logic": "Adds a definition mapping from a token's source position to the definition's source position in the definitions map."
        },
        {
          "name": "FindDefinition",
          "parameters": [
            "SourceId source",
            "LineAndColumn pos"
          ],
          "return_type": "std::optional<SourcePosition>",
          "logic": "Finds the definition corresponding to a given source file and position. It iterates through the definitions_map_ to find the mapping that contains the specified position and returns the corresponding definition's SourcePosition. Returns std::nullopt if not found or source is invalid."
        },
        {
          "name": "PrepareAllDeclarableSymbols",
          "parameters": [],
          "return_type": "void",
          "logic": "Prepares a map of declarable symbols (from global_context_->declarables_) for use by the language server. It iterates through all declarables, filters out auto-generated ones, and adds them to the symbols_map_ keyed by their source file."
        }
      ]
    }
  ],
  "functions": [],
  "global_variables": [
    {
      "name": "EXPORT_CONTEXTUAL_VARIABLE(v8::internal::torque::LanguageServerData)",
      "type": "macro",
      "logic": "This is a macro invocation that probably registers LanguageServerData as a global variable within a specific context."
    }
  ]
}