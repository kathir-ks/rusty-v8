{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/inlining-tree.h",
  "imports": [
    "<cinttypes>",
    "<cstdint>",
    "<queue>",
    "<vector>",
    "src/utils/utils.h",
    "src/wasm/compilation-environment.h",
    "src/wasm/wasm-module.h"
  ],
  "classes": [
    {
      "name": "InliningTree",
      "properties": [
        "data_",
        "function_index_",
        "call_count_",
        "wire_byte_size_",
        "is_inlined_",
        "feedback_found_",
        "function_calls_",
        "has_non_inlineable_targets_",
        "depth_",
        "caller_index_",
        "feedback_slot_",
        "case_"
      ],
      "methods": [
        {
          "name": "CreateRoot",
          "parameters": [
            "Zone* zone",
            "const WasmModule* module",
            "uint32_t function_index"
          ],
          "return_type": "InliningTree*",
          "logic": "Creates the root node of the inlining tree. It initializes the node with the module, function index, and other parameters. It also calls FullyExpand to start the inlining process."
        },
        {
          "name": "NoLiftoffBudget",
          "parameters": [
            "const WasmModule* module",
            "uint32_t func_index"
          ],
          "return_type": "int",
          "logic": "Calculates a rough estimate of the inlining budget without relying on call counts, used when no profiling data is available (no-liftoff)."
        },
        {
          "name": "score",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Calculates a score for the inlining candidate based on call count and wire byte size. Used for prioritization in the inlining queue."
        },
        {
          "name": "function_calls",
          "parameters": [],
          "return_type": "base::Vector<CasesPerCallSite>",
          "logic": "Returns the function_calls_ member, a vector of possible function calls from the given node."
        },
        {
          "name": "has_non_inlineable_targets",
          "parameters": [],
          "return_type": "base::Vector<bool>",
          "logic": "Returns the has_non_inlineable_targets_ member, a vector that indicates whether a function call has non-inlineable targets."
        },
        {
          "name": "feedback_found",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the feedback_found_ member, which indicates whether feedback information was found for this function."
        },
        {
          "name": "is_inlined",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the is_inlined_ member, indicating whether this function has been inlined."
        },
        {
          "name": "function_index",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the function_index_ member, which is the index of the function."
        },
        {
          "name": "BudgetScaleFactor",
          "parameters": [
            "const WasmModule* module"
          ],
          "return_type": "double",
          "logic": "Calculates a scale factor for the inlining budget based on the percentage of small functions in the module. This helps adjust the inlining budget based on the module's characteristics."
        },
        {
          "name": "Inline",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the function call as inline and initializes function_calls_ based on type feedback from the module. It populates the tree with possible inline candidates based on profiling data."
        },
        {
          "name": "SmallEnoughToInline",
          "parameters": [
            "size_t initial_wire_byte_size",
            "size_t inlined_wire_byte_count"
          ],
          "return_type": "bool",
          "logic": "Determines if there is enough budget remaining to inline the current candidate based on the initial graph size and already inlined code."
        },
        {
          "name": "FullyExpand",
          "parameters": [],
          "return_type": "void",
          "logic": "Recursively expands the inlining tree. Nodes are prioritized based on their score. Expansion stops when the maximum number of inlined nodes is reached or the budget is exhausted. This method drives the core inlining decision-making process."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [],
  "constants": [
    {
      "name": "kMaxInlinedCount",
      "value": "60",
      "description": "Maximum number of functions that can be inlined."
    },
    {
      "name": "kMaxInliningNestingDepth",
      "value": "7",
      "description": "Limit on the nesting depth of inlining to prevent excessive recursion."
    }
  ]
}