{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-debug.h",
  "imports": [
    "include/v8-internal.h",
    "src/base/iterator.h",
    "src/base/logging.h",
    "src/base/macros.h",
    "src/base/vector.h",
    "src/wasm/value-type.h",
    "src/wasm/wasm-subtyping.h",
    "<algorithm>",
    "<memory>",
    "<vector>"
  ],
  "classes": [
    {
      "name": "DebugSideTable",
      "properties": [
        "num_locals_",
        "entries_"
      ],
      "methods": [
        {
          "name": "DebugSideTable",
          "parameters": [
            "int num_locals",
            "std::vector<Entry> entries"
          ],
          "return_type": "constructor",
          "logic": "Constructor for DebugSideTable. Initializes the number of locals and the entries, and asserts that the entries are sorted by PC offset."
        },
        {
          "name": "GetEntry",
          "parameters": [
            "int pc_offset"
          ],
          "return_type": "const Entry*",
          "logic": "Finds the entry in the table for the given program counter offset using binary search. Returns nullptr if not found."
        },
        {
          "name": "FindValue",
          "parameters": [
            "const Entry* entry",
            "int stack_index"
          ],
          "return_type": "const Entry::Value*",
          "logic": "Finds the value at the given stack index within a given entry, searching backwards through previous entries if necessary. Implements minimization and data reconstruction."
        },
        {
          "name": "entries",
          "parameters": [],
          "return_type": "auto",
          "logic": "Returns a range over the entries in the table."
        },
        {
          "name": "num_locals",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of local variables."
        },
        {
          "name": "Print",
          "parameters": [
            "std::ostream&"
          ],
          "return_type": "void",
          "logic": "Prints the content of the DebugSideTable to the given output stream. Implementation details are not in the header."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the DebugSideTable. Implementation details are not in the header."
        }
      ]
    },
    {
      "name": "DebugSideTable::Entry",
      "properties": [
        "pc_offset_",
        "stack_height_",
        "changed_values_"
      ],
      "methods": [
        {
          "name": "Entry",
          "parameters": [
            "int pc_offset",
            "int stack_height",
            "std::vector<Value> changed_values"
          ],
          "return_type": "constructor",
          "logic": "Constructor for Entry. Stores the program counter offset, stack height, and changed values for this entry."
        },
        {
          "name": "Entry",
          "parameters": [
            "int pc_offset"
          ],
          "return_type": "constructor",
          "logic": "Constructor for map lookups (only initializes the {pc_offset_})."
        },
        {
          "name": "pc_offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the program counter offset."
        },
        {
          "name": "stack_height",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the stack height, including locals."
        },
        {
          "name": "changed_values",
          "parameters": [],
          "return_type": "base::Vector<const Value>",
          "logic": "Returns the changed values for this entry."
        },
        {
          "name": "FindChangedValue",
          "parameters": [
            "int stack_index"
          ],
          "return_type": "const Value*",
          "logic": "Finds a changed value at the given stack index. Returns nullptr if no such value exists."
        },
        {
          "name": "Print",
          "parameters": [
            "std::ostream&"
          ],
          "return_type": "void",
          "logic": "Prints the content of the Entry to the given output stream. Implementation details are not in the header."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the Entry. Implementation details are not in the header."
        }
      ]
    },
    {
      "name": "DebugInfo",
      "properties": [
        "impl_"
      ],
      "methods": [
        {
          "name": "DebugInfo",
          "parameters": [
            "NativeModule*"
          ],
          "return_type": "constructor",
          "logic": "Constructor for DebugInfo. Takes a pointer to a NativeModule."
        },
        {
          "name": "~DebugInfo",
          "parameters": [],
          "return_type": "destructor",
          "logic": "Destructor for DebugInfo."
        },
        {
          "name": "GetNumLocals",
          "parameters": [
            "Address pc",
            "Isolate* isolate"
          ],
          "return_type": "int",
          "logic": "Gets the number of local variables at the given program counter."
        },
        {
          "name": "GetLocalValue",
          "parameters": [
            "int local",
            "Address pc",
            "Address fp",
            "Address debug_break_fp",
            "Isolate* isolate"
          ],
          "return_type": "WasmValue",
          "logic": "Gets the value of a local variable at the given program counter and frame pointer."
        },
        {
          "name": "GetStackDepth",
          "parameters": [
            "Address pc",
            "Isolate* isolate"
          ],
          "return_type": "int",
          "logic": "Gets the stack depth at the given program counter."
        },
        {
          "name": "GetFunctionAtAddress",
          "parameters": [
            "Address pc",
            "Isolate* isolate"
          ],
          "return_type": "const wasm::WasmFunction&",
          "logic": "Gets the WasmFunction at the given program counter."
        },
        {
          "name": "GetStackValue",
          "parameters": [
            "int index",
            "Address pc",
            "Address fp",
            "Address debug_break_fp",
            "Isolate* isolate"
          ],
          "return_type": "WasmValue",
          "logic": "Gets the value on the stack at the given index, program counter, and frame pointer."
        },
        {
          "name": "SetBreakpoint",
          "parameters": [
            "int func_index",
            "int offset",
            "Isolate* current_isolate"
          ],
          "return_type": "void",
          "logic": "Sets a breakpoint at the given function index and offset."
        },
        {
          "name": "IsFrameBlackboxed",
          "parameters": [
            "WasmFrame* frame"
          ],
          "return_type": "bool",
          "logic": "Checks if the frame is blackboxed."
        },
        {
          "name": "PrepareStep",
          "parameters": [
            "WasmFrame*"
          ],
          "return_type": "bool",
          "logic": "Prepares the debugger to step into or over a frame. Returns true if we stay inside the passed frame (or a called frame) after the step. False if the frame will return after the step."
        },
        {
          "name": "PrepareStepOutTo",
          "parameters": [
            "WasmFrame*"
          ],
          "return_type": "void",
          "logic": "Prepares the debugger to step out of a frame."
        },
        {
          "name": "ClearStepping",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "void",
          "logic": "Clears the stepping state for all frames in an isolate."
        },
        {
          "name": "ClearStepping",
          "parameters": [
            "WasmFrame*"
          ],
          "return_type": "void",
          "logic": "Remove stepping code from a single frame; this is a performance optimization only."
        },
        {
          "name": "IsStepping",
          "parameters": [
            "WasmFrame*"
          ],
          "return_type": "bool",
          "logic": "Checks if the debugger is currently stepping in the given frame."
        },
        {
          "name": "RemoveBreakpoint",
          "parameters": [
            "int func_index",
            "int offset",
            "Isolate* current_isolate"
          ],
          "return_type": "void",
          "logic": "Removes a breakpoint at the given function index and offset."
        },
        {
          "name": "RemoveDebugSideTables",
          "parameters": [
            "base::Vector<WasmCode* const>"
          ],
          "return_type": "void",
          "logic": "Removes the debug side tables associated with the given WasmCode objects."
        },
        {
          "name": "GetDebugSideTableIfExists",
          "parameters": [
            "const WasmCode*"
          ],
          "return_type": "DebugSideTable*",
          "logic": "Returns the debug side table for the given code object, but only if it has already been created."
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "void",
          "logic": "Removes an Isolate from the debug info."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the DebugInfo object."
        }
      ]
    }
  ],
  "functions": []
}