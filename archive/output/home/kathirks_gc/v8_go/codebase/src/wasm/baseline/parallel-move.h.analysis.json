{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/parallel-move.h",
  "imports": [
    "src/wasm/baseline/liftoff-assembler.h",
    "src/wasm/baseline/liftoff-register.h",
    "src/wasm/wasm-value.h"
  ],
  "classes": [
    {
      "name": "ParallelMove",
      "properties": [
        "register_moves_[kAfterMaxLiftoffRegCode * sizeof(RegisterMove)]",
        "register_loads_[kAfterMaxLiftoffRegCode * sizeof(RegisterLoad)]",
        "src_reg_use_count_[kAfterMaxLiftoffRegCode]",
        "move_dst_regs_",
        "load_dst_regs_",
        "asm_",
        "last_spill_offset_"
      ],
      "methods": [
        {
          "name": "ParallelMove",
          "parameters": [
            "LiftoffAssembler* wasm_asm"
          ],
          "return_type": "ParallelMove",
          "logic": "Constructor for the ParallelMove class. Initializes the assembler pointer."
        },
        {
          "name": "~ParallelMove",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the ParallelMove class. Calls Execute() to finalize all moves and loads."
        },
        {
          "name": "Execute",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes all pending register moves and loads, first moving registers and then loading constants and stack values."
        },
        {
          "name": "Transfer",
          "parameters": [
            "const VarState& dst",
            "const VarState& src"
          ],
          "return_type": "void",
          "logic": "Transfers a value from the source VarState to the destination VarState. It handles register-to-register moves, loading from stack to register, and constant loading to register. If destination is stack, call TransferToStack. If destination is register, call LoadIntoRegister"
        },
        {
          "name": "TransferToStack",
          "parameters": [
            "int dst_offset",
            "const VarState& src"
          ],
          "return_type": "void",
          "logic": "Transfers value from source VarState to destination stack location. Implementation details are not provided in the header file."
        },
        {
          "name": "LoadIntoRegister",
          "parameters": [
            "LiftoffRegister dst",
            "const VarState& src"
          ],
          "return_type": "void",
          "logic": "Loads a value from the source VarState into the destination register. Handles register-to-register moves, loading from stack, and constant loading. Calls MoveRegister, LoadStackSlot, or LoadConstant accordingly."
        },
        {
          "name": "LoadI64HalfIntoRegister",
          "parameters": [
            "LiftoffRegister dst",
            "const VarState& src",
            "RegPairHalf half"
          ],
          "return_type": "void",
          "logic": "Loads half of an i64 value (either the low or high word) into the destination register. Handles loading from stack or registers.  Calls MoveRegister or LoadConstant accordingly."
        },
        {
          "name": "MoveRegister",
          "parameters": [
            "LiftoffRegister dst",
            "LiftoffRegister src",
            "ValueKind kind"
          ],
          "return_type": "void",
          "logic": "Moves a value from the source register to the destination register. Handles register pairs and cyclic dependencies. Stores move information for later execution."
        },
        {
          "name": "LoadConstant",
          "parameters": [
            "LiftoffRegister dst",
            "ValueKind kind",
            "int32_t constant"
          ],
          "return_type": "void",
          "logic": "Loads a constant value into the destination register. Handles register pairs (i64). Stores load information for later execution."
        },
        {
          "name": "LoadStackSlot",
          "parameters": [
            "LiftoffRegister dst",
            "int stack_offset",
            "ValueKind kind"
          ],
          "return_type": "void",
          "logic": "Loads a value from a stack slot into the destination register. Handles register pairs (i64 and s128). Stores load information for later execution."
        },
        {
          "name": "LoadI64HalfStackSlot",
          "parameters": [
            "LiftoffRegister dst",
            "int offset",
            "RegPairHalf half"
          ],
          "return_type": "void",
          "logic": "Loads half of an i64 value from a stack slot into the destination register. Stores load information for later execution."
        },
        {
          "name": "ExecuteMoves",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the register moves. Implementation details are not provided in the header file."
        },
        {
          "name": "ExecuteLoads",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the register loads. Implementation details are not provided in the header file."
        }
      ]
    }
  ],
  "functions": []
}