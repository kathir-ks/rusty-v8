{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-features.cc",
  "imports": [
    "src/wasm/wasm-features.h",
    "src/execution/isolate-inl.h",
    "src/flags/flags.h",
    "src/handles/handles-inl.h",
    "src/objects/string.h"
  ],
  "classes": [
    {
      "name": "WasmEnabledFeatures",
      "properties": [],
      "methods": [
        {
          "name": "FromFlags",
          "parameters": [],
          "return_type": "WasmEnabledFeatures",
          "logic": "Determines which Wasm features are enabled based on command-line flags. It checks the `wasm_jitless` flag and then iterates through the `FOREACH_WASM_FEATURE_FLAG` macro to check if the experimental flags for each feature are set. If a feature's flag is set, it adds that feature to the `WasmEnabledFeatures` object. This is conditional based on whether DrumBrake is enabled (V8_ENABLE_DRUMBRAKE)."
        },
        {
          "name": "FromIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "WasmEnabledFeatures",
          "logic": "Determines which Wasm features are enabled based on the isolate. It calls FromContext with the isolate and its native context."
        },
        {
          "name": "FromContext",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<NativeContext> context"
          ],
          "return_type": "WasmEnabledFeatures",
          "logic": "Determines which Wasm features are enabled based on the isolate's context. It starts with the features enabled by flags using FromFlags(), and then it checks if `stringref`, `imported_strings`, and `jspi` are enabled in the context. If they are, it adds them to the `WasmEnabledFeatures` object."
        }
      ]
    }
  ],
  "functions": []
}