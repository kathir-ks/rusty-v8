{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/module-instantiate.cc",
  "imports": [
    "src/wasm/module-instantiate.h",
    "src/api/api-inl.h",
    "src/asmjs/asm-js.h",
    "src/base/atomicops.h",
    "src/codegen/compiler.h",
    "src/compiler/wasm-compiler.h",
    "src/logging/counters-scopes.h",
    "src/logging/metrics.h",
    "src/numbers/conversions-inl.h",
    "src/objects/descriptor-array-inl.h",
    "src/objects/property-descriptor.h",
    "src/objects/torque-defined-classes.h",
    "src/sandbox/trusted-pointer-scope.h",
    "src/tracing/trace-event.h",
    "src/utils/utils.h",
    "src/wasm/code-space-access.h",
    "src/wasm/compilation-environment-inl.h",
    "src/wasm/constant-expression-interface.h",
    "src/wasm/module-compiler.h",
    "src/wasm/module-decoder-impl.h",
    "src/wasm/pgo.h",
    "src/wasm/wasm-code-pointer-table-inl.h",
    "src/wasm/wasm-constants.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-external-refs.h",
    "src/wasm/wasm-import-wrapper-cache.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-opcodes-inl.h",
    "src/wasm/wasm-subtyping.h",
    "src/execution/simulator-base.h"
  ],
  "classes": [
    {
      "name": "ResolvedWasmImport",
      "properties": [
        "callable_",
        "trusted_function_data_",
        "kind_",
        "suspend_",
        "well_known_status_"
      ],
      "methods": [
        {
          "name": "ResolvedWasmImport",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int func_index",
            "DirectHandle<JSReceiver> callable",
            "const wasm::CanonicalSig* expected_sig",
            "CanonicalTypeIndex expected_sig_id",
            "WellKnownImport preknown_import"
          ],
          "return_type": "void",
          "logic": "Constructor that computes the kind of the WASM import and sets the callable."
        },
        {
          "name": "SetCallable",
          "parameters": [
            "Isolate* isolate",
            "Tagged<JSReceiver> callable"
          ],
          "return_type": "void",
          "logic": "Sets the callable and clears any previously set trusted function data."
        },
        {
          "name": "SetCallable",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSReceiver> callable"
          ],
          "return_type": "void",
          "logic": "Sets the callable and clears any previously set trusted function data."
        },
        {
          "name": "ComputeKind",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int func_index",
            "const wasm::CanonicalSig* expected_sig",
            "CanonicalTypeIndex expected_sig_id",
            "WellKnownImport preknown_import"
          ],
          "return_type": "ImportCallKind",
          "logic": "Computes the kind of the import based on various factors such as whether it's a compile-time import, a Wasm-to-Wasm call, a Wasm-to-JS call, etc."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "ImportCallKind",
          "logic": "Getter for the ImportCallKind"
        },
        {
          "name": "callable",
          "parameters": [],
          "return_type": "DirectHandle<JSReceiver>",
          "logic": "Getter for the callable"
        },
        {
          "name": "trusted_function_data",
          "parameters": [],
          "return_type": "DirectHandle<WasmFunctionData>",
          "logic": "Getter for trusted_function_data"
        },
        {
          "name": "well_known_status",
          "parameters": [],
          "return_type": "WellKnownImport",
          "logic": "Getter for well_known_status_"
        }
      ]
    },
    {
      "name": "InstanceBuilder",
      "properties": [
        "isolate_",
        "context_id_",
        "enabled_",
        "module_",
        "thrower_",
        "module_object_",
        "ffi_",
        "asmjs_memory_buffer_",
        "untagged_globals_",
        "shared_untagged_globals_",
        "tagged_globals_",
        "shared_tagged_globals_",
        "tags_wrappers_",
        "shared_tags_wrappers_",
        "start_function_",
        "sanitized_imports_",
        "well_known_imports_",
        "init_expr_zone_"
      ],
      "methods": [
        {
          "name": "InstanceBuilder",
          "parameters": [
            "Isolate* isolate",
            "v8::metrics::Recorder::ContextId context_id",
            "ErrorThrower* thrower",
            "DirectHandle<WasmModuleObject> module_object",
            "MaybeDirectHandle<JSReceiver> ffi",
            "MaybeDirectHandle<JSArrayBuffer> memory_buffer"
          ],
          "return_type": "void",
          "logic": "Constructor for the InstanceBuilder class, initializing various member variables."
        },
        {
          "name": "Build",
          "parameters": [],
          "return_type": "MaybeDirectHandle<WasmInstanceObject>",
          "logic": "Builds a WebAssembly instance object, orchestrating the instantiation process."
        },
        {
          "name": "ExecuteStartFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Executes the start function of the WebAssembly module, if one exists."
        },
        {
          "name": "Build_Phase1",
          "parameters": [
            "const DisallowJavascriptExecution& no_js"
          ],
          "return_type": "MaybeDirectHandle<WasmTrustedInstanceData>",
          "logic": "First phase of building a WebAssembly instance, initializing trusted objects."
        },
        {
          "name": "Build_Phase1_Infallible",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_data"
          ],
          "return_type": "void",
          "logic": "Completes Phase 1, finalizing trusted object initialization."
        },
        {
          "name": "Build_Phase2",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_data"
          ],
          "return_type": "MaybeDirectHandle<WasmTrustedInstanceData>",
          "logic": "Second phase of building a WebAssembly instance, running module-provided initializers."
        },
        {
          "name": "AllocateMemory",
          "parameters": [
            "uint32_t memory_index"
          ],
          "return_type": "MaybeDirectHandle<WasmMemoryObject>",
          "logic": "Allocates memory for a WebAssembly memory object."
        },
        {
          "name": "ProcessImportedFunction",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int import_index",
            "int func_index",
            "DirectHandle<Object> value",
            "WellKnownImport preknown_import"
          ],
          "return_type": "bool",
          "logic": "Processes an imported function, resolving its type and creating a callable wrapper."
        },
        {
          "name": "ProcessImportedTable",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int import_index",
            "int table_index",
            "DirectHandle<Object> value"
          ],
          "return_type": "bool",
          "logic": "Processes an imported table, validating its type and size."
        },
        {
          "name": "ProcessImportedGlobal",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int import_index",
            "int global_index",
            "DirectHandle<Object> value"
          ],
          "return_type": "bool",
          "logic": "Processes an imported global variable, validating its type and mutability."
        },
        {
          "name": "ProcessImportedWasmGlobalObject",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int import_index",
            "const WasmGlobal& global",
            "DirectHandle<WasmGlobalObject> global_object"
          ],
          "return_type": "bool",
          "logic": "Processes imported global object to make sure the type aligns."
        },
        {
          "name": "ProcessImports",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data"
          ],
          "return_type": "int",
          "logic": "Processes all imports for the module, including functions, tables, and globals."
        },
        {
          "name": "ProcessImportedMemories",
          "parameters": [
            "DirectHandle<FixedArray> imported_memory_objects"
          ],
          "return_type": "bool",
          "logic": "Processes imported memory objects."
        },
        {
          "name": "GetRawUntaggedGlobalPtr",
          "parameters": [
            "const WasmGlobal& global"
          ],
          "return_type": "T*",
          "logic": "Returns a raw pointer to an untagged global variable."
        },
        {
          "name": "InitGlobals",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data"
          ],
          "return_type": "void",
          "logic": "Initializes global variables in the WebAssembly module."
        },
        {
          "name": "ProcessExports",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data"
          ],
          "return_type": "void",
          "logic": "Processes exports for the module, creating wrappers for functions, tables, and memories."
        },
        {
          "name": "SetTableInitialValues",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data"
          ],
          "return_type": "void",
          "logic": "Sets initial values for non-defaultable tables."
        },
        {
          "name": "LoadTableSegments",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data"
          ],
          "return_type": "void",
          "logic": "Loads element segments into WebAssembly tables."
        },
        {
          "name": "InitializeTags",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data"
          ],
          "return_type": "void",
          "logic": "Initializes new WebAssembly tag table."
        },
        {
          "name": "LookupImport",
          "parameters": [
            "uint32_t index",
            "DirectHandle<String> module_name",
            "DirectHandle<String> import_name"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Looks up an import value in the ffi_ object."
        },
        {
          "name": "LookupImportAsm",
          "parameters": [
            "uint32_t index",
            "DirectHandle<String> import_name"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Looks up an import value in the ffi_ object for asm.js."
        },
        {
          "name": "LoadDataSegments",
          "parameters": [
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data"
          ],
          "return_type": "void",
          "logic": "Loads data segments into WebAssembly memory."
        },
        {
          "name": "WriteGlobalValue",
          "parameters": [
            "const WasmGlobal& global",
            "const WasmValue& value"
          ],
          "return_type": "void",
          "logic": "Writes a global value to the appropriate memory location."
        },
        {
          "name": "SanitizeImports",
          "parameters": [],
          "return_type": "void",
          "logic": "Sanitizes the import values, looking for compile-time imports or extracting them from the ffi object."
        }
      ]
    },
    {
      "name": "WriteOutPGOTask",
      "properties": [
        "native_module_"
      ],
      "methods": [
        {
          "name": "WriteOutPGOTask",
          "parameters": [
            "std::weak_ptr<NativeModule> native_module"
          ],
          "return_type": null,
          "logic": "Constructor which takes a weak pointer to native module."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes profile to file if NativeModule still exists."
        },
        {
          "name": "Schedule",
          "parameters": [
            "std::weak_ptr<NativeModule> native_module"
          ],
          "return_type": "void",
          "logic": "PostDelayedTaskOnWorkerThread for running this task periodically."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "raw_buffer_ptr",
      "parameters": [
        "MaybeDirectHandle<JSArrayBuffer> buffer",
        "int offset"
      ],
      "return_type": "uint8_t*",
      "logic": "Returns a raw pointer to the backing store of a JSArrayBuffer with a given offset."
    },
    {
      "name": "CreateStructMap",
      "parameters": [
        "Isolate* isolate",
        "CanonicalTypeIndex struct_index",
        "DirectHandle<Map> opt_rtt_parent"
      ],
      "return_type": "DirectHandle<Map>",
      "logic": "Creates a Map object for a WebAssembly struct type."
    },
    {
      "name": "CreateArrayMap",
      "parameters": [
        "Isolate* isolate",
        "CanonicalTypeIndex array_index",
        "DirectHandle<Map> opt_rtt_parent"
      ],
      "return_type": "DirectHandle<Map>",
      "logic": "Creates a Map object for a WebAssembly array type."
    },
    {
      "name": "CreateMapForType",
      "parameters": [
        "Isolate* isolate",
        "const WasmModule* module",
        "ModuleTypeIndex type_index",
        "DirectHandle<FixedArray> maybe_shared_maps"
      ],
      "return_type": "void",
      "logic": "Creates a Map object for a given WebAssembly type (struct or array), recursively creating maps for supertypes first."
    },
    {
      "name": "CompareWithNormalizedCType",
      "parameters": [
        "const CTypeInfo& info",
        "CanonicalValueType expected",
        "CFunctionInfo::Int64Representation int64_rep"
      ],
      "return_type": "bool",
      "logic": "Compares the C type information with the expected WebAssembly type, accounting for normalization (e.g., bool to i32)."
    },
    {
      "name": "IsSupportedWasmFastApiFunction",
      "parameters": [
        "Isolate* isolate",
        "const wasm::CanonicalSig* expected_sig",
        "Tagged<SharedFunctionInfo> shared",
        "ReceiverKind receiver_kind",
        "int* out_index"
      ],
      "return_type": "bool",
      "logic": "Checks if a given JS function (represented by SharedFunctionInfo) is a supported candidate for Wasm Fast API calls and stores the C function index if match found."
    },
    {
      "name": "ResolveBoundJSFastApiFunction",
      "parameters": [
        "const wasm::CanonicalSig* expected_sig",
        "DirectHandle<JSReceiver> callable"
      ],
      "return_type": "bool",
      "logic": "Checks if callable is a bound Javascript function, and if it supports WebAssembly Fast API calls."
    },
    {
      "name": "IsStringRef",
      "parameters": [
        "wasm::CanonicalValueType type"
      ],
      "return_type": "bool",
      "logic": "Checks if a type is a string reference."
    },
    {
      "name": "IsExternRef",
      "parameters": [
        "wasm::CanonicalValueType type"
      ],
      "return_type": "bool",
      "logic": "Checks if a type is an extern reference."
    },
    {
      "name": "IsStringOrExternRef",
      "parameters": [
        "wasm::CanonicalValueType type"
      ],
      "return_type": "bool",
      "logic": "Checks if a type is string or extern ref."
    },
    {
      "name": "IsDataViewGetterSig",
      "parameters": [
        "const wasm::CanonicalSig* sig",
        "wasm::CanonicalValueType return_type"
      ],
      "return_type": "bool",
      "logic": "Checks if the signature is a data view getter signature."
    },
    {
      "name": "IsDataViewSetterSig",
      "parameters": [
        "const wasm::CanonicalSig* sig",
        "wasm::CanonicalValueType value_type"
      ],
      "return_type": "bool",
      "logic": "Checks if the signature is a data view setter signature."
    },
    {
      "name": "GetFunctionSigForFastApiImport",
      "parameters": [
        "Zone* zone",
        "const CFunctionInfo* info"
      ],
      "return_type": "const MachineSignature*",
      "logic": "Gets the machine signature for the fast API import function."
    },
    {
      "name": "CheckForWellKnownImport",
      "parameters": [
        "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
        "int func_index",
        "DirectHandle<JSReceiver> callable",
        "const wasm::CanonicalSig* sig"
      ],
      "return_type": "WellKnownImport",
      "logic": "Detects imports of well known builtin functions for optimization."
    },
    {
      "name": "InstantiateToInstanceObject",
      "parameters": [
        "Isolate* isolate",
        "ErrorThrower* thrower",
        "DirectHandle<WasmModuleObject> module_object",
        "MaybeDirectHandle<JSReceiver> imports",
        "MaybeDirectHandle<JSArrayBuffer> memory_buffer"
      ],
      "return_type": "MaybeDirectHandle<WasmInstanceObject>",
      "logic": "Instantiates a WebAssembly module to a WasmInstanceObject."
    },
    {
      "name": "HasDefaultToNumberBehaviour",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<JSFunction> function"
      ],
      "return_type": "bool",
      "logic": "Checks function has standard default toString/valueOf behaviour"
    },
    {
      "name": "MaybeMarkError",
      "parameters": [
        "ValueOrError value",
        "ErrorThrower* thrower"
      ],
      "return_type": "bool",
      "logic": "Sets runtime error on error value."
    }
  ]
}