{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/module-compiler.cc",
  "imports": [
    "src/wasm/module-compiler.h",
    "algorithm",
    "atomic",
    "memory",
    "queue",
    "src/api/api-inl.h",
    "src/base/enum-set.h",
    "src/base/fpu.h",
    "src/base/platform/mutex.h",
    "src/base/platform/semaphore.h",
    "src/base/platform/time.h",
    "src/codegen/compiler.h",
    "src/compiler/wasm-compiler.h",
    "src/debug/debug.h",
    "src/handles/global-handles-inl.h",
    "src/logging/counters-scopes.h",
    "src/logging/metrics.h",
    "src/tracing/trace-event.h",
    "src/wasm/code-space-access.h",
    "src/wasm/compilation-environment-inl.h",
    "src/wasm/jump-table-assembler.h",
    "src/wasm/module-decoder.h",
    "src/wasm/pgo.h",
    "src/wasm/std-object-sizes.h",
    "src/wasm/streaming-decoder.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-code-pointer-table-inl.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-feature-flags.h",
    "src/wasm/wasm-import-wrapper-cache.h",
    "src/wasm/wasm-js.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-result.h",
    "src/wasm/wasm-serialization.h"
  ],
  "classes": [
    {
      "name": "BackgroundCompileScope",
      "properties": [
        "native_module_"
      ],
      "methods": [
        {
          "name": "BackgroundCompileScope",
          "parameters": [
            "native_module"
          ],
          "return_type": "BackgroundCompileScope",
          "logic": "Constructor. Takes a weak pointer to a NativeModule and locks it to keep the module alive during compilation."
        },
        {
          "name": "native_module",
          "parameters": [],
          "return_type": "NativeModule*",
          "logic": "Returns the underlying NativeModule pointer."
        },
        {
          "name": "compilation_state",
          "parameters": [],
          "return_type": "CompilationStateImpl*",
          "logic": "Returns the CompilationStateImpl associated with the NativeModule."
        },
        {
          "name": "cancelled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compilation has been cancelled."
        }
      ]
    },
    {
      "name": "CompilationUnitQueues",
      "properties": [
        "queues_mutex_",
        "queues_",
        "num_imported_functions_",
        "num_declared_functions_",
        "big_units_queue_",
        "num_units_",
        "num_priority_units_",
        "top_tier_compiled_",
        "next_queue_to_add"
      ],
      "methods": [
        {
          "name": "CompilationUnitQueues",
          "parameters": [
            "num_imported_functions",
            "num_declared_functions"
          ],
          "return_type": "CompilationUnitQueues",
          "logic": "Constructor. Initializes the queues and atomic counters for compilation units."
        },
        {
          "name": "GetQueueForTask",
          "parameters": [
            "task_id"
          ],
          "return_type": "Queue*",
          "logic": "Retrieves a queue for a specific task ID, creating new queues if needed."
        },
        {
          "name": "GetNextUnit",
          "parameters": [
            "queue",
            "tier"
          ],
          "return_type": "std::optional<WasmCompilationUnit>",
          "logic": "Gets the next compilation unit from the specified queue and tier. Also handles unit stealing."
        },
        {
          "name": "AddUnits",
          "parameters": [
            "baseline_units",
            "top_tier_units",
            "module"
          ],
          "return_type": "void",
          "logic": "Adds compilation units to the queues for both baseline and top-tier compilation. Includes logic for big unit handling."
        },
        {
          "name": "AddTopTierPriorityUnit",
          "parameters": [
            "unit",
            "priority"
          ],
          "return_type": "void",
          "logic": "Adds a top-tier compilation unit to the queue with a specified priority."
        },
        {
          "name": "GetSizeForTier",
          "parameters": [
            "tier"
          ],
          "return_type": "size_t",
          "logic": "Returns the current number of units in the queue for the given tier."
        },
        {
          "name": "AllowAnotherTopTierJob",
          "parameters": [
            "func_index"
          ],
          "return_type": "void",
          "logic": "Allows another top-tier compilation job for a given function, used in dynamic tiering."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the compilation unit queues."
        }
      ]
    },
    {
      "name": "CompilationUnitQueues::Queue",
      "properties": [],
      "methods": [
        {
          "name": "ShouldPublish",
          "parameters": [
            "num_processed_units"
          ],
          "return_type": "bool",
          "logic": "Determines whether the task processing this queue should publish compilation results."
        }
      ]
    },
    {
      "name": "CompilationStateImpl",
      "properties": [
        "native_module_",
        "native_module_weak_",
        "async_counters_",
        "compile_failed_",
        "compile_cancelled_",
        "compilation_unit_queues_",
        "dynamic_tiering_",
        "mutex_",
        "baseline_compile_job_",
        "top_tier_compile_job_",
        "compilation_id_",
        "detected_features_",
        "wire_bytes_storage_",
        "callbacks_mutex_",
        "callbacks_",
        "finished_events_",
        "outstanding_baseline_units_",
        "bytes_since_last_chunk_",
        "compilation_progress_",
        "last_top_tier_compilation_timestamp_",
        "publish_state_"
      ],
      "methods": [
        {
          "name": "CompilationStateImpl",
          "parameters": [
            "native_module",
            "async_counters",
            "dynamic_tiering",
            "detected_features"
          ],
          "return_type": "CompilationStateImpl",
          "logic": "Constructor. Initializes the compilation state, task manager, and other related data structures."
        },
        {
          "name": "~CompilationStateImpl",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Cancels and detaches the compile jobs if they are still valid."
        },
        {
          "name": "InitCompileJob",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the compile job. It's called right after the constructor."
        },
        {
          "name": "CancelCompilation",
          "parameters": [
            "CancellationPolicy"
          ],
          "return_type": "void",
          "logic": "Cancels the compilation process based on the provided cancellation policy."
        },
        {
          "name": "cancelled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compilation has been cancelled."
        },
        {
          "name": "ApplyCompilationHintToInitialProgress",
          "parameters": [
            "hint",
            "hint_idx"
          ],
          "return_type": "void",
          "logic": "Applies a compilation hint to the initial compilation progress, updating internal fields."
        },
        {
          "name": "ApplyPgoInfoToInitialProgress",
          "parameters": [
            "pgo_info"
          ],
          "return_type": "void",
          "logic": "Uses PGO information to choose a better initial compilation progress (tiering decisions)."
        },
        {
          "name": "ApplyPgoInfoLate",
          "parameters": [
            "pgo_info"
          ],
          "return_type": "void",
          "logic": "Applies PGO information to a fully initialized compilation state and triggers compilation if needed."
        },
        {
          "name": "InitializeCompilationProgress",
          "parameters": [
            "pgo_info"
          ],
          "return_type": "void",
          "logic": "Initializes compilation progress, setting compilation tiers for baseline and top-tier compilation."
        },
        {
          "name": "InitializeCompilationProgressAfterDeserialization",
          "parameters": [
            "lazy_functions",
            "eager_functions"
          ],
          "return_type": "void",
          "logic": "Initializes compilation progress after deserialization of the module."
        },
        {
          "name": "InitializeCompilationUnits",
          "parameters": [
            "builder"
          ],
          "return_type": "void",
          "logic": "Initializes compilation units based on the information encoded in the compilation_progress_."
        },
        {
          "name": "AddCompilationUnit",
          "parameters": [
            "builder",
            "func_index"
          ],
          "return_type": "void",
          "logic": "Adds compilation units for another function to the CompilationUnitBuilder, primarily for streaming compilation."
        },
        {
          "name": "AddCallback",
          "parameters": [
            "callback"
          ],
          "return_type": "void",
          "logic": "Adds a callback to be called on compilation events."
        },
        {
          "name": "CommitCompilationUnits",
          "parameters": [
            "baseline_units",
            "top_tier_units"
          ],
          "return_type": "void",
          "logic": "Inserts new functions to compile and kicks off compilation by adding them to the queue."
        },
        {
          "name": "CommitTopTierCompilationUnit",
          "parameters": [
            "WasmCompilationUnit"
          ],
          "return_type": "void",
          "logic": "Commits top-tier units to the compilation queue for background compilation."
        },
        {
          "name": "AddTopTierPriorityCompilationUnit",
          "parameters": [
            "WasmCompilationUnit",
            "size_t"
          ],
          "return_type": "void",
          "logic": "Adds a prioritized top-tier compilation unit to the queue for compilation"
        },
        {
          "name": "GetQueueForCompileTask",
          "parameters": [
            "task_id"
          ],
          "return_type": "CompilationUnitQueues::Queue*",
          "logic": "Retrieves the compilation queue for a specific task."
        },
        {
          "name": "GetNextCompilationUnit",
          "parameters": [
            "CompilationUnitQueues::Queue*",
            "CompilationTier"
          ],
          "return_type": "std::optional<WasmCompilationUnit>",
          "logic": "Retrieves the next compilation unit from the task's queue."
        },
        {
          "name": "OnFinishedUnits",
          "parameters": [
            "base::Vector<WasmCode*>"
          ],
          "return_type": "void",
          "logic": "Handles completed compilation units, primarily publishing code."
        },
        {
          "name": "OnCompilationStopped",
          "parameters": [
            "WasmDetectedFeatures"
          ],
          "return_type": "void",
          "logic": "Called when the compilation stopped for a specific worker."
        },
        {
          "name": "SchedulePublishCompilationResults",
          "parameters": [
            "std::vector<UnpublishedWasmCode>",
            "CompilationTier"
          ],
          "return_type": "void",
          "logic": "Schedules publishing the compilation results to main thread."
        },
        {
          "name": "detected_features",
          "parameters": [],
          "return_type": "WasmDetectedFeatures",
          "logic": "Gets the detected features for wasm."
        },
        {
          "name": "UpdateDetectedFeatures",
          "parameters": [
            "WasmDetectedFeatures"
          ],
          "return_type": "WasmDetectedFeatures",
          "logic": "Updates the set of detected features and returns the features that were not detected before."
        },
        {
          "name": "NumOutstandingCompilations",
          "parameters": [
            "CompilationTier"
          ],
          "return_type": "size_t",
          "logic": "Gets the number of outstanding compilations for a particular tier."
        },
        {
          "name": "SetError",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the error flag to indicate a compilation failure."
        },
        {
          "name": "WaitForCompilationEvent",
          "parameters": [
            "CompilationEvent"
          ],
          "return_type": "void",
          "logic": "Waits for a specific compilation event to occur."
        },
        {
          "name": "TierUpAllFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Tiers up all functions from baseline to top tier."
        },
        {
          "name": "AllowAnotherTopTierJob",
          "parameters": [
            "uint32_t"
          ],
          "return_type": "void",
          "logic": "Allows another top tier job for a specific function index."
        },
        {
          "name": "AllowAnotherTopTierJobForAllFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Allows another top tier job for all functions."
        },
        {
          "name": "failed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compilation failed."
        },
        {
          "name": "baseline_compilation_finished",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the baseline compilation has finished."
        },
        {
          "name": "dynamic_tiering",
          "parameters": [],
          "return_type": "DynamicTiering",
          "logic": "Returns the dynamic tiering setting."
        },
        {
          "name": "counters",
          "parameters": [],
          "return_type": "Counters*",
          "logic": "Returns the counters object."
        },
        {
          "name": "SetWireBytesStorage",
          "parameters": [
            "wire_bytes_storage"
          ],
          "return_type": "void",
          "logic": "Sets the wire bytes storage."
        },
        {
          "name": "GetWireBytesStorage",
          "parameters": [],
          "return_type": "std::shared_ptr<WireBytesStorage>",
          "logic": "Gets the wire bytes storage."
        },
        {
          "name": "set_compilation_id",
          "parameters": [
            "compilation_id"
          ],
          "return_type": "void",
          "logic": "Sets the compilation id."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the memory consumption of the compilation state."
        },
        {
          "name": "TriggerCachingAfterTimeout",
          "parameters": [],
          "return_type": "void",
          "logic": "Triggers caching after a timeout if code has been compiled to the top tier."
        },
        {
          "name": "PublishCode",
          "parameters": [
            "base::Vector<UnpublishedWasmCode>"
          ],
          "return_type": "std::vector<WasmCode*>",
          "logic": "Publishes the compiled code units to the main isolate."
        }
      ]
    },
    {
      "name": "CompilationUnitBuilder",
      "properties": [
        "native_module_",
        "baseline_units_",
        "tiering_units_"
      ],
      "methods": [
        {
          "name": "CompilationUnitBuilder",
          "parameters": [
            "NativeModule*"
          ],
          "return_type": "CompilationUnitBuilder",
          "logic": "Constructor, taking a pointer to the native module"
        },
        {
          "name": "AddBaselineUnit",
          "parameters": [
            "int",
            "ExecutionTier"
          ],
          "return_type": "void",
          "logic": "Adds a compilation unit for baseline compilation."
        },
        {
          "name": "AddTopTierUnit",
          "parameters": [
            "int",
            "ExecutionTier"
          ],
          "return_type": "void",
          "logic": "Adds a compilation unit for top tier compilation."
        },
        {
          "name": "Commit",
          "parameters": [],
          "return_type": "void",
          "logic": "Commits the accumulated compilation units to the queue."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the accumulated compilation units."
        },
        {
          "name": "module",
          "parameters": [],
          "return_type": "const WasmModule*",
          "logic": "Returns the underlying wasm module."
        }
      ]
    },
    {
      "name": "TransitiveTypeFeedbackProcessor",
      "properties": [],
      "methods": [
        {
          "name": "Process",
          "parameters": [
            "Isolate*",
            "Tagged<WasmTrustedInstanceData>",
            "int"
          ],
          "return_type": "void",
          "logic": "Processes the type feedback for a given function transitively"
        }
      ]
    },
    {
      "name": "FeedbackMaker",
      "properties": [],
      "methods": [
        {
          "name": "FeedbackMaker",
          "parameters": [
            "Isolate*",
            "Tagged<WasmTrustedInstanceData>",
            "int",
            "int"
          ],
          "return_type": "FeedbackMaker",
          "logic": "A class used for making Feedback vectors for inline optimizations."
        },
        {
          "name": "AddCallRefCandidate",
          "parameters": [
            "Tagged<WasmFuncRef>",
            "int"
          ],
          "return_type": "void",
          "logic": "Adds a potential call target if it's a same-instance, non-imported function."
        },
        {
          "name": "AddCallIndirectCandidate",
          "parameters": [
            "Tagged<Object>",
            "int"
          ],
          "return_type": "void",
          "logic": "Adds a potential indirect call target if it's in the same instance."
        },
        {
          "name": "AddCall",
          "parameters": [
            "int",
            "int"
          ],
          "return_type": "void",
          "logic": "Adds a call target to the cache, managing polymorphic and megamorphic behavior."
        },
        {
          "name": "HasTargetCached",
          "parameters": [
            "int"
          ],
          "return_type": "bool",
          "logic": "Check if a function target is cached."
        },
        {
          "name": "AddResult",
          "parameters": [
            "CallSiteFeedback"
          ],
          "return_type": "void",
          "logic": "Adds a call-site feedback result to the vector."
        },
        {
          "name": "FinalizeCall",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes call feedback processing, adds it to the results vector."
        },
        {
          "name": "set_has_non_inlineable_targets",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets has_non_inlineable_targets_ flag to true"
        },
        {
          "name": "set_megamorphic",
          "parameters": [],
          "return_type": "void",
          "logic": "sets the megamorphic_ flag to true"
        },
        {
          "name": "GetResult",
          "parameters": [],
          "return_type": "base::OwnedVector<CallSiteFeedback> &&",
          "logic": "Return the resulting vector of CallSiteFeedback data."
        }
      ]
    },
    {
      "name": "CompileLazyTimingScope",
      "properties": [
        "counters_",
        "native_module_",
        "timer_"
      ],
      "methods": [
        {
          "name": "CompileLazyTimingScope",
          "parameters": [
            "Counters*",
            "NativeModule*"
          ],
          "return_type": "CompileLazyTimingScope",
          "logic": "Constructor. Starts a timer to measure the lazy compilation time."
        },
        {
          "name": "~CompileLazyTimingScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Stops the timer and adds the elapsed time to the counters."
        }
      ]
    },
    {
      "name": "CompilationTimeCallback",
      "properties": [
        "start_time_",
        "async_counters_",
        "metrics_recorder_",
        "context_id_",
        "native_module_",
        "compile_mode_"
      ],
      "methods": [
        {
          "name": "CompilationTimeCallback",
          "parameters": [
            "std::shared_ptr<Counters>",
            "std::shared_ptr<metrics::Recorder>",
            "v8::metrics::Recorder::ContextId",
            "std::weak_ptr<NativeModule>",
            "CompileMode"
          ],
          "return_type": "CompilationTimeCallback",
          "logic": "Constructor for the compilation event callback"
        },
        {
          "name": "call",
          "parameters": [
            "CompilationEvent"
          ],
          "return_type": "void",
          "logic": "Callback method to time compilation events and report metrics."
        }
      ]
    },
    {
      "name": "BackgroundCompileJob",
      "properties": [
        "native_module_",
        "engine_barrier_",
        "async_counters_",
        "tier_"
      ],
      "methods": [
        {
          "name": "BackgroundCompileJob",
          "parameters": [
            "std::weak_ptr<NativeModule>",
            "std::shared_ptr<Counters>",
            "CompilationTier"
          ],
          "return_type": "BackgroundCompileJob",
          "logic": "Constructor. Takes a weak pointer to a NativeModule and the compilation tier."
        },
        {
          "name": "Run",
          "parameters": [
            "JobDelegate*"
          ],
          "return_type": "void",
          "logic": "Runs the compilation units, using an OperationsBarrier to handle execution."
        },
        {
          "name": "GetMaxConcurrency",
          "parameters": [
            "size_t"
          ],
          "return_type": "size_t",
          "logic": "Determines the maximum concurrency for this job."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Impl",
      "parameters": [
        "CompilationState*"
      ],
      "return_type": "CompilationStateImpl*",
      "logic": "Casts a CompilationState pointer to a CompilationStateImpl pointer."
    },
    {
      "name": "Impl",
      "parameters": [
        "const CompilationState*"
      ],
      "return_type": "const CompilationStateImpl*",
      "logic": "Casts a const CompilationState pointer to a const CompilationStateImpl pointer."
    },
    {
      "name": "ApplyHintToExecutionTier",
      "parameters": [
        "WasmCompilationHintTier",
        "ExecutionTier"
      ],
      "return_type": "ExecutionTier",
      "logic": "Applies compilation hints to determine the execution tier."
    },
    {
      "name": "GetCompilationHint",
      "parameters": [
        "const WasmModule*",
        "uint32_t"
      ],
      "return_type": "const WasmCompilationHint*",
      "logic": "Retrieves the compilation hint for a specific function index."
    },
    {
      "name": "GetCompileStrategy",
      "parameters": [
        "const WasmModule*",
        "WasmEnabledFeatures",
        "uint32_t",
        "bool"
      ],
      "return_type": "CompileStrategy",
      "logic": "Determines the compilation strategy (lazy, eager, etc.) based on hints and flags."
    },
    {
      "name": "GetDefaultTiersPerModule",
      "parameters": [
        "NativeModule*",
        "DynamicTiering",
        "DebugState",
        "bool"
      ],
      "return_type": "ExecutionTierPair",
      "logic": "Determines the default execution tiers (baseline and top-tier) based on module properties and debug state."
    },
    {
      "name": "GetLazyCompilationTiers",
      "parameters": [
        "NativeModule*",
        "uint32_t",
        "DebugState"
      ],
      "return_type": "ExecutionTierPair",
      "logic": "Gets the execution tiers for lazy compilation."
    },
    {
      "name": "ValidateSingleFunction",
      "parameters": [
        "Zone*",
        "const WasmModule*",
        "int",
        "base::Vector<const uint8_t>",
        "WasmEnabledFeatures",
        "WasmDetectedFeatures*"
      ],
      "return_type": "DecodeResult",
      "logic": "Validates a single function in the Wasm module."
    },
    {
      "name": "IsLazyModule",
      "parameters": [
        "const WasmModule*"
      ],
      "return_type": "bool",
      "logic": "Determines if the module is lazy compiled or not."
    },
    {
      "name": "CompileLazy",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>",
        "int"
      ],
      "return_type": "bool",
      "logic": "Compiles a single Wasm function lazily."
    },
    {
      "name": "ThrowLazyCompilationError",
      "parameters": [
        "Isolate*",
        "const NativeModule*",
        "int"
      ],
      "return_type": "void",
      "logic": "Throws an error during lazy compilation due to validation issues."
    },
    {
      "name": "TriggerTierUp",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>",
        "int"
      ],
      "return_type": "void",
      "logic": "Triggers tier-up compilation for a hot function, potentially including transitive type feedback."
    },
    {
      "name": "TierUpNowForTesting",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>",
        "int"
      ],
      "return_type": "void",
      "logic": "Triggers tier up, without needing to wait for counters to tier up. only for testing."
    },
    {
      "name": "TierUpAllForTesting",
      "parameters": [
        "Isolate*",
        "Tagged<WasmTrustedInstanceData>"
      ],
      "return_type": "void",
      "logic": "Tiers up all function to turbofan, only for testing."
    },
    {
      "name": "InitializeCompilationForTesting",
      "parameters": [
        "NativeModule*"
      ],
      "return_type": "void",
      "logic": "Initializes compilation for testing"
    },
    {
      "name": "PublishDetectedFeatures",
      "parameters": [
        "WasmDetectedFeatures",
        "Isolate*",
        "bool"
      ],
      "return_type": "void",
      "logic": "Publishes the detected Wasm features to the usage counters."
    },
    {
      "name": "IsI16Array",
      "parameters": [
        "wasm::ValueType",
        "const WasmModule*"
      ],
      "return_type": "bool",
      "logic": "Checks if the given type is an i16 array type"
    },
    {
      "name": "IsI8Array",
      "parameters": [
        "wasm::ValueType",
        "const WasmModule*",
        "bool"
      ],
      "return_type": "bool",
      "logic": "Checks if the given type is an i8 array type"
    },
    {
      "name": "ImportStartOffset",
      "parameters": [
        "base::Vector<const uint8_t>",
        "uint32_t"
      ],
      "return_type": "uint32_t",
      "logic": "Returns the start offset of a given import, for use in error messages."
    },
    {
      "name": "ValidateAndSetBuiltinImports",
      "parameters": [
        "const WasmModule*",
        "base::Vector<const uint8_t>",
        "const CompileTimeImports&",
        "WasmDetectedFeatures*"
      ],
      "return_type": "WasmError",
      "logic": "Validates the signatures of recognized compile-time imports, and stores them on the module's well_known_imports list."
    },
    {
      "name": "ExecuteCompilationUnits",
      "parameters": [
        "std::weak_ptr<NativeModule>",
        "Counters*",
        "JobDelegate*",
        "CompilationTier"
      ],
      "return_type": "CompilationExecutionResult",
      "logic": "Executes compilation units in the background."
    },
    {
      "name": "InitializeCompilation",
      "parameters": [
        "Isolate*",
        "NativeModule*",
        "ProfileInformation*"
      ],
      "return_type": "std::unique_ptr<CompilationUnitBuilder>",
      "logic": "Initializes compilation and returns a compilation unit builder."
    },
    {
      "name": "MayCompriseLazyFunctions",
      "parameters": [
        "const WasmModule*",
        "WasmEnabledFeatures"
      ],
      "return_type": "bool",
      "logic": "Determine if the WASM has lazy compile functions."
    },
    {
      "name": "ValidateFunctions",
      "parameters": [
        "const WasmModule*",
        "base::Vector<const uint8_t>",
        "WasmEnabledFeatures",
        "OnlyLazyFunctions",
        "WasmDetectedFeatures*"
      ],
      "return_type": "WasmError",
      "logic": "Validates the functions."
    },
    {
      "name": "ValidateFunctions",
      "parameters": [
        "const NativeModule&",
        "OnlyLazyFunctions"
      ],
      "return_type": "WasmError",
      "logic": "Wrapper around function for validation function to a NativeModule."
    },
    {
      "name": "CompileNativeModule",
      "parameters": [
        "Isolate*",
        "v8::metrics::Recorder::ContextId",
        "ErrorThrower*",
        "std::shared_ptr<NativeModule>",
        "ProfileInformation*"
      ],
      "return_type": "void",
      "logic": "Compiles the native module synchronously."
    },
    {
      "name": "GetOrCompileNewNativeModule",
      "parameters": [
        "Isolate*",
        "WasmEnabledFeatures",
        "WasmDetectedFeatures",
        "CompileTimeImports",
        "ErrorThrower*",
        "std::shared_ptr<const WasmModule>",
        "base::OwnedVector<const uint8_t>",
        "int",
        "v8::metrics::Recorder::ContextId",
        "ProfileInformation*"
      ],
      "return_type": "std::shared_ptr<NativeModule>",
      "logic": "Gets or compiles a new native module."
    }
  ]
}