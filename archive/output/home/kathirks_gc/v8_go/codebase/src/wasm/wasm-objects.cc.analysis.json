{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-objects.cc",
  "imports": [
    "<sys/mman.h>",
    "<sys/stat.h>",
    "src/wasm/wasm-objects.h",
    "<optional>",
    "src/base/iterator.h",
    "src/base/vector.h",
    "src/builtins/builtins-inl.h",
    "src/compiler/wasm-compiler.h",
    "src/debug/debug.h",
    "src/logging/counters.h",
    "src/objects/managed-inl.h",
    "src/objects/objects-inl.h",
    "src/objects/oddball.h",
    "src/objects/shared-function-info.h",
    "src/roots/roots-inl.h",
    "src/utils/utils.h",
    "src/wasm/canonical-types.h",
    "src/wasm/code-space-access.h",
    "src/wasm/module-compiler.h",
    "src/wasm/module-decoder.h",
    "src/wasm/module-instantiate.h",
    "src/wasm/stacks.h",
    "src/wasm/value-type.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-code-pointer-table-inl.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-subtyping.h",
    "src/wasm/wasm-value.h",
    "src/wasm/interpreter/wasm-interpreter-inl.h",
    "src/wasm/interpreter/wasm-interpreter-runtime.h",
    "src/objects/object-macros.h"
  ],
  "classes": [
    {
      "name": "WasmModuleObject",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "std::shared_ptr<wasm::NativeModule> native_module",
            "DirectHandle<Script> script"
          ],
          "return_type": "DirectHandle<WasmModuleObject>",
          "logic": "Creates a new WasmModuleObject, linking it to the NativeModule and Script. Allocates Managed and JSObject."
        },
        {
          "name": "ExtractUtf8StringFromModuleBytes",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmModuleObject> module_object",
            "wasm::WireBytesRef ref",
            "InternalizeString internalize"
          ],
          "return_type": "DirectHandle<String>",
          "logic": "Extracts a UTF-8 string from the module bytes using the WireBytesRef."
        },
        {
          "name": "ExtractUtf8StringFromModuleBytes",
          "parameters": [
            "Isolate* isolate",
            "base::Vector<const uint8_t> wire_bytes",
            "wasm::WireBytesRef ref",
            "InternalizeString internalize"
          ],
          "return_type": "DirectHandle<String>",
          "logic": "Extracts a UTF-8 string from module bytes using the provided WireBytesRef and vector."
        },
        {
          "name": "GetModuleNameOrNull",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmModuleObject> module_object"
          ],
          "return_type": "MaybeDirectHandle<String>",
          "logic": "Gets the module name as a String, or an empty MaybeDirectHandle if no name is present."
        },
        {
          "name": "GetFunctionNameOrNull",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmModuleObject> module_object",
            "uint32_t func_index"
          ],
          "return_type": "MaybeDirectHandle<String>",
          "logic": "Gets the function name for a given function index, returning an empty MaybeDirectHandle if no name is defined."
        },
        {
          "name": "GetRawFunctionName",
          "parameters": [
            "int func_index"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Retrieves the raw function name as a byte vector, using the lazy name generation mechanism."
        }
      ]
    },
    {
      "name": "WasmTableObject",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTrustedInstanceData> trusted_data",
            "wasm::ValueType type",
            "wasm::CanonicalValueType canonical_type",
            "uint32_t initial",
            "bool has_maximum",
            "uint64_t maximum",
            "DirectHandle<Object> initial_value",
            "wasm::AddressType address_type",
            "DirectHandle<WasmDispatchTable>* out_dispatch_table"
          ],
          "return_type": "DirectHandle<WasmTableObject>",
          "logic": "Creates a new WasmTableObject with the specified parameters, including initial values, size, and type. Allocates FixedArray, WasmDispatchTable, Number or BigInt depending on params."
        },
        {
          "name": "Grow",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "uint32_t count",
            "DirectHandle<Object> init_value"
          ],
          "return_type": "int",
          "logic": "Grows the WasmTableObject by the given count, initializing the new entries with the specified init_value. Creates new FixedArray, WasmDispatchTable if required."
        },
        {
          "name": "JSToWasmElement",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "DirectHandle<Object> entry",
            "const char** error_message"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Converts a JS value to a Wasm element based on the table type, returning the converted value."
        },
        {
          "name": "SetFunctionTableEntry",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "int entry_index",
            "DirectHandle<Object> entry"
          ],
          "return_type": "void",
          "logic": "Sets an entry in a function table, updating the dispatch table based on the entry type (WasmExportedFunction, WasmJSFunction, or WasmCapiFunction)."
        },
        {
          "name": "Set",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "uint32_t index",
            "DirectHandle<Object> entry"
          ],
          "return_type": "void",
          "logic": "Sets the value of an element in the wasm table at the given index. Calls `SetFunctionTableEntry` if applicable"
        },
        {
          "name": "Get",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "uint32_t index"
          ],
          "return_type": "DirectHandle<Object>",
          "logic": "Gets the value of an element at the given index in the wasm table. Can create WasmInternalFunction and WasmFuncRef lazily"
        },
        {
          "name": "Fill",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "uint32_t start",
            "DirectHandle<Object> entry",
            "uint32_t count"
          ],
          "return_type": "void",
          "logic": "Fills a range of entries in the wasm table with a given entry value."
        },
        {
          "name": "UpdateDispatchTable",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "int entry_index",
            "const wasm::WasmFunction* func",
            "DirectHandle<WasmTrustedInstanceData> target_instance_data"
          ],
          "return_type": "void",
          "logic": "Updates the dispatch table with a Wasm function entry, setting the call target and implicit argument. (overload 1)"
        },
        {
          "name": "UpdateDispatchTable",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "int entry_index",
            "DirectHandle<WasmJSFunction> function"
          ],
          "return_type": "void",
          "logic": "Updates the dispatch table with a Wasm JS function entry, setting the call target and import data (overload 2)."
        },
        {
          "name": "UpdateDispatchTable",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "int entry_index",
            "DirectHandle<WasmCapiFunction> capi_function"
          ],
          "return_type": "void",
          "logic": "Updates the dispatch table with a Wasm CAPI function entry, setting the call target and function data (overload 3)."
        },
        {
          "name": "ClearDispatchTable",
          "parameters": [
            "int index"
          ],
          "return_type": "void",
          "logic": "Clears an entry in the dispatch table."
        },
        {
          "name": "SetFunctionTablePlaceholder",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "int entry_index",
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int func_index"
          ],
          "return_type": "void",
          "logic": "Sets a placeholder for a function table entry (instance, func_index), creating a Tuple2 to be lazily resolved later."
        },
        {
          "name": "GetFunctionTableEntry",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTableObject> table",
            "int entry_index",
            "bool* is_valid",
            "bool* is_null",
            "MaybeDirectHandle<WasmTrustedInstanceData>* instance_data",
            "int* function_index",
            "MaybeDirectHandle<WasmJSFunction>* maybe_js_function"
          ],
          "return_type": "void",
          "logic": "Gets a function table entry and returns detailed information about it, like type, instance data, function index, etc."
        }
      ]
    },
    {
      "name": "WasmSuspendingObject",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSReceiver> callable"
          ],
          "return_type": "DirectHandle<WasmSuspendingObject>",
          "logic": "Creates a new WasmSuspendingObject which wraps a callable. Allocates JSObject."
        }
      ]
    },
    {
      "name": "WasmMemoryObject",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSArrayBuffer> buffer",
            "int maximum",
            "wasm::AddressType address_type"
          ],
          "return_type": "DirectHandle<WasmMemoryObject>",
          "logic": "Creates a new WasmMemoryObject from an existing JSArrayBuffer, attaching it to the memory object. Allocates a new JSObject."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "int initial",
            "int maximum",
            "SharedFlag shared",
            "wasm::AddressType address_type"
          ],
          "return_type": "MaybeDirectHandle<WasmMemoryObject>",
          "logic": "Creates a new WasmMemoryObject, allocating a JSArrayBuffer and BackingStore for it.  Can return an empty MaybeDirectHandle in case of failure. Allocates a JSArrayBuffer, potentially allocates a backing store, and then calls the other New method."
        },
        {
          "name": "UseInInstance",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmMemoryObject> memory",
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data",
            "int memory_index_in_instance"
          ],
          "return_type": "void",
          "logic": "Sets the memory of a Wasm instance to a given array buffer. Uses `SetInstanceMemory` internally."
        },
        {
          "name": "SetNewBuffer",
          "parameters": [
            "Tagged<JSArrayBuffer> new_buffer"
          ],
          "return_type": "void",
          "logic": "Called to update the instances that use this shared wasm memory, after an array buffer has been changed due to growing it."
        },
        {
          "name": "Grow",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmMemoryObject> memory_object",
            "uint32_t pages"
          ],
          "return_type": "int32_t",
          "logic": "Grows a memory object by pages. Returns the previous size in pages or -1 on failure. Allocates a new backing store if growth must not happen in place. Detaches old buffer, makes new backing store."
        }
      ]
    },
    {
      "name": "WasmMemoryMapDescriptor",
      "properties": [],
      "methods": [
        {
          "name": "NewFromAnonymous",
          "parameters": [
            "Isolate* isolate",
            "size_t length"
          ],
          "return_type": "MaybeDirectHandle<WasmMemoryMapDescriptor>",
          "logic": "Creates a new WasmMemoryMapDescriptor from an anonymous file descriptor (memfd_create), only on Linux. Returns an empty MaybeDirectHandle on failure."
        },
        {
          "name": "NewFromFileDescriptor",
          "parameters": [
            "Isolate* isolate",
            "int file_descriptor"
          ],
          "return_type": "DirectHandle<WasmMemoryMapDescriptor>",
          "logic": "Creates a new WasmMemoryMapDescriptor from a given file descriptor. Allocates a new JSObject."
        },
        {
          "name": "MapDescriptor",
          "parameters": [
            "DirectHandle<WasmMemoryObject> memory",
            "size_t offset"
          ],
          "return_type": "size_t",
          "logic": "Maps the memory descriptor into the given wasm memory. Only applies on Linux, and returns the mapped size. Returns 0 on error."
        },
        {
          "name": "UnmapDescriptor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Unmaps the memory descriptor from the target wasm memory. Only applies on Linux. Returns true on success and false on failure."
        }
      ]
    },
    {
      "name": "WasmGlobalObject",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTrustedInstanceData> trusted_data",
            "MaybeDirectHandle<JSArrayBuffer> maybe_untagged_buffer",
            "MaybeDirectHandle<FixedArray> maybe_tagged_buffer",
            "wasm::ValueType type",
            "int32_t offset",
            "bool is_mutable"
          ],
          "return_type": "MaybeDirectHandle<WasmGlobalObject>",
          "logic": "Creates a new WasmGlobalObject. Allocates JSArrayBuffer or FixedArray based on type. Can return an empty MaybeDirectHandle."
        }
      ]
    },
    {
      "name": "FunctionTargetAndImplicitArg",
      "properties": [
        "implicit_arg_",
        "call_target_"
      ],
      "methods": [
        {
          "name": "FunctionTargetAndImplicitArg",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTrustedInstanceData> target_instance_data",
            "int target_func_index"
          ],
          "return_type": "n/a",
          "logic": "Constructor. Determines the correct implicit argument and call target for a function, taking imports into consideration."
        }
      ]
    },
    {
      "name": "ImportedFunctionEntry",
      "properties": [],
      "methods": [
        {
          "name": "SetGenericWasmToJs",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSReceiver> callable",
            "wasm::Suspend suspend",
            "const wasm::CanonicalSig* sig",
            "wasm::CanonicalTypeIndex sig_id"
          ],
          "return_type": "void",
          "logic": "Sets the entry for a generic wasm-to-js import, creating import data and setting the call target to a generic wrapper."
        },
        {
          "name": "SetCompiledWasmToJs",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSReceiver> callable",
            "wasm::WasmCode* wasm_to_js_wrapper",
            "wasm::Suspend suspend",
            "const wasm::CanonicalSig* sig",
            "wasm::CanonicalTypeIndex sig_id"
          ],
          "return_type": "void",
          "logic": "Sets the entry for a compiled wasm-to-js import, setting the call target to the compiled wrapper."
        },
        {
          "name": "SetWasmToWasm",
          "parameters": [
            "Tagged<WasmTrustedInstanceData> target_instance_data",
            "WasmCodePointer call_target",
            "wasm::CanonicalTypeIndex sig_id"
          ],
          "return_type": "void",
          "logic": "Sets a wasm-to-wasm import, linking a function in another module."
        },
        {
          "name": "maybe_callable",
          "parameters": [],
          "return_type": "Tagged<Object>",
          "logic": "Returns the callable JSReceiver, or an empty Tagged<Object>() if one isn't present."
        },
        {
          "name": "callable",
          "parameters": [],
          "return_type": "Tagged<JSReceiver>",
          "logic": "Returns the callable JSReceiver."
        },
        {
          "name": "implicit_arg",
          "parameters": [],
          "return_type": "Tagged<Object>",
          "logic": "Returns the implicit argument of the function."
        },
        {
          "name": "target",
          "parameters": [],
          "return_type": "WasmCodePointer",
          "logic": "Returns the function target."
        }
      ]
    },
    {
      "name": "WasmTrustedInstanceData",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmModuleObject> module_object",
            "bool shared"
          ],
          "return_type": "DirectHandle<WasmTrustedInstanceData>",
          "logic": "Creates a new WasmTrustedInstanceData for trusted access to WASM data, based on WasmModuleObject. Initializes all field objects such as FixedArrays, and dispatches tables."
        },
        {
          "name": "SetRawMemory",
          "parameters": [
            "int memory_index",
            "uint8_t* mem_start",
            "size_t mem_size"
          ],
          "return_type": "void",
          "logic": "Sets the raw memory base and size for a memory in the instance."
        },
        {
          "name": "GetCallTarget",
          "parameters": [
            "uint32_t func_index"
          ],
          "return_type": "WasmCodePointer",
          "logic": "Returns the WasmCodePointer to call a function, taking imported functions into consideration."
        },
        {
          "name": "CopyTableEntries",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "uint32_t table_dst_index",
            "uint32_t table_src_index",
            "uint32_t dst",
            "uint32_t src",
            "uint32_t count"
          ],
          "return_type": "bool",
          "logic": "Copies entries between tables. Returns true if the copy succeeds, false otherwise."
        },
        {
          "name": "InitTableEntries",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "DirectHandle<WasmTrustedInstanceData> shared_trusted_instance_data",
            "uint32_t table_index",
            "uint32_t segment_index",
            "uint32_t dst",
            "uint32_t src",
            "uint32_t count"
          ],
          "return_type": "std::optional<MessageTemplate>",
          "logic": "Initializes table entries from an element segment. Returns error if something went wrong."
        },
        {
          "name": "try_get_func_ref",
          "parameters": [
            "int index",
            "Tagged<WasmFuncRef>* result"
          ],
          "return_type": "bool",
          "logic": "Returns true if func_refs contains a funcref at index."
        },
        {
          "name": "GetOrCreateFuncRef",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmTrustedInstanceData> trusted_instance_data",
            "int function_index"
          ],
          "return_type": "DirectHandle<WasmFuncRef>",
          "logic": "Returns a WasmFuncRef at index."
        },
        {
          "name": "InitDataSegmentArrays",
          "parameters": [
            "const wasm::NativeModule* native_module"
          ],
          "return_type": "void",
          "logic": "Initialize Wasm Data segment arrays."
        },
        {
          "name": "GetGlobalStorage",
          "parameters": [
            "const wasm::WasmGlobal& global"
          ],
          "return_type": "uint8_t*",
          "logic": "Returns the address for a global variable."
        },
        {
          "name": "GetGlobalBufferAndIndex",
          "parameters": [
            "const wasm::WasmGlobal& global"
          ],
          "return_type": "std::pair<Tagged<FixedArray>, uint32_t>",
          "logic": "Returns the FixedArray buffer and index for reference type globals"
        },
        {
          "name": "GetGlobalValue",
          "parameters": [
            "Isolate* isolate",
            "const wasm::WasmGlobal& global"
          ],
          "return_type": "wasm::WasmValue",
          "logic": "Returns the WasmValue for a global variable."
        }
      ]
    },
    {
      "name": "WasmStruct",
      "properties": [],
      "methods": [
        {
          "name": "GcSafeType",
          "parameters": [
            "Tagged<Map> map"
          ],
          "return_type": "const wasm::CanonicalStructType*",
          "logic": "Returns the CanonicalStructType safely."
        },
        {
          "name": "GetFieldValue",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "wasm::WasmValue",
          "logic": "Get value of field with given index in WasmStruct."
        }
      ]
    },
    {
      "name": "WasmArray",
      "properties": [],
      "methods": [
        {
          "name": "GetElement",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "wasm::WasmValue",
          "logic": "Gets a WasmValue from array using element index."
        },
        {
          "name": "SetTaggedElement",
          "parameters": [
            "uint32_t index",
            "DirectHandle<Object> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "void",
          "logic": "Sets a tagged value as an element."
        }
      ]
    },
    {
      "name": "WasmTagObject",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "const wasm::FunctionSig* sig",
            "wasm::CanonicalTypeIndex type_index",
            "DirectHandle<HeapObject> tag",
            "DirectHandle<WasmTrustedInstanceData> trusted_data"
          ],
          "return_type": "DirectHandle<WasmTagObject>",
          "logic": "Creates a new WasmTagObject. Allocates PodArray, and JSObject"
        },
        {
          "name": "MatchesSignature",
          "parameters": [
            "wasm::CanonicalTypeIndex expected_index"
          ],
          "return_type": "bool",
          "logic": "Checks signature."
        }
      ]
    },
    {
      "name": "WasmCapiFunction",
      "properties": [],
      "methods": [
        {
          "name": "sig",
          "parameters": [],
          "return_type": "const wasm::CanonicalSig*",
          "logic": "Gets signature from this WasmCapiFunction."
        }
      ]
    },
    {
      "name": "WasmDispatchTableData",
      "properties": [],
      "methods": [
        {
          "name": "~WasmDispatchTableData",
          "parameters": [],
          "return_type": "n/a",
          "logic": "Destructor, frees stored code pointers and decrements ref counts of wasm code entries."
        },
        {
          "name": "IsAWrapper",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Checks if the function at the specified index is a wrapper."
        },
        {
          "name": "Add",
          "parameters": [
            "int index",
            "Address call_target",
            "wasm::WasmCode* compiled_wrapper",
            "uint64_t signature_hash"
          ],
          "return_type": "WasmCodePointer",
          "logic": "Adds entry."
        },
        {
          "name": "Remove",
          "parameters": [
            "int index",
            "WasmCodePointer call_target"
          ],
          "return_type": "void",
          "logic": "Removes entry."
        }
      ]
    },
    {
      "name": "WasmDispatchTable",
      "properties": [],
      "methods": [
        {
          "name": "SetForNonWrapper",
          "parameters": [
            "int index",
            "Tagged<Object> implicit_arg",
            "WasmCodePointer call_target",
            "wasm::CanonicalTypeIndex sig_id",
            "NewOrExistingEntry new_or_existing"
          ],
          "return_type": "void",
          "logic": "Sets an entry for a non-wrapper function in the dispatch table. Can free old entry and can write to protected pointer field."
        },
        {
          "name": "SetForWrapper",
          "parameters": [
            "int index",
            "Tagged<Object> implicit_arg",
            "Address call_target",
            "wasm::CanonicalTypeIndex sig_id",
            "uint64_t signature_hash",
            "wasm::WasmCode* compiled_wrapper",
            "NewOrExistingEntry new_or_existing"
          ],
          "return_type": "void",
          "logic": "Sets an entry for a wrapper function in the dispatch table. Updates ref counter."
        },
        {
          "name": "Clear",
          "parameters": [
            "int index",
            "NewOrExistingEntry new_or_existing"
          ],
          "return_type": "void",
          "logic": "Clears an entry in the dispatch table, removing and decrementing the ref count if necessary. Writes protected pointer field."
        },
        {
          "name": "InstallCompiledWrapper",
          "parameters": [
            "int index",
            "wasm::WasmCode* wrapper"
          ],
          "return_type": "void",
          "logic": "Installs code wrapper."
        },
        {
          "name": "IsAWrapper",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Tests wrapper."
        },
        {
          "name": "AddUse",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmDispatchTable> dispatch_table",
            "DirectHandle<WasmTrustedInstanceData> instance",
            "int table_index"
          ],
          "return_type": "void",
          "logic": "Adds instance."
        },
        {
          "name": "MaybeGrowUsesList",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<WasmDispatchTable> dispatch_table"
          ],
          "return_type": "Tagged<ProtectedWeakFixedArray>",
          "logic": "Grow uses-list."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "SetUsedLength",
      "parameters": [
        "Tagged<ProtectedWeakFixedArray> uses",
        "int length"
      ],
      "return_type": "void",
      "logic": "Sets the length used in the uses ProtectedWeakFixedArray"
    },
    {
      "name": "GetUsedLength",
      "parameters": [
        "Tagged<ProtectedWeakFixedArray> uses"
      ],
      "return_type": "int",
      "logic": "Gets the length used in the uses ProtectedWeakFixedArray"
    },
    {
      "name": "SetEntry",
      "parameters": [
        "Tagged<ProtectedWeakFixedArray> uses",
        "int slot_index",
        "Tagged<WasmTrustedInstanceData> user",
        "int table_index"
      ],
      "return_type": "void",
      "logic": "Sets the entry (user, table_index) in the uses ProtectedWeakFixedArray"
    },
    {
      "name": "GetInstance",
      "parameters": [
        "Tagged<ProtectedWeakFixedArray> uses",
        "int slot_index"
      ],
      "return_type": "Tagged<WasmTrustedInstanceData>",
      "logic": "Gets the WasmTrustedInstanceData from the uses ProtectedWeakFixedArray"
    },
    {
      "name": "GetTableIndex",
      "parameters": [
        "Tagged<ProtectedWeakFixedArray> uses",
        "int slot_index"
      ],
      "return_type": "int",
      "logic": "Gets the table index from the uses ProtectedWeakFixedArray"
    },
    {
      "name": "CopyEntry",
      "parameters": [
        "Tagged<ProtectedWeakFixedArray> dst",
        "int dst_index",
        "Tagged<ProtectedWeakFixedArray> src",
        "int src_index"
      ],
      "return_type": "void",
      "logic": "Copies the element in the `src` ProtectedWeakFixedArray at index `src_index` to the `dst` ProtectedWeakFixedArray at index `dst_index`"
    },
    {
      "name": "SetInstanceMemory",
      "parameters": [
        "Tagged<WasmTrustedInstanceData> trusted_instance_data",
        "Tagged<JSArrayBuffer> buffer",
        "int memory_index"
      ],
      "return_type": "void",
      "logic": "Helper func for setting the memory pointer and length to the instance, when its array buffer changes (e.g. after growing)."
    }
  ]
}