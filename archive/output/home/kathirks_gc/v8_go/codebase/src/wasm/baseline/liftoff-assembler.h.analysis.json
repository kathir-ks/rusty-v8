{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/liftoff-assembler.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/liftoff-assembler.h\",\n  \"imports\": [\n    \"<iosfwd>\",\n    \"<memory>\",\n    \"src/base/bits.h\",\n    \"src/codegen/macro-assembler.h\",\n    \"src/wasm/baseline/liftoff-assembler-defs.h\",\n    \"src/wasm/baseline/liftoff-compiler.h\",\n    \"src/wasm/baseline/liftoff-register.h\",\n    \"src/wasm/baseline/liftoff-varstate.h\",\n    \"src/wasm/function-body-decoder.h\",\n    \"src/wasm/wasm-module.h\",\n    \"src/wasm/wasm-opcodes.h\",\n    \"src/wasm/wasm-value.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"FreezeCacheState\",\n      \"properties\": [\n        \"assm_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FreezeCacheState\",\n          \"parameters\": [\n            \"LiftoffAssembler& assm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. In debug mode, freezes the cache state of the LiftoffAssembler.\"\n        },\n        {\n          \"name\": \"FreezeCacheState\",\n          \"parameters\": [\n            \"FreezeCacheState&& other\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Move Constructor.  In debug mode, freezes the cache state of the LiftoffAssembler.\"\n        },\n        {\n          \"name\": \"~FreezeCacheState\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor. In debug mode, unfreezes the cache state of the LiftoffAssembler.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LiftoffAssembler\",\n      \"properties\": [\n        \"num_locals_\",\n        \"local_kinds_\",\n        \"cache_state_\",\n        \"max_used_spill_offset_\",\n        \"ool_spill_space_size_\",\n        \"bailout_reason_\",\n        \"bailout_detail_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LiftoffAssembler\",\n          \"parameters\": [\n            \"Zone*\",\n            \"std::unique_ptr<AssemblerBuffer>\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the LiftoffAssembler.\"\n        },\n        {\n          \"name\": \"~LiftoffAssembler\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor for the LiftoffAssembler.\"\n        },\n        {\n          \"name\": \"zone\",\n          \"parameters\": [],\n          \"return_type\": \"Zone*\",\n          \"logic\": \"Returns the zone associated with the assembler.\"\n        },\n        {\n          \"name\": \"LoadToRegister\",\n          \"parameters\": [\n            \"VarState slot\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Loads a value from a cache slot (VarState) into a register.  If the slot is already a register, it returns the register. Otherwise, it calls LoadToRegister_Slow.\"\n        },\n        {\n          \"name\": \"LoadToRegister_Slow\",\n          \"parameters\": [\n            \"VarState slot\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Slow path for LoadToRegister. Handles the case where the VarState is not already in a register and needs to be loaded from memory or a stack slot.\"\n        },\n        {\n          \"name\": \"LoadToFixedRegister\",\n          \"parameters\": [\n            \"VarState slot\",\n            \"LiftoffRegister reg\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a cache slot (VarState) into a specified register.\"\n        },\n        {\n          \"name\": \"LoadToModifiableRegister\",\n          \"parameters\": [\n            \"VarState slot\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Loads a value from a cache slot into a register that can be modified. Chooses unused register, otherwise moves into an unused register.\"\n        },\n        {\n          \"name\": \"PopVarState\",\n          \"parameters\": [],\n          \"return_type\": \"VarState\",\n          \"logic\": \"Pops a VarState from the stack, updating register use counts.\"\n        },\n        {\n          \"name\": \"PopToRegister\",\n          \"parameters\": [\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Pops a VarState from the stack and loads it into a register.\"\n        },\n        {\n          \"name\": \"PopToFixedRegister\",\n          \"parameters\": [\n            \"LiftoffRegister reg\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pops a VarState from the stack into a specified register.\"\n        },\n        {\n          \"name\": \"PopToModifiableRegister\",\n          \"parameters\": [\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Pops a VarState from the stack into a register that can be modified.\"\n        },\n        {\n          \"name\": \"PeekToRegister\",\n          \"parameters\": [\n            \"int index\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Returns the register containing the value at stack slot {index}. Loads value to register if not already loaded.\"\n        },\n        {\n          \"name\": \"DropValues\",\n          \"parameters\": [\n            \"int count\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes {count} values from the stack.\"\n        },\n        {\n          \"name\": \"DropExceptionValueAtOffset\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Drop a specific value from the stack for exceptions. Indexes from the bottom.\"\n        },\n        {\n          \"name\": \"SpillLoopArgs\",\n          \"parameters\": [\n            \"int num\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills loop arguments to the stack to free registers for back edge.\"\n        },\n        {\n          \"name\": \"NextSpillOffset\",\n          \"parameters\": [\n            \"ValueKind kind\",\n            \"int top_spill_offset\"\n          ],\n          \"return_type\": \"static int\",\n          \"logic\": \"Calculates the next spill offset based on the ValueKind and the current top spill offset.\"\n        },\n        {\n          \"name\": \"NextSpillOffset\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Calculates the next spill offset based on ValueKind.\"\n        },\n        {\n          \"name\": \"TopSpillOffset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the current top spill offset.\"\n        },\n        {\n          \"name\": \"PushRegister\",\n          \"parameters\": [\n            \"ValueKind kind\",\n            \"LiftoffRegister reg\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes a register onto the stack.\"\n        },\n        {\n          \"name\": \"PushException\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes exception in kReturnRegister0 onto stack\"\n        },\n        {\n          \"name\": \"PushConstant\",\n          \"parameters\": [\n            \"ValueKind kind\",\n            \"int32_t i32_const\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes a constant value onto the stack.\"\n        },\n        {\n          \"name\": \"PushStack\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes a default value onto the stack.\"\n        },\n        {\n          \"name\": \"SpillRegister\",\n          \"parameters\": [\n            \"LiftoffRegister\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills a register to the stack.\"\n        },\n        {\n          \"name\": \"GetNumUses\",\n          \"parameters\": [\n            \"LiftoffRegister reg\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the number of uses of a LiftoffRegister.\"\n        },\n        {\n          \"name\": \"GetUnusedRegister\",\n          \"parameters\": [\n            \"RegClass rc\",\n            \"std::initializer_list<LiftoffRegister> try_first\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Gets an unused register for class {rc}, reusing one of {try_first} if possible.\"\n        },\n        {\n          \"name\": \"GetUnusedRegister\",\n          \"parameters\": [\n            \"RegClass rc\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Gets an unused register for class {rc}, excluding registers from {pinned}, potentially spilling to free one.\"\n        },\n        {\n          \"name\": \"GetUnusedRegister\",\n          \"parameters\": [\n            \"LiftoffRegList candidates\"\n          ],\n          \"return_type\": \"LiftoffRegister\",\n          \"logic\": \"Gets an unused register of {candidates}, potentially spilling to free one.\"\n        },\n        {\n          \"name\": \"PrepareForBranch\",\n          \"parameters\": [\n            \"uint32_t arity\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares the stack for a branch operation.\"\n        },\n        {\n          \"name\": \"MergeIntoNewState\",\n          \"parameters\": [\n            \"uint32_t num_locals\",\n            \"uint32_t arity\",\n            \"uint32_t stack_depth\"\n          ],\n          \"return_type\": \"CacheState\",\n          \"logic\": \"Merges the current cache state into a new cache state for control flow merges.\"\n        },\n        {\n          \"name\": \"MergeFullStackWith\",\n          \"parameters\": [\n            \"CacheState& target\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Merges the full stack with a target CacheState.\"\n        },\n        {\n          \"name\": \"MergeStackWith\",\n          \"parameters\": [\n            \"CacheState& target\",\n            \"uint32_t arity\",\n            \"JumpDirection\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Merges stack with a target CacheState.\"\n        },\n        {\n          \"name\": \"Spill\",\n          \"parameters\": [\n            \"VarState* slot\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills a VarState to the stack.\"\n        },\n        {\n          \"name\": \"SpillLocals\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills all locals to the stack.\"\n        },\n        {\n          \"name\": \"SpillAllRegisters\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills all used registers to the stack.\"\n        },\n        {\n          \"name\": \"LoadSpillAddress\",\n          \"parameters\": [\n            \"Register dst\",\n            \"int offset\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the address of a spill slot into a register.\"\n        },\n        {\n          \"name\": \"ClearRegister\",\n          \"parameters\": [\n            \"Register reg\",\n            \"std::initializer_list<Register*> possible_uses\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears the usages of a register\"\n        },\n        {\n          \"name\": \"SpillRegisters\",\n          \"parameters\": [\n            \"Regs... regs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills given Registers to the stack.\"\n        },\n        {\n          \"name\": \"RecordUsedSpillOffset\",\n          \"parameters\": [\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records the use of a spill offset.\"\n        },\n        {\n          \"name\": \"RecordOolSpillSpaceSize\",\n          \"parameters\": [\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Tracks maximum OOL code size\"\n        },\n        {\n          \"name\": \"PrepareBuiltinCall\",\n          \"parameters\": [\n            \"const ValueKindSig* sig\",\n            \"compiler::CallDescriptor* call_descriptor\",\n            \"std::initializer_list<VarState> params\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares arguments for a call to a builtin function.\"\n        },\n        {\n          \"name\": \"PrepareCall\",\n          \"parameters\": [\n            \"const ValueKindSig*\",\n            \"compiler::CallDescriptor*\",\n            \"Register* target\",\n            \"Register target_instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepare arguments for a call\"\n        },\n        {\n          \"name\": \"FinishCall\",\n          \"parameters\": [\n            \"const ValueKindSig*\",\n            \"compiler::CallDescriptor*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Process return value\"\n        },\n        {\n          \"name\": \"Move\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Move a value from one register to another.\"\n        },\n        {\n          \"name\": \"ParallelRegisterMove\",\n          \"parameters\": [\n            \"base::Vector<const ParallelRegisterMoveTuple>\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Move multiple registers at once avoiding clobbering\"\n        },\n        {\n          \"name\": \"ParallelRegisterMove\",\n          \"parameters\": [\n            \"std::initializer_list<ParallelRegisterMoveTuple> moves\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Move multiple registers at once avoiding clobbering\"\n        },\n        {\n          \"name\": \"MoveToReturnLocations\",\n          \"parameters\": [\n            \"const FunctionSig*\",\n            \"compiler::CallDescriptor*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves the top stack values into the expected return locations for a function call.\"\n        },\n        {\n          \"name\": \"MoveToReturnLocationsMultiReturn\",\n          \"parameters\": [\n            \"const FunctionSig*\",\n            \"compiler::CallDescriptor*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles multi-return of {MoveToReturnLocations}.\"\n        },\n        {\n          \"name\": \"SetCacheStateFrozen\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Debug function\"\n        },\n        {\n          \"name\": \"UnfreezeCacheState\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Debug function\"\n        },\n        {\n          \"name\": \"ValidateCacheState\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Debug function\"\n        },\n        {\n          \"name\": \"LoadFixedArrayLengthAsInt32\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register array\",\n            \"LiftoffRegList pinned\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads length from FixedArray into a i32 Register\"\n        },\n        {\n          \"name\": \"LoadSmiAsInt32\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register src_addr\",\n            \"int32_t offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads SMI to i32 register\"\n        },\n        {\n          \"name\": \"PrepareStackFrame\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Emits machine code to prepare the stack frame before the size of the stack frame is known.\"\n        },\n        {\n          \"name\": \"CallFrameSetupStub\",\n          \"parameters\": [\n            \"int declared_function_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets up the call frame.\"\n        },\n        {\n          \"name\": \"PrepareTailCall\",\n          \"parameters\": [\n            \"int num_callee_stack_params\",\n            \"int stack_param_delta\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepare for a tail call.\"\n        },\n        {\n          \"name\": \"AlignFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Aligns the frame size.\"\n        },\n        {\n          \"name\": \"PatchPrepareStackFrame\",\n          \"parameters\": [\n            \"int offset\",\n            \"SafepointTableBuilder*\",\n            \"bool feedback_vector_slot\",\n            \"size_t stack_param_slots\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Patches the stack frame setup with the calculated frame size.\"\n        },\n        {\n          \"name\": \"FinishCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Finishes the code generation.\"\n        },\n        {\n          \"name\": \"AbortCompilation\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Aborts the compilation process.\"\n        },\n        {\n          \"name\": \"StaticStackFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"static constexpr int\",\n          \"logic\": \"Gets size of static stack\"\n        },\n        {\n          \"name\": \"SlotSizeForType\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"static int\",\n          \"logic\": \"Gets size of slot for given type\"\n        },\n        {\n          \"name\": \"NeedsAlignment\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"static bool\",\n          \"logic\": \"Returns alignment needs for the given value kind.\"\n        },\n        {\n          \"name\": \"CheckTierUp\",\n          \"parameters\": [\n            \"int declared_func_index\",\n            \"int budget_used\",\n            \"Label* ool_label\",\n            \"const FreezeCacheState& frozen\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks to tier up.\"\n        },\n        {\n          \"name\": \"LoadOldFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"Register\",\n          \"logic\": \"Loads frame pointer.\"\n        },\n        {\n          \"name\": \"CheckStackShrink\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Check stack shrinking\"\n        },\n        {\n          \"name\": \"LoadConstant\",\n          \"parameters\": [\n            \"LiftoffRegister\",\n            \"WasmValue\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the wasm value in the liftoff register.\"\n        },\n        {\n          \"name\": \"LoadInstanceDataFromFrame\",\n          \"parameters\": [\n            \"Register dst\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the instance data from the frame.\"\n        },\n        {\n          \"name\": \"LoadTrustedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int offset\",\n            \"IndirectPointerTag tag\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a trusted pointer.\"\n        },\n        {\n          \"name\": \"LoadFromInstance\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register instance\",\n            \"int offset\",\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from the instance data.\"\n        },\n        {\n          \"name\": \"LoadTaggedPointerFromInstance\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register instance\",\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer from the instance data.\"\n        },\n        {\n          \"name\": \"SpillInstanceData\",\n          \"parameters\": [\n            \"Register instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills the instance data.\"\n        },\n        {\n          \"name\": \"ResetOSRTarget\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets OSR target\"\n        },\n        {\n          \"name\": \"LoadTaggedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"Register offset_reg\",\n            \"int32_t offset_imm\",\n            \"uint32_t* protected_load_pc\",\n            \"bool offset_reg_needs_shift\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer.\"\n        },\n        {\n          \"name\": \"LoadProtectedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int32_t offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a protected pointer.\"\n        },\n        {\n          \"name\": \"LoadFullPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int32_t offset_imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a full pointer.\"\n        },\n        {\n          \"name\": \"LoadCodePointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int32_t offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads code pointer\"\n        },\n        {\n          \"name\": \"LoadCodeEntrypointViaCodePointer\",\n          \"parameters\": [\n            \"Register dsr\",\n            \"Register src_addr\",\n            \"int offset_imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads code entrypoint.\"\n        },\n        {\n          \"name\": \"StoreTaggedPointer\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"int32_t offset_imm\",\n            \"Register src\",\n            \"LiftoffRegList pinned\",\n            \"uint32_t* protected_store_pc\",\n            \"SkipWriteBarrier\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores a tagged pointer.\"\n        },\n        {\n          \"name\": \"IncrementSmi\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Increments Smi\"\n        },\n        {\n          \"name\": \"Load\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register src_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LoadType type\",\n            \"uint32_t* protected_load_pc\",\n            \"bool is_load_mem\",\n            \"bool i64_offset\",\n            \"bool needs_shift\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Load an instruction from memory into register\"\n        },\n        {\n          \"name\": \"Store\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister src\",\n            \"StoreType type\",\n            \"LiftoffRegList pinned\",\n            \"uint32_t* protected_store_pc\",\n            \"bool is_store_mem\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Store an instruction from a register in memory\"\n        },\n        {\n          \"name\": \"AtomicLoad\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register src_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LoadType type\",\n            \"LiftoffRegList pinned\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads memory atomically\"\n        },\n        {\n          \"name\": \"AtomicStore\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister src\",\n            \"StoreType type\",\n            \"LiftoffRegList pinned\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically stores to memory\"\n        },\n        {\n          \"name\": \"AtomicAdd\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically increments memory\"\n        },\n        {\n          \"name\": \"AtomicSub\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically decrements memory\"\n        },\n        {\n          \"name\": \"AtomicAnd\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs an atomic and.\"\n        },\n        {\n          \"name\": \"AtomicOr\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs an atomic or.\"\n        },\n        {\n          \"name\": \"AtomicXor\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs an atomic xor.\"\n        },\n        {\n          \"name\": \"AtomicExchange\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically exchanges a value\"\n        },\n        {\n          \"name\": \"AtomicCompareExchange\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister expected\",\n            \"LiftoffRegister new_value\",\n            \"LiftoffRegister value\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically compare-and-exchanges a value\"\n        },\n        {\n          \"name\": \"AtomicFence\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Insert AtomicFence instruction\"\n        },\n        {\n          \"name\": \"LoadCallerFrameSlot\",\n          \"parameters\": [\n            \"LiftoffRegister\",\n            \"uint32_t caller_slot_idx\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Load the contents of caller frame slot to a liftoff register\"\n        },\n        {\n          \"name\": \"StoreCallerFrameSlot\",\n          \"parameters\": [\n            \"LiftoffRegister\",\n            \"uint32_t caller_slot_idx\",\n            \"ValueKind\",\n            \"Register frame_pointer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Store the contents of a liftoff register to caller frame slot\"\n        },\n        {\n          \"name\": \"LoadReturnStackSlot\",\n          \"parameters\": [\n            \"LiftoffRegister\",\n            \"int offset\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from return stack to the liftoff register\"\n        },\n        {\n          \"name\": \"MoveStackValue\",\n          \"parameters\": [\n            \"uint32_t dst_offset\",\n            \"uint32_t src_offset\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves the value in a stack.\"\n        },\n        {\n          \"name\": \"Move\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves a register of specified kind into another register\"\n        },\n        {\n          \"name\": \"Move\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves a double register of specified kind into another double register\"\n        },\n        {\n          \"name\": \"Spill\",\n          \"parameters\": [\n            \"int offset\",\n            \"LiftoffRegister\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills the value from the liftoff register into memory location\"\n        },\n        {\n          \"name\": \"Spill\",\n          \"parameters\": [\n            \"int offset\",\n            \"WasmValue\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills wasm value in memory\"\n        },\n        {\n          \"name\": \"Fill\",\n          \"parameters\": [\n            \"LiftoffRegister\",\n            \"int offset\",\n            \"ValueKind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills value from memory to the liftoff register\"\n        },\n        {\n          \"name\": \"FillI64Half\",\n          \"parameters\": [\n            \"Register\",\n            \"int offset\",\n            \"RegPairHalf\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Half slot filling.\"\n        },\n        {\n          \"name\": \"FillStackSlotsWithZero\",\n          \"parameters\": [\n            \"int start\",\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes {size} stack slots with zero from {start} slot\"\n        },\n        {\n          \"name\": \"emit_trace_instruction\",\n          \"parameters\": [\n            \"uint32_t markid\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emit tracing instruction with given mark id\"\n        },\n        {\n          \"name\": \"emit_i32_add\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits i32 addition.\"\n        },\n        {\n          \"name\": \"emit_i32_addi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits i32 addition with immediate.\"\n        },\n        {\n          \"name\": \"emit_i32_sub\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits i32 subtraction.\"\n        },\n        {\n          \"name\": \"emit_i32_subi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits i32 subtraction with immediate.\"\n        },\n        {\n          \"name\": \"emit_i32_mul\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n"
}