{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/mips64/liftoff-assembler-mips64-inl.h",
  "imports": [
    "src/codegen/machine-type.h",
    "src/compiler/linkage.h",
    "src/heap/mutable-page-metadata.h",
    "src/wasm/baseline/liftoff-assembler.h",
    "src/wasm/baseline/parallel-move-inl.h",
    "src/wasm/object-access.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "GetStackSlot",
      "parameters": [
        "int offset"
      ],
      "return_type": "MemOperand",
      "logic": "Returns a MemOperand representing a stack slot at the given offset from the frame pointer."
    },
    {
      "name": "GetInstanceDataOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns a MemOperand representing the instance data offset in the stack frame."
    },
    {
      "name": "GetMemOp",
      "parameters": [
        "LiftoffAssembler* assm",
        "Register addr",
        "Register offset",
        "T offset_imm",
        "bool i64_offset",
        "unsigned shift_amount"
      ],
      "return_type": "MemOperand",
      "logic": "Calculates and returns a MemOperand for memory access, handling different offset types (register or immediate) and shift amounts."
    },
    {
      "name": "Load",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister dst",
        "MemOperand src",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Loads a value of the specified ValueKind from memory into the given LiftoffRegister, using appropriate load instructions based on the ValueKind."
    },
    {
      "name": "Store",
      "parameters": [
        "LiftoffAssembler* assm",
        "MemOperand dst",
        "LiftoffRegister src",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Stores the value from the LiftoffRegister to the specified memory location, using appropriate store instructions based on the ValueKind."
    },
    {
      "name": "Store",
      "parameters": [
        "LiftoffAssembler* assm",
        "Register base",
        "int32_t offset",
        "LiftoffRegister src",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Stores the value from the LiftoffRegister to the specified memory location with register and offset, using appropriate store instructions based on the ValueKind."
    },
    {
      "name": "push",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister reg",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Pushes the value from the LiftoffRegister onto the stack, using appropriate store instructions based on the ValueKind. Decrements the stack pointer accordingly."
    },
    {
      "name": "ChangeEndiannessLoad",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister dst",
        "LoadType type",
        "LiftoffRegList pinned"
      ],
      "return_type": "void",
      "logic": "Changes the endianness of the loaded value if the target is big-endian. Uses bytestwap intrinsics."
    },
    {
      "name": "ChangeEndiannessStore",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister src",
        "StoreType type",
        "LiftoffRegList pinned"
      ],
      "return_type": "void",
      "logic": "Changes the endianness of the value to be stored if the target is big-endian. Uses bytestwap intrinsics."
    },
    {
      "name": "ConditionToConditionCmpFPU",
      "parameters": [
        "Condition condition",
        "bool* predicate"
      ],
      "return_type": "FPUCondition",
      "logic": "Converts a general Condition to an FPUCondition for floating-point comparisons."
    },
    {
      "name": "EmitAnyTrue",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister dst",
        "LiftoffRegister src"
      ],
      "return_type": "void",
      "logic": "Checks if any lane in a SIMD vector is true."
    },
    {
      "name": "EmitAllTrue",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister dst",
        "LiftoffRegister src",
        "MSABranchDF msa_branch_df"
      ],
      "return_type": "void",
      "logic": "Checks if all lanes in a SIMD vector are true."
    },
    {
      "name": "StoreToMemory",
      "parameters": [
        "LiftoffAssembler* assm",
        "MemOperand dst",
        "const LiftoffAssembler::VarState& src"
      ],
      "return_type": "void",
      "logic": "Stores data represented by a VarState to memory, handling different data sources like registers, constants, or stack slots."
    }
  ]
}