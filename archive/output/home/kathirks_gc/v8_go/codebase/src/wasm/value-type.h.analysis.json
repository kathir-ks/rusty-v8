{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/value-type.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/value-type.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"src/base/bit-field.h\",\n    \"src/base/template-utils.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/codegen/signature.h\",\n    \"src/wasm/wasm-constants.h\",\n    \"src/wasm/wasm-limits.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Simd128\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"Zone\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"TypeIndex\",\n      \"properties\": [\n        \"uint32_t index\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"valid\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the index is valid (not equal to kInvalid).\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the index as a hash value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ModuleTypeIndex\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Invalid\",\n          \"parameters\": [],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Returns an invalid ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"ModuleTypeIndex other\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two ModuleTypeIndex objects for equality based on their index values.\"\n        },\n        {\n          \"name\": \"operator<=>\",\n          \"parameters\": [\n            \"ModuleTypeIndex other\"\n          ],\n          \"return_type\": \"auto\",\n          \"logic\": \"Implements the spaceship operator <=> to provide comparison functionality (less than, equal to, greater than) for ModuleTypeIndex objects based on their index values.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CanonicalTypeIndex\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Invalid\",\n          \"parameters\": [],\n          \"return_type\": \"CanonicalTypeIndex\",\n          \"logic\": \"Returns an invalid CanonicalTypeIndex.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"CanonicalTypeIndex other\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Compares two CanonicalTypeIndex objects for equality based on their index values.\"\n        },\n        {\n          \"name\": \"operator<=>\",\n          \"parameters\": [\n            \"CanonicalTypeIndex other\"\n          ],\n          \"return_type\": \"auto\",\n          \"logic\": \"Implements the spaceship operator <=> to provide comparison functionality (less than, equal to, greater than) for CanonicalTypeIndex objects based on their index values.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ValueTypeBase\",\n      \"properties\": [\n        \"uint32_t bit_field_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Populate\",\n          \"parameters\": [\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates the shared and RefTypeKind bits in the bit_field_.\"\n        },\n        {\n          \"name\": \"type_kind\",\n          \"parameters\": [],\n          \"return_type\": \"TypeKind\",\n          \"logic\": \"Decodes and returns the TypeKind from the bit_field_.\"\n        },\n        {\n          \"name\": \"has_index\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type has an index (is of TypeKind::kIndexedRef).\"\n        },\n        {\n          \"name\": \"is_sentinel\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is a sentinel value (is of TypeKind::kSentinel).\"\n        },\n        {\n          \"name\": \"is_numeric\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is numeric (is of TypeKind::kNumeric).\"\n        },\n        {\n          \"name\": \"is_abstract_ref\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is an abstract reference (is of TypeKind::kAbstractRef).\"\n        },\n        {\n          \"name\": \"is_ref\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is a reference (either abstract or indexed).\"\n        },\n        {\n          \"name\": \"is_generic\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is generic (either abstract reference or internal sentinel).\"\n        },\n        {\n          \"name\": \"nullability\",\n          \"parameters\": [],\n          \"return_type\": \"Nullability\",\n          \"logic\": \"Decodes and returns the nullability of the reference type.\"\n        },\n        {\n          \"name\": \"is_nullable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is a nullable reference.\"\n        },\n        {\n          \"name\": \"is_non_nullable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is a non-nullable reference.\"\n        },\n        {\n          \"name\": \"is_exact\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Decodes and returns if the reference is an exact reference\"\n        },\n        {\n          \"name\": \"is_shared\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Decodes and returns whether the reference is a shared reference\"\n        },\n        {\n          \"name\": \"ref_type_kind\",\n          \"parameters\": [],\n          \"return_type\": \"RefTypeKind\",\n          \"logic\": \"Decodes and returns the RefTypeKind from the bit_field_.\"\n        },\n        {\n          \"name\": \"standard_type\",\n          \"parameters\": [],\n          \"return_type\": \"StandardType\",\n          \"logic\": \"Decodes and returns the StandardType from the bit_field_.\"\n        },\n        {\n          \"name\": \"numeric_kind\",\n          \"parameters\": [],\n          \"return_type\": \"NumericKind\",\n          \"logic\": \"Decodes and returns the NumericKind from the bit_field_.\"\n        },\n        {\n          \"name\": \"generic_kind\",\n          \"parameters\": [],\n          \"return_type\": \"GenericKind\",\n          \"logic\": \"Decodes and returns the GenericKind from the bit_field_.\"\n        },\n        {\n          \"name\": \"is_bottom\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is bottom.\"\n        },\n        {\n          \"name\": \"is_top\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is top.\"\n        },\n        {\n          \"name\": \"is_void\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is void.\"\n        },\n        {\n          \"name\": \"is_string_view\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is one of the string view types.\"\n        },\n        {\n          \"name\": \"is_packed\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is a packed type (i8, i16, f16).\"\n        },\n        {\n          \"name\": \"is_reference_to\",\n          \"parameters\": [\n            \"GenericKind type\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is a reference to a specific GenericKind.\"\n        },\n        {\n          \"name\": \"is_defaultable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is defaultable (numeric or nullable).\"\n        },\n        {\n          \"name\": \"is_uninhabited\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the type is uninhabited (bottom, or non-nullable reference to a null type).\"\n        },\n        {\n          \"name\": \"use_wasm_null\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if the type should use wasm null (for references).\"\n        },\n        {\n          \"name\": \"value_kind_size_log2\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the log2 of the size of the value kind.\"\n        },\n        {\n          \"name\": \"value_kind_size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the size of the value kind.\"\n        },\n        {\n          \"name\": \"value_kind_full_size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the full size of the value kind (including pointer size for references).\"\n        },\n        {\n          \"name\": \"machine_type\",\n          \"parameters\": [],\n          \"return_type\": \"MachineType\",\n          \"logic\": \"Returns the MachineType for the value type.\"\n        },\n        {\n          \"name\": \"machine_representation\",\n          \"parameters\": [],\n          \"return_type\": \"MachineRepresentation\",\n          \"logic\": \"Returns the MachineRepresentation for the value type.\"\n        },\n        {\n          \"name\": \"value_type_code\",\n          \"parameters\": [],\n          \"return_type\": \"ValueTypeCode\",\n          \"logic\": \"Returns the value type code (first byte of the LEB128 encoding).\"\n        },\n        {\n          \"name\": \"encoding_needs_heap_type\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the heap type is needed for encoding the value type.\"\n        },\n        {\n          \"name\": \"encoding_needs_shared\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the 'shared' keyword is needed for encoding the value type.\"\n        },\n        {\n          \"name\": \"value_type_code_numeric\",\n          \"parameters\": [],\n          \"return_type\": \"ValueTypeCode\",\n          \"logic\": \"Returns the numeric value type code.\"\n        },\n        {\n          \"name\": \"value_type_code_generic\",\n          \"parameters\": [],\n          \"return_type\": \"ValueTypeCode\",\n          \"logic\": \"Returns the generic value type code.\"\n        },\n        {\n          \"name\": \"short_name\",\n          \"parameters\": [],\n          \"return_type\": \"char\",\n          \"logic\": \"Returns a short name for the value type.\"\n        },\n        {\n          \"name\": \"generic_heaptype_name\",\n          \"parameters\": [],\n          \"return_type\": \"std::string\",\n          \"logic\": \"Returns the name of the generic heap type.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"std::string\",\n          \"logic\": \"Returns the name of the value type.\"\n        },\n        {\n          \"name\": \"is_valid\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the bit_field_ holds a valid ValueType representation\"\n        },\n        {\n          \"name\": \"raw_bit_field\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the raw bit field.\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates and returns a hash value for the ValueType.\"\n        },\n        {\n          \"name\": \"is_reference\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"DEPRECATED. Returns true if the type is a reference.\"\n        },\n        {\n          \"name\": \"is_object_reference\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"DEPRECATED. Returns true if the type is an object reference.\"\n        },\n        {\n          \"name\": \"Primitive\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"ValueTypeBase\",\n          \"logic\": \"Static method to construct a ValueTypeBase from a Primitive ValueKind\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"ValueKind\",\n          \"logic\": \"Returns the ValueKind corresponding to this type.\"\n        },\n        {\n          \"name\": \"raw_heap_representation\",\n          \"parameters\": [\n            \"bool distinguish_shared\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"DEPRECATED. Returns the raw heap representation\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HeapType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Generic\",\n          \"parameters\": [\n            \"GenericKind kind\",\n            \"bool shared\"\n          ],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Static method to construct a HeapType from a GenericKind.\"\n        },\n        {\n          \"name\": \"Index\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\",\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Static method to construct a HeapType from a ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"FromBits\",\n          \"parameters\": [\n            \"uint32_t bits\"\n          ],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Creates a HeapType from the raw bits.\"\n        },\n        {\n          \"name\": \"from_code\",\n          \"parameters\": [\n            \"uint8_t code\",\n            \"bool is_shared\"\n          ],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Creates a HeapType from a value type code and a shared flag.\"\n        },\n        {\n          \"name\": \"code\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the code represented by this heap type. Either index or value type code.\"\n        },\n        {\n          \"name\": \"ref_index\",\n          \"parameters\": [],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Returns the ModuleTypeIndex of the heap type.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"HeapType other\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality operator for HeapType\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"std::string\",\n          \"logic\": \"Returns the name of the HeapType.\"\n        },\n        {\n          \"name\": \"representation\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType::Representation\",\n          \"logic\": \"DEPRECATED. Returns the enum representation.\"\n        },\n        {\n          \"name\": \"is_index\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"DEPRECATED. Returns whether this HeapType represents a user-defined type, indexed into a table.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ValueType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Primitive\",\n          \"parameters\": [\n            \"NumericKind kind\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a ValueType from a NumericKind.\"\n        },\n        {\n          \"name\": \"Generic\",\n          \"parameters\": [\n            \"GenericKind kind\",\n            \"Nullability nullable\",\n            \"bool shared\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a ValueType from a GenericKind.\"\n        },\n        {\n          \"name\": \"Ref\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\",\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a non-nullable reference ValueType from a ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"Ref\",\n          \"parameters\": [\n            \"HeapType type\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a non-nullable reference ValueType from a HeapType.\"\n        },\n        {\n          \"name\": \"RefNull\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\",\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a nullable reference ValueType from a ModuleTypeIndex.\"\n        },\n        {\n          \"name\": \"RefNull\",\n          \"parameters\": [\n            \"HeapType type\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a nullable reference ValueType from a HeapType.\"\n        },\n        {\n          \"name\": \"RefMaybeNull\",\n          \"parameters\": [\n            \"ModuleTypeIndex index\",\n            \"Nullability nullable\",\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a reference ValueType from a ModuleTypeIndex and explicit nullability.\"\n        },\n        {\n          \"name\": \"RefMaybeNull\",\n          \"parameters\": [\n            \"HeapType type\",\n            \"Nullability nullable\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Static method to construct a reference ValueType from a HeapType and explicit nullability.\"\n        },\n        {\n          \"name\": \"FromRawBitField\",\n          \"parameters\": [\n            \"uint32_t bits\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Constructs a ValueType from raw bit field.\"\n        },\n        {\n          \"name\": \"AsNonNull\",\n          \"parameters\": [],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns a non-nullable version of the ValueType.\"\n        },\n        {\n          \"name\": \"AsNullable\",\n          \"parameters\": [\n            \"Nullability nullable\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns a nullable version of the ValueType.\"\n        },\n        {\n          \"name\": \"AsNonShared\",\n          \"parameters\": [],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns a non-shared version of the ValueType.\"\n        },\n        {\n          \"name\": \"Unpacked\",\n          \"parameters\": [],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns the unpacked version of the ValueType, promoting i8/i16 to i32 and f16 to f32.\"\n        },\n        {\n          \"name\": \"Canonicalize\",\n          \"parameters\": [\n            \"CanonicalTypeIndex index\"\n          ],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Converts a ValueType to a CanonicalValueType using the given canonical type index.\"\n        },\n        {\n          \"name\": \"Primitive\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"FOR INCREMENTAL TRANSITION.  Static method to construct a ValueType from a Primitive ValueKind\"\n        },\n        {\n          \"name\": \"heap_representation\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType::Representation\",\n          \"logic\": \"FOR INCREMENTAL TRANSITION. Returns the HeapType representation\"\n        },\n        {\n          \"name\": \"is_reference_to\",\n          \"parameters\": [\n            \"HeapType::Representation repr\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"FOR INCREMENTAL TRANSITION. Returns true if the type is reference to a certain HeapType::Representation.\"\n        },\n        {\n          \"name\": \"is_reference_to\",\n          \"parameters\": [\n            \"GenericKind kind\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if this ValueType is a reference to given generic kind.\"\n        },\n        {\n          \"name\": \"For\",\n          \"parameters\": [\n            \"MachineType type\"\n          ],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Creates a ValueType from a MachineType.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"ValueType other\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality operator for ValueType\"\n        },\n        {\n          \"name\": \"heap_type\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Returns the HeapType corresponding to this ValueType.\"\n        },\n        {\n          \"name\": \"ref_index\",\n          \"parameters\": [],\n          \"return_type\": \"ModuleTypeIndex\",\n          \"logic\": \"Returns the ModuleTypeIndex of the ref type\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CanonicalValueType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Primitive\",\n          \"parameters\": [\n            \"NumericKind kind\"\n          ],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Static method to construct a CanonicalValueType from a NumericKind.\"\n        },\n        {\n          \"name\": \"Ref\",\n          \"parameters\": [\n            \"CanonicalTypeIndex index\",\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Static method to construct a non-nullable reference CanonicalValueType from a CanonicalTypeIndex.\"\n        },\n        {\n          \"name\": \"RefNull\",\n          \"parameters\": [\n            \"CanonicalTypeIndex index\",\n            \"bool shared\",\n            \"RefTypeKind kind\"\n          ],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Static method to construct a nullable reference CanonicalValueType from a CanonicalTypeIndex.\"\n        },\n        {\n          \"name\": \"RefMaybeNull\",\n          \"parameters\": [\n            \"CanonicalValueType type\",\n            \"Nullability nullable\"\n          ],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Creates CanonicalValueType ref maybe null\"\n        },\n        {\n          \"name\": \"FromRawBitField\",\n          \"parameters\": [\n            \"uint32_t bits\"\n          ],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Constructs a CanonicalValueType from raw bit field.\"\n        },\n        {\n          \"name\": \"ref_index\",\n          \"parameters\": [],\n          \"return_type\": \"CanonicalTypeIndex\",\n          \"logic\": \"Returns the CanonicalTypeIndex of the ref type.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"CanonicalValueType other\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality operator for CanonicalValueType\"\n        },\n        {\n          \"name\": \"IsFunctionType\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether it is function type\"\n        },\n        {\n          \"name\": \"heap_representation\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType::Representation\",\n          \"logic\": \"FOR INCREMENTAL TRANSITION. Returns the HeapType representation\"\n        },\n        {\n          \"name\": \"heap_representation_non_shared\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType::Representation\",\n          \"logic\": \"FOR INCREMENTAL TRANSITION. Returns the HeapType representation without considering sharedness.\"\n        },\n        {\n          \"name\": \"is_reference_to\",\n          \"parameters\": [\n            \"HeapType::Representation repr\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"FOR INCREMENTAL TRANSITION. Returns true if the type is reference to a certain HeapType::Representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IndependentValueType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"operator ValueType\",\n          \"parameters\": [],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Implicit conversion operator to ValueType.\"\n        },\n        {\n          \"name\": \"operator CanonicalValueType\",\n          \"parameters\": [],\n          \"return_type\": \"CanonicalValueType\",\n          \"logic\": \"Implicit conversion operator to CanonicalValueType.\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"ValueType b\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality operator for ValueType\"\n        },\n        {\n          \"name\": \"operator==\",\n          \"parameters\": [\n            \"CanonicalValueType b\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality operator for CanonicalValueType\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IndependentHeapType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"AsNonNull\",\n          \"parameters\": [],\n          \"return_type\": \"IndependentHeapType\",\n          \"logic\": \"Make non-nullable version of the heap type\"\n        },\n        {\n          \"name\": \"heap_type\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Return HeapType form of independent heap type\"\n        },\n        {\n          \"name\": \"operator HeapType\",\n          \"parameters\": [],\n          \"return_type\": \"HeapType\",\n          \"logic\": \"Implicit conversion operator to HeapType\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CanonicalSig\",\n      \"properties\": [\n        \"uint64_t signature_hash_\"\n      ],\n      \"methods\": [],\n      \"inner_classes\": [\n        {\n          \"name\": \"Builder\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"Get\",\n              \"parameters\": [],\n              \"return_type\": \"CanonicalSig*\",\n              \"logic\": \"Retrieves the built CanonicalSig.\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"LoadType\",\n      \"properties\": [\n        \"LoadTypeValue val_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"value\",\n          \"parameters\": [],\n          \"return_type\": \"LoadTypeValue\",\n          \"logic\": \"Returns the enum value.\"\n        },\n        {\n          \"name\": \"size_log_2\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t\",\n          \"logic\": \"Returns the log2 of the size.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t\",\n          \"logic\": \"Returns the size.\"\n        },\n        {\n          \"name\": \"value_type\",\n          \"parameters\": [],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns the ValueType.\"\n        },\n        {\n          \"name\": \"mem_type\",\n          \"parameters\": [],\n          \"return_type\": \"MachineType\",\n          \"logic\": \"Returns the MachineType for the memory access.\"\n        },\n        {\n          \"name\": \"ForValueKind\",\n          \"parameters\": [\n            \"ValueKind kind\",\n            \"bool is_signed\"\n          ],\n          \"return_type\": \"LoadType\",\n          \"logic\": \"Static method to construct a LoadType from a ValueKind.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StoreType\",\n      \"properties\": [\n        \"StoreTypeValue val_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"value\",\n          \"parameters\": [],\n          \"return_type\": \"StoreTypeValue\",\n          \"logic\": \"Returns the enum value.\"\n        },\n        {\n          \"name\": \"size_log_2\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned int\",\n          \"logic\": \"Returns the log2 of the size.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned int\",\n          \"logic\": \"Returns the size.\"\n        },\n        {\n          \"name\": \"value_type\",\n          \"parameters\": [],\n          \"return_type\": \"ValueType\",\n          \"logic\": \"Returns the ValueType.\"\n        },\n        {\n          \"name\": \"mem_rep\",\n          \"parameters\": [],\n          \"return_type\": \"MachineRepresentation\",\n          \"logic\": \"Returns the MachineRepresentation for the memory access.\"\n        },\n        {\n          \"name\": \"ForValueKind\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"StoreType\",\n          \"logic\": \"Static method to construct a StoreType from a ValueKind.\"\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& oss\",\n        \"TypeIndex index\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print a TypeIndex to an output stream.\"\n    },\n    {\n      \"name\": \"IsNullKind\",\n      \"parameters\": [\n        \"GenericKind kind\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Check whether a given generic kind is of Null type.\"\n    },\n    {\n      \"name\": \"ToZeroBasedIndex\",\n      \"parameters\": [\n        \"NumericKind kind\"\n      ],\n      \"return_type\": \"uint32_t\",\n      \"logic\": \"Convert a NumericKind to zero based index.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& oss\",\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print a ValueKind to an output stream.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& oss\",\n        \"ValueType type\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print a ValueType to an output stream.\"\n    },\n    {\n      \"name\": \"is_reference\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Determines if a given ValueKind is reference.\"\n    },\n    {\n      \"name\": \"is_object_reference\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Determines if a given ValueKind is object reference.\"\n    },\n    {\n      \"name\": \"value_kind_size_log2\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"int\",\n      \"logic\": \"Returns the size log 2 of a particular ValueKind.\"\n    },\n    {\n      \"name\": \"value_kind_size\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"int\",\n      \"logic\": \"Returns the element size of a particular ValueKind.\"\n    },\n    {\n      \"name\": \"value_kind_full_size\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"int\",\n      \"logic\": \"Return the element full size of particular ValueKind. \"\n    },\n    {\n      \"name\": \"name\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"const char*\",\n      \"logic\": \"Returns the name of ValueKind.\"\n    },\n    {\n      \"name\": \"machine_type\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"MachineType\",\n      \"logic\": \"Returns machine type based on ValueKind.\"\n    },\n    {\n      \"name\": \"is_packed\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Return if given ValueKind is packed (e.g., i8,i16, etc.) or not\"\n    },\n    {\n      \"name\": \"unpacked\",\n      \"parameters\": [\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"ValueKind\",\n      \"logic\": \"Return the corresponding unpacked version of ValueKind\"\n    },\n    {\n      \"name\": \"EquivalentNumericSig\",\n      \"parameters\": [\n        \"const CanonicalSig* a\",\n        \"const FunctionSig* b\"\n      ],\n      "
}