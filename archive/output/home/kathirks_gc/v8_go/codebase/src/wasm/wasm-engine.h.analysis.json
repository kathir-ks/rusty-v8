{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-engine.h",
  "imports": [
    "<algorithm>",
    "<map>",
    "<memory>",
    "<optional>",
    "<unordered_map>",
    "<unordered_set>",
    "src/base/platform/condition-variable.h",
    "src/base/platform/mutex.h",
    "src/compiler/wasm-call-descriptors.h",
    "src/tasks/cancelable-task.h",
    "src/tasks/operations-barrier.h",
    "src/wasm/canonical-types.h",
    "src/wasm/stacks.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-tier.h",
    "src/zone/accounting-allocator.h"
  ],
  "classes": [
    {
      "name": "CompilationResultResolver",
      "properties": [],
      "methods": [
        {
          "name": "OnCompilationSucceeded",
          "parameters": [
            "DirectHandle<WasmModuleObject> result"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle successful compilation, receiving the compiled module object."
        },
        {
          "name": "OnCompilationFailed",
          "parameters": [
            "DirectHandle<Object> error_reason"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle failed compilation, receiving the error reason."
        },
        {
          "name": "~CompilationResultResolver",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the class."
        }
      ]
    },
    {
      "name": "InstantiationResultResolver",
      "properties": [],
      "methods": [
        {
          "name": "OnInstantiationSucceeded",
          "parameters": [
            "DirectHandle<WasmInstanceObject> result"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle successful instantiation, receiving the instance object."
        },
        {
          "name": "OnInstantiationFailed",
          "parameters": [
            "DirectHandle<Object> error_reason"
          ],
          "return_type": "void",
          "logic": "Abstract method to handle failed instantiation, receiving the error reason."
        },
        {
          "name": "~InstantiationResultResolver",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the class."
        }
      ]
    },
    {
      "name": "NativeModuleCache",
      "properties": [
        "map_",
        "mutex_",
        "cache_cv_"
      ],
      "methods": [
        {
          "name": "MaybeGetNativeModule",
          "parameters": [
            "ModuleOrigin origin",
            "base::Vector<const uint8_t> wire_bytes",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Attempts to retrieve a NativeModule from the cache. Returns nullptr if not found."
        },
        {
          "name": "GetStreamingCompilationOwnership",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "bool",
          "logic": "Checks if the current compilation process can claim ownership for streaming compilation based on the prefix hash and imports."
        },
        {
          "name": "StreamingCompilationFailed",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "void",
          "logic": "Handles the failure of a streaming compilation by removing its prefix hash and imports from active ownership."
        },
        {
          "name": "Update",
          "parameters": [
            "std::shared_ptr<NativeModule> native_module",
            "bool error"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Updates the cache with the provided native module, indicating success or failure."
        },
        {
          "name": "Erase",
          "parameters": [
            "NativeModule* native_module"
          ],
          "return_type": "void",
          "logic": "Removes a native module from the cache."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the cache is empty."
        },
        {
          "name": "PrefixHash",
          "parameters": [
            "base::Vector<const uint8_t> wire_bytes"
          ],
          "return_type": "size_t",
          "logic": "Calculates a prefix hash of the wire bytes for faster lookup in the cache."
        }
      ]
    },
    {
      "name": "WasmEngine",
      "properties": [
        "had_nondeterminism_",
        "allocator_",
        "gdb_server_",
        "next_compilation_id_",
        "deopts_executed_",
        "type_canonicalizer_",
        "call_descriptors_",
        "mutex_",
        "async_compile_jobs_",
        "compilation_stats_",
        "code_tracer_",
        "isolates_",
        "native_modules_",
        "operations_barrier_",
        "num_modules_with_code_logging_",
        "new_potentially_dead_code_size_",
        "potentially_dead_code_",
        "num_code_gcs_triggered_",
        "current_gc_info_",
        "native_module_cache_"
      ],
      "methods": [
        {
          "name": "WasmEngine",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for the WasmEngine class."
        },
        {
          "name": "~WasmEngine",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for the WasmEngine class."
        },
        {
          "name": "SyncValidate",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "bool",
          "logic": "Synchronously validates the provided bytes as a Wasm module."
        },
        {
          "name": "SyncCompileTranslatedAsmJs",
          "parameters": [
            "Isolate* isolate",
            "ErrorThrower* thrower",
            "base::OwnedVector<const uint8_t> bytes",
            "DirectHandle<Script> script",
            "base::Vector<const uint8_t> asm_js_offset_table_bytes",
            "DirectHandle<HeapNumber> uses_bitset",
            "LanguageMode language_mode"
          ],
          "return_type": "MaybeHandle<AsmWasmData>",
          "logic": "Synchronously compiles asm.js code that has been translated into WebAssembly."
        },
        {
          "name": "FinalizeTranslatedAsmJs",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<AsmWasmData> asm_wasm_data",
            "DirectHandle<Script> script"
          ],
          "return_type": "DirectHandle<WasmModuleObject>",
          "logic": "Finalizes the compilation of translated asm.js code."
        },
        {
          "name": "SyncCompile",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "ErrorThrower* thrower",
            "base::OwnedVector<const uint8_t> bytes"
          ],
          "return_type": "MaybeDirectHandle<WasmModuleObject>",
          "logic": "Synchronously compiles the provided bytes as a Wasm module."
        },
        {
          "name": "SyncInstantiate",
          "parameters": [
            "Isolate* isolate",
            "ErrorThrower* thrower",
            "DirectHandle<WasmModuleObject> module_object",
            "MaybeDirectHandle<JSReceiver> imports",
            "MaybeDirectHandle<JSArrayBuffer> memory"
          ],
          "return_type": "MaybeDirectHandle<WasmInstanceObject>",
          "logic": "Synchronously instantiates a Wasm module with the given imports and optional memory."
        },
        {
          "name": "AsyncCompile",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "std::shared_ptr<CompilationResultResolver> resolver",
            "base::OwnedVector<const uint8_t> bytes",
            "const char* api_method_name_for_errors"
          ],
          "return_type": "void",
          "logic": "Asynchronously compiles the provided bytes as a Wasm module."
        },
        {
          "name": "AsyncInstantiate",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<InstantiationResultResolver> resolver",
            "DirectHandle<WasmModuleObject> module_object",
            "MaybeDirectHandle<JSReceiver> imports"
          ],
          "return_type": "void",
          "logic": "Asynchronously instantiates a Wasm module."
        },
        {
          "name": "StartStreamingCompilation",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "DirectHandle<Context> context",
            "const char* api_method_name",
            "std::shared_ptr<CompilationResultResolver> resolver"
          ],
          "return_type": "std::shared_ptr<StreamingDecoder>",
          "logic": "Starts the streaming compilation of a Wasm module."
        },
        {
          "name": "CompileFunction",
          "parameters": [
            "Counters* counters",
            "NativeModule* native_module",
            "uint32_t function_index",
            "ExecutionTier tier"
          ],
          "return_type": "void",
          "logic": "Compiles a specific function within a Wasm module at a given execution tier."
        },
        {
          "name": "EnterDebuggingForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Enables debugging for a specific isolate."
        },
        {
          "name": "LeaveDebuggingForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Disables debugging for a specific isolate."
        },
        {
          "name": "ImportNativeModule",
          "parameters": [
            "Isolate* isolate",
            "std::shared_ptr<NativeModule> shared_module",
            "base::Vector<const char> source_url"
          ],
          "return_type": "DirectHandle<WasmModuleObject>",
          "logic": "Imports a NativeModule from another context into the current isolate."
        },
        {
          "name": "FlushLiftoffCode",
          "parameters": [],
          "return_type": "std::pair<size_t, size_t>",
          "logic": "Flushes Liftoff-compiled code and returns the amount of executable code and metadata removed."
        },
        {
          "name": "GetLiftoffCodeSizeForTesting",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of all Liftoff-compiled functions."
        },
        {
          "name": "allocator",
          "parameters": [],
          "return_type": "AccountingAllocator*",
          "logic": "Returns the engine's accounting allocator."
        },
        {
          "name": "GetOrCreateTurboStatistics",
          "parameters": [],
          "return_type": "std::shared_ptr<CompilationStatistics>",
          "logic": "Returns or creates compilation statistics for TurboFan."
        },
        {
          "name": "DumpAndResetTurboStatistics",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints and resets the gathered TurboFan compilation statistics."
        },
        {
          "name": "DumpTurboStatistics",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the gathered TurboFan compilation statistics."
        },
        {
          "name": "GetCodeTracer",
          "parameters": [],
          "return_type": "CodeTracer*",
          "logic": "Returns the engine's code tracer."
        },
        {
          "name": "RemoveCompileJob",
          "parameters": [
            "AsyncCompileJob* job"
          ],
          "return_type": "std::unique_ptr<AsyncCompileJob>",
          "logic": "Removes a compile job from the list of active jobs."
        },
        {
          "name": "HasRunningCompileJob",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if there are any running compile jobs for a specific isolate."
        },
        {
          "name": "DeleteCompileJobsOnContext",
          "parameters": [
            "DirectHandle<Context> context"
          ],
          "return_type": "void",
          "logic": "Deletes all compile jobs associated with a given context."
        },
        {
          "name": "DeleteCompileJobsOnIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Deletes all compile jobs associated with a given isolate."
        },
        {
          "name": "AddIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Adds an isolate to the set of isolates using this WasmEngine."
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Removes an isolate from the set of isolates using this WasmEngine."
        },
        {
          "name": "LogCode",
          "parameters": [
            "base::Vector<WasmCode*>"
          ],
          "return_type": "void",
          "logic": "Triggers code logging for the given code objects in all isolates."
        },
        {
          "name": "LogWrapperCode",
          "parameters": [
            "WasmCode*"
          ],
          "return_type": "bool",
          "logic": "Triggers code logging for wrapper code objects."
        },
        {
          "name": "EnableCodeLogging",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "void",
          "logic": "Enables code logging for a specific isolate."
        },
        {
          "name": "LogOutstandingCodesForIsolate",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "void",
          "logic": "Logs all outstanding code objects for a specific isolate."
        },
        {
          "name": "NewNativeModule",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled_features",
            "WasmDetectedFeatures detected_features",
            "CompileTimeImports compile_imports",
            "std::shared_ptr<const WasmModule> module",
            "size_t code_size_estimate"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Creates a new NativeModule."
        },
        {
          "name": "MaybeGetNativeModule",
          "parameters": [
            "ModuleOrigin origin",
            "base::Vector<const uint8_t> wire_bytes",
            "const CompileTimeImports& compile_imports",
            "Isolate* isolate"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Attempts to retrieve a cached NativeModule or acquire ownership for its creation."
        },
        {
          "name": "UpdateNativeModuleCache",
          "parameters": [
            "bool has_error",
            "std::shared_ptr<NativeModule> native_module",
            "Isolate* isolate"
          ],
          "return_type": "std::shared_ptr<NativeModule>",
          "logic": "Updates the NativeModule cache with a new NativeModule or handles errors during creation."
        },
        {
          "name": "GetStreamingCompilationOwnership",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "bool",
          "logic": "Claims ownership for streaming compilation based on a prefix hash."
        },
        {
          "name": "StreamingCompilationFailed",
          "parameters": [
            "size_t prefix_hash",
            "const CompileTimeImports& compile_imports"
          ],
          "return_type": "void",
          "logic": "Handles the failure of a streaming compilation by releasing ownership."
        },
        {
          "name": "FreeNativeModule",
          "parameters": [
            "NativeModule*"
          ],
          "return_type": "void",
          "logic": "Frees a native module."
        },
        {
          "name": "ClearWeakScriptHandle",
          "parameters": [
            "Isolate* isolate",
            "std::unique_ptr<Address*> location"
          ],
          "return_type": "void",
          "logic": "Clears a weak script handle."
        },
        {
          "name": "SampleTopTierCodeSizeInAllIsolates",
          "parameters": [
            "const std::shared_ptr<NativeModule>&"
          ],
          "return_type": "void",
          "logic": "Samples the code size of a native module in all isolates."
        },
        {
          "name": "ReportLiveCodeForGC",
          "parameters": [
            "Isolate*",
            "std::unordered_set<WasmCode*>& live_code"
          ],
          "return_type": "void",
          "logic": "Reports live code to the garbage collector."
        },
        {
          "name": "ReportLiveCodeFromStackForGC",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "void",
          "logic": "Reports live code from the stack to the garbage collector."
        },
        {
          "name": "AddPotentiallyDeadCode",
          "parameters": [
            "WasmCode*"
          ],
          "return_type": "void",
          "logic": "Adds code to the set of potentially dead code."
        },
        {
          "name": "TriggerCodeGCForTesting",
          "parameters": [],
          "return_type": "void",
          "logic": "Triggers a code GC cycle for testing."
        },
        {
          "name": "FreeDeadCode",
          "parameters": [
            "const DeadCodeMap&",
            "std::vector<WasmCode*>&"
          ],
          "return_type": "void",
          "logic": "Frees dead code."
        },
        {
          "name": "FreeDeadCodeLocked",
          "parameters": [
            "const DeadCodeMap&",
            "std::vector<WasmCode*>&"
          ],
          "return_type": "void",
          "logic": "Frees dead code, holding the lock."
        },
        {
          "name": "GetOrCreateScript",
          "parameters": [
            "Isolate*",
            "const std::shared_ptr<NativeModule>&",
            "base::Vector<const char> source_url"
          ],
          "return_type": "DirectHandle<Script>",
          "logic": "Retrieves or creates a Script object for a NativeModule."
        },
        {
          "name": "GetBarrierForBackgroundCompile",
          "parameters": [],
          "return_type": "std::shared_ptr<OperationsBarrier>",
          "logic": "Returns a barrier allowing background compile operations."
        },
        {
          "name": "type_canonicalizer",
          "parameters": [],
          "return_type": "TypeCanonicalizer*",
          "logic": "Returns the type canonicalizer."
        },
        {
          "name": "DecodeAllNameSections",
          "parameters": [
            "CanonicalTypeNamesProvider* target"
          ],
          "return_type": "void",
          "logic": "Decodes all name sections of a WebAssembly module and adds the name information to a target."
        },
        {
          "name": "call_descriptors",
          "parameters": [],
          "return_type": "compiler::WasmCallDescriptors*",
          "logic": "Returns the WebAssembly call descriptors."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the engine."
        },
        {
          "name": "PrintCurrentMemoryConsumptionEstimate",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the current memory consumption estimate to standard output."
        },
        {
          "name": "GetDeoptsExecutedCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the count of deoptimizations executed."
        },
        {
          "name": "IncrementDeoptsExecutedCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Increments and returns the count of deoptimizations executed."
        },
        {
          "name": "InitializeOncePerProcess",
          "parameters": [],
          "return_type": "static void",
          "logic": "Initializes static data structures once per process."
        },
        {
          "name": "GlobalTearDown",
          "parameters": [],
          "return_type": "static void",
          "logic": "Releases global resources on process exit."
        },
        {
          "name": "NewOrphanedGlobalHandle",
          "parameters": [
            "WasmOrphanedGlobalHandle** pointer"
          ],
          "return_type": "static WasmOrphanedGlobalHandle*",
          "logic": "Creates a new orphaned global handle."
        },
        {
          "name": "FreeAllOrphanedGlobalHandles",
          "parameters": [
            "WasmOrphanedGlobalHandle* start"
          ],
          "return_type": "static void",
          "logic": "Frees all orphaned global handles."
        },
        {
          "name": "NativeModuleCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of NativeModules"
        },
        {
          "name": "GetNondeterminismAddr",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the static had_nondeterminism_ flag."
        },
        {
          "name": "had_nondeterminism",
          "parameters": [],
          "return_type": "static bool",
          "logic": "Returns true if nondeterminism was detected during previous execution."
        },
        {
          "name": "set_had_nondeterminism",
          "parameters": [],
          "return_type": "static void",
          "logic": "Sets the had_nondeterminism_ flag."
        },
        {
          "name": "clear_nondeterminism",
          "parameters": [],
          "return_type": "static bool",
          "logic": "Clears the had_nondeterminism_ flag and returns whether nondeterminism was detected before clearing."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetWasmEngine",
      "parameters": [],
      "return_type": "WasmEngine*",
      "logic": "Returns a pointer to the global WasmEngine instance."
    },
    {
      "name": "GetWasmCodeManager",
      "parameters": [],
      "return_type": "WasmCodeManager*",
      "logic": "Returns a pointer to the global WasmCodeManager instance."
    },
    {
      "name": "GetWasmImportWrapperCache",
      "parameters": [],
      "return_type": "WasmImportWrapperCache*",
      "logic": "Returns a pointer to the global WasmImportWrapperCache instance."
    },
    {
      "name": "GetCanonicalTypeNamesProvider",
      "parameters": [],
      "return_type": "CanonicalTypeNamesProvider*",
      "logic": "Returns a pointer to the CanonicalTypeNamesProvider instance."
    }
  ]
}