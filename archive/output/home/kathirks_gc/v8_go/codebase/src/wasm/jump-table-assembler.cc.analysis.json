{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/jump-table-assembler.cc",
  "imports": [
    "src/wasm/jump-table-assembler.h",
    "src/base/sanitizer/ubsan.h",
    "src/codegen/macro-assembler-inl.h"
  ],
  "classes": [
    {
      "name": "JumpTableAssembler",
      "properties": [
        "jit_allocation_",
        "pc_"
      ],
      "methods": [
        {
          "name": "GenerateLazyCompileTable",
          "parameters": [
            "Address base",
            "uint32_t num_slots",
            "uint32_t num_imported_functions",
            "Address wasm_compile_lazy_target"
          ],
          "return_type": "void",
          "logic": "Generates a jump table that points to a lazy compilation target. It allocates memory for the jump table using ThreadIsolation::LookupJitAllocation, and then emits jump slots to the lazy compilation target for each slot in the table. After emitting the jumps, it flushes the instruction cache."
        },
        {
          "name": "InitializeJumpsToLazyCompileTable",
          "parameters": [
            "Address base",
            "uint32_t num_slots",
            "Address lazy_compile_table_start"
          ],
          "return_type": "void",
          "logic": "Initializes the jump table to point to the lazy compilation table. It calculates the size of the jump table based on the number of slots, allocates memory using ThreadIsolation::LookupJitAllocation, and then emits jump slots to the appropriate entry in the lazy compile table for each slot in the jump table. It also flushes the instruction cache after initialization."
        },
        {
          "name": "emit",
          "parameters": [
            "T value"
          ],
          "return_type": "void",
          "logic": "Writes a value of type T to the current program counter (pc_) location in the allocated memory and increments the pc_ by the size of T. This version does not guarantee atomicity."
        },
        {
          "name": "emit",
          "parameters": [
            "T value",
            "RelaxedStoreTag"
          ],
          "return_type": "void",
          "logic": "Writes a value of type T to the current program counter (pc_) location in the allocated memory, increments the pc_ by the size of T, and uses a relaxed memory order store. This version tries to ensure that the writes will still be atomic since they don't cross a qword boundary."
        },
        {
          "name": "EmitLazyCompileJumpSlot",
          "parameters": [
            "uint32_t func_index",
            "Address lazy_compile_target"
          ],
          "return_type": "void",
          "logic": "Emits a jump slot that pushes the function index and then jumps to the lazy compilation target. The exact instructions emitted are architecture-specific.  For x64, it pushes the function index onto the stack and then performs a near jump to the lazy compile target.  For other architectures, the implementation may vary."
        },
        {
          "name": "EmitJumpSlot",
          "parameters": [
            "Address target"
          ],
          "return_type": "bool",
          "logic": "Emits a near jump to the specified target address. It calculates the displacement between the current pc_ and the target and emits the jump instruction. The implementation is architecture-specific. On architectures with control-flow integrity (CFI) enabled, it includes CFI markers. Returns false if the target is too far for a near jump."
        },
        {
          "name": "EmitFarJumpSlot",
          "parameters": [
            "Address target"
          ],
          "return_type": "void",
          "logic": "Emits a far jump to the specified target address. This involves writing a jump instruction that loads the target address from memory and then jumps to it. The implementation is architecture-specific."
        },
        {
          "name": "PatchFarJumpSlot",
          "parameters": [
            "WritableJitAllocation& jit_allocation",
            "Address slot",
            "Address target"
          ],
          "return_type": "void",
          "logic": "Patches an existing far jump slot to point to a new target address. It directly writes the target address into the memory location of the far jump slot. The write is done using kRelaxedStore for atomicity and cache coherence."
        },
        {
          "name": "SkipUntil",
          "parameters": [
            "int offset"
          ],
          "return_type": "void",
          "logic": "Skips bytes until the pc_ offset reaches the provided offset. The platform implementations check that skipping over the bytes is allowed."
        }
      ]
    }
  ],
  "functions": []
}