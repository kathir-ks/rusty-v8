{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/function-compiler.h",
  "imports": [
    "<memory>",
    "src/codegen/assembler.h",
    "src/codegen/code-desc.h",
    "src/codegen/compiler.h",
    "src/wasm/compilation-environment.h",
    "src/wasm/function-body-decoder.h",
    "src/wasm/wasm-deopt-data.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-tier.h"
  ],
  "classes": [
    {
      "name": "AssumptionsJournal",
      "properties": [
        "imports_"
      ],
      "methods": [
        {
          "name": "AssumptionsJournal",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor, initializes an empty journal."
        },
        {
          "name": "RecordAssumption",
          "parameters": [
            "uint32_t func_index",
            "WellKnownImport status"
          ],
          "return_type": "void",
          "logic": "Records an assumption made during compilation about the status of a well-known import function. Stores the function index and its status."
        },
        {
          "name": "import_statuses",
          "parameters": [],
          "return_type": "const std::vector<std::pair<uint32_t, WellKnownImport>>&",
          "logic": "Returns a reference to the vector of import statuses recorded in the journal."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the journal is empty (i.e., no assumptions have been recorded)."
        }
      ]
    },
    {
      "name": "WasmCompilationResult",
      "properties": [
        "code_desc",
        "instr_buffer",
        "frame_slot_count",
        "ool_spill_count",
        "tagged_parameter_slots",
        "source_positions",
        "inlining_positions",
        "protected_instructions_data",
        "deopt_data",
        "assumptions",
        "liftoff_frame_descriptions",
        "func_index",
        "result_tier",
        "kind",
        "for_debugging",
        "frame_has_feedback_slot"
      ],
      "methods": [
        {
          "name": "succeeded",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compilation succeeded by examining code_desc.buffer."
        },
        {
          "name": "failed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compilation failed (negation of succeeded())."
        },
        {
          "name": "operator bool",
          "parameters": [],
          "return_type": "bool",
          "logic": "Implicit conversion to bool; returns true if compilation succeeded."
        }
      ]
    },
    {
      "name": "WasmCompilationUnit",
      "properties": [
        "func_index_",
        "tier_",
        "for_debugging_"
      ],
      "methods": [
        {
          "name": "WasmCompilationUnit",
          "parameters": [
            "int index",
            "ExecutionTier tier",
            "ForDebugging for_debugging"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the compilation unit with the function index, tier, and debugging flags."
        },
        {
          "name": "ExecuteCompilation",
          "parameters": [
            "CompilationEnv*",
            "const WireBytesStorage*",
            "Counters*",
            "WasmDetectedFeatures*"
          ],
          "return_type": "WasmCompilationResult",
          "logic": "Executes the compilation of the Wasm function. Returns the compilation result."
        },
        {
          "name": "tier",
          "parameters": [],
          "return_type": "ExecutionTier",
          "logic": "Returns the execution tier for this compilation unit."
        },
        {
          "name": "for_debugging",
          "parameters": [],
          "return_type": "ForDebugging",
          "logic": "Returns the debugging flag for this compilation unit."
        },
        {
          "name": "func_index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the function index for this compilation unit."
        },
        {
          "name": "CompileWasmFunction",
          "parameters": [
            "Counters*",
            "NativeModule*",
            "WasmDetectedFeatures*",
            "const WasmFunction*",
            "ExecutionTier"
          ],
          "return_type": "void",
          "logic": "Static method to compile a Wasm function using a specific execution tier."
        }
      ]
    },
    {
      "name": "JSToWasmWrapperCompilationUnit",
      "properties": [
        "isolate_",
        "sig_",
        "sig_index_",
        "job_"
      ],
      "methods": [
        {
          "name": "JSToWasmWrapperCompilationUnit",
          "parameters": [
            "Isolate* isolate",
            "const CanonicalSig* sig",
            "CanonicalTypeIndex sig_index"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the compilation unit for a JS-to-Wasm wrapper with the isolate, signature, and signature index."
        },
        {
          "name": "~JSToWasmWrapperCompilationUnit",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with this compilation unit."
        },
        {
          "name": "Execute",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the compilation of the JS-to-Wasm wrapper."
        },
        {
          "name": "Finalize",
          "parameters": [],
          "return_type": "DirectHandle<Code>",
          "logic": "Finalizes the compilation and returns a handle to the generated code."
        },
        {
          "name": "sig",
          "parameters": [],
          "return_type": "const CanonicalSig*",
          "logic": "Returns the canonical signature for this wrapper."
        },
        {
          "name": "sig_index",
          "parameters": [],
          "return_type": "CanonicalTypeIndex",
          "logic": "Returns the canonical signature index."
        },
        {
          "name": "CompileJSToWasmWrapper",
          "parameters": [
            "Isolate* isolate",
            "const CanonicalSig* sig",
            "CanonicalTypeIndex sig_index"
          ],
          "return_type": "DirectHandle<Code>",
          "logic": "Static method to compile a JS-to-Wasm wrapper synchronously.  Returns a handle to the compiled code."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CanUseGenericJsToWasmWrapper",
      "parameters": [
        "const WasmModule* module",
        "const CanonicalSig* sig"
      ],
      "return_type": "bool",
      "logic": "Determines if a generic JS-to-Wasm wrapper can be used for a given module and signature. Checks for asm.js and signature compatibility, and the wasm_generic_wrapper flag."
    }
  ]
}