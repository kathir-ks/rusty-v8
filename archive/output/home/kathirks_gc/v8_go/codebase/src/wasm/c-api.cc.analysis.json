{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/c-api.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/c-api.cc\",\n  \"imports\": [\n    \"<cstring>\",\n    \"<iomanip>\",\n    \"<iostream>\",\n    \"include/libplatform/libplatform.h\",\n    \"include/v8-initialization.h\",\n    \"src/api/api-inl.h\",\n    \"src/builtins/builtins.h\",\n    \"src/compiler/wasm-compiler.h\",\n    \"src/flags/flags.h\",\n    \"src/objects/call-site-info-inl.h\",\n    \"src/objects/js-collection-inl.h\",\n    \"src/objects/managed-inl.h\",\n    \"src/wasm/leb-helper.h\",\n    \"src/wasm/module-instantiate.h\",\n    \"src/wasm/signature-hashing.h\",\n    \"src/wasm/wasm-arguments.h\",\n    \"src/wasm/wasm-constants.h\",\n    \"src/wasm/wasm-engine.h\",\n    \"src/wasm/wasm-objects.h\",\n    \"src/wasm/wasm-result.h\",\n    \"src/wasm/wasm-serialization.h\",\n    \"third_party/wasm-api/wasm.h\",\n    \"third_party/vtune/v8-vtune.h\",\n    \"src/wasm/c-api.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Config\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the ConfigImpl object associated with the Config object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [],\n          \"return_type\": \"own<Config>\",\n          \"logic\": \"Creates and returns a new Config object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Counter\",\n      \"properties\": [\n        \"kMaxNameSize\",\n        \"count_\",\n        \"sample_total_\",\n        \"is_histogram_\",\n        \"name_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Bind\",\n          \"parameters\": [\n            \"const char* name\",\n            \"bool is_histogram\"\n          ],\n          \"return_type\": \"int32_t*\",\n          \"logic\": \"Binds a counter to a name and specifies whether it is a histogram.  Returns a pointer to the counter's value.\"\n        },\n        {\n          \"name\": \"ptr\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t*\",\n          \"logic\": \"Returns a pointer to the counter's value.\"\n        },\n        {\n          \"name\": \"count\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the current count of the counter.\"\n        },\n        {\n          \"name\": \"sample_total\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the total of all samples added to the counter (relevant for histograms).\"\n        },\n        {\n          \"name\": \"is_histogram\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the counter is a histogram.\"\n        },\n        {\n          \"name\": \"AddSample\",\n          \"parameters\": [\n            \"int32_t sample\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a sample to the counter, updating the count and sample total (for histograms).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CounterCollection\",\n      \"properties\": [\n        \"kMaxCounters\",\n        \"counters_in_use_\",\n        \"counters_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetNextCounter\",\n          \"parameters\": [],\n          \"return_type\": \"Counter*\",\n          \"logic\": \"Retrieves the next available counter from the collection. Returns nullptr if all counters are in use.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Engine\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the EngineImpl object associated with the Engine object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"own<Config>&& config\"\n          ],\n          \"return_type\": \"own<Engine>\",\n          \"logic\": \"Creates and returns a new Engine object, initialized with the provided configuration.  Also initializes the V8 platform and V8 itself.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Store\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the StoreImpl object associated with the Store object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Engine*\"\n          ],\n          \"return_type\": \"own<Store>\",\n          \"logic\": \"Creates and returns a new Store object, associated with the given engine. Creates an isolate and context.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ValType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destroys ValType (empty implementation as the actual ValType instances are pre-allocated).\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"ValKind k\"\n          ],\n          \"return_type\": \"own<ValType>\",\n          \"logic\": \"Returns a pre-allocated ValType instance for the specified ValKind.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<ValType>\",\n          \"logic\": \"Creates a copy of the ValType. As the ValType objects are pre-allocated it just returns the same.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"ValKind\",\n          \"logic\": \"Returns the ValKind of the ValType.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExternType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the ExternTypeImpl object associated with the ExternType object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<ExternType>\",\n          \"logic\": \"Creates a copy of the ExternType based on its kind.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"ExternKind\",\n          \"logic\": \"Returns the ExternKind of the ExternType.\"\n        },\n        {\n          \"name\": \"func\",\n          \"parameters\": [],\n          \"return_type\": \"Func*\",\n          \"logic\": \"Returns the Func part of the ExternType if the ExternType is of kind FUNC, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"func\",\n          \"parameters\": [],\n          \"return_type\": \"const Func*\",\n          \"logic\": \"Returns the const Func part of the ExternType if the ExternType is of kind FUNC, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"global\",\n          \"parameters\": [],\n          \"return_type\": \"Global*\",\n          \"logic\": \"Returns the Global part of the ExternType if the ExternType is of kind GLOBAL, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"global\",\n          \"parameters\": [],\n          \"return_type\": \"const Global*\",\n          \"logic\": \"Returns the const Global part of the ExternType if the ExternType is of kind GLOBAL, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"table\",\n          \"parameters\": [],\n          \"return_type\": \"Table*\",\n          \"logic\": \"Returns the Table part of the ExternType if the ExternType is of kind TABLE, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"table\",\n          \"parameters\": [],\n          \"return_type\": \"const Table*\",\n          \"logic\": \"Returns the const Table part of the ExternType if the ExternType is of kind TABLE, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"memory\",\n          \"parameters\": [],\n          \"return_type\": \"Memory*\",\n          \"logic\": \"Returns the Memory part of the ExternType if the ExternType is of kind MEMORY, otherwise nullptr.\"\n        },\n        {\n          \"name\": \"memory\",\n          \"parameters\": [],\n          \"return_type\": \"const Memory*\",\n          \"logic\": \"Returns the const Memory part of the ExternType if the ExternType is of kind MEMORY, otherwise nullptr.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FuncType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the FuncTypeImpl object associated with the FuncType object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"ownvec<ValType>&& params\",\n            \"ownvec<ValType>&& results\"\n          ],\n          \"return_type\": \"own<FuncType>\",\n          \"logic\": \"Creates and returns a new FuncType object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<FuncType>\",\n          \"logic\": \"Creates a copy of the FuncType object.\"\n        },\n        {\n          \"name\": \"params\",\n          \"parameters\": [],\n          \"return_type\": \"const ownvec<ValType>&\",\n          \"logic\": \"Returns the parameters of the FuncType.\"\n        },\n        {\n          \"name\": \"results\",\n          \"parameters\": [],\n          \"return_type\": \"const ownvec<ValType>&\",\n          \"logic\": \"Returns the results of the FuncType.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GlobalType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the GlobalTypeImpl object associated with the GlobalType object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"own<ValType>&& content\",\n            \"Mutability mutability\"\n          ],\n          \"return_type\": \"own<GlobalType>\",\n          \"logic\": \"Creates a new GlobalType.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<GlobalType>\",\n          \"logic\": \"Creates a copy of GlobalType.\"\n        },\n        {\n          \"name\": \"content\",\n          \"parameters\": [],\n          \"return_type\": \"const ValType*\",\n          \"logic\": \"Gets the content ValType.\"\n        },\n        {\n          \"name\": \"mutability\",\n          \"parameters\": [],\n          \"return_type\": \"Mutability\",\n          \"logic\": \"Gets the mutability of the global.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TableType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the TableTypeImpl object associated with the TableType object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"own<ValType>&& element\",\n            \"Limits limits\"\n          ],\n          \"return_type\": \"own<TableType>\",\n          \"logic\": \"Creates a new TableType.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<TableType>\",\n          \"logic\": \"Creates a copy of TableType.\"\n        },\n        {\n          \"name\": \"element\",\n          \"parameters\": [],\n          \"return_type\": \"const ValType*\",\n          \"logic\": \"Gets the element ValType.\"\n        },\n        {\n          \"name\": \"limits\",\n          \"parameters\": [],\n          \"return_type\": \"const Limits&\",\n          \"logic\": \"Gets the limits.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MemoryType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Limits limits\"\n          ],\n          \"return_type\": \"own<MemoryType>\",\n          \"logic\": \"Creates a new MemoryType object.\"\n        },\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates MemoryType (implementation class MemoryTypeImpl) object associated with MemoryType object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<MemoryType>\",\n          \"logic\": \"Creates a copy of the MemoryType.\"\n        },\n        {\n          \"name\": \"limits\",\n          \"parameters\": [],\n          \"return_type\": \"const Limits&\",\n          \"logic\": \"Gets the limits.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ImportType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the ImportTypeImpl object associated with the ImportType object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Name&& module\",\n            \"Name&& name\",\n            \"own<ExternType>&& type\"\n          ],\n          \"return_type\": \"own<ImportType>\",\n          \"logic\": \"Creates a new ImportType.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<ImportType>\",\n          \"logic\": \"Creates a copy of the ImportType.\"\n        },\n        {\n          \"name\": \"module\",\n          \"parameters\": [],\n          \"return_type\": \"const Name&\",\n          \"logic\": \"Gets the module Name.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"const Name&\",\n          \"logic\": \"Gets the name Name.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"const ExternType*\",\n          \"logic\": \"Gets the ExternType.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExportType\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the ExportTypeImpl object associated with the ExportType object.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Name&& name\",\n            \"own<ExternType>&& type\"\n          ],\n          \"return_type\": \"own<ExportType>\",\n          \"logic\": \"Creates a new ExportType.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<ExportType>\",\n          \"logic\": \"Creates a copy of the ExportType.\"\n        },\n        {\n          \"name\": \"name\",\n          \"parameters\": [],\n          \"return_type\": \"const Name&\",\n          \"logic\": \"Gets the name.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"const ExternType*\",\n          \"logic\": \"Gets the type.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Ref\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the RefImpl object associated with the Ref object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Ref>\",\n          \"logic\": \"Copies a Ref.\"\n        },\n        {\n          \"name\": \"same\",\n          \"parameters\": [\n            \"const Ref* that\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Tests if two Ref objects are the same.\"\n        },\n        {\n          \"name\": \"get_host_info\",\n          \"parameters\": [],\n          \"return_type\": \"void*\",\n          \"logic\": \"Retrieves the host info associated with Ref\"\n        },\n        {\n          \"name\": \"set_host_info\",\n          \"parameters\": [\n            \"void* info\",\n            \"void (*finalizer)(void*)\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the host info\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Frame\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Frame (implementation class FrameImpl) object associated with Frame object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Frame>\",\n          \"logic\": \"Copies a Frame.\"\n        },\n        {\n          \"name\": \"instance\",\n          \"parameters\": [],\n          \"return_type\": \"Instance*\",\n          \"logic\": \"Gets the Instance.\"\n        },\n        {\n          \"name\": \"func_index\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Gets the function index\"\n        },\n        {\n          \"name\": \"func_offset\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Gets the function offset\"\n        },\n        {\n          \"name\": \"module_offset\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Gets the module offset\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Trap\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Trap (implementation class TrapImpl) object associated with Trap object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Trap>\",\n          \"logic\": \"Copies a Trap.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const Message& message\"\n          ],\n          \"return_type\": \"own<Trap>\",\n          \"logic\": \"Creates Trap.\"\n        },\n        {\n          \"name\": \"message\",\n          \"parameters\": [],\n          \"return_type\": \"Message\",\n          \"logic\": \"Gets the Trap Message.\"\n        },\n        {\n          \"name\": \"origin\",\n          \"parameters\": [],\n          \"return_type\": \"own<Frame>\",\n          \"logic\": \"Gets the Trap Frame origin.\"\n        },\n        {\n          \"name\": \"trace\",\n          \"parameters\": [],\n          \"return_type\": \"ownvec<Frame>\",\n          \"logic\": \"Gets the Trap Frame trace.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Foreign\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Foreign (implementation class ForeignImpl) object associated with Foreign object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Foreign>\",\n          \"logic\": \"Copies a Foreign.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store_abs\"\n          ],\n          \"return_type\": \"own<Foreign>\",\n          \"logic\": \"Creates a new Foreign object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Module\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Module (implementation class ModuleImpl) object associated with Module object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Module>\",\n          \"logic\": \"Copies a Module.\"\n        },\n        {\n          \"name\": \"validate\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const vec<byte_t>& binary\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Validates if binary is a valid wasm module.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const vec<byte_t>& binary\"\n          ],\n          \"return_type\": \"own<Module>\",\n          \"logic\": \"Creates a Module.\"\n        },\n        {\n          \"name\": \"imports\",\n          \"parameters\": [],\n          \"return_type\": \"ownvec<ImportType>\",\n          \"logic\": \"Get vector of imports for the Module.\"\n        },\n        {\n          \"name\": \"exports\",\n          \"parameters\": [],\n          \"return_type\": \"ownvec<ExportType>\",\n          \"logic\": \"Get vector of exports for the Module.\"\n        },\n        {\n          \"name\": \"serialize\",\n          \"parameters\": [],\n          \"return_type\": \"vec<byte_t>\",\n          \"logic\": \"Serializes the module into a byte vector.\"\n        },\n        {\n          \"name\": \"deserialize\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const vec<byte_t>& serialized\"\n          ],\n          \"return_type\": \"own<Module>\",\n          \"logic\": \"Deserialize the module from a byte vector.\"\n        },\n        {\n          \"name\": \"share\",\n          \"parameters\": [],\n          \"return_type\": \"own<Shared<Module>>\",\n          \"logic\": \"Creates a Shared Module via copying.\"\n        },\n        {\n          \"name\": \"obtain\",\n          \"parameters\": [\n            \"Store* store\",\n            \"const Shared<Module>* shared\"\n          ],\n          \"return_type\": \"own<Module>\",\n          \"logic\": \"Obtains a Module instance from the Shared module.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Shared<Module>\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates the Shared Module object via vec<byte_t> destroy.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Extern\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Extern (implementation class ExternImpl) object associated with Extern object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Extern>\",\n          \"logic\": \"Copies an Extern.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"ExternKind\",\n          \"logic\": \"Determines the kind of Extern.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"own<ExternType>\",\n          \"logic\": \"Gets the ExternType of the extern.\"\n        },\n        {\n          \"name\": \"func\",\n          \"parameters\": [],\n          \"return_type\": \"Func*\",\n          \"logic\": \"Returns the Func pointer if this is a function extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"global\",\n          \"parameters\": [],\n          \"return_type\": \"Global*\",\n          \"logic\": \"Returns the Global pointer if this is a global extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"table\",\n          \"parameters\": [],\n          \"return_type\": \"Table*\",\n          \"logic\": \"Returns the Table pointer if this is a table extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"memory\",\n          \"parameters\": [],\n          \"return_type\": \"Memory*\",\n          \"logic\": \"Returns the Memory pointer if this is a memory extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"func\",\n          \"parameters\": [],\n          \"return_type\": \"const Func*\",\n          \"logic\": \"Returns the const Func pointer if this is a function extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"global\",\n          \"parameters\": [],\n          \"return_type\": \"const Global*\",\n          \"logic\": \"Returns the const Global pointer if this is a global extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"table\",\n          \"parameters\": [],\n          \"return_type\": \"const Table*\",\n          \"logic\": \"Returns the const Table pointer if this is a table extern; otherwise, returns a null pointer.\"\n        },\n        {\n          \"name\": \"memory\",\n          \"parameters\": [],\n          \"return_type\": \"const Memory*\",\n          \"logic\": \"Returns the const Memory pointer if this is a memory extern; otherwise, returns a null pointer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Func\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Func (implementation class FuncImpl) object associated with Func object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Func>\",\n          \"logic\": \"Copies a Func.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store\",\n            \"const FuncType* type\",\n            \"Func::callback callback\"\n          ],\n          \"return_type\": \"own<Func>\",\n          \"logic\": \"Creates a new Func from the function type and the provided callback.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store\",\n            \"const FuncType* type\",\n            \"callback_with_env callback\",\n            \"void* env\",\n            \"void (*finalizer)(void*)\"\n          ],\n          \"return_type\": \"own<Func>\",\n          \"logic\": \"Creates a new Func from the function type, the provided callback with environment and the finalizer.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"own<FuncType>\",\n          \"logic\": \"Returns the FuncType of the function.\"\n        },\n        {\n          \"name\": \"param_arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the param arity from the signature.\"\n        },\n        {\n          \"name\": \"result_arity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the result arity from the signature.\"\n        },\n        {\n          \"name\": \"call\",\n          \"parameters\": [\n            \"const vec<Val>& args\",\n            \"vec<Val>& results\"\n          ],\n          \"return_type\": \"own<Trap>\",\n          \"logic\": \"Calls a Func and returns trap if exists.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Global\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Global (implementation class GlobalImpl) object associated with Global object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Global>\",\n          \"logic\": \"Copies a Global.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const GlobalType* type\",\n            \"const Val& val\"\n          ],\n          \"return_type\": \"own<Global>\",\n          \"logic\": \"Creates a new Global object.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"own<GlobalType>\",\n          \"logic\": \"Returns the GlobalType of the global.\"\n        },\n        {\n          \"name\": \"get\",\n          \"parameters\": [],\n          \"return_type\": \"Val\",\n          \"logic\": \"Gets the value of the global.\"\n        },\n        {\n          \"name\": \"set\",\n          \"parameters\": [\n            \"const Val& val\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the value of the global.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Table\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Table (implementation class TableImpl) object associated with Table object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Table>\",\n          \"logic\": \"Copies a Table.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const TableType* type\",\n            \"const Ref* ref\"\n          ],\n          \"return_type\": \"own<Table>\",\n          \"logic\": \"Creates a new Table.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"own<TableType>\",\n          \"logic\": \"Gets the table type.\"\n        },\n        {\n          \"name\": \"get\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"own<Ref>\",\n          \"logic\": \"Gets element at index.\"\n        },\n        {\n          \"name\": \"set\",\n          \"parameters\": [\n            \"size_t index\",\n            \"const Ref* ref\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Sets element at index.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Return the size of table.\"\n        },\n        {\n          \"name\": \"grow\",\n          \"parameters\": [\n            \"size_t delta\",\n            \"const Ref* ref\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Grow table.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Memory\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Memory (implementation class MemoryImpl) object associated with Memory object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Memory>\",\n          \"logic\": \"Copies a Memory.\"\n        },\n        {\n          \"name\": \"make\",\n          \"parameters\": [\n            \"Store* store_abs\",\n            \"const MemoryType* type\"\n          ],\n          \"return_type\": \"own<Memory>\",\n          \"logic\": \"Creates a new Memory.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"own<MemoryType>\",\n          \"logic\": \"Gets the memory type.\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"byte_t*\",\n          \"logic\": \"Gets a pointer to the start of the memory's data.\"\n        },\n        {\n          \"name\": \"data_size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the data size of the backing store.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"pages_t\",\n          \"logic\": \"Gets the current size (in pages) of the memory.\"\n        },\n        {\n          \"name\": \"grow\",\n          \"parameters\": [\n            \"pages_t delta\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Grows the memory by the given delta (in pages).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Instance\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"destroy\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deallocates Instance (implementation class InstanceImpl) object associated with Instance object.\"\n        },\n        {\n          \"name\": \"copy\",\n          \"parameters\": [],\n          \"return_type\": \"own<Instance>\",\n          \"logic\": \"Copies an Instance.\"\n        },\n        {\n          \"name\": \"make\","
}