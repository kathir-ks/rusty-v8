{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-code-pointer-table.h",
  "imports": [
    "include/v8-internal.h",
    "src/common/segmented-table.h"
  ],
  "classes": [
    {
      "name": "WasmCodePointerTableEntry",
      "properties": [
        "IsWriteProtected",
        "entrypoint_",
        "signature_hash_"
      ],
      "methods": [
        {
          "name": "MakeCodePointerEntry",
          "parameters": [
            "Address entrypoint",
            "uint64_t signature_hash"
          ],
          "return_type": "void",
          "logic": "Sets the entry to point to a given code entrypoint with its signature hash."
        },
        {
          "name": "UpdateCodePointerEntry",
          "parameters": [
            "Address entrypoint",
            "uint64_t signature_hash"
          ],
          "return_type": "void",
          "logic": "Updates the entry to point to a given code entrypoint with its signature hash."
        },
        {
          "name": "MakeFreelistEntry",
          "parameters": [
            "uint32_t next_entry_index"
          ],
          "return_type": "void",
          "logic": "Makes this entry a freelist entry, storing the index of the next free entry."
        },
        {
          "name": "GetEntrypoint",
          "parameters": [
            "uint64_t signature_hash"
          ],
          "return_type": "Address",
          "logic": "Loads and returns the code entrypoint address stored in this entry, checking the signature hash."
        },
        {
          "name": "GetEntrypointWithoutSignatureCheck",
          "parameters": [],
          "return_type": "Address",
          "logic": "Loads and returns the code entrypoint address stored in this entry, without checking the signature hash."
        },
        {
          "name": "GetNextFreelistEntryIndex",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Gets the index of the next entry on the freelist."
        }
      ]
    },
    {
      "name": "WasmCodePointerTable",
      "properties": [
        "kInvalidHandle",
        "kOffsetOfSignatureHash",
        "kMaxWasmCodePointers",
        "freelist_head_",
        "segment_allocation_mutex_",
        "native_function_map_mutex_",
        "native_function_map_"
      ],
      "methods": [
        {
          "name": "Initialize",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the table exactly once before use."
        },
        {
          "name": "TearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees any resources used by the table."
        },
        {
          "name": "GetEntrypoint",
          "parameters": [
            "WasmCodePointer index",
            "uint64_t signature_hash"
          ],
          "return_type": "Address",
          "logic": "Reads the entrypoint at a given index, checking the signature hash."
        },
        {
          "name": "GetEntrypointWithoutSignatureCheck",
          "parameters": [
            "WasmCodePointer index"
          ],
          "return_type": "Address",
          "logic": "Reads the entrypoint at a given index without signature check."
        },
        {
          "name": "UpdateEntrypoint",
          "parameters": [
            "WasmCodePointer index",
            "Address value",
            "uint64_t signature_hash"
          ],
          "return_type": "void",
          "logic": "Sets the entrypoint of the entry referenced by the given index."
        },
        {
          "name": "SetEntrypointAndSignature",
          "parameters": [
            "WasmCodePointer index",
            "Address value",
            "uint64_t signature_hash"
          ],
          "return_type": "void",
          "logic": "Sets the entrypoint and signature hash of the entry referenced by the given index."
        },
        {
          "name": "SetEntrypointWithWriteScope",
          "parameters": [
            "WasmCodePointer index",
            "Address value",
            "uint64_t signature_hash",
            "WriteScope& write_scope"
          ],
          "return_type": "void",
          "logic": "Sets the entrypoint of the entry referenced by the given index, using a provided write scope for thread safety."
        },
        {
          "name": "AllocateAndInitializeEntry",
          "parameters": [
            "Address entrypoint",
            "uint64_t signature_hash"
          ],
          "return_type": "WasmCodePointer",
          "logic": "Allocates a new entry in the table and initializes it with the given entrypoint and signature hash."
        },
        {
          "name": "AllocateUninitializedEntry",
          "parameters": [],
          "return_type": "WasmCodePointer",
          "logic": "Allocates a new, uninitialized entry in the table."
        },
        {
          "name": "FreeEntry",
          "parameters": [
            "WasmCodePointer index"
          ],
          "return_type": "void",
          "logic": "Frees an entry, adding it to the free list."
        },
        {
          "name": "SweepSegments",
          "parameters": [
            "size_t threshold"
          ],
          "return_type": "void",
          "logic": "Iterates through the freelist to find and unmap empty segments."
        },
        {
          "name": "GetOrCreateHandleForNativeFunction",
          "parameters": [
            "Address addr"
          ],
          "return_type": "WasmCodePointer",
          "logic": "Adds an entry for a native function address, used by the C API. Returns an existing handle or creates a new one."
        },
        {
          "name": "EntrypointEqualTo",
          "parameters": [
            "WasmCodePointer index",
            "Address address"
          ],
          "return_type": "bool",
          "logic": "Compares the entrypoint address at a given index with a specified address."
        },
        {
          "name": "ReadFreelistHead",
          "parameters": [],
          "return_type": "FreelistHead",
          "logic": "Access the Freelist head, retrying if the retry marker is seen."
        },
        {
          "name": "AllocateEntryImpl",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Allocate an entry either from the freelist or creating a new segment."
        },
        {
          "name": "LinkFreelist",
          "parameters": [
            "FreelistHead new_freelist",
            "uint32_t last_element"
          ],
          "return_type": "FreelistHead",
          "logic": "Atomically link a freelist into the current freelist head."
        },
        {
          "name": "FreelistToVector",
          "parameters": [
            "FreelistHead freelist"
          ],
          "return_type": "std::vector<uint32_t>",
          "logic": "Helper function for converting a freelist to a vector."
        },
        {
          "name": "VectorToFreelist",
          "parameters": [
            "std::vector<uint32_t> entries"
          ],
          "return_type": "FreelistHead",
          "logic": "Helper function for converting a vector to a freelist."
        },
        {
          "name": "TryAllocateFromFreelist",
          "parameters": [
            "uint32_t* index"
          ],
          "return_type": "bool",
          "logic": "Try to allocate the first entry of the freelist using an atomic compare-and-swap."
        },
        {
          "name": "AllocateEntryFromFreelistNonAtomic",
          "parameters": [
            "FreelistHead* freelist_head"
          ],
          "return_type": "uint32_t",
          "logic": "Allocate an entry from the freelist (non-atomically, needs exclusive access)."
        },
        {
          "name": "FreeNativeFunctionHandles",
          "parameters": [],
          "return_type": "void",
          "logic": "Free all handles in the `native_function_map_`."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetProcessWideWasmCodePointerTable",
      "parameters": [],
      "return_type": "WasmCodePointerTable*",
      "logic": "Returns a pointer to the process-wide Wasm code pointer table."
    }
  ]
}