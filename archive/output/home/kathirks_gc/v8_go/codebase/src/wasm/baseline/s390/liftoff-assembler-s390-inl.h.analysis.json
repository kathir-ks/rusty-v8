{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/s390/liftoff-assembler-s390-inl.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/s390/liftoff-assembler-s390-inl.h\",\n  \"imports\": [\n    \"src/codegen/assembler.h\",\n    \"src/codegen/interface-descriptors-inl.h\",\n    \"src/heap/mutable-page-metadata.h\",\n    \"src/wasm/baseline/liftoff-assembler.h\",\n    \"src/wasm/baseline/parallel-move-inl.h\",\n    \"src/wasm/object-access.h\",\n    \"src/wasm/simd-shuffle.h\",\n    \"src/wasm/wasm-linkage.h\",\n    \"src/wasm/wasm-objects.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"LiftoffAssembler\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrepareStackFrame\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Prepares the stack frame for a function call, adjusting the stack pointer and returning the offset of the prepared frame.\"\n        },\n        {\n          \"name\": \"CallFrameSetupStub\",\n          \"parameters\": [\n            \"int declared_function_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Calls a builtin to set up the stack frame when entering a Liftoff-compiled function.\"\n        },\n        {\n          \"name\": \"PrepareTailCall\",\n          \"parameters\": [\n            \"int num_callee_stack_params\",\n            \"int stack_param_delta\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for a tail call optimization by adjusting stack parameters and pointers.\"\n        },\n        {\n          \"name\": \"AlignFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"This function does nothing on s390x, exists for platform independent API.\"\n        },\n        {\n          \"name\": \"PatchPrepareStackFrame\",\n          \"parameters\": [\n            \"int offset\",\n            \"SafepointTableBuilder* safepoint_table_builder\",\n            \"bool feedback_vector_slot\",\n            \"size_t stack_param_slots\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Patches the stack frame preparation code, specifically handling large frame allocations and stack overflow checks.\"\n        },\n        {\n          \"name\": \"FinishCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"This function does nothing on s390x.\"\n        },\n        {\n          \"name\": \"AbortCompilation\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Aborts the current code generation process.\"\n        },\n        {\n          \"name\": \"StaticStackFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the static size of the stack frame.\"\n        },\n        {\n          \"name\": \"SlotSizeForType\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the stack slot size required for a given value kind.\"\n        },\n        {\n          \"name\": \"NeedsAlignment\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a value kind needs stack alignment.\"\n        },\n        {\n          \"name\": \"CheckTierUp\",\n          \"parameters\": [\n            \"int declared_func_index\",\n            \"int budget_used\",\n            \"Label* ool_label\",\n            \"const FreezeCacheState& frozen\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if a function should be tier-upgraded based on its execution budget.\"\n        },\n        {\n          \"name\": \"LoadOldFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"Register\",\n          \"logic\": \"Loads the old frame pointer, handling cases where growable stacks are enabled.\"\n        },\n        {\n          \"name\": \"CheckStackShrink\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the stack needs to be shrunk and calls the appropriate runtime function.\"\n        },\n        {\n          \"name\": \"LoadConstant\",\n          \"parameters\": [\n            \"LiftoffRegister reg\",\n            \"WasmValue value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a constant Wasm value into a register.\"\n        },\n        {\n          \"name\": \"LoadInstanceDataFromFrame\",\n          \"parameters\": [\n            \"Register dst\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the instance data pointer from the stack frame.\"\n        },\n        {\n          \"name\": \"LoadTrustedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int offset\",\n            \"IndirectPointerTag tag\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer from memory.\"\n        },\n        {\n          \"name\": \"LoadFromInstance\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register instance\",\n            \"int offset\",\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads data from a Wasm instance, handling different sizes.\"\n        },\n        {\n          \"name\": \"LoadTaggedPointerFromInstance\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register instance\",\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer from a Wasm instance.\"\n        },\n        {\n          \"name\": \"SpillInstanceData\",\n          \"parameters\": [\n            \"Register instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the instance data pointer to the stack frame.\"\n        },\n        {\n          \"name\": \"ResetOSRTarget\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the on-stack replacement (OSR) target. This function does nothing on s390x.\"\n        },\n        {\n          \"name\": \"LoadTaggedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"Register offset_reg\",\n            \"int32_t offset_imm\",\n            \"uint32_t* protected_load_pc\",\n            \"bool needs_shift\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer from memory, handling optional offset and shift.\"\n        },\n        {\n          \"name\": \"LoadProtectedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int32_t offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer from memory with protection against out-of-bounds access.\"\n        },\n        {\n          \"name\": \"LoadFullPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int32_t offset_imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a full 64-bit pointer from memory.\"\n        },\n        {\n          \"name\": \"StoreTaggedPointer\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"int32_t offset_imm\",\n            \"Register src\",\n            \"LiftoffRegList pinned\",\n            \"uint32_t* protected_store_pc\",\n            \"SkipWriteBarrier skip_write_barrier\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores a tagged pointer to memory, handling optional offset and shift, and write barriers.\"\n        },\n        {\n          \"name\": \"Load\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register src_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LoadType type\",\n            \"uint32_t* protected_load_pc\",\n            \"bool is_load_mem\",\n            \"bool i64_offset\",\n            \"bool needs_shift\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads data from memory, handling different types, offsets, and protection mechanisms.\"\n        },\n        {\n          \"name\": \"Store\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister src\",\n            \"StoreType type\",\n            \"LiftoffRegList pinned\",\n            \"uint32_t* protected_store_pc\",\n            \"bool is_store_mem\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores data to memory, handling different types and offsets.\"\n        },\n        {\n          \"name\": \"AtomicLoad\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register src_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LoadType type\",\n            \"LiftoffRegList pinned\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads data from memory using atomic operations.\"\n        },\n        {\n          \"name\": \"AtomicStore\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister src\",\n            \"StoreType type\",\n            \"LiftoffRegList pinned\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores data to memory using atomic operations.\"\n        },\n        {\n          \"name\": \"AtomicAdd\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically adds a value to memory.\"\n        },\n        {\n          \"name\": \"AtomicSub\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically subtracts a value from memory.\"\n        },\n        {\n          \"name\": \"AtomicAnd\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically performs a bitwise AND on memory.\"\n        },\n        {\n          \"name\": \"AtomicOr\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically performs a bitwise OR on memory.\"\n        },\n        {\n          \"name\": \"AtomicXor\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically performs a bitwise XOR on memory.\"\n        },\n        {\n          \"name\": \"AtomicExchange\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically exchanges a value in memory.\"\n        },\n        {\n          \"name\": \"AtomicCompareExchange\",\n          \"parameters\": [\n            \"Register dst_addr\",\n            \"Register offset_reg\",\n            \"uintptr_t offset_imm\",\n            \"LiftoffRegister expected\",\n            \"LiftoffRegister new_value\",\n            \"LiftoffRegister result\",\n            \"StoreType type\",\n            \"bool i64_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Atomically compares and exchanges a value in memory.\"\n        },\n        {\n          \"name\": \"AtomicFence\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Inserts an atomic fence (memory barrier).Bails out on s390x.\"\n        },\n        {\n          \"name\": \"LoadCallerFrameSlot\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"uint32_t caller_slot_idx\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a slot in the caller's frame.\"\n        },\n        {\n          \"name\": \"StoreCallerFrameSlot\",\n          \"parameters\": [\n            \"LiftoffRegister src\",\n            \"uint32_t caller_slot_idx\",\n            \"ValueKind kind\",\n            \"Register frame_pointer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores a value to a slot in the caller's frame.\"\n        },\n        {\n          \"name\": \"LoadReturnStackSlot\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"int offset\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a value from a slot on the return stack.\"\n        },\n        {\n          \"name\": \"MoveStackValue\",\n          \"parameters\": [\n            \"uint32_t dst_offset\",\n            \"uint32_t src_offset\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves a value from one stack offset to another.\"\n        },\n        {\n          \"name\": \"Move\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves the content of one GP register to another.\"\n        },\n        {\n          \"name\": \"Move\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Moves the content of one FP register to another.\"\n        },\n        {\n          \"name\": \"Spill\",\n          \"parameters\": [\n            \"int offset\",\n            \"LiftoffRegister reg\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills a register to the stack at a given offset.\"\n        },\n        {\n          \"name\": \"Spill\",\n          \"parameters\": [\n            \"int offset\",\n            \"WasmValue value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Spills a constant value to the stack at a given offset.\"\n        },\n        {\n          \"name\": \"Fill\",\n          \"parameters\": [\n            \"LiftoffRegister reg\",\n            \"int offset\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills a register from the stack at a given offset.\"\n        },\n        {\n          \"name\": \"FillI64Half\",\n          \"parameters\": [\n            \"Register\",\n            \"int offset\",\n            \"RegPairHalf\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"This function is unreachable.\"\n        },\n        {\n          \"name\": \"FillStackSlotsWithZero\",\n          \"parameters\": [\n            \"int start\",\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills a range of stack slots with zero.\"\n        },\n        {\n          \"name\": \"LoadSpillAddress\",\n          \"parameters\": [\n            \"Register dst\",\n            \"int offset\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the address of a stack spill slot into a register.\"\n        },\n        {\n          \"name\": \"emit_i32_popcnt\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code to count the number of set bits in a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i64_popcnt\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code to count the number of set bits in a 64-bit integer.\"\n        },\n        {\n          \"name\": \"emit_u32_to_uintptr\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to load u32 to uintptr.\"\n        },\n        {\n          \"name\": \"emit_i32_signextend_i8\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sign-extends an 8-bit integer to a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_signextend_i16\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sign-extends a 16-bit integer to a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i64_signextend_i8\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sign-extends an 8-bit integer to a 64-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i64_signextend_i16\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sign-extends a 16-bit integer to a 64-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i64_signextend_i32\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sign-extends a 32-bit integer to a 64-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_clz\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Counts the number of leading zeros in a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_ctz\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Counts the number of trailing zeros in a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i64_clz\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Counts the number of leading zeros in a 64-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i64_ctz\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Counts the number of trailing zeros in a 64-bit integer.\"\n        },\n        {\n          \"name\": \"emit_f32_ceil\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the ceiling of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_floor\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the floor of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_trunc\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the truncation of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_nearest_int\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the nearest integer of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_abs\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the absolute value of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_neg\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the negation of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_sqrt\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the square root of a 32-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_ceil\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the ceiling of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_floor\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the floor of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_trunc\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the truncation of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_nearest_int\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Computes the nearest integer of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_abs\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the absolute value of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_neg\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the negation of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f64_sqrt\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the square root of a 64-bit floating-point number.\"\n        },\n        {\n          \"name\": \"emit_f32_min\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the minimum of two 32-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f32_max\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the maximum of two 32-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f64_min\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the minimum of two 64-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f64_max\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the maximum of two 64-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f64_add\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to add two 64-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f64_sub\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to subtract two 64-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f64_mul\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to multiply two 64-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f64_div\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to divide two 64-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f32_add\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to add two 32-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f32_sub\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to subtract two 32-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f32_mul\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to multiply two 32-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_f32_div\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to divide two 32-bit floating-point numbers.\"\n        },\n        {\n          \"name\": \"emit_i32_shli\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a left shift of a 32-bit integer by an immediate value.\"\n        },\n        {\n          \"name\": \"emit_i32_sari\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a signed right shift of a 32-bit integer by an immediate value.\"\n        },\n        {\n          \"name\": \"emit_i32_shri\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform an unsigned right shift of a 32-bit integer by an immediate value.\"\n        },\n        {\n          \"name\": \"emit_i32_shl\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a left shift of a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_sar\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a signed right shift of a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_shr\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform an unsigned right shift of a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_addi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to add an immediate value to a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_subi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to subtract an immediate value from a 32-bit integer.\"\n        },\n        {\n          \"name\": \"emit_i32_andi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a bitwise AND with an immediate value.\"\n        },\n        {\n          \"name\": \"emit_i32_ori\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a bitwise OR with an immediate value.\"\n        },\n        {\n          \"name\": \"emit_i32_xori\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform a bitwise XOR with an immediate value.\"\n        },\n        {\n          \"name\": \"emit_i32_add\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to add two 32-bit integers.\"\n        },\n        {\n          \"name\": \"emit_i32_sub\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\":"
}