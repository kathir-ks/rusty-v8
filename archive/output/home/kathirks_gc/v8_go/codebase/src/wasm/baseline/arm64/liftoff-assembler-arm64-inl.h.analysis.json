{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/arm64/liftoff-assembler-arm64-inl.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/arm64/liftoff-assembler-arm64-inl.h\",\n  \"imports\": [\n    \"src/codegen/arm64/macro-assembler-arm64-inl.h\",\n    \"src/codegen/interface-descriptors-inl.h\",\n    \"src/compiler/linkage.h\",\n    \"src/heap/mutable-page-metadata.h\",\n    \"src/wasm/baseline/liftoff-assembler.h\",\n    \"src/wasm/baseline/parallel-move-inl.h\",\n    \"src/wasm/object-access.h\",\n    \"src/wasm/wasm-linkage.h\",\n    \"src/wasm/wasm-objects.h\"\n  ],\n  \"classes\": [],\n  \"functions\": [\n    {\n      \"name\": \"GetStackSlot\",\n      \"parameters\": [\n        \"int offset\"\n      ],\n      \"return_type\": \"MemOperand\",\n      \"logic\": \"Returns a MemOperand representing a stack slot at the given offset from the frame pointer (fp).\"\n    },\n    {\n      \"name\": \"GetInstanceDataOperand\",\n      \"parameters\": [],\n      \"return_type\": \"MemOperand\",\n      \"logic\": \"Returns a MemOperand representing the instance data offset from the frame pointer (fp).\"\n    },\n    {\n      \"name\": \"GetRegFromType\",\n      \"parameters\": [\n        \"const LiftoffRegister& reg\",\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"CPURegister\",\n      \"logic\": \"Returns the appropriate CPURegister (W, X, S, D, or Q) from a LiftoffRegister based on the provided ValueKind.\"\n    },\n    {\n      \"name\": \"PadRegList\",\n      \"parameters\": [\n        \"RegList list\"\n      ],\n      \"return_type\": \"CPURegList\",\n      \"logic\": \"Pads the RegList with padreg to make the register list even. Used for alignment purposes.\"\n    },\n    {\n      \"name\": \"PadVRegList\",\n      \"parameters\": [\n        \"DoubleRegList list\"\n      ],\n      \"return_type\": \"CPURegList\",\n      \"logic\": \"Pads the DoubleRegList with fp_scratch to make the register list even. Used for alignment purposes.\"\n    },\n    {\n      \"name\": \"AcquireByType\",\n      \"parameters\": [\n        \"UseScratchRegisterScope* temps\",\n        \"ValueKind kind\"\n      ],\n      \"return_type\": \"CPURegister\",\n      \"logic\": \"Acquires a scratch register from the UseScratchRegisterScope based on the given ValueKind (W, X, S, D, or Q).\"\n    },\n    {\n      \"name\": \"GetMemOp\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"UseScratchRegisterScope* temps\",\n        \"Register addr\",\n        \"Register offset\",\n        \"T offset_imm\",\n        \"bool i64_offset\",\n        \"unsigned shift_amount\"\n      ],\n      \"return_type\": \"MemOperand\",\n      \"logic\": \"Constructs a MemOperand for memory access, handling optional register and immediate offsets, and applying scaling if needed. Uses scratch registers for address calculations if offsets are complex.\"\n    },\n    {\n      \"name\": \"GetEffectiveAddress\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"UseScratchRegisterScope* temps\",\n        \"Register addr\",\n        \"Register offset\",\n        \"uintptr_t offset_imm\",\n        \"bool i64_offset\"\n      ],\n      \"return_type\": \"Register\",\n      \"logic\": \"Calculates the effective memory address by adding a base address, an optional register offset (with optional UXTW extension), and an optional immediate offset. Uses scratch registers to avoid clobbering input.\"\n    },\n    {\n      \"name\": \"EmitSimdShift\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"VRegister dst\",\n        \"VRegister lhs\",\n        \"Register rhs\",\n        \"VectorFormat format\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Emits code to perform a SIMD shift operation, handling the shift amount in a register. Uses scratch registers to mask the shift amount and duplicate it across the vector.\"\n    },\n    {\n      \"name\": \"EmitSimdShiftRightImmediate\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"VRegister dst\",\n        \"VRegister lhs\",\n        \"int32_t rhs\",\n        \"VectorFormat format\",\n         \"ShiftSign sign\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Emits code to perform a SIMD right shift operation with an immediate shift amount. Optimized for when the shift amount is zero. Includes both signed and unsigned right shift.\"\n    },\n    {\n      \"name\": \"EmitAnyTrue\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"LiftoffRegister dst\",\n        \"LiftoffRegister src\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Checks if any lane in a SIMD register is true. Stores the result (1 if any lane is true, 0 otherwise) in the destination register.\"\n    },\n    {\n      \"name\": \"EmitAllTrue\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"LiftoffRegister dst\",\n        \"LiftoffRegister src\",\n        \"VectorFormat format\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Checks if all lanes in a SIMD register are true. Stores the result (1 if all lanes are true, 0 otherwise) in the destination register.\"\n    },\n    {\n      \"name\": \"LoadToRegister\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"UseScratchRegisterScope* temps\",\n        \"const LiftoffAssembler::VarState& src\"\n      ],\n      \"return_type\": \"CPURegister\",\n      \"logic\": \"Loads a value from a VarState (register, constant, or stack slot) into a CPU register. Uses scratch registers for constants and stack slots.\"\n    },\n    {\n      \"name\": \"StoreToMemory\",\n      \"parameters\": [\n        \"LiftoffAssembler* assm\",\n        \"MemOperand dst\",\n        \"const LiftoffAssembler::VarState& src\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Stores the value represented by a VarState into memory using a MemOperand. Loads the source value into a register before storing, if necessary.\"\n    },\n        {\n            \"name\": \"LiftoffAssembler::PrepareStackFrame\",\n            \"parameters\": [],\n            \"return_type\": \"int\",\n            \"logic\": \"Reserves space on the stack for the Liftoff frame by emitting a placeholder 'sub sp, sp, 0' instruction, which will be patched later with the actual frame size.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::CallFrameSetupStub\",\n            \"parameters\": [\"int declared_function_index\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Sets up the Liftoff frame and calls the kWasmLiftoffFrameSetup builtin function to finalize frame setup (e.g., set up feedback vector).\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::PrepareTailCall\",\n            \"parameters\": [\"int num_callee_stack_params\", \"int stack_param_delta\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Prepares for a tail call by adjusting the stack, loading the caller's frame pointer and return address, and shifting arguments on the stack.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::AlignFrameSize\",\n            \"parameters\": [],\n            \"return_type\": \"void\",\n            \"logic\": \"Ensures the stack frame size is 16-byte aligned by adding padding if necessary.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::PatchPrepareStackFrame\",\n            \"parameters\": [\"int offset\", \"SafepointTableBuilder* safepoint_table_builder\", \"bool feedback_vector_slot\", \"size_t stack_param_slots\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Patches the placeholder stack frame allocation instruction with the correct frame size. If the frame is large, a stack check is performed before allocation.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::FinishCode\",\n            \"parameters\": [],\n            \"return_type\": \"void\",\n            \"logic\": \"Forces emission of the constant pool without a jump.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::AbortCompilation\",\n            \"parameters\": [],\n            \"return_type\": \"void\",\n            \"logic\": \"Aborts code generation.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::StaticStackFrameSize\",\n            \"parameters\": [],\n            \"return_type\": \"constexpr int\",\n            \"logic\": \"Returns the static size of the stack frame (offset to the feedback vector).\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::SlotSizeForType\",\n            \"parameters\": [\"ValueKind kind\"],\n            \"return_type\": \"int\",\n            \"logic\": \"Returns the size of a stack slot for a given ValueKind.  Special handling for S128.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::NeedsAlignment\",\n            \"parameters\": [\"ValueKind kind\"],\n            \"return_type\": \"bool\",\n            \"logic\": \"Checks if a given ValueKind requires stack alignment.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::CheckTierUp\",\n            \"parameters\": [\"int declared_func_index\", \"int budget_used\", \"Label* ool_label\", \"const FreezeCacheState& frozen\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Checks the tiering budget and jumps to out-of-line code if the budget is exceeded.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadOldFramePointer\",\n            \"parameters\": [],\n            \"return_type\": \"Register\",\n            \"logic\": \"Loads the old frame pointer when growable stacks are enabled. Handles the cases when either the stack segment start marker is found or calls a runtime function to retrieve it.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::CheckStackShrink\",\n            \"parameters\": [],\n            \"return_type\": \"void\",\n            \"logic\": \"Checks and shrinks the stack when growable stacks are enabled.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadConstant\",\n            \"parameters\": [\"LiftoffRegister reg\", \"WasmValue value\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a WasmValue constant into a register.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadInstanceDataFromFrame\",\n            \"parameters\": [\"Register dst\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads the instance data from the stack frame into the destination register.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadTrustedPointer\",\n            \"parameters\": [\"Register dst\", \"Register src_addr\", \"int offset\", \"IndirectPointerTag tag\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a trusted pointer from memory (with sandboxing).\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadFromInstance\",\n            \"parameters\": [\"Register dst\", \"Register instance\", \"int offset\", \"int size\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads data from the Wasm instance object.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadTaggedPointerFromInstance\",\n            \"parameters\": [\"Register dst\", \"Register instance\", \"int offset\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a tagged pointer from the Wasm instance object.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::SpillInstanceData\",\n            \"parameters\": [\"Register instance\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Spills the instance data register to the stack.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::ResetOSRTarget\",\n            \"parameters\": [],\n            \"return_type\": \"void\",\n            \"logic\": \"Placeholder function - Reset OSR target for compilation. (empty body)\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadTaggedPointer\",\n            \"parameters\": [\"Register dst\", \"Register src_addr\", \"Register offset_reg\", \"int32_t offset_imm\", \"uint32_t* protected_load_pc\", \"bool needs_shift\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a tagged pointer from memory, potentially handling pointer compression.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadProtectedPointer\",\n            \"parameters\": [\"Register dst\", \"Register src_addr\", \"int32_t offset_imm\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a protected pointer from memory (with sandboxing).\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadFullPointer\",\n            \"parameters\": [\"Register dst\", \"Register src_addr\", \"int32_t offset_imm\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a full (unprotected) pointer from memory.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::StoreTaggedPointer\",\n            \"parameters\": [\"Register dst_addr\", \"Register offset_reg\", \"int32_t offset_imm\", \"Register src\", \"LiftoffRegList\", \"uint32_t* protected_store_pc\", \"SkipWriteBarrier skip_write_barrier\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores a tagged pointer to memory, potentially with a write barrier.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Load\",\n            \"parameters\": [\"LiftoffRegister dst\", \"Register src_addr\", \"Register offset_reg\", \"uintptr_t offset_imm\", \"LoadType type\", \"uint32_t* protected_load_pc\", \"bool is_load_mem\", \"bool i64_offset\", \"bool needs_shift\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads a value from memory according to the provided LoadType and offset.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Store\",\n            \"parameters\": [\"Register dst_addr\", \"Register offset_reg\", \"uintptr_t offset_imm\", \"LiftoffRegister src\", \"StoreType type\", \"LiftoffRegList\", \"uint32_t* protected_store_pc\", \"bool is_store_mem\", \"bool i64_offset\"],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores a value to memory according to the provided StoreType and offset.\"\n        },\n          {\n            \"name\": \"LiftoffAssembler::AtomicLoad\",\n            \"parameters\": [\n              \"LiftoffRegister dst\",\n              \"Register src_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LoadType type\",\n              \"LiftoffRegList\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic load from memory using the specified LoadType and offsets. Uses Load-Acquire instruction.\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicStore\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister src\",\n              \"StoreType type\",\n              \"LiftoffRegList\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic store to memory using the specified StoreType and offsets. Uses Store-Release instruction.\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicAdd\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic addition in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicSub\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic subtraction in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicAnd\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic AND operation in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicOr\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic OR operation in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicXor\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic XOR operation in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicExchange\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic exchange (swap) in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicCompareExchange\",\n            \"parameters\": [\n              \"Register dst_addr\",\n              \"Register offset_reg\",\n              \"uintptr_t offset_imm\",\n              \"LiftoffRegister expected\",\n              \"LiftoffRegister new_value\",\n              \"LiftoffRegister result\",\n              \"StoreType type\",\n              \"bool i64_offset\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Performs an atomic compare-and-exchange operation in memory using Load-Exclusive and Store-Conditional instructions or using LSE instructions (if available).\"\n          },\n          {\n            \"name\": \"LiftoffAssembler::AtomicFence\",\n            \"parameters\": [],\n            \"return_type\": \"void\",\n            \"logic\": \"Emits a memory fence instruction (DMB) to ensure memory ordering.\"\n          },\n        {\n            \"name\": \"LiftoffAssembler::LoadCallerFrameSlot\",\n            \"parameters\": [\n                \"LiftoffRegister dst\",\n                \"uint32_t caller_slot_idx\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads the value from the specified slot in the caller's stack frame.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::StoreCallerFrameSlot\",\n            \"parameters\": [\n                \"LiftoffRegister src\",\n                \"uint32_t caller_slot_idx\",\n                \"ValueKind kind\",\n                \"Register frame_pointer\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Stores a register value into specified slot of caller's stack frame.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadReturnStackSlot\",\n            \"parameters\": [\n                \"LiftoffRegister dst\",\n                \"int offset\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads from stack used for return values.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::MoveStackValue\",\n            \"parameters\": [\n                \"uint32_t dst_offset\",\n                \"uint32_t src_offset\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Moves a stack value to another stack location.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Move\",\n            \"parameters\": [\n                \"Register dst\",\n                \"Register src\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Moves a value between registers. Selects W or X register depending on the kind.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Move\",\n            \"parameters\": [\n                \"DoubleRegister dst\",\n                \"DoubleRegister src\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Moves a floating-point or vector register depending on value kind.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Spill\",\n            \"parameters\": [\n                \"int offset\",\n                \"LiftoffRegister reg\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Spills a register to a stack offset.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Spill\",\n            \"parameters\": [\n                \"int offset\",\n                \"WasmValue value\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Spills a constant WasmValue to the stack.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::Fill\",\n            \"parameters\": [\n                \"LiftoffRegister reg\",\n                \"int offset\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Fills a register from a stack offset.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::FillI64Half\",\n            \"parameters\": [\n                \"Register\",\n                \"int offset\",\n                \"RegPairHalf\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Unreachable, ARM64 does not support 32-bit register pairs.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::FillStackSlotsWithZero\",\n            \"parameters\": [\n                \"int start\",\n                \"int size\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Fills a range of stack slots with zero values.\"\n        },\n        {\n            \"name\": \"LiftoffAssembler::LoadSpillAddress\",\n            \"parameters\": [\n                \"Register dst\",\n                \"int offset\",\n                \"ValueKind kind\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Loads the address of a spill slot into a register.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_add\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 addition instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_addi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 addition with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_sub\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 subtraction instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_subi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 subtraction with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_mul\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 multiplication instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_and\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 bitwise AND instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_andi\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 bitwise AND with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_or\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 bitwise OR instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_ori\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 bitwise OR with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_xor\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"Register rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 bitwise XOR instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_xori\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 bitwise XOR with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_shl\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"Register amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 left shift instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_shli\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"int32_t amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 left shift with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_sar\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"Register amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 signed right shift instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_sari\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"int32_t amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 signed right shift with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_shr\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"Register amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 unsigned right shift instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i32_shri\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src\",\n            \"int32_t amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i32 unsigned right shift with immediate instruction.\"\n        },\n         {\n          \"name\": \"LiftoffAssembler::emit_i64_add\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 addition instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_sub\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 subtraction instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_mul\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 multiplication instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_muli\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 multiplication instruction with an immediate. Uses shift if imm is a power of two, otherwise mov and mul.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_and\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 bitwise AND instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_andi\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 bitwise AND with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_or\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 bitwise OR instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_ori\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 bitwise OR with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_xor\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 bitwise XOR instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_xori\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"int32_t imm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 bitwise XOR with immediate instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_shl\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\",\n            \"Register amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits an i64 left shift instruction.\"\n        },\n        {\n          \"name\": \"LiftoffAssembler::emit_i64_shli\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\",\n            \"int32_t amount\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \""
}