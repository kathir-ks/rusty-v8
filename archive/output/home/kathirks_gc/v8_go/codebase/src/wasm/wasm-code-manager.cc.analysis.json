{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-code-manager.cc",
  "imports": [
    "src/wasm/wasm-code-manager.h",
    "algorithm",
    "iomanip",
    "numeric",
    "optional",
    "src/base/atomicops.h",
    "src/base/build_config.h",
    "src/base/iterator.h",
    "src/base/macros.h",
    "src/base/platform/platform.h",
    "src/base/platform/wrappers.h",
    "src/base/small-vector.h",
    "src/base/string-format.h",
    "src/base/vector.h",
    "src/builtins/builtins-inl.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/macro-assembler-inl.h",
    "src/codegen/macro-assembler.h",
    "src/common/code-memory-access.h",
    "src/common/globals.h",
    "src/deoptimizer/deoptimizer.h",
    "src/diagnostics/disassembler.h",
    "src/logging/counters.h",
    "src/logging/log.h",
    "src/objects/objects-inl.h",
    "src/snapshot/embedded/embedded-data-inl.h",
    "src/utils/ostreams.h",
    "src/wasm/code-space-access.h",
    "src/wasm/compilation-environment.h",
    "src/wasm/function-compiler.h",
    "src/wasm/jump-table-assembler.h",
    "src/wasm/module-compiler.h",
    "src/wasm/names-provider.h",
    "src/wasm/pgo.h",
    "src/wasm/std-object-sizes.h",
    "src/wasm/wasm-builtin-list.h",
    "src/wasm/wasm-code-pointer-table-inl.h",
    "src/wasm/wasm-debug.h",
    "src/wasm/wasm-deopt-data.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-import-wrapper-cache.h",
    "src/wasm/wasm-module-sourcemap.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-objects.h",
    "src/wasm/well-known-imports.h",
    "src/wasm/interpreter/wasm-interpreter-runtime.h",
    "src/diagnostics/unwinding-info-win64.h"
  ],
  "classes": [
    {
      "name": "DisjointAllocationPool",
      "properties": [
        "regions_"
      ],
      "methods": [
        {
          "name": "Merge",
          "parameters": [
            "new_region"
          ],
          "return_type": "base::AddressRegion",
          "logic": "Merges a new address region into the pool, combining adjacent regions if possible."
        },
        {
          "name": "Allocate",
          "parameters": [
            "size"
          ],
          "return_type": "base::AddressRegion",
          "logic": "Allocates a block of memory of the given size from the pool."
        },
        {
          "name": "AllocateInRegion",
          "parameters": [
            "size",
            "region"
          ],
          "return_type": "base::AddressRegion",
          "logic": "Allocates a block of memory of the given size within a specified region in the pool."
        }
      ]
    },
    {
      "name": "WasmCode",
      "properties": [
        "native_module_",
        "index_",
        "instructions_",
        "stack_slots_",
        "ool_spills_",
        "tagged_parameter_slots_",
        "safepoint_table_offset_",
        "handler_table_offset_",
        "constant_pool_offset_",
        "code_comments_offset_",
        "unpadded_binary_size_",
        "protected_instructions_size_",
        "reloc_info_size_",
        "source_positions_size_",
        "inlining_positions_size_",
        "deopt_data_size_",
        "kind_",
        "tier_",
        "for_debugging_",
        "signature_hash_",
        "trap_handler_index_",
        "frame_has_feedback_slot_"
      ],
      "methods": [
        {
          "name": "constant_pool",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the constant pool."
        },
        {
          "name": "handler_table",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the handler table."
        },
        {
          "name": "handler_table_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of the handler table."
        },
        {
          "name": "code_comments",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of code comments."
        },
        {
          "name": "code_comments_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of the code comments."
        },
        {
          "name": "ConcatenateBytes",
          "parameters": [
            "vectors"
          ],
          "return_type": "std::unique_ptr<const uint8_t[]>",
          "logic": "Concatenates multiple byte vectors into a single buffer."
        },
        {
          "name": "RegisterTrapHandlerData",
          "parameters": [],
          "return_type": "void",
          "logic": "Registers trap handler data with the system."
        },
        {
          "name": "ShouldBeLogged",
          "parameters": [
            "isolate"
          ],
          "return_type": "bool",
          "logic": "Determines if code logging should be performed based on the isolate's settings."
        },
        {
          "name": "DebugName",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns a descriptive name for the WasmCode object."
        },
        {
          "name": "LogCode",
          "parameters": [
            "isolate",
            "source_url",
            "script_id"
          ],
          "return_type": "void",
          "logic": "Logs code creation events to the isolate's logging system."
        },
        {
          "name": "IsProtectedInstruction",
          "parameters": [
            "pc"
          ],
          "return_type": "bool",
          "logic": "Checks if a given program counter (PC) points to a protected instruction."
        },
        {
          "name": "Validate",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs validation checks on the WasmCode object to ensure data consistency."
        },
        {
          "name": "MaybePrint",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the code if the relevant flags are set."
        },
        {
          "name": "Print",
          "parameters": [
            "name"
          ],
          "return_type": "void",
          "logic": "Prints the disassembled code to standard output."
        },
        {
          "name": "Disassemble",
          "parameters": [
            "name",
            "os",
            "current_pc"
          ],
          "return_type": "void",
          "logic": "Disassembles the WasmCode object and writes the output to the given stream."
        },
        {
          "name": "~WasmCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Releases trap handler data if registered."
        },
        {
          "name": "DecRefOnPotentiallyDeadCode",
          "parameters": [],
          "return_type": "void",
          "logic": "Decrements the ref counter of the wasm code and adds it to potentially dead code queue."
        },
        {
          "name": "DecrementRefCount",
          "parameters": [
            "code_vec"
          ],
          "return_type": "void",
          "logic": "Decrements the ref counter of all given code objects."
        },
        {
          "name": "GetSourcePositionBefore",
          "parameters": [
            "code_offset"
          ],
          "return_type": "SourcePosition",
          "logic": "Returns the source position immediately before the specified code offset."
        },
        {
          "name": "GetSourceOffsetBefore",
          "parameters": [
            "code_offset"
          ],
          "return_type": "int",
          "logic": "Returns the source offset immediately before the specified code offset."
        },
        {
          "name": "GetInliningPosition",
          "parameters": [
            "inlining_id"
          ],
          "return_type": "std::tuple<int, bool, SourcePosition>",
          "logic": "Returns the inlining position information associated with the given inlining ID."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of this WasmCode object."
        }
      ]
    },
    {
      "name": "WasmCodeAllocator",
      "properties": [
        "async_counters_",
        "owned_code_space_",
        "free_code_space_",
        "generated_code_size_",
        "freed_code_size_",
        "committed_code_space_"
      ],
      "methods": [
        {
          "name": "WasmCodeAllocator",
          "parameters": [
            "async_counters"
          ],
          "return_type": "void",
          "logic": "Constructor for the WasmCodeAllocator class."
        },
        {
          "name": "~WasmCodeAllocator",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the WasmCodeAllocator class."
        },
        {
          "name": "Init",
          "parameters": [
            "code_space"
          ],
          "return_type": "void",
          "logic": "Initializes the WasmCodeAllocator with a given code space."
        },
        {
          "name": "InitializeCodeRange",
          "parameters": [
            "native_module",
            "region"
          ],
          "return_type": "void",
          "logic": "Initializes the code range for a native module."
        },
        {
          "name": "AllocateForCode",
          "parameters": [
            "native_module",
            "size"
          ],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Allocates a block of memory for code within a native module."
        },
        {
          "name": "AllocateForWrapper",
          "parameters": [
            "size"
          ],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Allocates memory for a wrapper."
        },
        {
          "name": "AllocateForCodeInRegion",
          "parameters": [
            "native_module",
            "size",
            "region"
          ],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Allocates a memory region for code within a native module, constrained by a specific address region."
        },
        {
          "name": "FreeCode",
          "parameters": [
            "codes"
          ],
          "return_type": "void",
          "logic": "Frees the memory associated with the provided code objects."
        },
        {
          "name": "GetNumCodeSpaces",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of code spaces."
        }
      ]
    },
    {
      "name": "NativeModule",
      "properties": [
        "engine_scope_",
        "code_allocator_",
        "enabled_features_",
        "compile_imports_",
        "module_",
        "fast_api_targets_",
        "fast_api_signatures_",
        "compilation_state_",
        "code_table_",
        "tiering_budgets_",
        "allocation_mutex_",
        "code_space_data_",
        "main_jump_table_",
        "main_far_jump_table_",
        "code_pointer_handles_",
        "code_pointer_handles_size_",
        "new_owned_code_",
        "owned_code_",
        "wire_bytes_",
        "source_map_",
        "lazy_compile_table_",
        "debug_state_",
        "num_lazy_compilations_",
        "sum_lazy_compilation_time_in_micro_sec_",
        "max_lazy_compilation_time_in_micro_sec_",
        "liftoff_code_size_",
        "turbofan_code_size_"
      ],
      "methods": [
        {
          "name": "NativeModule",
          "parameters": [
            "enabled_features",
            "detected_features",
            "compile_imports",
            "dynamic_tiering",
            "code_space",
            "module",
            "async_counters",
            "shared_this"
          ],
          "return_type": "void",
          "logic": "Constructor for the NativeModule class."
        },
        {
          "name": "ReserveCodeTableForTesting",
          "parameters": [
            "max_functions"
          ],
          "return_type": "void",
          "logic": "Reserves code table entries for testing purposes."
        },
        {
          "name": "LogWasmCodes",
          "parameters": [
            "isolate",
            "script"
          ],
          "return_type": "void",
          "logic": "Logs information about WebAssembly codes for debugging."
        },
        {
          "name": "AddCodeForTesting",
          "parameters": [
            "code",
            "signature_hash"
          ],
          "return_type": "WasmCode*",
          "logic": "Adds code for testing. Similar to AddCode, but intended for testing scenarios with direct Code objects."
        },
        {
          "name": "InitializeJumpTableForLazyCompilation",
          "parameters": [
            "num_wasm_functions"
          ],
          "return_type": "void",
          "logic": "Initializes jump tables for lazy compilation of WebAssembly functions."
        },
        {
          "name": "UseLazyStubLocked",
          "parameters": [
            "func_index"
          ],
          "return_type": "void",
          "logic": "Replaces a function in the jump table with a call to a lazy compilation stub."
        },
        {
          "name": "AddCode",
          "parameters": [
            "index",
            "desc",
            "stack_slots",
            "ool_spill_count",
            "tagged_parameter_slots",
            "protected_instructions_data",
            "source_position_table",
            "inlining_positions",
            "deopt_data",
            "kind",
            "tier",
            "for_debugging"
          ],
          "return_type": "std::unique_ptr<WasmCode>",
          "logic": "Adds compiled code to the native module."
        },
        {
          "name": "FreeCodePointerTableHandles",
          "parameters": [],
          "return_type": "void",
          "logic": "Frees the code pointer table handles."
        },
        {
          "name": "InitializeCodePointerTableHandles",
          "parameters": [
            "num_wasm_functions"
          ],
          "return_type": "void",
          "logic": "Initializes Code Pointer Table Handle."
        },
        {
          "name": "AddCodeWithCodeSpace",
          "parameters": [
            "index",
            "desc",
            "stack_slots",
            "ool_spill_count",
            "tagged_parameter_slots",
            "protected_instructions_data",
            "source_position_table",
            "inlining_positions",
            "deopt_data",
            "kind",
            "tier",
            "for_debugging",
            "frame_has_feedback_slot",
            "dst_code_bytes",
            "jump_tables"
          ],
          "return_type": "std::unique_ptr<WasmCode>",
          "logic": "Adds compiled code to the native module using a provided code space."
        },
        {
          "name": "PublishCode",
          "parameters": [
            "unpublished_code"
          ],
          "return_type": "WasmCode*",
          "logic": "Publishes a new Wasm code by adding it to the tables, updating jump tables, and doing some checks."
        },
        {
          "name": "PublishCode",
          "parameters": [
            "unpublished_codes"
          ],
          "return_type": "std::vector<WasmCode*>",
          "logic": "Publishes several wasm codes."
        },
        {
          "name": "UpdateWellKnownImports",
          "parameters": [
            "entries"
          ],
          "return_type": "void",
          "logic": "Updates well-known imports information in the module."
        },
        {
          "name": "AllocateForDeserializedCode",
          "parameters": [
            "total_code_size"
          ],
          "return_type": "std::pair<base::Vector<uint8_t>, NativeModule::JumpTablesRef>",
          "logic": "Allocates Code during deserialization, so code can be copied into allocated space."
        },
        {
          "name": "AddDeserializedCode",
          "parameters": [
            "index",
            "instructions",
            "stack_slots",
            "ool_spills",
            "tagged_parameter_slots",
            "safepoint_table_offset",
            "handler_table_offset",
            "constant_pool_offset",
            "code_comments_offset",
            "unpadded_binary_size",
            "protected_instructions_data",
            "reloc_info",
            "source_position_table",
            "inlining_positions",
            "deopt_data",
            "kind",
            "tier"
          ],
          "return_type": "std::unique_ptr<WasmCode>",
          "logic": "Adds deserialized code to the module."
        },
        {
          "name": "SnapshotCodeTable",
          "parameters": [],
          "return_type": "std::pair<std::vector<WasmCode*>, std::vector<WellKnownImport>>",
          "logic": "Creates snapshot of the current Code Table."
        },
        {
          "name": "SnapshotAllOwnedCode",
          "parameters": [],
          "return_type": "std::vector<WasmCode*>",
          "logic": "Snapshots all owned WasmCode objects."
        },
        {
          "name": "GetCode",
          "parameters": [
            "index"
          ],
          "return_type": "WasmCode*",
          "logic": "Returns the WasmCode object for a given function index."
        },
        {
          "name": "HasCode",
          "parameters": [
            "index"
          ],
          "return_type": "bool",
          "logic": "Checks if the given function index has assigned WasmCode."
        },
        {
          "name": "HasCodeWithTier",
          "parameters": [
            "index",
            "tier"
          ],
          "return_type": "bool",
          "logic": "Checks if code of a specific tier exist for given function."
        },
        {
          "name": "SetWasmSourceMap",
          "parameters": [
            "source_map"
          ],
          "return_type": "void",
          "logic": "Sets wasm sourcemap."
        },
        {
          "name": "GetWasmSourceMap",
          "parameters": [],
          "return_type": "WasmModuleSourceMap*",
          "logic": "Get wasm source map."
        },
        {
          "name": "CreateEmptyJumpTableLocked",
          "parameters": [
            "jump_table_size",
            "type"
          ],
          "return_type": "WasmCode*",
          "logic": "Creates the empty jump table inside of given Native Module. Assumes allocation_mutex_ is held."
        },
        {
          "name": "CreateEmptyJumpTableInRegionLocked",
          "parameters": [
            "jump_table_size",
            "region",
            "type"
          ],
          "return_type": "WasmCode*",
          "logic": "Creates the empty jump table inside of given Native Module for provided region. Assumes allocation_mutex_ is held."
        },
        {
          "name": "UpdateCodeSize",
          "parameters": [
            "size",
            "tier",
            "for_debugging"
          ],
          "return_type": "void",
          "logic": "Updates the accumulated code size based on compilation tier."
        },
        {
          "name": "PatchJumpTablesLocked",
          "parameters": [
            "slot_index",
            "target",
            "code_pointer_table_target",
            "signature_hash"
          ],
          "return_type": "void",
          "logic": "Patches code address in the code and far jump table."
        },
        {
          "name": "PatchJumpTableLocked",
          "parameters": [
            "jump_table_pair",
            "code_space_data",
            "slot_index",
            "target"
          ],
          "return_type": "void",
          "logic": "PatchJumpTable locked."
        },
        {
          "name": "AddCodeSpaceLocked",
          "parameters": [
            "region"
          ],
          "return_type": "void",
          "logic": "Adds a new code space, which represents a memory region for compiled code."
        },
        {
          "name": "SetWireBytes",
          "parameters": [
            "wire_bytes"
          ],
          "return_type": "void",
          "logic": "Sets the WebAssembly wire bytes."
        },
        {
          "name": "AddLazyCompilationTimeSample",
          "parameters": [
            "sample_in_micro_sec"
          ],
          "return_type": "void",
          "logic": "Adds compilation time sample for Lazy Compilation"
        },
        {
          "name": "TransferNewOwnedCodeLocked",
          "parameters": [],
          "return_type": "void",
          "logic": "Transfers new owned code to map of all owned code, sorted by address."
        },
        {
          "name": "Lookup",
          "parameters": [
            "pc"
          ],
          "return_type": "WasmCode*",
          "logic": "Looks up the WasmCode object containing given Program Counter (PC)."
        },
        {
          "name": "FindJumpTablesForRegionLocked",
          "parameters": [
            "code_region"
          ],
          "return_type": "NativeModule::JumpTablesRef",
          "logic": "Find existing jump tables for a code region."
        },
        {
          "name": "GetNearCallTargetForFunction",
          "parameters": [
            "func_index",
            "jump_tables"
          ],
          "return_type": "Address",
          "logic": "Returns the target address of the near call destination, the near call instruction then jumps to this address."
        },
        {
          "name": "GetJumpTableEntryForBuiltin",
          "parameters": [
            "builtin",
            "jump_tables"
          ],
          "return_type": "Address",
          "logic": "Returns an offset to the entrypoint from jump table."
        },
        {
          "name": "GetFunctionIndexFromJumpTableSlot",
          "parameters": [
            "slot_address"
          ],
          "return_type": "uint32_t",
          "logic": "Returns the function index for given jump table slot."
        },
        {
          "name": "CreateIndirectCallTargetToFunctionIndexMap",
          "parameters": [],
          "return_type": "NativeModule::CallIndirectTargetMap",
          "logic": "Returns an call target map."
        },
        {
          "name": "GetBuiltinInJumptableSlot",
          "parameters": [
            "target"
          ],
          "return_type": "Builtin",
          "logic": "Returns the builtin in jump table slot."
        },
        {
          "name": "GetCodePointerHandle",
          "parameters": [
            "index"
          ],
          "return_type": "WasmCodePointer",
          "logic": "Returns the WasmCodePointer for given function index. Used for indirect calls through WebAssembly."
        },
        {
          "name": "~NativeModule",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for NativeModule class."
        }
      ]
    },
    {
      "name": "WasmCodeManager",
      "properties": [
        "max_committed_code_space_",
        "critical_committed_code_space_",
        "total_committed_code_space_",
        "native_modules_mutex_",
        "lookup_map_",
        "next_code_space_hint_"
      ],
      "methods": [
        {
          "name": "WasmCodeManager",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the WasmCodeManager class."
        },
        {
          "name": "~WasmCodeManager",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for WasmCodeManager."
        },
        {
          "name": "CanRegisterUnwindInfoForNonABICompliantCodeRange",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks the availability to register unwind info for Win64 platform"
        },
        {
          "name": "Commit",
          "parameters": [
            "region"
          ],
          "return_type": "void",
          "logic": "Commits pages to the system for a given memory region."
        },
        {
          "name": "Decommit",
          "parameters": [
            "region"
          ],
          "return_type": "void",
          "logic": "Decommits pages from the system for a given memory region."
        },
        {
          "name": "AssignRange",
          "parameters": [
            "region",
            "native_module"
          ],
          "return_type": "void",
          "logic": "Assigns range to native module."
        },
        {
          "name": "TryAllocate",
          "parameters": [
            "size"
          ],
          "return_type": "VirtualMemory",
          "logic": "Tries to allocate virtual memory for code with a hint for address allocation."
        },
        {
          "name": "EstimateLiftoffCodeSize",
          "parameters": [
            "body_size"
          ],
          "return_type": "size_t",
          "logic": "Estimates the Liftoff code size."
        },
        {
          "name": "EstimateNativeModuleCodeSize",
          "parameters": [
            "module",
            "include_liftoff",
            "dynamic_tiering"
          ],
          "return_type": "size_t",
          "logic": "Estimates native module code size given module."
        },
        {
          "name": "EstimateNativeModuleCodeSize",
          "parameters": [
            "num_functions",
            "num_imported_functions",
            "code_section_length",
            "include_liftoff",
            "dynamic_tiering"
          ],
          "return_type": "size_t",
          "logic": "Estimates native module code size."
        },
        {
          "name": "EstimateNativeModuleMetaDataSize",
          "parameters": [
            "module"
          ],
          "return_type": "size_t",
          "logic": "Estimates native module meta data size."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetWasmCodeKindAsString",
      "parameters": [
        "kind"
      ],
      "return_type": "const char*",
      "logic": "Returns a string representation of the WasmCode::Kind enum."
    }
  ]
}