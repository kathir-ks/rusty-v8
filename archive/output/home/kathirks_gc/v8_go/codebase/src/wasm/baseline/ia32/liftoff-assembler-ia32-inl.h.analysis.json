{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/ia32/liftoff-assembler-ia32-inl.h",
  "imports": [
    "<optional>",
    "src/codegen/assembler.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/heap/mutable-page-metadata.h",
    "src/wasm/baseline/liftoff-assembler.h",
    "src/wasm/baseline/liftoff-register.h",
    "src/wasm/object-access.h",
    "src/wasm/simd-shuffle.h",
    "src/wasm/value-type.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "CacheStatePreservingTempRegisters",
      "properties": [
        "assm_",
        "pinned_",
        "must_pop_"
      ],
      "methods": [
        {
          "name": "CacheStatePreservingTempRegisters",
          "parameters": [
            "LiftoffAssembler* assm",
            "LiftoffRegList pinned = {}"
          ],
          "return_type": "",
          "logic": "Constructor for the class. Initializes the assembler pointer and pinned registers list."
        },
        {
          "name": "~CacheStatePreservingTempRegisters",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for the class. Pops any registers that were pushed onto the stack when they were acquired from the must_pop_ list."
        },
        {
          "name": "Acquire",
          "parameters": [],
          "return_type": "Register",
          "logic": "Acquires a register for temporary use, preserving the cache state. If no unused registers are available, it pushes a used register onto the stack to make it available, and remembers to pop it later in the destructor."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetStackSlot",
      "parameters": [
        "int offset"
      ],
      "return_type": "Operand",
      "logic": "Returns an Operand representing a stack slot at the given offset from ebp."
    },
    {
      "name": "GetHalfStackSlot",
      "parameters": [
        "int offset",
        "RegPairHalf half"
      ],
      "return_type": "MemOperand",
      "logic": "Returns a MemOperand representing half of a stack slot, based on the provided offset and which half (low or high) is requested."
    },
    {
      "name": "GetInstanceDataOperand",
      "parameters": [],
      "return_type": "Operand",
      "logic": "Returns an Operand representing the instance data operand from the stack frame."
    },
    {
      "name": "MemOperand",
      "parameters": [
        "Register base",
        "Register offset_reg",
        "int offset_imm"
      ],
      "return_type": "Operand",
      "logic": "Constructs a memory operand with the given base register, offset register (if any), and immediate offset."
    },
    {
      "name": "Load",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister dst",
        "Register base",
        "int32_t offset",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Loads a value of the specified kind from memory at the given base address and offset into the destination register."
    },
    {
      "name": "Store",
      "parameters": [
        "LiftoffAssembler* assm",
        "Register base",
        "int32_t offset",
        "LiftoffRegister src",
        "ValueKind kind"
      ],
      "return_type": "void",
      "logic": "Stores a value from the source register to memory at the given base address and offset, based on the specified kind."
    },
    {
      "name": "push",
      "parameters": [
        "LiftoffAssembler* assm",
        "LiftoffRegister reg",
        "ValueKind kind",
        "int padding = 0"
      ],
      "return_type": "void",
      "logic": "Pushes a register's value onto the stack based on its value kind. Allocates additional stack space for alignment if requested"
    },
    {
      "name": "SignExtendI32ToI64",
      "parameters": [
        "Assembler* assm",
        "LiftoffRegister reg"
      ],
      "return_type": "void",
      "logic": "Sign-extends a 32-bit integer in the low word of a register pair to a 64-bit integer, by copying the low word to the high word and then performing an arithmetic right shift."
    },
    {
      "name": "GetTmpByteRegister",
      "parameters": [
        "LiftoffAssembler* assm",
        "Register candidate"
      ],
      "return_type": "Register",
      "logic": "Gets a temporary byte register, using the candidate if it is available. Might spill."
    },
    {
      "name": "MoveStackValue",
      "parameters": [
        "LiftoffAssembler* assm",
        "const Operand& src",
        "const Operand& dst"
      ],
      "return_type": "void",
      "logic": "Moves a value from one stack location to another. Uses a register if available, otherwise uses the stack."
    }
  ]
}