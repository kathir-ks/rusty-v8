{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/streaming-decoder.cc",
  "imports": [
    "src/wasm/streaming-decoder.h",
    "<optional>",
    "src/logging/counters.h",
    "src/wasm/decoder.h",
    "src/wasm/leb-helper.h",
    "src/wasm/module-decoder.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-objects.h",
    "src/wasm/wasm-result.h"
  ],
  "classes": [
    {
      "name": "AsyncStreamingDecoder",
      "properties": [
        "processor_",
        "failed_processor_",
        "state_",
        "section_buffers_",
        "code_section_processed_",
        "module_offset_",
        "full_wire_bytes_"
      ],
      "methods": [
        {
          "name": "AsyncStreamingDecoder",
          "parameters": [
            "std::unique_ptr<StreamingProcessor> processor"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for the AsyncStreamingDecoder class. Initializes the decoder with a streaming processor and sets the initial decoding state to DecodeModuleHeader."
        },
        {
          "name": "OnBytesReceived",
          "parameters": [
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "void",
          "logic": "Handles incoming bytes. Reads bytes into the current state buffer and transitions to the next state when the buffer is full. Passes processed data to the streaming processor."
        },
        {
          "name": "Finish",
          "parameters": [
            "bool can_use_compiled_module"
          ],
          "return_type": "void",
          "logic": "Finishes the decoding process. Processes any remaining bytes and notifies the streaming processor that the stream has finished. Handles deserialization if compiled module bytes are available."
        },
        {
          "name": "Abort",
          "parameters": [],
          "return_type": "void",
          "logic": "Aborts the decoding process. Notifies the streaming processor that the stream has been aborted."
        },
        {
          "name": "NotifyCompilationDiscarded",
          "parameters": [],
          "return_type": "void",
          "logic": "Notifies the decoder that the compilation has been discarded. Resets the processor."
        },
        {
          "name": "NotifyNativeModuleCreated",
          "parameters": [
            "const std::shared_ptr<NativeModule>& native_module"
          ],
          "return_type": "void",
          "logic": "Registers a callback to be executed when more functions can be serialized in the NativeModule."
        },
        {
          "name": "CreateNewBuffer",
          "parameters": [
            "uint32_t module_offset",
            "uint8_t section_id",
            "size_t length",
            "base::Vector<const uint8_t> length_bytes"
          ],
          "return_type": "SectionBuffer*",
          "logic": "Creates a new SectionBuffer object to store the data of a WebAssembly section."
        },
        {
          "name": "ToErrorState",
          "parameters": [],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Sets the decoder to an error state and returns a null pointer for the next decoding state."
        },
        {
          "name": "ProcessModuleHeader",
          "parameters": [],
          "return_type": "void",
          "logic": "Processes the module header using the streaming processor."
        },
        {
          "name": "ProcessSection",
          "parameters": [
            "SectionBuffer* buffer"
          ],
          "return_type": "void",
          "logic": "Processes a WebAssembly section using the streaming processor."
        },
        {
          "name": "StartCodeSection",
          "parameters": [
            "int num_functions",
            "std::shared_ptr<WireBytesStorage> wire_bytes_storage",
            "int code_section_start",
            "int code_section_length"
          ],
          "return_type": "void",
          "logic": "Starts processing of the code section in the wasm module."
        },
        {
          "name": "ProcessFunctionBody",
          "parameters": [
            "base::Vector<const uint8_t> bytes",
            "uint32_t module_offset"
          ],
          "return_type": "void",
          "logic": "Processes a function body using the streaming processor."
        },
        {
          "name": "Fail",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the decoder to a failed state, transferring the processor to the failed processor."
        },
        {
          "name": "ok",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the decoder is in a valid state."
        },
        {
          "name": "module_offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the current module offset."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::SectionBuffer",
      "properties": [
        "module_offset_",
        "bytes_",
        "payload_offset_"
      ],
      "methods": [
        {
          "name": "SectionBuffer",
          "parameters": [
            "uint32_t module_offset",
            "uint8_t id",
            "size_t payload_length",
            "base::Vector<const uint8_t> length_bytes"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for the SectionBuffer class. Initializes the buffer with the section ID, payload length, and section length bytes."
        },
        {
          "name": "section_code",
          "parameters": [],
          "return_type": "SectionCode",
          "logic": "Returns the section code of the buffer."
        },
        {
          "name": "GetCode",
          "parameters": [
            "WireBytesRef ref"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Returns a sub-vector of the buffer containing the code referenced by the given WireBytesRef."
        },
        {
          "name": "GetModuleBytes",
          "parameters": [],
          "return_type": "std::optional<ModuleWireBytes>",
          "logic": "Always returns an empty std::optional<ModuleWireBytes>."
        },
        {
          "name": "module_offset",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the module offset of the section."
        },
        {
          "name": "bytes",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns the entire byte vector of the buffer."
        },
        {
          "name": "payload",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns a vector pointing to the section's payload (excluding the ID and length)."
        },
        {
          "name": "length",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total length of the section buffer."
        },
        {
          "name": "payload_offset",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the offset of the payload within the buffer."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodingState",
      "properties": [
        "offset_"
      ],
      "methods": [
        {
          "name": "ReadBytes",
          "parameters": [
            "AsyncStreamingDecoder* streaming",
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "size_t",
          "logic": "Reads bytes into the state's buffer. Returns the number of bytes read."
        },
        {
          "name": "Next",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Abstract method that returns the next decoding state."
        },
        {
          "name": "buffer",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Abstract method that returns the buffer for storing received bytes."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the current offset in the buffer."
        },
        {
          "name": "set_offset",
          "parameters": [
            "size_t value"
          ],
          "return_type": "void",
          "logic": "Sets the offset in the buffer."
        },
        {
          "name": "is_finishing_allowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether finishing the stream is allowed at this state."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeVarInt32",
      "properties": [
        "byte_buffer_",
        "max_value_",
        "field_name_",
        "value_",
        "bytes_consumed_"
      ],
      "methods": [
        {
          "name": "DecodeVarInt32",
          "parameters": [
            "size_t max_value",
            "const char* field_name"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for the DecodeVarInt32 class. Initializes the maximum value and field name for the VarInt."
        },
        {
          "name": "buffer",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns the byte buffer."
        },
        {
          "name": "ReadBytes",
          "parameters": [
            "AsyncStreamingDecoder* streaming",
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "size_t",
          "logic": "Reads bytes and attempts to decode a VarInt32. Returns the number of bytes read."
        },
        {
          "name": "Next",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Checks if the decoded value exceeds the maximum allowed value. If not, it calls NextWithValue."
        },
        {
          "name": "NextWithValue",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Abstract method to be implemented by derived classes, called after decoding the varint."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeModuleHeader",
      "properties": [
        "byte_buffer_"
      ],
      "methods": [
        {
          "name": "buffer",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns the byte buffer for the module header."
        },
        {
          "name": "Next",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Processes the module header and transitions to the DecodeSectionID state."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeSectionID",
      "properties": [
        "id_",
        "module_offset_"
      ],
      "methods": [
        {
          "name": "DecodeSectionID",
          "parameters": [
            "uint32_t module_offset"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Initializes DecodeSectionID with the offset of the section id in the module."
        },
        {
          "name": "buffer",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns a buffer containing the section ID."
        },
        {
          "name": "is_finishing_allowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true, indicating that finishing is allowed at this stage."
        },
        {
          "name": "Next",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Validates the section ID and transitions to the DecodeSectionLength state."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeSectionLength",
      "properties": [
        "section_id_",
        "module_offset_"
      ],
      "methods": [
        {
          "name": "DecodeSectionLength",
          "parameters": [
            "uint8_t id",
            "uint32_t module_offset"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor that takes a section id and module offset"
        },
        {
          "name": "NextWithValue",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Checks module size limits, creates a new SectionBuffer and transitions to either DecodeNumberOfFunctions, DecodeSectionPayload or DecodeSectionID based on section id and length."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeSectionPayload",
      "properties": [
        "section_buffer_"
      ],
      "methods": [
        {
          "name": "DecodeSectionPayload",
          "parameters": [
            "SectionBuffer* section_buffer"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor that takes section buffer as input"
        },
        {
          "name": "buffer",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns payload buffer."
        },
        {
          "name": "Next",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Processes the section and transitions to the DecodeSectionID state."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeNumberOfFunctions",
      "properties": [
        "section_buffer_"
      ],
      "methods": [
        {
          "name": "DecodeNumberOfFunctions",
          "parameters": [
            "SectionBuffer* section_buffer"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for DecodeNumberOfFunctions, taking SectionBuffer as parameter."
        },
        {
          "name": "NextWithValue",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Starts code section by calling StreamingProcessor, and continues to DecodeFunctionLength state."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeFunctionLength",
      "properties": [
        "section_buffer_",
        "buffer_offset_",
        "num_remaining_functions_"
      ],
      "methods": [
        {
          "name": "DecodeFunctionLength",
          "parameters": [
            "SectionBuffer* section_buffer",
            "size_t buffer_offset",
            "size_t num_remaining_functions"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for the DecodeFunctionLength class. Initializes the section buffer, offset and number of remaining functions."
        },
        {
          "name": "NextWithValue",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Processes the decoded function length and transitions to the DecodeFunctionBody state."
        }
      ]
    },
    {
      "name": "AsyncStreamingDecoder::DecodeFunctionBody",
      "properties": [
        "section_buffer_",
        "buffer_offset_",
        "function_body_length_",
        "num_remaining_functions_",
        "module_offset_"
      ],
      "methods": [
        {
          "name": "DecodeFunctionBody",
          "parameters": [
            "SectionBuffer* section_buffer",
            "size_t buffer_offset",
            "size_t function_body_length",
            "size_t num_remaining_functions",
            "uint32_t module_offset"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for the DecodeFunctionBody class. Initializes the section buffer, buffer offset, function body length, remaining functions and module offset."
        },
        {
          "name": "buffer",
          "parameters": [],
          "return_type": "base::Vector<uint8_t>",
          "logic": "Returns the buffer for the function body."
        },
        {
          "name": "Next",
          "parameters": [
            "AsyncStreamingDecoder* streaming"
          ],
          "return_type": "std::unique_ptr<DecodingState>",
          "logic": "Processes the function body and transitions either to DecodeFunctionLength if there are more functions to process, or to DecodeSectionID."
        }
      ]
    },
    {
      "name": "CallMoreFunctionsCanBeSerializedCallback",
      "properties": [
        "native_module_",
        "callback_",
        "cache_count_"
      ],
      "methods": [
        {
          "name": "CallMoreFunctionsCanBeSerializedCallback",
          "parameters": [
            "std::weak_ptr<NativeModule> native_module",
            "AsyncStreamingDecoder::MoreFunctionsCanBeSerializedCallback callback"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor. Stores the native module and the callback function."
        },
        {
          "name": "call",
          "parameters": [
            "CompilationEvent event"
          ],
          "return_type": "void",
          "logic": "Called when a compilation event happens. If it's a 'finished compilation chunk' event, it calls the callback function with the NativeModule."
        },
        {
          "name": "release_after_final_event",
          "parameters": [],
          "return_type": "ReleaseAfterFinalEvent",
          "logic": "Returns that it needs to keep the callback even after the final event."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "StreamingDecoder::CreateAsyncStreamingDecoder",
      "parameters": [
        "std::unique_ptr<StreamingProcessor> processor"
      ],
      "return_type": "std::unique_ptr<StreamingDecoder>",
      "logic": "Creates an instance of the AsyncStreamingDecoder class."
    },
    {
      "name": "AsyncStreamingDecoder::DecodingState::ReadBytes",
      "parameters": [
        "AsyncStreamingDecoder* streaming",
        "base::Vector<const uint8_t> bytes"
      ],
      "return_type": "size_t",
      "logic": "Reads bytes from the input into the current state's buffer. Updates the offset and returns the number of bytes read."
    }
  ]
}