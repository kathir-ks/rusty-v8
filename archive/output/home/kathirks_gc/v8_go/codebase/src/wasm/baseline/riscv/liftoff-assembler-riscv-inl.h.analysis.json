{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/riscv/liftoff-assembler-riscv-inl.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/riscv/liftoff-assembler-riscv-inl.h\",\n  \"imports\": [\n    \"src/codegen/interface-descriptors-inl.h\",\n    \"src/compiler/linkage.h\",\n    \"src/heap/mutable-page-metadata.h\",\n    \"src/wasm/baseline/liftoff-assembler.h\",\n    \"src/wasm/baseline/parallel-move-inl.h\",\n    \"src/wasm/object-access.h\",\n    \"src/wasm/wasm-linkage.h\",\n    \"src/wasm/wasm-objects.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"v8::internal::wasm::liftoff::LiftoffAssembler\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrepareStackFrame\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Prepares the stack frame by reserving space for stack checking.  Returns the offset.\"\n        },\n        {\n          \"name\": \"PrepareTailCall\",\n          \"parameters\": [\n            \"int num_callee_stack_params\",\n            \"int stack_param_delta\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for a tail call by shifting the stack frame and adjusting stack and frame pointers.\"\n        },\n        {\n          \"name\": \"AlignFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"This function doesn't do anything. Likely a placeholder or no-op.\"\n        },\n        {\n          \"name\": \"CheckTierUp\",\n          \"parameters\": [\n            \"int declared_func_index\",\n            \"int budget_used\",\n            \"Label* ool_label\",\n            \"const FreezeCacheState& frozen\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if a function should tier up to a more optimized compiler tier based on budget usage.\"\n        },\n        {\n          \"name\": \"LoadOldFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"Register\",\n          \"logic\": \"Loads the old frame pointer based on growable stack feature flag.  If growable stacks are enabled, it checks the frame type and potentially calls a runtime function to retrieve the old frame pointer.\"\n        },\n        {\n          \"name\": \"CheckStackShrink\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the stack needs to be shrunk and calls a runtime function to shrink it if necessary.\"\n        },\n        {\n          \"name\": \"PatchPrepareStackFrame\",\n          \"parameters\": [\n            \"int offset\",\n            \"SafepointTableBuilder* safepoint_table_builder\",\n            \"bool feedback_vector_slot\",\n            \"size_t stack_param_slots\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Patches the stack frame preparation code to handle large frames and stack overflow checks.\"\n        },\n        {\n          \"name\": \"LoadSpillAddress\",\n          \"parameters\": [\n            \"Register dst\",\n            \"int offset\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the address of a spilled value into a register.\"\n        },\n        {\n          \"name\": \"FinishCode\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Forces the emission of the constant pool without a jump.\"\n        },\n        {\n          \"name\": \"AbortCompilation\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Aborts code generation.\"\n        },\n        {\n          \"name\": \"StaticStackFrameSize\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the static size of the stack frame.\"\n        },\n        {\n          \"name\": \"SlotSizeForType\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the stack slot size required for a given value kind.\"\n        },\n        {\n          \"name\": \"NeedsAlignment\",\n          \"parameters\": [\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a given value kind needs stack alignment.\"\n        },\n        {\n          \"name\": \"LoadInstanceDataFromFrame\",\n          \"parameters\": [\n            \"Register dst\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads the instance data pointer from the stack frame into a register.\"\n        },\n        {\n          \"name\": \"LoadTrustedPointer\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register src_addr\",\n            \"int offset\",\n            \"IndirectPointerTag tag\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a trusted pointer from memory into a register using an indirect pointer tag for security.\"\n        },\n        {\n          \"name\": \"LoadFromInstance\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register instance\",\n            \"int offset\",\n            \"int size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads data from the instance data section into a register with a specified size.\"\n        },\n        {\n          \"name\": \"LoadTaggedPointerFromInstance\",\n          \"parameters\": [\n            \"Register dst\",\n            \"Register instance\",\n            \"int offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Loads a tagged pointer from the instance data section into a register.\"\n        },\n        {\n          \"name\": \"SpillInstanceData\",\n          \"parameters\": [\n            \"Register instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores the instance data pointer into the stack frame.\"\n        },\n        {\n          \"name\": \"ResetOSRTarget\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the on-stack replacement target. Currently a no-op.\"\n        },\n        {\n          \"name\": \"emit_f32_neg\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to negate a 32-bit float.\"\n        },\n        {\n          \"name\": \"emit_f64_neg\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to negate a 64-bit float.\"\n        },\n        {\n          \"name\": \"emit_f32_min\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the minimum of two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f32_max\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the maximum of two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f32_copysign\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to copy the sign of one 32-bit float to another.\"\n        },\n        {\n          \"name\": \"emit_f64_min\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the minimum of two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_max\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the maximum of two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_copysign\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to copy the sign of one 64-bit float to another.\"\n        },\n        {\n          \"name\": \"emit_f32_add\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to add two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f32_sub\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to subtract two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f32_mul\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to multiply two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f32_div\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to divide two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f32_abs\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the absolute value of a 32-bit float.\"\n        },\n        {\n          \"name\": \"emit_f32_ceil\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code to compute the ceiling of a 32-bit float and returns true if it succeeds.\"\n        },\n        {\n          \"name\": \"emit_f32_floor\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code to compute the floor of a 32-bit float and returns true if it succeeds.\"\n        },\n        {\n          \"name\": \"emit_f32_trunc\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code to compute the truncated value of a 32-bit float and returns true if it succeeds.\"\n        },\n        {\n          \"name\": \"emit_f32_nearest_int\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code to compute the nearest integer to a 32-bit float and returns true if it succeeds.\"\n        },\n        {\n          \"name\": \"emit_f32_sqrt\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the square root of a 32-bit float.\"\n        },\n        {\n          \"name\": \"emit_f64_add\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to add two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_sub\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to subtract two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_mul\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to multiply two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_div\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to divide two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_abs\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the absolute value of a 64-bit float.\"\n        },\n        {\n          \"name\": \"emit_f64_sqrt\",\n          \"parameters\": [\n            \"DoubleRegister dst\",\n            \"DoubleRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the square root of a 64-bit float.\"\n        },\n        {\n          \"name\": \"emit_f32_set_cond\",\n          \"parameters\": [\n            \"Condition cond\",\n            \"Register dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to set a register based on the comparison of two 32-bit floats.\"\n        },\n        {\n          \"name\": \"emit_f64_set_cond\",\n          \"parameters\": [\n            \"Condition cond\",\n            \"Register dst\",\n            \"DoubleRegister lhs\",\n            \"DoubleRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to set a register based on the comparison of two 64-bit floats.\"\n        },\n        {\n          \"name\": \"emit_select\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"Register condition\",\n            \"LiftoffRegister true_value\",\n            \"LiftoffRegister false_value\",\n            \"ValueKind kind\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Emits code for select instruction (conditional assignment). Always returns false on this architecture. (Unimplemented)\"\n        },\n        {\n          \"name\": \"emit_smi_check\",\n          \"parameters\": [\n            \"Register obj\",\n            \"Label* target\",\n            \"SmiCheckMode mode\",\n            \"const FreezeCacheState& frozen\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if an object is a Small Integer (Smi) and jumps to a target label based on the specified mode.\"\n        },\n        {\n          \"name\": \"emit_i8x16_popcnt\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to compute the population count of an i8x16 vector.\"\n        },\n        {\n          \"name\": \"emit_i8x16_shuffle\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\",\n            \"const uint8_t shuffle[16]\",\n            \"bool is_swizzle\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to shuffle the elements of two i8x16 vectors based on a shuffle mask.\"\n        },\n        {\n          \"name\": \"emit_i8x16_swizzle\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to swizzle the elements of an i8x16 vector based on indices from another vector.\"\n        },\n        {\n          \"name\": \"emit_i8x16_relaxed_swizzle\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for a relaxed swizzle operation on i8x16 vector. Calls the `emit_i8x16_swizzle` function.\"\n        },\n        {\n          \"name\": \"emit_s128_relaxed_laneselect\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\",\n            \"LiftoffRegister mask\",\n            \"int lane_width\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for a relaxed lane select operation on a s128 vector. calls `emit_s128_select` function.\"\n        },\n        {\n          \"name\": \"emit_i8x16_splat\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to splat an 8-bit integer value across an i8x16 vector.\"\n        },\n        {\n          \"name\": \"emit_i16x8_splat\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to splat a 16-bit integer value across an i16x8 vector.\"\n        },\n        {\n          \"name\": \"emit_i32x4_splat\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to splat a 32-bit integer value across an i32x4 vector.\"\n        },\n        {\n          \"name\": \"emit_i64x2_eq\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise equality comparison on two i64x2 vectors.\"\n        },\n        {\n          \"name\": \"emit_i64x2_ne\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise inequality comparison on two i64x2 vectors.\"\n        },\n        {\n          \"name\": \"emit_i64x2_gt_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise signed greater-than comparison on two i64x2 vectors.\"\n        },\n        {\n          \"name\": \"emit_i64x2_ge_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise signed greater-than-or-equal-to comparison on two i64x2 vectors.\"\n        },\n        {\n          \"name\": \"emit_f32x4_splat\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to splat a 32-bit float value across an f32x4 vector.\"\n        },\n        {\n          \"name\": \"emit_f64x2_splat\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to splat a 64-bit float value across an f64x2 vector.\"\n        },\n        {\n          \"name\": \"emit_i64x2_extmul_low_i32x4_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for extended multiplication of the low i32x4 lane from two vectors, resulting in i64x2\"\n        },\n        {\n          \"name\": \"emit_i64x2_extmul_low_i32x4_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for unsigned extended multiplication of the low i32x4 lane from two vectors, resulting in i64x2\"\n        },\n        {\n          \"name\": \"emit_i64x2_extmul_high_i32x4_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for signed extended multiplication of the high i32x4 lane from two vectors, resulting in i64x2\"\n        },\n        {\n          \"name\": \"emit_i64x2_extmul_high_i32x4_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for unsigned extended multiplication of the high i32x4 lane from two vectors, resulting in i64x2\"\n        },\n        {\n          \"name\": \"emit_i32x4_extmul_low_i16x8_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for signed extended multiplication of the low i16x8 lane from two vectors, resulting in i32x4\"\n        },\n        {\n          \"name\": \"emit_i32x4_extmul_low_i16x8_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for unsigned extended multiplication of the low i16x8 lane from two vectors, resulting in i32x4\"\n        },\n        {\n          \"name\": \"emit_i32x4_extmul_high_i16x8_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for signed extended multiplication of the high i16x8 lane from two vectors, resulting in i32x4\"\n        },\n        {\n          \"name\": \"emit_i32x4_extmul_high_i16x8_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for unsigned extended multiplication of the high i16x8 lane from two vectors, resulting in i32x4\"\n        },\n        {\n          \"name\": \"emit_i16x8_extmul_low_i8x16_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for signed extended multiplication of the low i8x16 lane from two vectors, resulting in i16x8\"\n        },\n        {\n          \"name\": \"emit_i16x8_extmul_low_i8x16_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for unsigned extended multiplication of the low i8x16 lane from two vectors, resulting in i16x8\"\n        },\n        {\n          \"name\": \"emit_i16x8_extmul_high_i8x16_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for signed extended multiplication of the high i8x16 lane from two vectors, resulting in i16x8\"\n        },\n        {\n          \"name\": \"emit_i16x8_extmul_high_i8x16_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for unsigned extended multiplication of the high i8x16 lane from two vectors, resulting in i16x8\"\n        },\n        {\n          \"name\": \"emit_i16x8_q15mulr_sat_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for saturated signed q15 multiplication with rounding of i16x8 vectors\"\n        },\n        {\n          \"name\": \"emit_i16x8_relaxed_q15mulr_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src1\",\n            \"LiftoffRegister src2\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for relaxed saturated signed q15 multiplication with rounding of i16x8 vectors\"\n        },\n        {\n          \"name\": \"emit_i64x2_bitmask\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to create a bitmask from the most significant bits of the i64x2 vector elements.\"\n        },\n        {\n          \"name\": \"emit_i64x2_sconvert_i32x4_low\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for converting low i32x4 to i64x2 with sign extension\"\n        },\n        {\n          \"name\": \"emit_i64x2_sconvert_i32x4_high\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for converting high i32x4 to i64x2 with sign extension\"\n        },\n        {\n          \"name\": \"emit_i64x2_uconvert_i32x4_low\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for converting low i32x4 to i64x2 with zero extension\"\n        },\n        {\n          \"name\": \"emit_i64x2_uconvert_i32x4_high\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister src\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code for converting high i32x4 to i64x2 with zero extension\"\n        },\n        {\n          \"name\": \"emit_i8x16_eq\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise equality comparison on two i8x16 vectors.\"\n        },\n        {\n          \"name\": \"emit_i8x16_ne\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise inequality comparison on two i8x16 vectors.\"\n        },\n        {\n          \"name\": \"emit_i8x16_gt_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise signed greater-than comparison on two i8x16 vectors.\"\n        },\n        {\n          \"name\": \"emit_i8x16_gt_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise unsigned greater-than comparison on two i8x16 vectors.\"\n        },\n        {\n          \"name\": \"emit_i8x16_ge_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise signed greater-than-or-equal-to comparison on two i8x16 vectors.\"\n        },\n        {\n          \"name\": \"emit_i8x16_ge_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise unsigned greater-than-or-equal-to comparison on two i8x16 vectors.\"\n        },\n        {\n          \"name\": \"emit_i16x8_eq\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise equality comparison on two i16x8 vectors.\"\n        },\n        {\n          \"name\": \"emit_i16x8_ne\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise inequality comparison on two i16x8 vectors.\"\n        },\n        {\n          \"name\": \"emit_i16x8_gt_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise signed greater-than comparison on two i16x8 vectors.\"\n        },\n        {\n          \"name\": \"emit_i16x8_gt_u\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise unsigned greater-than comparison on two i16x8 vectors.\"\n        },\n        {\n          \"name\": \"emit_i16x8_ge_s\",\n          \"parameters\": [\n            \"LiftoffRegister dst\",\n            \"LiftoffRegister lhs\",\n            \"LiftoffRegister rhs\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to perform element-wise signed greater-than-or-equal-to comparison on two i16x8 vectors.\"\n        },\n        {\n          \"name\": \"emit_i16x8_ge_u\",\n          \"parameters\": [\n            \"LiftoffRegister"
}