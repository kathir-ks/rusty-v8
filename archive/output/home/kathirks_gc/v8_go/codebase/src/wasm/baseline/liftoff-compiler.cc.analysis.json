{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/baseline/liftoff-compiler.cc",
  "imports": [
    "src/wasm/baseline/liftoff-compiler.h",
    "<optional>",
    "src/base/enum-set.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/external-reference.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/machine-type.h",
    "src/codegen/macro-assembler-inl.h",
    "src/codegen/register-configuration.h",
    "src/compiler/access-builder.h",
    "src/compiler/wasm-compiler.h",
    "src/logging/counters.h",
    "src/logging/log.h",
    "src/objects/contexts.h",
    "src/objects/smi.h",
    "src/roots/roots.h",
    "src/tracing/trace-event.h",
    "src/utils/ostreams.h",
    "src/utils/utils.h",
    "src/wasm/baseline/liftoff-assembler-inl.h",
    "src/wasm/baseline/liftoff-register.h",
    "src/wasm/compilation-environment-inl.h",
    "src/wasm/function-body-decoder-impl.h",
    "src/wasm/function-compiler.h",
    "src/wasm/memory-tracing.h",
    "src/wasm/object-access.h",
    "src/wasm/simd-shuffle.h",
    "src/wasm/wasm-debug.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h",
    "src/wasm/wasm-opcodes-inl.h"
  ],
  "classes": [
    {
      "name": "assert_field_size",
      "properties": [
        "size"
      ],
      "methods": []
    },
    {
      "name": "MovableLabel",
      "properties": [
        "label_"
      ],
      "methods": [
        {
          "name": "MovableLabel",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor: Initializes the label_ member. For ARM64 the label is allocated on the zone, otherwise it's stored directly as a member."
        },
        {
          "name": "get",
          "parameters": [],
          "return_type": "Label*",
          "logic": "Returns a pointer to the Label."
        }
      ]
    },
    {
      "name": "DebugSideTableBuilder",
      "properties": [
        "num_locals_",
        "last_values_",
        "entries_",
        "last_ool_values_",
        "ool_entries_"
      ],
      "methods": [
        {
          "name": "NewEntry",
          "parameters": [
            "int pc_offset",
            "base::Vector<DebugSideTable::Entry::Value> values"
          ],
          "return_type": "void",
          "logic": "Adds a new entry in regular code with the specified pc offset and stack values."
        },
        {
          "name": "NewOOLEntry",
          "parameters": [
            "base::Vector<DebugSideTable::Entry::Value> values"
          ],
          "return_type": "EntryBuilder*",
          "logic": "Adds a new entry for out-of-line (OOL) code."
        },
        {
          "name": "SetNumLocals",
          "parameters": [
            "int num_locals"
          ],
          "return_type": "void",
          "logic": "Sets the total number of locals for the function."
        },
        {
          "name": "GenerateDebugSideTable",
          "parameters": [],
          "return_type": "std::unique_ptr<DebugSideTable>",
          "logic": "Generates the debug side table from the accumulated entries."
        }
      ]
    },
    {
      "name": "DebugSideTableBuilder::EntryBuilder",
      "properties": [
        "pc_offset_",
        "stack_height_",
        "changed_values_"
      ],
      "methods": [
        {
          "name": "ToTableEntry",
          "parameters": [],
          "return_type": "Entry",
          "logic": "Converts an EntryBuilder to a DebugSideTable Entry"
        },
        {
          "name": "MinimizeBasedOnPreviousStack",
          "parameters": [
            "const std::vector<Value>& last_values"
          ],
          "return_type": "void",
          "logic": "Minimizes the changed values based on the previous stack to reduce the size of the table."
        },
        {
          "name": "pc_offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the pc_offset_"
        },
        {
          "name": "set_pc_offset",
          "parameters": [
            "int new_pc_offset"
          ],
          "return_type": "void",
          "logic": "Sets the pc_offset_"
        }
      ]
    },
    {
      "name": "TempRegisterScope",
      "properties": [
        "free_temps_"
      ],
      "methods": [
        {
          "name": "Acquire",
          "parameters": [
            "RegClass rc"
          ],
          "return_type": "LiftoffRegister",
          "logic": "Acquires a free temporary register of the given RegClass."
        },
        {
          "name": "Return",
          "parameters": [
            "LiftoffRegister&& temp"
          ],
          "return_type": "void",
          "logic": "Returns a temporary register to the free list."
        },
        {
          "name": "Return",
          "parameters": [
            "Register&& temp"
          ],
          "return_type": "void",
          "logic": "Returns a temporary register to the free list."
        },
        {
          "name": "AddTempRegisters",
          "parameters": [
            "int count",
            "RegClass rc",
            "LiftoffAssembler* lasm",
            "LiftoffRegList pinned"
          ],
          "return_type": "LiftoffRegList",
          "logic": "Adds multiple registers to the temp register scope."
        }
      ]
    },
    {
      "name": "ScopedTempRegister",
      "properties": [
        "reg_",
        "temp_scope_"
      ],
      "methods": [
        {
          "name": "ScopedTempRegister",
          "parameters": [
            "TempRegisterScope& temp_scope",
            "RegClass rc"
          ],
          "return_type": "void",
          "logic": "Constructor: Acquires a temporary register from the given TempRegisterScope."
        },
        {
          "name": "~ScopedTempRegister",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor: Returns the acquired register to the TempRegisterScope."
        },
        {
          "name": "reg",
          "parameters": [],
          "return_type": "LiftoffRegister",
          "logic": "Returns the underlying LiftoffRegister."
        },
        {
          "name": "gp_reg",
          "parameters": [],
          "return_type": "Register",
          "logic": "Returns the general-purpose register part of the underlying LiftoffRegister."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the ScopedTempRegister, returning the reg_ to the temp_scope_"
        }
      ]
    },
    {
      "name": "LiftoffCompiler",
      "properties": [
        "asm_",
        "descriptor_",
        "env_",
        "debug_sidetable_builder_",
        "for_debugging_",
        "func_index_",
        "out_of_line_code_",
        "source_position_table_builder_",
        "protected_instructions_",
        "zone_",
        "safepoint_table_builder_",
        "next_breakpoint_ptr_",
        "next_breakpoint_end_",
        "dead_breakpoint_",
        "handlers_",
        "bailout_reason_",
        "supported_types_",
        "pc_offset_stack_frame_construction_",
        "num_exceptions_",
        "stack_value_types_for_debugging_",
        "did_function_entry_break_checks_",
        "frame_description_",
        "outstanding_op_",
        "handler_table_offset_",
        "encountered_call_instructions_",
        "max_steps_",
        "detect_nondeterminism_",
        "deopt_info_bytecode_offset_",
        "deopt_location_kind_"
      ],
      "methods": [
        {
          "name": "LiftoffCompiler",
          "parameters": [
            "compiler::CallDescriptor* call_descriptor",
            "CompilationEnv* env",
            "Zone* zone",
            "std::unique_ptr<AssemblerBuffer> buffer",
            "DebugSideTableBuilder* debug_sidetable_builder",
            "const LiftoffOptions& options"
          ],
          "return_type": "void",
          "logic": "Constructor: Initializes the compiler with the given call descriptor, compilation environment, zone, assembler buffer, debug side table builder, and options."
        },
        {
          "name": "did_bailout",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compiler bailed out due to an unsupported operation."
        },
        {
          "name": "bailout_reason",
          "parameters": [],
          "return_type": "LiftoffBailoutReason",
          "logic": "Returns the reason for bailing out, if any."
        },
        {
          "name": "GetCode",
          "parameters": [
            "CodeDesc* desc"
          ],
          "return_type": "void",
          "logic": "Retrieves the generated code description."
        },
        {
          "name": "ReleaseBuffer",
          "parameters": [],
          "return_type": "std::unique_ptr<AssemblerBuffer>",
          "logic": "Releases the assembler buffer, returning ownership."
        },
        {
          "name": "ReleaseFrameDescriptions",
          "parameters": [],
          "return_type": "std::unique_ptr<LiftoffFrameDescriptionForDeopt>",
          "logic": "Releases the frame descriptions used for deoptimization."
        },
        {
          "name": "GetSourcePositionTable",
          "parameters": [],
          "return_type": "base::OwnedVector<uint8_t>",
          "logic": "Retrieves the source position table."
        },
        {
          "name": "GetProtectedInstructionsData",
          "parameters": [],
          "return_type": "base::OwnedVector<uint8_t>",
          "logic": "Retrieves the data for protected instructions."
        },
        {
          "name": "GetTotalFrameSlotCountForGC",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Retrieves the total number of frame slots required for garbage collection."
        },
        {
          "name": "OolSpillCount",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Retrieves the number of spills performed in out-of-line code."
        },
        {
          "name": "unsupported",
          "parameters": [
            "FullDecoder* decoder",
            "LiftoffBailoutReason reason",
            "const char* detail"
          ],
          "return_type": "void",
          "logic": "Handles unsupported operations by setting the bailout reason and reporting an error."
        },
        {
          "name": "DidAssemblerBailout",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "bool",
          "logic": "Checks if the underlying assembler bailed out."
        },
        {
          "name": "CheckSupportedType",
          "parameters": [
            "FullDecoder* decoder",
            "ValueKind kind",
            "const char* context"
          ],
          "return_type": "bool",
          "logic": "Checks if a type is supported by the compiler."
        },
        {
          "name": "MaybeBailoutForUnsupportedType",
          "parameters": [
            "FullDecoder* decoder",
            "ValueKind kind",
            "const char* context"
          ],
          "return_type": "bool",
          "logic": "Potentially bails out if a given ValueKind is unsupported."
        },
        {
          "name": "UnuseLabels",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Unuses all Labels, so that their destructors will not throw errors during compilation"
        },
        {
          "name": "StartFunction",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Initializes the function compilation process, setting the number of locals and their kinds."
        },
        {
          "name": "StackCheck",
          "parameters": [
            "FullDecoder* decoder",
            "WasmCodePosition position"
          ],
          "return_type": "void",
          "logic": "Emits a stack check to ensure sufficient stack space."
        },
        {
          "name": "TierupCheck",
          "parameters": [
            "FullDecoder* decoder",
            "WasmCodePosition position",
            "int budget_used"
          ],
          "return_type": "void",
          "logic": "Emits a check to determine if the function should be tiered up to a more optimized compiler."
        },
        {
          "name": "SpillLocalsInitially",
          "parameters": [
            "FullDecoder* decoder",
            "uint32_t num_params"
          ],
          "return_type": "bool",
          "logic": "Determines whether to spill locals to the stack initially based on their count and types."
        },
        {
          "name": "TraceFunctionEntry",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Traces the function entry by emitting a call to a built-in function."
        },
        {
          "name": "dynamic_tiering",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if dynamic tiering should be applied for this function."
        },
        {
          "name": "StartFunctionBody",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Starts the compilation of the function body, including parameter processing and local initialization."
        },
        {
          "name": "GenerateOutOfLineCode",
          "parameters": [
            "OutOfLineCode* ool"
          ],
          "return_type": "void",
          "logic": "Generates code for out-of-line operations such as traps and stack checks."
        },
        {
          "name": "FinishFunction",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Finishes the compilation of the function, emitting code for out-of-line operations and patching stack frame setup."
        },
        {
          "name": "OnFirstError",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Handles the first error encountered during decoding."
        },
        {
          "name": "CheckMaxSteps",
          "parameters": [
            "FullDecoder* decoder",
            "int steps_done"
          ],
          "return_type": "void",
          "logic": "Checks if the maximum number of steps has been executed and triggers a trap if exceeded (used for fuzzing)."
        },
        {
          "name": "EmitDebuggingInfo",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode opcode"
          ],
          "return_type": "void",
          "logic": "Emits debugging information such as breakpoints, based on current decoder position."
        },
        {
          "name": "EmitBreakpoint",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Emits a breakpoint instruction."
        },
        {
          "name": "PushControl",
          "parameters": [
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Pushes control flow information (e.g. loop state) to the control flow stack"
        },
        {
          "name": "Block",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Pushes a block control construct."
        },
        {
          "name": "Loop",
          "parameters": [
            "FullDecoder* decoder",
            "Control* loop"
          ],
          "return_type": "void",
          "logic": "Pushes a loop control construct and binds the loop label."
        },
        {
          "name": "Try",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Pushes a try control construct."
        },
        {
          "name": "GetExceptionProperty",
          "parameters": [
            "const VarState& exception",
            "RootIndex root_index"
          ],
          "return_type": "LiftoffRegister",
          "logic": "Loads the tag symbol property of a wasm exception in the given root_index"
        },
        {
          "name": "CatchException",
          "parameters": [
            "FullDecoder* decoder",
            "const TagIndexImmediate& imm",
            "Control* block",
            "base::Vector<Value> values"
          ],
          "return_type": "void",
          "logic": "Handles the catch block by comparing the expected tag with the caught exception tag."
        },
        {
          "name": "Rethrow",
          "parameters": [
            "FullDecoder* decoder",
            "const VarState& exception"
          ],
          "return_type": "void",
          "logic": "Throws a rethrown wasm exception."
        },
        {
          "name": "Delegate",
          "parameters": [
            "FullDecoder* decoder",
            "uint32_t depth",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Delegates exception handling to the specified control flow frame."
        },
        {
          "name": "Rethrow",
          "parameters": [
            "FullDecoder* decoder",
            "Control* try_block"
          ],
          "return_type": "void",
          "logic": "Rethrows an exception, causing a trap or a jump to a catch block."
        },
        {
          "name": "CatchAll",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Handles a catch-all block after a try block."
        },
        {
          "name": "TryTable",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block"
          ],
          "return_type": "void",
          "logic": "Pushes the Control block to the stack."
        },
        {
          "name": "CatchCase",
          "parameters": [
            "FullDecoder* decoder",
            "Control* block",
            "const CatchCase& catch_case",
            "base::Vector<Value> values"
          ],
          "return_type": "void",
          "logic": "Implements the catch-case instruction in a try-table control structue."
        },
        {
          "name": "ThrowRef",
          "parameters": [
            "FullDecoder* decoder",
            "Value*"
          ],
          "return_type": "void",
          "logic": "Throws a Ref, causing a trap or a jump to a catch block."
        },
        {
          "name": "JumpIfFalse",
          "parameters": [
            "FullDecoder* decoder",
            "Label* false_dst",
            "std::optional<FreezeCacheState>& will_freeze"
          ],
          "return_type": "void",
          "logic": "Jumps to the false destination if the condition is false."
        },
        {
          "name": "If",
          "parameters": [
            "FullDecoder* decoder",
            "const Value& cond",
            "Control* if_block"
          ],
          "return_type": "void",
          "logic": "Handles the if instruction, jumping to the else block if the condition is false."
        },
        {
          "name": "FallThruTo",
          "parameters": [
            "FullDecoder* decoder",
            "Control* c"
          ],
          "return_type": "void",
          "logic": "Falls through to a control block's label by jumping to it."
        },
        {
          "name": "FinishOneArmedIf",
          "parameters": [
            "FullDecoder* decoder",
            "Control* c"
          ],
          "return_type": "void",
          "logic": "Finishes a one-armed if statement."
        },
        {
          "name": "FinishTry",
          "parameters": [
            "FullDecoder* decoder",
            "Control* c"
          ],
          "return_type": "void",
          "logic": "Finalizes try statements. Handles the logic necessary for either continuing on or jumping to the catch all case."
        },
        {
          "name": "PopControl",
          "parameters": [
            "FullDecoder* decoder",
            "Control* c"
          ],
          "return_type": "void",
          "logic": "Pops the control flow stack and emits jumps at the end of the flow if necessary."
        },
        {
          "name": "GenerateCCall",
          "parameters": [
            "ValueKind return_kind",
            "const std::initializer_list<VarState> args",
            "ExternalReference ext_ref"
          ],
          "return_type": "LiftoffRegister",
          "logic": "Generates a call to a C function."
        },
        {
          "name": "GenerateCCallWithStackBuffer",
          "parameters": [
            "const LiftoffRegister* result_regs",
            "ValueKind return_kind",
            "ValueKind out_argument_kind",
            "const std::initializer_list<VarState> args",
            "ExternalReference ext_ref"
          ],
          "return_type": "void",
          "logic": "Generates a call to a C function with a stack buffer for arguments."
        },
        {
          "name": "CallEmitFn",
          "parameters": [
            "EmitFn fn",
            "Args... args"
          ],
          "return_type": "void",
          "logic": "Helper function to invoke the assembly helper methods"
        },
        {
          "name": "ConvertAssemblerArg",
          "parameters": [
            "T t"
          ],
          "return_type": "std::conditional_t<std::is_same_v<LiftoffRegister, T>,\n                     AssemblerRegisterConverter, T>",
          "logic": "Convert LiftoffRegisters to AssemblerRegisterConverter, other values are passed on"
        },
        {
          "name": "BindFirst",
          "parameters": [
            "EmitFn fn",
            "ArgType arg"
          ],
          "return_type": "EmitFnWithFirstArg<EmitFn, ArgType>",
          "logic": "Creates a helper object that will call the function with the given first argument."
        },
        {
          "name": "CallEmitFn",
          "parameters": [
            "EmitFnWithFirstArg<EmitFn, T> bound_fn",
            "Args... args"
          ],
          "return_type": "void",
          "logic": "Helper function to invoke the assembly helper methods with a first parameter"
        },
        {
          "name": "EmitUnOp",
          "parameters": [
            "EmitFn fn"
          ],
          "return_type": "void",
          "logic": "Emits a unary operation with generic return types."
        },
        {
          "name": "EmitFloatUnOpWithCFallback",
          "parameters": [
            "bool (LiftoffAssembler::*emit_fn)(DoubleRegister, DoubleRegister)",
            "ExternalReference (*fallback_fn)()"
          ],
          "return_type": "void",
          "logic": "Emits a float unary operation with a C fallback if the architecture lacks the necessary instruction."
        },
        {
          "name": "EmitTypeConversion",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode opcode",
            "ExternalReference (*fallback_fn)()"
          ],
          "return_type": "void",
          "logic": "Emits a type conversion operation, potentially using a C fallback."
        },
        {
          "name": "EmitIsNull",
          "parameters": [
            "WasmOpcode opcode",
            "ValueType type"
          ],
          "return_type": "void",
          "logic": "Emits a ref.is_null or ref.as_non_null operator."
        },
        {
          "name": "UnOp",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode opcode",
            "const Value& value",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles unary operations based on the given opcode."
        },
        {
          "name": "EmitBinOpImm",
          "parameters": [
            "EmitFn fn",
            "EmitFnImm fnImm"
          ],
          "return_type": "void",
          "logic": "Emits a binary operation with an immediate value."
        },
        {
          "name": "EmitBinOp",
          "parameters": [
            "EmitFn fn"
          ],
          "return_type": "void",
          "logic": "Emits a binary operation with generic return types."
        },
        {
          "name": "EmitI8x16Swizzle",
          "parameters": [
            "bool relaxed"
          ],
          "return_type": "void",
          "logic": "Emits the I8x16Swizzle simd instruction, uses the avx2 instruction if available, if not the older instruction set."
        },
        {
          "name": "EmitDivOrRem64CCall",
          "parameters": [
            "LiftoffRegister dst",
            "LiftoffRegister lhs",
            "LiftoffRegister rhs",
            "ExternalReference ext_ref",
            "Label* trap_by_zero",
            "Label* trap_unrepresentable"
          ],
          "return_type": "void",
          "logic": "Performs a 64-bit division or remainder calculation using a C call."
        },
        {
          "name": "EmitI32CmpOp",
          "parameters": [
            "FullDecoder* decoder"
          ],
          "return_type": "void",
          "logic": "Emits an I32 comparison operation."
        },
        {
          "name": "EmitBitRotationCCall",
          "parameters": []
        },
        {
          "name": "EmitI64Shift",
          "parameters": [
            "EmitFn fn",
            "EmitFnImm fnImm"
          ],
          "return_type": "void",
          "logic": "Emits an I64 shift operation."
        },
        {
          "name": "BinOp",
          "parameters": [
            "FullDecoder* decoder",
            "WasmOpcode opcode",
            "const Value& lhs",
            "const Value& rhs",
            "Value* result"
          ],
          "return_type": "void",
          "logic": "Handles binary operations based on the given opcode."
        }
      ]
    },
    {
      "name": "LiftoffCompiler::ParameterProcessor",
      "properties": [
        "compiler_",
        "num_params_",
        "param_idx_",
        "input_idx_",
        "kind_",
        "needs_gp_pair_",
        "reg_kind_",
        "rc_",
        "location_",
        "param_regs_"
      ],
      "methods": [
        {
          "name": "Process",
          "parameters": [],
          "return_type": "void",
          "logic": "Processes the function parameters, loading them from the stack or registers into the Liftoff registers."
        }
      ]
    },
    {
      "name": "LiftoffCompiler::SpilledRegistersForInspection",
      "properties": [
        "entries"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::OutOfLineSafepointInfo",
      "properties": [
        "slots",
        "spills"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::OutOfLineCode",
      "properties": [
        "label",
        "continuation",
        "builtin",
        "position",
        "regs_to_save",
        "cached_instance_data",
        "safepoint_info",
        "spilled_registers",
        "debug_sidetable_entry_builder"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::Control",
      "properties": [
        "else_state",
        "label_state",
        "label",
        "try_info",
        "num_exceptions"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::ElseState",
      "properties": [
        "label",
        "state"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::TryInfo",
      "properties": [
        "catch_state",
        "catch_label",
        "catch_reached",
        "in_handler"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::AssemblerRegisterConverter",
      "properties": [
        "reg"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::EmitFnWithFirstArg",
      "properties": [
        "fn",
        "first_arg"
      ],
      "methods": []
    },
    {
      "name": "LiftoffCompiler::MostlySmallValueKindSig",
      "properties": [
        "inline_storage_"
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "GetLoweredCallDescriptor",
      "parameters": [
        "Zone* zone",
        "compiler::CallDescriptor* call_desc"
      ],
      "return_type": "compiler::CallDescriptor*",
      "logic": "Returns a lowered call descriptor depending on system pointer size."
    },
    {
      "name": "GetCompareCondition",
      "parameters": [
        "WasmOpcode opcode"
      ],
      "return_type": "Condition",
      "logic": "Returns the compare condition based on the wasm opcode."
    }
  ]
}