{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/wasm-interpreter-runtime.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/wasm/interpreter/wasm-interpreter-runtime.h\",\n  \"imports\": [\n    \"<memory>\",\n    \"<vector>\",\n    \"src/base/vector.h\",\n    \"src/execution/simulator.h\",\n    \"src/wasm/interpreter/wasm-interpreter.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"WasmInterpreterRuntime\",\n      \"properties\": [\n        \"isolate_\",\n        \"module_\",\n        \"instance_object_\",\n        \"codemap_\",\n        \"start_function_index_\",\n        \"current_frame_\",\n        \"function_result_\",\n        \"trap_function_index_\",\n        \"trap_pc_\",\n        \"current_thread_\",\n        \"fuzzer_start_time_\",\n        \"memory_start_\",\n        \"instruction_table_\",\n        \"global_addresses_\",\n        \"indirect_call_tables_\",\n        \"generic_wasm_to_js_interpreter_wrapper_fn_\",\n        \"tracer_\",\n        \"shadow_stack_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmInterpreterRuntime\",\n          \"parameters\": [\n            \"const WasmModule* module\",\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmInstanceObject> instance_object\",\n            \"WasmInterpreter::CodeMap* codemap\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the runtime with the provided module, isolate, instance object, and code map.\"\n        },\n        {\n          \"name\": \"GetFunctionBytecode\",\n          \"parameters\": [\n            \"uint32_t func_index\"\n          ],\n          \"return_type\": \"WasmBytecode*\",\n          \"logic\": \"Retrieves the bytecode for a given function index.\"\n        },\n        {\n          \"name\": \"GetInterpretedStack\",\n          \"parameters\": [\n            \"Address frame_pointer\"\n          ],\n          \"return_type\": \"std::vector<WasmInterpreterStackEntry>\",\n          \"logic\": \"Retrieves the interpreted stack for a given frame pointer.\"\n        },\n        {\n          \"name\": \"GetFunctionIndex\",\n          \"parameters\": [\n            \"Address frame_pointer\",\n            \"int index\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Retrieves the function index for a given frame pointer and index.\"\n        },\n        {\n          \"name\": \"SetTrapFunctionIndex\",\n          \"parameters\": [\n            \"int32_t func_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the function index to be used when a trap occurs.\"\n        },\n        {\n          \"name\": \"GetIsolate\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the isolate associated with this runtime.\"\n        },\n        {\n          \"name\": \"GetGlobalAddress\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns the address of a global variable at a given index.\"\n        },\n        {\n          \"name\": \"GetGlobalRef\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Returns a handle to a global object reference at a given index.\"\n        },\n        {\n          \"name\": \"SetGlobalRef\",\n          \"parameters\": [\n            \"uint32_t index\",\n            \"DirectHandle<Object> ref\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a global object reference at a given index.\"\n        },\n        {\n          \"name\": \"MemoryGrow\",\n          \"parameters\": [\n            \"uint32_t delta_pages\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Grows the memory by the specified number of pages.\"\n        },\n        {\n          \"name\": \"MemorySize\",\n          \"parameters\": [],\n          \"return_type\": \"uint64_t\",\n          \"logic\": \"Returns the size of the memory.\"\n        },\n        {\n          \"name\": \"IsMemory64\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the memory is 64-bit.\"\n        },\n        {\n          \"name\": \"GetMemoryStart\",\n          \"parameters\": [],\n          \"return_type\": \"uint8_t*\",\n          \"logic\": \"Returns the starting address of the memory.\"\n        },\n        {\n          \"name\": \"GetMemorySize\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the size of the memory in bytes.\"\n        },\n        {\n          \"name\": \"MemoryInit\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t data_segment_index\",\n            \"uint64_t dst\",\n            \"uint64_t src\",\n            \"uint64_t size\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Initializes a memory region from a data segment.\"\n        },\n        {\n          \"name\": \"MemoryCopy\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint64_t dst\",\n            \"uint64_t src\",\n            \"uint64_t size\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Copies a memory region.\"\n        },\n        {\n          \"name\": \"MemoryFill\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint64_t dst\",\n            \"uint32_t value\",\n            \"uint64_t size\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Fills a memory region with a specific value.\"\n        },\n        {\n          \"name\": \"AllowsAtomicsWait\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if atomic wait operations are allowed.\"\n        },\n        {\n          \"name\": \"AtomicNotify\",\n          \"parameters\": [\n            \"uint64_t effective_index\",\n            \"int32_t val\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Notifies waiting threads on an atomic memory location.\"\n        },\n        {\n          \"name\": \"I32AtomicWait\",\n          \"parameters\": [\n            \"uint64_t effective_index\",\n            \"int32_t val\",\n            \"int64_t timeout\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Performs an atomic wait on a 32-bit integer memory location.\"\n        },\n        {\n          \"name\": \"I64AtomicWait\",\n          \"parameters\": [\n            \"uint64_t effective_index\",\n            \"int64_t val\",\n            \"int64_t timeout\"\n          ],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Performs an atomic wait on a 64-bit integer memory location.\"\n        },\n        {\n          \"name\": \"WasmStackCheck\",\n          \"parameters\": [\n            \"const uint8_t* current_bytecode\",\n            \"const uint8_t*& code\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks for stack overflow.\"\n        },\n        {\n          \"name\": \"TableGet\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t table_index\",\n            \"uint32_t entry_index\",\n            \"DirectHandle<Object>* result\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Gets an element from a table.\"\n        },\n        {\n          \"name\": \"TableSet\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t table_index\",\n            \"uint32_t entry_index\",\n            \"DirectHandle<Object> ref\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets an element in a table.\"\n        },\n        {\n          \"name\": \"TableInit\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t table_index\",\n            \"uint32_t element_segment_index\",\n            \"uint32_t dst\",\n            \"uint32_t src\",\n            \"uint32_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes a table from an element segment.\"\n        },\n        {\n          \"name\": \"TableCopy\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t dst_table_index\",\n            \"uint32_t src_table_index\",\n            \"uint32_t dst\",\n            \"uint32_t src\",\n            \"uint32_t size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Copies a table region.\"\n        },\n        {\n          \"name\": \"TableGrow\",\n          \"parameters\": [\n            \"uint32_t table_index\",\n            \"uint32_t delta\",\n            \"DirectHandle<Object> value\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Grows a table by the specified delta.\"\n        },\n        {\n          \"name\": \"TableSize\",\n          \"parameters\": [\n            \"uint32_t table_index\"\n          ],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the size of a table.\"\n        },\n        {\n          \"name\": \"TableFill\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t table_index\",\n            \"uint32_t count\",\n            \"DirectHandle<Object> value\",\n            \"uint32_t start\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Fills a table region with a specific value.\"\n        },\n        {\n          \"name\": \"UpdateIndirectCallTable\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmInstanceObject> instance\",\n            \"uint32_t table_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates the indirect call table for a given instance and table index.\"\n        },\n        {\n          \"name\": \"ClearIndirectCallCacheEntry\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"DirectHandle<WasmInstanceObject> instance\",\n            \"uint32_t table_index\",\n            \"uint32_t entry_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears an entry in the indirect call cache.\"\n        },\n        {\n          \"name\": \"UpdateMemoryAddress\",\n          \"parameters\": [\n            \"DirectHandle<WasmInstanceObject> instance\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates the memory address for a given instance.\"\n        },\n        {\n          \"name\": \"DataDrop\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Drops a data segment.\"\n        },\n        {\n          \"name\": \"ElemDrop\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Drops an element segment.\"\n        },\n        {\n          \"name\": \"GetWasmTag\",\n          \"parameters\": [\n            \"uint32_t tag_index\"\n          ],\n          \"return_type\": \"const WasmTag&\",\n          \"logic\": \"Returns the Wasm tag at the given index.\"\n        },\n        {\n          \"name\": \"CreateWasmExceptionPackage\",\n          \"parameters\": [\n            \"uint32_t tag_index\"\n          ],\n          \"return_type\": \"DirectHandle<WasmExceptionPackage>\",\n          \"logic\": \"Creates a Wasm exception package.\"\n        },\n        {\n          \"name\": \"UnpackException\",\n          \"parameters\": [\n            \"uint32_t* sp\",\n            \"const WasmTag& tag\",\n            \"DirectHandle<Object> exception_object\",\n            \"uint32_t first_param_slot_index\",\n            \"uint32_t first_param_ref_stack_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Unpacks a Wasm exception.\"\n        },\n        {\n          \"name\": \"ThrowException\",\n          \"parameters\": [\n            \"const uint8_t*& code\",\n            \"uint32_t* sp\",\n            \"Tagged<Object> exception_object\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Throws a Wasm exception.\"\n        },\n        {\n          \"name\": \"RethrowException\",\n          \"parameters\": [\n            \"const uint8_t*& code\",\n            \"uint32_t* sp\",\n            \"uint32_t catch_block_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Rethrows a Wasm exception.\"\n        },\n        {\n          \"name\": \"BeginExecution\",\n          \"parameters\": [\n            \"WasmInterpreterThread* thread\",\n            \"uint32_t function_index\",\n            \"Address frame_pointer\",\n            \"uint8_t* interpreter_fp\",\n            \"uint32_t ref_stack_offset\",\n            \"const std::vector<WasmValue>* argument_values\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Begins execution of a Wasm function.\"\n        },\n        {\n          \"name\": \"ContinueExecution\",\n          \"parameters\": [\n            \"WasmInterpreterThread* thread\",\n            \"bool called_from_js\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Continues execution of a Wasm function.\"\n        },\n        {\n          \"name\": \"ExecuteImportedFunction\",\n          \"parameters\": [\n            \"const uint8_t*& code\",\n            \"uint32_t func_index\",\n            \"uint32_t current_stack_size\",\n            \"uint32_t ref_stack_fp_offset\",\n            \"uint32_t slot_offset\",\n            \"uint32_t return_slot_offset\",\n            \"bool is_tail_call\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes an imported function.\"\n        },\n        {\n          \"name\": \"PrepareTailCall\",\n          \"parameters\": [\n            \"const uint8_t*& code\",\n            \"uint32_t func_index\",\n            \"uint32_t current_stack_size\",\n            \"uint32_t return_slot_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepares for a tail call.\"\n        },\n        {\n          \"name\": \"ExecuteFunction\",\n          \"parameters\": [\n            \"const uint8_t*& code\",\n            \"uint32_t function_index\",\n            \"uint32_t current_stack_size\",\n            \"uint32_t ref_stack_fp_offset\",\n            \"uint32_t slot_offset\",\n            \"uint32_t return_slot_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes a Wasm function.\"\n        },\n        {\n          \"name\": \"ExecuteIndirectCall\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t table_index\",\n            \"uint32_t sig_index\",\n            \"uint32_t entry_index\",\n            \"uint32_t stack_pos\",\n            \"uint32_t* sp\",\n            \"uint32_t ref_stack_fp_offset\",\n            \"uint32_t slot_offset\",\n            \"uint32_t return_slot_offset\",\n            \"bool is_tail_call\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes an indirect call to a Wasm function.\"\n        },\n        {\n          \"name\": \"ExecuteCallRef\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"WasmRef func_ref\",\n            \"uint32_t sig_index\",\n            \"uint32_t stack_pos\",\n            \"uint32_t* sp\",\n            \"uint32_t ref_stack_fp_offset\",\n            \"uint32_t slot_offset\",\n            \"uint32_t return_slot_offset\",\n            \"bool is_tail_call\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Executes a call_ref instruction.\"\n        },\n        {\n          \"name\": \"GetReturnValue\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"const WasmValue&\",\n          \"logic\": \"Returns the return value at a given index.\"\n        },\n        {\n          \"name\": \"IsRefNull\",\n          \"parameters\": [\n            \"DirectHandle<Object> ref\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a reference is null.\"\n        },\n        {\n          \"name\": \"GetFunctionRef\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Returns a handle to a function reference at a given index.\"\n        },\n        {\n          \"name\": \"StoreWasmRef\",\n          \"parameters\": [\n            \"uint32_t ref_stack_index\",\n            \"const WasmRef& ref\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores a Wasm reference in the reference stack.\"\n        },\n        {\n          \"name\": \"ExtractWasmRef\",\n          \"parameters\": [\n            \"uint32_t ref_stack_index\"\n          ],\n          \"return_type\": \"WasmRef\",\n          \"logic\": \"Extracts a Wasm reference from the reference stack.\"\n        },\n        {\n          \"name\": \"UnwindCurrentStackFrame\",\n          \"parameters\": [\n            \"uint32_t* sp\",\n            \"uint32_t slot_offset\",\n            \"uint32_t rets_size\",\n            \"uint32_t args_size\",\n            \"uint32_t rets_refs\",\n            \"uint32_t args_refs\",\n            \"uint32_t ref_stack_fp_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Unwinds the current stack frame.\"\n        },\n        {\n          \"name\": \"PrintStack\",\n          \"parameters\": [\n            \"uint32_t* sp\",\n            \"RegMode reg_mode\",\n            \"int64_t r0\",\n            \"double fp0\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the stack.\"\n        },\n        {\n          \"name\": \"SetTrap\",\n          \"parameters\": [\n            \"TrapReason trap_reason\",\n            \"pc_t trap_pc\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a trap with the given reason and program counter.\"\n        },\n        {\n          \"name\": \"SetTrap\",\n          \"parameters\": [\n            \"TrapReason trap_reason\",\n            \"const uint8_t*& current_code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a trap with the given reason and current bytecode pointer.\"\n        },\n        {\n          \"name\": \"RttCanon\",\n          \"parameters\": [\n            \"uint32_t type_index\"\n          ],\n          \"return_type\": \"DirectHandle<Map>\",\n          \"logic\": \"Returns a canonical RTT (Runtime Type) object.\"\n        },\n        {\n          \"name\": \"StructNewUninitialized\",\n          \"parameters\": [\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"std::pair<DirectHandle<WasmStruct>, const StructType*>\",\n          \"logic\": \"Creates a new uninitialized Wasm struct.\"\n        },\n        {\n          \"name\": \"ArrayNewUninitialized\",\n          \"parameters\": [\n            \"uint32_t length\",\n            \"uint32_t array_index\"\n          ],\n          \"return_type\": \"std::pair<DirectHandle<WasmArray>, const ArrayType*>\",\n          \"logic\": \"Creates a new uninitialized Wasm array.\"\n        },\n        {\n          \"name\": \"WasmArrayNewSegment\",\n          \"parameters\": [\n            \"uint32_t array_index\",\n            \"uint32_t segment_index\",\n            \"uint32_t offset\",\n            \"uint32_t length\"\n          ],\n          \"return_type\": \"WasmRef\",\n          \"logic\": \"Creates a new Wasm array from a segment.\"\n        },\n        {\n          \"name\": \"WasmArrayInitSegment\",\n          \"parameters\": [\n            \"uint32_t segment_index\",\n            \"WasmRef wasm_array\",\n            \"uint32_t array_offset\",\n            \"uint32_t segment_offset\",\n            \"uint32_t length\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Initializes a Wasm array from a segment.\"\n        },\n        {\n          \"name\": \"WasmArrayCopy\",\n          \"parameters\": [\n            \"WasmRef dest_wasm_array\",\n            \"uint32_t dest_index\",\n            \"WasmRef src_wasm_array\",\n            \"uint32_t src_index\",\n            \"uint32_t length\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Copies a Wasm array.\"\n        },\n        {\n          \"name\": \"WasmJSToWasmObject\",\n          \"parameters\": [\n            \"WasmRef extern_ref\",\n            \"ValueType value_type\",\n            \"uint32_t canonical_index\"\n          ],\n          \"return_type\": \"WasmRef\",\n          \"logic\": \"Converts a JS object to a Wasm object, using a canonical index to find the RTT.\"\n        },\n        {\n          \"name\": \"JSToWasmObject\",\n          \"parameters\": [\n            \"WasmRef extern_ref\",\n            \"ValueType value_type\"\n          ],\n          \"return_type\": \"WasmRef\",\n          \"logic\": \"Converts a JS object to a Wasm object.\"\n        },\n        {\n          \"name\": \"WasmToJSObject\",\n          \"parameters\": [\n            \"WasmRef ref\"\n          ],\n          \"return_type\": \"WasmRef\",\n          \"logic\": \"Converts a Wasm object to a JS object.\"\n        },\n        {\n          \"name\": \"GetArrayType\",\n          \"parameters\": [\n            \"uint32_t array_index\"\n          ],\n          \"return_type\": \"const ArrayType*\",\n          \"logic\": \"Returns the array type at a given index.\"\n        },\n        {\n          \"name\": \"GetWasmArrayRefElement\",\n          \"parameters\": [\n            \"Tagged<WasmArray> array\",\n            \"uint32_t index\"\n          ],\n          \"return_type\": \"DirectHandle<Object>\",\n          \"logic\": \"Returns an element from a Wasm array by reference.\"\n        },\n        {\n          \"name\": \"SubtypeCheck\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\",\n            \"const DirectHandle<Map> rtt\",\n            \"const ModuleTypeIndex target_type\",\n            \"bool null_succeeds\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if an object is a subtype of a target type.\"\n        },\n         {\n          \"name\": \"RefIsEq\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\",\n            \"bool null_succeeds\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if two references are equal.\"\n        },\n        {\n          \"name\": \"RefIsI31\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\",\n            \"bool null_succeeds\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a ref is an i31 value.\"\n        },\n        {\n          \"name\": \"RefIsStruct\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\",\n            \"bool null_succeeds\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a ref is a struct.\"\n        },\n        {\n          \"name\": \"RefIsArray\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\",\n            \"bool null_succeeds\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a ref is an array.\"\n        },\n        {\n          \"name\": \"RefIsString\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\",\n            \"bool null_succeeds\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a ref is a string.\"\n        },\n        {\n          \"name\": \"IsNullTypecheck\",\n          \"parameters\": [\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Typecheck for null ref.\"\n        },\n        {\n          \"name\": \"IsNull\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const WasmRef obj\",\n            \"const ValueType obj_type\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Typecheck for null ref, static method.\"\n        },\n        {\n          \"name\": \"GetNullValue\",\n          \"parameters\": [\n            \"const ValueType obj_type\"\n          ],\n          \"return_type\": \"Tagged<Object>\",\n          \"logic\": \"Gets the null value for a specific value type.\"\n        },\n        {\n          \"name\": \"memory_start_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the offset of the memory start address.\"\n        },\n        {\n          \"name\": \"instruction_table_offset\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the offset of the instruction table.\"\n        },\n        {\n          \"name\": \"TotalBytecodeSize\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the total size of the bytecode.\"\n        },\n        {\n          \"name\": \"ResetCurrentHandleScope\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the current handle scope.\"\n        },\n        {\n          \"name\": \"Trace\",\n          \"parameters\": [\n            \"const char* format\",\n            \"...\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Tracing method for debugging purposes.\"\n        },\n        {\n          \"name\": \"TracePop\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Pops an item from the shadow stack for tracing.\"\n        },\n        {\n          \"name\": \"TracePush\",\n          \"parameters\": [\n            \"ValueKind kind\",\n            \"uint32_t slot_offset\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Pushes an item to the shadow stack for tracing, handling different value kinds.\"\n        },\n        {\n          \"name\": \"TracePushCopy\",\n          \"parameters\": [\n            \"uint32_t from_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Pushes a copy of an item to the shadow stack for tracing.\"\n        },\n        {\n          \"name\": \"TraceUpdate\",\n          \"parameters\": [\n            \"uint32_t stack_index\",\n            \"uint32_t slot_offset\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Updates a slot in the shadow stack for tracing.\"\n        },\n        {\n          \"name\": \"TraceSetSlotType\",\n          \"parameters\": [\n            \"uint32_t stack_index\",\n            \"uint32_t type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the type of a slot in the shadow stack for tracing.\"\n        },\n        {\n          \"name\": \"GetTracer\",\n          \"parameters\": [],\n          \"return_type\": \"InterpreterTracer*\",\n          \"logic\": \"Returns the interpreter tracer.\"\n        },\n        {\n          \"name\": \"CallImportedFunction\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"uint32_t function_index\",\n            \"uint32_t* sp\",\n            \"uint32_t current_stack_size\",\n            \"uint32_t ref_stack_fp_index\",\n            \"uint32_t current_slot_offset\"\n          ],\n          \"return_type\": \"ExternalCallResult\",\n          \"logic\": \"Calls an imported function.\"\n        },\n        {\n          \"name\": \"PurgeIndirectCallCache\",\n          \"parameters\": [\n            \"uint32_t table_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Purges indirect call cache entries for a table.\"\n        },\n        {\n          \"name\": \"CallExternalJSFunction\",\n          \"parameters\": [\n            \"const uint8_t*& current_code\",\n            \"const WasmModule* module\",\n            \"DirectHandle<Object> object_ref\",\n            \"const FunctionSig* sig\",\n            \"uint32_t* sp\",\n            \"uint32_t return_slot_offset\"\n          ],\n          \"return_type\": \"ExternalCallResult\",\n          \"logic\": \"Calls an external JS function.\"\n        },\n        {\n          \"name\": \"EffectiveAddress\",\n          \"parameters\": [\n            \"uint64_t index\"\n          ],\n          \"return_type\": \"Address\",\n          \"logic\": \"Calculates the effective address based on the given index.\"\n        },\n        {\n          \"name\": \"BoundsCheckMemRange\",\n          \"parameters\": [\n            \"uint64_t index\",\n            \"uint64_t* size\",\n            \"Address* out_address\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a memory range is within bounds.\"\n        },\n        {\n          \"name\": \"InitGlobalAddressCache\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the global address cache.\"\n        },\n        {\n          \"name\": \"InitMemoryAddresses\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the memory addresses.\"\n        },\n        {\n          \"name\": \"InitIndirectFunctionTables\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes indirect function tables.\"\n        },\n        {\n          \"name\": \"CheckIndirectCallSignature\",\n          \"parameters\": [\n            \"uint32_t table_index\",\n            \"uint32_t entry_index\",\n            \"uint32_t sig_index\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if an indirect call signature matches.\"\n        },\n        {\n          \"name\": \"StoreRefArgsIntoStackSlots\",\n          \"parameters\": [\n            \"uint8_t* sp\",\n            \"uint32_t ref_stack_fp_offset\",\n            \"const FunctionSig* sig\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores reference arguments into stack slots.\"\n        },\n        {\n          \"name\": \"StoreRefResultsIntoRefStack\",\n          \"parameters\": [\n            \"uint8_t* sp\",\n            \"uint32_t ref_stack_fp_offset\",\n            \"const FunctionSig* sig\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Stores reference results into the reference stack.\"\n        },\n        {\n          \"name\": \"InitializeRefLocalsRefs\",\n          \"parameters\": [\n            \"const WasmBytecode* target_function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes reference locals.\"\n        },\n        {\n          \"name\": \"HandleException\",\n          \"parameters\": [\n            \"uint32_t* sp\",\n            \"const uint8_t*& current_code\"\n          ],\n          \"return_type\": \"WasmInterpreterThread::ExceptionHandlingResult\",\n          \"logic\": \"Handles a Wasm exception.\"\n        },\n        {\n          \"name\": \"MatchingExceptionTag\",\n          \"parameters\": [\n            \"DirectHandle<Object> exception_object\",\n            \"uint32_t index\"\n          ],\n          \"return_type"
}