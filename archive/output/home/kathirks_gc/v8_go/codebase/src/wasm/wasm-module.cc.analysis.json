{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-module.cc",
  "imports": [
    "src/wasm/wasm-module.h",
    "functional",
    "memory",
    "src/api/api-inl.h",
    "src/compiler/wasm-compiler.h",
    "src/objects/js-array-inl.h",
    "src/objects/objects.h",
    "src/wasm/jump-table-assembler.h",
    "src/wasm/module-decoder.h",
    "src/wasm/std-object-sizes.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-init-expr.h",
    "src/wasm/wasm-js.h",
    "src/wasm/wasm-module-builder.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-result.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "AdaptiveMap<Value>",
      "properties": [
        "map_",
        "vector_",
        "mode_"
      ],
      "methods": [
        {
          "name": "FinishInitialization",
          "parameters": [],
          "return_type": "void",
          "logic": "Completes the initialization of the adaptive map. It checks if the map is dense enough to switch to a vector-based representation. If so, it copies the map data to the vector and resets the map. Otherwise, it marks the map as sparse."
        }
      ]
    },
    {
      "name": "LazilyGeneratedNames",
      "properties": [
        "mutex_",
        "function_names_",
        "has_functions_"
      ],
      "methods": [
        {
          "name": "LookupFunctionName",
          "parameters": [
            "wire_bytes",
            "function_index"
          ],
          "return_type": "WireBytesRef",
          "logic": "Looks up a function name in the lazily generated names map. If the function names haven't been decoded yet, it decodes them first using DecodeFunctionNames."
        },
        {
          "name": "Has",
          "parameters": [
            "function_index"
          ],
          "return_type": "bool",
          "logic": "Checks if a function name exists for the given index."
        },
        {
          "name": "AddForTesting",
          "parameters": [
            "function_index",
            "name"
          ],
          "return_type": "void",
          "logic": "Adds a function name to the map for testing purposes."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the LazilyGeneratedNames object."
        }
      ]
    },
    {
      "name": "AsmJsOffsetInformation",
      "properties": [
        "encoded_offsets_",
        "decoded_offsets_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "AsmJsOffsetInformation",
          "parameters": [
            "encoded_offsets"
          ],
          "return_type": "AsmJsOffsetInformation",
          "logic": "Constructor that initializes the AsmJsOffsetInformation object with encoded offsets."
        },
        {
          "name": "~AsmJsOffsetInformation",
          "parameters": [],
          "return_type": "AsmJsOffsetInformation",
          "logic": "Destructor"
        },
        {
          "name": "GetSourcePosition",
          "parameters": [
            "declared_func_index",
            "byte_offset",
            "is_at_number_conversion"
          ],
          "return_type": "int",
          "logic": "Gets the source position for a given byte offset within a declared function. Uses binary search after ensuring decoded offsets."
        },
        {
          "name": "GetFunctionOffsets",
          "parameters": [
            "declared_func_index"
          ],
          "return_type": "std::pair<int, int>",
          "logic": "Gets the start and end offsets for a declared function. Ensures decoded offsets."
        },
        {
          "name": "EnsureDecodedOffsets",
          "parameters": [],
          "return_type": "void",
          "logic": "Decodes the encoded offsets if they haven't been decoded yet. Protects the decoding with a mutex."
        }
      ]
    },
    {
      "name": "ModuleWireBytes",
      "properties": [
        "module_bytes_"
      ],
      "methods": [
        {
          "name": "GetNameOrNull",
          "parameters": [
            "ref"
          ],
          "return_type": "WasmName",
          "logic": "Gets a name from the module bytes, or returns a null name if the reference is invalid."
        },
        {
          "name": "GetNameOrNull",
          "parameters": [
            "func_index",
            "module"
          ],
          "return_type": "WasmName",
          "logic": "Gets a function name from the module bytes using the LazilyGeneratedNames object."
        }
      ]
    },
    {
      "name": "WasmModule",
      "properties": [
        "signature_zone",
        "origin",
        "types",
        "isorecursive_canonical_type_ids",
        "functions",
        "globals",
        "data_segments",
        "tables",
        "memories",
        "import_table",
        "export_table",
        "tags",
        "stringref_literals",
        "elem_segments",
        "compilation_hints",
        "branch_hints",
        "inst_traces",
        "num_declared_functions",
        "validated_functions",
        "type_feedback",
        "lazily_generated_names",
        "asm_js_offset_information"
      ],
      "methods": [
        {
          "name": "WasmModule",
          "parameters": [
            "origin"
          ],
          "return_type": "WasmModule",
          "logic": "Constructor"
        },
        {
          "name": "signature_hash",
          "parameters": [
            "type_canonicalizer",
            "function_index"
          ],
          "return_type": "uint64_t",
          "logic": "Calculates the signature hash for a given function index."
        },
        {
          "name": "EstimateStoredSize",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the size of the module's data stored."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates total current memory consumption."
        }
      ]
    },
    {
      "name": "TypeFeedbackStorage",
      "properties": [
        "mutex",
        "feedback_for_function",
        "deopt_count_for_function",
        "well_known_imports"
      ],
      "methods": [
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetWasmFunctionOffset",
      "parameters": [
        "module",
        "func_index"
      ],
      "return_type": "int",
      "logic": "Gets the code offset of a Wasm function within the module."
    },
    {
      "name": "GetNearestWasmFunction",
      "parameters": [
        "module",
        "byte_offset"
      ],
      "return_type": "int",
      "logic": "Finds the Wasm function whose code offset is nearest to given byte_offset using binary search. Returns the index of the nearest function."
    },
    {
      "name": "GetContainingWasmFunction",
      "parameters": [
        "module",
        "byte_offset"
      ],
      "return_type": "int",
      "logic": "Finds the Wasm function that contains the given byte offset. Returns -1 if no function contains the offset."
    },
    {
      "name": "GetSubtypingDepth",
      "parameters": [
        "module",
        "type_index"
      ],
      "return_type": "int",
      "logic": "Gets the subtyping depth for a given type index in the module."
    },
    {
      "name": "IsWasmCodegenAllowed",
      "parameters": [
        "isolate",
        "context"
      ],
      "return_type": "bool",
      "logic": "Checks if Wasm code generation is allowed based on the isolate's callback."
    },
    {
      "name": "ErrorStringForCodegen",
      "parameters": [
        "isolate",
        "context"
      ],
      "return_type": "DirectHandle<String>",
      "logic": "Retrieves the error message associated with Wasm code generation."
    },
    {
      "name": "ToValueTypeString",
      "parameters": [
        "isolate",
        "type"
      ],
      "return_type": "DirectHandle<String>",
      "logic": "Converts a ValueType to a string representation."
    },
    {
      "name": "GetTypeForFunction",
      "parameters": [
        "isolate",
        "sig",
        "for_exception"
      ],
      "return_type": "DirectHandle<JSObject>",
      "logic": "Creates a JSObject representing the type of a Wasm function (parameters and returns)."
    },
    {
      "name": "GetTypeForGlobal",
      "parameters": [
        "isolate",
        "is_mutable",
        "type"
      ],
      "return_type": "DirectHandle<JSObject>",
      "logic": "Creates a JSObject representing the type of a Wasm global (mutability and value type)."
    },
    {
      "name": "GetTypeForMemory",
      "parameters": [
        "isolate",
        "min_size",
        "max_size",
        "shared",
        "address_type"
      ],
      "return_type": "DirectHandle<JSObject>",
      "logic": "Creates a JSObject representing the type of a Wasm memory (min size, max size, shared, address type)."
    },
    {
      "name": "GetTypeForTable",
      "parameters": [
        "isolate",
        "type",
        "min_size",
        "max_size",
        "address_type"
      ],
      "return_type": "DirectHandle<JSObject>",
      "logic": "Creates a JSObject representing the type of a Wasm table (element type, min size, max size, address type)."
    },
    {
      "name": "GetImports",
      "parameters": [
        "isolate",
        "module_object"
      ],
      "return_type": "DirectHandle<JSArray>",
      "logic": "Gets the imports of a Wasm module as a JSArray of JSObjects."
    },
    {
      "name": "GetExports",
      "parameters": [
        "isolate",
        "module_object"
      ],
      "return_type": "DirectHandle<JSArray>",
      "logic": "Gets the exports of a Wasm module as a JSArray of JSObjects."
    },
    {
      "name": "GetCustomSections",
      "parameters": [
        "isolate",
        "module_object",
        "name",
        "thrower"
      ],
      "return_type": "DirectHandle<JSArray>",
      "logic": "Gets the custom sections of a Wasm module with a given name, returning a JSArray of JSArrayBuffers."
    },
    {
      "name": "GetSourcePosition",
      "parameters": [
        "module",
        "func_index",
        "byte_offset",
        "is_at_number_conversion"
      ],
      "return_type": "int",
      "logic": "Retrieves the source position given a module, function index, and offset."
    },
    {
      "name": "PrintSignature",
      "parameters": [
        "buffer",
        "sig",
        "delimiter"
      ],
      "return_type": "size_t",
      "logic": "Prints the function signature into the given buffer."
    },
    {
      "name": "JumpTableOffset",
      "parameters": [
        "module",
        "func_index"
      ],
      "return_type": "int",
      "logic": "Calculates the offset into the jump table for the given function index."
    },
    {
      "name": "GetWireBytesHash",
      "parameters": [
        "wire_bytes"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash of the given wire bytes."
    },
    {
      "name": "NumFeedbackSlots",
      "parameters": [
        "module",
        "func_index"
      ],
      "return_type": "int",
      "logic": "Calculates the number of feedback slots for the function."
    }
  ]
}