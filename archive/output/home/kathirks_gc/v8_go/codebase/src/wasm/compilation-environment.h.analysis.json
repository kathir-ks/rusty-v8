{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/compilation-environment.h",
  "imports": [
    "<memory>",
    "<optional>",
    "src/wasm/wasm-features.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-tier.h"
  ],
  "classes": [
    {
      "name": "WireBytesStorage",
      "properties": [],
      "methods": [
        {
          "name": "~WireBytesStorage",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the WireBytesStorage class."
        },
        {
          "name": "GetCode",
          "parameters": [
            "WireBytesRef"
          ],
          "return_type": "base::Vector<const uint8_t>",
          "logic": "Abstract method to get the code bytes for a given WireBytesRef."
        },
        {
          "name": "GetModuleBytes",
          "parameters": [],
          "return_type": "std::optional<ModuleWireBytes>",
          "logic": "Abstract method to return the ModuleWireBytes corresponding to the underlying module, if available."
        }
      ]
    },
    {
      "name": "CompilationEventCallback",
      "properties": [],
      "methods": [
        {
          "name": "~CompilationEventCallback",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the CompilationEventCallback class."
        },
        {
          "name": "call",
          "parameters": [
            "CompilationEvent event"
          ],
          "return_type": "void",
          "logic": "Abstract method to be called with a CompilationEvent."
        },
        {
          "name": "release_after_final_event",
          "parameters": [],
          "return_type": "ReleaseAfterFinalEvent",
          "logic": "Tells the module compiler whether to keep or to release a callback when the compilation state finishes all compilation units."
        }
      ]
    },
    {
      "name": "CompilationState",
      "properties": [],
      "methods": [
        {
          "name": "~CompilationState",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for the CompilationState class."
        },
        {
          "name": "operator delete",
          "parameters": [
            "void* ptr"
          ],
          "return_type": "void",
          "logic": "Override operator delete to avoid implicit instantiation with size_t."
        },
        {
          "name": "InitCompileJob",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the compilation job."
        },
        {
          "name": "CancelCompilation",
          "parameters": [],
          "return_type": "void",
          "logic": "Cancels the compilation."
        },
        {
          "name": "CancelInitialCompilation",
          "parameters": [],
          "return_type": "void",
          "logic": "Cancels the initial compilation."
        },
        {
          "name": "SetError",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the error flag."
        },
        {
          "name": "SetWireBytesStorage",
          "parameters": [
            "std::shared_ptr<WireBytesStorage>"
          ],
          "return_type": "void",
          "logic": "Sets the wire bytes storage."
        },
        {
          "name": "GetWireBytesStorage",
          "parameters": [],
          "return_type": "std::shared_ptr<WireBytesStorage>",
          "logic": "Gets the wire bytes storage."
        },
        {
          "name": "AddCallback",
          "parameters": [
            "std::unique_ptr<CompilationEventCallback> callback"
          ],
          "return_type": "void",
          "logic": "Adds a compilation event callback."
        },
        {
          "name": "InitializeAfterDeserialization",
          "parameters": [
            "base::Vector<const int> lazy_functions",
            "base::Vector<const int> eager_functions"
          ],
          "return_type": "void",
          "logic": "Initializes CompilationState with lazy and eager functions after deserialization."
        },
        {
          "name": "SetHighPriority",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets a higher priority for the compilation job."
        },
        {
          "name": "TierUpAllFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Triggers tier-up compilation for all functions."
        },
        {
          "name": "AllowAnotherTopTierJob",
          "parameters": [
            "uint32_t func_index"
          ],
          "return_type": "void",
          "logic": "Allows another top-tier compilation job for a specific function."
        },
        {
          "name": "AllowAnotherTopTierJobForAllFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Allows another top-tier compilation job for all functions."
        },
        {
          "name": "failed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compilation failed."
        },
        {
          "name": "baseline_compilation_finished",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the baseline compilation finished."
        },
        {
          "name": "set_compilation_id",
          "parameters": [
            "int compilation_id"
          ],
          "return_type": "void",
          "logic": "Sets the compilation id."
        },
        {
          "name": "dynamic_tiering",
          "parameters": [],
          "return_type": "DynamicTiering",
          "logic": "Returns the dynamic tiering setting."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption."
        },
        {
          "name": "PublishCode",
          "parameters": [
            "base::Vector<UnpublishedWasmCode> unpublished_code"
          ],
          "return_type": "std::vector<WasmCode*>",
          "logic": "Publishes the compiled code."
        },
        {
          "name": "detected_features",
          "parameters": [],
          "return_type": "WasmDetectedFeatures",
          "logic": "Returns the detected features."
        },
        {
          "name": "UpdateDetectedFeatures",
          "parameters": [
            "WasmDetectedFeatures"
          ],
          "return_type": "WasmDetectedFeatures",
          "logic": "Updates the set of detected features and returns any features that were not detected previously."
        }
      ]
    },
    {
      "name": "CompilationEnv",
      "properties": [
        "module",
        "enabled_features",
        "dynamic_tiering",
        "fast_api_targets",
        "fast_api_signatures"
      ],
      "methods": [
        {
          "name": "ForModule",
          "parameters": [
            "const NativeModule* native_module"
          ],
          "return_type": "static inline CompilationEnv",
          "logic": "Creates a CompilationEnv object for compilation."
        },
        {
          "name": "NoModuleAllFeaturesForTesting",
          "parameters": [],
          "return_type": "static constexpr CompilationEnv",
          "logic": "Creates a CompilationEnv with no module and all features enabled, for testing purposes."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "DynamicTiering",
      "values": [
        "kDynamicTiering",
        "kNoDynamicTiering"
      ]
    },
    {
      "name": "CompilationEvent",
      "values": [
        "kFinishedBaselineCompilation",
        "kFinishedCompilationChunk",
        "kFailedCompilation"
      ]
    },
    {
      "name": "ReleaseAfterFinalEvent",
      "values": [
        "kReleaseAfterFinalEvent",
        "kKeepAfterFinalEvent"
      ]
    }
  ],
  "constexpr_variables": [
    {
      "name": "kPartialOOBWritesAreNoops",
      "type": "bool",
      "value": "true or false (platform dependent)",
      "logic": "Determines whether partially-out-of-bounds writes are no-ops."
    }
  ]
}