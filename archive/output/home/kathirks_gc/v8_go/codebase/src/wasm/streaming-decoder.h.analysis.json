{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/streaming-decoder.h",
  "imports": [
    "<memory>",
    "src/base/macros.h",
    "src/base/vector.h",
    "src/wasm/compilation-environment.h",
    "src/wasm/wasm-constants.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-result.h"
  ],
  "classes": [
    {
      "name": "StreamingProcessor",
      "properties": [],
      "methods": [
        {
          "name": "~StreamingProcessor",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the StreamingProcessor class.  Ensures proper cleanup of derived classes."
        },
        {
          "name": "ProcessModuleHeader",
          "parameters": [
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "bool",
          "logic": "Processes the first 8 bytes of a WebAssembly module (the header).  Returns true if processing was successful and decoding should continue, false otherwise."
        },
        {
          "name": "ProcessSection",
          "parameters": [
            "SectionCode section_code",
            "base::Vector<const uint8_t> bytes",
            "uint32_t offset"
          ],
          "return_type": "bool",
          "logic": "Processes a section of the WebAssembly module (excluding the code section). Returns true if processing was successful and decoding should continue, false otherwise."
        },
        {
          "name": "ProcessCodeSectionHeader",
          "parameters": [
            "int num_functions",
            "uint32_t offset",
            "std::shared_ptr<WireBytesStorage>",
            "int code_section_start",
            "int code_section_length"
          ],
          "return_type": "bool",
          "logic": "Processes the header of the code section. Returns true if processing was successful and decoding should continue, false otherwise."
        },
        {
          "name": "ProcessFunctionBody",
          "parameters": [
            "base::Vector<const uint8_t> bytes",
            "uint32_t offset"
          ],
          "return_type": "bool",
          "logic": "Processes a function body within the code section. Returns true if processing was successful and decoding should continue, false otherwise."
        },
        {
          "name": "OnFinishedChunk",
          "parameters": [],
          "return_type": "void",
          "logic": "Reports the end of a chunk of bytes received."
        },
        {
          "name": "OnFinishedStream",
          "parameters": [
            "base::OwnedVector<const uint8_t> bytes",
            "bool after_error"
          ],
          "return_type": "void",
          "logic": "Reports the end of the entire byte stream.  `after_error` indicates if an error occurred during processing. Bytes contains all received bytes."
        },
        {
          "name": "OnAbort",
          "parameters": [],
          "return_type": "void",
          "logic": "Reports that the stream has been aborted."
        },
        {
          "name": "Deserialize",
          "parameters": [
            "base::Vector<const uint8_t> module_bytes",
            "base::Vector<const uint8_t> wire_bytes"
          ],
          "return_type": "bool",
          "logic": "Attempt to deserialize the module. Used for embedder caching."
        }
      ]
    },
    {
      "name": "StreamingDecoder",
      "properties": [
        "url_",
        "more_functions_can_be_serialized_callback_",
        "compiled_module_bytes_"
      ],
      "methods": [
        {
          "name": "~StreamingDecoder",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the StreamingDecoder class."
        },
        {
          "name": "OnBytesReceived",
          "parameters": [
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "virtual void",
          "logic": "Called when a new chunk of bytes is received.  The decoder extracts section payloads and function bodies from these bytes."
        },
        {
          "name": "Finish",
          "parameters": [
            "bool can_use_compiled_module = true"
          ],
          "return_type": "virtual void",
          "logic": "Called when all bytes have been received.  `can_use_compiled_module` indicates whether previously compiled module bytes can be used."
        },
        {
          "name": "Abort",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Called when the streaming process is aborted."
        },
        {
          "name": "NotifyCompilationDiscarded",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Notifies the StreamingDecoder that compilation was discarded, and the processor should not be called anymore."
        },
        {
          "name": "SetMoreFunctionsCanBeSerializedCallback",
          "parameters": [
            "MoreFunctionsCanBeSerializedCallback callback"
          ],
          "return_type": "void",
          "logic": "Sets the callback that is called after a new chunk of the module is tiered up."
        },
        {
          "name": "SetCompiledModuleBytes",
          "parameters": [
            "base::Vector<const uint8_t> bytes"
          ],
          "return_type": "void",
          "logic": "Passes previously compiled module bytes from the embedder's cache. The content shouldn't be used until Finish(true) is called."
        },
        {
          "name": "NotifyNativeModuleCreated",
          "parameters": [
            "const std::shared_ptr<NativeModule>& native_module"
          ],
          "return_type": "virtual void",
          "logic": "Notifies the StreamingDecoder that a NativeModule has been created."
        },
        {
          "name": "url",
          "parameters": [],
          "return_type": "const std::string&",
          "logic": "Returns the URL associated with the WebAssembly module."
        },
        {
          "name": "shared_url",
          "parameters": [],
          "return_type": "std::shared_ptr<const std::string>",
          "logic": "Returns a shared pointer to the URL associated with the WebAssembly module."
        },
        {
          "name": "SetUrl",
          "parameters": [
            "base::Vector<const char> url"
          ],
          "return_type": "void",
          "logic": "Sets the URL associated with the WebAssembly module."
        },
        {
          "name": "CreateAsyncStreamingDecoder",
          "parameters": [
            "std::unique_ptr<StreamingProcessor> processor"
          ],
          "return_type": "static std::unique_ptr<StreamingDecoder>",
          "logic": "Creates an asynchronous StreamingDecoder with the given processor."
        },
        {
          "name": "CreateSyncStreamingDecoder",
          "parameters": [
            "Isolate* isolate",
            "WasmEnabledFeatures enabled",
            "CompileTimeImports compile_imports",
            "DirectHandle<Context> context",
            "const char* api_method_name_for_errors",
            "std::shared_ptr<CompilationResultResolver> resolver"
          ],
          "return_type": "static std::unique_ptr<StreamingDecoder>",
          "logic": "Creates a synchronous StreamingDecoder with the given parameters."
        },
        {
          "name": "deserializing",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the decoder is deserializing from a pre-compiled module."
        }
      ]
    }
  ],
  "functions": []
}