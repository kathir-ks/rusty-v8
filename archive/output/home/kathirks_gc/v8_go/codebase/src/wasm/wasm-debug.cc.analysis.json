{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/wasm-debug.cc",
  "imports": [
    "src/wasm/wasm-debug.h",
    "iomanip",
    "unordered_map",
    "src/common/assert-scope.h",
    "src/common/simd128.h",
    "src/compiler/wasm-compiler.h",
    "src/debug/debug-evaluate.h",
    "src/debug/debug.h",
    "src/execution/frames-inl.h",
    "src/heap/factory.h",
    "src/wasm/baseline/liftoff-compiler.h",
    "src/wasm/baseline/liftoff-register.h",
    "src/wasm/compilation-environment-inl.h",
    "src/wasm/module-decoder.h",
    "src/wasm/std-object-sizes.h",
    "src/wasm/value-type.h",
    "src/wasm/wasm-code-manager.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-limits.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-objects-inl.h",
    "src/wasm/wasm-opcodes-inl.h",
    "src/wasm/wasm-subtyping.h",
    "src/wasm/wasm-value.h",
    "src/zone/accounting-allocator.h"
  ],
  "classes": [
    {
      "name": "DebugSideTable",
      "properties": [
        "num_locals_",
        "entries_"
      ],
      "methods": [
        {
          "name": "Print",
          "parameters": [
            "os"
          ],
          "return_type": "void",
          "logic": "Prints the contents of the debug side table to the given output stream, including the number of locals and entries, and the individual entries."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the debug side table."
        }
      ]
    },
    {
      "name": "DebugSideTable::Entry",
      "properties": [
        "pc_offset_",
        "stack_height_",
        "changed_values_"
      ],
      "methods": [
        {
          "name": "Print",
          "parameters": [
            "os"
          ],
          "return_type": "void",
          "logic": "Prints the contents of the debug side table entry to the given output stream, including the program counter offset, stack height, and changed values."
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the debug side table entry."
        }
      ]
    },
    {
      "name": "DebugInfoImpl",
      "properties": [
        "native_module_",
        "debug_side_tables_mutex_",
        "debug_side_tables_",
        "mutex_",
        "cached_debugging_code_",
        "per_isolate_data_"
      ],
      "methods": [
        {
          "name": "DebugInfoImpl",
          "parameters": [
            "native_module"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the DebugInfoImpl class, initializes the native module."
        },
        {
          "name": "GetNumLocals",
          "parameters": [
            "pc",
            "isolate"
          ],
          "return_type": "int",
          "logic": "Returns the number of locals for the function at the given program counter."
        },
        {
          "name": "GetLocalValue",
          "parameters": [
            "local",
            "pc",
            "fp",
            "debug_break_fp",
            "isolate"
          ],
          "return_type": "WasmValue",
          "logic": "Returns the value of the specified local at the given program counter."
        },
        {
          "name": "GetStackDepth",
          "parameters": [
            "pc",
            "isolate"
          ],
          "return_type": "int",
          "logic": "Returns the stack depth at the given program counter."
        },
        {
          "name": "GetStackValue",
          "parameters": [
            "index",
            "pc",
            "fp",
            "debug_break_fp",
            "isolate"
          ],
          "return_type": "WasmValue",
          "logic": "Returns the value at the specified index on the stack."
        },
        {
          "name": "GetFunctionAtAddress",
          "parameters": [
            "pc",
            "isolate"
          ],
          "return_type": "const WasmFunction&",
          "logic": "Returns the WasmFunction at the given program counter."
        },
        {
          "name": "DeadBreakpoint",
          "parameters": [
            "frame",
            "breakpoints"
          ],
          "return_type": "int",
          "logic": "Finds a dead breakpoint offset for a Liftoff frame based on existing breakpoints."
        },
        {
          "name": "DeadBreakpoint",
          "parameters": [
            "func_index",
            "breakpoints",
            "isolate"
          ],
          "return_type": "int",
          "logic": "Finds a dead breakpoint offset for a top wasm frame based on existing breakpoints."
        },
        {
          "name": "RecompileLiftoffWithBreakpoints",
          "parameters": [
            "func_index",
            "offsets",
            "dead_breakpoint"
          ],
          "return_type": "WasmCode*",
          "logic": "Recompiles a Liftoff function with the specified breakpoints."
        },
        {
          "name": "SetBreakpoint",
          "parameters": [
            "func_index",
            "offset",
            "isolate"
          ],
          "return_type": "void",
          "logic": "Sets a breakpoint at the specified offset within the function."
        },
        {
          "name": "FindAllBreakpoints",
          "parameters": [
            "func_index"
          ],
          "return_type": "std::vector<int>",
          "logic": "Finds all breakpoints that are set within the given function."
        },
        {
          "name": "UpdateBreakpoints",
          "parameters": [
            "func_index",
            "breakpoints",
            "isolate",
            "stepping_frame",
            "dead_breakpoint"
          ],
          "return_type": "void",
          "logic": "Updates return addresses on stack for breakpoints"
        },
        {
          "name": "FloodWithBreakpoints",
          "parameters": [
            "frame",
            "return_location"
          ],
          "return_type": "void",
          "logic": "Floods a Wasm frame with breakpoints for stepping."
        },
        {
          "name": "IsFrameBlackboxed",
          "parameters": [
            "frame"
          ],
          "return_type": "bool",
          "logic": "Determines if the frame is blackboxed."
        },
        {
          "name": "PrepareStep",
          "parameters": [
            "frame"
          ],
          "return_type": "bool",
          "logic": "Prepares for single-stepping a Wasm frame."
        },
        {
          "name": "PrepareStepOutTo",
          "parameters": [
            "frame"
          ],
          "return_type": "void",
          "logic": "Prepares for stepping out of a Wasm frame."
        },
        {
          "name": "ClearStepping",
          "parameters": [
            "frame"
          ],
          "return_type": "void",
          "logic": "Clears the stepping state for a Wasm frame."
        },
        {
          "name": "ClearStepping",
          "parameters": [
            "isolate"
          ],
          "return_type": "void",
          "logic": "Clears the stepping frame id for an isolate"
        },
        {
          "name": "IsStepping",
          "parameters": [
            "frame"
          ],
          "return_type": "bool",
          "logic": "Determines if the Wasm frame is currently being stepped."
        },
        {
          "name": "RemoveBreakpoint",
          "parameters": [
            "func_index",
            "position",
            "isolate"
          ],
          "return_type": "void",
          "logic": "Removes a breakpoint at the specified position within the function."
        },
        {
          "name": "RemoveDebugSideTables",
          "parameters": [
            "codes"
          ],
          "return_type": "void",
          "logic": "Removes debug side tables associated with the given Wasm code objects."
        },
        {
          "name": "GetDebugSideTableIfExists",
          "parameters": [
            "code"
          ],
          "return_type": "DebugSideTable*",
          "logic": "Gets the debug side table if it exists"
        },
        {
          "name": "HasRemovedBreakpoints",
          "parameters": [
            "removed",
            "remaining"
          ],
          "return_type": "bool",
          "logic": "Checks if any of the removed breakpoints aren't present in remaining"
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "isolate"
          ],
          "return_type": "void",
          "logic": "Removes all breakpoints for the isolate"
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Estimates the current memory consumption of the debug info implementation."
        }
      ]
    },
    {
      "name": "DebugInfo",
      "properties": [
        "impl_"
      ],
      "methods": [
        {
          "name": "DebugInfo",
          "parameters": [
            "native_module"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the DebugInfo class."
        },
        {
          "name": "GetNumLocals",
          "parameters": [
            "pc",
            "isolate"
          ],
          "return_type": "int",
          "logic": "Returns the number of locals at the specified program counter."
        },
        {
          "name": "GetLocalValue",
          "parameters": [
            "local",
            "pc",
            "fp",
            "debug_break_fp",
            "isolate"
          ],
          "return_type": "WasmValue",
          "logic": "Returns the local value at the specified program counter."
        },
        {
          "name": "GetStackDepth",
          "parameters": [
            "pc",
            "isolate"
          ],
          "return_type": "int",
          "logic": "Returns the stack depth at the specified program counter."
        },
        {
          "name": "GetStackValue",
          "parameters": [
            "index",
            "pc",
            "fp",
            "debug_break_fp",
            "isolate"
          ],
          "return_type": "WasmValue",
          "logic": "Returns the value on the stack at the specified index and program counter."
        },
        {
          "name": "GetFunctionAtAddress",
          "parameters": [
            "pc",
            "isolate"
          ],
          "return_type": "const wasm::WasmFunction&",
          "logic": "Returns the function at address pc"
        },
        {
          "name": "SetBreakpoint",
          "parameters": [
            "func_index",
            "offset",
            "current_isolate"
          ],
          "return_type": "void",
          "logic": "Sets a breakpoint at a specified function index and offset."
        },
        {
          "name": "IsFrameBlackboxed",
          "parameters": [
            "frame"
          ],
          "return_type": "bool",
          "logic": "Determines whether a given stack frame is blackboxed."
        },
        {
          "name": "PrepareStep",
          "parameters": [
            "frame"
          ],
          "return_type": "bool",
          "logic": "Prepare a WasmFrame for single-step debugging."
        },
        {
          "name": "PrepareStepOutTo",
          "parameters": [
            "frame"
          ],
          "return_type": "void",
          "logic": "Prepares for stepping out to"
        },
        {
          "name": "ClearStepping",
          "parameters": [
            "isolate"
          ],
          "return_type": "void",
          "logic": "Clear stepping"
        },
        {
          "name": "ClearStepping",
          "parameters": [
            "frame"
          ],
          "return_type": "void",
          "logic": "Clears stepping for the current frame"
        },
        {
          "name": "IsStepping",
          "parameters": [
            "frame"
          ],
          "return_type": "bool",
          "logic": "Is this stepping?"
        },
        {
          "name": "RemoveBreakpoint",
          "parameters": [
            "func_index",
            "offset",
            "current_isolate"
          ],
          "return_type": "void",
          "logic": "Removes a breakpoint at a specified function index and offset."
        },
        {
          "name": "RemoveDebugSideTables",
          "parameters": [
            "code"
          ],
          "return_type": "void",
          "logic": "Removes debug side tables."
        },
        {
          "name": "GetDebugSideTableIfExists",
          "parameters": [
            "code"
          ],
          "return_type": "DebugSideTable*",
          "logic": "Returns DebugSideTable pointer if exists"
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "isolate"
          ],
          "return_type": "void",
          "logic": "Remove Isolate"
        },
        {
          "name": "EstimateCurrentMemoryConsumption",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns estimated current memory consumption"
        }
      ]
    },
    {
      "name": "WasmScript",
      "properties": [],
      "methods": [
        {
          "name": "SetBreakPoint",
          "parameters": [
            "script",
            "position",
            "break_point"
          ],
          "return_type": "bool",
          "logic": "Sets a breakpoint at a position in a Wasm script."
        },
        {
          "name": "SetInstrumentationBreakpoint",
          "parameters": [
            "script",
            "break_point"
          ],
          "return_type": "void",
          "logic": "Sets an instrumentation breakpoint (on-entry) in a Wasm script."
        },
        {
          "name": "SetBreakPointOnFirstBreakableForFunction",
          "parameters": [
            "script",
            "func_index",
            "break_point"
          ],
          "return_type": "bool",
          "logic": "Sets a breakpoint on the first breakable location for a given function."
        },
        {
          "name": "SetBreakPointForFunction",
          "parameters": [
            "script",
            "func_index",
            "offset",
            "break_point"
          ],
          "return_type": "bool",
          "logic": "Sets a breakpoint at the specified offset within the function."
        },
        {
          "name": "ClearBreakPoint",
          "parameters": [
            "script",
            "position",
            "break_point"
          ],
          "return_type": "bool",
          "logic": "Clears a breakpoint in a Wasm script."
        },
        {
          "name": "ClearBreakPointById",
          "parameters": [
            "script",
            "breakpoint_id"
          ],
          "return_type": "bool",
          "logic": "Clears a breakpoint given a breakpoint id."
        },
        {
          "name": "ClearAllBreakpoints",
          "parameters": [
            "script"
          ],
          "return_type": "void",
          "logic": "Clears all breakpoints in the specified script."
        },
        {
          "name": "AddBreakpointToInfo",
          "parameters": [
            "script",
            "position",
            "break_point"
          ],
          "return_type": "void",
          "logic": "Adds BreakpointInfo in given position and associate the breakpoint. If BreakPointInfo object existed for the position, the breakpoint is added there."
        },
        {
          "name": "GetPossibleBreakpoints",
          "parameters": [
            "native_module",
            "start",
            "end",
            "locations"
          ],
          "return_type": "bool",
          "logic": "Find possible breakpoint locations within the given range."
        },
        {
          "name": "CheckBreakPoints",
          "parameters": [
            "isolate",
            "script",
            "position",
            "frame_id"
          ],
          "return_type": "MaybeDirectHandle<FixedArray>",
          "logic": "Checks whether any of the breakpoints set at position should trigger."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FindNewPC",
      "parameters": [
        "frame",
        "wasm_code",
        "byte_offset",
        "return_location"
      ],
      "return_type": "Address",
      "logic": "Finds the new program counter (PC) after a breakpoint or Wasm call."
    },
    {
      "name": "FindNextBreakablePosition",
      "parameters": [
        "native_module",
        "func_index",
        "offset_in_func"
      ],
      "return_type": "int",
      "logic": "Return the next breakable position at or after offset_in_func, or 0 if there is none."
    },
    {
      "name": "SetBreakOnEntryFlag",
      "parameters": [
        "script",
        "enabled"
      ],
      "return_type": "void",
      "logic": "Sets the break-on-entry flag on a script and its instances."
    },
    {
      "name": "GetBreakpointPos",
      "parameters": [
        "isolate",
        "break_point_info_or_undef"
      ],
      "return_type": "int",
      "logic": "Retrieve the source position from a BreakPointInfo"
    },
    {
      "name": "FindBreakpointInfoInsertPos",
      "parameters": [
        "isolate",
        "breakpoint_infos",
        "position"
      ],
      "return_type": "int",
      "logic": "Find the index where a breakpoint is to be inserted into an array containing BreakPointInfo's"
    },
    {
      "name": "CheckBreakPoint",
      "parameters": [
        "isolate",
        "break_point",
        "frame_id"
      ],
      "return_type": "bool",
      "logic": "Checks whether the condition associated with the breakpoint evaluates to true."
    }
  ]
}