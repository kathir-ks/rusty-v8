{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/wasm/stacks.cc",
  "imports": [
    "src/wasm/stacks.h",
    "src/base/platform/platform.h",
    "src/execution/simulator.h",
    "src/wasm/wasm-engine.h"
  ],
  "classes": [
    {
      "name": "StackMemory",
      "properties": [
        "limit_",
        "size_",
        "owned_",
        "id_",
        "first_segment_",
        "active_segment_"
      ],
      "methods": [
        {
          "name": "GetCentralStackView",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "StackMemory*",
          "logic": "Creates a StackMemory object that represents a view of the central stack using the SimulatorStack::GetCentralStackView method. Returns a pointer to the new StackMemory object."
        },
        {
          "name": "~StackMemory",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for StackMemory. Deallocates all StackSegments associated with the stack.  If tracing is enabled it prints a message when deleting a stack."
        },
        {
          "name": "StackMemory",
          "parameters": [],
          "return_type": "StackMemory",
          "logic": "Default constructor for StackMemory.  Initializes a new owned stack.  It sets the stack ID, determines initial size based on flags and allocates the first StackSegment."
        },
        {
          "name": "StackMemory",
          "parameters": [
            "uint8_t* limit",
            "size_t size"
          ],
          "return_type": "StackMemory",
          "logic": "Constructor for StackMemory representing a view of the libc stack. It initializes a non-owned StackMemory with the provided limit and size."
        },
        {
          "name": "Grow",
          "parameters": [
            "Address current_fp"
          ],
          "return_type": "bool",
          "logic": "Grows the stack by allocating a new StackSegment. If a next segment already exists, activates that next segment, otherwise creates a new segment (doubling in size until a limit defined by stack_size flag) and links it in. If the stack has reached its growth limit, it returns false. If tracing is enabled, it prints messages when growing the stack."
        },
        {
          "name": "Shrink",
          "parameters": [],
          "return_type": "Address",
          "logic": "Shrinks the stack by deactivating the current StackSegment and switching to the previous segment.  Returns the frame pointer of the deactivated stack segment."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the stack by setting the active segment to the first segment and resetting the size to the first segment's size."
        }
      ]
    },
    {
      "name": "StackMemory::StackSegment",
      "properties": [
        "size_",
        "limit_",
        "next_segment_",
        "prev_segment_",
        "old_fp"
      ],
      "methods": [
        {
          "name": "StackSegment",
          "parameters": [
            "size_t pages"
          ],
          "return_type": "StackSegment",
          "logic": "Constructor for StackSegment. Allocates a page-aligned memory block of the specified size using the platform page allocator."
        },
        {
          "name": "~StackSegment",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for StackSegment. Decommits the memory associated with the StackSegment using the platform page allocator."
        }
      ]
    },
    {
      "name": "StackPool",
      "properties": [
        "freelist_",
        "size_"
      ],
      "methods": [
        {
          "name": "GetOrAllocate",
          "parameters": [],
          "return_type": "std::unique_ptr<StackMemory>",
          "logic": "Retrieves a StackMemory object from the freelist if available, or allocates a new one if the freelist is empty. Shrinks the freelist if necessary to stay within kMaxSize. Zaps the stack with 0xab in debug builds."
        },
        {
          "name": "Add",
          "parameters": [
            "std::unique_ptr<StackMemory> stack"
          ],
          "return_type": "void",
          "logic": "Adds a StackMemory object to the freelist after resetting it. The StackMemory is added regardless of whether the pool exceeds `kMaxSize`. The freelist is lazily shrunk when a stack is acquired."
        },
        {
          "name": "ReleaseFinishedStacks",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases all stacks currently held in the StackPool's freelist by clearing the freelist and resetting the current size."
        },
        {
          "name": "Size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the approximate size of the StackPool in bytes, calculated by summing the size of each stack in the freelist with the cost of maintaining freelist_.`"
        }
      ]
    }
  ],
  "functions": []
}