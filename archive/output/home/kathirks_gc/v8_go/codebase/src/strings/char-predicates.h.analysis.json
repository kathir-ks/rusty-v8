{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/char-predicates.h",
  "imports": [
    "src/base/strings.h",
    "src/strings/unicode.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "AsciiAlphaToLower",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "int",
      "logic": "Converts an ASCII alphabetic character to lowercase.  Presumably returns the character itself if it's not an uppercase ASCII letter."
    },
    {
      "name": "IsCarriageReturn",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a carriage return character."
    },
    {
      "name": "IsLineFeed",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a line feed character."
    },
    {
      "name": "IsAsciiIdentifier",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a valid character for an ASCII identifier."
    },
    {
      "name": "IsAlphaNumeric",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is an alphanumeric character."
    },
    {
      "name": "IsDecimalDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a decimal digit (0-9)."
    },
    {
      "name": "IsHexDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a hexadecimal digit (0-9, A-F, a-f)."
    },
    {
      "name": "IsOctalDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is an octal digit (0-7)."
    },
    {
      "name": "IsBinaryDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a binary digit (0 or 1)."
    },
    {
      "name": "IsRegExpWord",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is considered a word character in regular expressions."
    },
    {
      "name": "IsAsciiLower",
      "parameters": [
        "base::uc32 ch"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is an ASCII lowercase letter."
    },
    {
      "name": "IsAsciiUpper",
      "parameters": [
        "base::uc32 ch"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is an ASCII uppercase letter."
    },
    {
      "name": "ToAsciiUpper",
      "parameters": [
        "base::uc32 ch"
      ],
      "return_type": "base::uc32",
      "logic": "Converts an ASCII character to uppercase.  Returns the character itself if not an ASCII letter."
    },
    {
      "name": "ToAsciiLower",
      "parameters": [
        "base::uc32 ch"
      ],
      "return_type": "base::uc32",
      "logic": "Converts an ASCII character to lowercase.  Returns the character itself if not an ASCII letter."
    },
    {
      "name": "IsIdentifierStart",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point can start an identifier (variable name)."
    },
    {
      "name": "IsIdentifierStartSlow",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point can start an identifier (variable name), using the `unibrow::ID_Start::Is(c)` check, or returning false if `c` is outside the BMP (Basic Multilingual Plane) range and `V8_INTL_SUPPORT` is not defined."
    },
    {
      "name": "IsIdentifierPart",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point can be part of an identifier (variable name)."
    },
    {
      "name": "IsIdentifierPartSlow",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point can be part of an identifier (variable name) using `unibrow::ID_Start::Is(c) || unibrow::ID_Continue::Is(c)`, or returns false if c is outside the BMP (Basic Multilingual Plane) range and `V8_INTL_SUPPORT` is not defined."
    },
    {
      "name": "IsWhiteSpace",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a whitespace character."
    },
    {
      "name": "IsWhiteSpaceSlow",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is a whitespace character using the `unibrow::WhiteSpace::Is(c)` check."
    },
    {
      "name": "IsWhiteSpaceOrLineTerminator",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is either a whitespace character or a line terminator."
    },
    {
      "name": "IsWhiteSpaceOrLineTerminatorSlow",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given Unicode code point is either a whitespace character or a line terminator. Relies on `IsWhiteSpaceSlow` and `unibrow::IsLineTerminator(c)`."
    },
    {
      "name": "IsLineTerminatorSequence",
      "parameters": [
        "base::uc32 c",
        "base::uc32 next"
      ],
      "return_type": "bool",
      "logic": "Checks if a given sequence of two Unicode code points represents a line terminator sequence (e.g., CR followed by LF)."
    }
  ]
}