{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/unicode.cc",
  "imports": [
    "src/strings/unicode.h",
    "stdio.h",
    "stdlib.h",
    "vector",
    "src/strings/unicode-inl.h",
    "third_party/utf8-decoder/generalized-utf8-decoder.h",
    "unicode/uchar.h"
  ],
  "classes": [
    {
      "name": "MultiCharacterSpecialCase",
      "properties": [
        "kEndOfEncoding",
        "chars"
      ],
      "methods": []
    },
    {
      "name": "Utf8",
      "properties": [],
      "methods": [
        {
          "name": "CalculateValue",
          "parameters": [
            "const uint8_t* str",
            "size_t max_length",
            "size_t* cursor"
          ],
          "return_type": "uchar",
          "logic": "Decodes an UTF-8 sequence from a byte string. It iterates through the string until a complete UTF-8 character is decoded, updating the cursor position.  Handles incomplete sequences by returning a replacement character."
        },
        {
          "name": "ValueOfIncrementalFinish",
          "parameters": [
            "State* state"
          ],
          "return_type": "uchar",
          "logic": "Finishes incremental decoding, ensuring that unfinished sequences are replaced by a replacement char (kBadChar)."
        },
        {
          "name": "ValidateEncoding",
          "parameters": [
            "const uint8_t* bytes",
            "size_t length"
          ],
          "return_type": "bool",
          "logic": "Validates the UTF-8 encoding of a byte string. It uses a state machine to track the validity of the encoding as it iterates through the bytes. Returns true if the string is valid UTF-8; false otherwise."
        }
      ]
    },
    {
      "name": "Utf16",
      "properties": [],
      "methods": [
        {
          "name": "ReplaceUnpairedSurrogates",
          "parameters": [
            "const uint16_t* source_code_units",
            "uint16_t* dest_code_units",
            "size_t length"
          ],
          "return_type": "void",
          "logic": "Replaces unpaired surrogates in a UTF-16 string with the replacement character (U+FFFD).  It iterates through the string, identifies leading and trailing surrogates, and replaces unpaired surrogates or surrogate pairs with the appropriate replacements."
        }
      ]
    },
    {
      "name": "Wtf8",
      "properties": [],
      "methods": [
        {
          "name": "ValidateEncoding",
          "parameters": [
            "const uint8_t* bytes",
            "size_t length"
          ],
          "return_type": "bool",
          "logic": "Validates the WTF-8 encoding of a byte string.  It checks for invalid surrogate pairs and uses a DFA decoder. Returns true if the string is valid WTF-8; false otherwise."
        },
        {
          "name": "ScanForSurrogates",
          "parameters": [
            "v8::base::Vector<const uint8_t> wtf8",
            "std::vector<size_t>* surrogate_offsets"
          ],
          "return_type": "void",
          "logic": "Scans a WTF-8 string for surrogates and records the byte offsets of each encoded surrogate in the provided vector."
        }
      ]
    },
    {
      "name": "Uppercase",
      "properties": [],
      "methods": [
        {
          "name": "Is",
          "parameters": [
            "uchar c"
          ],
          "return_type": "bool",
          "logic": "Determines if a given Unicode character is an uppercase letter.  Uses either the ICU library if `V8_INTL_SUPPORT` is defined, or a series of lookup tables otherwise."
        }
      ]
    },
    {
      "name": "Letter",
      "properties": [],
      "methods": [
        {
          "name": "Is",
          "parameters": [
            "uchar c"
          ],
          "return_type": "bool",
          "logic": "Determines if a given Unicode character is a letter.  Uses either the ICU library if `V8_INTL_SUPPORT` is defined, or a series of lookup tables otherwise."
        }
      ]
    },
    {
      "name": "ID_Start",
      "properties": [],
      "methods": [
        {
          "name": "Is",
          "parameters": [
            "uchar c"
          ],
          "return_type": "bool",
          "logic": "Determines if a given Unicode character is valid as the starting character of an identifier. Uses a series of lookup tables."
        }
      ]
    },
    {
      "name": "ID_Continue",
      "properties": [],
      "methods": [
        {
          "name": "Is",
          "parameters": [
            "uchar c"
          ],
          "return_type": "bool",
          "logic": "Determines if a given Unicode character is valid as a continuation character of an identifier. Uses a series of lookup tables."
        }
      ]
    },
    {
      "name": "WhiteSpace",
      "properties": [],
      "methods": [
        {
          "name": "Is",
          "parameters": [
            "uchar c"
          ],
          "return_type": "bool",
          "logic": "Determines if a given Unicode character is whitespace. Uses a series of lookup tables."
        }
      ]
    },
    {
      "name": "ToLowercase",
      "properties": [],
      "methods": [
        {
          "name": "Convert",
          "parameters": [
            "uchar c",
            "uchar n",
            "uchar* result",
            "bool* allow_caching_ptr"
          ],
          "return_type": "int",
          "logic": "Converts a Unicode character to its lowercase equivalent. It uses a series of lookup tables and special case handling. The function also returns the number of characters written to the result buffer and modifies allow_caching_ptr to indicate if result can be cached"
        }
      ]
    },
    {
      "name": "ToUppercase",
      "properties": [],
      "methods": [
        {
          "name": "Convert",
          "parameters": [
            "uchar c",
            "uchar n",
            "uchar* result",
            "bool* allow_caching_ptr"
          ],
          "return_type": "int",
          "logic": "Converts a Unicode character to its uppercase equivalent. It uses a series of lookup tables and special case handling. The function also returns the number of characters written to the result buffer and modifies allow_caching_ptr to indicate if result can be cached."
        }
      ]
    },
    {
      "name": "Ecma262Canonicalize",
      "properties": [],
      "methods": [
        {
          "name": "Convert",
          "parameters": [
            "uchar c",
            "uchar n",
            "uchar* result",
            "bool* allow_caching_ptr"
          ],
          "return_type": "int",
          "logic": "Canonicalizes a Unicode character according to ECMA-262 (JavaScript) specifications.  It uses lookup tables and can handle multi-character transformations."
        }
      ]
    },
    {
      "name": "Ecma262UnCanonicalize",
      "properties": [],
      "methods": [
        {
          "name": "Convert",
          "parameters": [
            "uchar c",
            "uchar n",
            "uchar* result",
            "bool* allow_caching_ptr"
          ],
          "return_type": "int",
          "logic": "UnCanonicalizes a Unicode character according to ECMA-262 (JavaScript) specifications. It uses lookup tables and can handle multi-character transformations"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "TableGet",
      "parameters": [
        "const int32_t* table",
        "int index"
      ],
      "return_type": "uchar",
      "logic": "Retrieves a value from a character table at a given index, scaled by a template parameter D."
    },
    {
      "name": "GetEntry",
      "parameters": [
        "int32_t entry"
      ],
      "return_type": "uchar",
      "logic": "Extracts the lower bits of an entry representing a character value."
    },
    {
      "name": "IsStart",
      "parameters": [
        "int32_t entry"
      ],
      "return_type": "bool",
      "logic": "Checks if an entry is a start entry by examining its highest bit."
    },
    {
      "name": "LookupPredicate",
      "parameters": [
        "const int32_t* table",
        "uint16_t size",
        "uchar chr"
      ],
      "return_type": "bool",
      "logic": "Looks up a character in a Unicode table using a combination of binary and interpolation search."
    },
    {
      "name": "LookupMapping",
      "parameters": [
        "const int32_t* table",
        "uint16_t size",
        "const MultiCharacterSpecialCase<kW>* multi_chars",
        "uchar chr",
        "uchar next",
        "uchar* result",
        "bool* allow_caching_ptr"
      ],
      "return_type": "int",
      "logic": "Looks up the mapping for a given character in the specified table, handling special cases, linear ranges, and really special cases, returning the number of characters written to the result buffer. Also updates allow_caching_ptr accordingly"
    }
  ]
}