{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/unicode-inl.h",
  "imports": [
    "src/base/logging.h",
    "src/strings/unicode.h",
    "src/utils/utils.h"
  ],
  "classes": [
    {
      "name": "Predicate",
      "properties": [
        "entries_[code_point & kMask]"
      ],
      "methods": [
        {
          "name": "get",
          "parameters": [
            "uchar code_point"
          ],
          "return_type": "bool",
          "logic": "Checks if a code point's property is cached. If cached, returns the cached value; otherwise, calculates the value and caches it."
        },
        {
          "name": "CalculateValue",
          "parameters": [
            "uchar code_point"
          ],
          "return_type": "bool",
          "logic": "Calculates the value of a predicate for a given code point, caches the result, and returns the value."
        }
      ]
    },
    {
      "name": "Mapping",
      "properties": [
        "entries_[c & kMask]"
      ],
      "methods": [
        {
          "name": "get",
          "parameters": [
            "uchar c",
            "uchar n",
            "uchar* result"
          ],
          "return_type": "int",
          "logic": "Checks if a mapping is cached for a code point. If cached, returns the mapped value; otherwise, calculates the mapping and caches it."
        },
        {
          "name": "CalculateValue",
          "parameters": [
            "uchar c",
            "uchar n",
            "uchar* result"
          ],
          "return_type": "int",
          "logic": "Calculates the mapping for a given code point, caches the result if caching is allowed and the length is appropriate, and returns the length of the mapping."
        }
      ]
    },
    {
      "name": "Utf16",
      "properties": [],
      "methods": [
        {
          "name": "HasUnpairedSurrogate",
          "parameters": [
            "const uint16_t* code_units",
            "size_t length"
          ],
          "return_type": "bool",
          "logic": "Checks if a sequence of UTF-16 code units contains any unpaired surrogate code points."
        }
      ]
    },
    {
      "name": "Utf8",
      "properties": [],
      "methods": [
        {
          "name": "ValueOfIncremental",
          "parameters": [
            "const uint8_t** cursor",
            "State* state",
            "Utf8IncrementalBuffer* buffer"
          ],
          "return_type": "uchar",
          "logic": "Decodes UTF-8 bytes incrementally, handling incomplete sequences using a state machine and a buffer. Returns the decoded Unicode character or an error code."
        },
        {
          "name": "EncodeOneByte",
          "parameters": [
            "char* str",
            "uint8_t c"
          ],
          "return_type": "unsigned",
          "logic": "Encodes a single byte character into UTF-8 format, returning the number of bytes written (1 or 2)."
        },
        {
          "name": "Encode",
          "parameters": [
            "char* str",
            "uchar c",
            "int previous",
            "bool replace_invalid"
          ],
          "return_type": "unsigned",
          "logic": "Encodes a UTF-16 code unit into UTF-8 format, handling surrogate pairs and invalid characters (optionally replacing them). Returns the number of bytes written (1 to 4)."
        },
        {
          "name": "ValueOf",
          "parameters": [
            "const uint8_t* bytes",
            "size_t length",
            "size_t* cursor"
          ],
          "return_type": "uchar",
          "logic": "Decodes the first UTF-8 byte sequence and returns the corresponding Unicode character. It advances the cursor and returns a default value on error."
        },
        {
          "name": "LengthOneByte",
          "parameters": [
            "uint8_t c"
          ],
          "return_type": "unsigned",
          "logic": "Returns the length in bytes of a one byte UTF-8 character"
        },
        {
          "name": "Length",
          "parameters": [
            "uchar c",
            "int previous"
          ],
          "return_type": "unsigned",
          "logic": "Returns the length in bytes of the given UTF-16 character when encoded as UTF-8, considering surrogate pairs."
        },
        {
          "name": "IsValidCharacter",
          "parameters": [
            "uchar c"
          ],
          "return_type": "bool",
          "logic": "Checks if a given Unicode code point is a valid character (excluding certain ranges and reserved characters)."
        },
        {
          "name": "Encode",
          "parameters": [
            "v8::base::Vector<const Char> string",
            "char* buffer",
            "size_t capacity",
            "bool write_null",
            "bool replace_invalid_utf8"
          ],
          "return_type": "Utf8::EncodingResult",
          "logic": "Encodes a string of Char type (either 8-bit or 16-bit) into UTF-8, writing to a buffer with a given capacity. It handles null termination and optionally replaces invalid UTF-8 sequences. Returns the number of bytes written and characters processed."
        }
      ]
    }
  ],
  "functions": []
}