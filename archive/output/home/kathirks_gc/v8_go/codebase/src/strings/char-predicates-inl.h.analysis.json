{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/strings/char-predicates-inl.h",
  "imports": [
    "src/base/bounds.h",
    "src/strings/char-predicates.h",
    "src/utils/utils.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "AsciiAlphaToLower",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "int",
      "logic": "Converts an ASCII character to lowercase if it's an alphabet, otherwise returns a value outside the alphabet range. Ignores locale."
    },
    {
      "name": "IsCarriageReturn",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a carriage return character (0x000D)."
    },
    {
      "name": "IsLineFeed",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a line feed character (0x000A)."
    },
    {
      "name": "IsAsciiIdentifier",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a valid ASCII identifier character (alphanumeric, '$', or '_')."
    },
    {
      "name": "IsAlphaNumeric",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is alphanumeric (letter or digit)."
    },
    {
      "name": "IsDecimalDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a decimal digit ('0' to '9')."
    },
    {
      "name": "IsHexDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a hexadecimal digit (0-9, a-f, A-F)."
    },
    {
      "name": "IsOctalDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is an octal digit ('0' to '7')."
    },
    {
      "name": "IsNonOctalDecimalDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a decimal digit that is not an octal digit ('8' or '9')."
    },
    {
      "name": "IsBinaryDigit",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a binary digit ('0' or '1')."
    },
    {
      "name": "IsAscii",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is an ASCII character (0-127)."
    },
    {
      "name": "IsAsciiLower",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a lowercase ASCII character ('a' to 'z')."
    },
    {
      "name": "IsAsciiUpper",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is an uppercase ASCII character ('A' to 'Z')."
    },
    {
      "name": "ToAsciiUpper",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "base::uc32",
      "logic": "Converts an ASCII character to uppercase if it is lowercase; otherwise, returns the character unchanged."
    },
    {
      "name": "ToAsciiLower",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "base::uc32",
      "logic": "Converts an ASCII character to lowercase if it is uppercase; otherwise, returns the character unchanged."
    },
    {
      "name": "IsRegExpWord",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a valid RegExp word character (alphanumeric or '_')."
    },
    {
      "name": "IsOneByteIDStart",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the character can start a one-byte identifier according to Unicode standard (ID_Start) plus '$' and '_'."
    },
    {
      "name": "IsOneByteIDContinue",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the character can continue a one-byte identifier according to Unicode standard (ID_Continue) plus '$' and '_'."
    },
    {
      "name": "IsOneByteWhitespace",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character is a one-byte whitespace character (tab, vertical tab, form feed, space, or no-break space)."
    },
    {
      "name": "BuildOneByteCharFlags",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "uint8_t",
      "logic": "Builds a bitmask of character flags (e.g., kIsIdentifierStart, kIsWhiteSpace) for a one-byte character."
    },
    {
      "name": "IsIdentifierStart",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the character can start an identifier. Uses a lookup table for one-byte characters and calls IsIdentifierStartSlow for others."
    },
    {
      "name": "IsIdentifierPart",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the character can be part of an identifier. Uses a lookup table for one-byte characters and calls IsIdentifierPartSlow for others."
    },
    {
      "name": "IsWhiteSpace",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the character is a whitespace character. Uses a lookup table for one-byte characters and calls IsWhiteSpaceSlow for others."
    },
    {
      "name": "IsWhiteSpaceOrLineTerminator",
      "parameters": [
        "base::uc32 c"
      ],
      "return_type": "bool",
      "logic": "Checks if the character is a whitespace character or a line terminator. Uses a lookup table for one-byte characters and calls IsWhiteSpaceOrLineTerminatorSlow for others."
    },
    {
      "name": "IsLineTerminatorSequence",
      "parameters": [
        "base::uc32 c",
        "base::uc32 next"
      ],
      "return_type": "bool",
      "logic": "Checks if the given character, combined with the next character, forms a line terminator sequence (\n, \r, \r\n, U+2028, U+2029)."
    }
  ]
}