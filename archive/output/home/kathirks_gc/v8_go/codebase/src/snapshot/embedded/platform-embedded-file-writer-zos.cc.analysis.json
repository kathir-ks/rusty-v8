{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/platform-embedded-file-writer-zos.cc",
  "imports": [
    "src/snapshot/embedded/platform-embedded-file-writer-zos.h",
    "stdarg.h",
    "string"
  ],
  "classes": [
    {
      "name": "PlatformEmbeddedFileWriterZOS",
      "properties": [],
      "methods": [
        {
          "name": "DeclareLabelProlog",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Writes assembly code to declare a label prologue for z/OS."
        },
        {
          "name": "DeclareLabelEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes assembly code to declare a label epilogue for z/OS."
        },
        {
          "name": "DeclareUint32",
          "parameters": [
            "const char* name",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Declares a global uint32 variable with a specific value in the assembly code for z/OS.  Includes prologue and epilogue label declarations."
        },
        {
          "name": "DeclareSymbolGlobal",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Writes assembly comment indicating a global symbol definition."
        },
        {
          "name": "AlignToCodeAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "No-op for z/OS.  Does not align to code alignment."
        },
        {
          "name": "AlignToDataAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "No-op for z/OS. Does not align to data alignment."
        },
        {
          "name": "Comment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Writes a comment to the assembly file."
        },
        {
          "name": "DeclareLabel",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a label in the assembly code."
        },
        {
          "name": "SourceInfo",
          "parameters": [
            "int fileid",
            "const char* filename",
            "int line"
          ],
          "return_type": "void",
          "logic": "Writes assembly comment containing source file information."
        },
        {
          "name": "DeclareFunctionBegin",
          "parameters": [
            "const char* name",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Declares the beginning of a function in the assembly code."
        },
        {
          "name": "DeclareFunctionEnd",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Placeholder for the end of a function (Not used)."
        },
        {
          "name": "HexLiteral",
          "parameters": [
            "uint64_t value"
          ],
          "return_type": "int",
          "logic": "Writes a 64-bit hexadecimal literal to the assembly file."
        },
        {
          "name": "FilePrologue",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the assembly file prologue for z/OS."
        },
        {
          "name": "DeclareExternalFilename",
          "parameters": [
            "int fileid",
            "const char* filename"
          ],
          "return_type": "void",
          "logic": "Placeholder for declaring external filenames (Not used)."
        },
        {
          "name": "FileEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the assembly file epilogue for z/OS."
        },
        {
          "name": "IndentedDataDirective",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "int",
          "logic": "Placeholder for IndentedDataDirective (Not used)."
        },
        {
          "name": "ByteChunkDataDirective",
          "parameters": [],
          "return_type": "DataDirective",
          "logic": "Returns the data directive used for byte chunks (kQuad)."
        },
        {
          "name": "WriteByteChunk",
          "parameters": [
            "const uint8_t* data"
          ],
          "return_type": "int",
          "logic": "Writes a byte chunk as a hexadecimal literal (kQuad = 8 bytes)."
        },
        {
          "name": "SectionText",
          "parameters": [],
          "return_type": "void",
          "logic": "Placeholder for SectionText (Not used)."
        },
        {
          "name": "SectionRoData",
          "parameters": [],
          "return_type": "void",
          "logic": "Placeholder for SectionRoData (Not used)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "hlasmPrintLine",
      "parameters": [
        "FILE* fp",
        "const char* fmt",
        "..."
      ],
      "return_type": "int",
      "logic": "Prints a line to the assembly file, handling line length and continuation characters, following HLASM conventions."
    }
  ]
}