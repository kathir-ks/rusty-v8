{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/platform-embedded-file-writer-aix.h",
  "imports": [
    "src/base/macros.h",
    "src/snapshot/embedded/platform-embedded-file-writer-base.h"
  ],
  "classes": [
    {
      "name": "PlatformEmbeddedFileWriterAIX",
      "properties": [
        "target_arch_",
        "target_os_"
      ],
      "methods": [
        {
          "name": "PlatformEmbeddedFileWriterAIX",
          "parameters": [
            "EmbeddedTargetArch target_arch",
            "EmbeddedTargetOs target_os"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the target architecture and operating system and asserts that the target OS is AIX. Uses the target_arch_ and target_os_ to silence compiler warnings about unused parameters."
        },
        {
          "name": "SectionText",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual function to write the text section (code)."
        },
        {
          "name": "SectionRoData",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual function to write the read-only data section."
        },
        {
          "name": "AlignToCodeAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual function to align the output to code alignment requirements."
        },
        {
          "name": "AlignToDataAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual function to align the output to data alignment requirements."
        },
        {
          "name": "DeclareUint32",
          "parameters": [
            "const char* name",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Virtual function to declare a 32-bit unsigned integer with a given name and value."
        },
        {
          "name": "DeclareSymbolGlobal",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Virtual function to declare a symbol as global."
        },
        {
          "name": "DeclareLabel",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Virtual function to declare a label."
        },
        {
          "name": "SourceInfo",
          "parameters": [
            "int fileid",
            "const char* filename",
            "int line"
          ],
          "return_type": "void",
          "logic": "Virtual function to add source code location information (file and line number)."
        },
        {
          "name": "DeclareFunctionBegin",
          "parameters": [
            "const char* name",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Virtual function to mark the beginning of a function with its name and size."
        },
        {
          "name": "DeclareFunctionEnd",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Virtual function to mark the end of a function with its name."
        },
        {
          "name": "Comment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Virtual function to add a comment to the output."
        },
        {
          "name": "FilePrologue",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual function to write the file prologue."
        },
        {
          "name": "DeclareExternalFilename",
          "parameters": [
            "int fileid",
            "const char* filename"
          ],
          "return_type": "void",
          "logic": "Virtual function to declare an external filename with an ID."
        },
        {
          "name": "FileEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual function to write the file epilogue."
        },
        {
          "name": "IndentedDataDirective",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "int",
          "logic": "Virtual function to write a data directive with indentation."
        },
        {
          "name": "ByteChunkDataDirective",
          "parameters": [],
          "return_type": "DataDirective",
          "logic": "Virtual function to get the data directive for byte chunks."
        }
      ]
    }
  ],
  "functions": []
}