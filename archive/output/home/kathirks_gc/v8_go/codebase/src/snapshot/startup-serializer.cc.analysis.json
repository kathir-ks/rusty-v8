{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/startup-serializer.cc",
  "imports": [
    "src/execution/v8threads.h",
    "src/handles/global-handles-inl.h",
    "src/heap/heap-inl.h",
    "src/heap/read-only-heap.h",
    "src/objects/contexts.h",
    "src/objects/objects-inl.h",
    "src/objects/slots.h",
    "src/snapshot/read-only-serializer.h",
    "src/snapshot/shared-heap-serializer.h",
    "src/snapshot/startup-serializer.h"
  ],
  "classes": [
    {
      "name": "SanitizeIsolateScope",
      "properties": [
        "isolate_",
        "feedback_vectors_for_profiling_tools_",
        "detached_contexts_"
      ],
      "methods": [
        {
          "name": "SanitizeIsolateScope",
          "parameters": [
            "Isolate* isolate",
            "bool allow_active_isolate_for_testing",
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "void",
          "logic": "Constructor. Saves the current state of certain Isolate properties (feedback_vectors_for_profiling_tools_, detached_contexts_) and sets them to read-only defaults to prevent context-specific objects from being serialized. This is to ensure a clean state during snapshot creation."
        },
        {
          "name": "~SanitizeIsolateScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Restores the saved state of the Isolate properties that were modified in the constructor."
        }
      ]
    },
    {
      "name": "StartupSerializer",
      "properties": [
        "shared_heap_serializer_",
        "accessor_infos_",
        "function_template_infos_"
      ],
      "methods": [
        {
          "name": "StartupSerializer",
          "parameters": [
            "Isolate* isolate",
            "Snapshot::SerializerFlags flags",
            "SharedHeapSerializer* shared_heap_serializer"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the serializer, sets up the code address map, and serializes external references."
        },
        {
          "name": "~StartupSerializer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Restores external reference redirectors and outputs statistics about the serialization process."
        },
        {
          "name": "SerializeObjectImpl",
          "parameters": [
            "Handle<HeapObject> obj",
            "SlotType slot_type"
          ],
          "return_type": "void",
          "logic": "Serializes a HeapObject. Handles hot objects, roots, read-only object references, shared heap object cache, back references, and special cases for accessor infos, function template infos, scripts, and shared function infos.  If none of those apply, then uses ObjectSerializer to serialize the object."
        },
        {
          "name": "SerializeWeakReferencesAndDeferred",
          "parameters": [],
          "return_type": "void",
          "logic": "Serializes weak references and deferred objects. Adds a terminating 'undefined' entry to the startup object cache."
        },
        {
          "name": "SerializeStrongReferences",
          "parameters": [
            "const DisallowGarbageCollection& no_gc"
          ],
          "return_type": "void",
          "logic": "Serializes strong references. Uses SanitizeIsolateScope to clear problematic isolate references. Iterates over smi roots and other roots."
        },
        {
          "name": "SerializeUsingSharedHeapObjectCache",
          "parameters": [
            "SnapshotByteSink* sink",
            "Handle<HeapObject> obj"
          ],
          "return_type": "bool",
          "logic": "Delegates to the shared_heap_serializer_ to serialize using the shared heap object cache."
        },
        {
          "name": "SerializeUsingStartupObjectCache",
          "parameters": [
            "SnapshotByteSink* sink",
            "Handle<HeapObject> obj"
          ],
          "return_type": "void",
          "logic": "Serializes an object using the startup object cache."
        },
        {
          "name": "CheckNoDirtyFinalizationRegistries",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks if there are any dirty finalization registries. This should be empty during startup snapshot creation."
        }
      ]
    },
    {
      "name": "SerializedHandleChecker",
      "properties": [
        "isolate_",
        "serialized_",
        "ok_"
      ],
      "methods": [
        {
          "name": "SerializedHandleChecker",
          "parameters": [
            "Isolate* isolate",
            "std::vector<Tagged<Context>>* contexts"
          ],
          "return_type": "void",
          "logic": "Constructor. Adds the serialized objects from the isolate and given contexts into the set."
        },
        {
          "name": "AddToSet",
          "parameters": [
            "Tagged<FixedArray> serialized"
          ],
          "return_type": "void",
          "logic": "Adds all handles within the given FixedArray to the internal `serialized_` set."
        },
        {
          "name": "VisitRootPointers",
          "parameters": [
            "Root root",
            "const char* description",
            "FullObjectSlot start",
            "FullObjectSlot end"
          ],
          "return_type": "void",
          "logic": "Iterates through the range of FullObjectSlots, checking if each object pointed to is present in the `serialized_` set. If not, it prints an error message and sets `ok_` to false."
        },
        {
          "name": "CheckGlobalAndEternalHandles",
          "parameters": [],
          "return_type": "bool",
          "logic": "Iterates through global and eternal handles, checking that each has been serialized. Returns true if all handles are serialized, otherwise false."
        }
      ]
    }
  ],
  "functions": []
}