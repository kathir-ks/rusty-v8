{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/platform-embedded-file-writer-generic.h",
  "imports": [
    "src/common/globals.h",
    "src/snapshot/embedded/platform-embedded-file-writer-base.h"
  ],
  "classes": [
    {
      "name": "PlatformEmbeddedFileWriterGeneric",
      "properties": [
        "target_arch_",
        "target_os_"
      ],
      "methods": [
        {
          "name": "PlatformEmbeddedFileWriterGeneric",
          "parameters": [
            "EmbeddedTargetArch target_arch",
            "EmbeddedTargetOs target_os"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the target_arch_ and target_os_ member variables. Performs a DCHECK to ensure the target OS is ChromeOS, Fuchsia, or Generic."
        },
        {
          "name": "SectionText",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes section text.  Implementation not provided in header."
        },
        {
          "name": "SectionRoData",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes read-only data section. Implementation not provided in header."
        },
        {
          "name": "AlignToCodeAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to the code alignment boundary. Implementation not provided in header."
        },
        {
          "name": "AlignToPageSizeIfNeeded",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to the page size if needed. Implementation not provided in header."
        },
        {
          "name": "AlignToDataAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the output to the data alignment boundary. Implementation not provided in header."
        },
        {
          "name": "DeclareUint32",
          "parameters": [
            "const char* name",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Declares a 32-bit unsigned integer variable with the given name and value. Implementation not provided in header."
        },
        {
          "name": "DeclareSymbolGlobal",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a symbol as global. Implementation not provided in header."
        },
        {
          "name": "DeclareLabel",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a label with the given name. Implementation not provided in header."
        },
        {
          "name": "SourceInfo",
          "parameters": [
            "int fileid",
            "const char* filename",
            "int line"
          ],
          "return_type": "void",
          "logic": "Emits source information (file ID, filename, line number). Implementation not provided in header."
        },
        {
          "name": "DeclareFunctionBegin",
          "parameters": [
            "const char* name",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Declares the beginning of a function with the given name and size. Implementation not provided in header."
        },
        {
          "name": "DeclareFunctionEnd",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares the end of a function with the given name. Implementation not provided in header."
        },
        {
          "name": "Comment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Writes a comment to the output. Implementation not provided in header."
        },
        {
          "name": "FilePrologue",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the file prologue. Implementation not provided in header."
        },
        {
          "name": "DeclareExternalFilename",
          "parameters": [
            "int fileid",
            "const char* filename"
          ],
          "return_type": "void",
          "logic": "Declares an external filename with the given ID and name. Implementation not provided in header."
        },
        {
          "name": "FileEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Writes the file epilogue. Implementation not provided in header."
        },
        {
          "name": "IndentedDataDirective",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "int",
          "logic": "Writes an indented data directive. Implementation not provided in header."
        },
        {
          "name": "ByteChunkDataDirective",
          "parameters": [],
          "return_type": "DataDirective",
          "logic": "Returns the data directive for byte chunks. Implementation not provided in header."
        }
      ]
    }
  ],
  "functions": []
}