{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/roots-serializer.h",
  "imports": [
    "<bitset>",
    "src/objects/visitors.h",
    "src/snapshot/serializer.h"
  ],
  "classes": [
    {
      "name": "RootsSerializer",
      "properties": [
        "first_root_to_be_serialized_",
        "root_has_been_serialized_",
        "object_cache_index_map_",
        "can_be_rehashed_"
      ],
      "methods": [
        {
          "name": "RootsSerializer",
          "parameters": [
            "Isolate* isolate",
            "Snapshot::SerializerFlags flags",
            "RootIndex first_root_to_be_serialized"
          ],
          "return_type": "void",
          "logic": "Constructor for the RootsSerializer.  It initializes the serializer with the isolate, flags, and the index of the first root to be serialized.  Roots before first_root_to_be_serialized are assumed to be already serialized."
        },
        {
          "name": "RootsSerializer",
          "parameters": [
            "const RootsSerializer&"
          ],
          "return_type": "RootsSerializer&",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const RootsSerializer&"
          ],
          "return_type": "RootsSerializer&",
          "logic": "Deleted assignment operator."
        },
        {
          "name": "can_be_rehashed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the serializer only serialized hash tables that can be rehashed."
        },
        {
          "name": "root_has_been_serialized",
          "parameters": [
            "RootIndex root_index"
          ],
          "return_type": "bool",
          "logic": "Checks if a root with the given index has been serialized."
        },
        {
          "name": "IsRootAndHasBeenSerialized",
          "parameters": [
            "Tagged<HeapObject> obj"
          ],
          "return_type": "bool",
          "logic": "Checks if the given object is a root and if it has already been serialized."
        },
        {
          "name": "CheckRehashability",
          "parameters": [
            "Tagged<HeapObject> obj"
          ],
          "return_type": "void",
          "logic": "Checks if the passed object is rehashable.  This is likely related to hash table serialization."
        },
        {
          "name": "SerializeInObjectCache",
          "parameters": [
            "Handle<HeapObject> object"
          ],
          "return_type": "int",
          "logic": "Serializes the given object if it hasn't been seen before and returns its cache index."
        },
        {
          "name": "object_cache_empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the object cache is empty."
        },
        {
          "name": "VisitRootPointers",
          "parameters": [
            "Root root",
            "const char* description",
            "FullObjectSlot start",
            "FullObjectSlot end"
          ],
          "return_type": "void",
          "logic": "Overrides the VisitRootPointers method from the base class. This method is responsible for visiting root pointers within a specified range."
        },
        {
          "name": "Synchronize",
          "parameters": [
            "VisitorSynchronization::SyncTag tag"
          ],
          "return_type": "void",
          "logic": "Overrides the Synchronize method from the base class, used for synchronization during the serialization process."
        }
      ]
    }
  ],
  "functions": []
}