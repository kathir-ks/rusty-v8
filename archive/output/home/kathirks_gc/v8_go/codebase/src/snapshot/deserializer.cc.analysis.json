{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/deserializer.cc",
  "imports": [
    "src/snapshot/deserializer.h",
    "inttypes.h",
    "src/base/logging.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/reloc-info-inl.h",
    "src/common/assert-scope.h",
    "src/common/globals.h",
    "src/execution/isolate.h",
    "src/handles/global-handles-inl.h",
    "src/heap/heap-inl.h",
    "src/heap/heap-write-barrier-inl.h",
    "src/heap/heap-write-barrier.h",
    "src/heap/heap.h",
    "src/heap/local-heap-inl.h",
    "src/logging/local-logger.h",
    "src/logging/log.h",
    "src/objects/backing-store.h",
    "src/objects/js-array-buffer-inl.h",
    "src/objects/maybe-object.h",
    "src/objects/objects-body-descriptors-inl.h",
    "src/objects/objects.h",
    "src/objects/slots.h",
    "src/objects/string.h",
    "src/roots/roots.h",
    "src/sandbox/js-dispatch-table-inl.h",
    "src/snapshot/embedded/embedded-data-inl.h",
    "src/snapshot/references.h",
    "src/snapshot/serializer-deserializer.h",
    "src/snapshot/shared-heap-serializer.h",
    "src/snapshot/snapshot-data.h",
    "src/utils/memcopy.h",
    "src/objects/object-macros.h"
  ],
  "classes": [
    {
      "name": "SlotAccessorForHeapObject",
      "properties": [
        "object_",
        "offset_"
      ],
      "methods": [
        {
          "name": "ForSlotIndex",
          "parameters": [
            "Handle<HeapObject> object",
            "int index"
          ],
          "return_type": "SlotAccessorForHeapObject",
          "logic": "Creates a SlotAccessor for a slot in a HeapObject given its index."
        },
        {
          "name": "ForSlotOffset",
          "parameters": [
            "Handle<HeapObject> object",
            "int offset"
          ],
          "return_type": "SlotAccessorForHeapObject",
          "logic": "Creates a SlotAccessor for a slot in a HeapObject given its offset."
        },
        {
          "name": "slot",
          "parameters": [],
          "return_type": "MaybeObjectSlot",
          "logic": "Returns the MaybeObjectSlot."
        },
        {
          "name": "external_pointer_slot",
          "parameters": [
            "ExternalPointerTag tag"
          ],
          "return_type": "ExternalPointerSlot",
          "logic": "Returns the ExternalPointerSlot."
        },
        {
          "name": "object",
          "parameters": [],
          "return_type": "Handle<HeapObject>",
          "logic": "Returns the Handle to the HeapObject."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the offset of the slot."
        },
        {
          "name": "Write",
          "parameters": [
            "Tagged<MaybeObject> value",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes the given MaybeObject value to the slot, performs a write barrier if necessary, and returns the number of slots written (1)."
        },
        {
          "name": "Write",
          "parameters": [
            "Tagged<HeapObject> value",
            "HeapObjectReferenceType ref_type",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes the given HeapObject value to the slot as a HeapObjectReference, performs a write barrier if necessary, and returns the number of slots written (1)."
        },
        {
          "name": "Write",
          "parameters": [
            "DirectHandle<HeapObject> value",
            "HeapObjectReferenceType ref_type",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes the given HeapObject value to the slot as a HeapObjectReference, performs a write barrier if necessary, and returns the number of slots written (1)."
        },
        {
          "name": "WriteIndirectPointerTo",
          "parameters": [
            "Tagged<HeapObject> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes an indirect pointer to the slot, performs a write barrier, and returns the number of slots written (1)."
        },
        {
          "name": "WriteProtectedPointerTo",
          "parameters": [
            "Tagged<TrustedObject> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes a protected pointer to the slot, performs a write barrier, and returns the number of slots written (1)."
        }
      ]
    },
    {
      "name": "SlotAccessorForRootSlots",
      "properties": [
        "slot_"
      ],
      "methods": [
        {
          "name": "SlotAccessorForRootSlots",
          "parameters": [
            "FullMaybeObjectSlot slot"
          ],
          "return_type": "void",
          "logic": "Constructor for the SlotAccessorForRootSlots."
        },
        {
          "name": "slot",
          "parameters": [],
          "return_type": "FullMaybeObjectSlot",
          "logic": "Returns the FullMaybeObjectSlot."
        },
        {
          "name": "external_pointer_slot",
          "parameters": [
            "ExternalPointerTag tag"
          ],
          "return_type": "ExternalPointerSlot",
          "logic": "Raises an UNREACHABLE as root slots cannot hold ExternalPointerSlot."
        },
        {
          "name": "object",
          "parameters": [],
          "return_type": "Handle<HeapObject>",
          "logic": "Raises an UNREACHABLE as root slots do not belong to HeapObjects."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Raises an UNREACHABLE as this is not a heap object."
        },
        {
          "name": "Write",
          "parameters": [
            "Tagged<MaybeObject> value",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes the given MaybeObject value to the slot and returns the number of slots written (1)."
        },
        {
          "name": "Write",
          "parameters": [
            "Tagged<HeapObject> value",
            "HeapObjectReferenceType ref_type",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes the given HeapObject value to the slot as a HeapObjectReference and returns the number of slots written (1)."
        },
        {
          "name": "Write",
          "parameters": [
            "DirectHandle<HeapObject> value",
            "HeapObjectReferenceType ref_type",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Writes the given HeapObject value to the slot as a HeapObjectReference and returns the number of slots written (1)."
        },
        {
          "name": "WriteIndirectPointerTo",
          "parameters": [
            "Tagged<HeapObject> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Raises an UNREACHABLE as root slots cannot hold indirect pointers."
        },
        {
          "name": "WriteProtectedPointerTo",
          "parameters": [
            "Tagged<TrustedObject> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Raises an UNREACHABLE as root slots cannot hold protected pointers."
        }
      ]
    },
    {
      "name": "SlotAccessorForHandle",
      "properties": [
        "handle_",
        "isolate_"
      ],
      "methods": [
        {
          "name": "SlotAccessorForHandle",
          "parameters": [
            "DirectHandle<HeapObject>* handle",
            "IsolateT* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for SlotAccessorForHandle, takes a pointer to a DirectHandle and the isolate."
        },
        {
          "name": "slot",
          "parameters": [],
          "return_type": "MaybeObjectSlot",
          "logic": "Raises UNREACHABLE as this accessor doesn't access a slot directly."
        },
        {
          "name": "external_pointer_slot",
          "parameters": [
            "ExternalPointerTag tag"
          ],
          "return_type": "ExternalPointerSlot",
          "logic": "Raises UNREACHABLE as this accessor doesn't access a slot directly."
        },
        {
          "name": "object",
          "parameters": [],
          "return_type": "Handle<HeapObject>",
          "logic": "Raises UNREACHABLE as this accessor doesn't access a slot directly."
        },
        {
          "name": "offset",
          "parameters": [],
          "return_type": "int",
          "logic": "Raises UNREACHABLE as this accessor doesn't access a slot directly."
        },
        {
          "name": "Write",
          "parameters": [
            "Tagged<MaybeObject> value",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Raises UNREACHABLE as this accessor doesn't write to a slot directly."
        },
        {
          "name": "Write",
          "parameters": [
            "Tagged<HeapObject> value",
            "HeapObjectReferenceType ref_type",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Assigns the given HeapObject to the DirectHandle."
        },
        {
          "name": "Write",
          "parameters": [
            "DirectHandle<HeapObject> value",
            "HeapObjectReferenceType ref_type",
            "int slot_offset",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Assigns the given HeapObject to the DirectHandle."
        },
        {
          "name": "WriteIndirectPointerTo",
          "parameters": [
            "Tagged<HeapObject> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Raises UNREACHABLE as this accessor doesn't write to a slot directly."
        },
        {
          "name": "WriteProtectedPointerTo",
          "parameters": [
            "Tagged<TrustedObject> value",
            "WriteBarrierMode mode"
          ],
          "return_type": "int",
          "logic": "Raises UNREACHABLE as this accessor doesn't write to a slot directly."
        }
      ]
    },
    {
      "name": "StringTableInsertionKey",
      "properties": [
        "string_",
        "deserializing_user_code_"
      ],
      "methods": [
        {
          "name": "StringTableInsertionKey",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<String> string",
            "DeserializingUserCodeOption deserializing_user_code"
          ],
          "return_type": "void",
          "logic": "Constructor for the StringTableInsertionKey, takes an isolate, a handle to the string, and a deserializing user code option."
        },
        {
          "name": "StringTableInsertionKey",
          "parameters": [
            "LocalIsolate* isolate",
            "DirectHandle<String> string",
            "DeserializingUserCodeOption deserializing_user_code"
          ],
          "return_type": "void",
          "logic": "Constructor for the StringTableInsertionKey, takes a local isolate, a handle to the string, and a deserializing user code option."
        },
        {
          "name": "IsMatch",
          "parameters": [
            "IsolateT* isolate",
            "Tagged<String> string"
          ],
          "return_type": "bool",
          "logic": "Checks if the given string matches the string held by this key."
        }
      ]
    },
    {
      "name": "Deserializer",
      "properties": [
        "isolate_",
        "attached_objects_",
        "source_",
        "magic_number_",
        "new_maps_",
        "new_allocation_sites_",
        "new_code_objects_",
        "accessor_infos_",
        "function_template_infos_",
        "new_scripts_",
        "new_descriptor_arrays_",
        "deserializing_user_code_",
        "should_rehash_",
        "to_rehash_",
        "backing_stores_",
        "back_refs_",
        "js_dispatch_entries_",
        "num_api_references_",
        "next_reference_is_weak_",
        "next_reference_is_indirect_pointer_",
        "next_reference_is_protected_pointer",
        "unresolved_forward_refs_",
        "num_unresolved_forward_refs_",
        "hot_objects_",
        "previous_allocation_obj_",
        "previous_allocation_size_"
      ],
      "methods": [
        {
          "name": "Deserializer",
          "parameters": [
            "IsolateT* isolate",
            "base::Vector<const uint8_t> payload",
            "uint32_t magic_number",
            "bool deserializing_user_code",
            "bool can_rehash"
          ],
          "return_type": "void",
          "logic": "Constructor for the deserializer. Initializes the deserializer with the isolate, payload, magic number and flags for deserializing user code and rehashing."
        },
        {
          "name": "Rehash",
          "parameters": [],
          "return_type": "void",
          "logic": "Rehashes all objects that were marked for rehashing."
        },
        {
          "name": "~Deserializer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the deserializer. Performs checks to ensure that the deserialization process completed successfully."
        },
        {
          "name": "VisitRootPointers",
          "parameters": [
            "Root root",
            "const char* description",
            "FullObjectSlot start",
            "FullObjectSlot end"
          ],
          "return_type": "void",
          "logic": "Reads data from the payload for a given root range."
        },
        {
          "name": "Synchronize",
          "parameters": [
            "VisitorSynchronization::SyncTag tag"
          ],
          "return_type": "void",
          "logic": "Synchronizes the deserializer with the serializer by checking the synchronization tag."
        },
        {
          "name": "DeserializeDeferredObjects",
          "parameters": [],
          "return_type": "void",
          "logic": "Deserializes objects that were deferred during the initial deserialization pass."
        },
        {
          "name": "LogNewMapEvents",
          "parameters": [],
          "return_type": "void",
          "logic": "Logs the creation of new maps if map logging is enabled."
        },
        {
          "name": "WeakenDescriptorArrays",
          "parameters": [],
          "return_type": "void",
          "logic": "Weakens the descriptor arrays created during deserialization."
        },
        {
          "name": "LogScriptEvents",
          "parameters": [
            "Tagged<Script> script"
          ],
          "return_type": "void",
          "logic": "Logs script events (creation, details) during deserialization."
        },
        {
          "name": "GetAndResetNextReferenceDescriptor",
          "parameters": [],
          "return_type": "ReferenceDescriptor",
          "logic": "Returns the next reference descriptor (weak/strong) and resets the flag."
        },
        {
          "name": "GetBackReferencedObject",
          "parameters": [],
          "return_type": "Handle<HeapObject>",
          "logic": "Gets a back-referenced object using its index from the current allocation point."
        },
        {
          "name": "GetBackReferencedObject",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "Handle<HeapObject>",
          "logic": "Gets a back-referenced object using its index."
        },
        {
          "name": "ReadObject",
          "parameters": [],
          "return_type": "DirectHandle<HeapObject>",
          "logic": "Reads a heap object from the data source."
        },
        {
          "name": "ReadObject",
          "parameters": [
            "SnapshotSpace space"
          ],
          "return_type": "Handle<HeapObject>",
          "logic": "Reads a heap object of a given space from the data source."
        },
        {
          "name": "ReadMetaMap",
          "parameters": [
            "SnapshotSpace space"
          ],
          "return_type": "Handle<HeapObject>",
          "logic": "Reads a meta-map object of a given space from the data source."
        },
        {
          "name": "ReadRepeatedRoot",
          "parameters": [
            "SlotAccessor slot_accessor",
            "int repeat_count"
          ],
          "return_type": "int",
          "logic": "Reads a repeated root from the data source."
        },
        {
          "name": "ReadData",
          "parameters": [
            "Handle<HeapObject> object",
            "int start_slot_index",
            "int end_slot_index"
          ],
          "return_type": "void",
          "logic": "Reads data from the data source for a given range of slots in the heap object."
        },
        {
          "name": "ReadData",
          "parameters": [
            "FullMaybeObjectSlot start",
            "FullMaybeObjectSlot end"
          ],
          "return_type": "void",
          "logic": "Reads data from the data source for a given range of root slots."
        },
        {
          "name": "ReadSingleBytecodeData",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a single byte of bytecode data and performs the corresponding action on the given slot accessor."
        },
        {
          "name": "ReadNewObject",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a new object from the data source."
        },
        {
          "name": "ReadBackref",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a backreference to a previously deserialized object from the data source."
        },
        {
          "name": "ReadReadOnlyHeapRef",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a reference to an object in the read-only heap from the data source."
        },
        {
          "name": "ReadRootArray",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a reference to an object in the root array from the data source."
        },
        {
          "name": "ReadStartupObjectCache",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a reference to an object in the startup object cache from the data source."
        },
        {
          "name": "ReadSharedHeapObjectCache",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a reference to an object in the shared heap object cache from the data source."
        },
        {
          "name": "ReadNewMetaMap",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a new meta map from the data source."
        },
        {
          "name": "ReadExternalReference",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads an external reference from the data source."
        },
        {
          "name": "ReadRawExternalReference",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a raw external reference from the data source."
        },
        {
          "name": "ReadAttachedReference",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a reference to an attached object from the data source."
        },
        {
          "name": "ReadRegisterPendingForwardRef",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Registers a pending forward reference."
        },
        {
          "name": "ReadResolvePendingForwardRef",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Resolves a pending forward reference."
        },
        {
          "name": "ReadVariableRawData",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads raw data of variable length from the data source."
        },
        {
          "name": "ReadVariableRepeatRoot",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a variable number of repeated root references from the data source."
        },
        {
          "name": "ReadOffHeapBackingStore",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads an off-heap backing store from the data source."
        },
        {
          "name": "ReadApiReference",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads an API reference from the data source."
        },
        {
          "name": "ReadClearedWeakReference",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a cleared weak reference from the data source."
        },
        {
          "name": "ReadWeakPrefix",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a weak reference prefix from the data source."
        },
        {
          "name": "ReadIndirectPointerPrefix",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads an indirect pointer prefix from the data source."
        },
        {
          "name": "ReadInitializeSelfIndirectPointer",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads the initialize self indirect pointer operation."
        },
        {
          "name": "ReadAllocateJSDispatchEntry",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Allocates a JS dispatch entry."
        },
        {
          "name": "ReadJSDispatchEntry",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a JS dispatch entry."
        },
        {
          "name": "ReadProtectedPointerPrefix",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a protected pointer prefix from the data source."
        },
        {
          "name": "ReadRootArrayConstants",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a constant from the root array."
        },
        {
          "name": "ReadHotObject",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a 'hot' object (frequently referenced) from a cache."
        },
        {
          "name": "ReadFixedRawData",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a fixed size of raw data from the data source."
        },
        {
          "name": "ReadFixedRepeatRoot",
          "parameters": [
            "uint8_t data",
            "SlotAccessor slot_accessor"
          ],
          "return_type": "int",
          "logic": "Reads a fixed number of repeated root references."
        },
        {
          "name": "ReadExternalReferenceCase",
          "parameters": [],
          "return_type": "Address",
          "logic": "Reads an external reference based on its ID."
        },
        {
          "name": "ReadExternalPointerTag",
          "parameters": [],
          "return_type": "ExternalPointerTag",
          "logic": "Reads an external pointer tag."
        },
        {
          "name": "Allocate",
          "parameters": [
            "AllocationType allocation",
            "int size",
            "AllocationAlignment alignment"
          ],
          "return_type": "Tagged<HeapObject>",
          "logic": "Allocates a new heap object of the given size and alignment."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ComputeRawHashField",
      "parameters": [
        "IsolateT* isolate",
        "Tagged<String> string"
      ],
      "return_type": "uint32_t",
      "logic": "Computes the raw hash field for a string."
    },
    {
      "name": "NoExternalReferencesCallback",
      "parameters": [],
      "return_type": "void",
      "logic": "A callback function that is called when no external references are provided through the API. It raises a fatal error."
    },
    {
      "name": "PostProcessExternalString",
      "parameters": [
        "Tagged<ExternalString> string",
        "Isolate* isolate"
      ],
      "return_type": "void",
      "logic": "Initializes fields of an external string after it is deserialized."
    }
  ]
}