{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/embedded-data.cc",
  "imports": [
    "src/snapshot/embedded/embedded-data.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/callable.h",
    "src/snapshot/embedded/embedded-data-inl.h",
    "src/snapshot/snapshot-utils.h",
    "src/snapshot/sort-builtins.h"
  ],
  "classes": [
    {
      "name": "EmbeddedData",
      "properties": [],
      "methods": [
        {
          "name": "TryLookupCode",
          "parameters": [
            "Address address"
          ],
          "return_type": "Builtin",
          "logic": "Looks up the Builtin ID for a given code address within the embedded data's code range. It uses a binary search (std::upper_bound) on a table of BuiltinLookupEntry structures to find the appropriate Builtin based on the address."
        },
        {
          "name": "NewFromIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "EmbeddedData",
          "logic": "Creates a new EmbeddedData instance from an Isolate. It gathers the code and metadata for all builtins, allocates memory for the embedded blob, copies the builtin code and metadata into the blob, fixes up code targets, and computes hashes."
        },
        {
          "name": "CreateEmbeddedBlobDataHash",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates a checksum (hash) of the embedded blob's data section, excluding the hash fields themselves."
        },
        {
          "name": "CreateEmbeddedBlobCodeHash",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates a checksum (hash) of the embedded blob's code section."
        },
        {
          "name": "GetBuiltinId",
          "parameters": [
            "ReorderedBuiltinIndex embedded_index"
          ],
          "return_type": "Builtin",
          "logic": "Retrieves a Builtin ID from the lookup table using the reordered builtin index."
        },
        {
          "name": "PrintStatistics",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints statistics about the embedded data, such as total size, data size, code size, and instruction size percentiles."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "OffHeapInstructionStream::PcIsOffHeap",
      "parameters": [
        "Isolate* isolate",
        "Address pc"
      ],
      "return_type": "bool",
      "logic": "Checks if a given program counter (pc) address is located within the off-heap embedded code. Takes into account whether short builtin calls are enabled."
    },
    {
      "name": "OffHeapInstructionStream::TryGetAddressForHashing",
      "parameters": [
        "Isolate* isolate",
        "Address address",
        "uint32_t* hashable_address"
      ],
      "return_type": "bool",
      "logic": "Tries to get the address for hashing for a given address. Returns true if the address is in the code range of an embedded blob, and sets the hashable address accordingly. Takes into account short builtin calls."
    },
    {
      "name": "OffHeapInstructionStream::TryLookupCode",
      "parameters": [
        "Isolate* isolate",
        "Address address"
      ],
      "return_type": "Builtin",
      "logic": "Looks up the Builtin ID for a given code address in the off-heap embedded code. Takes into account whether short builtin calls are enabled and checks possible copy in isolate group."
    },
    {
      "name": "OffHeapInstructionStream::CreateOffHeapOffHeapInstructionStream",
      "parameters": [
        "Isolate* isolate",
        "uint8_t** code",
        "uint32_t* code_size",
        "uint8_t** data",
        "uint32_t* data_size"
      ],
      "return_type": "void",
      "logic": "Creates an off-heap copy of the embedded blob from the given isolate's heap. It allocates memory on the native heap for the code and data sections, copies the data, and sets memory permissions."
    },
    {
      "name": "OffHeapInstructionStream::FreeOffHeapOffHeapInstructionStream",
      "parameters": [
        "uint8_t* code",
        "uint32_t code_size",
        "uint8_t* data",
        "uint32_t data_size"
      ],
      "return_type": "void",
      "logic": "Frees the off-heap memory allocated for the code and data sections of the embedded blob."
    },
    {
      "name": "(anonymous namespace)::FinalizeEmbeddedCodeTargets",
      "parameters": [
        "Isolate* isolate",
        "EmbeddedData* blob"
      ],
      "return_type": "void",
      "logic": "Fixes up the code targets (relocations) in the embedded blob to point to other embedded builtins using relative addressing, if the architecture supports it. This ensures that calls between builtins within the embedded blob work correctly."
    },
    {
      "name": "(anonymous namespace)::EnsureRelocatable",
      "parameters": [
        "Tagged<Code> code"
      ],
      "return_type": "void",
      "logic": "Ensures that the given code object is relocatable by checking relocation info mode. This is related to the interpreter entry trampoline for profiling."
    }
  ]
}