{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/read-only-deserializer.cc",
  "imports": [
    "src/snapshot/read-only-deserializer.h",
    "src/handles/handles-inl.h",
    "src/heap/heap-inl.h",
    "src/heap/read-only-heap.h",
    "src/logging/counters-scopes.h",
    "src/objects/objects-inl.h",
    "src/objects/slots.h",
    "src/snapshot/embedded/embedded-data-inl.h",
    "src/snapshot/read-only-serializer-deserializer.h",
    "src/snapshot/snapshot-data.h"
  ],
  "classes": [
    {
      "name": "ReadOnlyHeapImageDeserializer",
      "properties": [
        "source_",
        "isolate_"
      ],
      "methods": [
        {
          "name": "Deserialize",
          "parameters": [
            "Isolate* isolate",
            "SnapshotByteSource* source"
          ],
          "return_type": "void",
          "logic": "Static method that creates a ReadOnlyHeapImageDeserializer instance and calls DeserializeImpl."
        },
        {
          "name": "ReadOnlyHeapImageDeserializer",
          "parameters": [
            "Isolate* isolate",
            "SnapshotByteSource* source"
          ],
          "return_type": "ReadOnlyHeapImageDeserializer",
          "logic": "Constructor that initializes the source and isolate members."
        },
        {
          "name": "DeserializeImpl",
          "parameters": [],
          "return_type": "void",
          "logic": "Deserializes the read-only heap image from the byte source, handling bytecode commands such as allocating pages, deserializing segments, and deserializing the read-only roots table."
        },
        {
          "name": "AllocatePage",
          "parameters": [
            "bool fixed_offset"
          ],
          "return_type": "void",
          "logic": "Allocates a page in the read-only space.  Determines if it's a fixed offset allocation based on the `fixed_offset` parameter."
        },
        {
          "name": "DeserializeSegment",
          "parameters": [],
          "return_type": "void",
          "logic": "Deserializes a segment of data into a page in the read-only space.  Copies raw bytes and handles relocation of tagged slots if necessary."
        },
        {
          "name": "Decode",
          "parameters": [
            "ro::EncodedTagged encoded"
          ],
          "return_type": "Address",
          "logic": "Decodes an encoded tagged value to an address within the read-only space."
        },
        {
          "name": "DecodeTaggedSlots",
          "parameters": [
            "Address segment_start",
            "const ro::BitSet& tagged_slots"
          ],
          "return_type": "void",
          "logic": "Decodes and relocates tagged slots within a memory segment based on a bitset indicating which slots are tagged."
        },
        {
          "name": "PageAt",
          "parameters": [
            "size_t index"
          ],
          "return_type": "ReadOnlyPageMetadata*",
          "logic": "Returns a pointer to the ReadOnlyPageMetadata at the given index in the read-only space's page list."
        },
        {
          "name": "DeserializeReadOnlyRootsTable",
          "parameters": [],
          "return_type": "void",
          "logic": "Deserializes the read-only roots table, which contains important constant objects.  Initializes from either a static roots table or from encoded values in the byte source."
        },
        {
          "name": "ro_space",
          "parameters": [],
          "return_type": "ReadOnlySpace*",
          "logic": "Returns a pointer to the ReadOnlySpace object from the isolate."
        }
      ]
    },
    {
      "name": "ReadOnlyDeserializer",
      "properties": [],
      "methods": [
        {
          "name": "ReadOnlyDeserializer",
          "parameters": [
            "Isolate* isolate",
            "const SnapshotData* data",
            "bool can_rehash"
          ],
          "return_type": "ReadOnlyDeserializer",
          "logic": "Constructor for the ReadOnlyDeserializer, initializes the Deserializer base class."
        },
        {
          "name": "DeserializeIntoIsolate",
          "parameters": [],
          "return_type": "void",
          "logic": "Deserializes the read-only snapshot data into the isolate.  Calls ReadOnlyHeapImageDeserializer to deserialize the heap image, repairs free spaces, post-processes new objects, and rehashes if necessary."
        },
        {
          "name": "PostProcessNewObjects",
          "parameters": [],
          "return_type": "void",
          "logic": "Scans the read-only heap for objects that need post-processing, such as updating hash values for strings or initializing external pointers."
        }
      ]
    },
    {
      "name": "ObjectPostProcessor",
      "properties": [
        "isolate_",
        "embedded_data_",
        "external_pointer_slots_"
      ],
      "methods": [
        {
          "name": "ObjectPostProcessor",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "ObjectPostProcessor",
          "logic": "Constructor for ObjectPostProcessor, initializes isolate and embedded_data."
        },
        {
          "name": "Finalize",
          "parameters": [],
          "return_type": "void",
          "logic": "Finalizes the post-processing, sets the external pointer registry for sandboxed isolates."
        },
        {
          "name": "PostProcessIfNeeded",
          "parameters": [
            "Tagged<HeapObject> o",
            "InstanceType instance_type"
          ],
          "return_type": "void",
          "logic": "Calls the appropriate post-processing function based on the object's instance type."
        },
        {
          "name": "GetAnyExternalReferenceAt",
          "parameters": [
            "int index",
            "bool is_api_reference"
          ],
          "return_type": "Address",
          "logic": "Retrieves an external reference from either the API external references table or the external reference table."
        },
        {
          "name": "DecodeExternalPointerSlot",
          "parameters": [
            "Tagged<HeapObject> host",
            "ExternalPointerSlot slot"
          ],
          "return_type": "void",
          "logic": "Decodes an external pointer slot and initializes it with the appropriate external reference."
        },
        {
          "name": "PostProcessAccessorInfo",
          "parameters": [
            "Tagged<AccessorInfo> o"
          ],
          "return_type": "void",
          "logic": "Post-processes an AccessorInfo object, decoding and initializing its external pointer fields."
        },
        {
          "name": "PostProcessFunctionTemplateInfo",
          "parameters": [
            "Tagged<FunctionTemplateInfo> o"
          ],
          "return_type": "void",
          "logic": "Post-processes a FunctionTemplateInfo object, decoding and initializing its external pointer fields."
        },
        {
          "name": "PostProcessCode",
          "parameters": [
            "Tagged<Code> o"
          ],
          "return_type": "void",
          "logic": "Post-processes a Code object, initializing its self-indirect pointer and setting its instruction start for off-heap builtins."
        },
        {
          "name": "PostProcessSharedFunctionInfo",
          "parameters": [
            "Tagged<SharedFunctionInfo> o"
          ],
          "return_type": "void",
          "logic": "Post-processes a SharedFunctionInfo object, resetting its unique ID."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "NoExternalReferencesCallback",
      "parameters": [],
      "return_type": "void",
      "logic": "A fatal error callback that is triggered if external references are accessed without being properly provided."
    }
  ]
}