{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/platform-embedded-file-writer-win.cc",
  "imports": [
    "src/snapshot/embedded/platform-embedded-file-writer-win.h",
    "algorithm",
    "src/common/globals.h",
    "src/builtins/builtins.h",
    "src/diagnostics/unwinding-info-win64.h",
    "src/snapshot/embedded/embedded-data-inl.h",
    "src/snapshot/embedded/embedded-file-writer.h",
    "src/flags/flags.h"
  ],
  "classes": [
    {
      "name": "PlatformEmbeddedFileWriterWin",
      "properties": [],
      "methods": [
        {
          "name": "DirectiveAsString",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "const char*",
          "logic": "Returns a string representation of a DataDirective (e.g., 'BYTE', '.byte').  The string used depends on whether the compiler is MSVC or not, and on the target architecture if MSVC is used."
        },
        {
          "name": "MaybeEmitUnwindData",
          "parameters": [
            "const char* unwind_info_symbol",
            "const char* embedded_blob_data_symbol",
            "const EmbeddedData* blob",
            "const void* unwind_infos"
          ],
          "return_type": "void",
          "logic": "Conditionally emits unwind data if unwind information is available for builtins and the target OS is Windows. Calls EmitUnwindData."
        },
        {
          "name": "SectionText",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the appropriate directive to start the text section. Uses '.CODE' or AREA |.text| depending on MSVC/MARMASM."
        },
        {
          "name": "SectionRoData",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the appropriate directive to start the read-only data section. Uses '.CONST' or AREA |.rodata| depending on MSVC/MARMASM."
        },
        {
          "name": "DeclareUint32",
          "parameters": [
            "const char* name",
            "uint32_t value"
          ],
          "return_type": "void",
          "logic": "Declares a global 32-bit unsigned integer symbol with a given name and value. Outputs the symbol name, the directive (e.g., DWORD, DCB), and the value."
        },
        {
          "name": "StartPdataSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the directive to start the pdata section (exception handling). Uses '.pdata SEGMENT' or AREA |.pdata| depending on MSVC/MARMASM."
        },
        {
          "name": "EndPdataSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the directive to end the pdata section. Uses '.pdata ENDS' depending on MSVC."
        },
        {
          "name": "StartXdataSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the directive to start the xdata section (exception handling). Uses '.xdata SEGMENT' or AREA |.xdata| depending on MSVC/MARMASM."
        },
        {
          "name": "EndXdataSection",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the directive to end the xdata section. Uses '.xdata ENDS' depending on MSVC."
        },
        {
          "name": "DeclareExternalFunction",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares an external function. Uses 'EXTERN' or 'EXTERN ... PROC' depending on MSVC."
        },
        {
          "name": "DeclareRvaToSymbol",
          "parameters": [
            "const char* name",
            "uint64_t offset"
          ],
          "return_type": "void",
          "logic": "Declares a relative virtual address (RVA) to a symbol. Uses 'DD IMAGEREL' or 'DCD' depending on MSVC/MARMASM. Includes handling of offset."
        },
        {
          "name": "DeclareSymbolGlobal",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a symbol as global. Uses 'PUBLIC' or 'EXPORT' depending on MSVC/MARMASM."
        },
        {
          "name": "AlignToCodeAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the code to the required alignment boundary. Uses 'ALIGN' or '.balign' depending on MSVC/MARMASM, with architecture specific alignment value"
        },
        {
          "name": "AlignToDataAlignment",
          "parameters": [],
          "return_type": "void",
          "logic": "Aligns the data to the required alignment boundary. Uses 'ALIGN' or '.balign' depending on MSVC/MARMASM, with architecture specific alignment value."
        },
        {
          "name": "Comment",
          "parameters": [
            "const char* string"
          ],
          "return_type": "void",
          "logic": "Emits a comment to the output file. Uses ';' or '//' depending on MSVC"
        },
        {
          "name": "DeclareLabel",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares a label in the output file. Uses LABEL or ':' syntax depending on MSVC."
        },
        {
          "name": "SourceInfo",
          "parameters": [
            "int fileid",
            "const char* filename",
            "int line"
          ],
          "return_type": "void",
          "logic": "Emits source code information, currently a no-op."
        },
        {
          "name": "DeclareFunctionBegin",
          "parameters": [
            "const char* name",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Declares the beginning of a function. Uses PROC, FUNCTION or .def depending on MSVC and architecture."
        },
        {
          "name": "DeclareFunctionEnd",
          "parameters": [
            "const char* name"
          ],
          "return_type": "void",
          "logic": "Declares the end of a function. Uses ENDP, ENDFUNC. Has no implementation when not using MSVC."
        },
        {
          "name": "HexLiteral",
          "parameters": [
            "uint64_t value"
          ],
          "return_type": "int",
          "logic": "Writes a hexadecimal literal value to the output file, with different syntax for MSVC/MARMASM."
        },
        {
          "name": "FilePrologue",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the file prologue, which includes model declaration for x86 MASM."
        },
        {
          "name": "DeclareExternalFilename",
          "parameters": [
            "int fileid",
            "const char* filename"
          ],
          "return_type": "void",
          "logic": "Declares an external filename, currently a no-op."
        },
        {
          "name": "FileEpilogue",
          "parameters": [],
          "return_type": "void",
          "logic": "Emits the file epilogue, uses 'END' statement for Arm64 MARMASM and otherwise just END statement for MSVC."
        },
        {
          "name": "IndentedDataDirective",
          "parameters": [
            "DataDirective directive"
          ],
          "return_type": "int",
          "logic": "Emits a data directive (e.g., BYTE, DWORD) with indentation. String depends on MSVC."
        },
        {
          "name": "ByteChunkDataDirective",
          "parameters": [],
          "return_type": "DataDirective",
          "logic": "Returns the data directive to use for a byte chunk.  Chooses kQuad (QWORD) for MSVC due to assembler limitations with BYTE directive."
        },
        {
          "name": "WriteByteChunk",
          "parameters": [
            "const uint8_t* data"
          ],
          "return_type": "int",
          "logic": "Writes a chunk of bytes as a hex literal. Uses kQuad/QWORDs if MSVC, and processes each individual byte when using other compiler."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "WriteUnwindInfoEntry",
      "parameters": [
        "PlatformEmbeddedFileWriterWin* w",
        "const char* unwind_info_symbol",
        "const char* embedded_blob_data_symbol",
        "uint64_t rva_start",
        "uint64_t rva_end"
      ],
      "return_type": "void",
      "logic": "Declares relative virtual address (RVA) to symbol mappings for unwind information on Windows x64. Used to define the beginning and end addresses of a function's unwind data."
    },
    {
      "name": "EmitUnwindData",
      "parameters": [
        "PlatformEmbeddedFileWriterWin* w",
        "const char* unwind_info_symbol",
        "const char* embedded_blob_data_symbol",
        "const EmbeddedData* blob",
        "const win64_unwindinfo::BuiltinUnwindInfo* unwind_infos"
      ],
      "return_type": "void",
      "logic": "Emits unwind data (XDATA and PDATA) for the embedded blob.  Iterates through builtins and generates unwind information for them. Handles special cases for functions with no explicit stack frame initialization. Windows X64 only."
    },
    {
      "name": "EmitUnwindData",
      "parameters": [
        "PlatformEmbeddedFileWriterWin* w",
        "const char* unwind_info_symbol",
        "const char* embedded_blob_data_symbol",
        "const EmbeddedData* blob",
        "const win64_unwindinfo::BuiltinUnwindInfo* unwind_infos"
      ],
      "return_type": "void",
      "logic": "Emits unwind data (PDATA and XDATA) for the embedded blob on Windows ARM64.  Iterates through builtins and generates unwind information for them.  Chunks up long functions.  Creates separate unwind information for each chunk."
    }
  ]
}