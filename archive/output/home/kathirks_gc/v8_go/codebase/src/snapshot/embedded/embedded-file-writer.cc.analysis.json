{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/snapshot/embedded/embedded-file-writer.cc",
  "imports": [
    "src/snapshot/embedded/embedded-file-writer.h",
    "algorithm",
    "cinttypes",
    "src/codegen/source-position-table.h",
    "src/flags/flags.h",
    "src/objects/code-inl.h",
    "src/snapshot/embedded/embedded-data-inl.h"
  ],
  "classes": [
    {
      "name": "EmbeddedFileWriter",
      "properties": [
        "embedded_variant_",
        "source_positions_",
        "label_info_",
        "external_filenames_",
        "external_filenames_by_index_"
      ],
      "methods": [
        {
          "name": "WriteBuiltin",
          "parameters": [
            "PlatformEmbeddedFileWriterBase* w",
            "const i::EmbeddedData* blob",
            "const Builtin builtin"
          ],
          "return_type": "void",
          "logic": "Writes a given builtin function's binary contents as inline assembly, interleaving source position information for debugging. It creates a symbol name for the builtin, declares function begin and end labels, and handles source position and label insertion during the writing process."
        },
        {
          "name": "WriteBuiltinLabels",
          "parameters": [
            "PlatformEmbeddedFileWriterBase* w",
            "std::string name"
          ],
          "return_type": "void",
          "logic": "Declares a label with the given name using the PlatformEmbeddedFileWriterBase."
        },
        {
          "name": "WriteCodeSection",
          "parameters": [
            "PlatformEmbeddedFileWriterBase* w",
            "const i::EmbeddedData* blob"
          ],
          "return_type": "void",
          "logic": "Writes the code section of the embedded blob, including the builtin instruction streams. It also emits a dummy function for the profiler on IA32 and X64 architectures and declares the global symbol for the embedded blob code."
        },
        {
          "name": "WriteFileEpilogue",
          "parameters": [
            "PlatformEmbeddedFileWriterBase* w",
            "const i::EmbeddedData* blob"
          ],
          "return_type": "void",
          "logic": "Writes the file epilogue, including the sizes of the embedded blob code and data sections, and optionally unwind data on Windows 64-bit."
        },
        {
          "name": "LookupOrAddExternallyCompiledFilename",
          "parameters": [
            "const char* filename"
          ],
          "return_type": "int",
          "logic": "Looks up or adds a filename to the internal maps of externally compiled filenames, assigning a unique ID to each filename. Returns the ID of the filename."
        },
        {
          "name": "GetExternallyCompiledFilename",
          "parameters": [
            "int fileid"
          ],
          "return_type": "const char*",
          "logic": "Retrieves the filename associated with the given file ID from the internal map."
        },
        {
          "name": "GetExternallyCompiledFilenameCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of externally compiled filenames that have been added to the internal map."
        },
        {
          "name": "PrepareBuiltinSourcePositionMap",
          "parameters": [
            "Builtins* builtins"
          ],
          "return_type": "void",
          "logic": "Prepares a map of source positions for each builtin function. It iterates through all builtins, retrieves their source position tables, and stores the data in an internal data structure."
        },
        {
          "name": "WriteBinaryContentsAsInlineAssembly",
          "parameters": [
            "PlatformEmbeddedFileWriterBase* w",
            "const uint8_t* data",
            "uint32_t size"
          ],
          "return_type": "void",
          "logic": "Writes binary data as inline assembly. It handles platform-specific formatting (e.g., ZOS). For other platforms, it writes the data in byte chunks and then any remaining bytes individually, ensuring lines don't exceed a certain length."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "WriteDirectiveOrSeparator",
      "parameters": [
        "PlatformEmbeddedFileWriterBase* w",
        "int current_line_length",
        "DataDirective directive"
      ],
      "return_type": "int",
      "logic": "Writes a data directive or a separator (comma) to the file writer, depending on the current line length. It's used to format inline assembly data."
    },
    {
      "name": "WriteLineEndIfNeeded",
      "parameters": [
        "PlatformEmbeddedFileWriterBase* w",
        "int current_line_length",
        "int write_size"
      ],
      "return_type": "int",
      "logic": "Checks if adding more data to the current line would exceed the maximum line width. If so, it writes a newline character and resets the line length counter."
    }
  ]
}