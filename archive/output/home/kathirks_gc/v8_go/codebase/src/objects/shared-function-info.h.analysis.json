{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/objects/shared-function-info.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n    \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/objects/shared-function-info.h\",\n    \"imports\": [\n        \"<memory>\",\n        \"<optional>\",\n        \"src/base/bit-field.h\",\n        \"src/builtins/builtins.h\",\n        \"src/codegen/bailout-reason.h\",\n        \"src/common/globals.h\",\n        \"src/objects/compressed-slots.h\",\n        \"src/objects/function-kind.h\",\n        \"src/objects/function-syntax-kind.h\",\n        \"src/objects/name.h\",\n        \"src/objects/objects.h\",\n        \"src/objects/script.h\",\n        \"src/objects/slots.h\",\n        \"src/objects/smi.h\",\n        \"src/objects/struct.h\",\n        \"src/roots/roots.h\",\n        \"testing/gtest/include/gtest/gtest_prod.h\",\n        \"torque-generated/bit-fields.h\",\n        \"src/objects/object-macros.h\",\n        \"torque-generated/src/objects/shared-function-info-tq.inc\"\n    ],\n    \"classes\": [\n        {\n            \"name\": \"PreparseData\",\n            \"properties\": [\n                \"kDataStartOffset\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"inner_start_offset\",\n                    \"parameters\": [],\n                    \"return_type\": \"int\",\n                    \"logic\": \"Returns the start offset of inner preparse data.\"\n                },\n                {\n                    \"name\": \"inner_data_start\",\n                    \"parameters\": [],\n                    \"return_type\": \"ObjectSlot\",\n                    \"logic\": \"Returns the ObjectSlot where inner preparse data starts.\"\n                },\n                {\n                    \"name\": \"get\",\n                    \"parameters\": [\n                        \"int index\"\n                    ],\n                    \"return_type\": \"uint8_t\",\n                    \"logic\": \"Gets a byte at the given index in the data section.\"\n                },\n                {\n                    \"name\": \"set\",\n                    \"parameters\": [\n                        \"int index\",\n                        \"uint8_t value\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets a byte at the given index in the data section.\"\n                },\n                {\n                    \"name\": \"copy_in\",\n                    \"parameters\": [\n                        \"int index\",\n                        \"const uint8_t* buffer\",\n                        \"int length\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Copies data from a buffer into the PreparseData's data section.\"\n                },\n                {\n                    \"name\": \"get_child\",\n                    \"parameters\": [\n                        \"int index\"\n                    ],\n                    \"return_type\": \"Tagged<PreparseData>\",\n                    \"logic\": \"Gets the child PreparseData at the given index.\"\n                },\n                {\n                    \"name\": \"set_child\",\n                    \"parameters\": [\n                        \"int index\",\n                        \"Tagged<PreparseData> value\",\n                        \"WriteBarrierMode mode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the child PreparseData at the given index.\"\n                },\n                {\n                    \"name\": \"clear_padding\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Clears uninitialized padding space.\"\n                },\n                {\n                  \"name\": \"InnerOffset\",\n                  \"parameters\": [\"int data_length\"],\n                  \"return_type\": \"int\",\n                  \"logic\": \"Calculates the offset of the inner preparse data based on the data length.\"\n                },\n                {\n                  \"name\": \"SizeFor\",\n                  \"parameters\": [\"int data_length\", \"int children_length\"],\n                  \"return_type\": \"int\",\n                  \"logic\": \"Calculates the total size needed for the PreparseData object.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"UncompiledData\",\n            \"properties\": [],\n            \"methods\": [\n                {\n                    \"name\": \"InitAfterBytecodeFlush\",\n                    \"parameters\": [\n                        \"Isolate* isolate\",\n                        \"Tagged<String> inferred_name\",\n                        \"int start_position\",\n                        \"int end_position\",\n                        \"std::function<void(Tagged<HeapObject> object, ObjectSlot slot, Tagged<HeapObject> target)> gc_notify_updated_slot\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Initializes the UncompiledData object after bytecode flush.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"UncompiledDataWithoutPreparseData\",\n            \"properties\": [],\n            \"methods\": []\n        },\n        {\n            \"name\": \"UncompiledDataWithPreparseData\",\n            \"properties\": [],\n            \"methods\": []\n        },\n         {\n            \"name\": \"UncompiledDataWithoutPreparseDataWithJob\",\n            \"properties\": [],\n            \"methods\": []\n        },\n         {\n            \"name\": \"UncompiledDataWithPreparseDataAndJob\",\n            \"properties\": [],\n            \"methods\": []\n        },\n        {\n            \"name\": \"InterpreterData\",\n            \"properties\": [],\n            \"methods\": []\n        },\n        {\n            \"name\": \"SharedFunctionInfo\",\n            \"properties\": [\n                \"kNoSharedNameSentinel\",\n                \"kEntriesStart\",\n                \"kContextOffset\",\n                \"kCachedCodeOffset\",\n                \"kEntryLength\",\n                \"kInitialLength\",\n                \"kNotFound\",\n                \"kAgeSize\",\n                \"kMaxAge\",\n                \"kMaximumFunctionTokenOffset\",\n                \"kFunctionTokenOutOfRange\",\n                \"kStaticRootsSFISize\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"Init\",\n                    \"parameters\": [\n                        \"ReadOnlyRoots roots\",\n                        \"int unique_id\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Initializes the SharedFunctionInfo after allocation.\"\n                },\n                {\n                    \"name\": \"Name\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<String>\",\n                    \"logic\": \"Returns the shared name if it exists, otherwise an empty string.\"\n                },\n                {\n                    \"name\": \"SetName\",\n                    \"parameters\": [\n                        \"Tagged<String> name\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the shared name of the function.\"\n                },\n                {\n                    \"name\": \"GetCode\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"Tagged<Code>\",\n                    \"logic\": \"Gets the code object which represents the execution of this function.\"\n                },\n                {\n                    \"name\": \"abstract_code\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"Tagged<AbstractCode>\",\n                    \"logic\": \"Get the abstract code associated with the function, which will either be a Code object or a BytecodeArray.\"\n                },\n                {\n                    \"name\": \"SetScript\",\n                    \"parameters\": [\n                        \"IsolateForSandbox isolate\",\n                        \"ReadOnlyRoots roots\",\n                        \"Tagged<HeapObject> script_object\",\n                        \"int function_literal_id\",\n                        \"bool reset_preparsed_scope_data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets up the link between shared function info and the script.\"\n                },\n                {\n                    \"name\": \"CopyFrom\",\n                    \"parameters\": [\n                        \"Tagged<SharedFunctionInfo> other\",\n                        \"IsolateForSandbox isolate\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Copies the data from another SharedFunctionInfo.\"\n                },\n                 {\n                    \"name\": \"EarlyScopeInfo\",\n                    \"parameters\": [\"AcquireLoadTag tag\"],\n                    \"return_type\": \"Tagged<ScopeInfo>\",\n                    \"logic\": \"Slow but safe getter for scope info.\"\n                },\n                {\n                    \"name\": \"set_raw_scope_info\",\n                    \"parameters\": [\n                        \"Tagged<ScopeInfo> scope_info\",\n                        \"WriteBarrierMode mode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the scope_info without moving the existing name onto the ScopeInfo.\"\n                },\n                {\n                    \"name\": \"SetScopeInfo\",\n                    \"parameters\": [\n                        \"Tagged<ScopeInfo> scope_info\",\n                        \"WriteBarrierMode mode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the scope_info, potentially moving the existing name onto the ScopeInfo.\"\n                },\n                {\n                    \"name\": \"is_script\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function is a script.\"\n                },\n                {\n                    \"name\": \"needs_script_context\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function needs a script context.\"\n                },\n                {\n                    \"name\": \"EndPosition\",\n                    \"parameters\": [],\n                    \"return_type\": \"int\",\n                    \"logic\": \"Returns the end position of the function in the script source.\"\n                },\n                {\n                    \"name\": \"StartPosition\",\n                    \"parameters\": [],\n                    \"return_type\": \"int\",\n                    \"logic\": \"Returns the start position of the function in the script source.\"\n                },\n                {\n                    \"name\": \"UpdateFromFunctionLiteralForLiveEdit\",\n                    \"parameters\": [\n                        \"IsolateForSandbox isolate\",\n                        \"FunctionLiteral* lit\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Updates the SharedFunctionInfo from a FunctionLiteral for live edit.\"\n                },\n                {\n                    \"name\": \"HasOuterScopeInfo\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has outer scope info.\"\n                },\n                {\n                    \"name\": \"GetOuterScopeInfo\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<ScopeInfo>\",\n                    \"logic\": \"Gets the outer scope info.\"\n                },\n                {\n                    \"name\": \"HasFeedbackMetadata\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has feedback metadata.\"\n                },\n                {\n                    \"name\": \"HasFeedbackMetadata\",\n                    \"parameters\": [\"AcquireLoadTag tag\"],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has feedback metadata (acquire load).\"\n                },\n                {\n                    \"name\": \"feedback_metadata\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<FeedbackMetadata>\",\n                    \"logic\": \"Gets the feedback metadata.\"\n                },\n                {\n                    \"name\": \"is_compiled\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns if this function has been compiled yet.\"\n                },\n                {\n                    \"name\": \"is_compiled_scope\",\n                    \"parameters\": [\n                        \"IsolateT* isolate\"\n                    ],\n                    \"return_type\": \"IsCompiledScope\",\n                    \"logic\": \"Returns an IsCompiledScope which reports whether the function is compiled.\"\n                },\n                {\n                    \"name\": \"set_internal_formal_parameter_count\",\n                    \"parameters\": [\n                        \"int value\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the declared number of parameters.\"\n                },\n                {\n                    \"name\": \"internal_formal_parameter_count_with_receiver\",\n                    \"parameters\": [],\n                    \"return_type\": \"uint16_t\",\n                    \"logic\": \"Returns the internal formal parameter count with the receiver.\"\n                },\n                {\n                    \"name\": \"internal_formal_parameter_count_without_receiver\",\n                    \"parameters\": [],\n                    \"return_type\": \"uint16_t\",\n                    \"logic\": \"Returns the internal formal parameter count without the receiver.\"\n                },\n                {\n                    \"name\": \"DontAdaptArguments\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Set the formal parameter count so the function code will be called without using argument adaptor frames.\"\n                },\n                {\n                    \"name\": \"IsDontAdaptArguments\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the arguments should not be adapted.\"\n                },\n                {\n                    \"name\": \"GetTrustedData\",\n                    \"parameters\": [\n                        \"IsolateForSandbox isolate\"\n                    ],\n                    \"return_type\": \"Tagged<Object>\",\n                    \"logic\": \"Gets the trusted data associated with this SFI.\"\n                },\n                {\n                    \"name\": \"GetUntrustedData\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<Object>\",\n                    \"logic\": \"Gets the untrusted data associated with this SFI.\"\n                },\n                {\n                    \"name\": \"GetTrustedData\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<Object>\",\n                    \"logic\": \"Gets the trusted data associated with this SFI when no Isolate is available.\"\n                },\n                {\n                    \"name\": \"IsApiFunction\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function is an API function.\"\n                },\n                {\n                    \"name\": \"is_class_constructor\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function is a class constructor.\"\n                },\n                {\n                    \"name\": \"HasBytecodeArray\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has a bytecode array.\"\n                },\n                {\n                    \"name\": \"GetBytecodeArray\",\n                    \"parameters\": [\n                        \"IsolateT* isolate\"\n                    ],\n                    \"return_type\": \"Tagged<BytecodeArray>\",\n                    \"logic\": \"Gets the bytecode array associated with the function.\"\n                },\n                {\n                    \"name\": \"set_bytecode_array\",\n                    \"parameters\": [\n                        \"Tagged<BytecodeArray> bytecode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the bytecode array for this SFI.\"\n                },\n                {\n                    \"name\": \"overwrite_bytecode_array\",\n                    \"parameters\": [\n                        \"Tagged<BytecodeArray> bytecode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Like set_bytecode_array but allows overwriting existing bytecode.\"\n                },\n                {\n                  \"name\": \"InterpreterTrampoline\",\n                  \"parameters\": [\"IsolateForSandbox isolate\"],\n                  \"return_type\": \"Tagged<Code>\",\n                  \"logic\": \"Returns the interpreter trampoline code object.\"\n                },\n                 {\n                  \"name\": \"HasInterpreterData\",\n                  \"parameters\": [\"IsolateForSandbox isolate\"],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Checks if the SharedFunctionInfo has associated InterpreterData.\"\n                },\n                {\n                  \"name\": \"interpreter_data\",\n                  \"parameters\": [\"IsolateForSandbox isolate\"],\n                  \"return_type\": \"Tagged<InterpreterData>\",\n                  \"logic\": \"Returns the InterpreterData of a SharedFunctionInfo.\"\n                },\n                {\n                  \"name\": \"set_interpreter_data\",\n                  \"parameters\": [\"Isolate* isolate\", \"Tagged<InterpreterData> interpreter_data\", \"WriteBarrierMode mode\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Sets the InterpreterData for a SharedFunctionInfo.\"\n                },\n                {\n                    \"name\": \"HasBaselineCode\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has baseline code.\"\n                },\n                {\n                    \"name\": \"baseline_code\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<Code>\",\n                    \"logic\": \"Gets the baseline code associated with the function.\"\n                },\n                {\n                    \"name\": \"FlushBaselineCode\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Flushes the baseline code.\"\n                },\n                {\n                    \"name\": \"GetActiveBytecodeArray\",\n                    \"parameters\": [\n                        \"IsolateForSandbox isolate\"\n                    ],\n                    \"return_type\": \"Tagged<BytecodeArray>\",\n                    \"logic\": \"Gets the active bytecode array for the SFI.\"\n                },\n                {\n                    \"name\": \"SetActiveBytecodeArray\",\n                    \"parameters\": [\n                        \"Tagged<BytecodeArray> bytecode\",\n                        \"IsolateForSandbox isolate\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the active bytecode array for the SFI.\"\n                },\n                {\n                    \"name\": \"HasAsmWasmData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has AsmWasmData.\"\n                },\n                {\n                    \"name\": \"HasWasmFunctionData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has WasmFunctionData.\"\n                },\n                 {\n                    \"name\": \"HasWasmExportedFunctionData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has WasmExportedFunctionData.\"\n                },\n                {\n                    \"name\": \"HasWasmJSFunctionData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has WasmJSFunctionData.\"\n                },\n                {\n                  \"name\": \"HasWasmCapiFunctionData\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Checks if the function has WasmCapiFunctionData.\"\n                },\n                {\n                  \"name\": \"HasWasmResumeData\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Checks if the function has WasmResumeData.\"\n                },\n                {\n                    \"name\": \"asm_wasm_data\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<AsmWasmData>\",\n                    \"logic\": \"Gets the asm_wasm_data.\"\n                },\n                {\n                    \"name\": \"wasm_function_data\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<WasmFunctionData>\",\n                    \"logic\": \"Gets the wasm_function_data.\"\n                },\n                {\n                    \"name\": \"wasm_exported_function_data\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<WasmExportedFunctionData>\",\n                    \"logic\": \"Gets the wasm_exported_function_data.\"\n                },\n                {\n                    \"name\": \"wasm_js_function_data\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<WasmJSFunctionData>\",\n                    \"logic\": \"Gets the wasm_js_function_data.\"\n                },\n                {\n                    \"name\": \"wasm_capi_function_data\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<WasmCapiFunctionData>\",\n                    \"logic\": \"Gets the wasm_capi_function_data.\"\n                },\n                {\n                    \"name\": \"wasm_resume_data\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<WasmResumeData>\",\n                    \"logic\": \"Gets the wasm_resume_data.\"\n                },\n                {\n                    \"name\": \"HasBuiltinId\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has a builtin id.\"\n                },\n                {\n                    \"name\": \"builtin_id\",\n                    \"parameters\": [],\n                    \"return_type\": \"Builtin\",\n                    \"logic\": \"Gets the builtin id.\"\n                },\n                {\n                    \"name\": \"HasUncompiledData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has uncompiled data.\"\n                },\n                {\n                    \"name\": \"uncompiled_data\",\n                    \"parameters\": [\n                        \"IsolateForSandbox isolate\"\n                    ],\n                    \"return_type\": \"Tagged<UncompiledData>\",\n                    \"logic\": \"Gets the uncompiled data.\"\n                },\n                {\n                    \"name\": \"set_uncompiled_data\",\n                    \"parameters\": [\n                        \"Tagged<UncompiledData> data\",\n                        \"WriteBarrierMode mode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the uncompiled data.\"\n                },\n                 {\n                    \"name\": \"HasUncompiledDataWithPreparseData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has uncompiled data with preparse data.\"\n                },\n                {\n                    \"name\": \"uncompiled_data_with_preparse_data\",\n                    \"parameters\": [\n                        \"IsolateForSandbox isolate\"\n                    ],\n                    \"return_type\": \"Tagged<UncompiledDataWithPreparseData>\",\n                    \"logic\": \"Gets the uncompiled data with preparse data.\"\n                },\n                {\n                    \"name\": \"set_uncompiled_data_with_preparse_data\",\n                    \"parameters\": [\n                        \"Tagged<UncompiledDataWithPreparseData> data\",\n                        \"WriteBarrierMode mode\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the uncompiled data with preparse data.\"\n                },\n                {\n                    \"name\": \"HasUncompiledDataWithoutPreparseData\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has uncompiled data without preparse data.\"\n                },\n                {\n                  \"name\": \"ClearUncompiledDataJobPointer\",\n                  \"parameters\": [\"IsolateForSandbox isolate\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Clears the job pointer on uncompiled data.\"\n                },\n                 {\n                  \"name\": \"ClearPreparseData\",\n                  \"parameters\": [\"IsolateForSandbox isolate\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Clear out pre-parsed scope data from UncompiledDataWithPreparseData.\"\n                },\n                {\n                    \"name\": \"HasInferredName\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has an inferred name.\"\n                },\n                {\n                    \"name\": \"inferred_name\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<String>\",\n                    \"logic\": \"Gets the inferred name of the function.\"\n                },\n                {\n                    \"name\": \"HasDebugInfo\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has debug info.\"\n                },\n                {\n                    \"name\": \"GetDebugInfo\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"Tagged<DebugInfo>\",\n                    \"logic\": \"Gets the debug info associated with the function.\"\n                },\n                {\n                    \"name\": \"TryGetDebugInfo\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"std::optional<Tagged<DebugInfo>>\",\n                    \"logic\": \"Tries to get the debug info associated with the function.\"\n                },\n                {\n                    \"name\": \"HasBreakInfo\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has break info.\"\n                },\n                {\n                    \"name\": \"BreakAtEntry\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function should break at entry.\"\n                },\n                {\n                    \"name\": \"HasCoverageInfo\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has coverage info.\"\n                },\n                {\n                    \"name\": \"GetCoverageInfo\",\n                    \"parameters\": [\n                        \"Isolate* isolate\"\n                    ],\n                    \"return_type\": \"Tagged<CoverageInfo>\",\n                    \"logic\": \"Gets the coverage info associated with the function.\"\n                },\n                {\n                    \"name\": \"DebugNameCStr\",\n                    \"parameters\": [],\n                    \"return_type\": \"std::unique_ptr<char[]>\",\n                    \"logic\": \"Gets the debug name of the function as a C string.\"\n                },\n                {\n                    \"name\": \"DebugName\",\n                    \"parameters\": [\n                        \"Isolate* isolate\",\n                        \"DirectHandle<SharedFunctionInfo> shared\"\n                    ],\n                    \"return_type\": \"Handle<String>\",\n                    \"logic\": \"Gets the debug name of the function.\"\n                },\n                {\n                    \"name\": \"PassesFilter\",\n                    \"parameters\": [\n                        \"const char* raw_filter\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Used for flags such as --turbo-filter.\"\n                },\n                 {\n                    \"name\": \"script\",\n                    \"parameters\": [],\n                    \"return_type\": \"Tagged<HeapObject>\",\n                    \"logic\": \"Returns the script from which the function originates.\"\n                },\n                {\n                    \"name\": \"script\",\n                    \"parameters\": [\"PtrComprCageBase cage_base\"],\n                    \"return_type\": \"Tagged<HeapObject>\",\n                    \"logic\": \"Returns the script from which the function originates.\"\n                },\n                {\n                    \"name\": \"has_script\",\n                    \"parameters\": [\"AcquireLoadTag tag\"],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if the function has a script object.\"\n                },\n                {\n                    \"name\": \"is_repl_mode\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if the underlying script was parsed and compiled in REPL mode.\"\n                },\n                {\n                    \"name\": \"function_token_position\",\n                    \"parameters\": [],\n                    \"return_type\": \"int\",\n                    \"logic\": \"The position of the 'function' token in the script source.\"\n                },\n                 {\n                    \"name\": \"HasSharedName\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if the function has shared name.\"\n                },\n                {\n                    \"name\": \"language_mode\",\n                    \"parameters\": [],\n                    \"return_type\": \"LanguageMode\",\n                    \"logic\": \"Indicates the language mode.\"\n                },\n                {\n                    \"name\": \"set_language_mode\",\n                    \"parameters\": [\"LanguageMode language_mode\"],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the language mode.\"\n                },\n                {\n                    \"name\": \"is_wrapped\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Indicates whether the source is implicitly wrapped in a function.\"\n                },\n                {\n                  \"name\": \"kind\",\n                  \"parameters\": [],\n                  \"return_type\": \"FunctionKind\",\n                  \"logic\": \"Returns the function kind.\"\n                },\n                {\n                  \"name\": \"UniqueIdInScript\",\n                  \"parameters\": [],\n                  \"return_type\": \"int\",\n                  \"logic\": \"Returns the unique id of the function in the script.\"\n                },\n                 {\n                  \"name\": \"UpdateFunctionMapIndex\",\n                  \"parameters\": [],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Recalculates the |map_index| value after modifications of this shared info.\"\n                },\n                {\n                  \"name\": \"optimization_disabled\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Indicates whether optimizations have been disabled for this shared function info.\"\n                },\n                {\n                  \"name\": \"disabled_optimization_reason\",\n                  \"parameters\": [],\n                  \"return_type\": \"BailoutReason\",\n                  \"logic\": \"The reason why optimization was disabled.\"\n                },\n                {\n                  \"name\": \"DisableOptimization\",\n                  \"parameters\": [\"Isolate* isolate\", \"BailoutReason reason\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Disable (further) attempted optimization of all functions sharing this shared function info.\"\n                },\n                 {\n                    \"name\": \"HasSourceCode\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if the function has source code.\"\n                },\n                {\n                    \"name\": \"GetSourceCode\",\n                    \"parameters\": [\n                        \"Isolate* isolate\",\n                        \"DirectHandle<SharedFunctionInfo> shared\"\n                    ],\n                    \"return_type\": \"DirectHandle<Object>\",\n                    \"logic\": \"Gets the source code associated with the function.\"\n                },\n                {\n                  \"name\": \"GetSourceCodeHarmony\",\n                  \"parameters\": [\"Isolate* isolate\", \"DirectHandle<SharedFunctionInfo> shared\"],\n                  \"return_type\": \"Handle<Object>\",\n                  \"logic\": \"Gets the source code associated with the function with harmony support.\"\n                },\n                {\n                  \"name\": \"IsSubjectToDebugging\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Tells whether this function should be subject to debugging.\"\n                },\n                 {\n                  \"name\": \"IsUserJavaScript\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Whether this function is defined in user-provided JavaScript code.\"\n                },\n                {\n                  \"name\": \"CanDiscardCompiled\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"True if one can flush compiled code from this function.\"\n                },\n                 {\n                  \"name\": \"DiscardCompiled\",\n                  \"parameters\": [\"Isolate* isolate\", \"DirectHandle<SharedFunctionInfo> shared_info\"],\n                  \"return_type\": \"static void\",\n                  \"logic\": \"Flush compiled data from this function, setting it back to CompileLazy and clearing any compiled metadata.\"\n                },\n                {\n                  \"name\": \"DiscardCompiledMetadata\",\n                  \"parameters\": [\"Isolate* isolate\", \"std::function<void(Tagged<HeapObject> object, ObjectSlot slot, Tagged<HeapObject> target)> gc_notify_updated_slot\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Discard the compiled metadata.\"\n                },\n                {\n                  \"name\": \"ShouldFlushCode\",\n                  \"parameters\": [\"base::EnumSet<CodeFlushMode> code_flush_mode\"],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Returns true if the function has old bytecode that could be flushed.\"\n                },\n                {\n                  \"name\": \"GetInlineability\",\n                  \"parameters\": [\"IsolateT* isolate\"],\n                  \"return_type\": \"Inlineability\",\n                  \"logic\": \"Returns whether the function is inlineable or not.\"\n                },\n                {\n                  \"name\": \"SourceSize\",\n                  \"parameters\": [],\n                  \"return_type\": \"int\",\n                  \"logic\": \"Returns source size of this function.\"\n                },\n                {\n                  \"name\": \"has_simple_parameters\",\n                  \"parameters\": [],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Returns `false` if formal parameters include rest parameters, optional parameters, or destructuring parameters.\"\n                },\n                {\n                  \"name\": \"InitFromFunctionLiteral\",\n                  \"parameters\": [\"IsolateT* isolate\", \"FunctionLiteral* lit\", \"bool is_toplevel\"],\n                  \"return_type\": \"static void\",\n                  \"logic\": \"Initialize a SharedFunctionInfo from a parsed or preparsed function literal.\"\n                },\n                {\n                  \"name\": \"CreateAndSetUncompiledData\",\n                  \"parameters\": [\"IsolateT* isolate\", \"FunctionLiteral* lit\"],\n                  \"return_type\": \"static void\",\n                  \"logic\": \"Creates and sets the UncompiledData for the SharedFunctionInfo from a parsed or preparsed function literal.\"\n                },\n                {\n                  \"name\": \"UpdateExpectedNofPropertiesFromEstimate\",\n                  \"parameters\": [\"FunctionLiteral* literal\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Updates the expected number of properties based on estimate from parser.\"\n                },\n                {\n                  \"name\": \"UpdateAndFinalizeExpectedNofPropertiesFromEstimate\",\n                  \"parameters\": [\"FunctionLiteral* literal\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Updates and finalizes the expected number of properties based on estimate from parser.\"\n                },\n                 {\n                  \"name\": \"SetFunctionTokenPosition\",\n                  \"parameters\": [\"int function_token_position\", \"int start_position\"],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Sets the FunctionTokenOffset field based on the given token position and start position.\"\n                },\n                {\n                  \"name\": \"EnsureBytecodeArrayAvailable\",\n                  \"parameters\": [\"Isolate* isolate\", \"Handle<SharedFunctionInfo> shared_info\", \"IsCompiledScope* is_compiled_scope\", \"CreateSourcePositions flag\"],\n                  \"return_type\": \"static void\",\n                  \"logic\": \"Ensure bytecode array is available for the shared function info.\"\n                },\n                {\n                  \"name\": \"CanCollectSourcePosition\",\n                  \"parameters\": [\"Isolate* isolate\"],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Check if source position can be collected for the shared function info.\"\n                },\n                {\n                  \"name\": \"EnsureSourcePositionsAvailable\",\n                  \"parameters\": [\"Isolate* isolate\", \"DirectHandle<SharedFunctionInfo> shared_info\"],\n                  \"return_type\": \"static void\",\n                  \"logic\": \"Ensure source positions are available for the shared function info.\"\n                },\n                {\n                  \"name\": \"AreSourcePositionsAvailable\",\n                  \"parameters\": [\"IsolateT* isolate\"],\n                  \"return_type\": \"bool\",\n                  \"logic\": \"Check if source positions are available for the shared function info.\"\n                },\n                {\n                  \"name\": \"Hash\",\n                  \"parameters\": [],\n                  \"return_type\": \"uint32_t\",\n                  \"logic\": \"Hash based on function literal id and script id.\"\n                },\n                {\n                  \"name\": \"construct_as_builtin\",\n                  \""
}