{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler-dispatcher/optimizing-compile-dispatcher.cc",
  "imports": [
    "src/compiler-dispatcher/optimizing-compile-dispatcher.h",
    "src/base/atomicops.h",
    "src/base/fpu.h",
    "src/base/logging.h",
    "src/base/platform/mutex.h",
    "src/base/vector.h",
    "src/codegen/compiler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/execution/isolate.h",
    "src/execution/local-isolate-inl.h",
    "src/handles/handles-inl.h",
    "src/heap/local-heap-inl.h",
    "src/init/v8.h",
    "src/logging/counters.h",
    "src/logging/log.h",
    "src/logging/runtime-call-stats-scope.h",
    "src/objects/js-function.h",
    "src/tasks/cancelable-task.h",
    "src/tracing/trace-event.h"
  ],
  "classes": [
    {
      "name": "OptimizingCompileTaskExecutor::CompileTask",
      "properties": [
        "task_executor_"
      ],
      "methods": [
        {
          "name": "CompileTask",
          "parameters": [
            "OptimizingCompileTaskExecutor* task_executor"
          ],
          "return_type": "explicit",
          "logic": "Constructor for CompileTask, initializes task_executor_."
        },
        {
          "name": "Run",
          "parameters": [
            "JobDelegate* delegate"
          ],
          "return_type": "void",
          "logic": "Runs the compilation job. Dequeues jobs, performs compilation using Turbofan, and handles yielding and error conditions. It manages a LocalIsolate for the compilation process."
        },
        {
          "name": "RunCompilationJob",
          "parameters": [
            "Isolate* isolate",
            "LocalIsolate& local_isolate",
            "TurbofanCompilationJob* job"
          ],
          "return_type": "void",
          "logic": "Executes the compilation job, measures time, introduces a delay if configured, and executes the compilation."
        },
        {
          "name": "GetMaxConcurrency",
          "parameters": [
            "size_t worker_count"
          ],
          "return_type": "size_t",
          "logic": "Determines the maximum concurrency for this task based on the queue length and worker count."
        }
      ]
    },
    {
      "name": "OptimizingCompileTaskExecutor",
      "properties": [
        "input_queue_",
        "recompilation_delay_",
        "is_initialized_",
        "task_states_",
        "job_handle_"
      ],
      "methods": [
        {
          "name": "OptimizingCompileTaskExecutor",
          "parameters": [],
          "return_type": "explicit",
          "logic": "Constructor for OptimizingCompileTaskExecutor. Initializes the input queue and recompilation delay from flags."
        },
        {
          "name": "~OptimizingCompileTaskExecutor",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for OptimizingCompileTaskExecutor. Waits for the job handle to complete and ensures the input queue is empty."
        },
        {
          "name": "EnsureInitialized",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the executor, posting the compilation job to the platform if concurrent recompilation is enabled. It determines the number of worker threads to use."
        },
        {
          "name": "NextInput",
          "parameters": [
            "OptimizingCompileTaskState& task_state"
          ],
          "return_type": "TurbofanCompilationJob*",
          "logic": "Dequeues a TurbofanCompilationJob from the input queue."
        },
        {
          "name": "NextInputIfIsolateMatches",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "TurbofanCompilationJob*",
          "logic": "Dequeues a TurbofanCompilationJob from the input queue if it matches the specified isolate."
        },
        {
          "name": "CompileNext",
          "parameters": [
            "Isolate* isolate",
            "LocalIsolate& local_isolate",
            "TurbofanCompilationJob* job"
          ],
          "return_type": "void",
          "logic": "Executes the compilation job and queues the finished job with the dispatcher."
        },
        {
          "name": "IsTaskRunningForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if any task is currently running for the given isolate. Asserts that mutex is held."
        },
        {
          "name": "HasCompilationJobsForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if the input queue contains jobs for a given isolate or if a task is currently running for that isolate."
        },
        {
          "name": "ClearTaskState",
          "parameters": [
            "OptimizingCompileTaskState& task_state"
          ],
          "return_type": "void",
          "logic": "Clears the isolate from the task state, indicating that the task is finished with that isolate. Asserts that mutex is held."
        },
        {
          "name": "TryQueueForOptimization",
          "parameters": [
            "std::unique_ptr<TurbofanCompilationJob>& job"
          ],
          "return_type": "bool",
          "logic": "Enqueues the compilation job for optimization. Updates task priority, enabled if supported, and increases concurrency notifications."
        },
        {
          "name": "WaitUntilCompilationJobsDoneForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Waits until all compilation jobs for the given isolate are done."
        }
      ]
    },
    {
      "name": "OptimizingCompileDispatcher",
      "properties": [
        "isolate_",
        "task_executor_",
        "output_queue_"
      ],
      "methods": [
        {
          "name": "OptimizingCompileDispatcher",
          "parameters": [
            "Isolate* isolate",
            "OptimizingCompileTaskExecutor* task_executor"
          ],
          "return_type": "explicit",
          "logic": "Constructor for OptimizingCompileDispatcher, initializes isolate_ and task_executor_."
        },
        {
          "name": "~OptimizingCompileDispatcher",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for OptimizingCompileDispatcher. Asserts that the output queue is empty."
        },
        {
          "name": "QueueFinishedJob",
          "parameters": [
            "TurbofanCompilationJob* job"
          ],
          "return_type": "void",
          "logic": "Enqueues a finished compilation job to the output queue and requests code installation."
        },
        {
          "name": "FlushOutputQueue",
          "parameters": [],
          "return_type": "void",
          "logic": "Dequeues and disposes all compilation jobs from the output queue."
        },
        {
          "name": "FinishTearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Waits for all compilation jobs to finish and flushes the output queue."
        },
        {
          "name": "FlushInputQueue",
          "parameters": [],
          "return_type": "void",
          "logic": "Flushes all compilation jobs for the isolate from the input queue."
        },
        {
          "name": "WaitUntilCompilationJobsDone",
          "parameters": [],
          "return_type": "void",
          "logic": "Waits until all compilation jobs are done using ExecuteMainThreadWhileParked."
        },
        {
          "name": "FlushQueues",
          "parameters": [
            "BlockingBehavior blocking_behavior"
          ],
          "return_type": "void",
          "logic": "Flushes input and output queues, blocking if requested."
        },
        {
          "name": "Flush",
          "parameters": [
            "BlockingBehavior blocking_behavior"
          ],
          "return_type": "void",
          "logic": "Flushes compilation queues based on the specified blocking behavior. It prints a message if trace_concurrent_recompilation flag is true."
        },
        {
          "name": "StartTearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts the tear down process by flushing the input queue."
        },
        {
          "name": "InstallOptimizedFunctions",
          "parameters": [],
          "return_type": "void",
          "logic": "Installs optimized functions by dequeuing jobs from the output queue and finalizing them. It handles cases where the function has already been optimized by another task."
        },
        {
          "name": "InstallGeneratedBuiltins",
          "parameters": [
            "int installed_count"
          ],
          "return_type": "int",
          "logic": "Installs generated builtins in deterministic order, based on finalization order."
        },
        {
          "name": "HasJobs",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are any compilation jobs for the isolate in the input queue or the output queue."
        },
        {
          "name": "TryQueueForOptimization",
          "parameters": [
            "std::unique_ptr<TurbofanCompilationJob>& job"
          ],
          "return_type": "bool",
          "logic": "Tries to queue a job for optimization via the task executor."
        },
        {
          "name": "Prioritize",
          "parameters": [
            "Tagged<SharedFunctionInfo> function"
          ],
          "return_type": "void",
          "logic": "Prioritizes compilation of a shared function info by moving it to the front of the input queue."
        }
      ]
    },
    {
      "name": "OptimizingCompileInputQueue",
      "properties": [
        "queue_",
        "mutex_",
        "task_finished_",
        "capacity_"
      ],
      "methods": [
        {
          "name": "Prioritize",
          "parameters": [
            "Isolate* isolate",
            "Tagged<SharedFunctionInfo> function"
          ],
          "return_type": "void",
          "logic": "Prioritizes the job related to the provided SharedFunctionInfo for a specific isolate within the queue."
        },
        {
          "name": "FlushJobsForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Flushes all jobs associated with a given isolate from the queue."
        },
        {
          "name": "HasJobForIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Checks if there is a job in the queue for the specified isolate."
        },
        {
          "name": "Dequeue",
          "parameters": [
            "OptimizingCompileTaskState& task_state"
          ],
          "return_type": "TurbofanCompilationJob*",
          "logic": "Dequeues a job from the queue and updates the task state with the isolate of the dequeued job."
        },
        {
          "name": "DequeueIfIsolateMatches",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "TurbofanCompilationJob*",
          "logic": "Dequeues a job from the queue only if its isolate matches the provided isolate."
        },
        {
          "name": "Enqueue",
          "parameters": [
            "std::unique_ptr<TurbofanCompilationJob>& job"
          ],
          "return_type": "bool",
          "logic": "Enqueues a job into the queue, returning true if successful (queue not full)."
        }
      ]
    },
    {
      "name": "OptimizingCompileOutputQueue",
      "properties": [
        "queue_",
        "mutex_"
      ],
      "methods": [
        {
          "name": "Enqueue",
          "parameters": [
            "TurbofanCompilationJob* job"
          ],
          "return_type": "void",
          "logic": "Enqueues a job into the queue."
        },
        {
          "name": "Dequeue",
          "parameters": [],
          "return_type": "std::unique_ptr<TurbofanCompilationJob>",
          "logic": "Dequeues a job from the queue."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of jobs in the queue."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the queue is empty."
        },
        {
          "name": "InstallGeneratedBuiltins",
          "parameters": [
            "Isolate* isolate",
            "int installed_count"
          ],
          "return_type": "int",
          "logic": "Installs generated builtins from the queue, ensuring deterministic order."
        }
      ]
    }
  ],
  "functions": []
}