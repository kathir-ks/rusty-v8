{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/tasks/operations-barrier.h",
  "imports": [
    "<cstdint>",
    "src/base/macros.h",
    "src/base/platform/condition-variable.h",
    "src/base/platform/mutex.h"
  ],
  "classes": [
    {
      "name": "OperationsBarrier::Token",
      "properties": [
        "OperationsBarrier* outer_ = nullptr"
      ],
      "methods": [
        {
          "name": "Token",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor. Initializes outer_ to nullptr."
        },
        {
          "name": "~Token",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. If outer_ is not null, calls Release() on the associated OperationsBarrier to decrement the operations count."
        },
        {
          "name": "Token",
          "parameters": [
            "const Token&"
          ],
          "return_type": "Token",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "Token",
          "parameters": [
            "Token&& other"
          ],
          "return_type": "Token",
          "logic": "Move constructor. Transfers ownership of the OperationsBarrier pointer from other to this."
        },
        {
          "name": "operator=",
          "parameters": [
            "const Token&"
          ],
          "return_type": "Token&",
          "logic": "Deleted copy assignment operator."
        },
        {
          "name": "operator=",
          "parameters": [
            "Token&& other"
          ],
          "return_type": "Token&",
          "logic": "Move assignment operator. Transfers ownership of the OperationsBarrier pointer from other to this."
        },
        {
          "name": "operator bool",
          "parameters": [],
          "return_type": "bool",
          "logic": "Conversion operator to bool. Returns true if outer_ is not null, indicating that the Token is valid and an operation is active."
        },
        {
          "name": "Token",
          "parameters": [
            "OperationsBarrier* outer"
          ],
          "return_type": "explicit Token",
          "logic": "Private constructor used by OperationsBarrier::TryLock(). Sets outer_ to the provided OperationsBarrier pointer."
        }
      ]
    },
    {
      "name": "OperationsBarrier",
      "properties": [
        "base::Mutex mutex_",
        "base::ConditionVariable release_condition_",
        "bool cancelled_ = false",
        "size_t operations_count_{0}"
      ],
      "methods": [
        {
          "name": "OperationsBarrier",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor. Initializes the mutex, condition variable, cancelled flag to false, and operations count to 0."
        },
        {
          "name": "~OperationsBarrier",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Asserts that `cancelled_` is true. This enforces the rule that CancelAndWait() must be called before destroying the OperationsBarrier."
        },
        {
          "name": "OperationsBarrier",
          "parameters": [
            "const OperationsBarrier&"
          ],
          "return_type": "OperationsBarrier",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const OperationsBarrier&"
          ],
          "return_type": "OperationsBarrier&",
          "logic": "Deleted copy assignment operator."
        },
        {
          "name": "TryLock",
          "parameters": [],
          "return_type": "Token",
          "logic": "Attempts to acquire a lock. If operations are allowed (not cancelled), increments the operations count, and returns a valid Token object. Otherwise, returns an invalid Token object."
        },
        {
          "name": "CancelAndWait",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the cancelled flag to true, preventing further calls to TryLock() from succeeding. Waits for all ongoing operations to complete by checking operations_count_ and using a condition variable."
        },
        {
          "name": "cancelled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the value of the cancelled_ flag, indicating whether CancelAndWait() has been called."
        },
        {
          "name": "Release",
          "parameters": [],
          "return_type": "void",
          "logic": "Decrements the operations count. If the count reaches 0 and the barrier has been cancelled, signals the condition variable to wake up the CancelAndWait() thread."
        }
      ]
    }
  ],
  "functions": []
}