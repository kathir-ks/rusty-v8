{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/flags/flag-definitions.h",
  "imports": [],
  "classes": [
    {
      "name": "FlagValue<ctype>",
      "properties": [
        "value"
      ],
      "methods": []
    },
    {
      "name": "Flag",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "DEFINE_IMPLICATION(whenflag, thenflag)",
      "parameters": [
        "whenflag",
        "thenflag"
      ],
      "return_type": "void",
      "logic": "Defines a flag implication, setting 'thenflag' to true if 'whenflag' is true."
    },
    {
      "name": "DEFINE_WEAK_IMPLICATION(whenflag, thenflag)",
      "parameters": [
        "whenflag",
        "thenflag"
      ],
      "return_type": "void",
      "logic": "Defines a weak flag implication, setting 'thenflag' to true if 'whenflag' is true, but can be overwritten."
    },
    {
      "name": "DEFINE_WEAK_NEG_IMPLICATION(whenflag, thenflag)",
      "parameters": [
        "whenflag",
        "thenflag"
      ],
      "return_type": "void",
      "logic": "Defines a weak negative flag implication, setting 'thenflag' to false if 'whenflag' is true, but can be overwritten."
    },
    {
      "name": "DEFINE_NEG_IMPLICATION(whenflag, thenflag)",
      "parameters": [
        "whenflag",
        "thenflag"
      ],
      "return_type": "void",
      "logic": "Defines a negative flag implication, setting 'thenflag' to false if 'whenflag' is true."
    },
    {
      "name": "DEFINE_NEG_NEG_IMPLICATION(whenflag, thenflag)",
      "parameters": [
        "whenflag",
        "thenflag"
      ],
      "return_type": "void",
      "logic": "Defines a negative-negative flag implication. It likely sets a flag to true if another flag is set to false."
    },
    {
      "name": "DEFINE_VALUE_IMPLICATION(whenflag, thenflag, value)",
      "parameters": [
        "whenflag",
        "thenflag",
        "value"
      ],
      "return_type": "void",
      "logic": "Sets the value of 'thenflag' to 'value' if 'whenflag' is true."
    },
    {
      "name": "DEFINE_WEAK_VALUE_IMPLICATION(whenflag, thenflag, value)",
      "parameters": [
        "whenflag",
        "thenflag",
        "value"
      ],
      "return_type": "void",
      "logic": "Sets the value of 'thenflag' to 'value' if 'whenflag' is true, but can be overwritten."
    },
    {
      "name": "DEFINE_GENERIC_IMPLICATION(whenflag, statement)",
      "parameters": [
        "whenflag",
        "statement"
      ],
      "return_type": "void",
      "logic": "Executes 'statement' if 'whenflag' is true."
    },
    {
      "name": "DEFINE_REQUIREMENT(statement)",
      "parameters": [
        "statement"
      ],
      "return_type": "void",
      "logic": "Checks if 'statement' is true and aborts if not."
    },
    {
      "name": "DEFINE_NEG_VALUE_IMPLICATION(whenflag, thenflag, value)",
      "parameters": [
        "whenflag",
        "thenflag",
        "value"
      ],
      "return_type": "void",
      "logic": "Sets the value of 'thenflag' to 'value' if 'whenflag' is false."
    },
    {
      "name": "DEFINE_NEG_VALUE_VALUE_IMPLICATION(whenflag, whenvalue, thenflag, thenvalue)",
      "parameters": [
        "whenflag",
        "whenvalue",
        "thenflag",
        "thenvalue"
      ],
      "return_type": "void",
      "logic": "Sets the value of 'thenflag' to 'thenvalue' if 'whenflag' is not equal to 'whenvalue'."
    },
    {
      "name": "DEFINE_MIN_VALUE_IMPLICATION(flag, min_value)",
      "parameters": [
        "flag",
        "min_value"
      ],
      "return_type": "void",
      "logic": "Sets the value of 'flag' to 'min_value' if 'flag' is less than 'min_value'."
    },
    {
      "name": "DEFINE_DISABLE_FLAG_IMPLICATION(whenflag, thenflag)",
      "parameters": [
        "whenflag",
        "thenflag"
      ],
      "return_type": "void",
      "logic": "Disables the flag 'thenflag' (sets it to false) if 'whenflag' is true, and prints a warning to stderr."
    },
    {
      "name": "TriggerImplication(bool condition, const char* whenflag, FlagValue<ctype>* thenflag, const char* thenflag_name, ctype value, bool weak)",
      "parameters": [
        "condition",
        "whenflag",
        "thenflag",
        "thenflag_name",
        "value",
        "weak"
      ],
      "return_type": "bool",
      "logic": "Conditionally sets a FlagValue, based on a flag name and implication properties.  Returns true if changed."
    },
    {
      "name": "DEFINE_BOOL(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a boolean flag."
    },
    {
      "name": "DEFINE_BOOL_READONLY(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a read-only boolean flag."
    },
    {
      "name": "DEFINE_MAYBE_BOOL(nam, cmt)",
      "parameters": [
        "nam",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a maybe boolean flag (std::optional<bool>)."
    },
    {
      "name": "DEFINE_INT(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines an integer flag."
    },
    {
      "name": "DEFINE_UINT(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines an unsigned integer flag."
    },
    {
      "name": "DEFINE_UINT_READONLY(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a read-only unsigned integer flag."
    },
    {
      "name": "DEFINE_UINT64(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a 64-bit unsigned integer flag."
    },
    {
      "name": "DEFINE_FLOAT(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a floating-point flag."
    },
    {
      "name": "DEFINE_SIZE_T(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a size_t flag."
    },
    {
      "name": "DEFINE_STRING(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a string flag."
    },
    {
      "name": "DEFINE_ALIAS_BOOL(alias, nam)",
      "parameters": [
        "alias",
        "nam"
      ],
      "return_type": "void",
      "logic": "Defines a boolean flag alias."
    },
    {
      "name": "DEFINE_ALIAS_INT(alias, nam)",
      "parameters": [
        "alias",
        "nam"
      ],
      "return_type": "void",
      "logic": "Defines an integer flag alias."
    },
    {
      "name": "DEFINE_ALIAS_FLOAT(alias, nam)",
      "parameters": [
        "alias",
        "nam"
      ],
      "return_type": "void",
      "logic": "Defines a floating-point flag alias."
    },
    {
      "name": "DEFINE_ALIAS_SIZE_T(alias, nam)",
      "parameters": [
        "alias",
        "nam"
      ],
      "return_type": "void",
      "logic": "Defines a size_t flag alias."
    },
    {
      "name": "DEFINE_ALIAS_STRING(alias, nam)",
      "parameters": [
        "alias",
        "nam"
      ],
      "return_type": "void",
      "logic": "Defines a string flag alias."
    },
    {
      "name": "DEFINE_DEBUG_BOOL(nam, def, cmt)",
      "parameters": [
        "nam",
        "def",
        "cmt"
      ],
      "return_type": "void",
      "logic": "Defines a boolean flag that's read/write in debug mode, and read-only otherwise."
    },
    {
      "name": "FLAG_INPROGRESS_FEATURES(id, description)",
      "parameters": [
        "id",
        "description"
      ],
      "return_type": "void",
      "logic": "Helper macro to define boolean flags to track in progress JavaScript features."
    },
    {
      "name": "FLAG_STAGED_FEATURES(id, description)",
      "parameters": [
        "id",
        "description"
      ],
      "return_type": "void",
      "logic": "Helper macro to define boolean flags to track staged JavaScript features."
    },
    {
      "name": "FLAG_SHIPPING_FEATURES(id, description)",
      "parameters": [
        "id",
        "description"
      ],
      "return_type": "void",
      "logic": "Helper macro to define boolean flags to track shipping JavaScript features."
    }
  ]
}