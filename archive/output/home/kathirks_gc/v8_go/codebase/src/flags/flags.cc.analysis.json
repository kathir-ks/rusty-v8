{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/flags/flags.cc",
  "imports": [
    "src/flags/flags.h",
    "<algorithm>",
    "<array>",
    "<cctype>",
    "<cerrno>",
    "<cinttypes>",
    "<cstdlib>",
    "<cstring>",
    "<iomanip>",
    "<optional>",
    "<set>",
    "<sstream>",
    "src/base/hashing.h",
    "src/base/lazy-instance.h",
    "src/base/platform/platform.h",
    "src/codegen/cpu-features.h",
    "src/flags/flags-impl.h",
    "src/logging/tracing-flags.h",
    "src/tracing/tracing-category-observer.h",
    "src/utils/allocation.h",
    "src/utils/memcopy.h",
    "src/utils/ostreams.h",
    "src/utils/utils.h",
    "src/wasm/wasm-limits.h"
  ],
  "classes": [
    {
      "name": "FlagHelpers",
      "properties": [],
      "methods": [
        {
          "name": "NormalizeChar",
          "parameters": [
            "char ch"
          ],
          "return_type": "char",
          "logic": "Normalizes a character by replacing underscores with hyphens."
        },
        {
          "name": "FlagNamesCmp",
          "parameters": [
            "const char* a",
            "const char* b"
          ],
          "return_type": "int",
          "logic": "Compares two flag names lexicographically, normalizing characters."
        },
        {
          "name": "EqualNames",
          "parameters": [
            "const char* a",
            "const char* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two flag names are equal after normalization."
        },
        {
          "name": "EqualNameWithSuffix",
          "parameters": [
            "const char* a",
            "const char* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two flag names are equal, allowing for the second name to have a suffix starting with a white space character."
        }
      ]
    },
    {
      "name": "Flag",
      "properties": [],
      "methods": [
        {
          "name": "set_string_value",
          "parameters": [
            "const char* new_value",
            "bool owns_new_value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the string value of a flag, managing memory ownership.  Checks if the flag value should change before applying the update and deleting the previous string value if it was owned."
        },
        {
          "name": "ShouldCheckFlagContradictions",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines whether to check for contradictions between flags, taking into account various conditions like fuzzing and allowing overwrites."
        },
        {
          "name": "CheckFlagChange",
          "parameters": [
            "SetBy new_set_by",
            "bool change_flag",
            "const char* implied_by"
          ],
          "return_type": "bool",
          "logic": "Checks if a flag change is allowed, considering implication rules and read-only status.  Handles contradictory flag settings and implications and updates the flag's set_by_ status and implied_by information."
        },
        {
          "name": "IsDefault",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the flag's current value is equal to its default value."
        },
        {
          "name": "ReleaseDynamicAllocations",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases dynamically allocated memory associated with a string flag's value."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the flag to its default value."
        }
      ]
    },
    {
      "name": "FlagLess",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const Flag* a",
            "const Flag* b"
          ],
          "return_type": "bool",
          "logic": "Compares two flags based on their names using FlagHelpers::FlagNamesCmp, defining an ordering for sorting."
        }
      ]
    },
    {
      "name": "FlagNameGreater",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const Flag* a",
            "const char* b"
          ],
          "return_type": "bool",
          "logic": "Compares a flag's name to a string using FlagHelpers::FlagNamesCmp, used for finding a lower bound in a sorted array."
        }
      ]
    },
    {
      "name": "FlagMapByName",
      "properties": [
        "flags_"
      ],
      "methods": [
        {
          "name": "FlagMapByName",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor that populates an array of flag pointers and sorts them by name for efficient lookup using binary search."
        },
        {
          "name": "GetFlag",
          "parameters": [
            "const char* name"
          ],
          "return_type": "Flag*",
          "logic": "Performs a binary search in the sorted array of flag pointers to find the flag with the greatest name less than or equal to the given name."
        }
      ]
    },
    {
      "name": "PrintFlagValue",
      "properties": [
        "flag"
      ],
      "methods": []
    },
    {
      "name": "FlagList",
      "properties": [],
      "methods": [
        {
          "name": "SetFlagsFromCommandLine",
          "parameters": [
            "int* argc",
            "char** argv",
            "bool remove_flags",
            "HelpOptions help_options"
          ],
          "return_type": "int",
          "logic": "Parses command-line arguments, identifies flag names and values, and sets the corresponding flag values.  Removes the processed flags from the command line if `remove_flags` is true."
        },
        {
          "name": "SetFlagsFromString",
          "parameters": [
            "const char* str",
            "size_t len"
          ],
          "return_type": "int",
          "logic": "Parses a string containing flag settings and sets the corresponding flag values.  Uses `SetFlagsFromCommandLine` to apply the parsed flags."
        },
        {
          "name": "FreezeFlags",
          "parameters": [],
          "return_type": "void",
          "logic": "Prevents further modification of the flag values by setting a global freeze flag and memory protecting the `v8_flags` struct."
        },
        {
          "name": "IsFrozen",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the flags have been frozen."
        },
        {
          "name": "ReleaseDynamicAllocations",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases dynamic allocations for string flags."
        },
        {
          "name": "PrintHelp",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints a help message listing all available flags, their types, defaults, and comments."
        },
        {
          "name": "PrintValues",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the current values of all flags."
        },
        {
          "name": "PrintFeatureFlagsJSON",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints feature flags in a JSON format categorized as 'in-progress', 'staged', and 'shipping' for different sub-systems like javascript, harmony and wasm."
        },
        {
          "name": "ResolveContradictionsWhenFuzzing",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets certain contradictory flags to default values when fuzzing is enabled, to avoid issues during fuzzing runs."
        },
        {
          "name": "EnforceFlagImplications",
          "parameters": [],
          "return_type": "void",
          "logic": "Enforces flag implications by iteratively applying rules defined in `flag-definitions.h` until a fixed point is reached."
        },
        {
          "name": "Hash",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Calculates and returns a hash value representing the current state of the flags.  Caches the hash to avoid recomputation."
        },
        {
          "name": "ResetFlagHash",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets cached flag hash value to 0."
        }
      ]
    },
    {
      "name": "ImplicationProcessor",
      "properties": [
        "num_iterations_",
        "cycle_start_hash_",
        "cycle_"
      ],
      "methods": [
        {
          "name": "EnforceImplications",
          "parameters": [],
          "return_type": "bool",
          "logic": "Iterates through implication definitions to enforce flag implications and handle potential cycles."
        },
        {
          "name": "TriggerImplication",
          "parameters": [
            "bool premise",
            "const char* premise_name",
            "FlagValue<T>* conclusion_value",
            "const char* conclusion_name",
            "T value",
            "bool weak_implication"
          ],
          "return_type": "bool",
          "logic": "Applies an implication rule to a flag, setting its value based on a premise and implication type, and handling contradictions."
        },
        {
          "name": "TriggerImplication",
          "parameters": [
            "bool premise",
            "const char* premise_name",
            "const FlagValue<T>* conclusion_value",
            "const char* conclusion_name",
            "T value",
            "bool weak_implication"
          ],
          "return_type": "bool",
          "logic": "Applies an implication rule to a read-only flag (const overload) based on a premise and implication type. Asserts that the new value matches default value."
        },
        {
          "name": "CheckForCycle",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks for cycles in flag implications using hash comparison after a maximum iteration count.  Triggers a fatal error if a cycle is detected."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "FlagName flag_name"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a FlagName object to an output stream, formatting the output to include '--' or '--no-' prefixes."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "PrintFlagValue flag_value"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print the value of a Flag to an output stream, handling different flag types."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const Flag& flag"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a Flag to an output stream, using the appropriate flag format depending on if it is a boolean or not."
    },
    {
      "name": "FindImplicationFlagByName",
      "parameters": [
        "const char* name"
      ],
      "return_type": "Flag*",
      "logic": "Looks up a flag by name, using a binary search. Asserts the flag exists."
    },
    {
      "name": "FindFlagByName",
      "parameters": [
        "const char* name"
      ],
      "return_type": "Flag*",
      "logic": "Looks up a flag by name, using a binary search. Returns nullptr if not found."
    },
    {
      "name": "FindFlagByPointer",
      "parameters": [
        "const void* ptr"
      ],
      "return_type": "Flag*",
      "logic": "Finds a flag by comparing its underlying value address with a given pointer."
    },
    {
      "name": "Type2String",
      "parameters": [
        "Flag::FlagType type"
      ],
      "return_type": "const char*",
      "logic": "Returns a string representation of a Flag::FlagType."
    },
    {
      "name": "ComputeFlagListHash",
      "parameters": [],
      "return_type": "uint32_t",
      "logic": "Computes a hash of all non-default flag values (except profile_deserialization, random_seed and predictable), used to detect changes in flag settings."
    },
    {
      "name": "SplitArgument",
      "parameters": [
        "const char* arg",
        "char* buffer",
        "int buffer_size",
        "const char** name",
        "const char** value",
        "bool* negated"
      ],
      "return_type": "static void",
      "logic": "Splits a command line argument into its flag name, value, and negated status."
    },
    {
      "name": "TryParseUnsigned",
      "parameters": [
        "Flag* flag",
        "const char* arg",
        "const char* value",
        "char** endp",
        "T* out_val"
      ],
      "return_type": "bool",
      "logic": "Tries to parse an unsigned value and converts it to a specific type T, checks for range errors and returns true upon success."
    },
    {
      "name": "SkipWhiteSpace",
      "parameters": [
        "char* p"
      ],
      "return_type": "static char*",
      "logic": "Skips leading whitespace from the provided char pointer."
    },
    {
      "name": "SkipBlackSpace",
      "parameters": [
        "char* p"
      ],
      "return_type": "static char*",
      "logic": "Skips non-whitespace characters from the provided char pointer."
    },
    {
      "name": "PrintFlagsJSONArray",
      "parameters": [
        "std::ostream& os",
        "const std::vector<const char*>& flags"
      ],
      "return_type": "void",
      "logic": "Prints an array of flags (const char* array) to the given ostream in JSON format."
    },
    {
      "name": "PrintFeatureFlagsJSONObject",
      "parameters": [
        "std::ostream& os",
        "const std::vector<const char*>& inprogress_flags",
        "const std::vector<const char*>& staged_flags",
        "const std::vector<const char*>& shipping_flags"
      ],
      "return_type": "void",
      "logic": "Prints a feature flags object (with in-progress, staged, and shipping arrays) to the given ostream in JSON format."
    }
  ]
}