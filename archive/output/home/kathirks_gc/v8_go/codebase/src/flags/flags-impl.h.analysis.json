{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/flags/flags-impl.h",
  "imports": [
    "<optional>",
    "<unordered_set>",
    "src/base/macros.h",
    "src/base/vector.h",
    "src/flags/flags.h"
  ],
  "classes": [
    {
      "name": "FlagHelpers",
      "properties": [],
      "methods": [
        {
          "name": "NormalizeChar",
          "parameters": [
            "char ch"
          ],
          "return_type": "char",
          "logic": "Normalizes a character, presumably for case-insensitive comparison or other flag-related processing.  Details of the normalization are not visible from the header file alone."
        },
        {
          "name": "FlagNamesCmp",
          "parameters": [
            "const char* a",
            "const char* b"
          ],
          "return_type": "int",
          "logic": "Compares two flag names.  Likely used for sorting or searching flags.  Returns a negative value if a < b, 0 if a == b, and a positive value if a > b."
        },
        {
          "name": "EqualNames",
          "parameters": [
            "const char* a",
            "const char* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two flag names are equal."
        },
        {
          "name": "EqualNameWithSuffix",
          "parameters": [
            "const char* a",
            "const char* b"
          ],
          "return_type": "bool",
          "logic": "Checks if a flag name `a` is equal to flag name `b` while taking a possible suffix into account.  The precise meaning of suffix and its implication is unknown without examining the source code."
        }
      ]
    },
    {
      "name": "Flag",
      "properties": [
        "FlagType type_",
        "const char* name_",
        "void* valptr_",
        "const void* defptr_",
        "const char* cmt_",
        "bool owns_ptr_",
        "SetBy set_by_",
        "const char* implied_by_",
        "const Flag* implied_by_ptr_"
      ],
      "methods": [
        {
          "name": "IsAnyImplication",
          "parameters": [
            "Flag::SetBy set_by"
          ],
          "return_type": "constexpr bool",
          "logic": "Checks if the SetBy value indicates a weak or strong implication."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "FlagType",
          "logic": "Returns the type of the flag (bool, int, string, etc.)."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the flag."
        },
        {
          "name": "comment",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the comment associated with the flag, explaining its purpose."
        },
        {
          "name": "PointsTo",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "bool",
          "logic": "Checks if the flag's `valptr_` points to the given pointer `ptr`."
        },
        {
          "name": "ImpliedBy",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "bool",
          "logic": "Checks if the flag is implied by another flag pointed to by `ptr`. Detects circular dependencies."
        },
        {
          "name": "bool_variable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the current boolean value of the flag."
        },
        {
          "name": "set_bool_variable",
          "parameters": [
            "bool value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the boolean value of the flag and records how it was set."
        },
        {
          "name": "maybe_bool_variable",
          "parameters": [],
          "return_type": "std::optional<bool>",
          "logic": "Returns the current optional boolean value of the flag."
        },
        {
          "name": "set_maybe_bool_variable",
          "parameters": [
            "std::optional<bool> value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the optional boolean value of the flag and records how it was set."
        },
        {
          "name": "int_variable",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the current integer value of the flag."
        },
        {
          "name": "set_int_variable",
          "parameters": [
            "int value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the integer value of the flag and records how it was set."
        },
        {
          "name": "uint_variable",
          "parameters": [],
          "return_type": "unsigned int",
          "logic": "Returns the current unsigned integer value of the flag."
        },
        {
          "name": "set_uint_variable",
          "parameters": [
            "unsigned int value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the unsigned integer value of the flag and records how it was set."
        },
        {
          "name": "uint64_variable",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the current 64-bit unsigned integer value of the flag."
        },
        {
          "name": "set_uint64_variable",
          "parameters": [
            "uint64_t value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the 64-bit unsigned integer value of the flag and records how it was set."
        },
        {
          "name": "float_variable",
          "parameters": [],
          "return_type": "double",
          "logic": "Returns the current floating-point value of the flag."
        },
        {
          "name": "set_float_variable",
          "parameters": [
            "double value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the floating-point value of the flag and records how it was set."
        },
        {
          "name": "size_t_variable",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the current size_t value of the flag."
        },
        {
          "name": "set_size_t_variable",
          "parameters": [
            "size_t value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the size_t value of the flag and records how it was set."
        },
        {
          "name": "string_value",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the current string value of the flag."
        },
        {
          "name": "set_string_value",
          "parameters": [
            "const char* new_value",
            "bool owns_new_value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the string value of the flag and records whether the flag owns the memory for the string, and how it was set."
        },
        {
          "name": "GetDefaultValue",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the default value of the flag, casting from a void pointer."
        },
        {
          "name": "bool_default",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the default boolean value of the flag."
        },
        {
          "name": "int_default",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the default integer value of the flag."
        },
        {
          "name": "uint_default",
          "parameters": [],
          "return_type": "unsigned int",
          "logic": "Returns the default unsigned integer value of the flag."
        },
        {
          "name": "uint64_default",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the default 64-bit unsigned integer value of the flag."
        },
        {
          "name": "float_default",
          "parameters": [],
          "return_type": "double",
          "logic": "Returns the default floating-point value of the flag."
        },
        {
          "name": "size_t_default",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the default size_t value of the flag."
        },
        {
          "name": "string_default",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the default string value of the flag."
        },
        {
          "name": "ShouldCheckFlagContradictions",
          "parameters": [],
          "return_type": "static bool",
          "logic": "Determines if flag contradictions should be checked."
        },
        {
          "name": "CheckFlagChange",
          "parameters": [
            "SetBy new_set_by",
            "bool change_flag",
            "const char* implied_by"
          ],
          "return_type": "bool",
          "logic": "Checks if the change to a flag is allowed, taking into account implication levels and existing values. Returns an updated value for {change_flag}"
        },
        {
          "name": "IsReadOnly",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if the flag is read-only."
        },
        {
          "name": "GetValue",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the current value of the flag, casting from a void pointer."
        },
        {
          "name": "SetValue",
          "parameters": [
            "T new_value",
            "SetBy set_by"
          ],
          "return_type": "void",
          "logic": "Sets the value of the flag, casting from a void pointer."
        },
        {
          "name": "IsDefault",
          "parameters": [],
          "return_type": "bool",
          "logic": "Compares the flag's current value against the default value and returns whether they are equal."
        },
        {
          "name": "ReleaseDynamicAllocations",
          "parameters": [],
          "return_type": "void",
          "logic": "Releases any dynamically allocated memory associated with the flag, specifically for string values."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the flag to its default value."
        },
        {
          "name": "AllowOverwriting",
          "parameters": [],
          "return_type": "void",
          "logic": "Allows the flag to be overwritten by setting the `set_by_` field to `SetBy::kDefault`."
        }
      ]
    },
    {
      "name": "FlagName",
      "properties": [
        "const char* name",
        "bool negated"
      ],
      "methods": [
        {
          "name": "FlagName",
          "parameters": [
            "const char* name",
            "bool negated"
          ],
          "return_type": "constexpr",
          "logic": "Constructor for FlagName struct. Assigns name and negated parameters."
        },
        {
          "name": "FlagName",
          "parameters": [
            "const char* name"
          ],
          "return_type": "constexpr explicit",
          "logic": "Constructor for FlagName struct. Parses the name to determine if the flag is negated (starts with '!')."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FindFlagByPointer",
      "parameters": [
        "const void* ptr"
      ],
      "return_type": "Flag*",
      "logic": "Finds a flag by its pointer."
    },
    {
      "name": "FindFlagByName",
      "parameters": [
        "const char* name"
      ],
      "return_type": "Flag*",
      "logic": "Finds a flag by its name."
    },
    {
      "name": "FindImplicationFlagByName",
      "parameters": [
        "const char* name"
      ],
      "return_type": "Flag*",
      "logic": "Finds a flag by its implication name."
    },
    {
      "name": "Flags",
      "parameters": [],
      "return_type": "base::Vector<Flag>",
      "logic": "Returns a vector of all flags."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "FlagName flag_name"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a FlagName to an output stream. Likely prints the name and negation status."
    }
  ]
}