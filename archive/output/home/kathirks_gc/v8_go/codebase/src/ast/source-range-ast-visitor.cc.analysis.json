{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/source-range-ast-visitor.cc",
  "imports": [
    "src/ast/source-range-ast-visitor.h",
    "src/ast/ast-source-ranges.h"
  ],
  "classes": [
    {
      "name": "SourceRangeAstVisitor",
      "properties": [
        "source_range_map_",
        "continuation_positions_"
      ],
      "methods": [
        {
          "name": "SourceRangeAstVisitor",
          "parameters": [
            "uintptr_t stack_limit",
            "Expression* root",
            "SourceRangeMap* source_range_map"
          ],
          "return_type": "void",
          "logic": "Constructor for the SourceRangeAstVisitor class. Initializes the AstTraversalVisitor base class and the source_range_map_ member."
        },
        {
          "name": "VisitBlock",
          "parameters": [
            "Block* stmt"
          ],
          "return_type": "void",
          "logic": "Visits a Block statement. Calls the base class's VisitBlock and then checks if the block has an enclosing source range. If so, it removes the last continuation range from the block's statements."
        },
        {
          "name": "VisitSwitchStatement",
          "parameters": [
            "SwitchStatement* stmt"
          ],
          "return_type": "void",
          "logic": "Visits a SwitchStatement. Calls the base class's VisitSwitchStatement and then iterates over the cases, removing the last continuation range from the statements of each case."
        },
        {
          "name": "VisitFunctionLiteral",
          "parameters": [
            "FunctionLiteral* expr"
          ],
          "return_type": "void",
          "logic": "Visits a FunctionLiteral. Calls the base class's VisitFunctionLiteral and then removes the last continuation range from the function's body."
        },
        {
          "name": "VisitTryCatchStatement",
          "parameters": [
            "TryCatchStatement* stmt"
          ],
          "return_type": "void",
          "logic": "Visits a TryCatchStatement. Calls the base class's VisitTryCatchStatement, then removes the continuation range from the try block, and potentially from the async return (if it is an async function)."
        },
        {
          "name": "VisitTryFinallyStatement",
          "parameters": [
            "TryFinallyStatement* stmt"
          ],
          "return_type": "void",
          "logic": "Visits a TryFinallyStatement. Calls the base class's VisitTryFinallyStatement and then removes the continuation range from the try block."
        },
        {
          "name": "VisitNode",
          "parameters": [
            "AstNode* node"
          ],
          "return_type": "bool",
          "logic": "Visits an AstNode. Checks if the node has a continuation range. If so, it removes the range if a continuation with the same start position already exists."
        },
        {
          "name": "MaybeRemoveContinuationRange",
          "parameters": [
            "Statement* last_statement"
          ],
          "return_type": "void",
          "logic": "Removes the continuation range from the provided statement if it exists. Handles the case where the statement is a ThrowStatement and its range is tied to the Throw expression."
        },
        {
          "name": "MaybeRemoveLastContinuationRange",
          "parameters": [
            "ZonePtrList<Statement>* statements"
          ],
          "return_type": "void",
          "logic": "Removes the continuation range from the last statement in the provided list of statements, if the list is not empty."
        },
        {
          "name": "MaybeRemoveContinuationRangeOfAsyncReturn",
          "parameters": [
            "TryCatchStatement* try_catch_stmt"
          ],
          "return_type": "void",
          "logic": "Detects try-catch inserted for async functions, and removes the continuation range of the last statement in the try block."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "FindLastNonSyntheticStatement",
      "parameters": [
        "ZonePtrList<Statement>* statements"
      ],
      "return_type": "Statement*",
      "logic": "Finds the last non-synthetic statement in a ZonePtrList<Statement>. Skips synthetic async return statements. Returns nullptr if no non-synthetic statement is found."
    }
  ]
}