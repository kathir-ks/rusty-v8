{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/ast/prettyprinter.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/ast/prettyprinter.h\",\n  \"imports\": [\n    \"src/ast/ast.h\",\n    \"src/base/compiler-specific.h\",\n    \"src/execution/isolate.h\",\n    \"src/objects/function-kind.h\",\n    \"src/strings/string-builder.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CallPrinter\",\n      \"properties\": [\n        \"isolate_\",\n        \"num_prints_\",\n        \"builder_\",\n        \"position_\",\n        \"found_\",\n        \"done_\",\n        \"is_user_js_\",\n        \"is_iterator_error_\",\n        \"is_async_iterator_error_\",\n        \"is_call_error_\",\n        \"error_in_spread_args_\",\n        \"destructuring_prop_\",\n        \"destructuring_assignment_\",\n        \"spread_arg_\",\n        \"function_kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CallPrinter\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"bool is_user_js\",\n            \"SpreadErrorInArgsHint error_in_spread_args\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for CallPrinter. Initializes the printer with the given isolate, user js flag, and spread error handling hint.\"\n        },\n        {\n          \"name\": \"~CallPrinter\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor for CallPrinter.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"FunctionLiteral* program\",\n            \"int position\"\n          ],\n          \"return_type\": \"DirectHandle<String>\",\n          \"logic\": \"Prints the AST node at the specified position within the given function literal into a string handle.\"\n        },\n        {\n          \"name\": \"GetErrorHint\",\n          \"parameters\": [],\n          \"return_type\": \"ErrorHint\",\n          \"logic\": \"Returns the error hint flag, indicating the type of error (if any) encountered during pretty printing related to iterators.\"\n        },\n        {\n          \"name\": \"spread_arg\",\n          \"parameters\": [],\n          \"return_type\": \"Expression*\",\n          \"logic\": \"Getter for the spread_arg_ member.\"\n        },\n        {\n          \"name\": \"destructuring_prop\",\n          \"parameters\": [],\n          \"return_type\": \"ObjectLiteralProperty*\",\n          \"logic\": \"Getter for the destructuring_prop_ member.\"\n        },\n        {\n          \"name\": \"destructuring_assignment\",\n          \"parameters\": [],\n          \"return_type\": \"Assignment*\",\n          \"logic\": \"Getter for the destructuring_assignment_ member.\"\n        },\n        {\n          \"name\": \"VisitExpressionStatement\",\n          \"parameters\": [\n            \"ExpressionStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ExpressionStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBlock\",\n          \"parameters\": [\n            \"Block* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Block nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitVariableDeclaration\",\n          \"parameters\": [\n            \"VariableDeclaration* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for VariableDeclaration nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitEmptyStatement\",\n          \"parameters\": [\n            \"EmptyStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for EmptyStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitIfStatement\",\n          \"parameters\": [\n            \"IfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for IfStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitContinueStatement\",\n          \"parameters\": [\n            \"ContinueStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ContinueStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBreakStatement\",\n          \"parameters\": [\n            \"BreakStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BreakStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitReturnStatement\",\n          \"parameters\": [\n            \"ReturnStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ReturnStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitWithStatement\",\n          \"parameters\": [\n            \"WithStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for WithStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitSwitchStatement\",\n          \"parameters\": [\n            \"SwitchStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for SwitchStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCaseClause\",\n          \"parameters\": [\n            \"CaseClause* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CaseClause nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitDoWhileStatement\",\n          \"parameters\": [\n            \"DoWhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for DoWhileStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitWhileStatement\",\n          \"parameters\": [\n            \"WhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for WhileStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitForStatement\",\n          \"parameters\": [\n            \"ForStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ForStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitForInStatement\",\n          \"parameters\": [\n            \"ForInStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ForInStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitForOfStatement\",\n          \"parameters\": [\n            \"ForOfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ForOfStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitTryStatement\",\n          \"parameters\": [\n            \"TryStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for TryStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitDebuggerStatement\",\n          \"parameters\": [\n            \"DebuggerStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for DebuggerStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitClassLiteral\",\n          \"parameters\": [\n            \"ClassLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ClassLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitNativeFunctionLiteral\",\n          \"parameters\": [\n            \"NativeFunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for NativeFunctionLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitFunctionLiteral\",\n          \"parameters\": [\n            \"FunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for FunctionLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitArrowFunctionLiteral\",\n          \"parameters\": [\n            \"ArrowFunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ArrowFunctionLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitConditionalExpression\",\n          \"parameters\": [\n            \"ConditionalExpression* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ConditionalExpression nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitYield\",\n          \"parameters\": [\n            \"Yield* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Yield nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitAwait\",\n          \"parameters\": [\n            \"Await* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Await nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitThrow\",\n          \"parameters\": [\n            \"Throw* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Throw nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitProperty\",\n          \"parameters\": [\n            \"Property* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Property nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCall\",\n          \"parameters\": [\n            \"Call* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Call nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCallNew\",\n          \"parameters\": [\n            \"CallNew* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CallNew nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCallRuntime\",\n          \"parameters\": [\n            \"CallRuntime* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CallRuntime nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitUnaryOperation\",\n          \"parameters\": [\n            \"UnaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for UnaryOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCountOperation\",\n          \"parameters\": [\n            \"CountOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CountOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBinaryOperation\",\n          \"parameters\": [\n            \"BinaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BinaryOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCompareOperation\",\n          \"parameters\": [\n            \"CompareOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CompareOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitAssignment\",\n          \"parameters\": [\n            \"Assignment* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Assignment nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitTheHoleLiteral\",\n          \"parameters\": [\n            \"TheHoleLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for TheHoleLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitUndefinedLiteral\",\n          \"parameters\": [\n            \"UndefinedLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for UndefinedLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitNullLiteral\",\n          \"parameters\": [\n            \"NullLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for NullLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBooleanLiteral\",\n          \"parameters\": [\n            \"BooleanLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BooleanLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitStringLiteral\",\n          \"parameters\": [\n            \"StringLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for StringLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitNumericLiteral\",\n          \"parameters\": [\n            \"NumericLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for NumericLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBigIntLiteral\",\n          \"parameters\": [\n            \"BigIntLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BigIntLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitRegExpLiteral\",\n          \"parameters\": [\n            \"RegExpLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for RegExpLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitObjectLiteral\",\n          \"parameters\": [\n            \"ObjectLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ObjectLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitArrayLiteral\",\n          \"parameters\": [\n            \"ArrayLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ArrayLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitVariableProxy\",\n          \"parameters\": [\n            \"VariableProxy* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for VariableProxy nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"char c\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a single character to the internal string builder.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"const char* str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a C-style string to the internal string builder.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"DirectHandle<String> str\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Appends a DirectHandle<String> to the internal string builder.\"\n        },\n        {\n          \"name\": \"Find\",\n          \"parameters\": [\n            \"AstNode* node\",\n            \"bool print\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Searches for the node at the specified position. If found and print is true, prints the node.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"DirectHandle<Object> value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a literal value to the internal buffer. Handles object literals.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"const AstRawString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a literal value to the internal buffer. Handles string literals.\"\n        },\n        {\n          \"name\": \"FindStatements\",\n          \"parameters\": [\n            \"const ZonePtrList<Statement>* statements\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through a list of statements, searching for the target node within each.\"\n        },\n        {\n          \"name\": \"FindArguments\",\n          \"parameters\": [\n            \"const ZonePtrList<Expression>* arguments\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Iterates through a list of arguments, searching for the target node within each.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AstPrinter\",\n      \"properties\": [\n        \"output_\",\n        \"size_\",\n        \"pos_\",\n        \"indent_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AstPrinter\",\n          \"parameters\": [\n            \"uintptr_t stack_limit\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for AstPrinter, initializes the output buffer.\"\n        },\n        {\n          \"name\": \"~AstPrinter\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor for AstPrinter, may release allocated resources (not shown in the header).\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Prints the given AST node to a string representation.\"\n        },\n        {\n          \"name\": \"PrintProgram\",\n          \"parameters\": [\n            \"FunctionLiteral* program\"\n          ],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Prints the entire program (FunctionLiteral) to a string representation.\"\n        },\n        {\n          \"name\": \"Print\",\n          \"parameters\": [\n            \"const char* format\",\n            \"...\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a formatted string to the output buffer.\"\n        },\n        {\n          \"name\": \"PrintOut\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a node to stdout (likely for debugging purposes).\"\n        },\n        {\n          \"name\": \"VisitExpressionStatement\",\n          \"parameters\": [\n            \"ExpressionStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ExpressionStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBlock\",\n          \"parameters\": [\n            \"Block* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Block nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitVariableDeclaration\",\n          \"parameters\": [\n            \"VariableDeclaration* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for VariableDeclaration nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitEmptyStatement\",\n          \"parameters\": [\n            \"EmptyStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for EmptyStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitIfStatement\",\n          \"parameters\": [\n            \"IfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for IfStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitContinueStatement\",\n          \"parameters\": [\n            \"ContinueStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ContinueStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBreakStatement\",\n          \"parameters\": [\n            \"BreakStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BreakStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitReturnStatement\",\n          \"parameters\": [\n            \"ReturnStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ReturnStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitWithStatement\",\n          \"parameters\": [\n            \"WithStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for WithStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitSwitchStatement\",\n          \"parameters\": [\n            \"SwitchStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for SwitchStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCaseClause\",\n          \"parameters\": [\n            \"CaseClause* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CaseClause nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitDoWhileStatement\",\n          \"parameters\": [\n            \"DoWhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for DoWhileStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitWhileStatement\",\n          \"parameters\": [\n            \"WhileStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for WhileStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitForStatement\",\n          \"parameters\": [\n            \"ForStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ForStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitForInStatement\",\n          \"parameters\": [\n            \"ForInStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ForInStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitForOfStatement\",\n          \"parameters\": [\n            \"ForOfStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ForOfStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitTryStatement\",\n          \"parameters\": [\n            \"TryStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for TryStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitDebuggerStatement\",\n          \"parameters\": [\n            \"DebuggerStatement* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for DebuggerStatement nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitClassLiteral\",\n          \"parameters\": [\n            \"ClassLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ClassLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitNativeFunctionLiteral\",\n          \"parameters\": [\n            \"NativeFunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for NativeFunctionLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitFunctionLiteral\",\n          \"parameters\": [\n            \"FunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for FunctionLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitArrowFunctionLiteral\",\n          \"parameters\": [\n            \"ArrowFunctionLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ArrowFunctionLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitConditionalExpression\",\n          \"parameters\": [\n            \"ConditionalExpression* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ConditionalExpression nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitYield\",\n          \"parameters\": [\n            \"Yield* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Yield nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitAwait\",\n          \"parameters\": [\n            \"Await* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Await nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitThrow\",\n          \"parameters\": [\n            \"Throw* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Throw nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitProperty\",\n          \"parameters\": [\n            \"Property* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Property nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCall\",\n          \"parameters\": [\n            \"Call* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Call nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCallNew\",\n          \"parameters\": [\n            \"CallNew* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CallNew nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCallRuntime\",\n          \"parameters\": [\n            \"CallRuntime* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CallRuntime nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitUnaryOperation\",\n          \"parameters\": [\n            \"UnaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for UnaryOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCountOperation\",\n          \"parameters\": [\n            \"CountOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CountOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBinaryOperation\",\n          \"parameters\": [\n            \"BinaryOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BinaryOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitCompareOperation\",\n          \"parameters\": [\n            \"CompareOperation* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for CompareOperation nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitAssignment\",\n          \"parameters\": [\n            \"Assignment* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for Assignment nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitTheHoleLiteral\",\n          \"parameters\": [\n            \"TheHoleLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for TheHoleLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitUndefinedLiteral\",\n          \"parameters\": [\n            \"UndefinedLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for UndefinedLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitNullLiteral\",\n          \"parameters\": [\n            \"NullLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for NullLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBooleanLiteral\",\n          \"parameters\": [\n            \"BooleanLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BooleanLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitStringLiteral\",\n          \"parameters\": [\n            \"StringLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for StringLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitNumericLiteral\",\n          \"parameters\": [\n            \"NumericLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for NumericLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitBigIntLiteral\",\n          \"parameters\": [\n            \"BigIntLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for BigIntLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitRegExpLiteral\",\n          \"parameters\": [\n            \"RegExpLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for RegExpLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitObjectLiteral\",\n          \"parameters\": [\n            \"ObjectLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ObjectLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitArrayLiteral\",\n          \"parameters\": [\n            \"ArrayLiteral* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for ArrayLiteral nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"VisitVariableProxy\",\n          \"parameters\": [\n            \"VariableProxy* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visit method for VariableProxy nodes. (Generated by AST_NODE_LIST)\"\n        },\n        {\n          \"name\": \"Init\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes internal state.\"\n        },\n        {\n          \"name\": \"PrintLabels\",\n          \"parameters\": [\n            \"ZonePtrList<const AstRawString>* labels\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a list of labels.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"const AstRawString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints an AstRawString literal to the output buffer.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"const AstConsString* value\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints an AstConsString literal to the output buffer.\"\n        },\n        {\n          \"name\": \"PrintLiteral\",\n          \"parameters\": [\n            \"Literal* literal\",\n            \"bool quote\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a generic literal to the output buffer.\"\n        },\n        {\n          \"name\": \"PrintIndented\",\n          \"parameters\": [\n            \"const char* txt\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a string to the output buffer with indentation.\"\n        },\n        {\n          \"name\": \"PrintIndentedVisit\",\n          \"parameters\": [\n            \"const char* s\",\n            \"AstNode* node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a string followed by the indented output of a node.\"\n        },\n        {\n          \"name\": \"PrintStatements\",\n          \"parameters\": [\n            \"const ZonePtrList<Statement>* statements\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a list of statements.\"\n        },\n        {\n          \"name\": \"PrintDeclarations\",\n          \"parameters\": [\n            \"Declaration::List* declarations\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints a list of declarations.\"\n        },\n        {\n          \"name\": \"PrintParameters\",\n          \"parameters\": [\n            \"DeclarationScope* scope\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \""
}