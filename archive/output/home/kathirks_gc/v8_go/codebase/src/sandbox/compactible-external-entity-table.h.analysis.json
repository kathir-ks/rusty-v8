{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/compactible-external-entity-table.h",
  "imports": [
    "include/v8config.h",
    "src/common/globals.h",
    "src/sandbox/external-entity-table.h"
  ],
  "classes": [
    {
      "name": "CompactibleExternalEntityTable",
      "properties": [
        "kSupportsCompaction",
        "start_of_evacuation_area_",
        "invalidated_fields_",
        "invalidated_fields_mutex_"
      ],
      "methods": [
        {
          "name": "CompactibleExternalEntityTable",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "CompactibleExternalEntityTable",
          "parameters": [
            "const CompactibleExternalEntityTable&"
          ],
          "return_type": "deleted",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const CompactibleExternalEntityTable&"
          ],
          "return_type": "deleted",
          "logic": "Deleted copy assignment operator."
        },
        {
          "name": "AllocateEntry",
          "parameters": [
            "Space* space"
          ],
          "return_type": "uint32_t",
          "logic": "Allocates an entry from the space's freelist or adds a new segment.  Aborts compaction if the new index is above the evacuation threshold."
        },
        {
          "name": "FinishCompaction",
          "parameters": [
            "Space* space",
            "Histogram* counter"
          ],
          "return_type": "CompactionResult",
          "logic": "Finishes the compaction process and returns the result. Records metrics to histogram."
        },
        {
          "name": "MaybeCreateEvacuationEntry",
          "parameters": [
            "Space* space",
            "uint32_t index",
            "Address handle_location"
          ],
          "return_type": "void",
          "logic": "Potentially creates a new evacuation entry during compaction if the specified index is within the evacuation area."
        }
      ]
    },
    {
      "name": "Space",
      "properties": [
        "start_of_evacuation_area_",
        "invalidated_fields_",
        "invalidated_fields_mutex_"
      ],
      "methods": [
        {
          "name": "Space",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the Space class. Initializes the start_of_evacuation_area_ to kNotCompactingMarker."
        },
        {
          "name": "StartCompactingIfNeeded",
          "parameters": [],
          "return_type": "void",
          "logic": "Determines if compaction is needed and starts the compaction process if necessary. Called at the beginning of the GC marking phase."
        },
        {
          "name": "IsCompacting",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the space is currently being compacted."
        },
        {
          "name": "StartCompacting",
          "parameters": [
            "uint32_t start_of_evacuation_area"
          ],
          "return_type": "void",
          "logic": "Starts compaction by setting the start of the evacuation area."
        },
        {
          "name": "StopCompacting",
          "parameters": [],
          "return_type": "void",
          "logic": "Stops the compaction process."
        },
        {
          "name": "AbortCompacting",
          "parameters": [
            "uint32_t start_of_evacuation_area"
          ],
          "return_type": "void",
          "logic": "Aborts the compaction process and marks the evacuation area as invalid."
        },
        {
          "name": "CompactingWasAborted",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if compaction was aborted."
        },
        {
          "name": "FieldWasInvalidated",
          "parameters": [
            "Address field_address"
          ],
          "return_type": "bool",
          "logic": "Checks if a specified memory location (field_address) is within the invalidated_fields_."
        },
        {
          "name": "ClearInvalidatedFields",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the list of invalidated fields."
        },
        {
          "name": "AddInvalidatedField",
          "parameters": [
            "Address field_address"
          ],
          "return_type": "void",
          "logic": "Adds an address to the list of invalidated memory locations.  This is typically used when pointer writes occur during compaction."
        }
      ]
    }
  ],
  "functions": []
}