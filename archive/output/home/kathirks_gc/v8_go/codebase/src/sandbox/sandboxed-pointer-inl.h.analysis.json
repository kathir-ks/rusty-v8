{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/sandboxed-pointer-inl.h",
  "imports": [
    "include/v8-internal.h",
    "src/common/ptr-compr-inl.h",
    "src/sandbox/sandbox.h",
    "src/sandbox/sandboxed-pointer.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "ReadSandboxedPointerField",
      "parameters": [
        "Address field_address",
        "PtrComprCageBase cage_base"
      ],
      "return_type": "Address",
      "logic": "Reads a sandboxed pointer from the given field address. If sandboxing is enabled, it reads a `SandboxedPointer_t` from the `field_address`, extracts the offset from it, adds the offset to the `cage_base.address()` to compute the actual address. If sandboxing is disabled, it reads an Address directly from the field_address."
    },
    {
      "name": "WriteSandboxedPointerField",
      "parameters": [
        "Address field_address",
        "PtrComprCageBase cage_base",
        "Address pointer"
      ],
      "return_type": "void",
      "logic": "Writes a sandboxed pointer to the given field address. If sandboxing is enabled, it calculates the offset of the pointer from the `cage_base.address()`, creates a `SandboxedPointer_t` from the offset, and writes the sandboxed pointer to the `field_address`. It also checks that the pointer lies within the current sandbox. If sandboxing is disabled, it writes the Address directly to the field_address."
    }
  ]
}