{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/code-pointer-inl.h",
  "imports": [
    "src/sandbox/code-pointer.h",
    "include/v8-internal.h",
    "src/base/atomic-utils.h",
    "src/execution/isolate.h",
    "src/sandbox/code-pointer-table-inl.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "ReadCodeEntrypointViaCodePointerField",
      "parameters": [
        "Address field_address",
        "CodeEntrypointTag tag"
      ],
      "return_type": "Address",
      "logic": "Reads a code entrypoint address from a code pointer field. This function is only enabled when V8_ENABLE_SANDBOX is defined. It atomically loads a `CodePointerHandle` from the given address and retrieves the corresponding entrypoint from the `code_pointer_table` using the provided `tag`. In non-sandbox builds, it's unreachable."
    },
    {
      "name": "WriteCodeEntrypointViaCodePointerField",
      "parameters": [
        "Address field_address",
        "Address value",
        "CodeEntrypointTag tag"
      ],
      "return_type": "void",
      "logic": "Writes a code entrypoint address to the code pointer table associated with a code pointer field. This function is only enabled when V8_ENABLE_SANDBOX is defined.  It atomically loads a `CodePointerHandle` from the given `field_address` and then sets the associated entry point in the code pointer table to `value`, using the `tag`. In non-sandbox builds, it's unreachable."
    }
  ]
}