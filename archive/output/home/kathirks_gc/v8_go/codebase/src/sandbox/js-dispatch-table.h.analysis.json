{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/js-dispatch-table.h",
  "imports": [
    "include/v8config.h",
    "src/base/atomicops.h",
    "src/base/memory.h",
    "src/common/globals.h",
    "src/runtime/runtime.h",
    "src/sandbox/external-entity-table.h"
  ],
  "classes": [
    {
      "name": "JSDispatchEntry",
      "properties": [
        "entrypoint_",
        "encoded_word_",
        "kEntrypointOffset",
        "kCodeObjectOffset",
        "kParameterCountSize",
        "kFreeEntryTag",
        "kBigEndianParamCountOffset",
        "kParameterCountOffset",
        "kObjectPointerShift",
        "kParameterCountMask",
        "kMarkingBit",
        "parameter_count_",
        "next_free_entry_"
      ],
      "methods": [
        {
          "name": "MakeJSDispatchEntry",
          "parameters": [
            "Address object",
            "Address entrypoint",
            "uint16_t parameter_count",
            "bool mark_as_alive"
          ],
          "return_type": "void",
          "logic": "Initializes the JSDispatchEntry with the given object, entrypoint, parameter count, and marking status."
        },
        {
          "name": "GetEntrypoint",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the entrypoint address."
        },
        {
          "name": "GetCodePointer",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the address of the Code object."
        },
        {
          "name": "GetCode",
          "parameters": [],
          "return_type": "Tagged<Code>",
          "logic": "Returns the Tagged<Code> object."
        },
        {
          "name": "GetParameterCount",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Returns the parameter count."
        },
        {
          "name": "SetCodeAndEntrypointPointer",
          "parameters": [
            "Address new_object",
            "Address new_entrypoint"
          ],
          "return_type": "void",
          "logic": "Sets both the Code object pointer and the entrypoint pointer."
        },
        {
          "name": "SetEntrypointPointer",
          "parameters": [
            "Address new_entrypoint"
          ],
          "return_type": "void",
          "logic": "Sets the entrypoint pointer."
        },
        {
          "name": "MakeFreelistEntry",
          "parameters": [
            "uint32_t next_entry_index"
          ],
          "return_type": "void",
          "logic": "Transforms the entry into a freelist entry by storing the index of the next free entry."
        },
        {
          "name": "IsFreelistEntry",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the entry is a freelist entry."
        },
        {
          "name": "GetNextFreelistEntryIndex",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the index of the next freelist entry."
        },
        {
          "name": "Mark",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the entry as alive during garbage collection."
        },
        {
          "name": "Unmark",
          "parameters": [],
          "return_type": "void",
          "logic": "Unmarks the entry during sweeping."
        },
        {
          "name": "IsMarked",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the entry is currently marked as alive."
        },
        {
          "name": "CheckFieldOffsets",
          "parameters": [],
          "return_type": "void",
          "logic": "Checks the correctness of field offsets using static assertions."
        }
      ]
    },
    {
      "name": "JSDispatchTable",
      "properties": [],
      "methods": [
        {
          "name": "GetEntrypoint",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "Address",
          "logic": "Retrieves the entrypoint of the entry referenced by the given handle."
        },
        {
          "name": "GetCode",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "Tagged<Code>",
          "logic": "Retrieves the Code stored in the entry referenced by the given handle."
        },
        {
          "name": "GetCodeAddress",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "Address",
          "logic": "Returns the address of the Code object stored in the specified entry."
        },
        {
          "name": "GetParameterCount",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "uint16_t",
          "logic": "Retrieves the parameter count of the entry referenced by the given handle."
        },
        {
          "name": "SetCodeNoWriteBarrier",
          "parameters": [
            "JSDispatchHandle handle",
            "Tagged<Code> new_code"
          ],
          "return_type": "void",
          "logic": "Updates the entry referenced by the given handle to the given Code without a write barrier."
        },
        {
          "name": "SetTieringRequest",
          "parameters": [
            "JSDispatchHandle handle",
            "TieringBuiltin builtin",
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Execute a tiering builtin instead of the actual code. Leaves the Code pointer untouched and changes only the entrypoint."
        },
        {
          "name": "SetCodeKeepTieringRequestNoWriteBarrier",
          "parameters": [
            "JSDispatchHandle handle",
            "Tagged<Code> new_code"
          ],
          "return_type": "void",
          "logic": "Set new code but keep the existing tiering request."
        },
        {
          "name": "ResetTieringRequest",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "void",
          "logic": "Resets the entrypoint to the code's entrypoint."
        },
        {
          "name": "IsTieringRequested",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "bool",
          "logic": "Check if and/or which tiering builtin is installed."
        },
        {
          "name": "IsTieringRequested",
          "parameters": [
            "JSDispatchHandle handle",
            "TieringBuiltin builtin",
            "Isolate* isolate"
          ],
          "return_type": "bool",
          "logic": "Check if a specific tiering builtin is installed."
        },
        {
          "name": "AllocateAndInitializeEntry",
          "parameters": [
            "Space* space",
            "uint16_t parameter_count",
            "Tagged<Code> code"
          ],
          "return_type": "JSDispatchHandle",
          "logic": "Allocates a new entry in the table and initialize it."
        },
        {
          "name": "TryAllocateAndInitializeEntry",
          "parameters": [
            "Space* space",
            "uint16_t parameter_count",
            "Tagged<Code> code"
          ],
          "return_type": "std::optional<JSDispatchHandle>",
          "logic": "Tries to allocate a new entry and initialize it, returns std::nullopt if it fails."
        },
        {
          "name": "PreAllocateEntries",
          "parameters": [
            "Space* space",
            "int num",
            "bool ensure_static_handles"
          ],
          "return_type": "JSDispatchHandle",
          "logic": "Pre-allocates a number of entries in the dispatch table."
        },
        {
          "name": "PreAllocatedEntryNeedsInitialization",
          "parameters": [
            "Space* space",
            "JSDispatchHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks if the pre-allocated entry needs initialization."
        },
        {
          "name": "InitializePreAllocatedEntry",
          "parameters": [
            "Space* space",
            "JSDispatchHandle handle",
            "Tagged<Code> code",
            "uint16_t parameter_count"
          ],
          "return_type": "void",
          "logic": "Initializes a pre-allocated entry in the dispatch table."
        },
        {
          "name": "Mark",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "void",
          "logic": "Marks the specified entry as alive."
        },
        {
          "name": "Sweep",
          "parameters": [
            "Space* space",
            "Counters* counters",
            "Callback callback"
          ],
          "return_type": "uint32_t",
          "logic": "Frees all unmarked entries in the given space."
        },
        {
          "name": "IterateActiveEntriesIn",
          "parameters": [
            "Space* space",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Iterates over all active entries in the given space."
        },
        {
          "name": "IterateMarkedEntriesIn",
          "parameters": [
            "Space* space",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Iterate over all marked entries in the given space."
        },
        {
          "name": "base_address",
          "parameters": [],
          "return_type": "Address",
          "logic": "Returns the base address of this table."
        },
        {
          "name": "IsMarked",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "bool",
          "logic": "Checks if the entry is marked (DEBUG only)."
        },
        {
          "name": "VerifyEntry",
          "parameters": [
            "JSDispatchHandle handle",
            "Space* space",
            "Space* ro_space"
          ],
          "return_type": "void",
          "logic": "Verifies the entry (DEBUG and VERIFY_HEAP only)."
        },
        {
          "name": "PrintEntry",
          "parameters": [
            "JSDispatchHandle handle"
          ],
          "return_type": "void",
          "logic": "Prints information about the dispatch entry."
        },
        {
          "name": "PrintCurrentTieringRequest",
          "parameters": [
            "JSDispatchHandle handle",
            "Isolate* isolate",
            "std::ostream& os"
          ],
          "return_type": "void",
          "logic": "Prints the current tiering request for the given handle."
        }
      ]
    }
  ],
  "functions": [],
  "constants": []
}