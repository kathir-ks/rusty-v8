{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/indirect-pointer.h",
  "imports": [
    "src/common/globals.h",
    "src/sandbox/indirect-pointer-tag.h",
    "src/sandbox/isolate.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "InitSelfIndirectPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForSandbox isolate",
        "Tagged<HeapObject> host",
        "IndirectPointerTag tag",
        "TrustedPointerPublishingScope* opt_publishing_scope"
      ],
      "return_type": "void",
      "logic": "Initializes the 'self' indirect pointer field, creating a reference back to the owning object via a pointer table entry.  For Code objects, it uses the code pointer table, and for other trusted objects, it uses the trusted pointer table. Only available when the sandbox is enabled."
    },
    {
      "name": "ReadIndirectPointerField",
      "parameters": [
        "Address field_address",
        "IsolateForSandbox isolate",
        "AcquireLoadTag"
      ],
      "return_type": "Tagged<Object>",
      "logic": "Reads the IndirectPointerHandle from the specified field address and loads the Object it references from the appropriate pointer table (code or trusted), based on the `tag` template parameter. The tag indicates the expected type and ensures correct table lookup. Only available when the sandbox is enabled."
    },
    {
      "name": "WriteIndirectPointerField",
      "parameters": [
        "Address field_address",
        "Tagged<ExposedTrustedObject> value",
        "ReleaseStoreTag"
      ],
      "return_type": "void",
      "logic": "Loads the 'self' IndirectPointerHandle from the provided `value` (an ExposedTrustedObject) and stores it into the specified field.  This effectively makes the field an indirect reference to the given object.  The table used is determined by the template parameter `tag`.  Only available when the sandbox is enabled."
    }
  ]
}