{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/external-entity-table-inl.h",
  "imports": [
    "src/base/atomicops.h",
    "src/base/emulated-virtual-address-subspace.h",
    "src/base/iterator.h",
    "src/common/assert-scope.h",
    "src/common/segmented-table-inl.h",
    "src/sandbox/external-entity-table.h",
    "src/utils/allocation.h"
  ],
  "classes": [
    {
      "name": "ExternalEntityTable<Entry, size>::Space",
      "properties": [],
      "methods": [
        {
          "name": "~Space",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the Space class. It asserts that all segments belonging to the space have been deallocated to prevent memory leaks."
        },
        {
          "name": "freelist_length",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the length of the freelist, which indicates the number of available entries in the space."
        },
        {
          "name": "num_segments",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the number of segments currently associated with the space. It asserts that the mutex is held."
        },
        {
          "name": "Contains",
          "parameters": [
            "uint32_t index"
          ],
          "return_type": "bool",
          "logic": "Checks if a given index is within the bounds of any of the segments associated with this space."
        }
      ]
    },
    {
      "name": "ExternalEntityTable<Entry, size>",
      "properties": [],
      "methods": [
        {
          "name": "Initialize",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the external entity table. If kUseContiguousMemory is enabled, it allocates the first (read-only) segment of the table at a fixed offset."
        },
        {
          "name": "TearDown",
          "parameters": [],
          "return_type": "void",
          "logic": "Tears down the external entity table. If kUseContiguousMemory is enabled, it deallocates the first (read-only) segment."
        },
        {
          "name": "InitializeSpace",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Initializes a Space object. It sets the owning_table_ pointer in debug mode."
        },
        {
          "name": "TearDownSpace",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Tears down a Space object. It frees all segments associated with the space."
        },
        {
          "name": "AttachSpaceToReadOnlySegment",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Attaches a space to the read-only segment. It's used when kUseContiguousMemory is enabled. It initializes the freelist of the space within the read-only segment."
        },
        {
          "name": "DetachSpaceFromReadOnlySegment",
          "parameters": [
            "Space* space"
          ],
          "return_type": "void",
          "logic": "Detaches a space from the read-only segment.  It removes the read-only segment from the space's segment list without actually freeing the segment."
        },
        {
          "name": "UnsealReadOnlySegment",
          "parameters": [],
          "return_type": "void",
          "logic": "Changes the memory protection of the read-only segment to read-write.  This allows modification of the segment temporarily."
        },
        {
          "name": "SealReadOnlySegment",
          "parameters": [],
          "return_type": "void",
          "logic": "Changes the memory protection of the read-only segment back to read-only."
        },
        {
          "name": "AllocateEntry",
          "parameters": [
            "Space* space"
          ],
          "return_type": "uint32_t",
          "logic": "Allocates a new entry from the specified space. If allocation fails, it calls FatalProcessOutOfMemory."
        },
        {
          "name": "TryAllocateEntry",
          "parameters": [
            "Space* space"
          ],
          "return_type": "std::optional<uint32_t>",
          "logic": "Tries to allocate a new entry from the specified space. Returns std::nullopt if allocation fails."
        },
        {
          "name": "AllocateEntryBelow",
          "parameters": [
            "Space* space",
            "uint32_t threshold_index"
          ],
          "return_type": "uint32_t",
          "logic": "Allocates an entry from the space, ensuring it's index is below the threshold. If no free entry below the threshold exists, returns 0."
        },
        {
          "name": "TryAllocateEntryFromFreelist",
          "parameters": [
            "Space* space",
            "FreelistHead freelist"
          ],
          "return_type": "bool",
          "logic": "Attempts to allocate an entry from the given freelist head in the given space. Uses compare_exchange_strong to atomically update the freelist head. Returns true on success, false on failure."
        },
        {
          "name": "TryExtend",
          "parameters": [
            "Space* space"
          ],
          "return_type": "std::optional<typename ExternalEntityTable<Entry, size>::FreelistHead>",
          "logic": "Tries to extend the given space with a new segment. Allocates a new segment and initializes it, returning a new freelist head if successful. Returns std::nullopt if memory allocation fails."
        },
        {
          "name": "Extend",
          "parameters": [
            "Space* space",
            "Segment segment",
            "FreelistHead freelist"
          ],
          "return_type": "void",
          "logic": "Extends the given space with a new segment and updates the freelist. Adds the segment to the space's segment set and updates the space's freelist head."
        },
        {
          "name": "GenericSweep",
          "parameters": [
            "Space* space"
          ],
          "return_type": "uint32_t",
          "logic": "Performs a sweep operation on the given space, reclaiming unused entries. Delegates to the other overload of GenericSweep with an empty callback."
        },
        {
          "name": "GenericSweep",
          "parameters": [
            "Space* space",
            "Callback callback"
          ],
          "return_type": "uint32_t",
          "logic": "Performs a generic sweep operation on the given space using the provided callback to process marked entries. Iterates in reverse over the segments, marking unused entries as free, and calls the provided callback on marked entries. Removes empty segments."
        },
        {
          "name": "IterateEntriesIn",
          "parameters": [
            "Space* space",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Iterates through all valid entries in the given space and executes the callback for each valid entry index."
        }
      ]
    }
  ],
  "functions": []
}