{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/sandbox/code-entrypoint-tag.h",
  "imports": [
    "src/common/globals.h"
  ],
  "classes": [],
  "functions": [],
  "enums": [
    {
      "name": "CodeEntrypointTag",
      "type": "uint64_t",
      "values": [
        {
          "name": "kDefaultCodeEntrypointTag",
          "value": "0",
          "description": "Default code entrypoint tag."
        },
        {
          "name": "kJSEntrypointTag",
          "value": "kDefaultCodeEntrypointTag",
          "description": "Code entrypoint tag for JavaScript functions."
        },
        {
          "name": "kWasmEntrypointTag",
          "value": "uint64_t{1} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for WebAssembly functions."
        },
        {
          "name": "kBytecodeHandlerEntrypointTag",
          "value": "uint64_t{2} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for bytecode handlers."
        },
        {
          "name": "kLoadWithVectorICHandlerEntrypointTag",
          "value": "uint64_t{3} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for LoadWithVectorIC handlers."
        },
        {
          "name": "kStoreWithVectorICHandlerEntrypointTag",
          "value": "uint64_t{4} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for StoreWithVectorIC handlers."
        },
        {
          "name": "kStoreTransitionICHandlerEntrypointTag",
          "value": "uint64_t{5} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for StoreTransitionIC handlers."
        },
        {
          "name": "kRegExpEntrypointTag",
          "value": "uint64_t{6} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for regular expression functions."
        },
        {
          "name": "kInvalidEntrypointTag",
          "value": "uint64_t{0xff} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag for code that will never be called indirectly via the CPT."
        },
        {
          "name": "kFreeCodePointerTableEntryTag",
          "value": "uint64_t{0xffff} << kCodeEntrypointTagShift",
          "description": "Code entrypoint tag used internally by the code pointer table to mark free entries."
        }
      ],
      "description": "An enum that defines tags to distinguish code pointers with different calling conventions. These tags are used to enforce fine-grained control-flow integrity (CFI) in the sandbox by ensuring that the callee and caller of indirect control-flow transfers are compatible. The tags are XORed into the top bits of the entrypoint pointer in the CPT and hardcoded at the callsite, where the pointer is untagged prior to invoking it."
    }
  ],
  "constants": [
    {
      "name": "kCodeEntrypointTagShift",
      "type": "int",
      "value": "48",
      "description": "The number of bits to shift the code entrypoint tag."
    }
  ]
}