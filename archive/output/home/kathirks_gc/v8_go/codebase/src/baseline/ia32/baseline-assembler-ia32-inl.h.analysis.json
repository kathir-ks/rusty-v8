{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/ia32/baseline-assembler-ia32-inl.h",
  "imports": [
    "src/baseline/baseline-assembler.h",
    "src/codegen/ia32/register-ia32.h",
    "src/codegen/interface-descriptors.h",
    "src/objects/feedback-vector.h",
    "src/objects/literal-objects-inl.h"
  ],
  "classes": [
    {
      "name": "BaselineAssembler::ScratchRegisterScope",
      "properties": [
        "assembler_",
        "prev_scope_",
        "registers_used_"
      ],
      "methods": [
        {
          "name": "ScratchRegisterScope",
          "parameters": [
            "BaselineAssembler* assembler"
          ],
          "return_type": "void",
          "logic": "Constructor for the scope. Initializes the assembler, previous scope, and number of registers used. Sets the assembler's scratch register scope to this instance."
        },
        {
          "name": "~ScratchRegisterScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the scope. Restores the assembler's scratch register scope to the previous scope."
        },
        {
          "name": "AcquireScratch",
          "parameters": [],
          "return_type": "Register",
          "logic": "Acquires a scratch register from the pool of available registers. Tracks the number of registers used and returns the next available register."
        }
      ]
    },
    {
      "name": "EnsureAccumulatorPreservedScope",
      "properties": [],
      "methods": [
        {
          "name": "AssertEqualToAccumulator",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Asserts that the given register is equal to the interpreter accumulator register."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Clobbers",
      "parameters": [
        "Register target",
        "MemOperand op"
      ],
      "return_type": "bool",
      "logic": "Checks if the target register is used within the MemOperand. Only enabled in debug mode."
    },
    {
      "name": "BaselineAssembler::RegisterFrameOperand",
      "parameters": [
        "interpreter::Register interpreter_register"
      ],
      "return_type": "MemOperand",
      "logic": "Calculates the memory operand for an interpreter register within the frame."
    },
    {
      "name": "BaselineAssembler::RegisterFrameAddress",
      "parameters": [
        "interpreter::Register interpreter_register",
        "Register rscratch"
      ],
      "return_type": "void",
      "logic": "Loads the address of an interpreter register in the frame into rscratch."
    },
    {
      "name": "BaselineAssembler::FeedbackVectorOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns the memory operand for the feedback vector in the frame."
    },
    {
      "name": "BaselineAssembler::FeedbackCellOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns the memory operand for the feedback cell in the frame."
    },
    {
      "name": "BaselineAssembler::Bind",
      "parameters": [
        "Label* label"
      ],
      "return_type": "void",
      "logic": "Binds the given label to the current code position."
    },
    {
      "name": "BaselineAssembler::JumpTarget",
      "parameters": [],
      "return_type": "void",
      "logic": "Inserts a NOP instruction on IA32, marking a potential jump target."
    },
    {
      "name": "BaselineAssembler::Jump",
      "parameters": [
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Performs an unconditional jump to the target label."
    },
    {
      "name": "BaselineAssembler::JumpIfRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the given register value is equal to the root at the specified index."
    },
    {
      "name": "BaselineAssembler::JumpIfNotRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the given register value is not equal to the root at the specified index."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the given register value is a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfImmediate",
      "parameters": [
        "Condition cc",
        "Register left",
        "int right",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares a register to an immediate value and jumps to the target based on the given condition."
    },
    {
      "name": "BaselineAssembler::JumpIfNotSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the given register value is not a Smi."
    },
    {
      "name": "BaselineAssembler::TestAndBranch",
      "parameters": [
        "Register value",
        "int mask",
        "Condition cc",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Performs a bitwise AND between the register and the mask, and jumps to the target label based on the condition."
    },
    {
      "name": "BaselineAssembler::JumpIf",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "const Operand& rhs",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares a register with an operand, and jumps to the target label based on the given condition."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectTypeFast",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if the object's type is of instance_type based on the cc condition. It allocates a scratch register internally."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectType",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Register map",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if the object's type is of instance_type based on the cc condition."
    },
    {
      "name": "BaselineAssembler::JumpIfInstanceType",
      "parameters": [
        "Condition cc",
        "Register map",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if the instance type of a map object is of instance_type based on the cc condition."
    },
    {
      "name": "BaselineAssembler::JumpIfPointer",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the value in register compared to the value at the memory operand satisfies the specified condition."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register value",
        "Tagged<Smi> smi",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares the register value to the smi value and jumps based on the condition."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares two registers (assumed to contain Smis) and jumps to target based on the condition cc."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares value in memory to the register and jumps based on cc."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "MemOperand operand",
        "Register value",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares value in memory to the register and jumps based on cc."
    },
    {
      "name": "BaselineAssembler::JumpIfByte",
      "parameters": [
        "Condition cc",
        "Register value",
        "int32_t byte",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Compares a byte in a register with an immediate value, and jumps to the target label based on the given condition."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "interpreter::Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from a source register to an interpreter register (memory location)."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Tagged<TaggedIndex> value"
      ],
      "return_type": "void",
      "logic": "Moves a Tagged<TaggedIndex> value into a register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "MemOperand output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from a source register to a memory operand."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "ExternalReference reference"
      ],
      "return_type": "void",
      "logic": "Moves an external reference into a register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Handle<HeapObject> value"
      ],
      "return_type": "void",
      "logic": "Moves a Handle to a HeapObject into a register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "int32_t value"
      ],
      "return_type": "void",
      "logic": "Moves an immediate value into a register."
    },
    {
      "name": "BaselineAssembler::MoveMaybeSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the contents of a register to another, not necessarily a Smi."
    },
    {
      "name": "BaselineAssembler::MoveSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the contents of a register, assumed to be a Smi, to another register."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "RootIndex source"
      ],
      "return_type": "void",
      "logic": "Pushes the root at specified index onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "Register reg"
      ],
      "return_type": "void",
      "logic": "Pushes the content of a register onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "Tagged<TaggedIndex> value"
      ],
      "return_type": "void",
      "logic": "Pushes a Tagged<TaggedIndex> immediate value onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "Tagged<Smi> value"
      ],
      "return_type": "void",
      "logic": "Pushes a Tagged<Smi> immediate value onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "Handle<HeapObject> object"
      ],
      "return_type": "void",
      "logic": "Pushes a Handle<HeapObject> onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "int32_t immediate"
      ],
      "return_type": "void",
      "logic": "Pushes an immediate integer value onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "MemOperand operand"
      ],
      "return_type": "void",
      "logic": "Pushes the contents of memory operand onto the stack."
    },
    {
      "name": "detail::PushSingle",
      "parameters": [
        "MacroAssembler* masm",
        "interpreter::Register source"
      ],
      "return_type": "void",
      "logic": "Pushes the value from an interpreter register (memory location) onto the stack."
    },
    {
      "name": "detail::PushHelper::Push",
      "parameters": [
        "BaselineAssembler* basm",
        "Arg arg"
      ],
      "return_type": "int",
      "logic": "Pushes a single argument onto the stack."
    },
    {
      "name": "detail::PushHelper::PushReverse",
      "parameters": [
        "BaselineAssembler* basm",
        "Arg arg"
      ],
      "return_type": "int",
      "logic": "Same as Push."
    },
    {
      "name": "detail::PushHelper<interpreter::RegisterList>::Push",
      "parameters": [
        "BaselineAssembler* basm",
        "interpreter::RegisterList list"
      ],
      "return_type": "int",
      "logic": "Pushes a list of interpreter registers onto the stack."
    },
    {
      "name": "detail::PushHelper<interpreter::RegisterList>::PushReverse",
      "parameters": [
        "BaselineAssembler* basm",
        "interpreter::RegisterList list"
      ],
      "return_type": "int",
      "logic": "Pushes a list of interpreter registers onto the stack in reverse order."
    },
    {
      "name": "detail::PushAllHelper::Push",
      "parameters": [
        "BaselineAssembler* masm",
        "Arg arg",
        "Args... args"
      ],
      "return_type": "int",
      "logic": "Recursively pushes all arguments onto the stack."
    },
    {
      "name": "detail::PushAllHelper::PushReverse",
      "parameters": [
        "BaselineAssembler* masm",
        "Arg arg",
        "Args... args"
      ],
      "return_type": "int",
      "logic": "Recursively pushes all arguments onto the stack in reverse order."
    },
    {
      "name": "BaselineAssembler::Push",
      "parameters": [
        "T... vals"
      ],
      "return_type": "int",
      "logic": "Pushes a variable number of arguments onto the stack."
    },
    {
      "name": "BaselineAssembler::PushReverse",
      "parameters": [
        "T... vals"
      ],
      "return_type": "void",
      "logic": "Pushes a variable number of arguments onto the stack in reverse order."
    },
    {
      "name": "BaselineAssembler::Pop",
      "parameters": [
        "T... registers"
      ],
      "return_type": "void",
      "logic": "Pops a variable number of registers from the stack."
    },
    {
      "name": "BaselineAssembler::LoadTaggedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from an object at a given offset into a register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from an object at a given offset into a register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedFieldAndUntag",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from an object at a given offset into a register and then untags it by removing the Smi tag."
    },
    {
      "name": "BaselineAssembler::LoadWord16FieldZeroExtend",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a 16-bit word from memory at a given offset and zero-extends it into the destination register."
    },
    {
      "name": "BaselineAssembler::LoadWord8Field",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads an 8-bit word (byte) from memory at a given offset into the destination register."
    },
    {
      "name": "BaselineAssembler::StoreTaggedSignedField",
      "parameters": [
        "Register target",
        "int offset",
        "Tagged<Smi> value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged smi value into a field of a tagged object."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldWithWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged value into a field of a tagged object, and then triggers a write barrier to handle GC implications."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldNoWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged value into a field of a tagged object, without a write barrier. Only use if you know GC is not affected."
    },
    {
      "name": "BaselineAssembler::TryLoadOptimizedOsrCode",
      "parameters": [
        "Register scratch_and_result",
        "Register feedback_vector",
        "FeedbackSlot slot",
        "Label* on_result",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Tries to load optimized OSR code from the feedback vector for a given slot, and jumps to on_result if it succeeds. Otherwise clears the slot and falls through."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "int32_t weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds the weight to the interrupt budget in the feedback cell, and jumps to the skip_interrupt_label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "Register weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds the weight to the interrupt budget in the feedback cell, and jumps to the skip_interrupt_label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::LdaContextSlot",
      "parameters": [
        "Register context",
        "uint32_t index",
        "uint32_t depth",
        "CompressionMode compression_mode"
      ],
      "return_type": "void",
      "logic": "Loads a context slot from the context chain into the interpreter accumulator register."
    },
    {
      "name": "BaselineAssembler::StaContextSlot",
      "parameters": [
        "Register context",
        "Register value",
        "uint32_t index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a context slot within the context chain."
    },
    {
      "name": "BaselineAssembler::LdaModuleVariable",
      "parameters": [
        "Register context",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Loads a module variable into the interpreter accumulator register."
    },
    {
      "name": "BaselineAssembler::StaModuleVariable",
      "parameters": [
        "Register context",
        "Register value",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a module variable."
    },
    {
      "name": "BaselineAssembler::IncrementSmi",
      "parameters": [
        "MemOperand lhs"
      ],
      "return_type": "void",
      "logic": "Increments the Smi value at the memory location by 1."
    },
    {
      "name": "BaselineAssembler::Word32And",
      "parameters": [
        "Register output",
        "Register lhs",
        "int rhs"
      ],
      "return_type": "void",
      "logic": "Performs a bitwise AND operation between a register and an immediate value, storing the result in another register."
    },
    {
      "name": "BaselineAssembler::Switch",
      "parameters": [
        "Register reg",
        "int case_value_base",
        "Label** labels",
        "int num_labels"
      ],
      "return_type": "void",
      "logic": "Implements a switch statement by jumping to one of several labels based on the value in a register."
    },
    {
      "name": "BaselineAssembler::EmitReturn",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Emits code for returning from a Baseline function, including updating the interrupt budget, leaving the frame, and dropping arguments."
    }
  ]
}