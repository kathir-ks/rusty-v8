{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/ppc/baseline-assembler-ppc-inl.h",
  "imports": [
    "src/baseline/baseline-assembler.h",
    "src/codegen/interface-descriptors.h",
    "src/codegen/ppc/assembler-ppc-inl.h",
    "src/codegen/ppc/register-ppc.h",
    "src/objects/literal-objects-inl.h"
  ],
  "classes": [
    {
      "name": "BaselineAssembler::ScratchRegisterScope",
      "properties": [
        "assembler_",
        "prev_scope_",
        "registers_used_"
      ],
      "methods": [
        {
          "name": "ScratchRegisterScope",
          "parameters": [
            "BaselineAssembler* assembler"
          ],
          "return_type": "explicit",
          "logic": "Constructor. Initializes the scratch register scope, linking it to the assembler and its previous scope. Sets the assembler's current scope to this."
        },
        {
          "name": "~ScratchRegisterScope",
          "parameters": [],
          "return_type": "none",
          "logic": "Destructor. Restores the assembler's scratch register scope to the previous one."
        },
        {
          "name": "AcquireScratch",
          "parameters": [],
          "return_type": "Register",
          "logic": "Acquires a scratch register from the pool of available scratch registers. It ensures that all scratch registers are not used."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Clobbers",
      "parameters": [
        "Register target",
        "MemOperand op"
      ],
      "return_type": "bool",
      "logic": "Checks if the target register is clobbered by the memory operand."
    },
    {
      "name": "JumpIfHelper",
      "parameters": [
        "MacroAssembler* assm",
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target"
      ],
      "return_type": "static void",
      "logic": "Helper function to generate conditional jump instructions based on comparison between two registers."
    },
    {
      "name": "BaselineAssembler::RegisterFrameOperand",
      "parameters": [
        "interpreter::Register interpreter_register"
      ],
      "return_type": "MemOperand",
      "logic": "Calculates the memory operand for an interpreter register within the register frame."
    },
    {
      "name": "BaselineAssembler::RegisterFrameAddress",
      "parameters": [
        "interpreter::Register interpreter_register",
        "Register rscratch"
      ],
      "return_type": "void",
      "logic": "Calculates the memory address for an interpreter register within the register frame and stores it in the scratch register."
    },
    {
      "name": "BaselineAssembler::FeedbackVectorOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns the memory operand for the feedback vector in the baseline frame."
    },
    {
      "name": "BaselineAssembler::FeedbackCellOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns the memory operand for the feedback cell in the baseline frame."
    },
    {
      "name": "BaselineAssembler::Bind",
      "parameters": [
        "Label* label"
      ],
      "return_type": "void",
      "logic": "Binds a label in the assembler."
    },
    {
      "name": "BaselineAssembler::JumpTarget",
      "parameters": [],
      "return_type": "void",
      "logic": "Placeholder for defining jump targets, does nothing on PPC."
    },
    {
      "name": "BaselineAssembler::Jump",
      "parameters": [
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Unconditional jump to the given label."
    },
    {
      "name": "BaselineAssembler::JumpIfRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is equal to the specified root value."
    },
    {
      "name": "BaselineAssembler::JumpIfNotRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is not equal to the specified root value."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfImmediate",
      "parameters": [
        "Condition cc",
        "Register left",
        "int right",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value compared to the immediate value satisfies the condition."
    },
    {
      "name": "BaselineAssembler::JumpIfNotSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the register value is not a Smi."
    },
    {
      "name": "BaselineAssembler::TestAndBranch",
      "parameters": [
        "Register value",
        "int mask",
        "Condition cc",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Performs a bitwise AND operation between the register value and the mask, and jumps to the target based on the specified condition."
    },
    {
      "name": "BaselineAssembler::JumpIf",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "const Operand& rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the comparison between the register value and the operand satisfies the condition."
    },
    {
      "name": "BaselineAssembler::JumpIfJSAnyIsPrimitive",
      "parameters": [
        "Register heap_object",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the given heap object is a primitive JS value."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectTypeFast",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the object's instance type satisfies the given condition. Fast path."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectType",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Register map",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the object's instance type satisfies the given condition."
    },
    {
      "name": "BaselineAssembler::JumpIfInstanceType",
      "parameters": [
        "Condition cc",
        "Register map",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the instance type of the map satisfies the given condition."
    },
    {
      "name": "BaselineAssembler::JumpIfPointer",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the comparison between the register and the memory operand satisfies the condition."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register value",
        "Tagged<Smi> smi",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the value equals to the given Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if the comparison between the two registers (both Smis) satisfies the condition."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from memory, compares it with a register, and jumps to the target based on the comparison result and condition."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "MemOperand operand",
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from memory, compares it with a register, and jumps to the target based on the comparison result and condition. Operands are swapped"
    },
    {
      "name": "BaselineAssembler::JumpIfByte",
      "parameters": [
        "Condition cc",
        "Register value",
        "int32_t byte",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps if the register's value compares with the provided byte value in accordance with the specified condition."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "interpreter::Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the specified interpreter register in the register frame."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Tagged<TaggedIndex> value"
      ],
      "return_type": "void",
      "logic": "Moves the address of a TaggedIndex to the specified register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "MemOperand output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the specified memory location."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "ExternalReference reference"
      ],
      "return_type": "void",
      "logic": "Moves the value of an external reference to the specified register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Handle<HeapObject> value"
      ],
      "return_type": "void",
      "logic": "Moves the value of a HeapObject handle to the specified register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "int32_t value"
      ],
      "return_type": "void",
      "logic": "Moves an immediate 32-bit value to the specified register."
    },
    {
      "name": "BaselineAssembler::MoveMaybeSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the output register, assuming it might be a Smi."
    },
    {
      "name": "BaselineAssembler::MoveSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the output register, assuming it is a Smi."
    },
    {
      "name": "BaselineAssembler::LoadTaggedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from a heap object at the specified offset into the output register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from a heap object at the specified offset into the output register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedFieldAndUntag",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from a heap object at the specified offset into the output register and untags it."
    },
    {
      "name": "BaselineAssembler::LoadWord16FieldZeroExtend",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a 16-bit word from a heap object at the specified offset, zero-extends it, and puts it into the output register."
    },
    {
      "name": "BaselineAssembler::LoadWord8Field",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads an 8-bit word from a heap object at the specified offset into the output register."
    },
    {
      "name": "BaselineAssembler::StoreTaggedSignedField",
      "parameters": [
        "Register target",
        "int offset",
        "Tagged<Smi> value"
      ],
      "return_type": "void",
      "logic": "Stores a signed tagged field in a heap object at the specified offset."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldWithWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field in a heap object at the specified offset, with a write barrier."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldNoWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field in a heap object at the specified offset, without a write barrier."
    },
    {
      "name": "BaselineAssembler::TryLoadOptimizedOsrCode",
      "parameters": [
        "Register scratch_and_result",
        "Register feedback_vector",
        "FeedbackSlot slot",
        "Label* on_result",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Tries to load optimized OSR (On-Stack Replacement) code from the feedback vector. If successful, jumps to on_result; otherwise, falls through and zeroes the scratch_and_result register."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "int32_t weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds the specified weight to the interrupt budget, and jumps to the specified label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "Register weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds the specified weight (from register) to the interrupt budget, and jumps to the specified label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::LdaContextSlot",
      "parameters": [
        "Register context",
        "uint32_t index",
        "uint32_t depth",
        "CompressionMode compression_mode"
      ],
      "return_type": "void",
      "logic": "Loads a context slot value into the InterpreterAccumulatorRegister."
    },
    {
      "name": "BaselineAssembler::StaContextSlot",
      "parameters": [
        "Register context",
        "Register value",
        "uint32_t index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a context slot with write barrier."
    },
    {
      "name": "BaselineAssembler::LdaModuleVariable",
      "parameters": [
        "Register context",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Loads a module variable into the InterpreterAccumulatorRegister."
    },
    {
      "name": "BaselineAssembler::StaModuleVariable",
      "parameters": [
        "Register context",
        "Register value",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a module variable with write barrier."
    },
    {
      "name": "BaselineAssembler::IncrementSmi",
      "parameters": [
        "MemOperand lhs"
      ],
      "return_type": "void",
      "logic": "Increments a Smi value stored in memory (lhs)."
    },
    {
      "name": "BaselineAssembler::Switch",
      "parameters": [
        "Register reg",
        "int case_value_base",
        "Label** labels",
        "int num_labels"
      ],
      "return_type": "void",
      "logic": "Implements a switch statement using a jump table."
    },
    {
      "name": "BaselineAssembler::Word32And",
      "parameters": [
        "Register output",
        "Register lhs",
        "int rhs"
      ],
      "return_type": "void",
      "logic": "Performs a 32-bit AND operation between the register value and the immediate value, stores results in register."
    },
    {
      "name": "BaselineAssembler::EmitReturn",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Emits code to return from the baseline code. Includes interrupt budget checks, frame teardown, and argument dropping."
    }
  ]
}