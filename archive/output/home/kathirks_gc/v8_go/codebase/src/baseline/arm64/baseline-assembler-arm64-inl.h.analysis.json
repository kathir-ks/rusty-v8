{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/baseline/arm64/baseline-assembler-arm64-inl.h",
  "imports": [
    "src/baseline/baseline-assembler.h",
    "src/codegen/arm64/macro-assembler-arm64-inl.h",
    "src/codegen/interface-descriptors.h",
    "src/objects/literal-objects-inl.h"
  ],
  "classes": [
    {
      "name": "BaselineAssembler::ScratchRegisterScope",
      "properties": [
        "assembler_",
        "prev_scope_",
        "wrapped_scope_"
      ],
      "methods": [
        {
          "name": "ScratchRegisterScope",
          "parameters": [
            "BaselineAssembler* assembler"
          ],
          "return_type": "void",
          "logic": "Constructor for the ScratchRegisterScope. It initializes the scope, sets the assembler, previous scope, and wraps a UseScratchRegisterScope. It also adds some extra registers for the first scope created."
        },
        {
          "name": "~ScratchRegisterScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the ScratchRegisterScope. It resets the assembler's scratch register scope to the previous scope."
        },
        {
          "name": "AcquireScratch",
          "parameters": [],
          "return_type": "Register",
          "logic": "Acquires a scratch register from the wrapped UseScratchRegisterScope."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Clobbers",
      "parameters": [
        "Register target",
        "MemOperand op"
      ],
      "return_type": "bool",
      "logic": "Debug function that checks if a MemOperand clobbers a given register."
    },
    {
      "name": "BaselineAssembler::RegisterFrameOperand",
      "parameters": [
        "interpreter::Register interpreter_register"
      ],
      "return_type": "MemOperand",
      "logic": "Calculates the memory operand for an interpreter register within the register frame."
    },
    {
      "name": "BaselineAssembler::RegisterFrameAddress",
      "parameters": [
        "interpreter::Register interpreter_register",
        "Register rscratch"
      ],
      "return_type": "void",
      "logic": "Calculates the address of an interpreter register within the register frame and stores it in a scratch register."
    },
    {
      "name": "BaselineAssembler::FeedbackVectorOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns the memory operand for the feedback vector."
    },
    {
      "name": "BaselineAssembler::FeedbackCellOperand",
      "parameters": [],
      "return_type": "MemOperand",
      "logic": "Returns the memory operand for the feedback cell."
    },
    {
      "name": "BaselineAssembler::Bind",
      "parameters": [
        "Label* label"
      ],
      "return_type": "void",
      "logic": "Binds a label to the current code position."
    },
    {
      "name": "BaselineAssembler::JumpTarget",
      "parameters": [],
      "return_type": "void",
      "logic": "Marks the current position as a jump target."
    },
    {
      "name": "BaselineAssembler::Jump",
      "parameters": [
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Unconditional jump to a target label."
    },
    {
      "name": "BaselineAssembler::JumpIfRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the register value is equal to the specified root."
    },
    {
      "name": "BaselineAssembler::JumpIfNotRoot",
      "parameters": [
        "Register value",
        "RootIndex index",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the register value is not equal to the specified root."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the register value is a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfNotSmi",
      "parameters": [
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the register value is not a Smi."
    },
    {
      "name": "BaselineAssembler::JumpIfImmediate",
      "parameters": [
        "Condition cc",
        "Register left",
        "int right",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the condition is met when comparing the register with the immediate value."
    },
    {
      "name": "BaselineAssembler::TestAndBranch",
      "parameters": [
        "Register value",
        "int mask",
        "Condition cc",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Tests the register value against a mask and jumps to the target label if the condition is met."
    },
    {
      "name": "BaselineAssembler::JumpIf",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "const Operand& rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the condition is met when comparing the register with the operand."
    },
    {
      "name": "BaselineAssembler::JumpIfJSAnyIsPrimitive",
      "parameters": [
        "Register heap_object",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps if the heap object is a primitive"
    },
    {
      "name": "BaselineAssembler::JumpIfObjectTypeFast",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the object type matches the specified instance type based on the provided condition."
    },
    {
      "name": "BaselineAssembler::JumpIfObjectType",
      "parameters": [
        "Condition cc",
        "Register object",
        "InstanceType instance_type",
        "Register map",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label based on a condition applied to the object type. It first loads the map of the object and then its instance type."
    },
    {
      "name": "BaselineAssembler::JumpIfInstanceType",
      "parameters": [
        "Condition cc",
        "Register map",
        "InstanceType instance_type",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the instance type of a map matches the given instance type."
    },
    {
      "name": "BaselineAssembler::JumpIfPointer",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a value from memory using a MemOperand and compares it with the register value. It jumps to target based on the condition."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register value",
        "Tagged<Smi> smi",
        "Label* target",
        "Label::Distance distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target label if the register `value` is equal to the `smi` immediate."
    },
    {
      "name": "BaselineAssembler::JumpIfSmi",
      "parameters": [
        "Condition cc",
        "Register lhs",
        "Register rhs",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to the target if two registers contain smis are equal"
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "Register value",
        "MemOperand operand",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a value from the given MemOperand and jumps to target label if the condition matches the comparison between `value` and the loaded value."
    },
    {
      "name": "BaselineAssembler::JumpIfTagged",
      "parameters": [
        "Condition cc",
        "MemOperand operand",
        "Register value",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Loads a value from the given MemOperand and jumps to target label if the condition matches the comparison between loaded value and `value` register."
    },
    {
      "name": "BaselineAssembler::JumpIfByte",
      "parameters": [
        "Condition cc",
        "Register value",
        "int32_t byte",
        "Label* target",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Jumps to target if the byte is equal to the given value."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "interpreter::Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the memory location corresponding to the output interpreter register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Tagged<TaggedIndex> value"
      ],
      "return_type": "void",
      "logic": "Moves the tagged index value to the output register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "MemOperand output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Stores the value from the source register into the specified memory location using a MemOperand."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "ExternalReference reference"
      ],
      "return_type": "void",
      "logic": "Moves the value of the ExternalReference to the output register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "Handle<HeapObject> value"
      ],
      "return_type": "void",
      "logic": "Moves the value of the Handle to the output register."
    },
    {
      "name": "BaselineAssembler::Move",
      "parameters": [
        "Register output",
        "int32_t value"
      ],
      "return_type": "void",
      "logic": "Moves the immediate value to the output register."
    },
    {
      "name": "BaselineAssembler::MoveMaybeSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the output register. The value can be smi."
    },
    {
      "name": "BaselineAssembler::MoveSmi",
      "parameters": [
        "Register output",
        "Register source"
      ],
      "return_type": "void",
      "logic": "Moves the value from the source register to the output register. The value is smi."
    },
    {
      "name": "ToRegister",
      "parameters": [
        "BaselineAssembler* basm",
        "BaselineAssembler::ScratchRegisterScope* scope",
        "Arg arg"
      ],
      "return_type": "Register",
      "logic": "Acquires a scratch register and moves the argument value into it."
    },
    {
      "name": "ToRegister",
      "parameters": [
        "BaselineAssembler* basm",
        "BaselineAssembler::ScratchRegisterScope* scope",
        "Register reg"
      ],
      "return_type": "Register",
      "logic": "Returns the provided register (identity function for Register)."
    },
    {
      "name": "BaselineAssembler::Push",
      "parameters": [
        "T... vals"
      ],
      "return_type": "int",
      "logic": "Pushes a series of values onto the stack. It accounts for alignment by potentially adding padding. It returns the number of values pushed"
    },
    {
      "name": "BaselineAssembler::PushReverse",
      "parameters": [
        "T... vals"
      ],
      "return_type": "void",
      "logic": "Pushes a series of values onto the stack in reverse order, used for ABI compliance."
    },
    {
      "name": "BaselineAssembler::Pop",
      "parameters": [
        "T... registers"
      ],
      "return_type": "void",
      "logic": "Pops a series of registers from the stack."
    },
    {
      "name": "BaselineAssembler::LoadTaggedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged field from a given source register and offset into the output register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedField",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from a given source register and offset into the output register."
    },
    {
      "name": "BaselineAssembler::LoadTaggedSignedFieldAndUntag",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a tagged signed field from a given source register and offset into the output register, and then untags the value."
    },
    {
      "name": "BaselineAssembler::LoadWord16FieldZeroExtend",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads a 16-bit word from the specified memory location, zero-extends it, and stores it in the destination register."
    },
    {
      "name": "BaselineAssembler::LoadWord8Field",
      "parameters": [
        "Register output",
        "Register source",
        "int offset"
      ],
      "return_type": "void",
      "logic": "Loads an 8-bit word from the specified memory location, and stores it in the destination register."
    },
    {
      "name": "BaselineAssembler::StoreTaggedSignedField",
      "parameters": [
        "Register target",
        "int offset",
        "Tagged<Smi> value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged smi value into a field of a target object. Uses a scratch register."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldWithWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field of an object and records it for the write barrier, used to update the remembered set for GC."
    },
    {
      "name": "BaselineAssembler::StoreTaggedFieldNoWriteBarrier",
      "parameters": [
        "Register target",
        "int offset",
        "Register value"
      ],
      "return_type": "void",
      "logic": "Stores a tagged field without using a write barrier."
    },
    {
      "name": "BaselineAssembler::TryLoadOptimizedOsrCode",
      "parameters": [
        "Register scratch_and_result",
        "Register feedback_vector",
        "FeedbackSlot slot",
        "Label* on_result",
        "Label::Distance"
      ],
      "return_type": "void",
      "logic": "Attempts to load optimized OSR code based on the feedback vector and slot, jumping to the on_result label if successful."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "int32_t weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds a weight to the interrupt budget and jumps to skip_interrupt_label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded",
      "parameters": [
        "Register weight",
        "Label* skip_interrupt_label"
      ],
      "return_type": "void",
      "logic": "Adds a weight (from a register) to the interrupt budget and jumps to skip_interrupt_label if the budget is not exceeded."
    },
    {
      "name": "BaselineAssembler::LdaContextSlot",
      "parameters": [
        "Register context",
        "uint32_t index",
        "uint32_t depth",
        "CompressionMode compression_mode"
      ],
      "return_type": "void",
      "logic": "Loads a value from a context slot into the interpreter accumulator."
    },
    {
      "name": "BaselineAssembler::StaContextSlot",
      "parameters": [
        "Register context",
        "Register value",
        "uint32_t index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a context slot, using write barrier."
    },
    {
      "name": "BaselineAssembler::LdaModuleVariable",
      "parameters": [
        "Register context",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Loads module variables at different depths in the context chain."
    },
    {
      "name": "BaselineAssembler::StaModuleVariable",
      "parameters": [
        "Register context",
        "Register value",
        "int cell_index",
        "uint32_t depth"
      ],
      "return_type": "void",
      "logic": "Stores a value into a module variable, using write barrier."
    },
    {
      "name": "BaselineAssembler::IncrementSmi",
      "parameters": [
        "MemOperand lhs"
      ],
      "return_type": "void",
      "logic": "Atomically increments a Smi value in memory, using a memory operand. Requires a scratch register."
    },
    {
      "name": "BaselineAssembler::Word32And",
      "parameters": [
        "Register output",
        "Register lhs",
        "int rhs"
      ],
      "return_type": "void",
      "logic": "Performs a bitwise AND operation between the 32-bit value in the lhs register and the immediate rhs value, storing the result in the output register."
    },
    {
      "name": "BaselineAssembler::Switch",
      "parameters": [
        "Register reg",
        "int case_value_base",
        "Label** labels",
        "int num_labels"
      ],
      "return_type": "void",
      "logic": "Implements a switch statement using a jump table."
    },
    {
      "name": "BaselineAssembler::EmitReturn",
      "parameters": [
        "MacroAssembler* masm"
      ],
      "return_type": "void",
      "logic": "Emits the code to return from the baseline code, updating the interrupt budget and leaving the frame."
    },
    {
      "name": "EnsureAccumulatorPreservedScope::AssertEqualToAccumulator",
      "parameters": [
        "Register reg"
      ],
      "return_type": "void",
      "logic": "Asserts that the given register is equal to the accumulator register. It's used to make sure the accumulator is preserved as required."
    }
  ]
}