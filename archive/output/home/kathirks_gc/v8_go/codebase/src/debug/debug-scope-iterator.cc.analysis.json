{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug-scope-iterator.cc",
  "imports": [
    "src/debug/debug-scope-iterator.h",
    "src/api/api-inl.h",
    "src/execution/isolate.h",
    "src/objects/js-generator-inl.h"
  ],
  "classes": [
    {
      "name": "internal::DebugScopeIterator",
      "properties": [
        "iterator_"
      ],
      "methods": [
        {
          "name": "DebugScopeIterator",
          "parameters": [
            "Isolate* isolate",
            "FrameInspector* frame_inspector"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the internal ScopeIterator with a FrameInspector. Advances the iterator if it's not done and should be ignored."
        },
        {
          "name": "DebugScopeIterator",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<JSFunction> function"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the internal ScopeIterator with a JSFunction. Advances the iterator if it's not done and should be ignored."
        },
        {
          "name": "DebugScopeIterator",
          "parameters": [
            "Isolate* isolate",
            "Handle<JSGeneratorObject> generator"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the internal ScopeIterator with a JSGeneratorObject. Advances the iterator if it's not done and should be ignored."
        },
        {
          "name": "Done",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the internal ScopeIterator is done."
        },
        {
          "name": "Advance",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the internal ScopeIterator, skipping scopes that should be ignored."
        },
        {
          "name": "ShouldIgnore",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if the current scope should be ignored based on its type and whether it declares locals."
        },
        {
          "name": "GetType",
          "parameters": [],
          "return_type": "v8::debug::ScopeIterator::ScopeType",
          "logic": "Returns the type of the current scope."
        },
        {
          "name": "GetObject",
          "parameters": [],
          "return_type": "v8::Local<v8::Object>",
          "logic": "Returns the scope object for the current scope."
        },
        {
          "name": "GetScriptId",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the script ID for the current scope."
        },
        {
          "name": "GetFunctionDebugName",
          "parameters": [],
          "return_type": "v8::Local<v8::Value>",
          "logic": "Returns the debug name of the function associated with the current scope."
        },
        {
          "name": "HasLocationInfo",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current scope has location information."
        },
        {
          "name": "GetStartLocation",
          "parameters": [],
          "return_type": "debug::Location",
          "logic": "Returns the start location of the current scope in the source code."
        },
        {
          "name": "GetEndLocation",
          "parameters": [],
          "return_type": "debug::Location",
          "logic": "Returns the end location of the current scope in the source code."
        },
        {
          "name": "SetVariableValue",
          "parameters": [
            "v8::Local<v8::String> name",
            "v8::Local<v8::Value> value"
          ],
          "return_type": "bool",
          "logic": "Sets the value of a variable in the current scope."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "debug::ScopeIterator::CreateForFunction",
      "parameters": [
        "v8::Isolate* v8_isolate",
        "v8::Local<v8::Function> v8_func"
      ],
      "return_type": "std::unique_ptr<debug::ScopeIterator>",
      "logic": "Creates a ScopeIterator for a given JSFunction. Returns nullptr if the input is not a plain JSFunction."
    },
    {
      "name": "debug::ScopeIterator::CreateForGeneratorObject",
      "parameters": [
        "v8::Isolate* v8_isolate",
        "v8::Local<v8::Object> v8_generator"
      ],
      "return_type": "std::unique_ptr<debug::ScopeIterator>",
      "logic": "Creates a ScopeIterator for a given JSGeneratorObject."
    }
  ]
}