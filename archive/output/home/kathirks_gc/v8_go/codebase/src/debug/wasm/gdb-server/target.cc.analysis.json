{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/wasm/gdb-server/target.cc",
  "imports": [
    "src/debug/wasm/gdb-server/target.h",
    "<inttypes.h>",
    "src/base/platform/time.h",
    "src/debug/wasm/gdb-server/gdb-remote-util.h",
    "src/debug/wasm/gdb-server/gdb-server.h",
    "src/debug/wasm/gdb-server/packet.h",
    "src/debug/wasm/gdb-server/session.h",
    "src/debug/wasm/gdb-server/transport.h"
  ],
  "classes": [
    {
      "name": "Target",
      "properties": [
        "gdb_server_",
        "status_",
        "cur_signal_",
        "session_",
        "debugger_initial_suspension_",
        "semaphore_",
        "current_isolate_",
        "query_properties_",
        "mutex_",
        "call_frames_"
      ],
      "methods": [
        {
          "name": "Target",
          "parameters": [
            "GdbServer* gdb_server"
          ],
          "return_type": "void",
          "logic": "Constructor for the Target class. Initializes member variables, including the gdb server pointer, status, current signal, session, initial suspension flag, semaphore, and current isolate. Also calls InitQueryPropertyMap."
        },
        {
          "name": "InitQueryPropertyMap",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the query_properties_ map with GDB-remote protocol properties used to query target state, such as supported features, attached state, register info, process info, and current thread."
        },
        {
          "name": "Terminate",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the target's status to Terminated when the Isolate thread shuts down."
        },
        {
          "name": "OnProgramBreak",
          "parameters": [
            "Isolate* isolate",
            "const std::vector<wasm_addr_t>& call_frames"
          ],
          "return_type": "void",
          "logic": "Handles program break events by calling OnSuspended with a signal indicating a trace."
        },
        {
          "name": "OnException",
          "parameters": [
            "Isolate* isolate",
            "const std::vector<wasm_addr_t>& call_frames"
          ],
          "return_type": "void",
          "logic": "Handles exception events by calling OnSuspended with a signal indicating a segmentation fault."
        },
        {
          "name": "OnSuspended",
          "parameters": [
            "Isolate* isolate",
            "int signal",
            "const std::vector<wasm_addr_t>& call_frames"
          ],
          "return_type": "void",
          "logic": "Handles the suspension of the Wasm interpreter. Updates the target's status to Suspended, stores the signal and call frames, and signals the GdbServer thread if it's waiting for suspension, or signals the session directly otherwise."
        },
        {
          "name": "Run",
          "parameters": [
            "Session* session"
          ],
          "return_type": "void",
          "logic": "The main loop for the Target, executed in the GdbServer thread.  It waits for debug events, processes them, and processes commands until the target is terminated or the session is disconnected."
        },
        {
          "name": "WaitForDebugEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Waits for a debug event, which can be either a signal from the debug stub or an interrupt from LLDB, using `session_->WaitForDebugStubEvent()` if the target is running."
        },
        {
          "name": "ProcessDebugEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Handles debug events. If the target is running, it calls Suspend() to block and wait for the engine to suspend. It sends a stop reply packet, except for the initial suspension."
        },
        {
          "name": "Suspend",
          "parameters": [],
          "return_type": "void",
          "logic": "Suspends the Wasm interpreter using `gdb_server_->Suspend()` and waits for the interpreter to actually suspend using a semaphore."
        },
        {
          "name": "ProcessCommands",
          "parameters": [],
          "return_type": "void",
          "logic": "Processes commands received from the GDB-remote client.  It loops until a continue, detach, or kill command is received, or the session is disconnected. It calls ProcessPacket for each command, and then depending on the result, either sends a reply, continues execution, detaches, or kills the target."
        },
        {
          "name": "ProcessPacket",
          "parameters": [
            "Packet* pkt_in",
            "Packet* pkt_out"
          ],
          "return_type": "Target::ProcessPacketResult",
          "logic": "Processes a GDB-remote packet and constructs a reply. It handles commands like querying the reason for halting, resuming execution, detaching the debugger, reading and writing registers and memory, setting breakpoints, single stepping, killing the debuggee, and other miscellaneous queries.  The reply is returned in `pkt_out`, and the return value indicates whether the execution should continue, detach, or pause. Returns a ProcessPacketResult enum."
        },
        {
          "name": "ProcessQueryPacket",
          "parameters": [
            "const Packet* pkt_in",
            "Packet* pkt_out"
          ],
          "return_type": "Target::ErrorCode",
          "logic": "Processes 'q' (query) packets from GDB. Handles queries related to thread information, loaded libraries, call stack, Wasm global values, Wasm local values, Wasm stack values, and Wasm memory. It uses gdb_server_ to retrieve the required information. Also checks the query_properties_ map for predefined queries. Returns a Target::ErrorCode enum."
        },
        {
          "name": "SetStopReply",
          "parameters": [
            "Packet* pkt_out"
          ],
          "return_type": "void",
          "logic": "Sets the stop reply packet.  Includes the signal, the program counter, the thread ID, and an indication whether the loaded modules have changed."
        },
        {
          "name": "SetStatus",
          "parameters": [
            "Status status",
            "int8_t signal",
            "std::vector<wasm_addr_t> call_frames",
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Sets the status of the Target (Running, Suspended, Terminated).  Also sets the current signal, call frames, and isolate. Uses a mutex to protect access to these members."
        },
        {
          "name": "GetCallStack",
          "parameters": [],
          "return_type": "const std::vector<wasm_addr_t>",
          "logic": "Returns a copy of the call stack (vector of wasm addresses)."
        },
        {
          "name": "GetCurrentPc",
          "parameters": [],
          "return_type": "wasm_addr_t",
          "logic": "Returns the current program counter (PC) from the top of the call stack, or 0 if the call stack is empty."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "kThreadId",
      "parameters": [],
      "return_type": "const int",
      "logic": "Defines a constant for the thread ID, set to 1."
    },
    {
      "name": "kSigTrace",
      "parameters": [],
      "return_type": "const int",
      "logic": "Defines a constant for the signal indicating a trace (single-step), set to 5."
    },
    {
      "name": "kSigSegv",
      "parameters": [],
      "return_type": "const int",
      "logic": "Defines a constant for the signal indicating a segmentation fault, set to 11."
    }
  ]
}