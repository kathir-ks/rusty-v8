{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug-frames.h",
  "imports": [
    "<memory>",
    "src/deoptimizer/deoptimized-frame-info.h",
    "src/execution/isolate.h",
    "src/execution/v8threads.h",
    "src/objects/objects.h"
  ],
  "classes": [
    {
      "name": "FrameInspector",
      "properties": [
        "frame_",
        "inlined_frame_index_",
        "deoptimized_frame_",
        "isolate_",
        "script_",
        "receiver_",
        "function_",
        "source_position_",
        "is_optimized_",
        "is_constructor_"
      ],
      "methods": [
        {
          "name": "FrameInspector",
          "parameters": [
            "CommonFrame* frame",
            "int inlined_frame_index",
            "Isolate* isolate"
          ],
          "return_type": "FrameInspector",
          "logic": "Constructor for the FrameInspector class. Initializes the inspector with frame details, inlined frame index, and the isolate."
        },
        {
          "name": "~FrameInspector",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the FrameInspector class."
        },
        {
          "name": "GetFunction",
          "parameters": [],
          "return_type": "Handle<JSFunction>",
          "logic": "Returns the JSFunction associated with the frame."
        },
        {
          "name": "GetScript",
          "parameters": [],
          "return_type": "Handle<Script>",
          "logic": "Returns the Script associated with the frame."
        },
        {
          "name": "GetParameter",
          "parameters": [
            "int index"
          ],
          "return_type": "Handle<Object>",
          "logic": "Returns the parameter at the given index in the frame."
        },
        {
          "name": "GetExpression",
          "parameters": [
            "int index"
          ],
          "return_type": "Handle<Object>",
          "logic": "Returns the expression at the given index in the frame."
        },
        {
          "name": "GetSourcePosition",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the source position of the frame."
        },
        {
          "name": "IsConstructor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the frame represents a constructor call."
        },
        {
          "name": "GetContext",
          "parameters": [],
          "return_type": "Handle<Object>",
          "logic": "Returns the context associated with the frame."
        },
        {
          "name": "GetReceiver",
          "parameters": [],
          "return_type": "Handle<Object>",
          "logic": "Returns the receiver (this) of the function call."
        },
        {
          "name": "GetFunctionName",
          "parameters": [],
          "return_type": "DirectHandle<String>",
          "logic": "Returns the function name as a String."
        },
        {
          "name": "IsWasm",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the frame is a WebAssembly frame."
        },
        {
          "name": "IsWasmInterpreter",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the frame is from the WebAssembly interpreter."
        },
        {
          "name": "IsJavaScript",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the frame is a JavaScript frame."
        },
        {
          "name": "javascript_frame",
          "parameters": [],
          "return_type": "JavaScriptFrame*",
          "logic": "Returns the JavaScriptFrame pointer."
        },
        {
          "name": "inlined_frame_index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the index of the inlined frame."
        },
        {
          "name": "ParameterIsShadowedByContextLocal",
          "parameters": [
            "DirectHandle<ScopeInfo> info",
            "DirectHandle<String> parameter_name"
          ],
          "return_type": "bool",
          "logic": "Checks if a parameter name is shadowed by a context local variable."
        }
      ]
    },
    {
      "name": "RedirectActiveFunctions",
      "properties": [
        "shared_",
        "mode_"
      ],
      "methods": [
        {
          "name": "RedirectActiveFunctions",
          "parameters": [
            "Isolate* isolate",
            "Tagged<SharedFunctionInfo> shared",
            "Mode mode"
          ],
          "return_type": "RedirectActiveFunctions",
          "logic": "Constructor for the RedirectActiveFunctions class. Initializes the redirect with shared function info and redirect mode."
        },
        {
          "name": "VisitThread",
          "parameters": [
            "Isolate* isolate",
            "ThreadLocalTop* top"
          ],
          "return_type": "void",
          "logic": "Visits a thread and potentially redirects active functions based on the specified mode."
        }
      ]
    }
  ],
  "functions": []
}