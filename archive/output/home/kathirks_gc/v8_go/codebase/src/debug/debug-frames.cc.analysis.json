{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug-frames.cc",
  "imports": [
    "src/debug/debug-frames.h",
    "src/builtins/accessors.h",
    "src/deoptimizer/deoptimizer.h",
    "src/execution/frames-inl.h",
    "src/debug/debug-wasm-objects.h"
  ],
  "classes": [
    {
      "name": "FrameInspector",
      "properties": [
        "frame_",
        "inlined_frame_index_",
        "isolate_",
        "is_constructor_",
        "source_position_",
        "script_",
        "receiver_",
        "function_",
        "is_optimized_",
        "deoptimized_frame_"
      ],
      "methods": [
        {
          "name": "FrameInspector",
          "parameters": [
            "CommonFrame* frame",
            "int inlined_frame_index",
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Constructor for the FrameInspector class. Extracts information from the given frame to facilitate debugging. It populates several member variables including whether the frame represents a constructor call, its source position, script, receiver, function and if the frame is optimized, the corresponding deoptimized frame."
        },
        {
          "name": "~FrameInspector",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the FrameInspector class.  Defined out of line to ensure unique_ptr destructors are correctly instantiated even if the underlying types are not fully defined in the header file."
        },
        {
          "name": "javascript_frame",
          "parameters": [],
          "return_type": "JavaScriptFrame*",
          "logic": "Casts the internal frame_ pointer to a JavaScriptFrame*."
        },
        {
          "name": "GetParameter",
          "parameters": [
            "int index"
          ],
          "return_type": "Handle<Object>",
          "logic": "Retrieves a parameter from the frame at the given index.  If the frame is optimized, it retrieves the parameter from the deoptimized frame.  Otherwise, it fetches the parameter directly from the JavaScript frame."
        },
        {
          "name": "GetExpression",
          "parameters": [
            "int index"
          ],
          "return_type": "Handle<Object>",
          "logic": "Retrieves an expression from the frame at the given index.  If the frame is optimized, it retrieves the expression from the deoptimized frame.  Otherwise, it fetches the expression directly from the frame."
        },
        {
          "name": "GetContext",
          "parameters": [],
          "return_type": "Handle<Object>",
          "logic": "Retrieves the context associated with the frame. If the frame is optimized, it retrieves the context from the deoptimized frame; otherwise, it retrieves the context directly from the frame."
        },
        {
          "name": "GetFunctionName",
          "parameters": [],
          "return_type": "DirectHandle<String>",
          "logic": "Retrieves the debug name of the function associated with the frame. It handles different frame types: JavaScript, Wasm, and WasmInterpreter.  For Wasm, it retrieves the function name from the instance data. For JavaScript, it retrieves the name using JSFunction::GetDebugName."
        },
        {
          "name": "IsWasm",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the frame is a WebAssembly frame."
        },
        {
          "name": "IsWasmInterpreter",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the frame is a WebAssembly interpreter entry frame."
        },
        {
          "name": "IsJavaScript",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the frame is a JavaScript frame."
        },
        {
          "name": "ParameterIsShadowedByContextLocal",
          "parameters": [
            "DirectHandle<ScopeInfo> info",
            "DirectHandle<String> parameter_name"
          ],
          "return_type": "bool",
          "logic": "Determines if a parameter name is shadowed by a local variable in the context. It does this by checking for a context slot index associated with the parameter name."
        }
      ]
    },
    {
      "name": "RedirectActiveFunctions",
      "properties": [
        "shared_",
        "mode_"
      ],
      "methods": [
        {
          "name": "RedirectActiveFunctions",
          "parameters": [
            "Isolate* isolate",
            "Tagged<SharedFunctionInfo> shared",
            "Mode mode"
          ],
          "return_type": "void",
          "logic": "Constructor for the RedirectActiveFunctions class. Initializes the shared function info and the mode. Asserts that the shared function info has bytecode array and debug info if using debug bytecode."
        },
        {
          "name": "VisitThread",
          "parameters": [
            "Isolate* isolate",
            "ThreadLocalTop* top"
          ],
          "return_type": "void",
          "logic": "Visits all JavaScript stack frames in a thread and patches the bytecode array of any interpreted frame whose shared function info matches the one provided during construction. The bytecode array is replaced with either the debug bytecode array or the normal bytecode array depending on the selected mode."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [],
  "namespaces": [
    "v8",
    "v8::internal"
  ]
}