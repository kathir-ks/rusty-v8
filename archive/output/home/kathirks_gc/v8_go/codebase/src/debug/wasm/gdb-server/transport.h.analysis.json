{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/wasm/gdb-server/transport.h",
  "imports": [
    "<sstream>",
    "src/base/macros.h",
    "src/debug/wasm/gdb-server/gdb-remote-util.h",
    "<windows.h>",
    "<winsock2.h>",
    "<arpa/inet.h>",
    "<netdb.h>",
    "<netinet/tcp.h>",
    "<sys/select.h>",
    "<sys/socket.h>",
    "<unistd.h>"
  ],
  "classes": [
    {
      "name": "SocketBinding",
      "properties": [
        "socket_handle_"
      ],
      "methods": [
        {
          "name": "SocketBinding",
          "parameters": [
            "SocketHandle socket_handle"
          ],
          "return_type": "explicit SocketBinding",
          "logic": "Constructor that wraps an existing socket handle."
        },
        {
          "name": "Bind",
          "parameters": [
            "uint16_t tcp_port"
          ],
          "return_type": "static SocketBinding",
          "logic": "Binds to the specified TCP port."
        },
        {
          "name": "IsValid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the socket handle is valid."
        },
        {
          "name": "CreateTransport",
          "parameters": [],
          "return_type": "std::unique_ptr<SocketTransport>",
          "logic": "Creates a transport object from this socket binding."
        },
        {
          "name": "GetBoundPort",
          "parameters": [],
          "return_type": "uint16_t",
          "logic": "Gets the port the socket is bound to."
        }
      ]
    },
    {
      "name": "TransportBase",
      "properties": [],
      "methods": [
        {
          "name": "~TransportBase",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor."
        },
        {
          "name": "AcceptConnection",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Waits for an incoming connection on the bound port."
        },
        {
          "name": "Read",
          "parameters": [
            "char* dst",
            "int32_t len"
          ],
          "return_type": "virtual bool",
          "logic": "Reads {len} bytes from this transport."
        },
        {
          "name": "Write",
          "parameters": [
            "const char* src",
            "int32_t len"
          ],
          "return_type": "virtual bool",
          "logic": "Writes {len} bytes to this transport."
        },
        {
          "name": "IsDataAvailable",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Returns true if there is data to read."
        },
        {
          "name": "Disconnect",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Gracefully closes the connection to the debugger."
        },
        {
          "name": "Close",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Shuts down this transport, closing the connection and socket."
        },
        {
          "name": "WaitForDebugStubEvent",
          "parameters": [],
          "return_type": "virtual void",
          "logic": "Blocks waiting for network or thread events."
        },
        {
          "name": "SignalThreadEvent",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Signals that the execution stopped because of a trap/breakpoint."
        }
      ]
    },
    {
      "name": "Transport",
      "properties": [
        "buf_",
        "pos_",
        "size_",
        "handle_bind_",
        "handle_accept_"
      ],
      "methods": [
        {
          "name": "Transport",
          "parameters": [
            "SocketHandle s"
          ],
          "return_type": "explicit Transport",
          "logic": "Constructor."
        },
        {
          "name": "~Transport",
          "parameters": [],
          "return_type": "override",
          "logic": "Destructor."
        },
        {
          "name": "Read",
          "parameters": [
            "char* dst",
            "int32_t len"
          ],
          "return_type": "bool",
          "logic": "Reads data from the transport, implemented using a buffer."
        },
        {
          "name": "Write",
          "parameters": [
            "const char* src",
            "int32_t len"
          ],
          "return_type": "bool",
          "logic": "Writes data to the transport."
        },
        {
          "name": "IsDataAvailable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if data is available for reading."
        },
        {
          "name": "Disconnect",
          "parameters": [],
          "return_type": "void",
          "logic": "Disconnects the transport."
        },
        {
          "name": "Close",
          "parameters": [],
          "return_type": "void",
          "logic": "Closes the transport."
        },
        {
          "name": "CopyFromBuffer",
          "parameters": [
            "char** dst",
            "int32_t* len"
          ],
          "return_type": "void",
          "logic": "Copies buffered data to *dst up to len bytes and updates dst and len."
        },
        {
          "name": "ReadSomeData",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Reads available data from the socket. Return false on EOF or error. Pure virtual function."
        }
      ]
    },
    {
      "name": "SocketTransport",
      "properties": [
        "socket_event_",
        "faulted_thread_event_",
        "faulted_thread_fd_read_",
        "faulted_thread_fd_write_"
      ],
      "methods": [
        {
          "name": "SocketTransport",
          "parameters": [
            "SocketHandle s"
          ],
          "return_type": "explicit SocketTransport",
          "logic": "Constructor."
        },
        {
          "name": "~SocketTransport",
          "parameters": [],
          "return_type": "override",
          "logic": "Destructor."
        },
        {
          "name": "AcceptConnection",
          "parameters": [],
          "return_type": "bool",
          "logic": "Accepts an incoming connection."
        },
        {
          "name": "Disconnect",
          "parameters": [],
          "return_type": "void",
          "logic": "Disconnects the socket transport."
        },
        {
          "name": "WaitForDebugStubEvent",
          "parameters": [],
          "return_type": "void",
          "logic": "Waits for a debug stub event (platform specific)."
        },
        {
          "name": "SignalThreadEvent",
          "parameters": [],
          "return_type": "bool",
          "logic": "Signals a thread event."
        },
        {
          "name": "ReadSomeData",
          "parameters": [],
          "return_type": "bool",
          "logic": "Reads data from the socket. Platform specific implementation."
        }
      ]
    }
  ],
  "functions": []
}