{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/wasm/gdb-server/gdb-server.h",
  "imports": [
    "<map>",
    "<memory>",
    "src/debug/wasm/gdb-server/gdb-server-thread.h",
    "src/debug/wasm/gdb-server/wasm-module-debug.h"
  ],
  "classes": [
    {
      "name": "GdbServer",
      "properties": [
        "thread_",
        "task_runner_",
        "has_module_list_changed_",
        "breakpoints_",
        "scripts_",
        "isolate_delegates_"
      ],
      "methods": [
        {
          "name": "Create",
          "parameters": [],
          "return_type": "std::unique_ptr<GdbServer>",
          "logic": "Factory method to create a GdbServer instance and start the GDB-remote thread. Returns null on failure."
        },
        {
          "name": "~GdbServer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor to stop the GDB-remote thread and wait for it to complete."
        },
        {
          "name": "GetLoadedModules",
          "parameters": [
            "bool clear_module_list_changed_flag = false"
          ],
          "return_type": "std::vector<WasmModuleInfo>",
          "logic": "Queries the set of loaded Wasm modules, identified by unique module IDs and names. Optionally clears the module list changed flag."
        },
        {
          "name": "HasModuleListChanged",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the list of loaded modules has changed since the last call to GetLoadedModules."
        },
        {
          "name": "GetWasmGlobal",
          "parameters": [
            "uint32_t frame_index",
            "uint32_t index",
            "uint8_t* buffer",
            "uint32_t buffer_size",
            "uint32_t* size"
          ],
          "return_type": "bool",
          "logic": "Queries the value of the global at {index} in the Wasm module associated with {frame_index}."
        },
        {
          "name": "GetWasmLocal",
          "parameters": [
            "uint32_t frame_index",
            "uint32_t index",
            "uint8_t* buffer",
            "uint32_t buffer_size",
            "uint32_t* size"
          ],
          "return_type": "bool",
          "logic": "Queries the value of the local at {index} in the {frame_index}th stack frame."
        },
        {
          "name": "GetWasmStackValue",
          "parameters": [
            "uint32_t frame_index",
            "uint32_t index",
            "uint8_t* buffer",
            "uint32_t buffer_size",
            "uint32_t* size"
          ],
          "return_type": "bool",
          "logic": "Queries the value of the stack value at {index} in the {frame_index}th stack frame."
        },
        {
          "name": "GetWasmMemory",
          "parameters": [
            "uint32_t module_id",
            "uint32_t offset",
            "uint8_t* buffer",
            "uint32_t size"
          ],
          "return_type": "uint32_t",
          "logic": "Reads {size} bytes from the Memory instance associated with the Wasm module {module_id} at offset {offset}."
        },
        {
          "name": "GetWasmData",
          "parameters": [
            "uint32_t module_id",
            "uint32_t offset",
            "uint8_t* buffer",
            "uint32_t size"
          ],
          "return_type": "uint32_t",
          "logic": "Reads {size} bytes from the first Data segment in the Wasm module {module_id} at offset {offset}."
        },
        {
          "name": "GetWasmModuleBytes",
          "parameters": [
            "wasm_addr_t address",
            "uint8_t* buffer",
            "uint32_t size"
          ],
          "return_type": "uint32_t",
          "logic": "Reads {size} bytes from the code space of the Wasm module at {address}."
        },
        {
          "name": "AddBreakpoint",
          "parameters": [
            "uint32_t wasm_module_id",
            "uint32_t offset"
          ],
          "return_type": "bool",
          "logic": "Inserts a breakpoint at the offset {offset} of the Wasm module {wasm_module_id}."
        },
        {
          "name": "RemoveBreakpoint",
          "parameters": [
            "uint32_t wasm_module_id",
            "uint32_t offset"
          ],
          "return_type": "bool",
          "logic": "Removes a breakpoint at the offset {offset} of the Wasm module {wasm_module_id}."
        },
        {
          "name": "GetWasmCallStack",
          "parameters": [],
          "return_type": "std::vector<wasm_addr_t>",
          "logic": "Returns the current call stack as a vector of program counters."
        },
        {
          "name": "AddIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Adds an isolate to the set of isolates managed by this GdbServer."
        },
        {
          "name": "RemoveIsolate",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Removes an isolate from the set of isolates managed by this GdbServer."
        },
        {
          "name": "Suspend",
          "parameters": [],
          "return_type": "void",
          "logic": "Requests that the thread suspend execution at the next Wasm instruction."
        },
        {
          "name": "PrepareStep",
          "parameters": [],
          "return_type": "void",
          "logic": "Handle stepping in wasm functions via the wasm interpreter."
        },
        {
          "name": "QuitMessageLoopOnPause",
          "parameters": [],
          "return_type": "void",
          "logic": "Terminates the task runner leaving all pending tasks in the queue."
        },
        {
          "name": "RunSyncTask",
          "parameters": [
            "Callback&& callback"
          ],
          "return_type": "auto",
          "logic": "Posts a task to run a callback in the isolate thread."
        },
        {
          "name": "RunMessageLoopOnPause",
          "parameters": [],
          "return_type": "void",
          "logic": "When the target debuggee is suspended, blocks the main (isolate) thread and enters in a message loop to process tasks from the GDB-stub thread."
        }
      ],
      "inner_classes": [
        {
          "name": "DebugDelegate",
          "properties": [
            "isolate_",
            "id_",
            "gdb_server_"
          ],
          "methods": [
            {
              "name": "DebugDelegate",
              "parameters": [
                "Isolate* isolate",
                "GdbServer* gdb_server"
              ],
              "return_type": null,
              "logic": "Constructor for the DebugDelegate class."
            },
            {
              "name": "~DebugDelegate",
              "parameters": [],
              "return_type": null,
              "logic": "Destructor for the DebugDelegate class."
            },
            {
              "name": "ScriptCompiled",
              "parameters": [
                "Local<debug::Script> script",
                "bool is_live_edited",
                "bool has_compile_error"
              ],
              "return_type": "void",
              "logic": "Callback when a script is compiled. Adds the script to the GdbServer's script map."
            },
            {
              "name": "BreakProgramRequested",
              "parameters": [
                "Local<v8::Context> paused_context",
                "const std::vector<debug::BreakpointId>& inspector_break_points_hit",
                "v8::debug::BreakReasons break_reasons"
              ],
              "return_type": "void",
              "logic": "Callback when a breakpoint is hit. Enters the message loop."
            },
            {
              "name": "ExceptionThrown",
              "parameters": [
                "Local<v8::Context> paused_context",
                "Local<Value> exception",
                "Local<Value> promise",
                "bool is_uncaught",
                "debug::ExceptionType exception_type"
              ],
              "return_type": "void",
              "logic": "Callback when an exception is thrown. Enters the message loop."
            },
            {
              "name": "IsFunctionBlackboxed",
              "parameters": [
                "Local<debug::Script> script",
                "const debug::Location& start",
                "const debug::Location& end"
              ],
              "return_type": "bool",
              "logic": "Determines if a function is blackboxed."
            }
          ]
        }
      ]
    }
  ],
  "functions": []
}