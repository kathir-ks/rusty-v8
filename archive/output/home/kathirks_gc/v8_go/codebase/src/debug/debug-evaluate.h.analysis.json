{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/debug-evaluate.h",
  "imports": [
    "<vector>",
    "src/base/macros.h",
    "src/common/globals.h",
    "src/debug/debug-frames.h",
    "src/debug/debug-interface.h",
    "src/debug/debug-scopes.h",
    "src/execution/frames.h",
    "src/objects/objects.h",
    "src/objects/shared-function-info.h",
    "src/objects/string-set.h"
  ],
  "classes": [
    {
      "name": "DebugEvaluate",
      "properties": [],
      "methods": [
        {
          "name": "Global",
          "parameters": [
            "Isolate* isolate",
            "Handle<String> source",
            "debug::EvaluateGlobalMode mode",
            "REPLMode repl_mode = REPLMode::kNo"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Evaluates a JavaScript source string in the global context. Used for global evaluation during debugging, possibly in a REPL environment."
        },
        {
          "name": "Local",
          "parameters": [
            "Isolate* isolate",
            "StackFrameId frame_id",
            "int inlined_jsframe_index",
            "DirectHandle<String> source",
            "bool throw_on_side_effect"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Evaluates a JavaScript source string within the context of a specific stack frame.  Materializes stack variables and handles arguments objects. Used for evaluating expressions in the debugger within a specific stack frame."
        },
        {
          "name": "WithTopmostArguments",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<String> source"
          ],
          "return_type": "MaybeDirectHandle<Object>",
          "logic": "Evaluates a JavaScript source string in the native context, but with the materialized arguments object and receiver of the current call. Used for break-at-entry for builtins and API functions."
        },
        {
          "name": "FunctionGetSideEffectState",
          "parameters": [
            "Isolate* isolate",
            "DirectHandle<SharedFunctionInfo> info"
          ],
          "return_type": "DebugInfo::SideEffectState",
          "logic": "Determines the side effect state of a given SharedFunctionInfo.  Used to check for potential side effects during evaluation."
        },
        {
          "name": "ApplySideEffectChecks",
          "parameters": [
            "Handle<BytecodeArray> bytecode_array"
          ],
          "return_type": "void",
          "logic": "Applies side effect checks to a bytecode array."
        },
        {
          "name": "IsSideEffectFreeIntrinsic",
          "parameters": [
            "Runtime::FunctionId id"
          ],
          "return_type": "bool",
          "logic": "Checks if a given runtime function ID corresponds to a side-effect-free intrinsic function."
        },
        {
          "name": "VerifyTransitiveBuiltins",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Verifies the transitive builtins (DEBUG mode only)."
        }
      ]
    },
    {
      "name": "DebugEvaluate::ContextBuilder",
      "properties": [
        "evaluation_context_",
        "context_chain_",
        "isolate_",
        "frame_inspector_",
        "scope_iterator_"
      ],
      "methods": [
        {
          "name": "ContextBuilder",
          "parameters": [
            "Isolate* isolate",
            "JavaScriptFrame* frame",
            "int inlined_jsframe_index"
          ],
          "return_type": "void",
          "logic": "Constructor for the ContextBuilder class. Initializes the builder with the isolate, frame, and inlined frame index. Sets up the scope iterator."
        },
        {
          "name": "UpdateValues",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates the values in the materialized objects based on the current state of the stack frame."
        },
        {
          "name": "evaluation_context",
          "parameters": [],
          "return_type": "DirectHandle<Context>",
          "logic": "Returns the built evaluation context."
        },
        {
          "name": "outer_info",
          "parameters": [],
          "return_type": "DirectHandle<SharedFunctionInfo>",
          "logic": "Returns the SharedFunctionInfo of the outer function."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Evaluate",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<SharedFunctionInfo> outer_info",
        "DirectHandle<Context> context",
        "DirectHandle<Object> receiver",
        "DirectHandle<String> source",
        "bool throw_on_side_effect"
      ],
      "return_type": "MaybeDirectHandle<Object>",
      "logic": "Evaluates a JavaScript source string within a given context, receiver, and SharedFunctionInfo.  This is the core evaluation function, taking into account the context chain and side-effect restrictions."
    }
  ]
}