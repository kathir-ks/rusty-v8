{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/debug/wasm/gdb-server/packet.h",
  "imports": [
    "<string>",
    "src/base/macros.h"
  ],
  "classes": [
    {
      "name": "Packet",
      "properties": [
        "seq_",
        "data_",
        "read_index_"
      ],
      "methods": [
        {
          "name": "Packet",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for the Packet class.  Likely initializes internal state."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Empties the packet's data buffer and resets the read/write pointers to the beginning of the buffer."
        },
        {
          "name": "Rewind",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the read pointer to the beginning of the packet, allowing the packet data to be read again."
        },
        {
          "name": "EndOfPacket",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the read pointer has reached the end of the packet's data (write pointer), indicating all data has been read."
        },
        {
          "name": "AddRawChar",
          "parameters": [
            "char ch"
          ],
          "return_type": "void",
          "logic": "Appends a single raw 8-bit character to the end of the packet's data buffer."
        },
        {
          "name": "AddBlock",
          "parameters": [
            "const void* ptr",
            "uint32_t len"
          ],
          "return_type": "void",
          "logic": "Appends a block of data to the end of the packet's data buffer, encoding each byte as a hexadecimal pair (e.g., 0x41 becomes \"41\")."
        },
        {
          "name": "AddWord8",
          "parameters": [
            "uint8_t val"
          ],
          "return_type": "void",
          "logic": "Appends a byte (8-bit word) to the packet's data buffer, representing it as a 2-character hexadecimal string."
        },
        {
          "name": "AddNumberSep",
          "parameters": [
            "uint64_t val",
            "char sep"
          ],
          "return_type": "void",
          "logic": "Appends a number (up to 64 bits) to the packet's data buffer, formatted as a big-endian hexadecimal string with leading zeros removed, followed by a separator character."
        },
        {
          "name": "AddString",
          "parameters": [
            "const char* str"
          ],
          "return_type": "void",
          "logic": "Appends a raw string to the end of the packet's data buffer."
        },
        {
          "name": "AddHexString",
          "parameters": [
            "const char* str"
          ],
          "return_type": "void",
          "logic": "Appends a string to the end of the packet's data buffer, encoding each character as a hexadecimal pair."
        },
        {
          "name": "GetRawChar",
          "parameters": [
            "char* ch"
          ],
          "return_type": "bool",
          "logic": "Reads a single raw character from the packet's data buffer. Returns true if a character was successfully read, false otherwise."
        },
        {
          "name": "GetBlock",
          "parameters": [
            "void* ptr",
            "uint32_t len"
          ],
          "return_type": "bool",
          "logic": "Reads a block of data from the packet's data buffer, interpreting it as a sequence of hexadecimal pairs representing bytes. Returns true if the block was successfully read, false otherwise."
        },
        {
          "name": "GetWord8",
          "parameters": [
            "uint8_t* val"
          ],
          "return_type": "bool",
          "logic": "Reads a byte (8-bit word) from the packet's data buffer, interpreting it as a 2-character hexadecimal string. Returns true if the byte was successfully read, false otherwise."
        },
        {
          "name": "GetNumberSep",
          "parameters": [
            "uint64_t* val",
            "char* sep"
          ],
          "return_type": "bool",
          "logic": "Reads a number (formatted as a big-endian hexadecimal string) and a separator character from the packet's data buffer. Returns true if the number and separator were successfully read, false otherwise."
        },
        {
          "name": "GetString",
          "parameters": [
            "std::string* str"
          ],
          "return_type": "bool",
          "logic": "Reads a string from the packet's data buffer. Returns true if a string was successfully read, false otherwise."
        },
        {
          "name": "GetHexString",
          "parameters": [
            "std::string* str"
          ],
          "return_type": "bool",
          "logic": "Reads a string encoded as hexadecimal from the packet's data buffer. Returns true if successful, false otherwise."
        },
        {
          "name": "GetPayload",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns a pointer to the beginning of the packet's payload data."
        },
        {
          "name": "GetPayloadSize",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the packet's payload data in bytes."
        },
        {
          "name": "GetSequence",
          "parameters": [
            "int32_t* seq"
          ],
          "return_type": "bool",
          "logic": "Retrieves the sequence number from the packet. Returns true if a sequence number is set, false otherwise."
        },
        {
          "name": "ParseSequence",
          "parameters": [],
          "return_type": "void",
          "logic": "Parses the sequence number within the package data and advances the read pointer past the parsed sequence number."
        },
        {
          "name": "SetSequence",
          "parameters": [
            "int32_t seq"
          ],
          "return_type": "void",
          "logic": "Sets the sequence number for the packet."
        },
        {
          "name": "SetError",
          "parameters": [
            "ErrDef"
          ],
          "return_type": "void",
          "logic": "Sets an error state for the packet."
        },
        {
          "name": "GetPacketData",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Constructs and returns the full GDB-remote packet string, including the '$', payload, '#', and checksum."
        }
      ]
    }
  ],
  "functions": []
}