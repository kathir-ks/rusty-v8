{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turbofan-types.cc",
  "imports": [
    "src/compiler/turbofan-types.h",
    "iomanip",
    "src/compiler/js-heap-broker.h",
    "src/numbers/conversions-inl.h",
    "src/objects/elements-kind.h",
    "src/objects/instance-type.h",
    "src/objects/turbofan-types.h",
    "src/utils/ostreams.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "RangeType::Limits",
      "properties": [
        "min",
        "max"
      ],
      "methods": [
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the range is empty (min > max)."
        },
        {
          "name": "Intersect",
          "parameters": [
            "Limits lhs",
            "Limits rhs"
          ],
          "return_type": "Limits",
          "logic": "Calculates the intersection of two range limits."
        },
        {
          "name": "Union",
          "parameters": [
            "Limits lhs",
            "Limits rhs"
          ],
          "return_type": "Limits",
          "logic": "Calculates the union of two range limits."
        }
      ]
    },
    {
      "name": "HeapConstantType",
      "properties": [
        "bitset_",
        "heap_ref_"
      ],
      "methods": [
        {
          "name": "HeapConstantType",
          "parameters": [
            "BitsetType::bitset bitset",
            "HeapObjectRef heap_ref"
          ],
          "return_type": "constructor",
          "logic": "Constructor for the HeapConstantType class."
        },
        {
          "name": "Value",
          "parameters": [],
          "return_type": "Handle<HeapObject>",
          "logic": "Returns the HeapObject handle stored in the HeapConstantType."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Type::Overlap",
      "parameters": [
        "const RangeType* lhs",
        "const RangeType* rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if two RangeTypes overlap."
    },
    {
      "name": "Type::Contains",
      "parameters": [
        "const RangeType* lhs",
        "const RangeType* rhs"
      ],
      "return_type": "bool",
      "logic": "Checks if the first RangeType contains the second RangeType."
    },
    {
      "name": "Type::Min",
      "parameters": [],
      "return_type": "double",
      "logic": "Computes the minimum value of the type based on its kind (Bitset, Union, Range, OtherNumberConstant)."
    },
    {
      "name": "Type::Max",
      "parameters": [],
      "return_type": "double",
      "logic": "Computes the maximum value of the type based on its kind (Bitset, Union, Range, OtherNumberConstant)."
    },
    {
      "name": "Type::BitsetGlb",
      "parameters": [],
      "return_type": "Type::bitset",
      "logic": "Calculates the greatest lower bound bitset for the type."
    },
    {
      "name": "Type::BitsetLub",
      "parameters": [],
      "return_type": "Type::bitset",
      "logic": "Calculates the least upper bound bitset for the type."
    },
    {
      "name": "BitsetType::Lub",
      "parameters": [
        "MapRefLike map",
        "JSHeapBroker* broker"
      ],
      "return_type": "Type::bitset",
      "logic": "Calculates the least upper bound bitset for a given map."
    },
    {
      "name": "BitsetType::Lub",
      "parameters": [
        "double value"
      ],
      "return_type": "Type::bitset",
      "logic": "Calculates the least upper bound bitset for a double value."
    },
    {
      "name": "BitsetType::Boundaries",
      "parameters": [],
      "return_type": "const BitsetType::Boundary*",
      "logic": "Returns a pointer to the boundaries array."
    },
    {
      "name": "BitsetType::BoundariesSize",
      "parameters": [],
      "return_type": "size_t",
      "logic": "Returns the size of the boundaries array."
    },
    {
      "name": "BitsetType::ExpandInternals",
      "parameters": [
        "Type::bitset bits"
      ],
      "return_type": "Type::bitset",
      "logic": "Expands internal bitsets to external bitsets."
    },
    {
      "name": "BitsetType::Lub",
      "parameters": [
        "double min",
        "double max"
      ],
      "return_type": "Type::bitset",
      "logic": "Calculates the least upper bound bitset for a given range."
    },
    {
      "name": "BitsetType::NumberBits",
      "parameters": [
        "bitset bits"
      ],
      "return_type": "Type::bitset",
      "logic": "Extracts the number bits from a bitset."
    },
    {
      "name": "BitsetType::Glb",
      "parameters": [
        "double min",
        "double max"
      ],
      "return_type": "Type::bitset",
      "logic": "Calculates the greatest lower bound bitset for a given range."
    },
    {
      "name": "BitsetType::Min",
      "parameters": [
        "bitset bits"
      ],
      "return_type": "double",
      "logic": "Calculates the minimum value for a given bitset."
    },
    {
      "name": "BitsetType::Max",
      "parameters": [
        "bitset bits"
      ],
      "return_type": "double",
      "logic": "Calculates the maximum value for a given bitset."
    },
    {
      "name": "OtherNumberConstantType::IsOtherNumberConstant",
      "parameters": [
        "double value"
      ],
      "return_type": "bool",
      "logic": "Checks if a double value is an OtherNumberConstant (not an integer, NaN, or -0)."
    },
    {
      "name": "Type::SimplyEquals",
      "parameters": [
        "Type that"
      ],
      "return_type": "bool",
      "logic": "Checks if two types are simply equal (same HeapConstant or same OtherNumberConstant)."
    },
    {
      "name": "Type::SlowIs",
      "parameters": [
        "Type that"
      ],
      "return_type": "bool",
      "logic": "Checks if the current type is a subtype of the given type. Handles bitsets, unions, ranges, and WASM types."
    },
    {
      "name": "Type::Maybe",
      "parameters": [
        "Type that"
      ],
      "return_type": "bool",
      "logic": "Checks if the current type overlaps with the given type. Handles bitsets, unions, ranges."
    },
    {
      "name": "Type::GetRange",
      "parameters": [],
      "return_type": "Type",
      "logic": "Returns the range in [this], or [nullptr]."
    },
    {
      "name": "UnionType::Wellformed",
      "parameters": [],
      "return_type": "bool",
      "logic": "Checks if the UnionType is well-formed according to the specified invariants."
    },
    {
      "name": "Type::Intersect",
      "parameters": [
        "Type type1",
        "Type type2",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Calculates the intersection of two types."
    },
    {
      "name": "Type::UpdateRange",
      "parameters": [
        "Type range",
        "UnionType* result",
        "int size",
        "Zone* zone"
      ],
      "return_type": "int",
      "logic": "Adds range to union, and removes any subsumed components."
    },
    {
      "name": "Type::ToLimits",
      "parameters": [
        "bitset bits",
        "Zone* zone"
      ],
      "return_type": "RangeType::Limits",
      "logic": "Converts a bitset of numbers into a RangeType::Limits."
    },
    {
      "name": "Type::IntersectRangeAndBitset",
      "parameters": [
        "Type range",
        "Type bitset",
        "Zone* zone"
      ],
      "return_type": "RangeType::Limits",
      "logic": "Calculates the intersection of a RangeType and a Bitset."
    },
    {
      "name": "Type::IntersectAux",
      "parameters": [
        "Type lhs",
        "Type rhs",
        "UnionType* result",
        "int size",
        "RangeType::Limits* lims",
        "Zone* zone"
      ],
      "return_type": "int",
      "logic": "Helper function for calculating the intersection of two types."
    },
    {
      "name": "Type::NormalizeRangeAndBitset",
      "parameters": [
        "Type range",
        "bitset* bits",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Reconciles a RangeType with a Bitset to ensure well-formedness."
    },
    {
      "name": "Type::Constant",
      "parameters": [
        "double value",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a Constant Type for a double value."
    },
    {
      "name": "Type::Constant",
      "parameters": [
        "JSHeapBroker* broker",
        "Handle<i::Object> value",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a Constant Type for a HeapObject value."
    },
    {
      "name": "Type::Constant",
      "parameters": [
        "JSHeapBroker* broker",
        "ObjectRef ref",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a Constant Type from an ObjectRef."
    },
    {
      "name": "Type::Union",
      "parameters": [
        "Type type1",
        "Type type2",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Calculates the union of two types."
    },
    {
      "name": "Type::AddToUnion",
      "parameters": [
        "Type type",
        "UnionType* result",
        "int size",
        "Zone* zone"
      ],
      "return_type": "int",
      "logic": "Adds a type to a union if it's not a bitset/range/subsumed."
    },
    {
      "name": "Type::NormalizeUnion",
      "parameters": [
        "UnionType* unioned",
        "int size",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Normalizes a UnionType, ensuring well-formedness and potentially simplifying it."
    },
    {
      "name": "Type::NumConstants",
      "parameters": [],
      "return_type": "int",
      "logic": "Counts the number of HeapConstant types in a Type (including those in unions)."
    },
    {
      "name": "BitsetType::Name",
      "parameters": [
        "bitset bits"
      ],
      "return_type": "const char*",
      "logic": "Returns the name of a bitset, or nullptr if not found."
    },
    {
      "name": "BitsetType::Print",
      "parameters": [
        "std::ostream& os",
        "bitset bits"
      ],
      "return_type": "void",
      "logic": "Prints a bitset to an output stream."
    },
    {
      "name": "Type::PrintTo",
      "parameters": [
        "std::ostream& os"
      ],
      "return_type": "void",
      "logic": "Prints a type to an output stream, handling different type kinds (Bitset, HeapConstant, Range, Union)."
    },
    {
      "name": "BitsetType::SignedSmall",
      "parameters": [],
      "return_type": "BitsetType::bitset",
      "logic": "Returns the bitset for signed small integers (Smi)."
    },
    {
      "name": "BitsetType::UnsignedSmall",
      "parameters": [],
      "return_type": "BitsetType::bitset",
      "logic": "Returns the bitset for unsigned small integers (Smi)."
    },
    {
      "name": "Type::Tuple",
      "parameters": [
        "Type first",
        "Type second",
        "Type third",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a tuple type."
    },
    {
      "name": "Type::Tuple",
      "parameters": [
        "Type first",
        "Type second",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a tuple type with two elements."
    },
    {
      "name": "Type::OtherNumberConstant",
      "parameters": [
        "double value",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a OtherNumberConstant type."
    },
    {
      "name": "Type::HeapConstant",
      "parameters": [
        "HeapObjectRef value",
        "JSHeapBroker* broker",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a HeapConstant type."
    },
    {
      "name": "Type::Range",
      "parameters": [
        "double min",
        "double max",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a Range type."
    },
    {
      "name": "Type::Range",
      "parameters": [
        "RangeType::Limits lims",
        "Zone* zone"
      ],
      "return_type": "Type",
      "logic": "Creates a Range type from limits."
    },
    {
      "name": "Type::AsHeapConstant",
      "parameters": [],
      "return_type": "const HeapConstantType*",
      "logic": "Casts the type to a HeapConstantType."
    },
    {
      "name": "Type::AsOtherNumberConstant",
      "parameters": [],
      "return_type": "const OtherNumberConstantType*",
      "logic": "Casts the type to a OtherNumberConstantType."
    },
    {
      "name": "Type::AsRange",
      "parameters": [],
      "return_type": "const RangeType*",
      "logic": "Casts the type to a RangeType."
    },
    {
      "name": "Type::AsTuple",
      "parameters": [],
      "return_type": "const TupleType*",
      "logic": "Casts the type to a TupleType."
    },
    {
      "name": "Type::AsUnion",
      "parameters": [],
      "return_type": "const UnionType*",
      "logic": "Casts the type to a UnionType."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "Type type"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a Type to an output stream."
    },
    {
      "name": "Type::AllocateOnHeap",
      "parameters": [
        "Factory* factory"
      ],
      "return_type": "Handle<TurbofanType>",
      "logic": "Allocates a TurbofanType object on the heap representing the current Type."
    }
  ]
}