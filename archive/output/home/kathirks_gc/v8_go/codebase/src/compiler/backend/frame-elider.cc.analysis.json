{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/frame-elider.cc",
  "imports": [
    "src/compiler/backend/frame-elider.h",
    "src/base/iterator.h"
  ],
  "classes": [
    {
      "name": "FrameElider",
      "properties": [
        "code_",
        "has_dummy_end_block_",
        "is_wasm_to_js_"
      ],
      "methods": [
        {
          "name": "FrameElider",
          "parameters": [
            "InstructionSequence* code",
            "bool has_dummy_end_block",
            "bool is_wasm_to_js"
          ],
          "return_type": "void",
          "logic": "Constructor for the FrameElider class. Initializes the code_, has_dummy_end_block_, and is_wasm_to_js_ member variables."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Executes the frame elision process. Calls MarkBlocks, PropagateMarks, and MarkDeConstruction methods in sequence."
        },
        {
          "name": "MarkBlocks",
          "parameters": [],
          "return_type": "void",
          "logic": "Iterates through the instruction blocks and marks blocks that need a frame based on the presence of calls, deoptimization calls, stack pointer checks, frame pointer accesses, or stack slot accesses with positive indices, or if it's wasm to js code."
        },
        {
          "name": "PropagateMarks",
          "parameters": [],
          "return_type": "void",
          "logic": "Propagates the frame requirement marks between blocks until a fixed point is reached by iteratively calling PropagateInOrder and PropagateReversed."
        },
        {
          "name": "MarkDeConstruction",
          "parameters": [],
          "return_type": "void",
          "logic": "Identifies where frame construction and deconstruction are needed based on transitions between blocks that need a frame and those that don't. Marks blocks where frames should be constructed and deconstructed."
        },
        {
          "name": "PropagateInOrder",
          "parameters": [],
          "return_type": "bool",
          "logic": "Propagates frame requirements in the normal order of instruction blocks. Returns true if any block's frame requirement changes."
        },
        {
          "name": "PropagateReversed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Propagates frame requirements in the reverse order of instruction blocks. Returns true if any block's frame requirement changes."
        },
        {
          "name": "PropagateIntoBlock",
          "parameters": [
            "InstructionBlock* block"
          ],
          "return_type": "bool",
          "logic": "Propagates frame requirements into a single block based on its predecessors and successors. Returns true if the block's frame requirement changes."
        },
        {
          "name": "instruction_blocks",
          "parameters": [],
          "return_type": "const InstructionBlocks&",
          "logic": "Returns the collection of instruction blocks."
        },
        {
          "name": "InstructionBlockAt",
          "parameters": [
            "RpoNumber rpo_number"
          ],
          "return_type": "InstructionBlock*",
          "logic": "Returns the instruction block at the given RPO number."
        },
        {
          "name": "InstructionAt",
          "parameters": [
            "int index"
          ],
          "return_type": "Instruction*",
          "logic": "Returns the instruction at the given index."
        }
      ]
    }
  ],
  "functions": []
}