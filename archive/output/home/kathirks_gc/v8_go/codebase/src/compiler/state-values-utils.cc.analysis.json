{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/state-values-utils.cc",
  "imports": [
    "src/compiler/state-values-utils.h",
    "src/compiler/bytecode-liveness-map.h",
    "src/compiler/common-operator.h"
  ],
  "classes": [
    {
      "name": "StateValuesCache",
      "properties": [
        "js_graph_",
        "hash_map_",
        "working_space_",
        "empty_state_values_"
      ],
      "methods": [
        {
          "name": "StateValuesCache",
          "parameters": [
            "JSGraph* js_graph"
          ],
          "return_type": "void",
          "logic": "Constructor for StateValuesCache. Initializes the JSGraph pointer, hash map, working space, and the empty state values node."
        },
        {
          "name": "AreKeysEqual",
          "parameters": [
            "void* key1",
            "void* key2"
          ],
          "return_type": "bool",
          "logic": "Static method that compares two keys. Handles comparison between two NodeKey pointers or a NodeKey and a StateValuesKey.  It checks if both keys point to null nodes, then calls AreValueKeysEqual. Otherwise, it uses IsKeysEqualToNode."
        },
        {
          "name": "IsKeysEqualToNode",
          "parameters": [
            "StateValuesKey* key",
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Static method that checks if a StateValuesKey is equal to a Node. It compares the count of inputs, the sparse input mask, and the actual input nodes."
        },
        {
          "name": "AreValueKeysEqual",
          "parameters": [
            "StateValuesKey* key1",
            "StateValuesKey* key2"
          ],
          "return_type": "bool",
          "logic": "Static method that checks if two StateValuesKeys are equal.  It compares the count, the sparse input mask, and individual input nodes."
        },
        {
          "name": "GetEmptyStateValues",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the empty state values node. Creates a new node if it doesn't already exist, using the common operator's StateValues method with a count of 0 and a dense sparse input mask."
        },
        {
          "name": "GetWorkingSpace",
          "parameters": [
            "size_t level"
          ],
          "return_type": "StateValuesCache::WorkingBuffer*",
          "logic": "Returns a WorkingBuffer from the working space at a given level. If the working space is not large enough, it resizes it."
        },
        {
          "name": "GetValuesNodeFromCache",
          "parameters": [
            "Node** nodes",
            "size_t count",
            "SparseInputMask mask"
          ],
          "return_type": "Node*",
          "logic": "Retrieves a StateValues node from the cache based on the provided nodes, count, and sparse input mask. If the node is not in the cache, it creates a new one and adds it to the cache."
        },
        {
          "name": "FillBufferWithValues",
          "parameters": [
            "WorkingBuffer* node_buffer",
            "size_t* node_count",
            "size_t* values_idx",
            "Node** values",
            "size_t count",
            "const BytecodeLivenessState* liveness"
          ],
          "return_type": "SparseInputMask::BitMaskType",
          "logic": "Fills a buffer with live values (nodes), according to the given bytecode liveness state. It returns the resulting sparse input mask."
        },
        {
          "name": "BuildTree",
          "parameters": [
            "size_t* values_idx",
            "Node** values",
            "size_t count",
            "const BytecodeLivenessState* liveness",
            "size_t level"
          ],
          "return_type": "Node*",
          "logic": "Recursively builds a tree of StateValues nodes. It processes values, respecting liveness information, and caches the resulting StateValues nodes. It handles both dense and sparse input masks, and collapses single-input trees."
        },
        {
          "name": "GetNodeForValues",
          "parameters": [
            "Node** values",
            "size_t count",
            "const BytecodeLivenessState* liveness"
          ],
          "return_type": "Node*",
          "logic": "Constructs a state values node from an array of nodes using a balanced tree structure, taking into account liveness information for sparse representation. Uses a cache to reuse existing state value nodes."
        }
      ]
    },
    {
      "name": "StateValuesAccess",
      "properties": [
        "node_"
      ],
      "methods": [
        {
          "name": "StateValuesAccess",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Constructor for StateValuesAccess, taking the node to iterate over."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Calculates the total size of the state represented by the state value node, including nested StateValue nodes."
        }
      ]
    },
    {
      "name": "StateValuesAccess::iterator",
      "properties": [
        "current_depth_",
        "stack_"
      ],
      "methods": [
        {
          "name": "iterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Constructor for StateValuesAccess iterator, initializes the stack with the initial node's inputs using sparse input mask."
        },
        {
          "name": "Top",
          "parameters": [],
          "return_type": "SparseInputMask::InputIterator*",
          "logic": "Returns the iterator on the top of the stack."
        },
        {
          "name": "Push",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Pushes a nested StateValue node's iterator to the stack."
        },
        {
          "name": "Pop",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops an iterator from the stack."
        },
        {
          "name": "Advance",
          "parameters": [],
          "return_type": "void",
          "logic": "Advances the top iterator and ensure the iterator is valid."
        },
        {
          "name": "AdvanceTillNotEmpty",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Advance until the current iterator is not empty, returns the number of empty nodes found."
        },
        {
          "name": "EnsureValid",
          "parameters": [],
          "return_type": "void",
          "logic": "Ensures that the iterator is valid.  If the current iterator is exhausted, it pops the stack and advances the parent iterator until a valid node is found or the stack is empty."
        },
        {
          "name": "node",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the current node."
        },
        {
          "name": "type",
          "parameters": [],
          "return_type": "MachineType",
          "logic": "Returns the machine type of the current node."
        },
        {
          "name": "operator!=",
          "parameters": [
            "iterator const& other"
          ],
          "return_type": "bool",
          "logic": "Checks if the iterator is not equal to the end iterator."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "StateValuesAccess::iterator&",
          "logic": "Prefix increment operator, advances the iterator."
        },
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "StateValuesAccess::TypedNode",
          "logic": "Dereference operator, returns the typed node."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "StateValuesHashKey",
      "parameters": [
        "Node** nodes",
        "size_t count"
      ],
      "return_type": "int",
      "logic": "Calculates a hash key for a set of nodes."
    }
  ]
}