{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/pipeline.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/pipeline.cc\",\n  \"imports\": [\n    \"src/compiler/pipeline.h\",\n    \"fstream\",\n    \"iostream\",\n    \"memory\",\n    \"optional\",\n    \"sstream\",\n    \"src/builtins/builtins.h\",\n    \"src/builtins/profile-data-reader.h\",\n    \"src/codegen/bailout-reason.h\",\n    \"src/codegen/compiler.h\",\n    \"src/codegen/interface-descriptors-inl.h\",\n    \"src/codegen/optimized-compilation-info.h\",\n    \"src/codegen/register-configuration.h\",\n    \"src/codegen/reloc-info-inl.h\",\n    \"src/codegen/reloc-info.h\",\n    \"src/common/globals.h\",\n    \"src/common/high-allocation-throughput-scope.h\",\n    \"src/compiler/add-type-assertions-reducer.h\",\n    \"src/compiler/backend/bitcast-elider.h\",\n    \"src/compiler/backend/code-generator.h\",\n    \"src/compiler/backend/instruction-selector.h\",\n    \"src/compiler/backend/instruction.h\",\n    \"src/compiler/backend/register-allocator-verifier.h\",\n    \"src/compiler/backend/register-allocator.h\",\n    \"src/compiler/basic-block-instrumentor.h\",\n    \"src/compiler/branch-elimination.h\",\n    \"src/compiler/bytecode-graph-builder.h\",\n    \"src/compiler/checkpoint-elimination.h\",\n    \"src/compiler/code-assembler-compilation-job.h\",\n    \"src/compiler/code-assembler.h\",\n    \"src/compiler/common-operator-reducer.h\",\n    \"src/compiler/common-operator.h\",\n    \"src/compiler/compiler-source-position-table.h\",\n    \"src/compiler/constant-folding-reducer.h\",\n    \"src/compiler/csa-load-elimination.h\",\n    \"src/compiler/dead-code-elimination.h\",\n    \"src/compiler/escape-analysis-reducer.h\",\n    \"src/compiler/escape-analysis.h\",\n    \"src/compiler/graph-trimmer.h\",\n    \"src/compiler/js-call-reducer.h\",\n    \"src/compiler/js-context-specialization.h\",\n    \"src/compiler/js-create-lowering.h\",\n    \"src/compiler/js-generic-lowering.h\",\n    \"src/compiler/js-heap-broker.h\",\n    \"src/compiler/js-inlining-heuristic.h\",\n    \"src/compiler/js-intrinsic-lowering.h\",\n    \"src/compiler/js-native-context-specialization.h\",\n    \"src/compiler/js-typed-lowering.h\",\n    \"src/compiler/late-escape-analysis.h\",\n    \"src/compiler/linkage.h\",\n    \"src/compiler/load-elimination.h\",\n    \"src/compiler/loop-analysis.h\",\n    \"src/compiler/loop-peeling.h\",\n    \"src/compiler/loop-variable-optimizer.h\",\n    \"src/compiler/machine-graph-verifier.h\",\n    \"src/compiler/machine-operator-reducer.h\",\n    \"src/compiler/memory-optimizer.h\",\n    \"src/compiler/node-observer.h\",\n    \"src/compiler/node-origin-table.h\",\n    \"src/compiler/osr.h\",\n    \"src/compiler/pair-load-store-reducer.h\",\n    \"src/compiler/phase.h\",\n    \"src/compiler/pipeline-data-inl.h\",\n    \"src/compiler/pipeline-statistics.h\",\n    \"src/compiler/raw-machine-assembler.h\",\n    \"src/compiler/redundancy-elimination.h\",\n    \"src/compiler/schedule.h\",\n    \"src/compiler/scheduler.h\",\n    \"src/compiler/simplified-lowering.h\",\n    \"src/compiler/simplified-operator-reducer.h\",\n    \"src/compiler/simplified-operator.h\",\n    \"src/compiler/turbofan-graph-visualizer.h\",\n    \"src/compiler/turbofan-typer.h\",\n    \"src/compiler/turboshaft/build-graph-phase.h\",\n    \"src/compiler/turboshaft/debug-feature-lowering-phase.h\",\n    \"src/compiler/turboshaft/instruction-selection-phase.h\",\n    \"src/compiler/turboshaft/loop-peeling-phase.h\",\n    \"src/compiler/turboshaft/loop-unrolling-phase.h\",\n    \"src/compiler/turboshaft/phase.h\",\n    \"src/compiler/turboshaft/pipelines.h\",\n    \"src/compiler/turboshaft/simplify-tf-loops.h\",\n    \"src/compiler/turboshaft/tracing.h\",\n    \"src/compiler/type-narrowing-reducer.h\",\n    \"src/compiler/typed-optimization.h\",\n    \"src/compiler/value-numbering-reducer.h\",\n    \"src/compiler/verifier.h\",\n    \"src/compiler/zone-stats.h\",\n    \"src/diagnostics/code-tracer.h\",\n    \"src/diagnostics/disassembler.h\",\n    \"src/flags/flags.h\",\n    \"src/handles/handles-inl.h\",\n    \"src/heap/local-heap.h\",\n    \"src/logging/code-events.h\",\n    \"src/logging/counters.h\",\n    \"src/logging/runtime-call-stats-scope.h\",\n    \"src/logging/runtime-call-stats.h\",\n    \"src/objects/code-kind.h\",\n    \"src/objects/shared-function-info.h\",\n    \"src/objects/string-inl.h\",\n    \"src/tracing/trace-event.h\",\n    \"src/utils/ostreams.h\",\n    \"src/utils/utils.h\",\n    \"src/compiler/int64-lowering.h\",\n    \"src/compiler/turboshaft/int64-lowering-phase.h\",\n    \"src/compiler/turboshaft/wasm-dead-code-elimination-phase.h\",\n    \"src/compiler/turboshaft/wasm-debug-memory-lowering-phase.h\",\n    \"src/compiler/turboshaft/wasm-gc-optimize-phase.h\",\n    \"src/compiler/turboshaft/wasm-lowering-phase.h\",\n    \"src/compiler/turboshaft/wasm-optimize-phase.h\",\n    \"src/compiler/turboshaft/wasm-turboshaft-compiler.h\",\n    \"src/compiler/wasm-compiler.h\",\n    \"src/compiler/wasm-escape-analysis.h\",\n    \"src/compiler/wasm-gc-lowering.h\",\n    \"src/compiler/wasm-gc-operator-reducer.h\",\n    \"src/compiler/wasm-load-elimination.h\",\n    \"src/compiler/wasm-typer.h\",\n    \"src/wasm/function-body-decoder.h\",\n    \"src/wasm/function-compiler.h\",\n    \"src/wasm/turboshaft-graph-interface.h\",\n    \"src/wasm/wasm-builtin-list.h\",\n    \"src/wasm/wasm-disassembler.h\",\n    \"src/wasm/wasm-engine.h\",\n    \"src/compiler/turboshaft/wasm-simd-phase.h\",\n    \"src/compiler/revectorizer.h\",\n    \"src/compiler/turboshaft/wasm-revec-phase.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"PipelineImpl\",\n      \"properties\": [\n        \"data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PipelineImpl\",\n          \"parameters\": [\n            \"TFPipelineData* data\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the PipelineImpl class. Initializes the data_ member.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"turboshaft::TurbofanPhase Phase\",\n            \"Args&&... args\"\n          ],\n          \"return_type\": \"auto\",\n          \"logic\": \"Helper function to execute a turbofan pipeline phase, including setting up timing and zone scopes.\"\n        },\n        {\n          \"name\": \"InitializeHeapBroker\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the heap broker for the pipeline.\"\n        },\n        {\n          \"name\": \"CreateGraph\",\n          \"parameters\": [\n            \"Linkage* linkage\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Runs the graph creation and initial optimization passes.\"\n        },\n        {\n          \"name\": \"OptimizeTurbofanGraph\",\n          \"parameters\": [\n            \"Linkage* linkage\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Runs the concurrent optimization passes on the turbofan graph.\"\n        },\n        {\n          \"name\": \"ComputeScheduledGraph\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Produces a scheduled graph.\"\n        },\n        {\n          \"name\": \"Revectorize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Revectorizes the graph for SIMD operations.\"\n        },\n        {\n          \"name\": \"AllocateRegisters\",\n          \"parameters\": [\n            \"CallDescriptor* call_descriptor\",\n            \"bool has_dummy_end_block\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Runs register allocation on the instruction sequence.\"\n        },\n        {\n          \"name\": \"AssembleCode\",\n          \"parameters\": [\n            \"Linkage* linkage\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs the code assembly pass.\"\n        },\n        {\n          \"name\": \"FinalizeCode\",\n          \"parameters\": [\n            \"bool retire_broker = true\"\n          ],\n          \"return_type\": \"MaybeDirectHandle<Code>\",\n          \"logic\": \"Runs the code finalization pass.\"\n        },\n        {\n          \"name\": \"CommitDependencies\",\n          \"parameters\": [\n            \"Handle<Code> code\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Installs any code dependencies.\"\n        },\n        {\n          \"name\": \"RunPrintAndVerify\",\n          \"parameters\": [\n            \"const char* phase\",\n            \"bool untyped = false\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs printing and verification of the graph.\"\n        },\n        {\n          \"name\": \"AllocateRegisters\",\n          \"parameters\": [\n            \"const RegisterConfiguration* config\",\n            \"CallDescriptor* call_descriptor\",\n            \"bool run_verifier\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Allocates Registers given configuration, descriptor, and run verifier\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"TFPipelineData*\",\n          \"logic\": \"Returns the TFPipelineData.\"\n        },\n        {\n          \"name\": \"info\",\n          \"parameters\": [],\n          \"return_type\": \"OptimizedCompilationInfo*\",\n          \"logic\": \"Returns the OptimizedCompilationInfo.\"\n        },\n        {\n          \"name\": \"isolate\",\n          \"parameters\": [],\n          \"return_type\": \"Isolate*\",\n          \"logic\": \"Returns the Isolate.\"\n        },\n        {\n          \"name\": \"code_generator\",\n          \"parameters\": [],\n          \"return_type\": \"CodeGenerator*\",\n          \"logic\": \"Returns the CodeGenerator.\"\n        },\n        {\n          \"name\": \"observe_node_manager\",\n          \"parameters\": [],\n          \"return_type\": \"ObserveNodeManager*\",\n          \"logic\": \"Returns the ObserveNodeManager.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SourcePositionWrapper\",\n      \"properties\": [\n        \"reducer_\",\n        \"table_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SourcePositionWrapper\",\n          \"parameters\": [\n            \"Reducer* reducer\",\n            \"SourcePositionTable* table\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for SourcePositionWrapper, wraps a reducer to add source position information\"\n        },\n        {\n          \"name\": \"~SourcePositionWrapper\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Destructor for SourcePositionWrapper\"\n        },\n        {\n          \"name\": \"reducer_name\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the reducer name\"\n        },\n        {\n          \"name\": \"Reduce\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"Reduction\",\n          \"logic\": \"Reduces a node, adding source position information before passing to the underlying reducer.\"\n        },\n        {\n          \"name\": \"Finalize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Finalizes the underlying reducer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NodeOriginsWrapper\",\n      \"properties\": [\n        \"reducer_\",\n        \"table_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NodeOriginsWrapper\",\n          \"parameters\": [\n            \"Reducer* reducer\",\n            \"NodeOriginTable* table\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for NodeOriginsWrapper, wraps a reducer to add node origin information.\"\n        },\n        {\n          \"name\": \"~NodeOriginsWrapper\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Destructor for NodeOriginsWrapper.\"\n        },\n        {\n          \"name\": \"reducer_name\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the reducer name.\"\n        },\n        {\n          \"name\": \"Reduce\",\n          \"parameters\": [\n            \"Node* node\"\n          ],\n          \"return_type\": \"Reduction\",\n          \"logic\": \"Reduces a node, adding node origin information before passing to the underlying reducer.\"\n        },\n        {\n          \"name\": \"Finalize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Finalizes the underlying reducer.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PipelineRunScope\",\n      \"properties\": [\n        \"phase_scope_\",\n        \"zone_scope_\",\n        \"origin_scope_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PipelineRunScope\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"const char* phase_name\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the PipelineRunScope, manages scopes for pipeline phases.\"\n        },\n        {\n          \"name\": \"zone\",\n          \"parameters\": [],\n          \"return_type\": \"Zone*\",\n          \"logic\": \"Returns the zone.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LocalIsolateScope\",\n      \"properties\": [\n        \"broker_\",\n        \"info_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"LocalIsolateScope\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"OptimizedCompilationInfo* info\",\n            \"LocalIsolate* local_isolate\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for the LocalIsolateScope, attaches and detaches the local isolate.\"\n        },\n        {\n          \"name\": \"~LocalIsolateScope\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor for LocalIsolateScope, Detaches the local isolate.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PipelineCompilationJob\",\n      \"properties\": [\n        \"zone_\",\n        \"zone_stats_\",\n        \"compilation_info_\",\n        \"pipeline_statistics_\",\n        \"data_\",\n        \"turboshaft_data_\",\n        \"pipeline_\",\n        \"linkage_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PipelineCompilationJob\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Handle<SharedFunctionInfo> shared_info\",\n            \"Handle<JSFunction> function\",\n            \"BytecodeOffset osr_offset\",\n            \"CodeKind code_kind\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for PipelineCompilationJob. Initializes the zones, compilation info, pipeline data, turboshaft data, the pipeline itself and linkage information.\"\n        },\n        {\n          \"name\": \"~PipelineCompilationJob\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor for PipelineCompilationJob.\"\n        },\n        {\n          \"name\": \"PrepareJobImpl\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Prepares the job for compilation, setting up compiler flags and initializing the heap broker and linkage.\"\n        },\n        {\n          \"name\": \"ExecuteJobImpl\",\n          \"parameters\": [\n            \"RuntimeCallStats* stats\",\n            \"LocalIsolate* local_isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Executes the compilation job using Turbofan and Turboshaft.\"\n        },\n        {\n          \"name\": \"FinalizeJobImpl\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Finalizes the compilation job, checking and committing code dependencies, and setting the code on the compilation info.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PipelineJobScope\",\n      \"properties\": [\n        \"high_throughput_scope_\",\n        \"data_\",\n        \"turboshaft_data_\",\n        \"current_broker_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PipelineJobScope\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"RuntimeCallStats* stats\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for PipelineJobScope. Sets up the RuntimeStats table on the pipeline data.\"\n        },\n        {\n          \"name\": \"PipelineJobScope\",\n          \"parameters\": [\n            \"turboshaft::PipelineData* turboshaft_data\",\n            \"RuntimeCallStats* stats\"\n          ],\n          \"return_type\": \"explicit\",\n          \"logic\": \"Constructor for PipelineJobScope. Sets up the RuntimeStats table on the turboshaft data.\"\n        },\n        {\n          \"name\": \"~PipelineJobScope\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor for PipelineJobScope. Unsets the RuntimeStats table on the pipeline data or the turboshaft data.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GraphBuilderPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"Linkage* linkage\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Builds a graph from bytecode using BytecodeGraphBuilder.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"InliningPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs function context specialization and inlining.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JSWasmInliningPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Inlines JS-to-Wasm function calls.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JSWasmLoweringPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Lowers JS-to-Wasm calls.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EarlyGraphTrimmingPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Trims the graph before typing.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TyperPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"Typer* typer\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Types the graph, running loop variable optimization.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"UntyperPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes type information from the graph nodes.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HeapBrokerInitializationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the heap broker and starts serialization.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TypedLoweringPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Lowers the typed graph.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EscapeAnalysisPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs escape analysis.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TypeAssertionsPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds type assertions to the graph.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimplifiedLoweringPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"Linkage* linkage\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs simplified lowering.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LoopPeelingPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Performs loop peeling.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LoopExitEliminationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Eliminates loop exits.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GenericLoweringPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs generic lowering.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EarlyOptimizationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs early optimization passes.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LoadEliminationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs load elimination.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MemoryOptimizationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Optimizes memory access operations and allocations.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmTypingPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"uint32_t function_index\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs Wasm typing.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmGCOptimizationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"const wasm::WasmModule* module\",\n            \"MachineGraph* mcgraph\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs Wasm GC Optimization\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimplifyLoopsPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Simplifies loops\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmGCLoweringPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"const wasm::WasmModule* module\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs Wasm GC Lowering\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmOptimizationPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"MachineOperatorReducer::SignallingNanPropagation signalling_nan_propagation\",\n            \"wasm::WasmDetectedFeatures detected_features\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Runs Wasm Optimization\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ComputeSchedulePhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Computes the schedule.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"RevectorizePhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Revectorizes\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PrintGraphPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"const char* phase\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the graph.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"VerifyGraphPhase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"TFPipelineData* data\",\n            \"Zone* temp_zone\",\n            \"const bool untyped\",\n            \"bool values_only = false\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Verifies the graph.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmHeapStubCompilationJob\",\n      \"properties\": [\n        \"debug_name_\",\n        \"info_\",\n        \"call_descriptor_\",\n        \"zone_stats_\",\n        \"zone_\",\n        \"graph_\",\n        \"turboshaft_data_\",\n        \"data_\",\n        \"pipeline_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmHeapStubCompilationJob\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"CallDescriptor* call_descriptor\",\n            \"std::unique_ptr<Zone> zone\",\n            \"TFGraph* graph\",\n            \"CodeKind kind\",\n            \"std::unique_ptr<char[]> debug_name\",\n            \"const AssemblerOptions& options\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for WasmHeapStubCompilationJob. Initializes the zones, compilation info, pipeline data, and the pipeline itself.\"\n        },\n        {\n          \"name\": \"PrepareJobImpl\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Prepares the job for compilation\"\n        },\n        {\n          \"name\": \"ExecuteJobImpl\",\n          \"parameters\": [\n            \"RuntimeCallStats* stats\",\n            \"LocalIsolate* local_isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Executes the compilation job using Turbofan.\"\n        },\n        {\n          \"name\": \"FinalizeJobImpl\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Finalizes the compilation job.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmTurboshaftWrapperCompilationJob\",\n      \"properties\": [\n        \"zone_\",\n        \"debug_name_\",\n        \"info_\",\n        \"sig_\",\n        \"wrapper_info_\",\n        \"call_descriptor_\",\n        \"zone_stats_\",\n        \"turboshaft_data_\",\n        \"data_\",\n        \"pipeline_\",\n        \"pipeline_statistics_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"WasmTurboshaftWrapperCompilationJob\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const wasm::CanonicalSig* sig\",\n            \"wasm::WrapperCompilationInfo wrapper_info\",\n            \"std::unique_ptr<char[]> debug_name\",\n            \"const AssemblerOptions& options\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for WasmTurboshaftWrapperCompilationJob. Initializes the zones, compilation info, and the pipeline itself.\"\n        },\n        {\n          \"name\": \"PrepareJobImpl\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Prepares the job for compilation. This wrapper needs to be implemented to fulfill the base class\"\n        },\n        {\n          \"name\": \"ExecuteJobImpl\",\n          \"parameters\": [\n            \"RuntimeCallStats* stats\",\n            \"LocalIsolate* local_isolate\"\n          ],\n          \"return_type\": \"Status\",\n          \"logic\": \"Executes the compilation job using Turboshaft\"\n        },\n        "
}