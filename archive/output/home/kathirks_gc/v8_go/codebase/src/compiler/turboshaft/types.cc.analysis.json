{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/types.cc",
  "imports": [
    "src/compiler/turboshaft/types.h",
    "<optional>",
    "<sstream>",
    "<string_view>",
    "src/base/logging.h",
    "src/compiler/turboshaft/type-parser.h",
    "src/heap/factory.h",
    "src/objects/turboshaft-types-inl.h"
  ],
  "classes": [
    {
      "name": "Type",
      "properties": [
        "kind_"
      ],
      "methods": [
        {
          "name": "Equals",
          "parameters": [
            "const Type& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two Type objects are equal based on their kind and internal values."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const Type& other"
          ],
          "return_type": "bool",
          "logic": "Checks if one Type object is a subtype of another based on their kind and internal values."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the representation of a Type object to an output stream."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the representation of a Type object to standard output."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Calculates the least upper bound (union) of two Type objects.  Returns a new Type object representing the combination."
        },
        {
          "name": "ParseFromString",
          "parameters": [
            "const std::string_view& str",
            "Zone* zone"
          ],
          "return_type": "std::optional<Type>",
          "logic": "Parses a Type object from a string representation."
        },
        {
          "name": "AllocateOnHeap",
          "parameters": [
            "Factory* factory"
          ],
          "return_type": "Handle<TurboshaftType>",
          "logic": "Allocates a TurboshaftType object on the heap, based on the current Type object."
        }
      ]
    },
    {
      "name": "WordType<Bits>",
      "properties": [],
      "methods": [
        {
          "name": "Contains",
          "parameters": [
            "word_t value"
          ],
          "return_type": "bool",
          "logic": "Checks if a word value is contained within the WordType, considering its subkind (range or set)."
        },
        {
          "name": "Equals",
          "parameters": [
            "const WordType<Bits>& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two WordType objects are equal, considering their subkind and internal values."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const WordType<Bits>& other"
          ],
          "return_type": "bool",
          "logic": "Checks if one WordType object is a subtype of another, considering their subkind and internal values."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const WordType<Bits>& lhs",
            "const WordType<Bits>& rhs",
            "Zone* zone"
          ],
          "return_type": "WordType<Bits>",
          "logic": "Calculates the least upper bound (union) of two WordType objects, considering their range or set representations. Returns a new WordType representing the combination."
        },
        {
          "name": "Intersect",
          "parameters": [
            "const WordType<Bits>& lhs",
            "const WordType<Bits>& rhs",
            "ResolutionMode resolution_mode",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Calculates the intersection (greatest lower bound) of two WordType objects. Returns a new Type object representing the intersection.  Handles wrapping ranges."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the representation of a WordType object to an output stream."
        },
        {
          "name": "AllocateOnHeap",
          "parameters": [
            "Factory* factory"
          ],
          "return_type": "Handle<TurboshaftType>",
          "logic": "Allocates a TurboshaftType object on the heap, based on the current WordType object."
        }
      ]
    },
    {
      "name": "FloatType<Bits>",
      "properties": [],
      "methods": [
        {
          "name": "Contains",
          "parameters": [
            "float_t value"
          ],
          "return_type": "bool",
          "logic": "Checks if a float value is contained within the FloatType, considering its subkind (range, set, or only special values)."
        },
        {
          "name": "Equals",
          "parameters": [
            "const FloatType<Bits>& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two FloatType objects are equal, considering their subkind, special values, and internal values."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const FloatType<Bits>& other"
          ],
          "return_type": "bool",
          "logic": "Checks if one FloatType object is a subtype of another, considering their subkind, special values, and internal values."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const FloatType<Bits>& lhs",
            "const FloatType<Bits>& rhs",
            "Zone* zone"
          ],
          "return_type": "FloatType<Bits>",
          "logic": "Calculates the least upper bound (union) of two FloatType objects, considering their range, set, and special values representations. Returns a new FloatType representing the combination."
        },
        {
          "name": "Intersect",
          "parameters": [
            "const FloatType<Bits>& lhs",
            "const FloatType<Bits>& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Calculates the intersection (greatest lower bound) of two FloatType objects. Returns a new Type object representing the intersection."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the representation of a FloatType object to an output stream."
        },
        {
          "name": "AllocateOnHeap",
          "parameters": [
            "Factory* factory"
          ],
          "return_type": "Handle<TurboshaftType>",
          "logic": "Allocates a TurboshaftType object on the heap, based on the current FloatType object."
        }
      ]
    },
    {
      "name": "TupleType",
      "properties": [],
      "methods": [
        {
          "name": "Equals",
          "parameters": [
            "const TupleType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if two TupleType objects are equal, element by element."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const TupleType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if one TupleType object is a subtype of another, element by element."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const TupleType& lhs",
            "const TupleType& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Calculates the least upper bound (union) of two TupleType objects. Returns a new Type object representing the combined tuple."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the representation of a TupleType object to an output stream."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "uint64_to_high_low",
      "parameters": [
        "uint64_t value"
      ],
      "return_type": "std::pair<uint32_t, uint32_t>",
      "logic": "Splits a 64-bit unsigned integer into two 32-bit unsigned integers (high and low parts)."
    },
    {
      "name": "LeastUpperBoundFromRanges",
      "parameters": [
        "word_t l_from",
        "word_t l_to",
        "word_t r_from",
        "word_t r_to",
        "Zone* zone"
      ],
      "return_type": "WordType<Bits>",
      "logic": "Calculates the least upper bound of two ranges, handling both wrapping and non-wrapping ranges. This function is used internally by `WordType<Bits>::LeastUpperBound`."
    }
  ]
}