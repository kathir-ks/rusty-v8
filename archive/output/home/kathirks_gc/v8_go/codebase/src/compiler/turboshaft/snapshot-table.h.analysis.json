{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/snapshot-table.h",
  "imports": [
    "<iostream>",
    "<limits>",
    "src/base/iterator.h",
    "src/base/small-vector.h",
    "src/compiler/turboshaft/fast-hash.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "NoKeyData",
      "properties": [],
      "methods": []
    },
    {
      "name": "NoChangeCallback",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "Key key",
            "const Value& old_value",
            "const Value& new_value"
          ],
          "return_type": "void",
          "logic": "A callback that does nothing. Used as a default for the change_callback in the SnapshotTable."
        }
      ]
    },
    {
      "name": "SnapshotTableEntry",
      "properties": [
        "value",
        "merge_offset",
        "last_merged_predecessor"
      ],
      "methods": [
        {
          "name": "SnapshotTableEntry",
          "parameters": [
            "Value value",
            "KeyData data"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the entry with a value and key data."
        }
      ]
    },
    {
      "name": "SnapshotTableKey",
      "properties": [
        "entry_"
      ],
      "methods": [
        {
          "name": "operator==",
          "parameters": [
            "SnapshotTableKey other"
          ],
          "return_type": "bool",
          "logic": "Compares two keys for equality based on the underlying entry pointer."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "const KeyData&",
          "logic": "Returns a const reference to the KeyData associated with the key."
        },
        {
          "name": "data",
          "parameters": [],
          "return_type": "KeyData&",
          "logic": "Returns a mutable reference to the KeyData associated with the key."
        },
        {
          "name": "SnapshotTableKey",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor which initializes the entry_ to nullptr (invalid key)."
        },
        {
          "name": "valid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the key is valid (entry_ is not null)."
        },
        {
          "name": "SnapshotTableKey",
          "parameters": [
            "SnapshotTableEntry<Value, KeyData>& entry"
          ],
          "return_type": "void",
          "logic": "Private constructor to create a valid key given a table entry."
        }
      ]
    },
    {
      "name": "SnapshotTable",
      "properties": [
        "zone_",
        "table_",
        "snapshots_",
        "log_",
        "root_snapshot_",
        "current_snapshot_",
        "merging_entries_",
        "merge_values_",
        "path_",
        "snapshot_was_created_with_merge"
      ],
      "methods": [
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "base::Vector<const Snapshot> predecessors",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot based on a list of predecessor snapshots, calling the `change_callback` on every value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "std::initializer_list<Snapshot> predecessors",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot based on a list of predecessor snapshots, calling the `change_callback` on every value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "Snapshot parent",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot based on a single parent snapshot, calling the `change_callback` on every value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "base::Vector<const Snapshot> predecessors",
            "const MergeFun& merge_fun",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot based on predecessor snapshots, using a merge function to resolve conflicts and calling the change callback."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "std::initializer_list<Snapshot> predecessors",
            "const MergeFun& merge_fun",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot based on predecessor snapshots, using a merge function to resolve conflicts and calling the change callback."
        },
        {
          "name": "Seal",
          "parameters": [],
          "return_type": "Snapshot",
          "logic": "Seals the current snapshot, making it immutable and returning a `Snapshot` object.  Handles optimization of removing empty snapshots."
        },
        {
          "name": "Get",
          "parameters": [
            "Key key"
          ],
          "return_type": "const Value&",
          "logic": "Returns the value associated with a given key in the current snapshot."
        },
        {
          "name": "GetPredecessorValue",
          "parameters": [
            "Key key",
            "int predecessor_index"
          ],
          "return_type": "const Value&",
          "logic": "Returns the value of a key in the given predecessor's log, specifically when the last StartNewSnapshot was called with a merge function. If the key was set in the current snapshot, it returns the current value instead."
        },
        {
          "name": "Set",
          "parameters": [
            "Key key",
            "Value new_value"
          ],
          "return_type": "bool",
          "logic": "Sets the value for a given key in the current snapshot. Returns true if the value changed, false otherwise."
        },
        {
          "name": "SnapshotTable",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the snapshot table with a zone and creates the root snapshot."
        },
        {
          "name": "NewKey",
          "parameters": [
            "KeyData data",
            "Value initial_value"
          ],
          "return_type": "Key",
          "logic": "Creates a new key with the given initial value and embedded key data."
        },
        {
          "name": "NewKey",
          "parameters": [
            "Value initial_value"
          ],
          "return_type": "Key",
          "logic": "Creates a new key with the given initial value and default KeyData."
        },
        {
          "name": "IsSealed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the current snapshot is sealed."
        },
        {
          "name": "LogEntries",
          "parameters": [
            "SnapshotData* s"
          ],
          "return_type": "base::Vector<LogEntry>",
          "logic": "Returns a Vector of LogEntry from start to end within a snapshot."
        },
        {
          "name": "RevertCurrentSnapshot",
          "parameters": [
            "ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Reverts the changes made in the current snapshot, restoring the previous snapshot's state. Invokes change_callback for each reverted change."
        },
        {
          "name": "ReplaySnapshot",
          "parameters": [
            "SnapshotData* snapshot",
            "ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Applies the changes made in a given snapshot, moving forward in the snapshot history. Invokes change_callback for each replayed change."
        },
        {
          "name": "RecordMergeValue",
          "parameters": [
            "TableEntry& entry",
            "const Value& value",
            "uint32_t predecessor_index",
            "uint32_t predecessor_count"
          ],
          "return_type": "void",
          "logic": "Records a value for merging from a specific predecessor. Stores the value in `merge_values_` at the correct offset."
        },
        {
          "name": "MoveToNewSnapshot",
          "parameters": [
            "base::Vector<const Snapshot> predecessors",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "SnapshotData&",
          "logic": "Prepares the SnapshotTable to start a new snapshot, resetting and replaying snapshots to the common ancestor of the predecessors and current snapshot, then creates a new SnapshotData object."
        },
        {
          "name": "MergePredecessors",
          "parameters": [
            "base::Vector<const Snapshot> predecessors",
            "const MergeFun& merge_fun",
            "const ChangeCallback& change_callback"
          ],
          "return_type": "void",
          "logic": "Merges values from all predecessors by reserving slots in `merge_values_` and then applies the merge_fun. Also calls the change_callback for each modified value."
        }
      ]
    },
    {
      "name": "SnapshotTable::MaybeSnapshot",
      "properties": [
        "data_"
      ],
      "methods": [
        {
          "name": "has_value",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the MaybeSnapshot contains a valid Snapshot."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "Snapshot",
          "logic": "Returns the Snapshot held by the MaybeSnapshot. Asserts that the MaybeSnapshot has a value."
        },
        {
          "name": "Set",
          "parameters": [
            "Snapshot snapshot"
          ],
          "return_type": "void",
          "logic": "Sets the Snapshot held by the MaybeSnapshot."
        },
        {
          "name": "MaybeSnapshot",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "MaybeSnapshot",
          "parameters": [
            "Snapshot snapshot"
          ],
          "return_type": "void",
          "logic": "Constructor which takes a snapshot."
        }
      ]
    },
    {
      "name": "SnapshotTable::Snapshot",
      "properties": [
        "data_"
      ],
      "methods": [
        {
          "name": "operator==",
          "parameters": [
            "Snapshot other"
          ],
          "return_type": "bool",
          "logic": "Compares two Snapshots for equality based on their internal data pointers."
        }
      ]
    },
    {
      "name": "ChangeTrackingSnapshotTable",
      "properties": [],
      "methods": [
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "base::Vector<const Snapshot> predecessors"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot and calls OnValueChange on the Derived class for each value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "std::initializer_list<Snapshot> predecessors"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot and calls OnValueChange on the Derived class for each value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "Snapshot parent"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot and calls OnValueChange on the Derived class for each value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "base::Vector<const Snapshot> predecessors",
            "const MergeFun& merge_fun"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot with merging and calls OnValueChange on the Derived class for each value change."
        },
        {
          "name": "StartNewSnapshot",
          "parameters": [
            "std::initializer_list<Snapshot> predecessors",
            "const MergeFun& merge_fun"
          ],
          "return_type": "void",
          "logic": "Starts a new snapshot with merging and calls OnValueChange on the Derived class for each value change."
        },
        {
          "name": "Set",
          "parameters": [
            "Key key",
            "Value new_value"
          ],
          "return_type": "void",
          "logic": "Sets a new value, then calls OnValueChange on the Derived class if the value changed."
        },
        {
          "name": "SetNoNotify",
          "parameters": [
            "Key key",
            "Value new_value"
          ],
          "return_type": "void",
          "logic": "Sets a new value, without notifying the Derived class (no OnValueChange call)."
        },
        {
          "name": "NewKey",
          "parameters": [
            "KeyData data",
            "Value initial_value"
          ],
          "return_type": "Key",
          "logic": "Creates a new key and calls OnNewKey on the Derived class."
        },
        {
          "name": "NewKey",
          "parameters": [
            "Value initial_value"
          ],
          "return_type": "Key",
          "logic": "Creates a new key and calls OnNewKey on the Derived class."
        }
      ]
    },
    {
      "name": "SnapshotTable<Value, KeyData>::LogEntry",
      "properties": [
        "table_entry",
        "old_value",
        "new_value"
      ],
      "methods": []
    },
    {
      "name": "SnapshotTable<Value, KeyData>::SnapshotData",
      "properties": [
        "parent",
        "depth",
        "log_begin",
        "log_end"
      ],
      "methods": [
        {
          "name": "SnapshotData",
          "parameters": [
            "SnapshotData* parent",
            "size_t log_begin"
          ],
          "return_type": "void",
          "logic": "Constructor for SnapshotData"
        },
        {
          "name": "CommonAncestor",
          "parameters": [
            "SnapshotData* other"
          ],
          "return_type": "SnapshotData*",
          "logic": "Finds the common ancestor between this snapshot and another."
        },
        {
          "name": "Seal",
          "parameters": [
            "size_t end"
          ],
          "return_type": "void",
          "logic": "Marks the end of the log for this snapshot."
        },
        {
          "name": "IsSealed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the snapshot has been sealed."
        }
      ]
    }
  ],
  "functions": []
}