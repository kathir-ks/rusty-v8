{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/instruction-scheduler.h",
  "imports": [
    "<optional>",
    "src/base/utils/random-number-generator.h",
    "src/compiler/backend/instruction.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "InstructionScheduler",
      "properties": [
        "zone_",
        "sequence_",
        "graph_",
        "last_side_effect_instr_",
        "pending_loads_",
        "last_live_in_reg_marker_",
        "last_deopt_or_trap_",
        "operands_map_",
        "random_number_generator_"
      ],
      "methods": [
        {
          "name": "InstructionScheduler",
          "parameters": [
            "Zone* zone",
            "InstructionSequence* sequence"
          ],
          "return_type": "void",
          "logic": "Constructor for InstructionScheduler, initializes the zone and instruction sequence."
        },
        {
          "name": "StartBlock",
          "parameters": [
            "RpoNumber rpo"
          ],
          "return_type": "void",
          "logic": "Starts the scheduling process for a basic block with the given RpoNumber."
        },
        {
          "name": "EndBlock",
          "parameters": [
            "RpoNumber rpo"
          ],
          "return_type": "void",
          "logic": "Ends the scheduling process for a basic block with the given RpoNumber."
        },
        {
          "name": "AddInstruction",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Adds a non-terminating instruction to the current basic block's schedule."
        },
        {
          "name": "AddTerminator",
          "parameters": [
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Adds a terminating instruction (e.g., branch, return) to the current basic block's schedule."
        },
        {
          "name": "SchedulerSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Static method to check if the scheduler is supported for the current platform/configuration."
        },
        {
          "name": "GetInstructionFlags",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "int",
          "logic": "Returns flags representing properties of the instruction, such as whether it has side effects, is a load, or may need a deopt check.  This is architecture-independent."
        },
        {
          "name": "GetTargetInstructionFlags",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "int",
          "logic": "Retrieves architecture-specific flags of an instruction."
        },
        {
          "name": "IsBarrier",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction is a barrier, meaning it cannot be reordered across."
        },
        {
          "name": "HasSideEffect",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction has side effects (e.g., memory store, function call)."
        },
        {
          "name": "IsLoadOperation",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction is a memory load operation."
        },
        {
          "name": "CanTrap",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction can trap or cause a deoptimization."
        },
        {
          "name": "MayNeedDeoptOrTrapCheck",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction may need a deoptimization or trap check before it executes."
        },
        {
          "name": "DependsOnDeoptOrTrap",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Checks if an instruction depends on a previous deoptimization or trap point and cannot be moved before it."
        },
        {
          "name": "IsFixedRegisterParameter",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "bool",
          "logic": "Identifies nops used as definition points for live-in registers at function entry and must not be moved."
        },
        {
          "name": "ComputeTotalLatencies",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes the total latency for each node in the scheduling graph."
        },
        {
          "name": "GetInstructionLatency",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "int",
          "logic": "Static method that returns the latency for an instruction (number of cycles required)."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with the scheduler."
        },
        {
          "name": "sequence",
          "parameters": [],
          "return_type": "InstructionSequence*",
          "logic": "Returns the instruction sequence associated with the scheduler."
        },
        {
          "name": "random_number_generator",
          "parameters": [],
          "return_type": "base::RandomNumberGenerator*",
          "logic": "Returns the random number generator used for stress testing the scheduler."
        }
      ]
    },
    {
      "name": "ScheduleGraphNode",
      "properties": [
        "instr_",
        "successors_",
        "unscheduled_predecessors_count_",
        "latency_",
        "total_latency_",
        "start_cycle_"
      ],
      "methods": [
        {
          "name": "ScheduleGraphNode",
          "parameters": [
            "Zone* zone",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for ScheduleGraphNode, initializes the instruction and its dependencies."
        },
        {
          "name": "AddSuccessor",
          "parameters": [
            "ScheduleGraphNode* node"
          ],
          "return_type": "void",
          "logic": "Marks the instruction represented by 'node' as a dependency of this one (i.e. the current instruction must be scheduled before 'node')."
        },
        {
          "name": "HasUnscheduledPredecessor",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all the predecessors of this instruction have been scheduled."
        },
        {
          "name": "DropUnscheduledPredecessor",
          "parameters": [],
          "return_type": "void",
          "logic": "Records that we have scheduled one of the predecessors of this node."
        },
        {
          "name": "instruction",
          "parameters": [],
          "return_type": "Instruction*",
          "logic": "Returns the instruction represented by this node."
        },
        {
          "name": "successors",
          "parameters": [],
          "return_type": "ZoneDeque<ScheduleGraphNode*>&",
          "logic": "Returns the successors of this node in the scheduling graph."
        },
        {
          "name": "latency",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the estimated latency of the instruction represented by this node."
        },
        {
          "name": "total_latency",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the total latency of the critical path from this node to the end of the graph."
        },
        {
          "name": "set_total_latency",
          "parameters": [
            "int latency"
          ],
          "return_type": "void",
          "logic": "Sets the total latency of the critical path from this node."
        },
        {
          "name": "start_cycle",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the cycle when this instruction can start execution based on dependencies."
        },
        {
          "name": "set_start_cycle",
          "parameters": [
            "int start_cycle"
          ],
          "return_type": "void",
          "logic": "Sets the cycle when this instruction can start execution."
        }
      ]
    },
    {
      "name": "SchedulingQueueBase",
      "properties": [
        "scheduler_",
        "nodes_"
      ],
      "methods": [
        {
          "name": "SchedulingQueueBase",
          "parameters": [
            "InstructionScheduler* scheduler"
          ],
          "return_type": "void",
          "logic": "Constructor for SchedulingQueueBase, initializes the scheduler and the list of nodes."
        },
        {
          "name": "AddNode",
          "parameters": [
            "ScheduleGraphNode* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the scheduling queue."
        },
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the scheduling queue is empty."
        }
      ]
    },
    {
      "name": "CriticalPathFirstQueue",
      "properties": [],
      "methods": [
        {
          "name": "CriticalPathFirstQueue",
          "parameters": [
            "InstructionScheduler* scheduler"
          ],
          "return_type": "void",
          "logic": "Constructor for CriticalPathFirstQueue. Initializes the base class."
        },
        {
          "name": "PopBestCandidate",
          "parameters": [
            "int cycle"
          ],
          "return_type": "ScheduleGraphNode*",
          "logic": "Pops the best candidate node to schedule (based on critical path) from the queue."
        }
      ]
    },
    {
      "name": "StressSchedulerQueue",
      "properties": [],
      "methods": [
        {
          "name": "StressSchedulerQueue",
          "parameters": [
            "InstructionScheduler* scheduler"
          ],
          "return_type": "void",
          "logic": "Constructor for StressSchedulerQueue. Initializes the base class."
        },
        {
          "name": "PopBestCandidate",
          "parameters": [
            "int cycle"
          ],
          "return_type": "ScheduleGraphNode*",
          "logic": "Pops a random node to schedule from the queue."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "ArchOpcodeFlags",
      "values": [
        "kNoOpcodeFlags",
        "kHasSideEffect",
        "kIsLoadOperation",
        "kMayNeedDeoptOrTrapCheck",
        "kIsBarrier"
      ]
    }
  ]
}