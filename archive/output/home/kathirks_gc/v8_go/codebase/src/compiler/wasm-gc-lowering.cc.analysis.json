{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-gc-lowering.cc",
  "imports": [
    "src/compiler/wasm-gc-lowering.h",
    "src/base/logging.h",
    "src/common/globals.h",
    "src/compiler/access-builder.h",
    "src/compiler/common-operator.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/node-properties.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/compiler/wasm-graph-assembler.h",
    "src/objects/heap-number.h",
    "src/objects/string.h",
    "src/wasm/object-access.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h",
    "src/wasm/wasm-subtyping.h"
  ],
  "classes": [
    {
      "name": "WasmGCLowering",
      "properties": [
        "null_check_strategy_",
        "gasm_",
        "module_",
        "dead_",
        "mcgraph_",
        "source_position_table_"
      ],
      "methods": [
        {
          "name": "WasmGCLowering",
          "parameters": [
            "Editor* editor",
            "MachineGraph* mcgraph",
            "const wasm::WasmModule* module",
            "bool disable_trap_handler",
            "SourcePositionTable* source_position_table"
          ],
          "return_type": "void",
          "logic": "Constructor for WasmGCLowering. Initializes the member variables, including the null check strategy, the WasmGraphAssembler, the WasmModule, and the dead node."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a given node based on its opcode. This is the main dispatch function that handles different WASM GC-related operations (type checks, casts, null checks, struct/array access, string conversions) by calling the appropriate ReduceXXX method."
        },
        {
          "name": "Null",
          "parameters": [
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Returns a node representing a null value of the given WASM value type. It loads the appropriate null root (kWasmNull or kNullValue) from the isolate data."
        },
        {
          "name": "IsNull",
          "parameters": [
            "Node* object",
            "wasm::ValueType type"
          ],
          "return_type": "Node*",
          "logic": "Generates a node that checks if a given object is null. It compares the object with either the kWasmNull or kNullValue based on the specified type."
        },
        {
          "name": "ReduceWasmTypeCheck",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmTypeCheck node. Generates code to check if an object is of the specified type using RTT (Run-Time Type) information. It handles null checks, Smi checks, and RTT equality checks. If the type is not final, it checks supertypes."
        },
        {
          "name": "ReduceWasmTypeCheckAbstract",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmTypeCheckAbstract node. This handles type checks based on abstract heap types. It involves checks for null, i31, and instance types (array, struct, string)."
        },
        {
          "name": "ReduceWasmTypeCast",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmTypeCast node. This node implements type casting, which will throw a trap if the cast is not valid. Similar to ReduceWasmTypeCheck, but generates trap instructions instead of boolean values."
        },
        {
          "name": "ReduceWasmTypeCastAbstract",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmTypeCastAbstract node. Similar to ReduceWasmTypeCheckAbstract, but implements type casting with potential traps."
        },
        {
          "name": "ReduceAssertNotNull",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an kAssertNotNull node. It inserts a null check that traps if the input object is null. It handles different strategies for null checking (explicit vs. trap handler)."
        },
        {
          "name": "ReduceNull",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kNull node. Returns a node representing the null value of the specified type."
        },
        {
          "name": "ReduceIsNull",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kIsNull node. Returns a node indicating whether a given object is null."
        },
        {
          "name": "ReduceIsNotNull",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kIsNotNull node. Returns a node indicating whether a given object is not null."
        },
        {
          "name": "ReduceRttCanon",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kRttCanon node. Loads the canonical RTT (Run-Time Type) object from the trusted instance data for a given type index."
        },
        {
          "name": "ReduceTypeGuard",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kTypeGuard node. Replaces the node with its input alias."
        },
        {
          "name": "ReduceWasmAnyConvertExtern",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmAnyConvertExtern node. Converts a wasm anyref to an externref. This involves handling null, Smi, and HeapNumber values, canonicalizing Smis, and converting HeapNumbers to Smis if possible."
        },
        {
          "name": "ReduceWasmExternConvertAny",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmExternConvertAny node. Converts a wasm externref to an anyref. This involves converting null externrefs to null anyrefs."
        },
        {
          "name": "ReduceWasmStructGet",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmStructGet node. Loads a field from a WASM struct. Handles null checks (explicit or implicit) and loads the field based on its mutability."
        },
        {
          "name": "ReduceWasmStructSet",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmStructSet node. Sets a field in a WASM struct. Handles null checks (explicit or implicit) and stores the value based on its mutability."
        },
        {
          "name": "ReduceWasmArrayGet",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmArrayGet node. Loads an element from a WASM array. Calculates the element offset and loads the value."
        },
        {
          "name": "ReduceWasmArraySet",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmArraySet node. Sets an element in a WASM array. Calculates the element offset and stores the value."
        },
        {
          "name": "ReduceWasmArrayLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmArrayLength node. Loads the length of a WASM array. Handles null checks and loads the length from the appropriate offset."
        },
        {
          "name": "ReduceWasmArrayInitializeLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kWasmArrayInitializeLength node. Initializes the length of a WASM array during array creation."
        },
        {
          "name": "ReduceStringAsWtf16",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kStringAsWtf16 node. Converts a string to a WTF-16 encoded string. If the string is not already a sequential string, it calls the kWasmStringAsWtf16 builtin."
        },
        {
          "name": "ReduceStringPrepareForGetCodeunit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a kStringPrepareForGetCodeunit node. Prepares a string for accessing its code units. Handles different string types (thin, cons, sliced, external, sequential) and computes the final offset for accessing the code unit."
        },
        {
          "name": "UpdateSourcePosition",
          "parameters": [
            "Node* new_node",
            "Node* old_node"
          ],
          "return_type": "void",
          "logic": "Updates the source position of a new node based on the source position of an old node."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "TaggedOffset",
      "parameters": [
        "FieldAccess access"
      ],
      "return_type": "int",
      "logic": "Calculates the tagged offset for a field access. Ensures the base is tagged and converts the offset to a tagged offset using wasm::ObjectAccess::ToTagged."
    }
  ]
}