{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/common-operator-reducer.cc",
  "imports": [
    "src/compiler/common-operator-reducer.h",
    "algorithm",
    "optional",
    "src/compiler/common-operator.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/opcodes.h",
    "src/compiler/turbofan-graph.h"
  ],
  "classes": [
    {
      "name": "CommonOperatorReducer",
      "properties": [
        "graph_",
        "broker_",
        "common_",
        "machine_",
        "dead_",
        "zone_",
        "default_branch_semantics_"
      ],
      "methods": [
        {
          "name": "CommonOperatorReducer",
          "parameters": [
            "Editor* editor",
            "TFGraph* graph",
            "JSHeapBroker* broker",
            "CommonOperatorBuilder* common",
            "MachineOperatorBuilder* machine",
            "Zone* temp_zone",
            "BranchSemantics default_branch_semantics"
          ],
          "return_type": "void",
          "logic": "Constructor for the CommonOperatorReducer class. Initializes the member variables."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a given node based on its opcode. Dispatches to specific reduction functions for different operators like Branch, DeoptimizeIf/Unless, Merge, EffectPhi, Phi, Return, Select, Switch, StaticAssert and TrapConditional. Returns NoChange() if no reduction is possible."
        },
        {
          "name": "DecideCondition",
          "parameters": [
            "Node* const cond",
            "BranchSemantics branch_semantics"
          ],
          "return_type": "Decision",
          "logic": "Decides whether a condition is true, false, or unknown based on its opcode. Handles Int32Constant and HeapConstant opcodes."
        },
        {
          "name": "ReduceBranch",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Branch node. Handles boolean not and constant conditions. Replaces IfTrue/IfFalse uses with appropriate control flow or dead nodes."
        },
        {
          "name": "ReduceDeoptimizeConditional",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a DeoptimizeIf or DeoptimizeUnless node. Handles boolean not and constant conditions. Replaces the node with dead or a deoptimization based on condition."
        },
        {
          "name": "ReduceMerge",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Merge node. Checks for unused diamonds (IfTrue/IfFalse pairs from a branch) and replaces the merge with the control input of the branch if found."
        },
        {
          "name": "ReduceEffectPhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an EffectPhi node. Replaces the EffectPhi with its single input effect if all inputs are the same. Revisits the merge node."
        },
        {
          "name": "ReducePhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Phi node. Replaces the Phi with its single input value if all inputs are the same. Tries to identify and simplify the pattern for absolute value calculations (e.g., `0 < v ? v : 0 - v`) to `fabs(v)`. Revisits the merge node."
        },
        {
          "name": "ReduceReturn",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Return node. Removes checkpoints from effect chain. Pushes Return nodes through merges by creating new Return nodes for each merge input and connecting them to the end node."
        },
        {
          "name": "ReduceSelect",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Select node. Replaces the Select with the appropriate input value based on the condition. Tries to identify and simplify absolute value patterns."
        },
        {
          "name": "ReduceSwitch",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Switch node. Matches the switched value against IfValue cases and replaces the matching case with the control input. If no case matches, uses the IfDefault."
        },
        {
          "name": "ReduceStaticAssert",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StaticAssert node. Removes StaticAssert when the condition is true, otherwise NoChange is returned."
        },
        {
          "name": "ReduceTrapConditional",
          "parameters": [
            "Node* trap"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TrapIf/TrapUnless node. If the condition is met the code will always trap and connects trap to graph()->end(), else the trap is removed."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "Operator const* op",
            "Node* a"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to change the operator of a node and its first input.  Returns Changed(node)."
        },
        {
          "name": "Change",
          "parameters": [
            "Node* node",
            "Operator const* op",
            "Node* a",
            "Node* b"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to change the operator of a node and its first two inputs. Returns Changed(node)."
        }
      ]
    }
  ],
  "functions": []
}