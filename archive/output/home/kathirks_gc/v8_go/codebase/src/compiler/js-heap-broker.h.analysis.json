{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-heap-broker.h",
  "imports": [
    "<optional>",
    "src/base/compiler-specific.h",
    "src/base/macros.h",
    "src/base/platform/mutex.h",
    "src/codegen/optimized-compilation-info.h",
    "src/common/globals.h",
    "src/compiler/access-info.h",
    "src/compiler/feedback-source.h",
    "src/compiler/heap-refs.h",
    "src/compiler/processed-feedback.h",
    "src/compiler/refs-map.h",
    "src/execution/local-isolate.h",
    "src/handles/handles.h",
    "src/handles/persistent-handles.h",
    "src/heap/local-heap.h",
    "src/heap/parked-scope.h",
    "src/objects/code-kind.h",
    "src/objects/feedback-vector.h",
    "src/objects/objects.h",
    "src/objects/tagged.h",
    "src/roots/roots.h",
    "src/utils/address-map.h",
    "src/utils/identity-map.h",
    "src/utils/ostreams.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "PropertyAccessTarget",
      "properties": [
        "MapRef map",
        "NameRef name",
        "AccessMode mode"
      ],
      "methods": []
    },
    {
      "name": "PropertyAccessTarget::Hash",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const PropertyAccessTarget& pair"
          ],
          "return_type": "size_t",
          "logic": "Calculates a hash value for a PropertyAccessTarget based on its map, name and access mode."
        }
      ]
    },
    {
      "name": "PropertyAccessTarget::Equal",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const PropertyAccessTarget& lhs",
            "const PropertyAccessTarget& rhs"
          ],
          "return_type": "bool",
          "logic": "Compares two PropertyAccessTarget objects for equality, checking their map, name and access mode."
        }
      ]
    },
    {
      "name": "JSHeapBroker",
      "properties": [
        "Isolate* const isolate_",
        "Zone* const zone_",
        "OptionalNativeContextRef target_native_context_",
        "RefsMap* refs_",
        "RootIndexMap root_index_map_",
        "ZoneUnorderedSet<IndirectHandle<JSObject>, IndirectHandle<JSObject>::hash,\n                   IndirectHandle<JSObject>::equal_to>\n      array_and_object_prototypes_",
        "BrokerMode mode_",
        "bool const tracing_enabled_",
        "CodeKind const code_kind_",
        "std::unique_ptr<PersistentHandles> ph_",
        "LocalIsolate* local_isolate_ = nullptr",
        "CanonicalHandlesMap* canonical_handles_",
        "unsigned trace_indentation_ = 0",
        "ZoneUnorderedMap<FeedbackSource, ProcessedFeedback const*,\n                   FeedbackSource::Hash, FeedbackSource::Equal>\n      feedback_",
        "ZoneUnorderedMap<PropertyAccessTarget, PropertyAccessInfo,\n                   PropertyAccessTarget::Hash, PropertyAccessTarget::Equal>\n      property_access_infos_",
        "CompilationDependencies* dependencies_ = nullptr",
        "int map_updater_mutex_depth_ = 0",
        "int boilerplate_migration_mutex_depth_ = 0"
      ],
      "methods": [
        {
          "name": "JSHeapBroker",
          "parameters": [
            "Isolate* isolate",
            "Zone* broker_zone",
            "bool tracing_enabled",
            "CodeKind code_kind"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSHeapBroker class. Initializes the broker with the given isolate, zone, tracing enablement, and code kind."
        },
        {
          "name": "JSHeapBroker",
          "parameters": [
            "Isolate* isolate",
            "Zone* broker_zone"
          ],
          "return_type": "void",
          "logic": "Constructor for use in tests, with default values for some arguments."
        },
        {
          "name": "~JSHeapBroker",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the JSHeapBroker class."
        },
        {
          "name": "target_native_context",
          "parameters": [],
          "return_type": "NativeContextRef",
          "logic": "Returns the compilation target's native context."
        },
        {
          "name": "SetTargetNativeContextRef",
          "parameters": [
            "DirectHandle<NativeContext> native_context"
          ],
          "return_type": "void",
          "logic": "Sets the target native context."
        },
        {
          "name": "InitializeAndStartSerializing",
          "parameters": [
            "DirectHandle<NativeContext> native_context"
          ],
          "return_type": "void",
          "logic": "Initializes the broker and starts the serialization process."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with the broker."
        },
        {
          "name": "cage_base",
          "parameters": [],
          "return_type": "PtrComprCageBase",
          "logic": "Returns the pointer compression cage base value."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with the broker."
        },
        {
          "name": "tracing_enabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether tracing is enabled for the broker."
        },
        {
          "name": "feedback_nexus_config",
          "parameters": [],
          "return_type": "NexusConfig",
          "logic": "Returns the feedback nexus configuration."
        },
        {
          "name": "mode",
          "parameters": [],
          "return_type": "BrokerMode",
          "logic": "Returns the current mode of the broker."
        },
        {
          "name": "StopSerializing",
          "parameters": [],
          "return_type": "void",
          "logic": "Stops the serialization process."
        },
        {
          "name": "Retire",
          "parameters": [],
          "return_type": "void",
          "logic": "Retires the broker."
        },
        {
          "name": "SerializingAllowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if serialization is allowed."
        },
        {
          "name": "Current",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Gets the current heap broker for this thread. Only for use in DCHECKs."
        },
        {
          "name": "AttachLocalIsolate",
          "parameters": [
            "OptimizedCompilationInfo* info",
            "LocalIsolate* local_isolate"
          ],
          "return_type": "void",
          "logic": "Attaches a local isolate to the broker."
        },
        {
          "name": "DetachLocalIsolate",
          "parameters": [
            "OptimizedCompilationInfo* info"
          ],
          "return_type": "void",
          "logic": "Detaches the local isolate from the broker."
        },
        {
          "name": "AttachLocalIsolateForMaglev",
          "parameters": [
            "maglev::MaglevCompilationInfo* info",
            "LocalIsolate* local_isolate"
          ],
          "return_type": "void",
          "logic": "Attaches a local isolate to the broker specifically for Maglev compilation."
        },
        {
          "name": "DetachLocalIsolateForMaglev",
          "parameters": [
            "maglev::MaglevCompilationInfo* info"
          ],
          "return_type": "void",
          "logic": "Detaches a local isolate from the broker specifically for Maglev compilation."
        },
        {
          "name": "AttachCompilationInfo",
          "parameters": [
            "CompilationInfoT* info"
          ],
          "return_type": "void",
          "logic": "Attaches the canonical handles map from the compilation info to the broker."
        },
        {
          "name": "StackHasOverflowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the stack has overflowed."
        },
        {
          "name": "PrintRefsAnalysis",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the refs analysis (DEBUG only)."
        },
        {
          "name": "GetRootHandle",
          "parameters": [
            "Tagged<Object> object"
          ],
          "return_type": "DirectHandle<Object>",
          "logic": "Returns the handle from root index table for read only heap objects."
        },
        {
          "name": "GetOrCreateData",
          "parameters": [
            "Handle<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Gets or creates the object data associated with the given handle."
        },
        {
          "name": "GetOrCreateData",
          "parameters": [
            "Tagged<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Gets or creates the object data associated with the given tagged object."
        },
        {
          "name": "TryGetOrCreateData",
          "parameters": [
            "Handle<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Tries to get or create the object data associated with the given handle."
        },
        {
          "name": "TryGetOrCreateData",
          "parameters": [
            "Tagged<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Tries to get or create the object data associated with the given tagged object."
        },
        {
          "name": "IsArrayOrObjectPrototype",
          "parameters": [
            "JSObjectRef object"
          ],
          "return_type": "bool",
          "logic": "Checks if the object is any native context's %ArrayPrototype% or %ObjectPrototype%."
        },
        {
          "name": "IsArrayOrObjectPrototype",
          "parameters": [
            "Handle<JSObject> object"
          ],
          "return_type": "bool",
          "logic": "Checks if the object is any native context's %ArrayPrototype% or %ObjectPrototype%."
        },
        {
          "name": "HasFeedback",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "bool",
          "logic": "Checks if there is feedback data for a given FeedbackSource."
        },
        {
          "name": "SetFeedback",
          "parameters": [
            "FeedbackSource const& source",
            "ProcessedFeedback const* feedback"
          ],
          "return_type": "void",
          "logic": "Sets feedback data for a given FeedbackSource."
        },
        {
          "name": "GetFeedbackSlotKind",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "FeedbackSlotKind",
          "logic": "Gets the FeedbackSlotKind for a given FeedbackSource."
        },
        {
          "name": "ProcessFeedbackMapsForElementAccess",
          "parameters": [
            "ZoneVector<MapRef>& maps",
            "KeyedAccessMode const& keyed_mode",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Processes feedback maps for element access."
        },
        {
          "name": "GetFeedbackForBinaryOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "BinaryOperationHint",
          "logic": "Gets feedback for binary operation."
        },
        {
          "name": "GetFeedbackForCompareOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "CompareOperationHint",
          "logic": "Gets feedback for compare operation."
        },
        {
          "name": "GetFeedbackForForIn",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ForInHint",
          "logic": "Gets feedback for for-in loop."
        },
        {
          "name": "GetFeedbackForCall",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets the processed feedback data for a call site."
        },
        {
          "name": "GetFeedbackForGlobalAccess",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets the processed feedback data for a global variable access."
        },
        {
          "name": "GetFeedbackForInstanceOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback data for instanceOf operation."
        },
        {
          "name": "GetFeedbackForTypeOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "TypeOfFeedback::Result",
          "logic": "Gets feedback data for typeOf operation."
        },
        {
          "name": "GetFeedbackForArrayOrObjectLiteral",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for Array/Object Literal."
        },
        {
          "name": "GetFeedbackForRegExpLiteral",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for RegExp Literal."
        },
        {
          "name": "GetFeedbackForTemplateObject",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for Template Object."
        },
        {
          "name": "GetFeedbackForPropertyAccess",
          "parameters": [
            "FeedbackSource const& source",
            "AccessMode mode",
            "OptionalNameRef static_name"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback data for a property access."
        },
        {
          "name": "ProcessFeedbackForBinaryOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for a binary operation."
        },
        {
          "name": "ProcessFeedbackForCompareOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for a compare operation."
        },
        {
          "name": "ProcessFeedbackForForIn",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for a for-in loop."
        },
        {
          "name": "ProcessFeedbackForTypeOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback data for typeOf operation."
        },
        {
          "name": "FeedbackIsInsufficient",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "bool",
          "logic": "Checks if the feedback for the given source is insufficient."
        },
        {
          "name": "GetNameFeedback",
          "parameters": [
            "FeedbackNexus const& nexus"
          ],
          "return_type": "OptionalNameRef",
          "logic": "Gets the name feedback for the specified FeedbackNexus."
        },
        {
          "name": "GetPropertyAccessInfo",
          "parameters": [
            "MapRef map",
            "NameRef name",
            "AccessMode access_mode"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Retrieves property access information based on the map, name, and access mode."
        },
        {
          "name": "GetTypedArrayStringTag",
          "parameters": [
            "ElementsKind kind"
          ],
          "return_type": "StringRef",
          "logic": "Gets the string tag for a typed array kind."
        },
        {
          "name": "IsMainThread",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the current thread is the main thread."
        },
        {
          "name": "local_isolate",
          "parameters": [],
          "return_type": "LocalIsolate*",
          "logic": "Returns the local isolate associated with the broker."
        },
        {
          "name": "local_isolate_or_isolate",
          "parameters": [],
          "return_type": "LocalIsolate*",
          "logic": "Returns either the local isolate or the isolate if no local isolate is attached."
        },
        {
          "name": "FindRootIndex",
          "parameters": [
            "HeapObjectRef object"
          ],
          "return_type": "std::optional<RootIndex>",
          "logic": "Finds the root index of a heap object if it is a root."
        },
        {
          "name": "CanonicalPersistentHandle",
          "parameters": [
            "Tagged<T> object"
          ],
          "return_type": "Handle<T>",
          "logic": "Returns the corresponding canonical persistent handle for {object}. Creates one if it doesn't exist."
        },
        {
          "name": "CanonicalPersistentHandle",
          "parameters": [
            "Handle<T> object"
          ],
          "return_type": "Handle<T>",
          "logic": "Returns the corresponding canonical persistent handle for {object}. Creates one if it doesn't exist. Handle overload."
        },
        {
          "name": "IsCanonicalHandle",
          "parameters": [
            "Handle<T> handle"
          ],
          "return_type": "bool",
          "logic": "Checks if a canonical persistent handle for {object} exists."
        },
        {
          "name": "Trace",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns a string used for tracing."
        },
        {
          "name": "IncrementTracingIndentation",
          "parameters": [],
          "return_type": "void",
          "logic": "Increments the tracing indentation level."
        },
        {
          "name": "DecrementTracingIndentation",
          "parameters": [],
          "return_type": "void",
          "logic": "Decrements the tracing indentation level."
        },
        {
          "name": "ObjectMayBeUninitialized",
          "parameters": [
            "DirectHandle<Object> object"
          ],
          "return_type": "bool",
          "logic": "Checks if an object may be uninitialized."
        },
        {
          "name": "ObjectMayBeUninitialized",
          "parameters": [
            "Tagged<Object> object"
          ],
          "return_type": "bool",
          "logic": "Checks if an object may be uninitialized."
        },
        {
          "name": "ObjectMayBeUninitialized",
          "parameters": [
            "Tagged<HeapObject> object"
          ],
          "return_type": "bool",
          "logic": "Checks if an object may be uninitialized."
        },
        {
          "name": "set_dependencies",
          "parameters": [
            "CompilationDependencies* dependencies"
          ],
          "return_type": "void",
          "logic": "Sets the compilation dependencies."
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the compilation dependencies."
        }
      ]
    },
    {
      "name": "JSHeapBroker::RecursiveMutexGuardIfNeeded",
      "properties": [],
      "methods": [
        {
          "name": "RecursiveMutexGuardIfNeeded",
          "parameters": [
            "LocalIsolate* local_isolate",
            "base::Mutex* mutex",
            "int* mutex_depth_address"
          ],
          "return_type": "void",
          "logic": "Constructor that potentially locks the mutex if it is the first occurrence."
        },
        {
          "name": "~RecursiveMutexGuardIfNeeded",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor that unlocks the mutex if it was locked."
        }
      ]
    },
    {
      "name": "JSHeapBroker::MapUpdaterGuardIfNeeded",
      "properties": [],
      "methods": [
        {
          "name": "MapUpdaterGuardIfNeeded",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor that potentially locks the MapUpdater mutex of the broker."
        }
      ]
    },
    {
      "name": "JSHeapBroker::BoilerplateMigrationGuardIfNeeded",
      "properties": [],
      "methods": [
        {
          "name": "BoilerplateMigrationGuardIfNeeded",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor that potentially locks the BoilerplateMigration mutex of the broker."
        }
      ]
    },
    {
      "name": "CurrentHeapBrokerScope",
      "properties": [
        "JSHeapBroker* const prev_broker_"
      ],
      "methods": [
        {
          "name": "CurrentHeapBrokerScope",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor, stores the current heap broker in a thread local."
        },
        {
          "name": "~CurrentHeapBrokerScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor, restores the previous heap broker from the thread local."
        }
      ]
    },
    {
      "name": "TraceScope",
      "properties": [
        "JSHeapBroker* const broker_"
      ],
      "methods": [
        {
          "name": "TraceScope",
          "parameters": [
            "JSHeapBroker* broker",
            "const char* label"
          ],
          "return_type": "void",
          "logic": "Constructor, enables a tracing scope."
        },
        {
          "name": "TraceScope",
          "parameters": [
            "JSHeapBroker* broker",
            "ObjectData* data",
            "const char* label"
          ],
          "return_type": "void",
          "logic": "Constructor, enables a tracing scope for a particular object."
        },
        {
          "name": "TraceScope",
          "parameters": [
            "JSHeapBroker* broker",
            "void* subject",
            "const char* label"
          ],
          "return_type": "void",
          "logic": "Constructor, enables a tracing scope for a subject."
        },
        {
          "name": "~TraceScope",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor, disables the tracing scope."
        }
      ]
    },
    {
      "name": "UnparkedScopeIfNeeded",
      "properties": [
        "std::optional<UnparkedScope> unparked_scope"
      ],
      "methods": [
        {
          "name": "UnparkedScopeIfNeeded",
          "parameters": [
            "JSHeapBroker* broker",
            "bool extra_condition"
          ],
          "return_type": "void",
          "logic": "Constructor, unparks the LocalHeap if necessary."
        }
      ]
    },
    {
      "name": "JSHeapBrokerScopeForTesting",
      "properties": [
        "std::unique_ptr<CanonicalHandlesMap> canonical_handles_",
        "JSHeapBroker* const broker_"
      ],
      "methods": [
        {
          "name": "JSHeapBrokerScopeForTesting",
          "parameters": [
            "JSHeapBroker* broker",
            "Isolate* isolate",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor, sets up scope for testing with a pre-allocated CanonicalHandlesMap."
        },
        {
          "name": "JSHeapBrokerScopeForTesting",
          "parameters": [
            "JSHeapBroker* broker",
            "std::unique_ptr<CanonicalHandlesMap> canonical_handles"
          ],
          "return_type": "void",
          "logic": "Constructor, sets up scope for testing using a provided CanonicalHandlesMap."
        },
        {
          "name": "~JSHeapBrokerScopeForTesting",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor, cleans up the testing scope by setting the canonical handles map back to null."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "ObjectRef ref"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print an ObjectRef to an output stream."
    },
    {
      "name": "TryMakeRef",
      "parameters": [
        "JSHeapBroker* broker",
        "ObjectData* data"
      ],
      "return_type": "OptionalRef<typename ref_traits<T>::ref_type>",
      "logic": "Creates an optional object reference from ObjectData if available, otherwise returns an empty optional."
    },
    {
      "name": "TryMakeRef",
      "parameters": [
        "JSHeapBroker* broker",
        "Tagged<T> object",
        "GetOrCreateDataFlags flags"
      ],
      "return_type": "OptionalRef<typename ref_traits<T>::ref_type>",
      "logic": "Creates an optional object reference from a tagged object, attempts to retrieve or create the associated ObjectData."
    },
    {
      "name": "TryMakeRef",
      "parameters": [
        "JSHeapBroker* broker",
        "Handle<T> object",
        "GetOrCreateDataFlags flags"
      ],
      "return_type": "OptionalRef<typename ref_traits<T>::ref_type>",
      "logic": "Creates an optional object reference from a handle, attempts to retrieve or create the associated ObjectData."
    },
    {
      "name": "MakeRef",
      "parameters": [
        "JSHeapBroker* broker",
        "Tagged<T> object"
      ],
      "return_type": "typename ref_traits<T>::ref_type",
      "logic": "Creates an object reference from a tagged object, retrieving the associated ObjectData. Crashes if the data doesn't exist and cannot be created."
    },
    {
      "name": "MakeRef",
      "parameters": [
        "JSHeapBroker* broker",
        "Handle<T> object"
      ],
      "return_type": "typename ref_traits<T>::ref_type",
      "logic": "Creates an object reference from a handle, retrieving the associated ObjectData. Crashes if the data doesn't exist and cannot be created."
    },
    {
      "name": "MakeRefAssumeMemoryFence",
      "parameters": [
        "JSHeapBroker* broker",
        "Tagged<T> object"
      ],
      "return_type": "typename ref_traits<T>::ref_type",
      "logic": "Creates an object reference from a tagged object, retrieving the associated ObjectData assuming a memory fence is in place."
    },
    {
      "name": "MakeRefAssumeMemoryFence",
      "parameters": [
        "JSHeapBroker* broker",
        "Handle<T> object"
      ],
      "return_type": "typename ref_traits<T>::ref_type",
      "logic": "Creates an object reference from a handle, retrieving the associated ObjectData assuming a memory fence is in place."
    }
  ]
}