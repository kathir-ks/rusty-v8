{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/stack-check-lowering-reducer.h",
  "imports": [
    "src/compiler/globals.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h"
  ],
  "classes": [
    {
      "name": "StackCheckLoweringReducer",
      "properties": [
        "isolate_",
        "Next (template parameter)"
      ],
      "methods": [
        {
          "name": "REDUCE(JSStackCheck)",
          "parameters": [
            "V<Context> context",
            "OptionalV<FrameState> frame_state",
            "JSStackCheckOp::Kind kind"
          ],
          "return_type": "V<None>",
          "logic": "Lowers JS stack checks based on the `kind`.  It generates code to call the runtime stack guard if the stack pointer is too close to the stack limit.  It handles function entry, builtin entry, and loop stack checks differently, each involving a stack limit check and a potential call to a runtime function if the limit is exceeded. Returns `V<None>::Invalid()` to indicate that the node was successfully reduced."
        },
        {
          "name": "REDUCE(WasmStackCheck)",
          "parameters": [
            "WasmStackCheckOp::Kind kind"
          ],
          "return_type": "V<None>",
          "logic": "Lowers WebAssembly stack checks based on the `kind`. If it is a leaf function, it simply returns. It checks for experimental growable stacks and defers to the Next reducer. Otherwise, it generates code to call the runtime stack guard if the stack pointer is too close to the stack limit, similarly to `REDUCE(JSStackCheck)`. It specifically uses `kWasmStackGuard` for the call and returns `V<None>::Invalid()` to indicate that the node was successfully reduced."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with the reducer. Lazily initializes the `isolate_` member if it's null."
        }
      ]
    }
  ],
  "functions": []
}