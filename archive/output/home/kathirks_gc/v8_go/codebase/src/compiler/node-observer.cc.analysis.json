{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/node-observer.cc",
  "imports": [
    "src/compiler/node-observer.h",
    "src/compiler/node-properties.h"
  ],
  "classes": [
    {
      "name": "ObservableNodeState",
      "properties": [
        "id_",
        "op_",
        "type_"
      ],
      "methods": [
        {
          "name": "ObservableNodeState",
          "parameters": [
            "const Node* node",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for ObservableNodeState. Initializes the id_, op_, and type_ members based on the provided Node object.  It gets the type of the node using NodeProperties::GetTypeOrAny(node)."
        }
      ]
    },
    {
      "name": "ObserveNodeManager",
      "properties": [],
      "methods": [
        {
          "name": "StartObserving",
          "parameters": [
            "Node* node",
            "NodeObserver* observer"
          ],
          "return_type": "void",
          "logic": "Starts observing a given node with a given observer. Checks if the node is already being observed, sets the observer to have observed changes, calls OnNodeCreated on the observer, and if the observation should continue, creates a NodeObservation object and stores it in the observations_ map."
        },
        {
          "name": "OnNodeChanged",
          "parameters": [
            "const char* reducer_name",
            "const Node* old_node",
            "const Node* new_node"
          ],
          "return_type": "void",
          "logic": "Called when a node changes. Checks if the old node is being observed. If so, it updates the stored ObservableNodeState. Calls OnNodeChanged on the observer associated with the old node. If the observation should stop, removes the node from the observations_ map. If the node id has changed, updates the key to the new node id."
        }
      ]
    }
  ],
  "functions": []
}