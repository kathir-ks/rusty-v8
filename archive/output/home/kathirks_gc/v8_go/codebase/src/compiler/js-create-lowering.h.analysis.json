{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-create-lowering.h",
  "imports": [
    "<optional>",
    "src/base/compiler-specific.h",
    "src/common/globals.h",
    "src/compiler/graph-reducer.h"
  ],
  "classes": [
    {
      "name": "JSCreateLowering",
      "properties": [
        "jsgraph_",
        "broker_",
        "zone_"
      ],
      "methods": [
        {
          "name": "JSCreateLowering",
          "parameters": [
            "Editor* editor",
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSCreateLowering class. Initializes the member variables."
        },
        {
          "name": "~JSCreateLowering",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the JSCreateLowering class."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Main reduction method, dispatches to specific ReduceJSCreate* methods based on the node's operator."
        },
        {
          "name": "ReduceJSCreate",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a generic JSCreate operator."
        },
        {
          "name": "ReduceJSCreateArguments",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateArguments operator."
        },
        {
          "name": "ReduceJSCreateArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateArray operator."
        },
        {
          "name": "ReduceJSCreateArrayIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateArrayIterator operator."
        },
        {
          "name": "ReduceJSCreateAsyncFunctionObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateAsyncFunctionObject operator."
        },
        {
          "name": "ReduceJSCreateCollectionIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateCollectionIterator operator."
        },
        {
          "name": "ReduceJSCreateBoundFunction",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateBoundFunction operator."
        },
        {
          "name": "ReduceJSCreateClosure",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateClosure operator."
        },
        {
          "name": "ReduceJSCreateIterResultObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateIterResultObject operator."
        },
        {
          "name": "ReduceJSCreateStringIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateStringIterator operator."
        },
        {
          "name": "ReduceJSCreateKeyValueArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateKeyValueArray operator."
        },
        {
          "name": "ReduceJSCreatePromise",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreatePromise operator."
        },
        {
          "name": "ReduceJSCreateLiteralArrayOrObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateLiteralArrayOrObject operator."
        },
        {
          "name": "ReduceJSCreateEmptyLiteralObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateEmptyLiteralObject operator."
        },
        {
          "name": "ReduceJSCreateEmptyLiteralArray",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateEmptyLiteralArray operator."
        },
        {
          "name": "ReduceJSCreateLiteralRegExp",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateLiteralRegExp operator."
        },
        {
          "name": "ReduceJSCreateFunctionContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateFunctionContext operator."
        },
        {
          "name": "ReduceJSCreateWithContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateWithContext operator."
        },
        {
          "name": "ReduceJSCreateCatchContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateCatchContext operator."
        },
        {
          "name": "ReduceJSCreateBlockContext",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateBlockContext operator."
        },
        {
          "name": "ReduceJSCreateGeneratorObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateGeneratorObject operator."
        },
        {
          "name": "ReduceJSGetTemplateObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSGetTemplateObject operator."
        },
        {
          "name": "ReduceNewArray",
          "parameters": [
            "Node* node",
            "Node* length",
            "MapRef initial_map",
            "ElementsKind elements_kind",
            "AllocationType allocation",
            "const SlackTrackingPrediction& slack_tracking_prediction"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NewArray operator with length as a Node."
        },
        {
          "name": "ReduceNewArray",
          "parameters": [
            "Node* node",
            "Node* length",
            "int capacity",
            "MapRef initial_map",
            "ElementsKind elements_kind",
            "AllocationType allocation",
            "const SlackTrackingPrediction& slack_tracking_prediction"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NewArray operator with a capacity and length."
        },
        {
          "name": "ReduceNewArray",
          "parameters": [
            "Node* node",
            "std::vector<Node*> values",
            "MapRef initial_map",
            "ElementsKind elements_kind",
            "AllocationType allocation",
            "const SlackTrackingPrediction& slack_tracking_prediction"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NewArray operator with initial values."
        },
        {
          "name": "ReduceJSCreateObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateObject operator."
        },
        {
          "name": "ReduceJSCreateStringWrapper",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSCreateStringWrapper operator."
        },
        {
          "name": "TryAllocateArguments",
          "parameters": [
            "Node* effect",
            "Node* control",
            "FrameState frame_state"
          ],
          "return_type": "Node*",
          "logic": "Tries to allocate Arguments object inline. Returns nullptr if too many arguments."
        },
        {
          "name": "TryAllocateRestArguments",
          "parameters": [
            "Node* effect",
            "Node* control",
            "FrameState frame_state",
            "int start_index"
          ],
          "return_type": "Node*",
          "logic": "Tries to allocate RestArguments object inline. Returns nullptr if too many arguments."
        },
        {
          "name": "TryAllocateAliasedArguments",
          "parameters": [
            "Node* effect",
            "Node* control",
            "FrameState frame_state",
            "Node* context",
            "SharedFunctionInfoRef shared",
            "bool* has_aliased_arguments"
          ],
          "return_type": "Node*",
          "logic": "Tries to allocate aliased Arguments object inline using FrameState. Returns nullptr if too many arguments."
        },
        {
          "name": "TryAllocateAliasedArguments",
          "parameters": [
            "Node* effect",
            "Node* control",
            "Node* context",
            "Node* arguments_length",
            "SharedFunctionInfoRef shared",
            "bool* has_aliased_arguments"
          ],
          "return_type": "Node*",
          "logic": "Tries to allocate aliased Arguments object inline. Returns nullptr if too many arguments."
        },
        {
          "name": "TryAllocateFastLiteral",
          "parameters": [
            "Node* effect",
            "Node* control",
            "JSObjectRef boilerplate",
            "AllocationType allocation",
            "int max_depth",
            "int* max_properties"
          ],
          "return_type": "std::optional<Node*>",
          "logic": "Tries to allocate a fast literal. Returns std::nullopt if allocation fails."
        },
        {
          "name": "TryAllocateFastLiteralElements",
          "parameters": [
            "Node* effect",
            "Node* control",
            "JSObjectRef boilerplate",
            "AllocationType allocation",
            "int max_depth",
            "int* max_properties"
          ],
          "return_type": "std::optional<Node*>",
          "logic": "Tries to allocate a fast literal elements. Returns std::nullopt if allocation fails."
        },
        {
          "name": "AllocateElements",
          "parameters": [
            "Node* effect",
            "Node* control",
            "ElementsKind elements_kind",
            "int capacity",
            "AllocationType allocation"
          ],
          "return_type": "Node*",
          "logic": "Allocates elements of a given kind and capacity."
        },
        {
          "name": "AllocateElements",
          "parameters": [
            "Node* effect",
            "Node* control",
            "ElementsKind elements_kind",
            "Node* capacity_and_length"
          ],
          "return_type": "Node*",
          "logic": "Allocates elements of a given kind with capacity and length."
        },
        {
          "name": "AllocateElements",
          "parameters": [
            "Node* effect",
            "Node* control",
            "ElementsKind elements_kind",
            "std::vector<Node*> const& values",
            "AllocationType allocation"
          ],
          "return_type": "Node*",
          "logic": "Allocates elements of a given kind from the provided values."
        },
        {
          "name": "AllocateLiteralRegExp",
          "parameters": [
            "Node* effect",
            "Node* control",
            "RegExpBoilerplateDescriptionRef boilerplate"
          ],
          "return_type": "Node*",
          "logic": "Allocates a literal RegExp."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns the V8 Factory."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the Turbofan Graph. Typo in original code - should be `TFGraph` based on context."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph."
        },
        {
          "name": "native_context",
          "parameters": [],
          "return_type": "NativeContextRef",
          "logic": "Returns the native context."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder."
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the CompilationDependencies."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Returns the JSHeapBroker."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone."
        }
      ]
    }
  ],
  "functions": []
}