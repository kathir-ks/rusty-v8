{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/instruction-selection-phase.h",
  "imports": [
    "<optional>",
    "src/compiler/turboshaft/phase.h"
  ],
  "classes": [
    {
      "name": "TurboshaftSpecialRPONumberer",
      "properties": [
        "kBlockOnStack",
        "kBlockVisited1",
        "kBlockVisited2",
        "kBlockUnvisited",
        "graph_",
        "block_data_",
        "loops_"
      ],
      "methods": [
        {
          "name": "TurboshaftSpecialRPONumberer",
          "parameters": [
            "const Graph& graph",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the object with the graph and zone."
        },
        {
          "name": "ComputeSpecialRPO",
          "parameters": [],
          "return_type": "ZoneVector<uint32_t>",
          "logic": "Computes the special reverse-post-order numbering for blocks in the graph."
        },
        {
          "name": "ComputeLoopInfo",
          "parameters": [
            "size_t num_loops",
            "ZoneVector<Backedge>& backedges"
          ],
          "return_type": "void",
          "logic": "Computes information about loops in the graph, such as loop headers and members."
        },
        {
          "name": "ComputeBlockPermutation",
          "parameters": [
            "const Block* entry"
          ],
          "return_type": "ZoneVector<uint32_t>",
          "logic": "Computes a permutation of blocks based on the special RPO, starting from the given entry block."
        },
        {
          "name": "rpo_number",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "int32_t",
          "logic": "Returns the RPO number of a block."
        },
        {
          "name": "set_rpo_number",
          "parameters": [
            "const Block* block",
            "int32_t rpo_number"
          ],
          "return_type": "void",
          "logic": "Sets the RPO number of a block."
        },
        {
          "name": "has_loop_number",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "bool",
          "logic": "Checks if a block has a loop number assigned."
        },
        {
          "name": "loop_number",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "size_t",
          "logic": "Returns the loop number of a block. Asserts that the block has a loop number."
        },
        {
          "name": "set_loop_number",
          "parameters": [
            "const Block* block",
            "size_t loop_number"
          ],
          "return_type": "void",
          "logic": "Sets the loop number of a block."
        },
        {
          "name": "PushFront",
          "parameters": [
            "const Block* head",
            "const Block* block"
          ],
          "return_type": "const Block*",
          "logic": "Pushes a block to the front of a linked list of blocks using rpo_next."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone used for allocation."
        }
      ]
    },
    {
      "name": "ProfileApplicationPhase",
      "properties": [],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone",
            "const ProfileDataFromFile* profile"
          ],
          "return_type": "void",
          "logic": "Runs the profile application phase, using profile data from a file."
        }
      ]
    },
    {
      "name": "SpecialRPOSchedulingPhase",
      "properties": [],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Runs the special RPO scheduling phase."
        }
      ]
    },
    {
      "name": "InstructionSelectionPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone",
            "const CallDescriptor* call_descriptor",
            "Linkage* linkage",
            "CodeTracer* code_tracer"
          ],
          "return_type": "std::optional<BailoutReason>",
          "logic": "Runs the instruction selection phase. Returns a bailout reason if instruction selection fails."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "PropagateDeferred",
      "parameters": [
        "Graph& graph"
      ],
      "return_type": "void",
      "logic": "Propagates deferred operations in the graph."
    }
  ]
}