{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/raw-machine-assembler.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n    \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/raw-machine-assembler.h\",\n    \"imports\": [\n        \"<initializer_list>\",\n        \"<optional>\",\n        \"<type_traits>\",\n        \"src/common/globals.h\",\n        \"src/compiler/access-builder.h\",\n        \"src/compiler/common-operator.h\",\n        \"src/compiler/linkage.h\",\n        \"src/compiler/machine-operator.h\",\n        \"src/compiler/node-matchers.h\",\n        \"src/compiler/node.h\",\n        \"src/compiler/operator.h\",\n        \"src/compiler/simplified-operator.h\",\n        \"src/compiler/turbofan-graph.h\",\n        \"src/compiler/write-barrier-kind.h\",\n        \"src/execution/isolate.h\",\n        \"src/heap/factory.h\",\n        \"src/objects/string.h\"\n    ],\n    \"classes\": [\n        {\n            \"name\": \"RawMachineAssembler\",\n            \"properties\": [\n                \"isolate_\",\n                \"graph_\",\n                \"schedule_\",\n                \"source_positions_\",\n                \"machine_\",\n                \"common_\",\n                \"simplified_\",\n                \"call_descriptor_\",\n                \"dynamic_js_parameter_count_\",\n                \"target_parameter_\",\n                \"parameters_\",\n                \"current_block_\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"RawMachineAssembler\",\n                    \"parameters\": [\n                        \"Isolate* isolate\",\n                        \"TFGraph* graph\",\n                        \"CallDescriptor* call_descriptor\",\n                        \"MachineRepresentation word\",\n                        \"MachineOperatorBuilder::Flags flags\",\n                        \"MachineOperatorBuilder::AlignmentRequirements alignment_requirements\"\n                    ],\n                    \"return_type\": \"N/A (Constructor)\",\n                    \"logic\": \"Constructor for the RawMachineAssembler, initializes the internal state including the graph, isolate, operator builders and call descriptor.\"\n                },\n                {\n                    \"name\": \"~RawMachineAssembler\",\n                    \"parameters\": [],\n                    \"return_type\": \"N/A (Destructor)\",\n                    \"logic\": \"Destructor for the RawMachineAssembler (default).\"\n                },\n                {\n                    \"name\": \"isolate\",\n                    \"parameters\": [],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Returns the isolate associated with the assembler.\"\n                },\n                {\n                    \"name\": \"graph\",\n                    \"parameters\": [],\n                    \"return_type\": \"TFGraph*\",\n                    \"logic\": \"Returns the Turbofan graph being built.\"\n                },\n                {\n                    \"name\": \"zone\",\n                    \"parameters\": [],\n                    \"return_type\": \"Zone*\",\n                    \"logic\": \"Returns the zone associated with the graph.\"\n                },\n                {\n                    \"name\": \"machine\",\n                    \"parameters\": [],\n                    \"return_type\": \"MachineOperatorBuilder*\",\n                    \"logic\": \"Returns the machine operator builder.\"\n                },\n                {\n                    \"name\": \"common\",\n                    \"parameters\": [],\n                    \"return_type\": \"CommonOperatorBuilder*\",\n                    \"logic\": \"Returns the common operator builder.\"\n                },\n                {\n                    \"name\": \"simplified\",\n                    \"parameters\": [],\n                    \"return_type\": \"SimplifiedOperatorBuilder*\",\n                    \"logic\": \"Returns the simplified operator builder.\"\n                },\n                {\n                    \"name\": \"call_descriptor\",\n                    \"parameters\": [],\n                    \"return_type\": \"CallDescriptor*\",\n                    \"logic\": \"Returns the call descriptor being used.\"\n                },\n                {\n                    \"name\": \"ExportForTest\",\n                    \"parameters\": [],\n                    \"return_type\": \"Schedule*\",\n                    \"logic\": \"Finalizes the schedule and exports it for testing purposes.  The assembler becomes invalid after this call.\"\n                },\n                {\n                    \"name\": \"ExportForOptimization\",\n                    \"parameters\": [],\n                    \"return_type\": \"TFGraph*\",\n                    \"logic\": \"Finalizes the schedule, transforms it into a suitable graph for optimization.  The assembler becomes invalid after this call.\"\n                },\n                {\n                    \"name\": \"NullConstant\",\n                    \"parameters\": [],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a null constant node.\"\n                },\n                {\n                    \"name\": \"UndefinedConstant\",\n                    \"parameters\": [],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an undefined constant node.\"\n                },\n                {\n                    \"name\": \"PointerConstant\",\n                    \"parameters\": [\n                        \"void* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an IntPtr constant node from a void* value.\"\n                },\n                {\n                    \"name\": \"IntPtrConstant\",\n                    \"parameters\": [\n                        \"intptr_t value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an integer pointer constant node.\"\n                },\n                {\n                    \"name\": \"RelocatableIntPtrConstant\",\n                    \"parameters\": [\n                        \"intptr_t value\",\n                        \"RelocInfo::Mode rmode\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a relocatable integer pointer constant node.\"\n                },\n                {\n                    \"name\": \"Int32Constant\",\n                    \"parameters\": [\n                        \"int32_t value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer constant node.\"\n                },\n                 {\n                    \"name\": \"StackSlot\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"int alignment\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a stack slot node with specific representation and alignment.\"\n                },\n                {\n                    \"name\": \"StackSlot\",\n                    \"parameters\": [\n                        \"int size\",\n                        \"int alignment\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a stack slot node with specified size and alignment.\"\n                },\n                {\n                    \"name\": \"Int64Constant\",\n                    \"parameters\": [\n                        \"int64_t value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit integer constant node.\"\n                },\n                {\n                    \"name\": \"NumberConstant\",\n                    \"parameters\": [\n                        \"double value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a number constant node (double).\"\n                },\n                {\n                    \"name\": \"Float32Constant\",\n                    \"parameters\": [\n                        \"float value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit floating-point constant node.\"\n                },\n                {\n                    \"name\": \"Float64Constant\",\n                    \"parameters\": [\n                        \"double value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit floating-point constant node.\"\n                },\n                {\n                    \"name\": \"HeapConstant\",\n                    \"parameters\": [\n                        \"Handle<HeapObject> object\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a heap constant node from a heap object handle.\"\n                },\n                {\n                    \"name\": \"ExternalConstant\",\n                    \"parameters\": [\n                        \"ExternalReference address\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an external constant node from an external reference.\"\n                },\n                {\n                    \"name\": \"RelocatableInt32Constant\",\n                    \"parameters\": [\n                        \"int32_t value\",\n                        \"RelocInfo::Mode rmode\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a relocatable 32-bit integer constant node.\"\n                },\n                {\n                    \"name\": \"RelocatableInt64Constant\",\n                    \"parameters\": [\n                        \"int64_t value\",\n                        \"RelocInfo::Mode rmode\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a relocatable 64-bit integer constant node.\"\n                },\n                {\n                    \"name\": \"Projection\",\n                    \"parameters\": [\n                        \"int index\",\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a projection node.\"\n                },\n                {\n                    \"name\": \"Load\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a load node with a given type and base address (offset defaults to 0).\"\n                },\n                {\n                    \"name\": \"Load\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a load node with a given type, base address and offset.\"\n                },\n                {\n                    \"name\": \"LoadImmutable\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an immutable load node with a given type and base address (offset defaults to 0).\"\n                },\n                {\n                    \"name\": \"LoadImmutable\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an immutable load node with a given type, base address and offset.\"\n                },\n                 {\n                    \"name\": \"IsMapOffsetConstant\",\n                    \"parameters\": [\n                        \"Node* node\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if a node is a HeapObject::kMapOffset constant.\"\n                },\n                {\n                    \"name\": \"IsMapOffsetConstantMinusTag\",\n                    \"parameters\": [\n                        \"Node* node\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if a node is a HeapObject::kMapOffset - kHeapObjectTag constant.\"\n                },\n                 {\n                    \"name\": \"IsMapOffsetConstantMinusTag\",\n                    \"parameters\": [\n                        \"int offset\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Checks if an integer offset is a HeapObject::kMapOffset - kHeapObjectTag constant.\"\n                },\n                {\n                    \"name\": \"LoadFromObject\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* offset\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a load-from-object node.\"\n                },\n                {\n                    \"name\": \"LoadProtectedPointerFromObject\",\n                    \"parameters\": [\n                        \"Node* base\",\n                        \"Node* offset\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Loads a protected pointer from a tagged object at a given offset, applying sandbox protection if enabled.\"\n                },\n                {\n                    \"name\": \"Store\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"Node* base\",\n                        \"Node* value\",\n                        \"WriteBarrierKind write_barrier\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a store node with a given representation, base address and value (offset defaults to 0).\"\n                },\n                {\n                    \"name\": \"Store\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\",\n                        \"WriteBarrierKind write_barrier\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a store node with a given representation, base address, offset and value.\"\n                },\n                {\n                    \"name\": \"StoreToObject\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"Node* object\",\n                        \"Node* offset\",\n                        \"Node* value\",\n                        \"WriteBarrierKind write_barrier\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Creates a store-to-object node.\"\n                },\n                 {\n                    \"name\": \"OptimizedStoreField\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"Node* object\",\n                        \"int offset\",\n                        \"Node* value\",\n                        \"WriteBarrierKind write_barrier\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Creates an optimized store-field node.\"\n                },\n                {\n                    \"name\": \"OptimizedStoreIndirectPointerField\",\n                    \"parameters\": [\n                        \"Node* object\",\n                        \"int offset\",\n                        \"IndirectPointerTag tag\",\n                        \"Node* value\",\n                        \"WriteBarrierKind write_barrier\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Creates an optimized store-field node for indirect pointers.\"\n                },\n                {\n                    \"name\": \"OptimizedStoreMap\",\n                    \"parameters\": [\n                        \"Node* object\",\n                        \"Node* value\",\n                        \"WriteBarrierKind write_barrier\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Creates an optimized store-map node.\"\n                },\n                {\n                    \"name\": \"Retain\",\n                    \"parameters\": [\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a Retain node.\"\n                },\n                {\n                    \"name\": \"OptimizedAllocate\",\n                    \"parameters\": [\n                        \"Node* size\",\n                        \"AllocationType allocation\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an optimized allocation node.\"\n                },\n                 {\n                    \"name\": \"UnalignedLoad\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an unaligned load node with a given type and base address (offset defaults to 0).\"\n                },\n                {\n                    \"name\": \"UnalignedLoad\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an unaligned load node with a given type, base address and index.\"\n                },\n                {\n                    \"name\": \"UnalignedStore\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"Node* base\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an unaligned store node with a given representation, base address, and value (offset defaults to 0).\"\n                },\n                {\n                    \"name\": \"UnalignedStore\",\n                    \"parameters\": [\n                        \"MachineRepresentation rep\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an unaligned store node with a given representation, base address, index and value.\"\n                },\n                {\n                    \"name\": \"AtomicLoad\",\n                    \"parameters\": [\n                        \"AtomicLoadParameters rep\",\n                        \"Node* base\",\n                        \"Node* index\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic load node.\"\n                },\n                {\n                    \"name\": \"AtomicLoad64\",\n                    \"parameters\": [\n                        \"AtomicLoadParameters rep\",\n                        \"Node* base\",\n                        \"Node* index\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic load node.\"\n                },\n                {\n                    \"name\": \"AtomicStore\",\n                    \"parameters\": [\n                        \"AtomicStoreParameters params\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic store node.\"\n                },\n                {\n                    \"name\": \"AtomicStore64\",\n                    \"parameters\": [\n                        \"AtomicStoreParameters params\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\",\n                        \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic store node.\"\n                },\n                {\n                    \"name\": \"AtomicExchange\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic exchange node.\"\n                },\n                {\n                    \"name\": \"AtomicExchange64\",\n                    \"parameters\": [\n                         \"Node* base\",\n                         \"Node* index\",\n                         \"Node* value\",\n                         \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic exchange node.\"\n                },\n                {\n                    \"name\": \"AtomicAdd\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic add node.\"\n                },\n                {\n                    \"name\": \"AtomicAdd64\",\n                    \"parameters\": [\n                        \"Node* base\",\n                         \"Node* index\",\n                         \"Node* value\",\n                         \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic add node.\"\n                },\n                {\n                    \"name\": \"AtomicSub\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic subtract node.\"\n                },\n                {\n                    \"name\": \"AtomicSub64\",\n                    \"parameters\": [\n                        \"Node* base\",\n                         \"Node* index\",\n                         \"Node* value\",\n                         \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic subtract node.\"\n                },\n                {\n                    \"name\": \"AtomicAnd\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic and node.\"\n                },\n                {\n                    \"name\": \"AtomicAnd64\",\n                    \"parameters\": [\n                        \"Node* base\",\n                         \"Node* index\",\n                         \"Node* value\",\n                         \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic and node.\"\n                },\n                {\n                    \"name\": \"AtomicOr\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic or node.\"\n                },\n                {\n                    \"name\": \"AtomicOr64\",\n                    \"parameters\": [\n                        \"Node* base\",\n                         \"Node* index\",\n                         \"Node* value\",\n                         \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic or node.\"\n                },\n                {\n                    \"name\": \"AtomicXor\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic xor node.\"\n                },\n                {\n                    \"name\": \"AtomicXor64\",\n                    \"parameters\": [\n                        \"Node* base\",\n                         \"Node* index\",\n                         \"Node* value\",\n                         \"Node* value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic xor node.\"\n                },\n                {\n                    \"name\": \"AtomicCompareExchange\",\n                    \"parameters\": [\n                        \"MachineType type\",\n                        \"Node* base\",\n                        \"Node* index\",\n                        \"Node* old_value\",\n                        \"Node* new_value\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates an atomic compare-and-exchange node.\"\n                },\n                {\n                    \"name\": \"AtomicCompareExchange64\",\n                    \"parameters\": [\n                         \"Node* base\",\n                         \"Node* index\",\n                         \"Node* old_value\",\n                         \"Node* old_value_high\",\n                         \"Node* new_value\",\n                         \"Node* new_value_high\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit atomic compare-and-exchange node.\"\n                },\n                {\n                    \"name\": \"MemoryBarrier\",\n                    \"parameters\": [\n                        \"AtomicMemoryOrder order\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a memory barrier node.\"\n                },\n                {\n                    \"name\": \"WordAnd\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise AND node.\"\n                },\n                {\n                    \"name\": \"WordOr\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise OR node.\"\n                },\n                {\n                    \"name\": \"WordXor\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise XOR node.\"\n                },\n                {\n                    \"name\": \"WordShl\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise shift-left node.\"\n                },\n                {\n                    \"name\": \"WordShr\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise logical shift-right node.\"\n                },\n                {\n                    \"name\": \"WordSar\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise arithmetic shift-right node.\"\n                },\n                {\n                    \"name\": \"WordSarShiftOutZeros\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a WordSarShiftOutZeros node.\"\n                },\n                {\n                    \"name\": \"WordRor\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise rotate-right node.\"\n                },\n                {\n                    \"name\": \"WordEqual\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise equality comparison node.\"\n                },\n                {\n                    \"name\": \"WordNotEqual\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise inequality comparison node.\"\n                },\n                {\n                    \"name\": \"WordNot\",\n                    \"parameters\": [\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a word-wise NOT node.\"\n                },\n                {\n                    \"name\": \"Word32And\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise AND node.\"\n                },\n                {\n                    \"name\": \"Word32Or\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise OR node.\"\n                },\n                {\n                    \"name\": \"Word32Xor\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise XOR node.\"\n                },\n                {\n                    \"name\": \"Word32Shl\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise shift-left node.\"\n                },\n                {\n                    \"name\": \"Word32Shr\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise logical shift-right node.\"\n                },\n                {\n                    \"name\": \"Word32Sar\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise arithmetic shift-right node.\"\n                },\n                {\n                    \"name\": \"Word32SarShiftOutZeros\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit WordSarShiftOutZeros node.\"\n                },\n                {\n                    \"name\": \"Word32Ror\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise rotate-right node.\"\n                },\n                {\n                    \"name\": \"Word32Clz\",\n                    \"parameters\": [\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit count leading zeros node.\"\n                },\n                {\n                    \"name\": \"Word32Equal\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise equality comparison node.\"\n                },\n                {\n                    \"name\": \"Word32NotEqual\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise inequality comparison node.\"\n                },\n                {\n                    \"name\": \"Word32BitwiseNot\",\n                    \"parameters\": [\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise bitwise NOT node.\"\n                },\n                {\n                    \"name\": \"Word32BinaryNot\",\n                    \"parameters\": [\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit word-wise binary NOT node.\"\n                },\n                {\n                    \"name\": \"Word64And\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise AND node.\"\n                },\n                {\n                    \"name\": \"Word64Or\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise OR node.\"\n                },\n                {\n                    \"name\": \"Word64Xor\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise XOR node.\"\n                },\n                {\n                    \"name\": \"Word64Shl\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise shift-left node.\"\n                },\n                {\n                    \"name\": \"Word64Shr\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise logical shift-right node.\"\n                },\n                {\n                    \"name\": \"Word64Sar\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise arithmetic shift-right node.\"\n                },\n                {\n                    \"name\": \"Word64Ror\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise rotate-right node.\"\n                },\n                {\n                    \"name\": \"Word64Clz\",\n                    \"parameters\": [\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit count leading zeros node.\"\n                },\n                {\n                    \"name\": \"Word64Equal\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise equality comparison node.\"\n                },\n                {\n                    \"name\": \"Word64NotEqual\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise inequality comparison node.\"\n                },\n                {\n                    \"name\": \"Word64Not\",\n                    \"parameters\": [\n                        \"Node* a\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 64-bit word-wise NOT node.\"\n                },\n                {\n                    \"name\": \"Int32Add\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer addition node.\"\n                },\n                {\n                    \"name\": \"Int32AddWithOverflow\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer addition with overflow check node.\"\n                },\n                {\n                    \"name\": \"Int32Sub\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer subtraction node.\"\n                },\n                {\n                    \"name\": \"Int32SubWithOverflow\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer subtraction with overflow check node.\"\n                },\n                {\n                    \"name\": \"Int32Mul\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer multiplication node.\"\n                },\n                {\n                    \"name\": \"Int32MulHigh\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer multiplication high word node.\"\n                },\n                {\n                    \"name\": \"Int32MulWithOverflow\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer multiplication with overflow check node.\"\n                },\n                {\n                    \"name\": \"Int32Div\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer division node.\"\n                },\n                {\n                    \"name\": \"Int32Mod\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer modulo node.\"\n                },\n                {\n                    \"name\": \"Int32LessThan\",\n                    \"parameters\": [\n                        \"Node* a\",\n                        \"Node* b\"\n                    ],\n                    \"return_type\": \"Node*\",\n                    \"logic\": \"Creates a 32-bit integer less than comparison node.\"\n                },\n                {\n                    \"name\": \"Int32LessThanOrEqual\",\n                    \"parameters\": ["
}