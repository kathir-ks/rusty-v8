{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/wasm-lowering-reducer.h",
  "imports": [
    "src/compiler/turboshaft/builtin-call-descriptors.h",
    "src/compiler/globals.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/wasm-assembler-helpers.h",
    "src/wasm/wasm-engine.h",
    "src/wasm/wasm-module.h",
    "src/wasm/wasm-objects.h",
    "src/wasm/wasm-subtyping.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "WasmLoweringReducer",
      "properties": [
        "module_",
        "shared_",
        "null_check_strategy_"
      ],
      "methods": [
        {
          "name": "REDUCE(GlobalGet)",
          "parameters": [
            "V<WasmTrustedInstanceData> instance",
            "const wasm::WasmGlobal* global"
          ],
          "return_type": "V<Any>",
          "logic": "Lowers a GlobalGet operation by calling LowerGlobalSetOrGet with the appropriate parameters for loading the global value."
        },
        {
          "name": "REDUCE(GlobalSet)",
          "parameters": [
            "V<WasmTrustedInstanceData> instance",
            "V<Any> value",
            "const wasm::WasmGlobal* global"
          ],
          "return_type": "OpIndex",
          "logic": "Lowers a GlobalSet operation by calling LowerGlobalSetOrGet with the appropriate parameters for storing the global value."
        },
        {
          "name": "REDUCE(RootConstant)",
          "parameters": [
            "RootIndex index"
          ],
          "return_type": "OpIndex",
          "logic": "Loads a Root constant from the Isolate's root table. It handles endianness differences and loads the root as a tagged or untagged pointer depending on the platform."
        },
        {
          "name": "REDUCE(IsRootConstant)",
          "parameters": [
            "OpIndex object",
            "RootIndex index"
          ],
          "return_type": "V<Word32>",
          "logic": "Checks if an object is equal to a specific Root constant. Optimizes for static read-only roots using direct pointer comparison."
        },
        {
          "name": "REDUCE(Null)",
          "parameters": [
            "wasm::ValueType type"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces the `Null` operation to a `RootConstant` operation, using either `kWasmNull` or `kNullValue` root index based on the provided `wasm::ValueType`."
        },
        {
          "name": "REDUCE(IsNull)",
          "parameters": [
            "OpIndex object",
            "wasm::ValueType type"
          ],
          "return_type": "V<Word32>",
          "logic": "Reduces the `IsNull` operation to a `ReduceRootConstant` operation, using either `kWasmNull` or `kNullValue` root index based on the provided `wasm::ValueType`."
        },
        {
          "name": "REDUCE(AssertNotNull)",
          "parameters": [
            "V<Object> object",
            "wasm::ValueType type",
            "TrapId trap_id"
          ],
          "return_type": "V<Object>",
          "logic": "Inserts a check to trap if an object is null, raising a null dereference trap. Handles different null check strategies and object types (Smi, JSObject) for explicit or implicit (trap handler) null checks. Can skip null checks if a flag is enabled."
        },
        {
          "name": "REDUCE(RttCanon)",
          "parameters": [
            "V<FixedArray> rtts",
            "wasm::ModuleTypeIndex type_index"
          ],
          "return_type": "V<Map>",
          "logic": "Loads a canonical RTT (Runtime Type) from a FixedArray of RTTs using the provided type index."
        },
        {
          "name": "REDUCE(WasmTypeCheck)",
          "parameters": [
            "V<Object> object",
            "OptionalV<Map> rtt",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "V<Word32>",
          "logic": "Lowers the WasmTypeCheck operation by calling either ReduceWasmTypeCheckRtt (if rtt is present) or ReduceWasmTypeCheckAbstract (if rtt is not present)."
        },
        {
          "name": "REDUCE(WasmTypeCast)",
          "parameters": [
            "V<Object> object",
            "OptionalV<Map> rtt",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "V<Object>",
          "logic": "Lowers the WasmTypeCast operation by calling either ReduceWasmTypeCastRtt (if rtt is present) or ReduceWasmTypeCastAbstract (if rtt is not present)."
        },
        {
          "name": "REDUCE(AnyConvertExtern)",
          "parameters": [
            "V<Object> object"
          ],
          "return_type": "V<Object>",
          "logic": "Converts a value of type anyref to externref. Handles null, Smi, and HeapNumber cases, potentially converting integers to HeapNumbers if they don't fit within i31ref range."
        },
        {
          "name": "REDUCE(ExternConvertAny)",
          "parameters": [
            "V<Object> object"
          ],
          "return_type": "V<Object>",
          "logic": "Converts a value of type externref to anyref. Specifically it converts Null values from ExternRef to AnyRef."
        },
        {
          "name": "REDUCE(WasmTypeAnnotation)",
          "parameters": [
            "V<Object> value",
            "wasm::ValueType type"
          ],
          "return_type": "V<Object>",
          "logic": "Removes the WasmTypeAnnotation as they are not needed during lowering."
        },
        {
          "name": "REDUCE(StructGet)",
          "parameters": [
            "V<WasmStructNullable> object",
            "const wasm::StructType* type",
            "wasm::ModuleTypeIndex type_index",
            "int field_index",
            "bool is_signed",
            "CheckForNull null_check"
          ],
          "return_type": "V<Any>",
          "logic": "Loads a field from a Wasm struct. Handles null checks, immutable fields, and appropriate memory representation for the field type."
        },
        {
          "name": "REDUCE(StructSet)",
          "parameters": [
            "V<WasmStructNullable> object",
            "V<Any> value",
            "const wasm::StructType* type",
            "wasm::ModuleTypeIndex type_index",
            "int field_index",
            "CheckForNull null_check"
          ],
          "return_type": "V<None>",
          "logic": "Stores a value into a field of a Wasm struct. Handles null checks and writes the value with the correct memory representation and write barrier."
        },
        {
          "name": "REDUCE(ArrayGet)",
          "parameters": [
            "V<WasmArrayNullable> array",
            "V<Word32> index",
            "const wasm::ArrayType* array_type",
            "bool is_signed"
          ],
          "return_type": "V<Any>",
          "logic": "Loads an element from a Wasm array, handling mutability."
        },
        {
          "name": "REDUCE(ArraySet)",
          "parameters": [
            "V<WasmArrayNullable> array",
            "V<Word32> index",
            "V<Any> value",
            "wasm::ValueType element_type"
          ],
          "return_type": "V<None>",
          "logic": "Stores a value into a Wasm array element, using appropriate barriers."
        },
        {
          "name": "REDUCE(ArrayLength)",
          "parameters": [
            "V<WasmArrayNullable> array",
            "CheckForNull null_check"
          ],
          "return_type": "V<Word32>",
          "logic": "Loads the length of a Wasm array. Handles null checks using explicit checks or trap handlers."
        },
        {
          "name": "REDUCE(WasmAllocateArray)",
          "parameters": [
            "V<Map> rtt",
            "V<Word32> length",
            "const wasm::ArrayType* array_type"
          ],
          "return_type": "V<WasmArray>",
          "logic": "Allocates a Wasm array of a specified length and initializes its header fields (map, properties, length). Traps if length exceeds maximum."
        },
        {
          "name": "REDUCE(WasmAllocateStruct)",
          "parameters": [
            "V<Map> rtt",
            "const wasm::StructType* struct_type"
          ],
          "return_type": "V<WasmStruct>",
          "logic": "Allocates a Wasm struct of the specified type and initializes its map and properties. The fields of the struct are left uninitialized by this method."
        },
        {
          "name": "REDUCE(WasmRefFunc)",
          "parameters": [
            "V<WasmTrustedInstanceData> wasm_instance",
            "uint32_t function_index"
          ],
          "return_type": "V<WasmFuncRef>",
          "logic": "Retrieves a Wasm function reference from the instance's function references array. If not found, it calls a builtin to generate a new function reference."
        },
        {
          "name": "REDUCE(StringAsWtf16)",
          "parameters": [
            "V<String> string"
          ],
          "return_type": "V<String>",
          "logic": "Converts a String to a WTF16 representation, calling a builtin if the string is not already a sequential string."
        },
        {
          "name": "REDUCE(StringPrepareForGetCodeUnit)",
          "parameters": [
            "V<Object> original_string"
          ],
          "return_type": "OpIndex",
          "logic": "Prepares a string to be used for code unit access. It resolves indirect strings (sliced, thin, cons) and returns a tuple with the base string, character offset and character width."
        },
        {
          "name": "RepresentationFor",
          "parameters": [
            "wasm::ValueType type",
            "bool is_signed"
          ],
          "return_type": "MemoryRepresentation",
          "logic": "Determines the appropriate MemoryRepresentation for a given Wasm ValueType."
        },
        {
          "name": "ReduceWasmTypeCheckAbstract",
          "parameters": [
            "V<Object> object",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "V<Word32>",
          "logic": "Performs a Wasm type check against abstract types, handling null, smi, arrays, structs, and strings."
        },
        {
          "name": "ReduceWasmTypeCastAbstract",
          "parameters": [
            "V<Object> object",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "V<Object>",
          "logic": "Performs a Wasm type cast to abstract types, trapping if the cast fails. Handles null, smi, arrays, structs, and strings."
        },
        {
          "name": "ReduceWasmTypeCastRtt",
          "parameters": [
            "V<Object> object",
            "OptionalV<Map> rtt",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "V<Object>",
          "logic": "Performs a Wasm type cast with a Runtime Type (RTT). It checks for null values, Smi, and compares against the RTT or its supertypes, trapping if the cast fails."
        },
        {
          "name": "ReduceWasmTypeCheckRtt",
          "parameters": [
            "V<Object> object",
            "OptionalV<Map> rtt",
            "WasmTypeCheckConfig config"
          ],
          "return_type": "V<Word32>",
          "logic": "Performs a Wasm type check with a Runtime Type (RTT). It checks for null values, Smi, and compares against the RTT or its supertypes."
        },
        {
          "name": "LowerGlobalSetOrGet",
          "parameters": [
            "V<WasmTrustedInstanceData> instance",
            "V<Any> value",
            "const wasm::WasmGlobal* global",
            "GlobalMode mode"
          ],
          "return_type": "OpIndex",
          "logic": "Lowers access to a Wasm global variable, handling mutable/immutable globals, imported globals, and different data types (references vs. primitive types)."
        },
        {
          "name": "IsDataRefMap",
          "parameters": [
            "V<Map> map"
          ],
          "return_type": "V<Word32>",
          "logic": "Determines if a map is of type WasmObject by checking the instance type of the map."
        },
        {
          "name": "LoadWasmTypeInfo",
          "parameters": [
            "V<Map> map"
          ],
          "return_type": "V<Object>",
          "logic": "Loads the WasmTypeInfo object from a given Map."
        },
        {
          "name": "null_checks_for_struct_op",
          "parameters": [
            "CheckForNull null_check",
            "int field_index"
          ],
          "return_type": "std::pair<bool, bool>",
          "logic": "Determines if explicit or implicit null checks are needed for a struct operation based on the configuration and field index."
        },
        {
          "name": "field_offset",
          "parameters": [
            "const wasm::StructType* type",
            "int field_index"
          ],
          "return_type": "int",
          "logic": "Calculates the field offset within a Wasm struct."
        }
      ]
    }
  ],
  "functions": []
}