{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/pretenuring-propagation-reducer.h",
  "imports": [
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/reducer-traits.h",
    "src/compiler/turboshaft/utils.h",
    "src/zone/zone-allocator.h",
    "src/zone/zone-containers.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "PretenuringPropagationAnalyzer",
      "properties": [
        "zone_*",
        "input_graph_*",
        "old_allocs_*",
        "store_graph_*",
        "old_phis_*",
        "queue_*"
      ],
      "methods": [
        {
          "name": "PretenuringPropagationAnalyzer",
          "parameters": [
            "Zone* phase_zone",
            "Graph& mutable_input_graph"
          ],
          "return_type": "void",
          "logic": "Constructor: Initializes the analyzer with a zone and the input graph."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Orchestrates the pretenuring propagation analysis."
        },
        {
          "name": "ProcessStore",
          "parameters": [
            "const StoreOp& store"
          ],
          "return_type": "void",
          "logic": "Processes a store operation to update the store graph."
        },
        {
          "name": "ProcessPhi",
          "parameters": [
            "const PhiOp& phi"
          ],
          "return_type": "void",
          "logic": "Processes a Phi operation to update the store graph."
        },
        {
          "name": "ProcessAllocate",
          "parameters": [
            "const AllocateOp& allocate"
          ],
          "return_type": "void",
          "logic": "Processes an allocate operation to collect old allocations."
        },
        {
          "name": "PushContainedValues",
          "parameters": [
            "OpIndex base"
          ],
          "return_type": "bool",
          "logic": "Pushes the values stored in a given base OpIndex onto the queue for oldification, if any"
        },
        {
          "name": "OldifySubgraph",
          "parameters": [
            "OpIndex old_alloc"
          ],
          "return_type": "void",
          "logic": "Performs a DFS on the store graph, marking nodes reachable from an old allocation as old."
        },
        {
          "name": "BuildStoreInputGraph",
          "parameters": [],
          "return_type": "void",
          "logic": "Builds the store input graph by iterating over the input graph."
        },
        {
          "name": "PropagateAllocationTypes",
          "parameters": [],
          "return_type": "void",
          "logic": "Propagates the allocation types based on the store graph and old allocations."
        },
        {
          "name": "FindOrCreate",
          "parameters": [
            "OpIndex idx"
          ],
          "return_type": "ZoneVector<OpIndex>*",
          "logic": "Finds or creates a vector in store_graph_ for the given OpIndex."
        },
        {
          "name": "Create",
          "parameters": [
            "OpIndex idx"
          ],
          "return_type": "ZoneVector<OpIndex>*",
          "logic": "Creates a new vector in store_graph_ for the given OpIndex."
        },
        {
          "name": "TryFind",
          "parameters": [
            "OpIndex idx"
          ],
          "return_type": "ZoneVector<OpIndex>*",
          "logic": "Tries to find existing vector in store_graph_ for the given OpIndex."
        }
      ]
    },
    {
      "name": "PretenuringPropagationReducer",
      "properties": [],
      "methods": [
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Analyzes the graph to perform pretenuring propagation."
        }
      ]
    }
  ],
  "functions": []
}