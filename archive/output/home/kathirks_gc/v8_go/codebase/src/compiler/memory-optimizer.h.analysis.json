{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/memory-optimizer.h",
  "imports": [
    "src/compiler/graph-assembler.h",
    "src/compiler/memory-lowering.h",
    "src/zone/zone-containers.h",
    "src/compiler/wasm-address-reassociation.h"
  ],
  "classes": [
    {
      "name": "WasmAddressReassociation",
      "properties": [],
      "methods": [
        {
          "name": "WasmAddressReassociation",
          "parameters": [
            "JSGraph* jsgraph",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor. Does nothing in the disabled version of WasmAddressReassociation."
        },
        {
          "name": "Optimize",
          "parameters": [],
          "return_type": "void",
          "logic": "Does nothing in the disabled version of WasmAddressReassociation."
        },
        {
          "name": "VisitProtectedMemOp",
          "parameters": [
            "Node* node",
            "uint32_t effect_chain"
          ],
          "return_type": "void",
          "logic": "Does nothing in the disabled version of WasmAddressReassociation."
        }
      ]
    },
    {
      "name": "MemoryOptimizer",
      "properties": [
        "graph_assembler_",
        "memory_lowering_",
        "wasm_address_reassociation_",
        "jsgraph_",
        "empty_state_",
        "pending_",
        "tokens_",
        "zone_",
        "tick_counter_"
      ],
      "methods": [
        {
          "name": "MemoryOptimizer",
          "parameters": [
            "JSHeapBroker* broker",
            "JSGraph* jsgraph",
            "Zone* zone",
            "MemoryLowering::AllocationFolding allocation_folding",
            "const char* function_debug_name",
            "TickCounter* tick_counter",
            "bool is_wasm"
          ],
          "return_type": "void",
          "logic": "Constructor. Initializes the MemoryOptimizer with the given parameters."
        },
        {
          "name": "~MemoryOptimizer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Uses default implementation."
        },
        {
          "name": "Optimize",
          "parameters": [],
          "return_type": "void",
          "logic": "Main optimization entry point. Performs allocation folding and store write barrier elimination while lowering memory access nodes."
        },
        {
          "name": "VisitNode",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Dispatches to specific visit methods based on the node's opcode."
        },
        {
          "name": "VisitAllocateRaw",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles AllocateRaw nodes, potentially folding allocations."
        },
        {
          "name": "VisitCall",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles Call nodes, updating the allocation state."
        },
        {
          "name": "VisitLoadFromObject",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles LoadFromObject nodes."
        },
        {
          "name": "VisitLoadElement",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles LoadElement nodes."
        },
        {
          "name": "VisitLoadField",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles LoadField nodes."
        },
        {
          "name": "VisitProtectedLoad",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles ProtectedLoad nodes."
        },
        {
          "name": "VisitProtectedStore",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles ProtectedStore nodes."
        },
        {
          "name": "VisitStoreToObject",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles StoreToObject nodes, potentially eliminating write barriers."
        },
        {
          "name": "VisitStoreElement",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles StoreElement nodes, potentially eliminating write barriers."
        },
        {
          "name": "VisitStoreField",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles StoreField nodes, potentially eliminating write barriers."
        },
        {
          "name": "VisitStore",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles Store nodes, potentially eliminating write barriers."
        },
        {
          "name": "VisitOtherEffect",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Handles other effect nodes, updating the allocation state."
        },
        {
          "name": "MergeStates",
          "parameters": [
            "AllocationStates const& states"
          ],
          "return_type": "AllocationState const*",
          "logic": "Merges multiple allocation states into a single state."
        },
        {
          "name": "EnqueueMerge",
          "parameters": [
            "Node*",
            "int",
            "AllocationState const*"
          ],
          "return_type": "void",
          "logic": "Enqueues a merge operation for the given node."
        },
        {
          "name": "EnqueueUses",
          "parameters": [
            "Node*",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Enqueues all uses of the given node for processing."
        },
        {
          "name": "EnqueueUse",
          "parameters": [
            "Node*",
            "int",
            "AllocationState const*",
            "NodeId"
          ],
          "return_type": "void",
          "logic": "Enqueues a specific use of a node for processing."
        },
        {
          "name": "ReplaceUsesAndKillNode",
          "parameters": [
            "Node* node",
            "Node* replacement"
          ],
          "return_type": "void",
          "logic": "Replaces all uses of a node with a replacement and then removes the original node."
        },
        {
          "name": "AllocationTypeNeedsUpdateToOld",
          "parameters": [
            "Node* const user",
            "const Edge edge"
          ],
          "return_type": "bool",
          "logic": "Checks if the AllocationType of the current AllocateRaw node needs to be updated to kOld."
        },
        {
          "name": "empty_state",
          "parameters": [],
          "return_type": "AllocationState const*",
          "logic": "Returns the empty allocation state."
        },
        {
          "name": "memory_lowering",
          "parameters": [],
          "return_type": "MemoryLowering*",
          "logic": "Returns a pointer to the memory lowering object."
        },
        {
          "name": "wasm_address_reassociation",
          "parameters": [],
          "return_type": "WasmAddressReassociation*",
          "logic": "Returns a pointer to the wasm address reassociation object."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns a pointer to the TFGraph."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns a pointer to the JSGraph."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns a pointer to the Zone."
        }
      ]
    }
  ],
  "functions": []
}