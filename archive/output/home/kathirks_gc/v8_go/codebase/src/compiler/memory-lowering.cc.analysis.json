{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/memory-lowering.cc",
  "imports": [
    "src/compiler/memory-lowering.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/common/globals.h",
    "src/compiler/js-graph.h",
    "src/compiler/linkage.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/simplified-operator.h",
    "src/roots/roots-inl.h",
    "src/sandbox/external-pointer-inl.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "MemoryLowering::AllocationGroup",
      "properties": [
        "node_ids_",
        "allocation_",
        "size_"
      ],
      "methods": [
        {
          "name": "AllocationGroup",
          "parameters": [
            "Node* node",
            "AllocationType allocation",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the AllocationGroup with a single node and allocation type."
        },
        {
          "name": "AllocationGroup",
          "parameters": [
            "Node* node",
            "AllocationType allocation",
            "Node* size",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the AllocationGroup with a single node, allocation type and node for size."
        },
        {
          "name": "~AllocationGroup",
          "parameters": [],
          "return_type": "void",
          "logic": "Default destructor."
        },
        {
          "name": "Add",
          "parameters": [
            "Node* object"
          ],
          "return_type": "void",
          "logic": "Adds a node to the allocation group."
        },
        {
          "name": "Contains",
          "parameters": [
            "Node* object"
          ],
          "return_type": "bool",
          "logic": "Checks if a node is part of the allocation group. It also checks recursively for related nodes obtained from operations such as BitcastWordToTagged, BitcastTaggedToWord, Int32Add and Int64Add."
        },
        {
          "name": "IsYoungGenerationAllocation",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the allocation is in the young generation."
        },
        {
          "name": "allocation",
          "parameters": [],
          "return_type": "AllocationType",
          "logic": "Returns the allocation type of the group."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the size Node* of the group."
        },
        {
          "name": "CheckAllocationType",
          "parameters": [
            "AllocationType allocation"
          ],
          "return_type": "AllocationType",
          "logic": "Adjusts the allocation type if running in single generation mode."
        }
      ]
    },
    {
      "name": "MemoryLowering",
      "properties": [
        "isolate_",
        "zone_",
        "graph_",
        "common_",
        "machine_",
        "graph_assembler_",
        "is_wasm_",
        "allocation_folding_",
        "write_barrier_assert_failed_",
        "function_debug_name_"
      ],
      "methods": [
        {
          "name": "MemoryLowering",
          "parameters": [
            "JSGraph* jsgraph",
            "Zone* zone",
            "JSGraphAssembler* graph_assembler",
            "bool is_wasm",
            "AllocationFolding allocation_folding",
            "WriteBarrierAssertFailedCallback callback",
            "const char* function_debug_name"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the MemoryLowering pass with the given JSGraph and options."
        },
        {
          "name": "graph_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the graph's zone."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a given node based on its opcode, implementing memory lowering transformations."
        },
        {
          "name": "EnsureAllocateOperator",
          "parameters": [],
          "return_type": "void",
          "logic": "Ensures that the allocate operator is initialized."
        },
        {
          "name": "GetWasmInstanceNode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the Wasm instance node if WebAssembly is enabled."
        },
        {
          "name": "AlignToAllocationAlignment",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Aligns a value to the allocation alignment if compression pointers is enabled."
        },
        {
          "name": "ReduceAllocateRaw",
          "parameters": [
            "Node* node",
            "AllocationType allocation_type",
            "AllocationState const** state_ptr"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an AllocateRaw node, potentially folding allocations together."
        },
        {
          "name": "ReduceLoadFromObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadFromObject node to a memory load."
        },
        {
          "name": "ReduceLoadElement",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadElement node to a memory load, computing the index."
        },
        {
          "name": "ReduceLoadExternalPointerField",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadField node when accessing an external pointer field. Implements the decoding and access to the external pointer."
        },
        {
          "name": "ReduceLoadBoundedSize",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Decodes the raw value of a bounded size and replaces the load node with it"
        },
        {
          "name": "ReduceLoadMap",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Map load."
        },
        {
          "name": "ReduceLoadField",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadField node to a memory load, inserting the offset."
        },
        {
          "name": "ReduceStoreToObject",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreToObject node to a memory store."
        },
        {
          "name": "ReduceStoreElement",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreElement node to a memory store, computing the index."
        },
        {
          "name": "ReduceStoreField",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreField node to a memory store, inserting the offset."
        },
        {
          "name": "ReduceStore",
          "parameters": [
            "Node* node",
            "AllocationState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Store node.  Used when the write barrier kind may change."
        },
        {
          "name": "ComputeIndex",
          "parameters": [
            "ElementAccess const& access",
            "Node* index"
          ],
          "return_type": "Node*",
          "logic": "Computes the memory index for an element access."
        },
        {
          "name": "ReduceAllocateRaw",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces AllocateRaw node (without explicit allocation parameters)."
        },
        {
          "name": "ComputeWriteBarrierKind",
          "parameters": [
            "Node* node",
            "Node* object",
            "Node* value",
            "AllocationState const* state",
            "WriteBarrierKind write_barrier_kind"
          ],
          "return_type": "WriteBarrierKind",
          "logic": "Computes the appropriate write barrier kind for a memory store."
        }
      ]
    },
    {
      "name": "MemoryLowering::AllocationState",
      "properties": [
        "group_",
        "size_",
        "top_",
        "effect_"
      ],
      "methods": [
        {
          "name": "AllocationState",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor that initializes with invalid state."
        },
        {
          "name": "AllocationState",
          "parameters": [
            "AllocationGroup* group",
            "Node* effect"
          ],
          "return_type": "void",
          "logic": "Constructor for a closed allocation state with a group and effect."
        },
        {
          "name": "AllocationState",
          "parameters": [
            "AllocationGroup* group",
            "intptr_t size",
            "Node* top",
            "Node* effect"
          ],
          "return_type": "void",
          "logic": "Constructor for an open allocation state with a group, size, top, and effect."
        },
        {
          "name": "IsYoungGenerationAllocation",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the allocation group is a young generation allocation."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "ValueNeedsWriteBarrier",
      "parameters": [
        "Node* value",
        "Isolate* isolate"
      ],
      "return_type": "bool",
      "logic": "Determines if the given value needs a write barrier."
    }
  ]
}