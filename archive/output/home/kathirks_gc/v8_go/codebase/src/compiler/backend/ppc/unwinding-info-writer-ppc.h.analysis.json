{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/ppc/unwinding-info-writer-ppc.h",
  "imports": [
    "src/diagnostics/eh-frame.h",
    "src/flags/flags.h"
  ],
  "classes": [
    {
      "name": "UnwindingInfoWriter",
      "properties": [
        "zone_",
        "eh_frame_writer_",
        "saved_lr_",
        "block_will_exit_",
        "block_initial_states_"
      ],
      "methods": [
        {
          "name": "UnwindingInfoWriter",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the UnwindingInfoWriter class. Initializes member variables, including the EhFrameWriter and the block initial states.  Initializes the EhFrameWriter if unwinding info generation is enabled (v8_flags.perf_prof_unwinding_info)."
        },
        {
          "name": "SetNumberOfInstructionBlocks",
          "parameters": [
            "int number"
          ],
          "return_type": "void",
          "logic": "Resizes the block_initial_states_ vector to accommodate the given number of instruction blocks. Only performed when unwinding info is enabled."
        },
        {
          "name": "BeginInstructionBlock",
          "parameters": [
            "int pc_offset",
            "const InstructionBlock* block"
          ],
          "return_type": "void",
          "logic": "Marks the beginning of an instruction block. The implementation details are not visible in this header file, but likely involve updating the EhFrameWriter based on the provided program counter offset and instruction block information."
        },
        {
          "name": "EndInstructionBlock",
          "parameters": [
            "const InstructionBlock* block"
          ],
          "return_type": "void",
          "logic": "Marks the end of an instruction block. The implementation details are not visible in this header file, but likely involve updating the EhFrameWriter based on the provided instruction block information."
        },
        {
          "name": "MarkLinkRegisterOnTopOfStack",
          "parameters": [
            "int pc_offset"
          ],
          "return_type": "void",
          "logic": "Marks that the link register (LR) is currently on top of the stack at the given program counter offset.  This information is used for unwinding."
        },
        {
          "name": "MarkPopLinkRegisterFromTopOfStack",
          "parameters": [
            "int pc_offset"
          ],
          "return_type": "void",
          "logic": "Marks that the link register (LR) has been popped from the top of the stack at the given program counter offset. This information is used for unwinding."
        },
        {
          "name": "MarkFrameConstructed",
          "parameters": [
            "int at_pc"
          ],
          "return_type": "void",
          "logic": "Marks that a stack frame has been constructed at the given program counter (PC). This information is used for unwinding."
        },
        {
          "name": "MarkFrameDeconstructed",
          "parameters": [
            "int at_pc"
          ],
          "return_type": "void",
          "logic": "Marks that a stack frame has been deconstructed at the given program counter (PC). This information is used for unwinding."
        },
        {
          "name": "MarkBlockWillExit",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks that the current block will exit. Sets the block_will_exit_ flag to true. This information might be relevant to unwinding, especially for handling exceptional control flow."
        },
        {
          "name": "Finish",
          "parameters": [
            "int code_size"
          ],
          "return_type": "void",
          "logic": "Finalizes the EhFrameWriter after processing all instruction blocks.  Passes the code size to the EhFrameWriter. Only called when unwinding info generation is enabled."
        },
        {
          "name": "eh_frame_writer",
          "parameters": [],
          "return_type": "EhFrameWriter*",
          "logic": "Returns a pointer to the EhFrameWriter object. Returns a nullptr if unwinding info generation is not enabled."
        }
      ]
    },
    {
      "name": "BlockInitialState",
      "properties": [
        "saved_lr_"
      ],
      "methods": [
        {
          "name": "BlockInitialState",
          "parameters": [
            "bool saved_lr"
          ],
          "return_type": "void",
          "logic": "Constructor for the BlockInitialState class. Initializes whether the link register was saved when entering the block."
        }
      ]
    }
  ],
  "functions": [],
  "enums": []
}