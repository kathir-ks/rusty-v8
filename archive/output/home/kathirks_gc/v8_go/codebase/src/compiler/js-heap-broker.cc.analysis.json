{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-heap-broker.cc",
  "imports": [
    "src/compiler/js-heap-broker.h",
    "<optional>",
    "<algorithm>",
    "src/codegen/optimized-compilation-info.h",
    "src/compiler/js-heap-broker-inl.h",
    "src/handles/handles-inl.h",
    "src/heap/heap-inl.h",
    "src/objects/allocation-site-inl.h",
    "src/objects/js-array-inl.h",
    "src/objects/literal-objects-inl.h",
    "src/objects/map-updater.h",
    "src/objects/megadom-handler-inl.h",
    "src/objects/objects-inl.h",
    "src/objects/property-cell.h"
  ],
  "classes": [
    {
      "name": "JSHeapBroker",
      "properties": [
        "isolate_",
        "cage_base_",
        "zone_",
        "refs_",
        "root_index_map_",
        "array_and_object_prototypes_",
        "tracing_enabled_",
        "code_kind_",
        "feedback_",
        "property_access_infos_",
        "local_isolate_",
        "ph_",
        "mode_",
        "trace_indentation_",
        "dependencies_",
        "target_native_context_",
        "string_array_",
        "number_string_",
        "one_byte_string_",
        "symbol_string_",
        "null_value_",
        "undefined_value_",
        "the_hole_value_",
        "true_value_",
        "false_value_"
      ],
      "methods": [
        {
          "name": "IncrementTracingIndentation",
          "parameters": [],
          "return_type": "void",
          "logic": "Increments the tracing indentation level."
        },
        {
          "name": "DecrementTracingIndentation",
          "parameters": [],
          "return_type": "void",
          "logic": "Decrements the tracing indentation level."
        },
        {
          "name": "JSHeapBroker",
          "parameters": [
            "Isolate* isolate",
            "Zone* broker_zone",
            "bool tracing_enabled",
            "CodeKind code_kind"
          ],
          "return_type": "JSHeapBroker",
          "logic": "Constructor for JSHeapBroker, initializes member variables."
        },
        {
          "name": "~JSHeapBroker",
          "parameters": [],
          "return_type": "JSHeapBroker",
          "logic": "Destructor for JSHeapBroker, asserts that local_isolate_ is NULL."
        },
        {
          "name": "Trace",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns a string representation of the current tracing indentation for debugging."
        },
        {
          "name": "AttachLocalIsolate",
          "parameters": [
            "OptimizedCompilationInfo* info",
            "LocalIsolate* local_isolate"
          ],
          "return_type": "void",
          "logic": "Attaches a LocalIsolate to the JSHeapBroker and moves persistent handles from info to local isolate."
        },
        {
          "name": "DetachLocalIsolate",
          "parameters": [
            "OptimizedCompilationInfo* info"
          ],
          "return_type": "void",
          "logic": "Detaches the LocalIsolate from the JSHeapBroker and moves persistent handles from local isolate to info."
        },
        {
          "name": "StopSerializing",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the mode to kSerialized to indicate the end of serialization."
        },
        {
          "name": "Retire",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the mode to kRetired to indicate the JSHeapBroker is no longer in use."
        },
        {
          "name": "SetTargetNativeContextRef",
          "parameters": [
            "DirectHandle<NativeContext> native_context"
          ],
          "return_type": "void",
          "logic": "Sets the target native context for this JSHeapBroker."
        },
        {
          "name": "CollectArrayAndObjectPrototypes",
          "parameters": [],
          "return_type": "void",
          "logic": "Collects the array and object prototypes from the native contexts list."
        },
        {
          "name": "GetTypedArrayStringTag",
          "parameters": [
            "ElementsKind kind"
          ],
          "return_type": "StringRef",
          "logic": "Returns the string tag for a given typed array elements kind."
        },
        {
          "name": "IsArrayOrObjectPrototype",
          "parameters": [
            "JSObjectRef object"
          ],
          "return_type": "bool",
          "logic": "Checks if a JSObjectRef is an array or object prototype."
        },
        {
          "name": "IsArrayOrObjectPrototype",
          "parameters": [
            "Handle<JSObject> object"
          ],
          "return_type": "bool",
          "logic": "Checks if a Handle<JSObject> is an array or object prototype."
        },
        {
          "name": "TryGetOrCreateData",
          "parameters": [
            "Tagged<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Tries to get or create object data for a given object."
        },
        {
          "name": "GetOrCreateData",
          "parameters": [
            "Handle<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Gets or creates object data for a given object, crashing on error."
        },
        {
          "name": "GetOrCreateData",
          "parameters": [
            "Tagged<Object> object",
            "GetOrCreateDataFlags flags"
          ],
          "return_type": "ObjectData*",
          "logic": "Gets or creates object data for a given object."
        },
        {
          "name": "StackHasOverflowed",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the stack has overflowed."
        },
        {
          "name": "ObjectMayBeUninitialized",
          "parameters": [
            "DirectHandle<Object> object"
          ],
          "return_type": "bool",
          "logic": "Checks if an object may be uninitialized."
        },
        {
          "name": "ObjectMayBeUninitialized",
          "parameters": [
            "Tagged<Object> object"
          ],
          "return_type": "bool",
          "logic": "Checks if an object may be uninitialized."
        },
        {
          "name": "ObjectMayBeUninitialized",
          "parameters": [
            "Tagged<HeapObject> object"
          ],
          "return_type": "bool",
          "logic": "Checks if an object may be uninitialized."
        },
        {
          "name": "InitString_array",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the string_array_ member."
        },
        {
          "name": "InitNumber_string",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the number_string_ member."
        },
        {
          "name": "InitOne_byte_string",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the one_byte_string_ member."
        },
        {
          "name": "InitSymbol_string",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the symbol_string_ member."
        },
        {
          "name": "InitNull_value",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the null_value_ member."
        },
        {
          "name": "InitUndefined_value",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the undefined_value_ member."
        },
        {
          "name": "InitThe_hole_value",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the the_hole_value_ member."
        },
        {
          "name": "InitTrue_value",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the true_value_ member."
        },
        {
          "name": "InitFalse_value",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the false_value_ member."
        },
        {
          "name": "SetFeedback",
          "parameters": [
            "FeedbackSource const& source",
            "ProcessedFeedback const* feedback"
          ],
          "return_type": "void",
          "logic": "Sets feedback information for a given feedback source."
        },
        {
          "name": "HasFeedback",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "bool",
          "logic": "Checks if feedback exists for a given feedback source."
        },
        {
          "name": "GetFeedback",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Retrieves feedback information for a given feedback source."
        },
        {
          "name": "GetFeedbackSlotKind",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "FeedbackSlotKind",
          "logic": "Retrieves feedback slot kind for a given feedback source."
        },
        {
          "name": "FeedbackIsInsufficient",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "bool",
          "logic": "Checks if the current feedback is insufficient."
        },
        {
          "name": "NewInsufficientFeedback",
          "parameters": [
            "FeedbackSlotKind kind"
          ],
          "return_type": "const ProcessedFeedback&",
          "logic": "Creates and returns a new InsufficientFeedback object."
        },
        {
          "name": "ReadFeedbackForPropertyAccess",
          "parameters": [
            "FeedbackSource const& source",
            "AccessMode mode",
            "OptionalNameRef static_name"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a property access operation."
        },
        {
          "name": "ReadFeedbackForGlobalAccess",
          "parameters": [
            "JSHeapBroker* broker",
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads the feedback for a global access operation."
        },
        {
          "name": "ReadFeedbackForBinaryOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a binary operation."
        },
        {
          "name": "ReadFeedbackForTypeOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a typeof operation."
        },
        {
          "name": "ReadFeedbackForCompareOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a compare operation."
        },
        {
          "name": "ReadFeedbackForForIn",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a for-in operation."
        },
        {
          "name": "ReadFeedbackForInstanceOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for an instanceof operation."
        },
        {
          "name": "ReadFeedbackForArrayOrObjectLiteral",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for an array or object literal."
        },
        {
          "name": "ReadFeedbackForRegExpLiteral",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a RegExp literal."
        },
        {
          "name": "ReadFeedbackForTemplateObject",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a template object."
        },
        {
          "name": "ReadFeedbackForCall",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Reads feedback for a call operation."
        },
        {
          "name": "GetFeedbackForBinaryOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "BinaryOperationHint",
          "logic": "Gets feedback for a binary operation."
        },
        {
          "name": "GetFeedbackForTypeOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "TypeOfFeedback::Result",
          "logic": "Gets feedback for a typeof operation."
        },
        {
          "name": "GetFeedbackForCompareOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "CompareOperationHint",
          "logic": "Gets feedback for a compare operation."
        },
        {
          "name": "GetFeedbackForForIn",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ForInHint",
          "logic": "Gets feedback for a for-in operation."
        },
        {
          "name": "GetFeedbackForArrayOrObjectLiteral",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for an array or object literal."
        },
        {
          "name": "GetFeedbackForRegExpLiteral",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for a RegExp literal."
        },
        {
          "name": "GetFeedbackForTemplateObject",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for a template object."
        },
        {
          "name": "ProcessFeedbackForTypeOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for typeof operations."
        },
        {
          "name": "ProcessFeedbackForBinaryOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for binary operations."
        },
        {
          "name": "ProcessFeedbackForCompareOperation",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for compare operations."
        },
        {
          "name": "ProcessFeedbackForForIn",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Processes feedback for for-in loops."
        },
        {
          "name": "GetFeedbackForPropertyAccess",
          "parameters": [
            "FeedbackSource const& source",
            "AccessMode mode",
            "OptionalNameRef static_name"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for a property access."
        },
        {
          "name": "GetFeedbackForInstanceOf",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for an instanceof operation."
        },
        {
          "name": "GetFeedbackForCall",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for a call operation."
        },
        {
          "name": "GetFeedbackForGlobalAccess",
          "parameters": [
            "FeedbackSource const& source"
          ],
          "return_type": "ProcessedFeedback const&",
          "logic": "Gets feedback for a global access."
        },
        {
          "name": "ProcessFeedbackMapsForElementAccess",
          "parameters": [
            "ZoneVector<MapRef>& maps",
            "KeyedAccessMode const& keyed_mode",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Processes feedback maps for element access and creates ElementAccessFeedback."
        },
        {
          "name": "GetNameFeedback",
          "parameters": [
            "FeedbackNexus const& nexus"
          ],
          "return_type": "OptionalNameRef",
          "logic": "Retrieves the name feedback from a FeedbackNexus."
        },
        {
          "name": "GetPropertyAccessInfo",
          "parameters": [
            "MapRef map",
            "NameRef name",
            "AccessMode access_mode"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Retrieves property access information for a given map, name, and access mode."
        }
      ]
    },
    {
      "name": "CurrentHeapBrokerScope",
      "properties": [
        "prev_broker_"
      ],
      "methods": [
        {
          "name": "CurrentHeapBrokerScope",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "CurrentHeapBrokerScope",
          "logic": "Constructor, sets the current broker."
        },
        {
          "name": "~CurrentHeapBrokerScope",
          "parameters": [],
          "return_type": "CurrentHeapBrokerScope",
          "logic": "Destructor, restores the previous broker."
        }
      ]
    },
    {
      "name": "ProcessedFeedback",
      "properties": [
        "kind_",
        "slot_kind_"
      ],
      "methods": [
        {
          "name": "ProcessedFeedback",
          "parameters": [
            "Kind kind",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "ProcessedFeedback",
          "logic": "Constructor, initializes kind_ and slot_kind_."
        },
        {
          "name": "AsTypeOf",
          "parameters": [],
          "return_type": "TypeOfOpFeedback const&",
          "logic": "Casts to TypeOfOpFeedback."
        },
        {
          "name": "AsBinaryOperation",
          "parameters": [],
          "return_type": "BinaryOperationFeedback const&",
          "logic": "Casts to BinaryOperationFeedback."
        },
        {
          "name": "AsCall",
          "parameters": [],
          "return_type": "CallFeedback const&",
          "logic": "Casts to CallFeedback."
        },
        {
          "name": "AsCompareOperation",
          "parameters": [],
          "return_type": "CompareOperationFeedback const&",
          "logic": "Casts to CompareOperationFeedback."
        },
        {
          "name": "AsElementAccess",
          "parameters": [],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Casts to ElementAccessFeedback."
        },
        {
          "name": "AsForIn",
          "parameters": [],
          "return_type": "ForInFeedback const&",
          "logic": "Casts to ForInFeedback."
        },
        {
          "name": "AsGlobalAccess",
          "parameters": [],
          "return_type": "GlobalAccessFeedback const&",
          "logic": "Casts to GlobalAccessFeedback."
        },
        {
          "name": "AsInstanceOf",
          "parameters": [],
          "return_type": "InstanceOfFeedback const&",
          "logic": "Casts to InstanceOfFeedback."
        },
        {
          "name": "AsNamedAccess",
          "parameters": [],
          "return_type": "NamedAccessFeedback const&",
          "logic": "Casts to NamedAccessFeedback."
        },
        {
          "name": "AsMegaDOMPropertyAccess",
          "parameters": [],
          "return_type": "MegaDOMPropertyAccessFeedback const&",
          "logic": "Casts to MegaDOMPropertyAccessFeedback."
        },
        {
          "name": "AsLiteral",
          "parameters": [],
          "return_type": "LiteralFeedback const&",
          "logic": "Casts to LiteralFeedback."
        },
        {
          "name": "AsRegExpLiteral",
          "parameters": [],
          "return_type": "RegExpLiteralFeedback const&",
          "logic": "Casts to RegExpLiteralFeedback."
        },
        {
          "name": "AsTemplateObject",
          "parameters": [],
          "return_type": "TemplateObjectFeedback const&",
          "logic": "Casts to TemplateObjectFeedback."
        }
      ]
    },
    {
      "name": "ElementAccessFeedback",
      "properties": [
        "keyed_mode_",
        "transition_groups_"
      ],
      "methods": [
        {
          "name": "keyed_mode",
          "parameters": [],
          "return_type": "KeyedAccessMode",
          "logic": "Returns the keyed access mode."
        },
        {
          "name": "transition_groups",
          "parameters": [],
          "return_type": "ZoneVector<ElementAccessFeedback::TransitionGroup> const&",
          "logic": "Returns the transition groups."
        },
        {
          "name": "Refine",
          "parameters": [
            "JSHeapBroker* broker",
            "ZoneVector<MapRef> const& inferred_maps"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Refines the feedback based on inferred maps."
        },
        {
          "name": "Refine",
          "parameters": [
            "JSHeapBroker* broker",
            "NameRef name"
          ],
          "return_type": "NamedAccessFeedback const&",
          "logic": "Refines the feedback based on a known name, replacing it with named access feedback."
        },
        {
          "name": "Refine",
          "parameters": [
            "JSHeapBroker* broker",
            "ZoneRefSet<Map> const& inferred_maps",
            "bool always_keep_group_target"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Refines the feedback based on inferred maps, optionally always keeping the group target."
        },
        {
          "name": "ElementAccessFeedback",
          "parameters": [
            "Zone* zone",
            "KeyedAccessMode const& keyed_mode",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "ElementAccessFeedback",
          "logic": "Constructor, initializes member variables."
        },
        {
          "name": "HasOnlyStringMaps",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "bool",
          "logic": "Checks if all maps in the transition groups are string maps."
        },
        {
          "name": "AddGroup",
          "parameters": [
            "TransitionGroup&& group"
          ],
          "return_type": "void",
          "logic": "Adds a transition group to the list of transition groups."
        }
      ]
    },
    {
      "name": "InsufficientFeedback",
      "properties": [],
      "methods": [
        {
          "name": "InsufficientFeedback",
          "parameters": [
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "InsufficientFeedback",
          "logic": "Constructor, initializes ProcessedFeedback with the kInsufficient kind."
        }
      ]
    },
    {
      "name": "GlobalAccessFeedback",
      "properties": [
        "cell_or_context_",
        "index_and_immutable_"
      ],
      "methods": [
        {
          "name": "GlobalAccessFeedback",
          "parameters": [
            "PropertyCellRef cell",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "GlobalAccessFeedback",
          "logic": "Constructor, for property cell access."
        },
        {
          "name": "GlobalAccessFeedback",
          "parameters": [
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "GlobalAccessFeedback",
          "logic": "Constructor, indicates megamorphic global access."
        },
        {
          "name": "GlobalAccessFeedback",
          "parameters": [
            "ContextRef script_context",
            "int slot_index",
            "bool immutable",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "GlobalAccessFeedback",
          "logic": "Constructor, for script context slot access."
        },
        {
          "name": "IsMegamorphic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the feedback is megamorphic."
        },
        {
          "name": "IsPropertyCell",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the access targets a property cell."
        },
        {
          "name": "IsScriptContextSlot",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the access targets a script context slot."
        },
        {
          "name": "property_cell",
          "parameters": [],
          "return_type": "PropertyCellRef",
          "logic": "Returns the property cell."
        },
        {
          "name": "script_context",
          "parameters": [],
          "return_type": "ContextRef",
          "logic": "Returns the script context."
        },
        {
          "name": "slot_index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the slot index."
        },
        {
          "name": "immutable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the immutability flag."
        },
        {
          "name": "GetConstantHint",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "OptionalObjectRef",
          "logic": "Gets the constant hint value, if available."
        }
      ]
    },
    {
      "name": "KeyedAccessMode",
      "properties": [
        "access_mode_",
        "load_store_mode_"
      ],
      "methods": [
        {
          "name": "FromNexus",
          "parameters": [
            "FeedbackNexus const& nexus"
          ],
          "return_type": "KeyedAccessMode",
          "logic": "Creates a KeyedAccessMode from a FeedbackNexus."
        },
        {
          "name": "access_mode",
          "parameters": [],
          "return_type": "AccessMode",
          "logic": "Returns the access mode."
        },
        {
          "name": "IsLoad",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the mode is a load mode."
        },
        {
          "name": "IsStore",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the mode is a store mode."
        },
        {
          "name": "load_mode",
          "parameters": [],
          "return_type": "KeyedAccessLoadMode",
          "logic": "Returns the load mode."
        },
        {
          "name": "store_mode",
          "parameters": [],
          "return_type": "KeyedAccessStoreMode",
          "logic": "Returns the store mode."
        },
        {
          "name": "KeyedAccessMode",
          "parameters": [
            "AccessMode access_mode",
            "KeyedAccessLoadMode load_mode"
          ],
          "return_type": "KeyedAccessMode",
          "logic": "Constructor for a load mode."
        },
        {
          "name": "KeyedAccessMode",
          "parameters": [
            "AccessMode access_mode",
            "KeyedAccessStoreMode store_mode"
          ],
          "return_type": "KeyedAccessMode",
          "logic": "Constructor for a store mode."
        }
      ]
    },
    {
      "name": "MegaDOMPropertyAccessFeedback",
      "properties": [
        "info_"
      ],
      "methods": [
        {
          "name": "MegaDOMPropertyAccessFeedback",
          "parameters": [
            "FunctionTemplateInfoRef info_ref",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "MegaDOMPropertyAccessFeedback",
          "logic": "Constructor."
        }
      ]
    },
    {
      "name": "NamedAccessFeedback",
      "properties": [
        "name_",
        "maps_",
        "has_deprecated_map_without_migration_target_"
      ],
      "methods": [
        {
          "name": "NamedAccessFeedback",
          "parameters": [
            "NameRef name",
            "ZoneVector<MapRef> const& maps",
            "FeedbackSlotKind slot_kind",
            "bool has_deprecated_map_without_migration_target"
          ],
          "return_type": "NamedAccessFeedback",
          "logic": "Constructor."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Current",
      "parameters": [],
      "return_type": "JSHeapBroker*",
      "logic": "Returns the current JSHeapBroker. Only available in DEBUG mode."
    },
    {
      "name": "AddGroup",
      "parameters": [
        "TransitionGroup&& group"
      ],
      "return_type": "void",
      "logic": "Adds a TransitionGroup to the transition_groups_ member.  Defined out-of-line."
    }
  ]
}