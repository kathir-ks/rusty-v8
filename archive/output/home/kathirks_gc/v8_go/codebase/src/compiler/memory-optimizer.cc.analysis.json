{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/memory-optimizer.cc",
  "imports": [
    "src/compiler/memory-optimizer.h",
    "src/base/logging.h",
    "src/codegen/tick-counter.h",
    "src/compiler/common-operator.h",
    "src/compiler/js-graph.h",
    "src/compiler/linkage.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/roots/roots-inl.h"
  ],
  "classes": [
    {
      "name": "MemoryOptimizer",
      "properties": [
        "graph_assembler_",
        "memory_lowering_",
        "wasm_address_reassociation_",
        "jsgraph_",
        "empty_state_",
        "pending_",
        "tokens_",
        "zone_",
        "tick_counter_"
      ],
      "methods": [
        {
          "name": "MemoryOptimizer",
          "parameters": [
            "JSHeapBroker* broker",
            "JSGraph* jsgraph",
            "Zone* zone",
            "MemoryLowering::AllocationFolding allocation_folding",
            "const char* function_debug_name",
            "TickCounter* tick_counter",
            "bool is_wasm"
          ],
          "return_type": "void",
          "logic": "Constructor for the MemoryOptimizer class. Initializes member variables including graph assembler, memory lowering, address reassociation (for wasm), the JSGraph, allocation states, pending state map, token queue, zone, and tick counter."
        },
        {
          "name": "Optimize",
          "parameters": [],
          "return_type": "void",
          "logic": "Main optimization routine. Enqueues uses starting from the graph's start node, then processes tokens from the queue by visiting nodes.  Handles WASM address reassociation if enabled.  Ensures the pending and tokens structures are empty at the end."
        },
        {
          "name": "VisitNode",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Dispatches to specific visit methods based on the node's opcode.  Handles different types of memory-related operations (AllocateRaw, Load/Store to Object/Element/Field, Calls, etc.).  If a node doesn't trigger GC, it calls VisitOtherEffect.  If CanAllocate returns true but the node wasn't handled, an assertion will fail."
        },
        {
          "name": "AllocationTypeNeedsUpdateToOld",
          "parameters": [
            "Node* const node",
            "const Edge edge"
          ],
          "return_type": "bool",
          "logic": "Determines if allocation type should be updated to kOld, for instance when storing a young child into an old parent during allocation."
        },
        {
          "name": "ReplaceUsesAndKillNode",
          "parameters": [
            "Node* node",
            "Node* replacement"
          ],
          "return_type": "void",
          "logic": "Replaces all uses of a node with a replacement node and then kills the original node."
        },
        {
          "name": "VisitAllocateRaw",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles AllocateRaw nodes. Propagates tenuring and reduces the node using memory lowering."
        },
        {
          "name": "VisitLoadFromObject",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles LoadFromObject and LoadImmutableFromObject nodes.  Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitStoreToObject",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles StoreToObject and InitializeImmutableInObject nodes. Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitLoadElement",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles LoadElement nodes.  Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitLoadField",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles LoadField nodes.  Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitProtectedLoad",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles ProtectedLoad nodes. Calls wasm address reassociation if enabled, otherwise VisitOtherEffect."
        },
        {
          "name": "VisitProtectedStore",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles ProtectedStore nodes. Calls wasm address reassociation if enabled, otherwise VisitOtherEffect."
        },
        {
          "name": "VisitStoreElement",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles StoreElement nodes. Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitStoreField",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles StoreField nodes. Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitStore",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles Store nodes. Reduces the node using memory lowering and enqueues uses."
        },
        {
          "name": "VisitCall",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles Call nodes.  Resets the allocation state if the call can allocate and enqueues uses."
        },
        {
          "name": "VisitOtherEffect",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Handles nodes with side effects that don't directly allocate. Simply enqueues uses."
        },
        {
          "name": "MergeStates",
          "parameters": [
            "AllocationStates const& states"
          ],
          "return_type": "MemoryOptimizer::AllocationState const*",
          "logic": "Merges multiple allocation states. If the states are identical, or within the same allocation group, it merges them into one. Otherwise, it returns an empty state to signify different allocations."
        },
        {
          "name": "EnqueueMerge",
          "parameters": [
            "Node* node",
            "int index",
            "AllocationState const* state"
          ],
          "return_type": "void",
          "logic": "Handles enqueuing uses for EffectPhi nodes, which represent merges in the effect chain.  It deals with merges at loop headers and normal control joins."
        },
        {
          "name": "EnqueueUses",
          "parameters": [
            "Node* node",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Enqueues uses of a given node for further processing. Filters for effect edges."
        },
        {
          "name": "EnqueueUse",
          "parameters": [
            "Node* node",
            "int index",
            "AllocationState const* state",
            "NodeId effect_chain"
          ],
          "return_type": "void",
          "logic": "Adds a node to the tokens queue for later processing. If node is an EffectPhi, EnqueueMerge is called instead."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TurboFan graph."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CanAllocate",
      "parameters": [
        "const Node* node"
      ],
      "return_type": "bool",
      "logic": "Determines whether a given node can potentially allocate memory (trigger GC)."
    },
    {
      "name": "SearchAllocatingNode",
      "parameters": [
        "Node* start",
        "Node* limit",
        "Zone* temp_zone"
      ],
      "return_type": "Node*",
      "logic": "Searches for a potentially allocating node along the effect chain starting from `start` up to `limit` using a breadth-first search.  Returns the allocating node if found, otherwise nullptr."
    },
    {
      "name": "CanLoopAllocate",
      "parameters": [
        "Node* loop_effect_phi",
        "Zone* temp_zone"
      ],
      "return_type": "bool",
      "logic": "Determines whether a loop represented by `loop_effect_phi` can allocate memory by searching for allocating nodes along the back edges of the loop."
    },
    {
      "name": "EffectPhiForPhi",
      "parameters": [
        "Node* phi"
      ],
      "return_type": "Node*",
      "logic": "Finds the EffectPhi node associated with a given Phi node by iterating through uses of the Phi's control input."
    },
    {
      "name": "WriteBarrierAssertFailed",
      "parameters": [
        "Node* node",
        "Node* object",
        "const char* name",
        "Zone* temp_zone"
      ],
      "return_type": "void",
      "logic": "Called when a write barrier removal fails. Generates an informative error message to assist with debugging."
    }
  ]
}