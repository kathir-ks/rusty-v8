{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/code-generator-riscv.cc",
  "imports": [
    "src/codegen/assembler-inl.h",
    "src/codegen/callable.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/codegen/riscv/constants-riscv.h",
    "src/compiler/backend/code-generator-impl.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/gap-resolver.h",
    "src/compiler/node-matchers.h",
    "src/compiler/osr.h",
    "src/heap/mutable-page-metadata.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "RiscvOperandConverter",
      "properties": [],
      "methods": [
        {
          "name": "RiscvOperandConverter",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for the RiscvOperandConverter class. Initializes the base class InstructionOperandConverter."
        },
        {
          "name": "OutputSingleRegister",
          "parameters": [
            "size_t index = 0"
          ],
          "return_type": "FloatRegister",
          "logic": "Returns the output operand at the given index as a FloatRegister."
        },
        {
          "name": "InputSingleRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "FloatRegister",
          "logic": "Returns the input operand at the given index as a FloatRegister."
        },
        {
          "name": "ToSingleRegister",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "FloatRegister",
          "logic": "Converts an InstructionOperand to a FloatRegister (alias to ToDoubleRegister on RISC-V)."
        },
        {
          "name": "InputOrZeroRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Register",
          "logic": "Returns the input operand at the given index as a Register. If the input is an immediate 0, it returns the zero register; otherwise, it returns the register."
        },
        {
          "name": "InputOrZeroDoubleRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "DoubleRegister",
          "logic": "Returns the input operand at the given index as a DoubleRegister. If the input is an immediate, it returns kDoubleRegZero register; otherwise, it returns the register."
        },
        {
          "name": "InputOrZeroSingleRegister",
          "parameters": [
            "size_t index"
          ],
          "return_type": "DoubleRegister",
          "logic": "Returns the input operand at the given index as a SingleRegister. If the input is an immediate, it returns kSingleRegZero register; otherwise, it returns the register."
        },
        {
          "name": "InputImmediate",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Operand",
          "logic": "Returns the input operand at the given index as an Operand representing an immediate value. Handles different constant types (Int32, Int64, Float32, Float64, HeapObject)."
        },
        {
          "name": "InputOperand",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Operand",
          "logic": "Returns the input operand at the given index as an Operand. If it's a register, it returns a register Operand; otherwise, it returns an immediate Operand."
        },
        {
          "name": "MemoryOperand",
          "parameters": [
            "size_t* first_index"
          ],
          "return_type": "MemOperand",
          "logic": "Returns a MemOperand based on the addressing mode encoded in the instruction's opcode."
        },
        {
          "name": "MemoryOperand",
          "parameters": [
            "size_t index = 0"
          ],
          "return_type": "MemOperand",
          "logic": "Overloaded function for MemoryOperand with default index"
        },
        {
          "name": "ToMemOperand",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "MemOperand",
          "logic": "Converts an InstructionOperand representing a stack slot or FP stack slot to a MemOperand."
        },
        {
          "name": "SlotToMemOperand",
          "parameters": [
            "int slot"
          ],
          "return_type": "MemOperand",
          "logic": "Converts a frame slot to a MemOperand using the frame access state to determine the base register and offset."
        }
      ]
    },
    {
      "name": "OutOfLineRecordWrite",
      "properties": [
        "Register const object_",
        "Operand const offset_",
        "Register const value_",
        "RecordWriteMode const mode_",
        "StubCallMode const stub_mode_",
        "bool must_save_lr_",
        "Zone* zone_",
        "IndirectPointerTag indirect_pointer_tag_"
      ],
      "methods": [
        {
          "name": "OutOfLineRecordWrite",
          "parameters": [
            "CodeGenerator* gen",
            "Register object",
            "Operand offset",
            "Register value",
            "RecordWriteMode mode",
            "StubCallMode stub_mode",
            "IndirectPointerTag indirect_pointer_tag = kIndirectPointerNullTag"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineRecordWrite class, used to generate out-of-line code for record write barriers."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates the out-of-line code for the record write barrier. This includes checking page flags, decompressing tagged values (RISCV64), and calling the appropriate record write stub."
        }
      ]
    },
    {
      "name": "WasmOutOfLineTrap",
      "properties": [
        "CodeGenerator* gen_",
        "Instruction* instr_"
      ],
      "methods": [
        {
          "name": "WasmOutOfLineTrap",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for the WasmOutOfLineTrap class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates the out-of-line trap code by calling a wasm runtime stub"
        },
        {
          "name": "GenerateWithTrapId",
          "parameters": [
            "TrapId trap_id"
          ],
          "return_type": "void",
          "logic": "Generates call to trap with given TrapId."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "HasRegisterInput",
      "parameters": [
        "Instruction* instr",
        "size_t index"
      ],
      "return_type": "bool",
      "logic": "Checks if the input at the given index of the instruction is a register."
    },
    {
      "name": "FlagsConditionToConditionCmp",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "Condition",
      "logic": "Converts a FlagsCondition to a Condition for comparison operations."
    },
    {
      "name": "FlagsConditionToConditionTst",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "Condition",
      "logic": "Converts a FlagsCondition to a Condition for test operations."
    },
    {
      "name": "FlagsConditionToConditionOvf",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "Condition",
      "logic": "Converts a FlagsCondition to a Condition for overflow checks on RISCV64."
    },
    {
      "name": "FlagsConditionToConditionCmpFPU",
      "parameters": [
        "bool* predicate",
        "FlagsCondition condition"
      ],
      "return_type": "FPUCondition",
      "logic": "Converts a FlagsCondition to an FPUCondition for floating-point comparison operations. Sets the predicate to indicate if a true comparison is required."
    },
    {
      "name": "RecordTrapInfoIfNeeded",
      "parameters": [
        "Zone* zone",
        "CodeGenerator* codegen",
        "InstructionCode opcode",
        "Instruction* instr",
        "int pc"
      ],
      "return_type": "void",
      "logic": "Records trap information if the memory access mode is protected (out-of-bounds or null dereference)."
    },
    {
      "name": "AdjustStackPointerForTailCall",
      "parameters": [
        "MacroAssembler* masm",
        "FrameAccessState* state",
        "int new_slot_above_sp",
        "bool allow_shrinkage = true"
      ],
      "return_type": "void",
      "logic": "Adjusts the stack pointer for tail calls to ensure proper stack alignment and frame setup."
    }
  ]
}