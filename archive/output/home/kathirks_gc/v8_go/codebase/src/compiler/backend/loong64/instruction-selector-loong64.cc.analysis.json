{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/loong64/instruction-selector-loong64.cc",
  "imports": [
    "<optional>",
    "src/base/bits.h",
    "src/base/logging.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/machine-type.h",
    "src/compiler/backend/instruction-selector-impl.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/opmasks.h"
  ],
  "classes": [
    {
      "name": "Loong64OperandGeneratorT",
      "properties": [],
      "methods": [
        {
          "name": "Loong64OperandGeneratorT",
          "parameters": [
            "InstructionSelectorT* selector"
          ],
          "return_type": null,
          "logic": "Constructor. Initializes the operand generator with a given instruction selector."
        },
        {
          "name": "UseOperand",
          "parameters": [
            "OpIndex node",
            "InstructionCode opcode"
          ],
          "return_type": "InstructionOperand",
          "logic": "Chooses whether to use an immediate or register operand based on whether the node can be represented as an immediate for the given opcode."
        },
        {
          "name": "UseRegisterOrImmediateZero",
          "parameters": [
            "OpIndex node"
          ],
          "return_type": "InstructionOperand",
          "logic": "Uses the zero register if the node is a constant with the value zero, otherwise assigns a register."
        },
        {
          "name": "IsIntegerConstant",
          "parameters": [
            "OpIndex node"
          ],
          "return_type": "bool",
          "logic": "Checks if the node is an integer constant."
        },
        {
          "name": "GetOptionalIntegerConstant",
          "parameters": [
            "OpIndex operation"
          ],
          "return_type": "std::optional<int64_t>",
          "logic": "Attempts to get the value of an integer constant node, returning it wrapped in std::optional if successful, or std::nullopt otherwise."
        },
        {
          "name": "CanBeImmediate",
          "parameters": [
            "OpIndex node",
            "InstructionCode mode"
          ],
          "return_type": "bool",
          "logic": "Checks if the node can be represented as an immediate value for a given instruction code."
        },
        {
          "name": "CanBeImmediate",
          "parameters": [
            "int64_t value",
            "InstructionCode opcode"
          ],
          "return_type": "bool",
          "logic": "Determines if a specific 64-bit integer value can be used as an immediate operand for the instruction based on the instruction's opcode. Checks range limits based on opcodes."
        }
      ]
    },
    {
      "name": "ExtendingLoadMatcher",
      "properties": [],
      "methods": [
        {
          "name": "ExtendingLoadMatcher",
          "parameters": [
            "OpIndex node",
            "InstructionSelectorT* selector"
          ],
          "return_type": null,
          "logic": "Constructor. Initializes the matcher with a node and the instruction selector."
        },
        {
          "name": "Matches",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the load matches the pattern, otherwise returns false."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "OpIndex",
          "logic": "Returns the base operand of the load."
        },
        {
          "name": "immediate",
          "parameters": [],
          "return_type": "int64_t",
          "logic": "Returns the immediate offset of the load."
        },
        {
          "name": "opcode",
          "parameters": [],
          "return_type": "ArchOpcode",
          "logic": "Returns the opcode of the load instruction."
        }
      ]
    },
    {
      "name": "AtomicStoreParameters",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "VisitRR",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with two register operands (RR)."
    },
    {
      "name": "VisitRRI",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with register-register-immediate operands (RRI) - UNIMPLEMENTED."
    },
    {
      "name": "VisitSimdShift",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Visits a SIMD shift operation node, emitting an instruction with register-register-immediate or register-register-register operands."
    },
    {
      "name": "VisitRRIR",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with register-register-immediate-register operands (RRIR) - UNIMPLEMENTED."
    },
    {
      "name": "VisitRRR",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with three register operands (RRR)."
    },
    {
      "name": "VisitUniqueRRR",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with three unique register operands (RRR)."
    },
    {
      "name": "VisitRRRR",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with four register operands (RRRR) - UNIMPLEMENTED."
    },
    {
      "name": "VisitRRO",
      "parameters": [
        "InstructionSelectorT* selector",
        "ArchOpcode opcode",
        "OpIndex node"
      ],
      "return_type": "void",
      "logic": "Emits an instruction with register-register-operand operands (RRO), where the last operand can be either a register or an immediate."
    },
    {
      "name": "TryEmitExtendingLoad",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "OpIndex output_node"
      ],
      "return_type": "bool",
      "logic": "Attempts to emit an extending load instruction. Returns true if successful, otherwise returns false."
    },
    {
      "name": "TryMatchImmediate",
      "parameters": [
        "InstructionSelectorT* selector",
        "InstructionCode* opcode_return",
        "OpIndex node",
        "size_t* input_count_return",
        "InstructionOperand* inputs"
      ],
      "return_type": "bool",
      "logic": "Tries to match a node as an immediate operand. If successful, sets the addressing mode to MRI and updates the instruction code and input operands. Returns true if successful, false otherwise."
    },
    {
      "name": "VisitBinop",
      "parameters": [
        "InstructionSelectorT* selector",
        "turboshaft::OpIndex node",
        "InstructionCode opcode",
        "bool has_reverse_opcode",
        "InstructionCode reverse_opcode",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Visits a binary operation node, emitting the appropriate instruction with potential flags continuation. Attempts to match immediate operands on either the left or right side, potentially reversing the opcode."
    },
    {
      "name": "VisitBinop",
      "parameters": [
        "InstructionSelectorT* selector",
        "turboshaft::OpIndex node",
        "InstructionCode opcode",
        "bool has_reverse_opcode",
        "InstructionCode reverse_opcode"
      ],
      "return_type": "void",
      "logic": "Visits a binary operation node without flags continuation."
    },
    {
      "name": "VisitBinop",
      "parameters": [
        "InstructionSelectorT* selector",
        "turboshaft::OpIndex node",
        "InstructionCode opcode",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Visits a binary operation node with flags continuation."
    },
    {
      "name": "VisitBinop",
      "parameters": [
        "InstructionSelectorT* selector",
        "turboshaft::OpIndex node",
        "InstructionCode opcode"
      ],
      "return_type": "void",
      "logic": "Visits a binary operation node without flags continuation or reverse opcode."
    },
    {
      "name": "EmitLoad",
      "parameters": [
        "InstructionSelectorT* selector",
        "turboshaft::OpIndex node",
        "InstructionCode opcode",
        "turboshaft::OpIndex output"
      ],
      "return_type": "void",
      "logic": "Emits a load instruction based on the provided parameters, including handling of root register addressing and immediate offsets."
    },
    {
      "name": "GetLoadOpcode",
      "parameters": [
        "turboshaft::MemoryRepresentation loaded_rep",
        "turboshaft::RegisterRepresentation result_rep"
      ],
      "return_type": "ArchOpcode",
      "logic": "Determines the appropriate load opcode based on the memory representation of the loaded value and the register representation of the result."
    },
    {
      "name": "GetStoreOpcode",
      "parameters": [
        "turboshaft::MemoryRepresentation stored_rep"
      ],
      "return_type": "ArchOpcode",
      "logic": "Determines the appropriate store opcode based on the memory representation of the stored value."
    },
    {
      "name": "VisitCompare",
      "parameters": [
        "InstructionSelectorT* selector",
        "InstructionCode opcode",
        "InstructionOperand left",
        "InstructionOperand right",
        "FlagsContinuationT* cont"
      ],
      "return_type": "Instruction*",
      "logic": "Emits a compare instruction with the given operands and flags continuation."
    },
    {
      "name": "VisitFloat32Compare",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Emits a float32 comparison instruction based on the comparison operation node and flags continuation."
    },
    {
      "name": "VisitFloat64Compare",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Emits a float64 comparison instruction based on the comparison operation node and flags continuation."
    },
    {
      "name": "VisitWordCompare",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "InstructionCode opcode",
        "FlagsContinuationT* cont",
        "bool commutative"
      ],
      "return_type": "void",
      "logic": "Emits a word comparison instruction based on the given parameters, handling immediate operands and commutativity."
    },
    {
      "name": "VisitFullWord32Compare",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "InstructionCode opcode",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Compares two 32-bit values as 64-bit by shifting them up."
    },
    {
      "name": "VisitWord32Compare",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Emits a 32-bit word comparison instruction."
    },
    {
      "name": "VisitWord64Compare",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "FlagsContinuationT* cont"
      ],
      "return_type": "void",
      "logic": "Emits a 64-bit word comparison instruction."
    },
    {
      "name": "VisitAtomicLoad",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "AtomicWidth width"
      ],
      "return_type": "void",
      "logic": "Emits an atomic load instruction with specified width."
    },
    {
      "name": "AtomicStoreParametersOf",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node"
      ],
      "return_type": "AtomicStoreParameters",
      "logic": "Gets AtomicStoreParameters of store op."
    },
    {
      "name": "VisitAtomicStore",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "AtomicWidth width"
      ],
      "return_type": "void",
      "logic": "Emits an atomic store instruction with specified width."
    },
    {
      "name": "VisitAtomicExchange",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "ArchOpcode opcode",
        "AtomicWidth width",
        "MemoryAccessKind access_kind"
      ],
      "return_type": "void",
      "logic": "Emits an atomic exchange instruction."
    },
    {
      "name": "VisitAtomicCompareExchange",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "ArchOpcode opcode",
        "AtomicWidth width",
        "MemoryAccessKind access_kind"
      ],
      "return_type": "void",
      "logic": "Emits an atomic compare exchange instruction."
    },
    {
      "name": "VisitAtomicBinop",
      "parameters": [
        "InstructionSelectorT* selector",
        "OpIndex node",
        "ArchOpcode opcode",
        "AtomicWidth width",
        "MemoryAccessKind access_kind"
      ],
      "return_type": "void",
      "logic": "Emits an atomic binary operation instruction."
    }
  ]
}