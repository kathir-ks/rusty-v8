{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/revectorizer.h",
  "imports": [
    "<vector>",
    "src/base/small-vector.h",
    "src/compiler/linear-scheduler.h",
    "src/compiler/machine-graph.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-marker.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/schedule.h",
    "src/compiler/turbofan-graph.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "MemoryOffsetComparer",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const Node* lhs",
            "const Node* rhs"
          ],
          "return_type": "bool",
          "logic": "Compares two nodes based on their memory offsets (likely for determining the order of memory operations)."
        }
      ]
    },
    {
      "name": "PackNode",
      "properties": [
        "nodes_",
        "operands_",
        "revectorized_node_"
      ],
      "methods": [
        {
          "name": "PackNode",
          "parameters": [
            "Zone* zone",
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "explicit PackNode",
          "logic": "Constructor for PackNode. Initializes the `nodes_` vector with the given `node_group`, and `revectorized_node_` to null."
        },
        {
          "name": "Nodes",
          "parameters": [],
          "return_type": "const ZoneVector<Node*>&",
          "logic": "Returns the vector of nodes contained in the PackNode."
        },
        {
          "name": "IsSame",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if the PackNode contains the same nodes as the provided `node_group`."
        },
        {
          "name": "RevectorizedNode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the node that this PackNode has been revectorized into (or null if not yet revectorized)."
        },
        {
          "name": "SetRevectorizedNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Sets the node that this PackNode has been revectorized into."
        },
        {
          "name": "GetOperand",
          "parameters": [
            "size_t index"
          ],
          "return_type": "PackNode*",
          "logic": "Returns the operand PackNode at the specified index."
        },
        {
          "name": "GetOperandsSize",
          "parameters": [],
          "return_type": "ZoneVector<PackNode*>::size_type",
          "logic": "Returns the number of operands in the PackNode."
        },
        {
          "name": "SetOperand",
          "parameters": [
            "size_t index",
            "PackNode* pnode"
          ],
          "return_type": "void",
          "logic": "Sets the operand PackNode at the specified index."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the contents of the PackNode (likely for debugging)."
        }
      ]
    },
    {
      "name": "SLPTree",
      "properties": [
        "zone_",
        "graph_",
        "root_",
        "on_stack_",
        "stack_",
        "node_to_packnode_",
        "scheduler_"
      ],
      "methods": [
        {
          "name": "SLPTree",
          "parameters": [
            "Zone* zone",
            "TFGraph* graph"
          ],
          "return_type": "explicit SLPTree",
          "logic": "Constructor for SLPTree. Initializes members, including the scheduler."
        },
        {
          "name": "BuildTree",
          "parameters": [
            "const ZoneVector<Node*>& roots"
          ],
          "return_type": "PackNode*",
          "logic": "Builds the SLP tree starting from the given root nodes."
        },
        {
          "name": "DeleteTree",
          "parameters": [],
          "return_type": "void",
          "logic": "Deletes the SLP tree, freeing allocated memory."
        },
        {
          "name": "GetPackNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "PackNode*",
          "logic": "Retrieves the PackNode associated with a given node."
        },
        {
          "name": "Print",
          "parameters": [
            "const char* info"
          ],
          "return_type": "void",
          "logic": "Prints information about the SLP tree (likely for debugging)."
        },
        {
          "name": "ForEach",
          "parameters": [
            "FunctionType callback"
          ],
          "return_type": "void",
          "logic": "Iterates through the SLP tree and applies the given callback function to each PackNode."
        },
        {
          "name": "GetEarlySchedulePosition",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Returns the earliest possible schedule position for the given node according to the scheduler."
        },
        {
          "name": "BuildTreeRec",
          "parameters": [
            "const ZoneVector<Node*>& node_group",
            "unsigned depth"
          ],
          "return_type": "PackNode*",
          "logic": "Recursive part of the BuildTree function, responsible for exploring potential PackNodes."
        },
        {
          "name": "NewPackNode",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "PackNode*",
          "logic": "Creates a new PackNode from a group of nodes."
        },
        {
          "name": "NewPackNodeAndRecurs",
          "parameters": [
            "const ZoneVector<Node*>& node_group",
            "int start_index",
            "int count",
            "unsigned depth"
          ],
          "return_type": "PackNode*",
          "logic": "Creates a new PackNode and recursively calls BuildTreeRec on its operands."
        },
        {
          "name": "CanBePacked",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if a group of nodes can be packed into a PackNode (e.g., same basic block, independent)."
        },
        {
          "name": "PopStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Pops the top element off the stack used for cycle detection."
        },
        {
          "name": "PushStack",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "void",
          "logic": "Pushes a group of nodes onto the stack used for cycle detection."
        },
        {
          "name": "ClearStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the stack used for cycle detection."
        },
        {
          "name": "OnStack",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node is currently on the stack, indicating a cycle."
        },
        {
          "name": "AllOnStack",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if all nodes in the given group are currently on the stack."
        },
        {
          "name": "StackTopIsPhi",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the top of the stack is a phi node. Potentially related to cycle detection or special handling of phi nodes."
        },
        {
          "name": "TryReduceLoadChain",
          "parameters": [
            "const ZoneVector<Node*>& loads"
          ],
          "return_type": "void",
          "logic": "Attempts to reduce a chain of load operations into a single operation, potentially by combining adjacent loads."
        },
        {
          "name": "IsSideEffectFreeLoad",
          "parameters": [
            "const ZoneVector<Node*>& node_group"
          ],
          "return_type": "bool",
          "logic": "Checks if the nodes in a group are side-effect-free loads, which is important for safe vectorization."
        },
        {
          "name": "SameBasicBlock",
          "parameters": [
            "Node* node0",
            "Node* node1"
          ],
          "return_type": "bool",
          "logic": "Checks if two nodes belong to the same basic block, using the linear scheduler."
        }
      ]
    },
    {
      "name": "Revectorizer",
      "properties": [
        "zone_",
        "graph_",
        "mcgraph_",
        "group_of_stores_",
        "sources_",
        "slp_tree_",
        "source_positions_",
        "support_simd256_",
        "node_observer_for_test_"
      ],
      "methods": [
        {
          "name": "Revectorizer",
          "parameters": [
            "Zone* zone",
            "TFGraph* graph",
            "MachineGraph* mcgraph",
            "SourcePositionTable* source_positions"
          ],
          "return_type": "Revectorizer",
          "logic": "Constructor for Revectorizer. Initializes the members."
        },
        {
          "name": "DetectCPUFeatures",
          "parameters": [],
          "return_type": "void",
          "logic": "Detects the CPU features supported by the target architecture (e.g., AVX2, which enables SIMD256 operations)."
        },
        {
          "name": "TryRevectorize",
          "parameters": [
            "const char* name"
          ],
          "return_type": "bool",
          "logic": "Attempts to revectorize the code, potentially performing several steps like collecting seeds, building the SLP tree, and deciding on vectorization."
        },
        {
          "name": "CollectSeeds",
          "parameters": [],
          "return_type": "void",
          "logic": "Collects potential starting points (seeds) for the SLP tree, such as groups of consecutive stores."
        },
        {
          "name": "ReduceStoreChains",
          "parameters": [
            "ZoneMap<Node*, StoreNodeSet>* store_chains"
          ],
          "return_type": "bool",
          "logic": "Reduces chains of store operations, likely by combining adjacent stores."
        },
        {
          "name": "ReduceStoreChain",
          "parameters": [
            "const ZoneVector<Node*>& Stores"
          ],
          "return_type": "bool",
          "logic": "Reduces a chain of store operations into a single operation, if possible."
        },
        {
          "name": "PrintStores",
          "parameters": [
            "ZoneMap<Node*, StoreNodeSet>* store_chains"
          ],
          "return_type": "void",
          "logic": "Prints information about store chains (likely for debugging)."
        },
        {
          "name": "GetPackNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "PackNode*",
          "logic": "Retrieves the PackNode associated with a given node."
        },
        {
          "name": "DecideVectorize",
          "parameters": [],
          "return_type": "bool",
          "logic": "Decides whether to perform vectorization based on cost estimation or other heuristics."
        },
        {
          "name": "SetEffectInput",
          "parameters": [
            "PackNode* pnode",
            "int index",
            "Node*& nput"
          ],
          "return_type": "void",
          "logic": "Sets the effect input for a PackNode, connecting data dependencies for vectorized operations."
        },
        {
          "name": "SetMemoryOpInputs",
          "parameters": [
            "base::SmallVector<Node*, 2>& inputs",
            "PackNode* pnode",
            "int index"
          ],
          "return_type": "void",
          "logic": "Sets the input nodes for a memory operation, taking into account the PackNode structure."
        },
        {
          "name": "VectorizeTree",
          "parameters": [
            "PackNode* pnode"
          ],
          "return_type": "Node*",
          "logic": "Performs the actual vectorization of a PackNode, creating a new SIMD256 node."
        },
        {
          "name": "UpdateSources",
          "parameters": [],
          "return_type": "void",
          "logic": "Updates the source position table after vectorization."
        }
      ]
    }
  ],
  "functions": []
}