{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/graph-builder.cc",
  "imports": [
    "src/compiler/turboshaft/graph-builder.h",
    "limits",
    "numeric",
    "optional",
    "string_view",
    "src/base/container-utils.h",
    "src/base/logging.h",
    "src/base/safe-conversions.h",
    "src/base/small-vector.h",
    "src/base/vector.h",
    "src/codegen/bailout-reason.h",
    "src/codegen/machine-type.h",
    "src/common/globals.h",
    "src/compiler/common-operator.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/fast-api-calls.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-aux-data.h",
    "src/compiler/node-matchers.h",
    "src/compiler/node-origin-table.h",
    "src/compiler/node-properties.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/compiler/schedule.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/state-values-utils.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/deopt-data.h",
    "src/compiler/turboshaft/explicit-truncation-reducer.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/opmasks.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/variable-reducer.h",
    "src/flags/flags.h",
    "src/heap/factory-inl.h",
    "src/objects/js-objects.h",
    "src/objects/map.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "GraphBuilder",
      "properties": [
        "phase_zone",
        "schedule",
        "linkage",
        "isolate",
        "broker",
        "graph_zone",
        "assembler",
        "source_positions",
        "origins",
        "js_wasm_calls_sidetable",
        "pipeline_kind",
        "op_mapping",
        "block_mapping",
        "inside_region"
      ],
      "methods": [
        {
          "name": "GraphBuilder",
          "parameters": [
            "PipelineData* data",
            "Zone* phase_zone",
            "Schedule& schedule",
            "Linkage* linkage",
            "JsWasmCallsSidetable* js_wasm_calls_sidetable"
          ],
          "return_type": "void",
          "logic": "Constructor for the GraphBuilder class. Initializes member variables with data from the PipelineData, schedule, linkage, and sidetable."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "std::optional<BailoutReason>",
          "logic": "The main method that builds the Turboshaft graph from the TurboFan schedule. Iterates through basic blocks, maps TurboFan nodes to Turboshaft operations, and handles control flow."
        },
        {
          "name": "Asm",
          "parameters": [],
          "return_type": "AssemblerT&",
          "logic": "Returns a reference to the assembler object."
        },
        {
          "name": "Map",
          "parameters": [
            "Node* old_node"
          ],
          "return_type": "V<T>",
          "logic": "Maps a TurboFan node to its corresponding Turboshaft operation index (OpIndex) or V<T> using the 'op_mapping' node aux data. Performs a cast for the V<T> version. Includes a DCHECK for validity."
        },
        {
          "name": "Map",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "Block*",
          "logic": "Maps a TurboFan BasicBlock to its corresponding Turboshaft Block using the 'block_mapping' vector. Includes a DCHECK to ensure result isn't null."
        },
        {
          "name": "FixLoopPhis",
          "parameters": [
            "BasicBlock* loop"
          ],
          "return_type": "void",
          "logic": "Fixes loop Phis after the initial mapping by replacing the PendingLoopPhiOp with a concrete PhiOp."
        },
        {
          "name": "ProcessDeoptInput",
          "parameters": [
            "FrameStateData::Builder* builder",
            "Node* input",
            "MachineType type"
          ],
          "return_type": "void",
          "logic": "Processes an input node of a frame state and adds it to the FrameStateData builder."
        },
        {
          "name": "ProcessStateValues",
          "parameters": [
            "FrameStateData::Builder* builder",
            "Node* state_values"
          ],
          "return_type": "void",
          "logic": "Processes a state values node (list of inputs) and adds them to the FrameStateData builder."
        },
        {
          "name": "BuildFrameStateData",
          "parameters": [
            "FrameStateData::Builder* builder",
            "compiler::FrameState frame_state"
          ],
          "return_type": "void",
          "logic": "Builds the FrameStateData from the provided compiler FrameState."
        },
        {
          "name": "BlockKind",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "Block::Kind",
          "logic": "Determines the kind of Turboshaft Block from a given TurboFan BasicBlock by inspecting the first node in the block."
        },
        {
          "name": "Process",
          "parameters": [
            "Node* node",
            "BasicBlock* block",
            "const base::SmallVector<int, 16>& predecessor_permutation",
            "OpIndex& dominating_frame_state",
            "std::optional<BailoutReason>* bailout",
            "bool is_final_control = false"
          ],
          "return_type": "OpIndex",
          "logic": "Processes a single TurboFan node within a basic block and generates corresponding Turboshaft operations.  Handles different opcodes, including arithmetic, loads, stores, control flow, and conversions."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsValidSmi",
      "parameters": [
        "intptr_t c"
      ],
      "return_type": "bool",
      "logic": "Checks if a given integer value 'c' is a valid Smi (Small Integer)."
    }
  ]
}