{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/load-elimination.cc",
  "imports": [
    "src/compiler/load-elimination.h",
    "optional",
    "src/compiler/access-builder.h",
    "src/compiler/common-operator.h",
    "src/compiler/js-graph.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/node-properties.h",
    "src/heap/factory.h",
    "src/objects/objects-inl.h"
  ],
  "classes": [
    {
      "name": "LoadElimination",
      "properties": [
        "node_states_",
        "empty_state_"
      ],
      "methods": [
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces the given node based on its opcode. This is the main entry point for the load elimination algorithm.  It examines various opcodes and dispatches to specific reduce functions (e.g., ReduceMapGuard, ReduceLoadField) to perform the actual reduction."
        },
        {
          "name": "UpdateState",
          "parameters": [
            "Node* node",
            "AbstractState const* state"
          ],
          "return_type": "Reduction",
          "logic": "Updates the abstract state associated with the given node. If the state has changed, it marks the node as changed."
        },
        {
          "name": "ComputeLoopState",
          "parameters": [
            "Node* node",
            "AbstractState const* state"
          ],
          "return_type": "AbstractState const*",
          "logic": "Computes the abstract state at the end of a loop, taking into account side effects that occur within the loop. This involves iterating through the loop's nodes and invalidating relevant parts of the abstract state."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns the Factory."
        },
        {
          "name": "ReduceMapGuard",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a MapGuard node. Attempts to prove that the object's map is already in the expected set of maps, and replaces the node with its effect input if true. Otherwise, it updates the state with the map information."
        },
        {
          "name": "ReduceCheckMaps",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckMaps node. Similar to ReduceMapGuard, but for the CheckMaps opcode."
        },
        {
          "name": "ReduceCompareMaps",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CompareMaps node. If the object's map is in the expected set, the comparison can be replaced with `true`."
        },
        {
          "name": "ReduceEnsureWritableFastElements",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an EnsureWritableFastElements node. Determines if the elements array is already writable, and updates the state to reflect that the object's elements are writable."
        },
        {
          "name": "ReduceMaybeGrowFastElements",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a MaybeGrowFastElements node. Updates the state with information about the elements kind after the grow, and kills the information about the old elements."
        },
        {
          "name": "ReduceTransitionElementsKind",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TransitionElementsKind node. Kills the map information and sets the maps to the target."
        },
        {
          "name": "ReduceTransitionElementsKindOrCheckMap",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TransitionElementsKindOrCheckMap node. Kills the map information and sets the maps to the target."
        },
        {
          "name": "ReduceLoadField",
          "parameters": [
            "Node* node",
            "FieldAccess const& access"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadField node. Attempts to load the field's value from the abstract state, and updates the state with the loaded value. Replaces the load with a constant if available."
        },
        {
          "name": "ReduceStoreField",
          "parameters": [
            "Node* node",
            "FieldAccess const& access"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreField node. Kills any existing field information in the state and updates it with the new value. Also adds new map information if storing to the map field."
        },
        {
          "name": "ReduceLoadElement",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadElement node. Attempts to load the element's value from the abstract state and updates state with the loaded value."
        },
        {
          "name": "ReduceStoreElement",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreElement node. Kills existing element information and updates the state with the new value."
        },
        {
          "name": "ReduceTransitionAndStoreElement",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces TransitionAndStoreElement nodes. Clears potentially aliasing Maps and Elements on the object, because we don't know the final Map yet."
        },
        {
          "name": "ReduceStoreTypedElement",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StoreTypedElement node. Currently, only updates the state (no actual reduction logic)."
        },
        {
          "name": "ReduceEffectPhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an EffectPhi node. Merges the abstract states from its inputs, taking into account loop headers. Merges map information from phi use nodes if same across all inputs."
        },
        {
          "name": "ReduceStart",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Start node. Initializes the abstract state to empty_state() and updates with state."
        },
        {
          "name": "ReduceOtherNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces other nodes. If the node has a single effect input, it propagates the abstract state from the input, killing information if the node has side effects."
        },
        {
          "name": "ComputeLoopStateForStoreField",
          "parameters": [
            "Node* current",
            "LoadElimination::AbstractState const* state",
            "FieldAccess const& access"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Computes the abstract state at the end of a StoreField inside of a loop, taking into account side effects that occur within the loop. This involves invalidating relevant parts of the abstract state."
        },
        {
          "name": "FieldIndexOf",
          "parameters": [
            "int offset",
            "int representation_size"
          ],
          "return_type": "LoadElimination::IndexRange",
          "logic": "Calculates the Field Index for access."
        },
        {
          "name": "FieldIndexOf",
          "parameters": [
            "FieldAccess const& access"
          ],
          "return_type": "LoadElimination::IndexRange",
          "logic": "Calculates the Field Index for access."
        },
        {
          "name": "UpdateStateForPhi",
          "parameters": [
            "AbstractState const* state",
            "Node* effect_phi",
            "Node* phi"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Updates the maps information from phi use nodes if same across all inputs."
        }
      ]
    },
    {
      "name": "LoadElimination::AbstractState",
      "properties": [
        "elements_",
        "fields_",
        "const_fields_",
        "maps_",
        "fields_count_",
        "const_fields_count_",
        "empty_state_"
      ],
      "methods": [
        {
          "name": "Equals",
          "parameters": [
            "AbstractState const* that"
          ],
          "return_type": "bool",
          "logic": "Checks if two abstract states are equal."
        },
        {
          "name": "LookupMaps",
          "parameters": [
            "Node* object",
            "ZoneRefSet<Map>* object_map"
          ],
          "return_type": "bool",
          "logic": "Looks up the map information for a given object."
        },
        {
          "name": "SetMaps",
          "parameters": [
            "Node* object",
            "ZoneRefSet<Map> maps",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Sets the map information for a given object, creating a new abstract state."
        },
        {
          "name": "KillMaps",
          "parameters": [
            "const AliasStateInfo& alias_info",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills map information based on the provided alias info."
        },
        {
          "name": "LookupElement",
          "parameters": [
            "Node* object",
            "Node* index",
            "MachineRepresentation representation"
          ],
          "return_type": "Node*",
          "logic": "Looks up an element in the abstract state based on object, index, and representation."
        },
        {
          "name": "AddElement",
          "parameters": [
            "Node* object",
            "Node* index",
            "Node* value",
            "MachineRepresentation representation",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Adds an element to the abstract state, creating a new abstract state."
        },
        {
          "name": "KillElement",
          "parameters": [
            "Node* object",
            "Node* index",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills an element in the abstract state based on object and index, creating a new abstract state."
        },
        {
          "name": "AddField",
          "parameters": [
            "Node* object",
            "IndexRange index_range",
            "LoadElimination::FieldInfo info",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Adds a field to the abstract state, creating a new abstract state."
        },
        {
          "name": "KillField",
          "parameters": [
            "Node* object",
            "IndexRange index_range",
            "MaybeHandle<Name> name",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills a field in the abstract state based on object and name, creating a new abstract state."
        },
        {
          "name": "KillConstField",
          "parameters": [
            "Node* object",
            "IndexRange index_range",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills a constant field in the abstract state based on object, creating a new abstract state."
        },
        {
          "name": "KillFields",
          "parameters": [
            "Node* object",
            "MaybeHandle<Name> name",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills potentially aliasing fields from the state, and return a new abstract state."
        },
        {
          "name": "KillAll",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills all information in the abstract state, creating a new abstract state. Except const field data."
        },
        {
          "name": "LookupField",
          "parameters": [
            "Node* object",
            "IndexRange index_range",
            "ConstFieldInfo const_field_info"
          ],
          "return_type": "LoadElimination::FieldInfo const*",
          "logic": "Looks up a field in the abstract state based on object, index_range, and const_field_info."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the contents of the abstract state for debugging."
        },
        {
          "name": "FieldsEquals",
          "parameters": [
            "AbstractFields const& this_fields",
            "AbstractFields const& that_fields"
          ],
          "return_type": "bool",
          "logic": "Check if two sets of AbstractFields are equal."
        },
        {
          "name": "FieldsMerge",
          "parameters": [
            "AbstractFields* this_fields",
            "AbstractFields const& that_fields",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Merges two sets of AbstractFields."
        },
        {
          "name": "Merge",
          "parameters": [
            "AbstractState const* that",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Merges this abstract state with another, updating this state in-place."
        },
        {
          "name": "KillMaps",
          "parameters": [
            "Node* object",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills map information based on the given object node."
        },
        {
          "name": "KillField",
          "parameters": [
            "const AliasStateInfo& alias_info",
            "IndexRange index_range",
            "MaybeHandle<Name> name",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Kills a field in the abstract state based on the given alias info, index range, and name, creating a new abstract state."
        }
      ]
    },
    {
      "name": "LoadElimination::AbstractStateForEffectNodes",
      "properties": [
        "info_for_node_"
      ],
      "methods": [
        {
          "name": "Get",
          "parameters": [
            "Node* node"
          ],
          "return_type": "LoadElimination::AbstractState const*",
          "logic": "Retrieves the abstract state associated with a given node."
        },
        {
          "name": "Set",
          "parameters": [
            "Node* node",
            "AbstractState const* state"
          ],
          "return_type": "void",
          "logic": "Sets the abstract state associated with a given node."
        }
      ]
    },
    {
      "name": "LoadElimination::AbstractElements",
      "properties": [
        "elements_",
        "next_index_"
      ],
      "methods": [
        {
          "name": "Lookup",
          "parameters": [
            "Node* object",
            "Node* index",
            "MachineRepresentation representation"
          ],
          "return_type": "Node*",
          "logic": "Looks up the value of an element in the abstract state."
        },
        {
          "name": "Kill",
          "parameters": [
            "Node* object",
            "Node* index",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractElements const*",
          "logic": "Kills elements that might alias the object, index, and returns a new AbstractElements object."
        },
        {
          "name": "Equals",
          "parameters": [
            "AbstractElements const* that"
          ],
          "return_type": "bool",
          "logic": "Checks if two AbstractElements are equal."
        },
        {
          "name": "Merge",
          "parameters": [
            "AbstractElements const* that",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractElements const*",
          "logic": "Merges two AbstractElements and returns a new object."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the AbstractElements content for debugging purposes."
        },
        {
          "name": "Extend",
          "parameters": [
            "Node* object",
            "Node* index",
            "Node* value",
            "MachineRepresentation representation",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractElements const*",
          "logic": "Adds a new element to the AbstractElements."
        }
      ]
    },
    {
      "name": "LoadElimination::AbstractField",
      "properties": [
        "info_for_node_"
      ],
      "methods": [
        {
          "name": "Lookup",
          "parameters": [
            "Node* object"
          ],
          "return_type": "LoadElimination::FieldInfo const*",
          "logic": "Looks up a field in the abstract state based on the object."
        },
        {
          "name": "Kill",
          "parameters": [
            "const AliasStateInfo& alias_info",
            "MaybeHandle<Name> name",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractField const*",
          "logic": "Kills potentially aliasing fields, returning a new AbstractField object."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the AbstractField content for debugging purposes."
        },
        {
          "name": "Extend",
          "parameters": [
            "Node* object",
            "LoadElimination::FieldInfo info",
            "Zone* zone",
            "int& fields_count_"
          ],
          "return_type": "LoadElimination::AbstractField*",
          "logic": "Adds a new information to AbstractField."
        },
        {
          "name": "KillConst",
          "parameters": [
            "Node* object",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractField const*",
          "logic": "Kills information related to objects that must alias."
        },
        {
          "name": "Equals",
          "parameters": [
            "AbstractField const* that"
          ],
          "return_type": "bool",
          "logic": "Compares this AbstractField with another."
        },
        {
          "name": "Merge",
          "parameters": [
            "AbstractField const* that",
            "Zone* zone",
            "int* fields_count_"
          ],
          "return_type": "LoadElimination::AbstractField const*",
          "logic": "Merges two AbstractField information."
        },
        {
          "name": "count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns size of info_for_node_"
        }
      ]
    },
    {
      "name": "LoadElimination::AbstractMaps",
      "properties": [
        "info_for_node_"
      ],
      "methods": [
        {
          "name": "Lookup",
          "parameters": [
            "Node* object",
            "ZoneRefSet<Map>* object_maps"
          ],
          "return_type": "bool",
          "logic": "Looks up the maps for a given object."
        },
        {
          "name": "Kill",
          "parameters": [
            "const AliasStateInfo& alias_info",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractMaps const*",
          "logic": "Kills map information based on the provided alias info."
        },
        {
          "name": "Merge",
          "parameters": [
            "AbstractMaps const* that",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractMaps const*",
          "logic": "Merges two AbstractMaps, creating a new AbstractMaps."
        },
        {
          "name": "Extend",
          "parameters": [
            "Node* object",
            "ZoneRefSet<Map> maps",
            "Zone* zone"
          ],
          "return_type": "LoadElimination::AbstractMaps const*",
          "logic": "Extends the abstract maps with a new object and maps, creating a new AbstractMaps."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the AbstractMaps for debugging purposes."
        },
        {
          "name": "Equals",
          "parameters": [
            "AbstractMaps const* that"
          ],
          "return_type": "bool",
          "logic": "Compares this AbstractMaps with another."
        }
      ]
    },
    {
      "name": "LoadElimination::AliasStateInfo",
      "properties": [
        "state_",
        "object_",
        "map_"
      ],
      "methods": [
        {
          "name": "MayAlias",
          "parameters": [
            "Node* other"
          ],
          "return_type": "bool",
          "logic": "Determines whether the object associated with this AliasStateInfo may alias with another object."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsRename",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if a node is a 'rename' node (e.g., CheckHeapObject, FinishRegion, TypeGuard) that simply forwards a value.  Returns false if node is dead."
    },
    {
      "name": "ResolveRenames",
      "parameters": [
        "Node* node"
      ],
      "return_type": "Node*",
      "logic": "Follows a chain of 'rename' nodes to find the original node."
    },
    {
      "name": "MayAlias",
      "parameters": [
        "Node* a",
        "Node* b"
      ],
      "return_type": "bool",
      "logic": "Determines if two nodes might alias each other (i.e., might refer to the same memory location)."
    },
    {
      "name": "MustAlias",
      "parameters": [
        "Node* a",
        "Node* b"
      ],
      "return_type": "bool",
      "logic": "Determines if two nodes must alias each other (i.e., definitely refer to the same memory location)."
    },
    {
      "name": "IsCompatible",
      "parameters": [
        "MachineRepresentation r1",
        "MachineRepresentation r2"
      ],
      "return_type": "bool",
      "logic": "Determines if two machine representations are compatible for load elimination purposes. They are compatible if they are the same or if they are both tagged."
    },
    {
      "name": "MayAlias",
      "parameters": [
        "MaybeHandle<Name> x",
        "MaybeHandle<Name> y"
      ],
      "return_type": "bool",
      "logic": "Decide aliasing of names."
    }
  ]
}