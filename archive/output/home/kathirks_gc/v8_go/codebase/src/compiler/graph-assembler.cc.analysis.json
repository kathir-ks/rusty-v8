{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/graph-assembler.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/graph-assembler.cc\",\n  \"imports\": [\n    \"src/compiler/graph-assembler.h\",\n    \"optional\",\n    \"src/base/container-utils.h\",\n    \"src/codegen/callable.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/codegen/tnode.h\",\n    \"src/common/globals.h\",\n    \"src/compiler/access-builder.h\",\n    \"src/compiler/common-operator.h\",\n    \"src/compiler/graph-reducer.h\",\n    \"src/compiler/linkage.h\",\n    \"src/compiler/type-cache.h\",\n    \"src/deoptimizer/deoptimize-reason.h\",\n    \"src/objects/elements-kind.h\",\n    \"src/objects/heap-number.h\",\n    \"src/objects/instance-type.h\",\n    \"src/objects/js-array-buffer.h\",\n    \"src/objects/oddball.h\",\n    \"src/objects/string.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"GraphAssembler::BlockInlineReduction\",\n      \"properties\": [\n        \"gasm_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"BlockInlineReduction\",\n          \"parameters\": [\n            \"GraphAssembler* gasm\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that blocks inline reductions in the given GraphAssembler by setting inline_reductions_blocked_ to true.\"\n        },\n        {\n          \"name\": \"~BlockInlineReduction\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Destructor that unblocks inline reductions in the GraphAssembler by setting inline_reductions_blocked_ to false.\"\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"GraphAssembler::GraphAssembler\",\n      \"parameters\": [\n        \"MachineGraph* mcgraph\",\n        \"Zone* zone\",\n        \"BranchSemantics default_branch_semantics\",\n        \"std::optional<NodeChangedCallback> node_changed_callback\",\n        \"bool mark_loop_exits\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Constructor for the GraphAssembler class. Initializes the member variables including the temp zone, machine graph, default branch semantics, effect, control, node changed callback, inline reducers, loop headers, and loop exit marking.\"\n    },\n    {\n      \"name\": \"GraphAssembler::~GraphAssembler\",\n      \"parameters\": [],\n      \"return_type\": \"void\",\n      \"logic\": \"Destructor for the GraphAssembler class. Checks that the loop nesting level is 0.\"\n    },\n    {\n      \"name\": \"GraphAssembler::IntPtrConstant\",\n      \"parameters\": [\n        \"intptr_t value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an IntPtr constant node in the machine graph and adds a cloned node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UintPtrConstant\",\n      \"parameters\": [\n        \"uintptr_t value\"\n      ],\n      \"return_type\": \"TNode<UintPtrT>\",\n      \"logic\": \"Creates a UintPtr constant node in the machine graph and adds a cloned node. Performs unchecked cast.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Int32Constant\",\n      \"parameters\": [\n        \"int32_t value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an Int32 constant node in the machine graph and adds a cloned node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Uint32Constant\",\n      \"parameters\": [\n        \"uint32_t value\"\n      ],\n      \"return_type\": \"TNode<Uint32T>\",\n      \"logic\": \"Creates a Uint32 constant node in the machine graph and adds a cloned node. Performs unchecked cast.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Int64Constant\",\n      \"parameters\": [\n        \"int64_t value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an Int64 constant node in the machine graph and adds a cloned node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Uint64Constant\",\n      \"parameters\": [\n        \"uint64_t value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a Uint64 constant node in the machine graph and adds a cloned node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UniqueIntPtrConstant\",\n      \"parameters\": [\n        \"intptr_t value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a unique IntPtr constant node, using either Int64 or Int32 depending on the machine architecture.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::SmiConstant\",\n      \"parameters\": [\n        \"int32_t value\"\n      ],\n      \"return_type\": \"TNode<Smi>\",\n      \"logic\": \"Creates a Smi constant node in the JS graph and adds a cloned node. Performs unchecked cast.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Float64Constant\",\n      \"parameters\": [\n        \"double value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a Float64 constant node in the machine graph and adds a cloned node.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::HeapConstant\",\n      \"parameters\": [\n        \"Handle<HeapObject> object\"\n      ],\n      \"return_type\": \"TNode<HeapObject>\",\n      \"logic\": \"Creates a HeapObject constant node in the JS graph (no hole) and adds a cloned node. Performs unchecked cast.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::Constant\",\n      \"parameters\": [\n        \"ObjectRef ref\"\n      ],\n      \"return_type\": \"TNode<Object>\",\n      \"logic\": \"Creates an Object constant node in the JS graph (no hole) and adds a cloned node. Performs unchecked cast.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberConstant\",\n      \"parameters\": [\n        \"double value\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Creates a Number constant node in the JS graph (no hole) and adds a cloned node. Performs unchecked cast.\"\n    },\n    {\n      \"name\": \"GraphAssembler::ExternalConstant\",\n      \"parameters\": [\n        \"ExternalReference ref\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an external constant node and adds a cloned node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::IsolateField\",\n      \"parameters\": [\n        \"IsolateFieldId id\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an external constant node for an isolate field ID.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Parameter\",\n      \"parameters\": [\n        \"int index\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a parameter node for a given index.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::CEntryStubConstant\",\n      \"parameters\": [\n        \"int result_size\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a CEntryStub constant node in the JS graph and adds a cloned node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::LoadFramePointer\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a LoadFramePointer node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::LoadRootRegister\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a LoadRootRegister node.\"\n    },\n    {\n      \"name\": \"GraphAssembler::LoadStackPointer\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a LoadStackPointer node, with effect.\"\n    },\n    {\n      \"name\": \"GraphAssembler::SetStackPointer\",\n      \"parameters\": [\n        \"Node* node\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a SetStackPointer node, with effect.\"\n    },\n    {\n      \"name\": \"GraphAssembler::LoadHeapNumberValue\",\n      \"parameters\": [\n        \"Node* heap_number\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Loads the value of a HeapNumber.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NameConstant\",\n      \"parameters\": [],\n      \"return_type\": \"TNode<Type>\",\n      \"logic\": \"Creates singletons for JSGraphAssembler like TrueConstant, FalseConstant etc.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::IsName\",\n      \"parameters\": [\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks value is equal to constant, eg. IsTrue, IsFalse etc\"\n    },\n    {\n      \"name\": \"GraphAssembler::Name\",\n      \"parameters\": [\n        \"Node* input\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Machine unary operators like Word32ReverseBytes etc.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Name\",\n      \"parameters\": [\n        \"Node* left\",\n        \"Node* right\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Machine binary operators like Word32And, Word32Or, Int32Add etc.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Name\",\n      \"parameters\": [\n        \"SloppyTNode<Left> left\",\n        \"SloppyTNode<Right> right\"\n      ],\n      \"return_type\": \"TNode<Result>\",\n      \"logic\": \"Machine binary operators, like Word32And, Word32Or, Int32Add etc. for TNodes\"\n    },\n    {\n      \"name\": \"GraphAssembler::UintPtrLessThan\",\n      \"parameters\": [\n        \"TNode<UintPtrT> left\",\n        \"TNode<UintPtrT> right\"\n      ],\n      \"return_type\": \"TNode<BoolT>\",\n      \"logic\": \"Compares two UintPtrT values and returns a boolean result for less than comparison.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UintPtrLessThanOrEqual\",\n      \"parameters\": [\n        \"TNode<UintPtrT> left\",\n        \"TNode<UintPtrT> right\"\n      ],\n      \"return_type\": \"TNode<BoolT>\",\n      \"logic\": \"Compares two UintPtrT values and returns a boolean result for less than or equal to comparison.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UintPtrAdd\",\n      \"parameters\": [\n        \"TNode<UintPtrT> left\",\n        \"TNode<UintPtrT> right\"\n      ],\n      \"return_type\": \"TNode<UintPtrT>\",\n      \"logic\": \"Adds two UintPtrT values and returns the result.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UintPtrSub\",\n      \"parameters\": [\n        \"TNode<UintPtrT> left\",\n        \"TNode<UintPtrT> right\"\n      ],\n      \"return_type\": \"TNode<UintPtrT>\",\n      \"logic\": \"Subtracts two UintPtrT values and returns the result.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UintPtrDiv\",\n      \"parameters\": [\n        \"TNode<UintPtrT> left\",\n        \"TNode<UintPtrT> right\"\n      ],\n      \"return_type\": \"TNode<UintPtrT>\",\n      \"logic\": \"Divides two UintPtrT values and returns the result.\"\n    },\n    {\n      \"name\": \"GraphAssembler::ChangeUint32ToUintPtr\",\n      \"parameters\": [\n        \"SloppyTNode<Uint32T> value\"\n      ],\n      \"return_type\": \"TNode<UintPtrT>\",\n      \"logic\": \"Changes Uint32T to UintPtrT depending on system pointer size\"\n    },\n    {\n      \"name\": \"GraphAssembler::Name\",\n      \"parameters\": [\n        \"Node* left\",\n        \"Node* right\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Checked binop operations such as Int32AddWithOverflow, Int32MulWithOverflow etc.\"\n    },\n    {\n      \"name\": \"GraphAssembler::IntPtrEqual\",\n      \"parameters\": [\n        \"Node* left\",\n        \"Node* right\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Compares two IntPtr values for equality.\"\n    },\n    {\n      \"name\": \"GraphAssembler::TaggedEqual\",\n      \"parameters\": [\n        \"Node* left\",\n        \"Node* right\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Compares two tagged values for equality, using either Word32Equal or WordEqual depending on pointer compression.\"\n    },\n    {\n      \"name\": \"GraphAssembler::SmiSub\",\n      \"parameters\": [\n        \"Node* left\",\n        \"Node* right\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Subtracts two Smi values, using either Int32Sub or IntSub depending on pointer compression.\"\n    },\n    {\n      \"name\": \"GraphAssembler::SmiLessThan\",\n      \"parameters\": [\n        \"Node* left\",\n        \"Node* right\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Compares two Smi values for less than, using either Int32LessThan or IntLessThan depending on pointer compression.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Float64RoundDown\",\n      \"parameters\": [\n        \"Node* value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Rounds a Float64 value down.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Float64RoundTruncate\",\n      \"parameters\": [\n        \"Node* value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Truncates a Float64 value.\"\n    },\n    {\n      \"name\": \"GraphAssembler::TruncateFloat64ToInt64\",\n      \"parameters\": [\n        \"Node* value\",\n        \"TruncateKind kind\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Truncates a Float64 value to an Int64.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Projection\",\n      \"parameters\": [\n        \"int index\",\n        \"Node* value\",\n        \"Node* ctrl\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a projection node.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::Allocate\",\n      \"parameters\": [\n        \"AllocationType allocation\",\n        \"Node* size\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Allocates raw memory with a given size and allocation type.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::LoadMap\",\n      \"parameters\": [\n        \"TNode<HeapObject> object\"\n      ],\n      \"return_type\": \"TNode<Map>\",\n      \"logic\": \"Loads the map of a HeapObject.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::LoadField\",\n      \"parameters\": [\n        \"FieldAccess const& access\",\n        \"Node* object\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Loads a field of an object.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::LoadElementsKind\",\n      \"parameters\": [\n        \"TNode<Map> map\"\n      ],\n      \"return_type\": \"TNode<Uint32T>\",\n      \"logic\": \"Loads the elements kind from a map.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::LoadElement\",\n      \"parameters\": [\n        \"ElementAccess const& access\",\n        \"Node* object\",\n        \"Node* index\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Loads an element from an object.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::StoreField\",\n      \"parameters\": [\n        \"FieldAccess const& access\",\n        \"Node* object\",\n        \"Node* value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Stores a value to a field of an object.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ClearPendingMessage\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Clears the pending message.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UnpackMapWord\",\n      \"parameters\": [\n        \"Node* map_word\"\n      ],\n      \"return_type\": \"TNode<Map>\",\n      \"logic\": \"Unpacks a map word (for map packing optimization).\"\n    },\n    {\n      \"name\": \"GraphAssembler::PackMapWord\",\n      \"parameters\": [\n        \"TNode<Map> map\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Packs a map word (for map packing optimization).\"\n    },\n    {\n      \"name\": \"GraphAssembler::LoadMap\",\n      \"parameters\": [\n        \"Node* object\"\n      ],\n      \"return_type\": \"TNode<Map>\",\n      \"logic\": \"Loads the map of an object. Handles map packing if enabled.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::StoreElement\",\n      \"parameters\": [\n        \"ElementAccess const& access\",\n        \"Node* object\",\n        \"Node* index\",\n        \"Node* value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Stores a value to an element of an object.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::TransitionAndStoreElement\",\n      \"parameters\": [\n        \"MapRef double_map\",\n        \"MapRef fast_map\",\n        \"TNode<HeapObject> object\",\n        \"TNode<Number> index\",\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Transitions an object's elements kind and stores a value to an element.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::StringLength\",\n      \"parameters\": [\n        \"TNode<String> string\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Gets the length of a string.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ReferenceEqual\",\n      \"parameters\": [\n        \"TNode<Object> lhs\",\n        \"TNode<Object> rhs\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if two objects are reference equal.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberEqual\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if two numbers are equal.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberMin\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Calculates the minimum of two numbers.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberMax\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Calculates the maximum of two numbers.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberAdd\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Adds two numbers.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberSubtract\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Subtracts two numbers.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberLessThan\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if one number is less than another.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberLessThanOrEqual\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if one number is less than or equal to another.\"\n    },\n        {\n      \"name\": \"JSGraphAssembler::NumberShiftRightLogical\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Shift right logical two numbers.\"\n    },\n        {\n      \"name\": \"JSGraphAssembler::NumberBitwiseAnd\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Bitwise And two numbers.\"\n    },\n        {\n      \"name\": \"JSGraphAssembler::NumberBitwiseOr\",\n      \"parameters\": [\n        \"TNode<Number> lhs\",\n        \"TNode<Number> rhs\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Bitwise Or two numbers.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::StringSubstring\",\n      \"parameters\": [\n        \"TNode<String> string\",\n        \"TNode<Number> from\",\n        \"TNode<Number> to\"\n      ],\n      \"return_type\": \"TNode<String>\",\n      \"logic\": \"Extracts a substring from a string.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ObjectIsCallable\",\n      \"parameters\": [\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if an object is callable.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ObjectIsSmi\",\n      \"parameters\": [\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if an object is a Smi.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ObjectIsUndetectable\",\n      \"parameters\": [\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if an object is undetectable.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::BooleanNot\",\n      \"parameters\": [\n        \"Node* cond\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Inverts a boolean condition.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::CheckSmi\",\n      \"parameters\": [\n        \"Node* value\",\n        \"const FeedbackSource& feedback\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Checks if a value is a Smi and deoptimizes if it's not.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::CheckNumberFitsInt32\",\n      \"parameters\": [\n        \"Node* value\",\n        \"const FeedbackSource& feedback\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Checks if a number fits into an Int32 and deoptimizes if it doesn't.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::CheckNumber\",\n      \"parameters\": [\n        \"Node* value\",\n        \"const FeedbackSource& feedback\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Checks if a value is a Number and deoptimizes if it's not.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::CheckIf\",\n      \"parameters\": [\n        \"Node* cond\",\n        \"DeoptimizeReason reason\",\n        \"const FeedbackSource& feedback\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Checks a condition and deoptimizes if it's true.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::Assert\",\n      \"parameters\": [\n        \"Node* cond\",\n        \"const char* condition_string\",\n        \"const char* file\",\n        \"int line\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Adds an assertion node to the graph.\"\n    },\n        {\n      \"name\": \"JSGraphAssembler::Assert\",\n      \"parameters\": [\n        \"TNode<Word32T> cond\",\n        \"const char* condition_string\",\n        \"const char* file\",\n        \"int line\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Adds an assertion node to the graph.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::NumberIsFloat64Hole\",\n      \"parameters\": [\n        \"TNode<Number> value\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Checks if a number is a Float64 hole.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ToBoolean\",\n      \"parameters\": [\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"TNode<Boolean>\",\n      \"logic\": \"Converts an object to a boolean value.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ConvertTaggedHoleToUndefined\",\n      \"parameters\": [\n        \"TNode<Object> value\"\n      ],\n      \"return_type\": \"TNode<Object>\",\n      \"logic\": \"Converts a tagged hole to undefined.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::MaybeGrowFastElements\",\n      \"parameters\": [\n        \"ElementsKind kind\",\n        \"const FeedbackSource& feedback\",\n        \"TNode<JSArray> array\",\n        \"TNode<FixedArrayBase> elements\",\n        \"TNode<Number> index_needed\",\n        \"TNode<Number> old_length\"\n      ],\n      \"return_type\": \"TNode<FixedArrayBase>\",\n      \"logic\": \"Potentially grows fast elements of a JSArray.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::DoubleArrayMax\",\n      \"parameters\": [\n        \"TNode<JSArray> array\"\n      ],\n      \"return_type\": \"TNode<Object>\",\n      \"logic\": \"Gets the max of DoubleArray.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::DoubleArrayMin\",\n      \"parameters\": [\n        \"TNode<JSArray> array\"\n      ],\n      \"return_type\": \"TNode<Object>\",\n      \"logic\": \"Gets the min of DoubleArray.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::StringCharCodeAt\",\n      \"parameters\": [\n        \"TNode<String> string\",\n        \"TNode<Number> position\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Gets the char code at a specific position in a string.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::StringFromSingleCharCode\",\n      \"parameters\": [\n        \"TNode<Number> code\"\n      ],\n      \"return_type\": \"TNode<String>\",\n      \"logic\": \"Creates a string from a single char code.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ArrayBufferViewByteLength\",\n      \"parameters\": [\n        \"TNode<JSArrayBufferView> array_buffer_view\",\n        \"InstanceType instance_type\",\n        \"std::set<ElementsKind> elements_kinds_candidates\",\n        \"TNode<Context> context\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Calculates the byte length of an ArrayBufferView.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ArrayBufferDetachedBit\",\n      \"parameters\": [\n        \"TNode<HeapObject> buffer\"\n      ],\n      \"return_type\": \"TNode<Word32T>\",\n      \"logic\": \"Gets the detached bit of an ArrayBuffer.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::ArrayBufferViewDetachedBit\",\n      \"parameters\": [\n        \"TNode<JSArrayBufferView> array_buffer_view\"\n      ],\n      \"return_type\": \"TNode<Word32T>\",\n      \"logic\": \"Gets the detached bit of an ArrayBufferView.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::TypedArrayLength\",\n      \"parameters\": [\n        \"TNode<JSTypedArray> typed_array\",\n        \"std::set<ElementsKind> elements_kinds_candidates\",\n        \"TNode<Context> context\"\n      ],\n      \"return_type\": \"TNode<Number>\",\n      \"logic\": \"Calculates the length of a TypedArray.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::CheckIfTypedArrayWasDetachedOrOutOfBounds\",\n      \"parameters\": [\n        \"TNode<JSTypedArray> typed_array\",\n        \"std::set<ElementsKind> elements_kinds_candidates\",\n        \"const FeedbackSource& feedback\"\n      ],\n      \"return_type\": \"void\",\n      \"logic\": \"Checks if a TypedArray was detached or out of bounds.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::LookupByteShiftForElementsKind\",\n      \"parameters\": [\n        \"TNode<Uint32T> elements_kind\"\n      ],\n      \"return_type\": \"TNode<Uint32T>\",\n      \"logic\": \"Looks up the byte shift for an elements kind.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::LookupByteSizeForElementsKind\",\n      \"parameters\": [\n        \"TNode<Uint32T> elements_kind\"\n      ],\n      \"return_type\": \"TNode<Uint32T>\",\n      \"logic\": \"Looks up the byte size for an elements kind.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::JSCallRuntime1\",\n      \"parameters\": [\n        \"Runtime::FunctionId function_id\",\n        \"TNode<Object> arg0\",\n        \"TNode<Context> context\",\n        \"std::optional<FrameState> frame_state\",\n        \"Operator::Properties properties\"\n      ],\n      \"return_type\": \"TNode<Object>\",\n      \"logic\": \"Calls a JS runtime function with one argument.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::JSCallRuntime2\",\n      \"parameters\": [\n        \"Runtime::FunctionId function_id\",\n        \"TNode<Object> arg0\",\n        \"TNode<Object> arg1\",\n        \"TNode<Context> context\",\n        \"FrameState frame_state\"\n      ],\n      \"return_type\": \"TNode<Object>\",\n      \"logic\": \"Calls a JS runtime function with two arguments.\"\n    },\n    {\n      \"name\": \"JSGraphAssembler::Chained\",\n      \"parameters\": [\n        \"const Operator* op\",\n        \"Node* input\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates a chained operator node, connecting effect and control.\"\n    },\n        {\n      \"name\": \"GraphAssembler::TypeGuard\",\n      \"parameters\": [\n        \"Type type\",\n        \"Node* value\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Adds a TypeGuard node to the graph.\"\n    },\n        {\n      \"name\": \"GraphAssembler::Checkpoint\",\n      \"parameters\": [\n        \"FrameState frame_state\"\n      ],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Adds a Checkpoint node to the graph.\"\n    },\n    {\n      \"name\": \"GraphAssembler::DebugBreak\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Adds a DebugBreak node to the graph.\"\n    },\n    {\n      \"name\": \"GraphAssembler::Unreachable\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an unreachable node and connects it to the end of the graph.\"\n    },\n    {\n      \"name\": \"GraphAssembler::UnreachableWithoutConnectToEnd\",\n      \"parameters\": [],\n      \"return_type\": \"Node*\",\n      \"logic\": \"Creates an unreachable node.\"\n    },\n        {\n      \"name\": \"GraphAssembler::StackSlot\",\n      \"parameters\": [\n        \"int size\",\n        \"int alignment\",\n        \"bool is_tagged\"\n      ],\n      \"return_type\": \"TNode<RawPtr"
}