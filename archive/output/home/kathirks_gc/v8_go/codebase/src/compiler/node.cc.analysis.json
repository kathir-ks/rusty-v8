{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/node.cc",
  "imports": [
    "src/compiler/node.h"
  ],
  "classes": [
    {
      "name": "Node::OutOfLineInputs",
      "properties": [
        "capacity_",
        "count_",
        "node_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Zone* zone",
            "int capacity"
          ],
          "return_type": "Node::OutOfLineInputs*",
          "logic": "Allocates a new OutOfLineInputs object in the given zone, with the specified capacity.  It allocates memory for the structure itself, plus space for Node pointers and Use structs. It calculates the correct starting address for the OutOfLineInputs object within the allocated memory."
        },
        {
          "name": "ExtractFrom",
          "parameters": [
            "Use* old_use_ptr",
            "ZoneNodePtr* old_input_ptr",
            "int count"
          ],
          "return_type": "void",
          "logic": "Extracts inputs and uses from inline storage (or another out-of-line storage), and copies them to the out-of-line storage managed by this object. It updates the `Use` objects to point to the correct input node and updates the `Node` uses list. Also sets the nodes at the old input positions to nullptr, removing them from the old use lists."
        }
      ]
    },
    {
      "name": "Node",
      "properties": [
        "op_",
        "mark_",
        "bit_field_",
        "first_use_"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Zone* zone",
            "NodeId id",
            "const Operator* op",
            "int input_count",
            "Node* const* inputs",
            "bool has_extensible_inputs"
          ],
          "return_type": "Node*",
          "logic": "Creates a new Node object, either with inline inputs or out-of-line inputs depending on the input count.  It allocates memory from the provided zone and initializes the Node's fields. It also updates the use lists of the input Nodes."
        },
        {
          "name": "Clone",
          "parameters": [
            "Zone* zone",
            "NodeId id",
            "const Node* node"
          ],
          "return_type": "Node*",
          "logic": "Clones an existing Node into a new Node with the given ID.  It copies the operator, input count and inputs, and sets the type of the new node to the original node's type."
        },
        {
          "name": "Kill",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes all inputs from the node and ensures that it has no uses.  This prepares the node for deletion."
        },
        {
          "name": "AppendInput",
          "parameters": [
            "Zone* zone",
            "Node* new_to"
          ],
          "return_type": "void",
          "logic": "Appends a new input to the node. If the node has inline inputs and there's capacity, the input is added inline. Otherwise, it switches to or expands the out-of-line input storage. It also updates the use list of the added input node."
        },
        {
          "name": "InsertInput",
          "parameters": [
            "Zone* zone",
            "int index",
            "Node* new_to"
          ],
          "return_type": "void",
          "logic": "Inserts a new input at a specific index in the node's input list.  It shifts existing inputs to make space and updates use lists accordingly."
        },
        {
          "name": "InsertInputs",
          "parameters": [
            "Zone* zone",
            "int index",
            "int count"
          ],
          "return_type": "void",
          "logic": "Inserts multiple null inputs at a specific index in the node's input list, shifting the existing inputs and updating the use lists accordingly."
        },
        {
          "name": "RemoveInput",
          "parameters": [
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Removes an input at a specific index.  It shifts the remaining inputs to fill the gap and returns the removed Node."
        },
        {
          "name": "ClearInputs",
          "parameters": [
            "int start",
            "int count"
          ],
          "return_type": "void",
          "logic": "Clears a range of inputs, setting them to null and removing the uses from the input nodes."
        },
        {
          "name": "NullAllInputs",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears all inputs of the node."
        },
        {
          "name": "TrimInputCount",
          "parameters": [
            "int new_input_count"
          ],
          "return_type": "void",
          "logic": "Reduces the input count of the node to the given value, clearing any excess inputs."
        },
        {
          "name": "EnsureInputCount",
          "parameters": [
            "Zone* zone",
            "int new_input_count"
          ],
          "return_type": "void",
          "logic": "Adjusts the input count of the node to the given value, adding dummy inputs or trimming excess inputs as needed."
        },
        {
          "name": "UseCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of uses of this node."
        },
        {
          "name": "BranchUseCount",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of uses of this node by Branch nodes."
        },
        {
          "name": "ReplaceUses",
          "parameters": [
            "Node* that"
          ],
          "return_type": "void",
          "logic": "Replaces all uses of this node with uses of another node `that`. Updates all uses and the use list."
        },
        {
          "name": "OwnedBy",
          "parameters": [
            "Node const* owner"
          ],
          "return_type": "bool",
          "logic": "Checks if all uses of this node are owned by the given owner node."
        },
        {
          "name": "OwnedBy",
          "parameters": [
            "Node const* owner1",
            "Node const* owner2"
          ],
          "return_type": "bool",
          "logic": "Checks if all uses of this node are owned by either owner1 or owner2."
        },
        {
          "name": "Print",
          "parameters": [
            "int depth"
          ],
          "return_type": "void",
          "logic": "Prints the node and its inputs to the standard output stream, up to a specified depth."
        },
        {
          "name": "Print",
          "parameters": [
            "std::ostream& os",
            "int depth"
          ],
          "return_type": "void",
          "logic": "Prints the node and its inputs to the given output stream, up to a specified depth."
        },
        {
          "name": "Node",
          "parameters": [
            "NodeId id",
            "const Operator* op",
            "int inline_count",
            "int inline_capacity"
          ],
          "return_type": "void",
          "logic": "Constructor for the Node class.  Initializes the node's ID, operator, and inline input capacity."
        },
        {
          "name": "AppendUse",
          "parameters": [
            "Use* use"
          ],
          "return_type": "void",
          "logic": "Appends a use to the node's use list."
        },
        {
          "name": "RemoveUse",
          "parameters": [
            "Use* use"
          ],
          "return_type": "void",
          "logic": "Removes a use from the node's use list."
        },
        {
          "name": "Verify",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs several consistency checks on the node's internal data structures, especially the input and use lists. Only compiled in DEBUG mode."
        }
      ]
    },
    {
      "name": "Node::InputEdges",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::Inputs",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::UseEdges",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::Uses",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::InputEdges::iterator",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::Inputs::const_iterator",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::UseEdges::iterator",
      "properties": [],
      "methods": []
    },
    {
      "name": "Node::Uses::const_iterator",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const Node& n"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator to print a Node object to an output stream.  It prints the node's ID, operator, and input IDs."
    },
    {
      "name": "_v8_internal_Node_Print",
      "parameters": [
        "void* object"
      ],
      "return_type": "void",
      "logic": "A debugging export function that calls the `Print` method of a Node object. This is exposed for debugging purposes."
    }
  ]
}