{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/sidetable.h",
  "imports": [
    "<algorithm>",
    "<type_traits>",
    "src/compiler/turboshaft/operations.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "GrowingSidetable",
      "properties": [
        "ZoneVector<T> table_"
      ],
      "methods": [
        {
          "name": "operator[]",
          "parameters": [
            "Key index"
          ],
          "return_type": "T&",
          "logic": "Accesses the element at the given index. If the index is out of bounds, the table is resized before accessing. The table grows dynamically."
        },
        {
          "name": "operator[]",
          "parameters": [
            "Key index"
          ],
          "return_type": "const T&",
          "logic": "Const version of the operator[] for accessing elements. If the index is out of bounds, the table is resized before accessing."
        },
        {
          "name": "Reset",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the sidetable by filling it with default values of type T. Preserves the memory allocation."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the table is empty."
        },
        {
          "name": "GrowingSidetable",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "explicit GrowingSidetable",
          "logic": "Protected constructor for GrowingSidetable"
        },
        {
          "name": "GrowingSidetable",
          "parameters": [
            "size_t size",
            "const T& initial_value",
            "Zone* zone"
          ],
          "return_type": "GrowingSidetable",
          "logic": "Protected constructor with initial size and value."
        },
        {
          "name": "NextSize",
          "parameters": [
            "size_t out_of_bounds_index"
          ],
          "return_type": "size_t",
          "logic": "Calculates the next size for resizing the table when an out-of-bounds index is accessed. It increases size by 1.5x plus 32."
        }
      ]
    },
    {
      "name": "FixedSidetable",
      "properties": [
        "ZoneVector<T> table_"
      ],
      "methods": [
        {
          "name": "operator[]",
          "parameters": [
            "Key op"
          ],
          "return_type": "T&",
          "logic": "Accesses the element at the given index.  Checks that op.id() is within the allocated size of table_."
        },
        {
          "name": "operator[]",
          "parameters": [
            "Key op"
          ],
          "return_type": "const T&",
          "logic": "Const version of operator[] for accessing elements. Checks that op.id() is within the allocated size of table_."
        },
        {
          "name": "FixedSidetable",
          "parameters": [
            "size_t size",
            "Zone* zone"
          ],
          "return_type": "explicit FixedSidetable",
          "logic": "Protected constructor for FixedSidetable, taking only a size."
        },
        {
          "name": "FixedSidetable",
          "parameters": [
            "size_t size",
            "const T& default_value",
            "Zone* zone"
          ],
          "return_type": "FixedSidetable",
          "logic": "Protected constructor for FixedSidetable, taking size and a default value."
        }
      ]
    },
    {
      "name": "GrowingBlockSidetable",
      "properties": [],
      "methods": [
        {
          "name": "GrowingBlockSidetable",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "explicit GrowingBlockSidetable",
          "logic": "Constructor forwarding to base class"
        },
        {
          "name": "GrowingBlockSidetable",
          "parameters": [
            "size_t size",
            "const T& initial_value",
            "Zone* zone"
          ],
          "return_type": "GrowingBlockSidetable",
          "logic": "Constructor forwarding to base class"
        }
      ]
    },
    {
      "name": "FixedBlockSidetable",
      "properties": [],
      "methods": [
        {
          "name": "FixedBlockSidetable",
          "parameters": [
            "size_t size",
            "Zone* zone"
          ],
          "return_type": "explicit FixedBlockSidetable",
          "logic": "Constructor forwarding to base class"
        },
        {
          "name": "FixedBlockSidetable",
          "parameters": [
            "size_t size",
            "const T& initial_value",
            "Zone* zone"
          ],
          "return_type": "FixedBlockSidetable",
          "logic": "Constructor forwarding to base class"
        }
      ]
    },
    {
      "name": "GrowingOpIndexSidetable",
      "properties": [
        "const Graph* graph_"
      ],
      "methods": [
        {
          "name": "GrowingOpIndexSidetable",
          "parameters": [
            "Zone* zone",
            "const Graph* graph"
          ],
          "return_type": "explicit GrowingOpIndexSidetable",
          "logic": "Constructor forwarding to base class, initializes graph_"
        },
        {
          "name": "GrowingOpIndexSidetable",
          "parameters": [
            "size_t size",
            "const T& initial_value",
            "Zone* zone",
            "const Graph* graph"
          ],
          "return_type": "GrowingOpIndexSidetable",
          "logic": "Constructor forwarding to base class, initializes graph_."
        },
        {
          "name": "operator[]",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "T&",
          "logic": "Accesses the element at the given index. Checks that OpIndexBelongsToTableGraph(graph_, index) before accessing the table."
        },
        {
          "name": "operator[]",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "const T&",
          "logic": "Const version of operator[] for accessing elements. Checks that OpIndexBelongsToTableGraph(graph_, index) before accessing the table."
        },
        {
          "name": "SwapData",
          "parameters": [
            "GrowingOpIndexSidetable<T>& other"
          ],
          "return_type": "void",
          "logic": "Swaps the internal table data with another GrowingOpIndexSidetable."
        }
      ]
    },
    {
      "name": "FixedOpIndexSidetable",
      "properties": [
        "const Graph* graph_"
      ],
      "methods": [
        {
          "name": "FixedOpIndexSidetable",
          "parameters": [
            "size_t size",
            "Zone* zone",
            "const Graph* graph"
          ],
          "return_type": "FixedOpIndexSidetable",
          "logic": "Constructor forwarding to base class, initializes graph_."
        },
        {
          "name": "FixedOpIndexSidetable",
          "parameters": [
            "size_t size",
            "const T& default_value",
            "Zone* zone",
            "const Graph* graph"
          ],
          "return_type": "FixedOpIndexSidetable",
          "logic": "Constructor forwarding to base class, initializes graph_."
        },
        {
          "name": "operator[]",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "T&",
          "logic": "Accesses the element at the given index. Checks that OpIndexBelongsToTableGraph(graph_, index) before accessing the table."
        },
        {
          "name": "operator[]",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "const T&",
          "logic": "Const version of operator[] for accessing elements. Checks that OpIndexBelongsToTableGraph(graph_, index) before accessing the table."
        },
        {
          "name": "SwapData",
          "parameters": [
            "FixedOpIndexSidetable<T>& other"
          ],
          "return_type": "void",
          "logic": "Swaps the internal table data with another FixedOpIndexSidetable."
        }
      ]
    },
    {
      "name": "SparseOpIndexSideTable",
      "properties": [
        "ZoneAbslFlatHashMap<OpIndex, T> data_",
        "const Graph* graph_"
      ],
      "methods": [
        {
          "name": "SparseOpIndexSideTable",
          "parameters": [
            "Zone* zone",
            "const Graph* graph"
          ],
          "return_type": "SparseOpIndexSideTable",
          "logic": "Constructor, initializes the data_ and graph_."
        },
        {
          "name": "operator[]",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "T&",
          "logic": "Accesses the element at the given index. Checks that OpIndexBelongsToTableGraph(graph_, index) before accessing. If the index isn't present, it will be created."
        },
        {
          "name": "operator[]",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "const T&",
          "logic": "Const version of operator[] for accessing elements. Checks that OpIndexBelongsToTableGraph(graph_, index) before accessing the table. Asserts that the element exists."
        },
        {
          "name": "contains",
          "parameters": [
            "OpIndex index",
            "const T** value"
          ],
          "return_type": "bool",
          "logic": "Checks if the table contains the given index. Optionally returns the value."
        },
        {
          "name": "remove",
          "parameters": [
            "OpIndex index"
          ],
          "return_type": "void",
          "logic": "Removes the element at the given index. Checks that OpIndexBelongsToTableGraph(graph_, index)."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "auto",
          "logic": "Returns an iterator to the beginning of the data_."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "auto",
          "logic": "Returns an iterator to the end of the data_."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "OpIndexBelongsToTableGraph",
      "parameters": [
        "const Graph* graph",
        "OpIndex index"
      ],
      "return_type": "bool",
      "logic": "Checks if a given OpIndex belongs to the provided Graph. Only available in DEBUG mode."
    }
  ]
}