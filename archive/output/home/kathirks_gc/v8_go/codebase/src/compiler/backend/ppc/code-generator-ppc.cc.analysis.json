{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/ppc/code-generator-ppc.cc",
  "imports": [
    "src/base/numbers/double.h",
    "src/codegen/assembler-inl.h",
    "src/codegen/callable.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/compiler/backend/code-generator-impl.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/gap-resolver.h",
    "src/compiler/node-matchers.h",
    "src/compiler/osr.h",
    "src/heap/mutable-page-metadata.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "PPCOperandConverter",
      "properties": [],
      "methods": [
        {
          "name": "PPCOperandConverter",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for PPCOperandConverter, initializes the base class."
        },
        {
          "name": "OutputCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of outputs for the instruction."
        },
        {
          "name": "OutputRCBit",
          "parameters": [],
          "return_type": "RCBit",
          "logic": "Determines and returns whether the instruction sets the RC (result condition) bit based on its flags mode."
        },
        {
          "name": "CompareLogical",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the comparison is logical (unsigned)."
        },
        {
          "name": "InputImmediate",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Operand",
          "logic": "Retrieves an immediate input operand from the instruction, converting it to the appropriate Operand type."
        },
        {
          "name": "MemoryOperand",
          "parameters": [
            "AddressingMode* mode",
            "size_t* first_index"
          ],
          "return_type": "MemOperand",
          "logic": "Constructs a MemOperand based on the addressing mode encoded in the instruction's opcode, using input registers and immediates."
        },
        {
          "name": "MemoryOperand",
          "parameters": [
            "AddressingMode* mode",
            "size_t first_index"
          ],
          "return_type": "MemOperand",
          "logic": "Overloaded MemoryOperand function to handle the case when AddressingMode is not passed"
        },
        {
          "name": "ToMemOperand",
          "parameters": [
            "InstructionOperand* op"
          ],
          "return_type": "MemOperand",
          "logic": "Converts an InstructionOperand representing a stack slot into a MemOperand for accessing memory."
        },
        {
          "name": "SlotToMemOperand",
          "parameters": [
            "int slot"
          ],
          "return_type": "MemOperand",
          "logic": "Converts a stack slot index into a MemOperand using the current frame access state."
        }
      ]
    },
    {
      "name": "OutOfLineRecordWrite",
      "properties": [
        "object_",
        "offset_",
        "offset_immediate_",
        "value_",
        "scratch0_",
        "scratch1_",
        "mode_",
        "stub_mode_",
        "must_save_lr_",
        "unwinding_info_writer_",
        "zone_",
        "indirect_pointer_tag_"
      ],
      "methods": [
        {
          "name": "OutOfLineRecordWrite",
          "parameters": [
            "CodeGenerator* gen",
            "Register object",
            "Register offset",
            "Register value",
            "Register scratch0",
            "Register scratch1",
            "RecordWriteMode mode",
            "StubCallMode stub_mode",
            "UnwindingInfoWriter* unwinding_info_writer",
            "IndirectPointerTag indirect_pointer_tag"
          ],
          "return_type": "void",
          "logic": "Constructor for OutOfLineRecordWrite, initializes member variables. Handles register parameters."
        },
        {
          "name": "OutOfLineRecordWrite",
          "parameters": [
            "CodeGenerator* gen",
            "Register object",
            "int32_t offset",
            "Register value",
            "Register scratch0",
            "Register scratch1",
            "RecordWriteMode mode",
            "StubCallMode stub_mode",
            "UnwindingInfoWriter* unwinding_info_writer",
            "IndirectPointerTag indirect_pointer_tag"
          ],
          "return_type": "void",
          "logic": "Constructor for OutOfLineRecordWrite, initializes member variables. Handles immediate offset."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates the out-of-line code for a record write barrier, including checks and calls to the appropriate barrier stub."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "HasRegisterInput",
      "parameters": [
        "Instruction* instr",
        "size_t index"
      ],
      "return_type": "bool",
      "logic": "Checks if the instruction's input at the given index is a register."
    },
    {
      "name": "FlagsConditionToCondition",
      "parameters": [
        "FlagsCondition condition",
        "ArchOpcode op"
      ],
      "return_type": "Condition",
      "logic": "Converts a FlagsCondition enum to a corresponding Condition enum for assembler branch instructions, based on the instruction's opcode."
    },
    {
      "name": "FlushPendingPushRegisters",
      "parameters": [
        "MacroAssembler* masm",
        "FrameAccessState* frame_access_state",
        "ZoneVector<Register>* pending_pushes"
      ],
      "return_type": "void",
      "logic": "Flushes the registers in the pending_pushes vector to the stack."
    },
    {
      "name": "AdjustStackPointerForTailCall",
      "parameters": [
        "MacroAssembler* masm",
        "FrameAccessState* state",
        "int new_slot_above_sp",
        "ZoneVector<Register>* pending_pushes",
        "bool allow_shrinkage"
      ],
      "return_type": "void",
      "logic": "Adjusts the stack pointer to prepare for a tail call, potentially shrinking or expanding the stack."
    },
    {
      "name": "is_wasm_on_be",
      "parameters": [
        "bool IsWasm"
      ],
      "return_type": "bool",
      "logic": "Returns true if running wasm on big endian architecture, false otherwise"
    }
  ]
}