{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/instruction-selector-riscv64.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/instruction-selector-riscv64.cc\",\n  \"imports\": [\n    \"src/base/bits.h\",\n    \"src/base/logging.h\",\n    \"src/codegen/assembler-inl.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/compiler/backend/instruction-selector-impl.h\",\n    \"src/compiler/backend/riscv/instruction-selector-riscv.h\",\n    \"src/compiler/node-matchers.h\",\n    \"src/compiler/node-properties.h\",\n    \"src/compiler/turboshaft/operations.h\",\n    \"src/compiler/turboshaft/opmasks.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"RiscvOperandGeneratorT\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"CanBeImmediate\",\n          \"parameters\": [\n            \"int64_t value\",\n            \"InstructionCode opcode\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines if a given 64-bit value can be represented as an immediate operand for a given RISC-V instruction opcode. Checks the value's range against the opcode's immediate field width.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExtendingLoadMatcher\",\n      \"properties\": [\n        \"matches_\",\n        \"selector_\",\n        \"base_\",\n        \"immediate_\",\n        \"opcode_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ExtendingLoadMatcher\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"InstructionSelectorT* selector\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the matcher with a node and selector. Calls Initialize to attempt to match an extending load pattern.\"\n        },\n        {\n          \"name\": \"Matches\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the matcher found a matching extending load pattern.\"\n        },\n        {\n          \"name\": \"base\",\n          \"parameters\": [],\n          \"return_type\": \"OpIndex\",\n          \"logic\": \"Returns the base OpIndex of the matched load. Requires that Matches() returns true.\"\n        },\n        {\n          \"name\": \"immediate\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the immediate offset of the matched load. Requires that Matches() returns true.\"\n        },\n        {\n          \"name\": \"opcode\",\n          \"parameters\": [],\n          \"return_type\": \"ArchOpcode\",\n          \"logic\": \"Returns the opcode of the matched load. Requires that Matches() returns true.\"\n        },\n        {\n          \"name\": \"Initialize\",\n          \"parameters\": [\n            \"turboshaft::OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Attempts to match a specific extending load pattern, where a 64-bit value is loaded and shifted right by 32 bits. Optimizes this by loading a 32-bit word directly and sign-extending it. Sets the matches_ flag, base_, immediate_ and opcode_ if successful.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"InstructionSelectorT\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"VisitStoreLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for storing a lane of a Simd128 value to memory.\"\n        },\n        {\n          \"name\": \"VisitLoadLane\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for loading a lane of a Simd128 value from memory.\"\n        },\n        {\n          \"name\": \"VisitLoad\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for loading a value from memory, handling different memory representations and potential protection mechanisms.\"\n        },\n        {\n          \"name\": \"VisitStorePair\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNREACHABLE exception.\"\n        },\n        {\n          \"name\": \"VisitProtectedLoad\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles protected memory loads by simply calling VisitLoad.\"\n        },\n        {\n          \"name\": \"VisitStore\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for storing a value to memory, considering write barriers and memory protections.\"\n        },\n        {\n          \"name\": \"VisitProtectedStore\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles protected memory stores by simply calling VisitStore.\"\n        },\n        {\n          \"name\": \"VisitWord32And\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit bitwise AND operation.\"\n        },\n        {\n          \"name\": \"VisitWord64And\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit bitwise AND operation.\"\n        },\n        {\n          \"name\": \"VisitWord32Or\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit bitwise OR operation.\"\n        },\n        {\n          \"name\": \"VisitWord64Or\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit bitwise OR operation.\"\n        },\n        {\n          \"name\": \"VisitWord32Xor\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit bitwise XOR operation.\"\n        },\n        {\n          \"name\": \"VisitWord64Xor\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit bitwise XOR operation.\"\n        },\n        {\n          \"name\": \"VisitWord64Shl\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit shift left operation.\"\n        },\n        {\n          \"name\": \"VisitWord64Shr\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit logical shift right operation.\"\n        },\n        {\n          \"name\": \"VisitWord64Sar\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit arithmetic shift right operation.\"\n        },\n        {\n          \"name\": \"VisitWord32Rol\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNIMPLEMENTED exception.\"\n        },\n        {\n          \"name\": \"VisitWord64Rol\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNREACHABLE exception.\"\n        },\n        {\n          \"name\": \"VisitWord32Ror\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit rotate right operation.\"\n        },\n        {\n          \"name\": \"VisitWord32ReverseBits\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNREACHABLE exception.\"\n        },\n        {\n          \"name\": \"VisitWord64ReverseBits\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNREACHABLE exception.\"\n        },\n        {\n          \"name\": \"VisitWord64ReverseBytes\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions to reverse the byte order of a 64-bit word.\"\n        },\n        {\n          \"name\": \"VisitWord32ReverseBytes\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions to reverse the byte order of a 32-bit word.\"\n        },\n        {\n          \"name\": \"VisitSimd128ReverseBytes\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNREACHABLE exception.\"\n        },\n        {\n          \"name\": \"VisitWord64Ctz\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions to count trailing zeros in a 64-bit word.\"\n        },\n        {\n          \"name\": \"VisitWord32Popcnt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions to count the number of set bits in a 32-bit word.\"\n        },\n        {\n          \"name\": \"VisitWord64Popcnt\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions to count the number of set bits in a 64-bit word.\"\n        },\n        {\n          \"name\": \"VisitWord64Ror\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit rotate right operation.\"\n        },\n        {\n          \"name\": \"VisitWord64Clz\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions to count leading zeros in a 64-bit word.\"\n        },\n        {\n          \"name\": \"VisitInt32Add\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit integer addition.\"\n        },\n        {\n          \"name\": \"VisitInt64Add\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit integer addition.\"\n        },\n        {\n          \"name\": \"VisitInt32Sub\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit integer subtraction.\"\n        },\n        {\n          \"name\": \"VisitInt64Sub\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit integer subtraction.\"\n        },\n        {\n          \"name\": \"VisitInt32Mul\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"VisitInt32MulHigh\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for the high 32 bits of a 32-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"VisitInt64MulHigh\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for the high 64 bits of a 64-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"VisitUint32MulHigh\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for the high 32 bits of an unsigned 32-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"VisitUint64MulHigh\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for the high 64 bits of an unsigned 64-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"VisitInt64Mul\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"VisitInt32Div\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit integer division.\"\n        },\n        {\n          \"name\": \"VisitUint32Div\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for an unsigned 32-bit integer division.\"\n        },\n        {\n          \"name\": \"VisitInt32Mod\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 32-bit integer modulo operation.\"\n        },\n        {\n          \"name\": \"VisitUint32Mod\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for an unsigned 32-bit integer modulo operation.\"\n        },\n        {\n          \"name\": \"VisitInt64Div\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit integer division.\"\n        },\n        {\n          \"name\": \"VisitUint64Div\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for an unsigned 64-bit integer division.\"\n        },\n        {\n          \"name\": \"VisitInt64Mod\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for a 64-bit integer modulo operation.\"\n        },\n        {\n          \"name\": \"VisitUint64Mod\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for an unsigned 64-bit integer modulo operation.\"\n        },\n        {\n          \"name\": \"VisitChangeFloat32ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a Float32 to Float64.\"\n        },\n        {\n          \"name\": \"VisitRoundInt32ToFloat32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting and rounding a signed 32-bit integer to a Float32.\"\n        },\n        {\n          \"name\": \"VisitRoundUint32ToFloat32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting and rounding an unsigned 32-bit integer to a Float32.\"\n        },\n        {\n          \"name\": \"VisitChangeInt32ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a signed 32-bit integer to a Float64.\"\n        },\n        {\n          \"name\": \"VisitChangeInt64ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a signed 64-bit integer to a Float64.\"\n        },\n        {\n          \"name\": \"VisitChangeUint32ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting an unsigned 32-bit integer to a Float64.\"\n        },\n        {\n          \"name\": \"VisitTruncateFloat32ToInt32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for truncating a Float32 to a signed 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTruncateFloat32ToUint32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for truncating a Float32 to an unsigned 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitChangeFloat64ToInt32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a Float64 to a signed 32-bit integer. May include special handling for rounding modes.\"\n        },\n        {\n          \"name\": \"VisitTryTruncateFloat64ToInt32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for trying to truncate a Float64 to a signed 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTryTruncateFloat64ToUint32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for trying to truncate a Float64 to an unsigned 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitChangeFloat64ToInt64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a Float64 to a signed 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitChangeFloat64ToUint32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a Float64 to an unsigned 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitChangeFloat64ToUint64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting a Float64 to an unsigned 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTruncateFloat64ToUint32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for truncating a Float64 to an unsigned 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTruncateFloat64ToInt64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for truncating a Float64 to a signed 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTryTruncateFloat32ToInt64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for trying to truncate a Float32 to a signed 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTryTruncateFloat64ToInt64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for trying to truncate a Float64 to a signed 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTryTruncateFloat32ToUint64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for trying to truncate a Float32 to an unsigned 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitTryTruncateFloat64ToUint64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for trying to truncate a Float64 to an unsigned 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitBitcastWord32ToWord64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for bitcasting a 32-bit word to a 64-bit word.\"\n        },\n        {\n          \"name\": \"VisitChangeInt32ToInt64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for changing a 32-bit integer to a 64-bit integer, performing sign extension.\"\n        },\n        {\n          \"name\": \"VisitChangeUint32ToUint64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for changing an unsigned 32-bit integer to an unsigned 64-bit integer, performing zero extension.\"\n        },\n        {\n          \"name\": \"ZeroExtendsWord32ToWord64NoPhis\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if a node (that is not a Phi) corresponds to an operation that zero-extends a 32-bit word to a 64-bit word.\"\n        },\n        {\n          \"name\": \"VisitTruncateInt64ToInt32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for truncating a 64-bit integer to a 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitRoundInt64ToFloat32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting and rounding a signed 64-bit integer to a Float32.\"\n        },\n        {\n          \"name\": \"VisitRoundInt64ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting and rounding a signed 64-bit integer to a Float64.\"\n        },\n        {\n          \"name\": \"VisitRoundUint64ToFloat32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting and rounding an unsigned 64-bit integer to a Float32.\"\n        },\n        {\n          \"name\": \"VisitRoundUint64ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for converting and rounding an unsigned 64-bit integer to a Float64.\"\n        },\n        {\n          \"name\": \"VisitBitcastFloat32ToInt32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for bitcasting a Float32 to a signed 32-bit integer.\"\n        },\n        {\n          \"name\": \"VisitBitcastFloat64ToInt64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for bitcasting a Float64 to a signed 64-bit integer.\"\n        },\n        {\n          \"name\": \"VisitBitcastInt32ToFloat32\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for bitcasting a signed 32-bit integer to a Float32.\"\n        },\n        {\n          \"name\": \"VisitBitcastInt64ToFloat64\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for bitcasting a signed 64-bit integer to a Float64.\"\n        },\n        {\n          \"name\": \"VisitFloat64RoundDown\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float64 towards negative infinity.\"\n        },\n        {\n          \"name\": \"VisitFloat32RoundUp\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float32 towards positive infinity.\"\n        },\n        {\n          \"name\": \"VisitFloat64RoundUp\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float64 towards positive infinity.\"\n        },\n        {\n          \"name\": \"VisitFloat32RoundTruncate\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float32 towards zero.\"\n        },\n        {\n          \"name\": \"VisitFloat64RoundTruncate\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float64 towards zero.\"\n        },\n        {\n          \"name\": \"VisitFloat64RoundTiesAway\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNREACHABLE exception.\"\n        },\n        {\n          \"name\": \"VisitFloat32RoundTiesEven\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float32 to the nearest value, with ties rounding to even.\"\n        },\n        {\n          \"name\": \"VisitFloat64RoundTiesEven\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for rounding a Float64 to the nearest value, with ties rounding to even.\"\n        },\n        {\n          \"name\": \"VisitFloat32Neg\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for negating a Float32 value.\"\n        },\n        {\n          \"name\": \"VisitFloat64Neg\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for negating a Float64 value.\"\n        },\n        {\n          \"name\": \"VisitFloat64Ieee754Binop\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"InstructionCode opcode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for IEEE 754 compliant binary floating-point operations (Float64).\"\n        },\n        {\n          \"name\": \"VisitFloat64Ieee754Unop\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"InstructionCode opcode\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for IEEE 754 compliant unary floating-point operations (Float64).\"\n        },\n        {\n          \"name\": \"EmitPrepareArguments\",\n          \"parameters\": [\n            \"ZoneVector<PushParameter>* arguments\",\n            \"const CallDescriptor* call_descriptor\",\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Emits code to prepare arguments for a function call (C function calls and regular calls).\"\n        },\n        {\n          \"name\": \"VisitUnalignedLoad\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for loading a value from unaligned memory.\"\n        },\n        {\n          \"name\": \"VisitUnalignedStore\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Placeholder method that throws an UNIMPLEMENTED exception.\"\n        },\n        {\n          \"name\": \"VisitStackPointerGreaterThan\",\n          \"parameters\": [\n            \"OpIndex node\",\n            \"FlagsContinuationT* cont\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Selects instructions for stack pointer greater than check with flags continuation.\"\n        },\n        {\n          \"name\": \"VisitWord32Equal\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit word equality comparisons.\"\n        },\n        {\n          \"name\": \"VisitInt32LessThan\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit signed less than comparisons.\"\n        },\n        {\n          \"name\": \"VisitInt32LessThanOrEqual\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit signed less than or equal comparisons.\"\n        },\n        {\n          \"name\": \"VisitUint32LessThan\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit unsigned less than comparisons.\"\n        },\n        {\n          \"name\": \"VisitUint32LessThanOrEqual\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit unsigned less than or equal comparisons.\"\n        },\n        {\n          \"name\": \"VisitInt32AddWithOverflow\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit integer addition with overflow detection.\"\n        },\n        {\n          \"name\": \"VisitInt32SubWithOverflow\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit integer subtraction with overflow detection.\"\n        },\n        {\n          \"name\": \"VisitInt32MulWithOverflow\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 32-bit integer multiplication with overflow detection.\"\n        },\n        {\n          \"name\": \"VisitInt64AddWithOverflow\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 64-bit integer addition with overflow detection.\"\n        },\n        {\n          \"name\": \"VisitInt64SubWithOverflow\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 64-bit integer subtraction with overflow detection.\"\n        },\n        {\n          \"name\": \"VisitInt64MulWithOverflow\",\n          \"parameters\": [\n            \"OpIndex node\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Handles 64-bit integer multiplication with overflow detection.\"\n        },\n        {\n          \"name\": \"VisitWord64Equal\",\n          \""
}