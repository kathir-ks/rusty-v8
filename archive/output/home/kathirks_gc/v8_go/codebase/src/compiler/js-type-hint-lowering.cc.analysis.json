{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-type-hint-lowering.cc",
  "imports": [
    "src/compiler/js-type-hint-lowering.h",
    "src/base/logging.h",
    "src/compiler/js-graph.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator-properties.h",
    "src/compiler/simplified-operator.h",
    "src/objects/type-hints.h"
  ],
  "classes": [
    {
      "name": "JSSpeculativeBinopBuilder",
      "properties": [
        "lowering_",
        "op_",
        "left_",
        "right_",
        "effect_",
        "control_",
        "slot_"
      ],
      "methods": [
        {
          "name": "JSSpeculativeBinopBuilder",
          "parameters": [
            "const JSTypeHintLowering* lowering",
            "const Operator* op",
            "Node* left",
            "Node* right",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSSpeculativeBinopBuilder class, initializes the member variables."
        },
        {
          "name": "GetBinaryNumberOperationHint",
          "parameters": [
            "NumberOperationHint* hint"
          ],
          "return_type": "bool",
          "logic": "Retrieves the NumberOperationHint based on the BinaryOperationHint from feedback, returns true if successful, false otherwise."
        },
        {
          "name": "GetBinaryBigIntOperationHint",
          "parameters": [
            "BigIntOperationHint* hint"
          ],
          "return_type": "bool",
          "logic": "Retrieves the BigIntOperationHint based on the BinaryOperationHint from feedback, returns true if successful, false otherwise."
        },
        {
          "name": "GetCompareNumberOperationHint",
          "parameters": [
            "NumberOperationHint* hint"
          ],
          "return_type": "bool",
          "logic": "Retrieves the NumberOperationHint for compare operations based on CompareOperationHint, returns true if successful, false otherwise."
        },
        {
          "name": "GetCompareBigIntOperationHint",
          "parameters": [
            "BigIntOperationHint* hint"
          ],
          "return_type": "bool",
          "logic": "Retrieves the BigIntOperationHint for compare operations based on CompareOperationHint, returns true if successful, false otherwise."
        },
        {
          "name": "SpeculativeNumberOp",
          "parameters": [
            "NumberOperationHint hint"
          ],
          "return_type": "const Operator*",
          "logic": "Selects the appropriate speculative number operator based on the provided NumberOperationHint and the opcode of the operation."
        },
        {
          "name": "SpeculativeBigIntOp",
          "parameters": [
            "BigIntOperationHint hint"
          ],
          "return_type": "const Operator*",
          "logic": "Selects the appropriate speculative BigInt operator based on the provided BigIntOperationHint and the opcode of the operation."
        },
        {
          "name": "SpeculativeNumberCompareOp",
          "parameters": [
            "NumberOperationHint hint"
          ],
          "return_type": "const Operator*",
          "logic": "Selects the appropriate speculative number comparison operator based on the provided NumberOperationHint and the opcode of the comparison."
        },
        {
          "name": "SpeculativeBigIntCompareOp",
          "parameters": [
            "BigIntOperationHint hint"
          ],
          "return_type": "const Operator*",
          "logic": "Selects the appropriate speculative BigInt comparison operator based on the provided BigIntOperationHint and the opcode of the comparison."
        },
        {
          "name": "BuildSpeculativeOperation",
          "parameters": [
            "const Operator* op"
          ],
          "return_type": "Node*",
          "logic": "Builds a new node for the speculative operation using the provided operator and the pre-existing left, right, effect, and control nodes."
        },
        {
          "name": "TryBuildNumberBinop",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Attempts to build a speculative number binary operation based on feedback. Returns the created node or nullptr if no suitable operator is found."
        },
        {
          "name": "TryBuildBigIntBinop",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Attempts to build a speculative BigInt binary operation based on feedback. Returns the created node or nullptr if no suitable operator is found."
        },
        {
          "name": "TryBuildNumberCompare",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Attempts to build a speculative number comparison operation based on feedback. Returns the created node or nullptr if no suitable operator is found."
        },
        {
          "name": "TryBuildBigIntCompare",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Attempts to build a speculative BigInt comparison operation based on feedback. Returns the created node or nullptr if no suitable operator is found."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph associated with the lowering."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate associated with the graph."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph associated with the lowering."
        },
        {
          "name": "javascript",
          "parameters": [],
          "return_type": "JSOperatorBuilder*",
          "logic": "Returns the JSOperatorBuilder."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder."
        }
      ]
    },
    {
      "name": "JSTypeHintLowering",
      "properties": [
        "broker_",
        "jsgraph_",
        "flags_",
        "feedback_vector_"
      ],
      "methods": [
        {
          "name": "JSTypeHintLowering",
          "parameters": [
            "JSHeapBroker* broker",
            "JSGraph* jsgraph",
            "FeedbackVectorRef feedback_vector",
            "Flags flags"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSTypeHintLowering class, initializes the member variables."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate."
        },
        {
          "name": "GetBinaryOperationHint",
          "parameters": [
            "FeedbackSlot slot"
          ],
          "return_type": "BinaryOperationHint",
          "logic": "Retrieves the BinaryOperationHint from the feedback vector for a given feedback slot."
        },
        {
          "name": "GetCompareOperationHint",
          "parameters": [
            "FeedbackSlot slot"
          ],
          "return_type": "CompareOperationHint",
          "logic": "Retrieves the CompareOperationHint from the feedback vector for a given feedback slot."
        },
        {
          "name": "ReduceUnaryOperation",
          "parameters": [
            "const Operator* op",
            "Node* operand",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a unary operation by potentially lowering it to a more specific operation based on type feedback."
        },
        {
          "name": "ReduceBinaryOperation",
          "parameters": [
            "const Operator* op",
            "Node* left",
            "Node* right",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a binary operation by potentially lowering it to a more specific operation based on type feedback."
        },
        {
          "name": "ReduceForInNextOperation",
          "parameters": [
            "Node* receiver",
            "Node* cache_array",
            "Node* cache_type",
            "Node* index",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a ForInNext operation based on the feedback provided."
        },
        {
          "name": "ReduceForInPrepareOperation",
          "parameters": [
            "Node* enumerator",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a ForInPrepare operation based on feedback."
        },
        {
          "name": "ReduceToNumberOperation",
          "parameters": [
            "Node* input",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a ToNumber operation speculatively based on type feedback."
        },
        {
          "name": "ReduceCallOperation",
          "parameters": [
            "const Operator* op",
            "Node* const* args",
            "int arg_count",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a call operation speculatively based on type feedback. Currently only inserts deoptimizations based on lack of feedback."
        },
        {
          "name": "ReduceConstructOperation",
          "parameters": [
            "const Operator* op",
            "Node* const* args",
            "int arg_count",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a construct operation speculatively based on type feedback. Currently only inserts deoptimizations based on lack of feedback."
        },
        {
          "name": "ReduceGetIteratorOperation",
          "parameters": [
            "const Operator* op",
            "Node* receiver",
            "Node* effect",
            "Node* control",
            "FeedbackSlot load_slot",
            "FeedbackSlot call_slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces GetIterator operation. Inserts deoptimizations based on lack of feedback."
        },
        {
          "name": "ReduceLoadNamedOperation",
          "parameters": [
            "const Operator* op",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a LoadNamed operation based on type feedback."
        },
        {
          "name": "ReduceLoadKeyedOperation",
          "parameters": [
            "const Operator* op",
            "Node* obj",
            "Node* key",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a LoadKeyed operation based on type feedback."
        },
        {
          "name": "ReduceStoreNamedOperation",
          "parameters": [
            "const Operator* op",
            "Node* obj",
            "Node* val",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a StoreNamed operation based on type feedback."
        },
        {
          "name": "ReduceStoreKeyedOperation",
          "parameters": [
            "const Operator* op",
            "Node* obj",
            "Node* key",
            "Node* val",
            "Node* effect",
            "Node* control",
            "FeedbackSlot slot"
          ],
          "return_type": "LoweringResult",
          "logic": "Reduces a StoreKeyed operation based on type feedback."
        },
        {
          "name": "BuildDeoptIfFeedbackIsInsufficient",
          "parameters": [
            "FeedbackSlot slot",
            "Node* effect",
            "Node* control",
            "DeoptimizeReason reason"
          ],
          "return_type": "Node*",
          "logic": "Builds a deoptimization node if the feedback is insufficient for the given slot."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "BinaryOperationHintToNumberOperationHint",
      "parameters": [
        "BinaryOperationHint binop_hint",
        "NumberOperationHint* number_hint"
      ],
      "return_type": "bool",
      "logic": "Converts a BinaryOperationHint to a NumberOperationHint, returns true if the conversion is successful, false otherwise."
    },
    {
      "name": "BinaryOperationHintToBigIntOperationHint",
      "parameters": [
        "BinaryOperationHint binop_hint",
        "BigIntOperationHint* bigint_hint"
      ],
      "return_type": "bool",
      "logic": "Converts a BinaryOperationHint to a BigIntOperationHint, returns true if the conversion is successful, false otherwise."
    }
  ]
}