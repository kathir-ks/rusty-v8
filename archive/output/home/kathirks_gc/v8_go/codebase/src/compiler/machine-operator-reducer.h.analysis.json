{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/machine-operator-reducer.h",
  "imports": [
    "<optional>",
    "src/base/compiler-specific.h",
    "src/common/globals.h",
    "src/compiler/graph-reducer.h",
    "src/compiler/machine-operator.h"
  ],
  "classes": [
    {
      "name": "MachineOperatorReducer",
      "properties": [
        "mcgraph_",
        "signalling_nan_propagation_"
      ],
      "methods": [
        {
          "name": "MachineOperatorReducer",
          "parameters": [
            "Editor* editor",
            "MachineGraph* mcgraph",
            "SignallingNanPropagation signalling_nan_propagation"
          ],
          "return_type": "N/A (constructor)",
          "logic": "Constructor for the MachineOperatorReducer. Initializes the reducer with an editor, a machine graph, and a setting for signalling NaN propagation."
        },
        {
          "name": "~MachineOperatorReducer",
          "parameters": [],
          "return_type": "N/A (destructor)",
          "logic": "Destructor for the MachineOperatorReducer."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer, which is \"MachineOperatorReducer\"."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a given node by applying constant folding and strength reduction based on the machine operator associated with the node."
        },
        {
          "name": "Float32Constant",
          "parameters": [
            "float value"
          ],
          "return_type": "Node*",
          "logic": "Creates a Float32 constant node."
        },
        {
          "name": "Float64Constant",
          "parameters": [
            "double value"
          ],
          "return_type": "Node*",
          "logic": "Creates a Float64 constant node."
        },
        {
          "name": "Int32Constant",
          "parameters": [
            "int32_t value"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 constant node."
        },
        {
          "name": "Int64Constant",
          "parameters": [
            "int64_t value"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int64 constant node."
        },
        {
          "name": "Uint32Constant",
          "parameters": [
            "uint32_t value"
          ],
          "return_type": "Node*",
          "logic": "Creates a Uint32 constant node by bit_casting the value to int32_t and calling Int32Constant."
        },
        {
          "name": "Uint64Constant",
          "parameters": [
            "uint64_t value"
          ],
          "return_type": "Node*",
          "logic": "Creates a Uint64 constant node by bit_casting the value to int64_t and calling Int64Constant."
        },
        {
          "name": "Float64Mul",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Float64 multiplication node."
        },
        {
          "name": "Float64PowHalf",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Creates a Float64 power node with exponent 0.5."
        },
        {
          "name": "Word32And",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word32 AND node."
        },
        {
          "name": "Word32And",
          "parameters": [
            "Node* lhs",
            "uint32_t rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word32 AND node with a uint32_t constant."
        },
        {
          "name": "Word32Sar",
          "parameters": [
            "Node* lhs",
            "uint32_t rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word32 SAR (shift arithmetic right) node."
        },
        {
          "name": "Word64Sar",
          "parameters": [
            "Node* lhs",
            "uint32_t rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word64 SAR (shift arithmetic right) node."
        },
        {
          "name": "Word32Shr",
          "parameters": [
            "Node* lhs",
            "uint32_t rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word32 SHR (shift logical right) node."
        },
        {
          "name": "Word64Shr",
          "parameters": [
            "Node* lhs",
            "uint32_t rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word64 SHR (shift logical right) node."
        },
        {
          "name": "Word32Equal",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word32 Equal node."
        },
        {
          "name": "Word64Equal",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word64 Equal node."
        },
        {
          "name": "Word64And",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word64 AND node."
        },
        {
          "name": "Word64And",
          "parameters": [
            "Node* lhs",
            "uint64_t rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates a Word64 AND node with a uint64_t constant."
        },
        {
          "name": "Int32Add",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 Add node."
        },
        {
          "name": "Int64Add",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int64 Add node."
        },
        {
          "name": "Int32Sub",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 Sub node."
        },
        {
          "name": "Int64Sub",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int64 Sub node."
        },
        {
          "name": "Int32Mul",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 Mul node."
        },
        {
          "name": "Int64Mul",
          "parameters": [
            "Node* lhs",
            "Node* rhs"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int64 Mul node."
        },
        {
          "name": "Int32Div",
          "parameters": [
            "Node* dividend",
            "int32_t divisor"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 Div node."
        },
        {
          "name": "Int64Div",
          "parameters": [
            "Node* dividend",
            "int64_t divisor"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int64 Div node."
        },
        {
          "name": "Uint32Div",
          "parameters": [
            "Node* dividend",
            "uint32_t divisor"
          ],
          "return_type": "Node*",
          "logic": "Creates a Uint32 Div node."
        },
        {
          "name": "Uint64Div",
          "parameters": [
            "Node* dividend",
            "uint64_t divisor"
          ],
          "return_type": "Node*",
          "logic": "Creates a Uint64 Div node."
        },
        {
          "name": "TruncateInt64ToInt32",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Creates a TruncateInt64ToInt32 node."
        },
        {
          "name": "ChangeInt32ToInt64",
          "parameters": [
            "Node* value"
          ],
          "return_type": "Node*",
          "logic": "Creates a ChangeInt32ToInt64 node."
        },
        {
          "name": "ReplaceBool",
          "parameters": [
            "bool value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with either 1 or 0 based on the boolean value provided."
        },
        {
          "name": "ReplaceFloat32",
          "parameters": [
            "float value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with a Float32 constant node with the given value."
        },
        {
          "name": "ReplaceFloat64",
          "parameters": [
            "double value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with a Float64 constant node with the given value."
        },
        {
          "name": "ReplaceInt32",
          "parameters": [
            "int32_t value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with an Int32 constant node with the given value."
        },
        {
          "name": "ReplaceUint32",
          "parameters": [
            "uint32_t value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with a Uint32 constant node with the given value."
        },
        {
          "name": "ReplaceInt64",
          "parameters": [
            "int64_t value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with an Int64 constant node with the given value."
        },
        {
          "name": "ReplaceUint64",
          "parameters": [
            "uint64_t value"
          ],
          "return_type": "Reduction",
          "logic": "Replaces the current node with a Uint64 constant node with the given value."
        },
        {
          "name": "ReduceInt32Add",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int32 Add node."
        },
        {
          "name": "ReduceInt64Add",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int64 Add node."
        },
        {
          "name": "ReduceInt32Sub",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int32 Sub node."
        },
        {
          "name": "ReduceInt64Sub",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int64 Sub node."
        },
        {
          "name": "ReduceInt64Mul",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int64 Mul node."
        },
        {
          "name": "ReduceInt32Div",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int32 Div node."
        },
        {
          "name": "ReduceInt64Div",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int64 Div node."
        },
        {
          "name": "ReduceUint32Div",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Uint32 Div node."
        },
        {
          "name": "ReduceUint64Div",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Uint64 Div node."
        },
        {
          "name": "ReduceInt32Mod",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int32 Mod node."
        },
        {
          "name": "ReduceInt64Mod",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an Int64 Mod node."
        },
        {
          "name": "ReduceUint32Mod",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Uint32 Mod node."
        },
        {
          "name": "ReduceUint64Mod",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Uint64 Mod node."
        },
        {
          "name": "ReduceStore",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Store node."
        },
        {
          "name": "ReduceProjection",
          "parameters": [
            "size_t index",
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Projection node."
        },
        {
          "name": "Map64To32Comparison",
          "parameters": [
            "const Operator* op",
            "bool sign_extended"
          ],
          "return_type": "const Operator*",
          "logic": "Maps a 64-bit comparison operator to a 32-bit one."
        },
        {
          "name": "ReduceWord32Comparisons",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces Word32 comparison nodes."
        },
        {
          "name": "ReduceWord64Comparisons",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces Word64 comparison nodes."
        },
        {
          "name": "ReduceWord32Shifts",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces Word32 shift nodes."
        },
        {
          "name": "ReduceWord32Shl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 Shl node."
        },
        {
          "name": "ReduceWord64Shl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 Shl node."
        },
        {
          "name": "ReduceWord32Shr",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 Shr node."
        },
        {
          "name": "ReduceWord64Shr",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 Shr node."
        },
        {
          "name": "ReduceWord32Sar",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 Sar node."
        },
        {
          "name": "ReduceWord64Sar",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 Sar node."
        },
        {
          "name": "ReduceWord32And",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 And node."
        },
        {
          "name": "ReduceWord64And",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 And node."
        },
        {
          "name": "TryMatchWord32Ror",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Tries to match and reduce a Word32 Rotate Right node."
        },
        {
          "name": "ReduceWord32Or",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 Or node."
        },
        {
          "name": "ReduceWord64Or",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 Or node."
        },
        {
          "name": "ReduceWord32Xor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 Xor node."
        },
        {
          "name": "ReduceWord64Xor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 Xor node."
        },
        {
          "name": "ReduceWord32Equal",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word32 Equal node."
        },
        {
          "name": "ReduceWord64Equal",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Word64 Equal node."
        },
        {
          "name": "ReduceFloat64InsertLowWord32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Float64InsertLowWord32 node."
        },
        {
          "name": "ReduceFloat64InsertHighWord32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Float64InsertHighWord32 node."
        },
        {
          "name": "ReduceFloat64Compare",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Float64 Compare node."
        },
        {
          "name": "ReduceFloat64RoundDown",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Float64 RoundDown node."
        },
        {
          "name": "ReduceTruncateInt64ToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TruncateInt64ToInt32 node."
        },
        {
          "name": "ReduceConditional",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Conditional node."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph associated with this reducer."
        },
        {
          "name": "mcgraph",
          "parameters": [],
          "return_type": "MachineGraph*",
          "logic": "Returns the MachineGraph associated with this reducer."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder associated with this reducer."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the MachineOperatorBuilder associated with this reducer."
        },
        {
          "name": "ReduceWordNAnd",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WordN And node (template)."
        },
        {
          "name": "ReduceWordNOr",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WordN Or node (template)."
        },
        {
          "name": "ReduceWordNXor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a WordN Xor node (template)."
        },
        {
          "name": "ReduceUintNLessThanOrEqual",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a UintN LessThanOrEqual node (template)."
        },
        {
          "name": "SimplifyBranch",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Tries to simplify \"if(x == 0)\" by removing the \"== 0\" and inverting branches."
        },
        {
          "name": "SwapBranches",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Helper for SimplifyBranch; swaps the if/else of a branch."
        },
        {
          "name": "ReduceConditionalN",
          "parameters": [
            "Node* node"
          ],
          "return_type": "std::optional<Node*>",
          "logic": "Helper for ReduceConditional. Does not perform the actual reduction; just returns a new Node that could be used as the input to the condition (template)."
        },
        {
          "name": "ReduceWordEqualForConstantRhs",
          "parameters": [
            "Node* lhs",
            "uintN_t rhs"
          ],
          "return_type": "std::optional<std::pair<Node*, uintN_t>>",
          "logic": "Helper for finding a reduced equality condition with a constant RHS. (template)"
        }
      ]
    }
  ],
  "functions": []
}