{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/frame.cc",
  "imports": [
    "src/compiler/frame.h"
  ],
  "classes": [
    {
      "name": "Frame",
      "properties": [
        "fixed_slot_count_",
        "allocated_registers_",
        "allocated_double_registers_",
        "zone_",
        "slot_allocator_",
        "return_slot_count_",
        "spill_slot_count_"
      ],
      "methods": [
        {
          "name": "Frame",
          "parameters": [
            "int fixed_frame_size_in_slots",
            "Zone* zone"
          ],
          "return_type": "Frame",
          "logic": "Constructor for the Frame class. Initializes the fixed frame size, sets register allocation pointers to null, stores the zone, and allocates space in the slot allocator based on the fixed frame size."
        },
        {
          "name": "AlignFrame",
          "parameters": [
            "int alignment"
          ],
          "return_type": "void",
          "logic": "Aligns the frame on the stack to the specified alignment. Adjusts return slot count and spill slot count if necessary, ensuring proper alignment for both return values and spill slots. Asserts that alignment is a power of 2."
        }
      ]
    },
    {
      "name": "FrameAccessState",
      "properties": [
        "has_frame_",
        "fp_relative_only_"
      ],
      "methods": [
        {
          "name": "MarkHasFrame",
          "parameters": [
            "bool state"
          ],
          "return_type": "void",
          "logic": "Sets the flag indicating whether a frame is present and sets the frame access to default either FP or SP."
        },
        {
          "name": "SetFPRelativeOnly",
          "parameters": [
            "bool state"
          ],
          "return_type": "void",
          "logic": "Sets the flag indicating whether the frame access should be FP-relative only."
        },
        {
          "name": "SetFrameAccessToDefault",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets frame access to either frame pointer (FP) or stack pointer (SP) based on whether a frame exists.  If `has_frame_` is true, access is set to FP; otherwise, it's set to SP."
        },
        {
          "name": "GetFrameOffset",
          "parameters": [
            "int spill_slot"
          ],
          "return_type": "FrameOffset",
          "logic": "Calculates the frame offset based on the spill slot and the frame access type (FP or SP). If frame access is FP-relative, it returns an offset from the frame pointer. Otherwise, it calculates an offset from the stack pointer. It also performs a check to ensure the SP offset is not negative."
        }
      ]
    }
  ],
  "functions": []
}