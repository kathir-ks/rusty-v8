{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/graph-assembler.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/graph-assembler.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"<type_traits>\",\n    \"src/base/small-vector.h\",\n    \"src/codegen/tnode.h\",\n    \"src/common/globals.h\",\n    \"src/compiler/feedback-source.h\",\n    \"src/compiler/js-graph.h\",\n    \"src/compiler/node.h\",\n    \"src/compiler/simplified-operator.h\",\n    \"src/objects/hole.h\",\n    \"src/objects/oddball.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"GraphAssemblerLabel\",\n      \"properties\": [\n        \"is_bound_\",\n        \"type_\",\n        \"loop_nesting_level_\",\n        \"merged_count_\",\n        \"effect_\",\n        \"control_\",\n        \"bindings_\",\n        \"representations_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Count\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the number of representations (variables) associated with the label.\"\n        },\n        {\n          \"name\": \"PhiAt\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Returns the Phi node at the given index. Asserts that the label is bound and the index is valid.\"\n        },\n        {\n          \"name\": \"PhiAt\",\n          \"parameters\": [\n            \"size_t index\"\n          ],\n          \"return_type\": \"TNode<T>\",\n          \"logic\": \"Returns the Phi TNode at the given index. Asserts that the label is bound and the index is valid.\"\n        },\n        {\n          \"name\": \"IsUsed\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the label has been merged into at least once (merged_count_ > 0).\"\n        },\n        {\n          \"name\": \"GraphAssemblerLabel\",\n          \"parameters\": [\n            \"GraphAssemblerLabelType type\",\n            \"int loop_nesting_level\",\n            \"Array<MachineRepresentation> reps\"\n          ],\n          \"return_type\": \"N/A (constructor)\",\n          \"logic\": \"Constructor. Initializes the label with the given type, loop nesting level, and representations.\"\n        },\n        {\n          \"name\": \"~GraphAssemblerLabel\",\n          \"parameters\": [],\n          \"return_type\": \"N/A (destructor)\",\n          \"logic\": \"Destructor. Asserts that the label is either bound or has not been merged into.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GraphAssembler\",\n      \"properties\": [\n        \"temp_zone_\",\n        \"mcgraph_\",\n        \"default_branch_semantics_\",\n        \"effect_\",\n        \"control_\",\n        \"node_changed_callback_\",\n        \"inline_reducers_\",\n        \"inline_reductions_blocked_\",\n        \"loop_nesting_level_\",\n        \"loop_headers_\",\n        \"mark_loop_exits_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GraphAssembler\",\n          \"parameters\": [\n            \"MachineGraph* jsgraph\",\n            \"Zone* zone\",\n            \"BranchSemantics default_branch_semantics\",\n            \"std::optional<NodeChangedCallback> node_changed_callback\",\n            \"bool mark_loop_exits\"\n          ],\n          \"return_type\": \"N/A (constructor)\",\n          \"logic\": \"Constructor. Initializes the GraphAssembler with the given JSGraph, Zone, and branch semantics.  Optionally maintains a schedule and can register a node changed callback.\"\n        },\n        {\n          \"name\": \"~GraphAssembler\",\n          \"parameters\": [],\n          \"return_type\": \"N/A (destructor)\",\n          \"logic\": \"Destructor.  Does nothing as this class mostly encapsulates other object's lifetimes.\"\n        },\n        {\n          \"name\": \"simplified\",\n          \"parameters\": [],\n          \"return_type\": \"SimplifiedOperatorBuilder*\",\n          \"logic\": \"Returns a null pointer to the simplified operator builder; must be overriden.\"\n        },\n        {\n          \"name\": \"Reset\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Resets the assembler state.\"\n        },\n        {\n          \"name\": \"InitializeEffectControl\",\n          \"parameters\": [\n            \"Node* effect\",\n            \"Node* control\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the effect and control nodes.\"\n        },\n        {\n          \"name\": \"MakeLabelFor\",\n          \"parameters\": [\n            \"GraphAssemblerLabelType type\",\n            \"Reps... reps\"\n          ],\n          \"return_type\": \"detail::GraphAssemblerLabelForReps<Reps...>\",\n          \"logic\": \"Creates a label with the given type and representations.\"\n        },\n        {\n          \"name\": \"MakeLabelFor\",\n          \"parameters\": [\n            \"GraphAssemblerLabelType type\",\n            \"base::SmallVector<MachineRepresentation, 4> reps\"\n          ],\n          \"return_type\": \"GraphAssemblerDynamicLabel\",\n          \"logic\": \"Creates a dynamic label with the given type and representations.\"\n        },\n        {\n          \"name\": \"MakeLabel\",\n          \"parameters\": [\n            \"Reps... reps\"\n          ],\n          \"return_type\": \"detail::GraphAssemblerLabelForReps<Reps...>\",\n          \"logic\": \"Creates a non-deferred label with the given representations.\"\n        },\n        {\n          \"name\": \"MakeLoopLabel\",\n          \"parameters\": [\n            \"Reps... reps\"\n          ],\n          \"return_type\": \"detail::GraphAssemblerLabelForReps<Reps...>\",\n          \"logic\": \"Creates a loop label with the given representations.\"\n        },\n        {\n          \"name\": \"MakeDeferredLabel\",\n          \"parameters\": [\n            \"Reps... reps\"\n          ],\n          \"return_type\": \"detail::GraphAssemblerLabelForReps<Reps...>\",\n          \"logic\": \"Creates a deferred label with the given representations.\"\n        },\n        {\n          \"name\": \"IntPtrConstant\",\n          \"parameters\": [\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an IntPtr constant node.\"\n        },\n        {\n          \"name\": \"UintPtrConstant\",\n          \"parameters\": [\n            \"uintptr_t value\"\n          ],\n          \"return_type\": \"TNode<UintPtrT>\",\n          \"logic\": \"Creates a UintPtr constant node.\"\n        },\n        {\n          \"name\": \"Int32Constant\",\n          \"parameters\": [\n            \"int32_t value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32 constant node.\"\n        },\n        {\n          \"name\": \"Uint32Constant\",\n          \"parameters\": [\n            \"uint32_t value\"\n          ],\n          \"return_type\": \"TNode<Uint32T>\",\n          \"logic\": \"Creates a Uint32 constant node.\"\n        },\n        {\n          \"name\": \"Int64Constant\",\n          \"parameters\": [\n            \"int64_t value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int64 constant node.\"\n        },\n        {\n          \"name\": \"Uint64Constant\",\n          \"parameters\": [\n            \"uint64_t value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Uint64 constant node.\"\n        },\n        {\n          \"name\": \"UniqueIntPtrConstant\",\n          \"parameters\": [\n            \"intptr_t value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a unique IntPtr constant node.\"\n        },\n        {\n          \"name\": \"Float64Constant\",\n          \"parameters\": [\n            \"double value\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64 constant node.\"\n        },\n        {\n          \"name\": \"ExternalConstant\",\n          \"parameters\": [\n            \"ExternalReference ref\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an ExternalConstant node.\"\n        },\n        {\n          \"name\": \"IsolateField\",\n          \"parameters\": [\n            \"IsolateFieldId id\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a node representing an isolate field.\"\n        },\n        {\n          \"name\": \"Projection\",\n          \"parameters\": [\n            \"int index\",\n            \"Node* value\",\n            \"Node* ctrl\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Projection node.\"\n        },\n        {\n          \"name\": \"Parameter\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Parameter node.\"\n        },\n        {\n          \"name\": \"LoadFramePointer\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a LoadFramePointer node.\"\n        },\n        {\n          \"name\": \"LoadRootRegister\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a LoadRootRegister node.\"\n        },\n        {\n          \"name\": \"LoadStackPointer\",\n          \"parameters\": [],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a LoadStackPointer node.\"\n        },\n        {\n          \"name\": \"SetStackPointer\",\n          \"parameters\": [\n            \"Node* sp\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a SetStackPointer node.\"\n        },\n        {\n          \"name\": \"LoadHeapNumberValue\",\n          \"parameters\": [\n            \"Node* heap_number\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a LoadHeapNumberValue node.\"\n        },\n        {\n          \"name\": \"BitcastFloat32ToInt32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a BitcastFloat32ToInt32 node.\"\n        },\n        {\n          \"name\": \"BitcastFloat64ToInt64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a BitcastFloat64ToInt64 node.\"\n        },\n        {\n          \"name\": \"BitcastInt32ToFloat32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a BitcastInt32ToFloat32 node.\"\n        },\n        {\n          \"name\": \"BitcastWord32ToWord64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a BitcastWord32ToWord64 node.\"\n        },\n        {\n          \"name\": \"BitcastInt64ToFloat64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a BitcastInt64ToFloat64 node.\"\n        },\n        {\n          \"name\": \"ChangeFloat32ToFloat64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeFloat32ToFloat64 node.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToInt32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeFloat64ToInt32 node.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToInt64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeFloat64ToInt64 node.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToUint32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeFloat64ToUint32 node.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToUint64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeFloat64ToUint64 node.\"\n        },\n        {\n          \"name\": \"ChangeInt32ToFloat64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeInt32ToFloat64 node.\"\n        },\n        {\n          \"name\": \"ChangeInt32ToInt64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeInt32ToInt64 node.\"\n        },\n        {\n          \"name\": \"ChangeInt64ToFloat64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeInt64ToFloat64 node.\"\n        },\n        {\n          \"name\": \"ChangeUint32ToFloat64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeUint32ToFloat64 node.\"\n        },\n        {\n          \"name\": \"ChangeUint32ToUint64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a ChangeUint32ToUint64 node.\"\n        },\n        {\n          \"name\": \"Float64Abs\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Abs node.\"\n        },\n        {\n          \"name\": \"Float64ExtractHighWord32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64ExtractHighWord32 node.\"\n        },\n        {\n          \"name\": \"Float64ExtractLowWord32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64ExtractLowWord32 node.\"\n        },\n        {\n          \"name\": \"Float64SilenceNaN\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64SilenceNaN node.\"\n        },\n        {\n          \"name\": \"RoundFloat64ToInt32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a RoundFloat64ToInt32 node.\"\n        },\n        {\n          \"name\": \"RoundInt32ToFloat32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a RoundInt32ToFloat32 node.\"\n        },\n        {\n          \"name\": \"TruncateFloat64ToFloat32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TruncateFloat64ToFloat32 node.\"\n        },\n        {\n          \"name\": \"TruncateFloat64ToWord32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TruncateFloat64ToWord32 node.\"\n        },\n        {\n          \"name\": \"TruncateInt64ToInt32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TruncateInt64ToInt32 node.\"\n        },\n        {\n          \"name\": \"TryTruncateFloat64ToInt64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TryTruncateFloat64ToInt64 node.\"\n        },\n        {\n          \"name\": \"TryTruncateFloat64ToUint64\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TryTruncateFloat64ToUint64 node.\"\n        },\n        {\n          \"name\": \"TryTruncateFloat64ToInt32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TryTruncateFloat64ToInt32 node.\"\n        },\n        {\n          \"name\": \"TryTruncateFloat64ToUint32\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a TryTruncateFloat64ToUint32 node.\"\n        },\n        {\n          \"name\": \"Word32ReverseBytes\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word32ReverseBytes node.\"\n        },\n        {\n          \"name\": \"Word64ReverseBytes\",\n          \"parameters\": [\n            \"Node* input\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64ReverseBytes node.\"\n        },\n        {\n          \"name\": \"Float64Add\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Add node.\"\n        },\n        {\n          \"name\": \"Float64Div\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Div node.\"\n        },\n        {\n          \"name\": \"Float64Equal\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Equal node.\"\n        },\n        {\n          \"name\": \"Float64InsertHighWord32\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64InsertHighWord32 node.\"\n        },\n        {\n          \"name\": \"Float64InsertLowWord32\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64InsertLowWord32 node.\"\n        },\n        {\n          \"name\": \"Float64LessThan\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64LessThan node.\"\n        },\n        {\n          \"name\": \"Float64LessThanOrEqual\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64LessThanOrEqual node.\"\n        },\n        {\n          \"name\": \"Float64Max\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Max node.\"\n        },\n        {\n          \"name\": \"Float64Min\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Min node.\"\n        },\n        {\n          \"name\": \"Float64Mod\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Mod node.\"\n        },\n        {\n          \"name\": \"Float64Sub\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Float64Sub node.\"\n        },\n        {\n          \"name\": \"Int32Add\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32Add node.\"\n        },\n        {\n          \"name\": \"Int32LessThan\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32LessThan node.\"\n        },\n        {\n          \"name\": \"Int32LessThanOrEqual\",\n          \"parameters\": [\n            \"SloppyTNode<Int32T> left\",\n            \"SloppyTNode<Int32T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Creates an Int32LessThanOrEqual node.\"\n        },\n        {\n          \"name\": \"Int32Mul\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32Mul node.\"\n        },\n        {\n          \"name\": \"Int32Sub\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32Sub node.\"\n        },\n        {\n          \"name\": \"Int64Add\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int64Add node.\"\n        },\n        {\n          \"name\": \"Int64Sub\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int64Sub node.\"\n        },\n        {\n          \"name\": \"IntAdd\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an IntAdd node.\"\n        },\n        {\n          \"name\": \"IntLessThan\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an IntLessThan node.\"\n        },\n        {\n          \"name\": \"IntMul\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an IntMul node.\"\n        },\n        {\n          \"name\": \"IntSub\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an IntSub node.\"\n        },\n        {\n          \"name\": \"Uint32LessThan\",\n          \"parameters\": [\n            \"SloppyTNode<Uint32T> left\",\n            \"SloppyTNode<Uint32T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Creates a Uint32LessThan node.\"\n        },\n        {\n          \"name\": \"Uint32LessThanOrEqual\",\n          \"parameters\": [\n            \"SloppyTNode<Uint32T> left\",\n            \"SloppyTNode<Uint32T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Creates a Uint32LessThanOrEqual node.\"\n        },\n        {\n          \"name\": \"Uint64LessThan\",\n          \"parameters\": [\n            \"SloppyTNode<Uint64T> left\",\n            \"SloppyTNode<Uint64T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Creates a Uint64LessThan node.\"\n        },\n        {\n          \"name\": \"Uint64LessThanOrEqual\",\n          \"parameters\": [\n            \"SloppyTNode<Uint64T> left\",\n            \"SloppyTNode<Uint64T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Creates a Uint64LessThanOrEqual node.\"\n        },\n        {\n          \"name\": \"UintLessThan\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a UintLessThan node.\"\n        },\n        {\n          \"name\": \"Word32And\",\n          \"parameters\": [\n            \"SloppyTNode<Word32T> left\",\n            \"SloppyTNode<Word32T> right\"\n          ],\n          \"return_type\": \"TNode<Word32T>\",\n          \"logic\": \"Creates a Word32And node.\"\n        },\n        {\n          \"name\": \"Word32Equal\",\n          \"parameters\": [\n            \"SloppyTNode<Word32T> left\",\n            \"SloppyTNode<Word32T> right\"\n          ],\n          \"return_type\": \"TNode<BoolT>\",\n          \"logic\": \"Creates a Word32Equal node.\"\n        },\n        {\n          \"name\": \"Word32Or\",\n          \"parameters\": [\n            \"SloppyTNode<Word32T> left\",\n            \"SloppyTNode<Word32T> right\"\n          ],\n          \"return_type\": \"TNode<Word32T>\",\n          \"logic\": \"Creates a Word32Or node.\"\n        },\n        {\n          \"name\": \"Word32Sar\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word32Sar node.\"\n        },\n        {\n          \"name\": \"Word32SarShiftOutZeros\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word32SarShiftOutZeros node.\"\n        },\n        {\n          \"name\": \"Word32Shl\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word32Shl node.\"\n        },\n        {\n          \"name\": \"Word32Shr\",\n          \"parameters\": [\n            \"SloppyTNode<Word32T> left\",\n            \"SloppyTNode<Word32T> right\"\n          ],\n          \"return_type\": \"TNode<Word32T>\",\n          \"logic\": \"Creates a Word32Shr node.\"\n        },\n        {\n          \"name\": \"Word32Xor\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word32Xor node.\"\n        },\n        {\n          \"name\": \"Word64And\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64And node.\"\n        },\n        {\n          \"name\": \"Word64Equal\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64Equal node.\"\n        },\n        {\n          \"name\": \"Word64Or\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64Or node.\"\n        },\n        {\n          \"name\": \"Word64Sar\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64Sar node.\"\n        },\n        {\n          \"name\": \"Word64SarShiftOutZeros\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64SarShiftOutZeros node.\"\n        },\n        {\n          \"name\": \"Word64Shl\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64Shl node.\"\n        },\n        {\n          \"name\": \"Word64Shr\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64Shr node.\"\n        },\n        {\n          \"name\": \"Word64Xor\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a Word64Xor node.\"\n        },\n        {\n          \"name\": \"WordAnd\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordAnd node.\"\n        },\n        {\n          \"name\": \"WordEqual\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordEqual node.\"\n        },\n        {\n          \"name\": \"WordOr\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordOr node.\"\n        },\n        {\n          \"name\": \"WordSar\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordSar node.\"\n        },\n        {\n          \"name\": \"WordSarShiftOutZeros\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordSarShiftOutZeros node.\"\n        },\n        {\n          \"name\": \"WordShl\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordShl node.\"\n        },\n        {\n          \"name\": \"WordShr\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordShr node.\"\n        },\n        {\n          \"name\": \"WordXor\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates a WordXor node.\"\n        },\n        {\n          \"name\": \"Int32AddWithOverflow\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32AddWithOverflow node.\"\n        },\n        {\n          \"name\": \"Int64AddWithOverflow\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int64AddWithOverflow node.\"\n        },\n        {\n          \"name\": \"Int32Div\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32Div node.\"\n        },\n        {\n          \"name\": \"Int32Mod\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node*\",\n          \"logic\": \"Creates an Int32Mod node.\"\n        },\n        {\n          \"name\": \"Int32MulWithOverflow\",\n          \"parameters\": [\n            \"Node* left\",\n            \"Node* right\"\n          ],\n          \"return_type\": \"Node"
}