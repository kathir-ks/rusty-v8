{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/growable-stacks-reducer.h",
  "imports": [
    "src/compiler/globals.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "GrowableStacksReducer",
      "properties": [
        "skip_reducer_",
        "call_descriptor_"
      ],
      "methods": [
        {
          "name": "GrowableStacksReducer",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor. Initializes the reducer, skipping it if not compiling wasm with growable stacks. Fetches and potentially modifies the Wasm call descriptor for the function being compiled."
        },
        {
          "name": "REDUCE(WasmStackCheck)",
          "parameters": [
            "WasmStackCheckOp::Kind kind"
          ],
          "return_type": "V<None>",
          "logic": "Reduces a WasmStackCheck operation. If growable stacks are enabled, it checks if the current stack pointer exceeds the stack limit. If it doesn't, it calls a builtin function `kWasmGrowableStackGuard` to grow the stack."
        },
        {
          "name": "REDUCE(Return)",
          "parameters": [
            "V<Word32> pop_count",
            "base::Vector<const OpIndex> return_values",
            "bool spill_caller_frame_slots"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a Return operation. If growable stacks are enabled and caller frame slots are spilled and return slots exists, it saves return values into stack frame slots pointed by old frame pointer and passes the rest to the next reducer.  The function loads old frame pointer from a stack frame segment when current stack frame is the start of WASM segment, since frame pointer is not chained there."
        }
      ]
    }
  ],
  "functions": []
}