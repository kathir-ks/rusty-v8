{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/functional-list.h",
  "imports": [
    "src/base/iterator.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "FunctionalList",
      "properties": [
        "elements_"
      ],
      "methods": [
        {
          "name": "FunctionalList",
          "parameters": [],
          "return_type": "FunctionalList",
          "logic": "Constructor, initializes elements_ to nullptr (empty list)."
        },
        {
          "name": "operator==",
          "parameters": [
            "const FunctionalList<A>& other"
          ],
          "return_type": "bool",
          "logic": "Compares two FunctionalLists for equality, element by element."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const FunctionalList<A>& other"
          ],
          "return_type": "bool",
          "logic": "Compares two FunctionalLists for inequality."
        },
        {
          "name": "TriviallyEquals",
          "parameters": [
            "const FunctionalList<A>& other"
          ],
          "return_type": "bool",
          "logic": "Compares two FunctionalLists by checking if their 'elements_' pointers are equal (shallow equality)."
        },
        {
          "name": "Front",
          "parameters": [],
          "return_type": "const A&",
          "logic": "Returns the first element of the list."
        },
        {
          "name": "Rest",
          "parameters": [],
          "return_type": "FunctionalList",
          "logic": "Returns a new FunctionalList containing all elements except the first."
        },
        {
          "name": "DropFront",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes the first element from the list."
        },
        {
          "name": "PushFront",
          "parameters": [
            "A a",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Adds an element to the front of the list, allocating a new Cons node in the given zone."
        },
        {
          "name": "PushFront",
          "parameters": [
            "A a",
            "Zone* zone",
            "FunctionalList hint"
          ],
          "return_type": "void",
          "logic": "Adds an element to the front of the list, reusing an existing FunctionalList if it matches the new state. Otherwise, allocates a new Cons node."
        },
        {
          "name": "ResetToCommonAncestor",
          "parameters": [
            "FunctionalList other"
          ],
          "return_type": "void",
          "logic": "Drops elements from both lists until they share a common tail (same memory location)."
        },
        {
          "name": "Size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of elements in the list."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes all elements from the list."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator pointing to the first element of the list."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator pointing to the end of the list."
        }
      ]
    },
    {
      "name": "FunctionalList::iterator",
      "properties": [
        "current_"
      ],
      "methods": [
        {
          "name": "iterator",
          "parameters": [
            "Cons* cur"
          ],
          "return_type": "iterator",
          "logic": "Constructor for the iterator, initializes current_ to the given Cons node."
        },
        {
          "name": "operator*",
          "parameters": [],
          "return_type": "const A&",
          "logic": "Returns the element pointed to by the iterator."
        },
        {
          "name": "operator++",
          "parameters": [],
          "return_type": "iterator&",
          "logic": "Advances the iterator to the next element in the list."
        },
        {
          "name": "operator==",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for equality."
        },
        {
          "name": "operator!=",
          "parameters": [
            "const iterator& other"
          ],
          "return_type": "bool",
          "logic": "Compares two iterators for inequality."
        }
      ]
    },
    {
      "name": "FunctionalList::Cons",
      "properties": [
        "top",
        "rest",
        "size"
      ],
      "methods": [
        {
          "name": "Cons",
          "parameters": [
            "A top",
            "Cons* rest"
          ],
          "return_type": "Cons",
          "logic": "Constructor for the Cons node. Initializes 'top' with the provided value, 'rest' with the pointer to the rest of the list, and 'size' with the size of the sublist."
        }
      ]
    }
  ],
  "functions": []
}