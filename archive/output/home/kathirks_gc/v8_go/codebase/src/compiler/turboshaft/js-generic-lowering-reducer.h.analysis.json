{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/js-generic-lowering-reducer.h",
  "imports": [
    "src/compiler/globals.h",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "JSGenericLoweringReducer",
      "properties": [
        "isolate_"
      ],
      "methods": [
        {
          "name": "REDUCE(GenericBinop)",
          "parameters": [
            "V<Object> left",
            "V<Object> right",
            "V<FrameState> frame_state",
            "V<Context> context",
            "GenericBinopOp::Kind kind",
            "LazyDeoptOnThrow lazy_deopt_on_throw"
          ],
          "return_type": "V<Object>",
          "logic": "Reduces a generic binary operation by calling a corresponding builtin based on the 'kind'. It uses a switch statement based on the GenericBinopOp::Kind enum. It intentionally avoids the WithFeedback variants of builtins."
        },
        {
          "name": "REDUCE(GenericUnop)",
          "parameters": [
            "V<Object> input",
            "V<FrameState> frame_state",
            "V<Context> context",
            "GenericUnopOp::Kind kind",
            "LazyDeoptOnThrow lazy_deopt_on_throw"
          ],
          "return_type": "V<Object>",
          "logic": "Reduces a generic unary operation by calling a corresponding builtin based on the 'kind'. It uses a switch statement based on the GenericUnopOp::Kind enum."
        },
        {
          "name": "REDUCE(ToNumberOrNumeric)",
          "parameters": [
            "V<Object> input",
            "V<FrameState> frame_state",
            "V<Context> context",
            "Object::Conversion kind",
            "LazyDeoptOnThrow lazy_deopt_on_throw"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces a ToNumberOrNumeric operation by calling either ToNumber or ToNumeric builtin, based on the 'kind'.  It first checks if the input is already a Number (Smi or HeapNumber). If so, it avoids the builtin call. Otherwise, it calls the appropriate builtin based on the Object::Conversion enum."
        }
      ]
    }
  ],
  "functions": []
}