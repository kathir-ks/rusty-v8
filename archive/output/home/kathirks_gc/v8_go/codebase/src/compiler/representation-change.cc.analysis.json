{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/representation-change.cc",
  "imports": [
    "src/compiler/representation-change.h",
    "sstream",
    "src/base/safe_conversions.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-matchers.h",
    "src/compiler/simplified-lowering-verifier.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/type-cache.h",
    "src/compiler/use-info.h",
    "src/heap/factory-inl.h"
  ],
  "classes": [
    {
      "name": "Truncation",
      "properties": [],
      "methods": [
        {
          "name": "description",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns a string description of the truncation kind."
        },
        {
          "name": "Generalize",
          "parameters": [
            "TruncationKind rep1",
            "TruncationKind rep2"
          ],
          "return_type": "Truncation::TruncationKind",
          "logic": "Generalizes two truncation kinds, returning the least general kind that is more general than both inputs."
        },
        {
          "name": "GeneralizeIdentifyZeros",
          "parameters": [
            "IdentifyZeros i1",
            "IdentifyZeros i2"
          ],
          "return_type": "IdentifyZeros",
          "logic": "Generalizes two IdentifyZeros flags.  If they are the same, returns the same flag.  Otherwise, returns kDistinguishZeros."
        },
        {
          "name": "LessGeneral",
          "parameters": [
            "TruncationKind rep1",
            "TruncationKind rep2"
          ],
          "return_type": "bool",
          "logic": "Determines if one truncation kind is less general than another according to the partial order defined in the code."
        },
        {
          "name": "LessGeneralIdentifyZeros",
          "parameters": [
            "IdentifyZeros i1",
            "IdentifyZeros i2"
          ],
          "return_type": "bool",
          "logic": "Determines if one IdentifyZeros flag is less general than another."
        }
      ]
    },
    {
      "name": "RepresentationChanger",
      "properties": [
        "cache_",
        "jsgraph_",
        "broker_",
        "verifier_",
        "testing_type_errors_",
        "type_error_",
        "ieee754_fp16_raw_bits_to_fp32_raw_bits_code_",
        "ieee754_fp64_to_fp16_raw_bits_code_",
        "ieee754_fp16_raw_bits_to_fp32_raw_bits_operator_",
        "ieee754_fp64_to_fp16_raw_bits_operator_"
      ],
      "methods": [
        {
          "name": "RepresentationChanger",
          "parameters": [
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "SimplifiedLoweringVerifier* verifier"
          ],
          "return_type": "void",
          "logic": "Constructor for the RepresentationChanger class. Initializes member variables."
        },
        {
          "name": "GetRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node from output_rep to the representation required by use_info. Inserts necessary conversion nodes."
        },
        {
          "name": "GetTaggedSignedRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to TaggedSigned. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "GetTaggedPointerRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to TaggedPointer.  Handles various output representations, BigInt checks and inserts appropriate conversion operators."
        },
        {
          "name": "GetTaggedRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Truncation truncation"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Tagged. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "GetFloat16RawBitsRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Float16RawBits. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "GetFloat32RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Truncation truncation"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Float32. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "GetFloat64RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Float64. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "MakeTruncatedInt32Constant",
          "parameters": [
            "double value"
          ],
          "return_type": "Node*",
          "logic": "Creates an Int32 constant node from a double value, truncating the double to an int32."
        },
        {
          "name": "InsertUnconditionalDeopt",
          "parameters": [
            "Node* node",
            "DeoptimizeReason reason",
            "const FeedbackSource& feedback"
          ],
          "return_type": "Node*",
          "logic": "Inserts a deoptimization node that will always deoptimize the code.  Used when a type cannot be converted."
        },
        {
          "name": "GetWord32RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Word32. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "InsertConversion",
          "parameters": [
            "Node* node",
            "const Operator* op",
            "Node* use_node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a conversion node into the graph.  If the operator has control inputs, it connects to effect and control chains."
        },
        {
          "name": "GetBitRepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Bit. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "GetWord64RepresentationFor",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "Node* use_node",
            "UseInfo use_info"
          ],
          "return_type": "Node*",
          "logic": "Changes the representation of a node to Word64. Handles various output representations and inserts appropriate conversion operators."
        },
        {
          "name": "Int32OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the MachineOperator corresponding to a particular IrOpcode, assuming Int32 representation."
        },
        {
          "name": "Int32OverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the SimplifiedOperator corresponding to a particular IrOpcode, assuming Int32 representation and checking for overflow."
        },
        {
          "name": "AdditiveSafeIntegerOverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the SimplifiedOperator corresponding to a particular IrOpcode, assuming AdditiveSafeInteger representation and checking for overflow."
        },
        {
          "name": "Int64OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the MachineOperator corresponding to a particular IrOpcode, assuming Int64 representation."
        },
        {
          "name": "Int64OverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the SimplifiedOperator corresponding to a particular IrOpcode, assuming Int64 representation and checking for overflow."
        },
        {
          "name": "BigIntOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the SimplifiedOperator corresponding to a particular IrOpcode, assuming BigInt representation."
        },
        {
          "name": "TaggedSignedOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the MachineOperator corresponding to a particular IrOpcode, assuming TaggedSigned representation."
        },
        {
          "name": "Uint32OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the MachineOperator corresponding to a particular IrOpcode, assuming Uint32 representation."
        },
        {
          "name": "Uint32OverflowOperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the SimplifiedOperator corresponding to a particular IrOpcode, assuming Uint32 representation and checking for overflow."
        },
        {
          "name": "Float64OperatorFor",
          "parameters": [
            "IrOpcode::Value opcode"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the MachineOperator corresponding to a particular IrOpcode, assuming Float64 representation."
        },
        {
          "name": "TypeError",
          "parameters": [
            "Node* node",
            "MachineRepresentation output_rep",
            "Type output_type",
            "MachineRepresentation use"
          ],
          "return_type": "Node*",
          "logic": "Handles type errors during representation changes, potentially triggering a fatal error."
        },
        {
          "name": "InsertChangeBitToTagged",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeBitToTagged node in the graph."
        },
        {
          "name": "InsertChangeFloat32ToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeFloat32ToFloat64 node in the graph."
        },
        {
          "name": "InsertChangeFloat64ToUint32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeFloat64ToUint32 node in the graph."
        },
        {
          "name": "InsertChangeFloat64ToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeFloat64ToInt32 node in the graph."
        },
        {
          "name": "InsertChangeInt32ToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeInt32ToFloat64 node in the graph."
        },
        {
          "name": "InsertChangeTaggedSignedToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeTaggedSignedToInt32 node in the graph."
        },
        {
          "name": "InsertChangeTaggedToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeTaggedToFloat64 node in the graph."
        },
        {
          "name": "InsertChangeUint32ToFloat64",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a ChangeUint32ToFloat64 node in the graph."
        },
        {
          "name": "InsertTruncateInt64ToInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a TruncateInt64ToInt32 node in the graph."
        },
        {
          "name": "InsertCheckedFloat64ToInt32",
          "parameters": [
            "Node* node",
            "CheckForMinusZeroMode check",
            "const FeedbackSource& feedback",
            "Node* use_node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a CheckedFloat64ToInt32 node in the graph."
        },
        {
          "name": "Ieee754Fp16RawBitsToFp32RawBitsCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the external constant node of ieee754_fp16_raw_bits_to_fp32_raw_bits code."
        },
        {
          "name": "Ieee754Fp64ToFp16RawBitsCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the external constant node of ieee754_fp64_to_fp16_raw_bits code."
        },
        {
          "name": "Ieee754Fp16RawBitsToFp32RawBitsOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Returns the call operator of ieee754_fp16_raw_bits_to_fp32_raw_bits."
        },
        {
          "name": "Ieee754Fp64ToFp16RawBitsOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Returns the call operator of ieee754_fp64_to_fp16_raw_bits."
        },
        {
          "name": "InsertChangeFloat16RawBitsToFloat64Fallback",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Fallback implementation for changing Float16RawBits to Float64, calling the runtime if native implementation is unavailable."
        },
        {
          "name": "InsertTruncateFloat64ToFloat16RawBitsFallback",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Fallback implementation for truncating Float64 to Float16RawBits, calling the runtime if native implementation is unavailable."
        },
        {
          "name": "InsertTypeOverrideForVerifier",
          "parameters": [
            "const Type& type",
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Inserts a type override for the verifier, used for debugging and validation."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsWord",
      "parameters": [
        "MachineRepresentation rep"
      ],
      "return_type": "bool",
      "logic": "Checks if the given MachineRepresentation is a word representation (Word8, Word16, or Word32)."
    },
    {
      "name": "TypeCheckIsBigInt",
      "parameters": [
        "TypeCheckKind type_check"
      ],
      "return_type": "bool",
      "logic": "Checks if the given TypeCheckKind indicates a BigInt type."
    },
    {
      "name": "SupportsFpParamsInCLinkage",
      "parameters": [],
      "return_type": "constexpr bool",
      "logic": "Return if the current compiler supports floating point parameters in C linkage functions."
    }
  ]
}