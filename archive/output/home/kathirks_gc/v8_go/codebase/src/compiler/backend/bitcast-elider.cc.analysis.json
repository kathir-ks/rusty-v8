{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/bitcast-elider.cc",
  "imports": [
    "src/compiler/backend/bitcast-elider.h",
    "src/compiler/turbofan-graph.h"
  ],
  "classes": [
    {
      "name": "BitcastElider",
      "properties": [
        "graph_",
        "to_visit_",
        "seen_",
        "is_builtin_"
      ],
      "methods": [
        {
          "name": "Enqueue",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the to_visit_ queue if it hasn't been seen before. Uses the seen_ bitset to track visited nodes."
        },
        {
          "name": "Revisit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the to_visit_ queue to be visited again.  Used after a replacement to re-evaluate the node."
        },
        {
          "name": "VisitNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a node and checks its inputs for bitcasts or truncate operations that can be elided. If an input can be elided, it replaces the input with its input and revisits the current node. Otherwise enqueues the input for later processing."
        },
        {
          "name": "ProcessGraph",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts the elision process by enqueueing the graph's end node and then iteratively processing nodes from the to_visit_ queue until it is empty."
        },
        {
          "name": "BitcastElider",
          "parameters": [
            "Zone* zone",
            "TFGraph* graph",
            "bool is_builtin"
          ],
          "return_type": "BitcastElider",
          "logic": "Constructor for the BitcastElider class. Initializes the graph_, to_visit_, seen_, and is_builtin_ members."
        },
        {
          "name": "Reduce",
          "parameters": [],
          "return_type": "void",
          "logic": "Starts the bitcast elision process by calling ProcessGraph()."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsBitcast",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if a node is a bitcast operation of a specific type that can be elided."
    },
    {
      "name": "OwnedByWord32Op",
      "parameters": [
        "Node* node"
      ],
      "return_type": "bool",
      "logic": "Checks if all uses of a node are word32 operations. Used to determine if a TruncateInt64ToInt32 node can be elided on certain architectures."
    },
    {
      "name": "Replace",
      "parameters": [
        "Node* node",
        "Node* replacement"
      ],
      "return_type": "void",
      "logic": "Replaces all uses of a node with a replacement node and then kills the original node."
    }
  ]
}