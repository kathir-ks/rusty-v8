{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/processed-feedback.h",
  "imports": [
    "src/compiler/heap-refs.h"
  ],
  "classes": [
    {
      "name": "ProcessedFeedback",
      "properties": [
        "kind_",
        "slot_kind_"
      ],
      "methods": [
        {
          "name": "kind",
          "parameters": [],
          "return_type": "Kind",
          "logic": "Returns the Kind of the feedback."
        },
        {
          "name": "slot_kind",
          "parameters": [],
          "return_type": "FeedbackSlotKind",
          "logic": "Returns the FeedbackSlotKind of the feedback."
        },
        {
          "name": "IsInsufficient",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the kind is kInsufficient."
        },
        {
          "name": "AsBinaryOperation",
          "parameters": [],
          "return_type": "BinaryOperationFeedback const&",
          "logic": "Returns a reference to the feedback as a BinaryOperationFeedback object."
        },
        {
          "name": "AsTypeOf",
          "parameters": [],
          "return_type": "TypeOfOpFeedback const&",
          "logic": "Returns a reference to the feedback as a TypeOfOpFeedback object."
        },
        {
          "name": "AsCall",
          "parameters": [],
          "return_type": "CallFeedback const&",
          "logic": "Returns a reference to the feedback as a CallFeedback object."
        },
        {
          "name": "AsCompareOperation",
          "parameters": [],
          "return_type": "CompareOperationFeedback const&",
          "logic": "Returns a reference to the feedback as a CompareOperationFeedback object."
        },
        {
          "name": "AsElementAccess",
          "parameters": [],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Returns a reference to the feedback as an ElementAccessFeedback object."
        },
        {
          "name": "AsForIn",
          "parameters": [],
          "return_type": "ForInFeedback const&",
          "logic": "Returns a reference to the feedback as a ForInFeedback object."
        },
        {
          "name": "AsGlobalAccess",
          "parameters": [],
          "return_type": "GlobalAccessFeedback const&",
          "logic": "Returns a reference to the feedback as a GlobalAccessFeedback object."
        },
        {
          "name": "AsInstanceOf",
          "parameters": [],
          "return_type": "InstanceOfFeedback const&",
          "logic": "Returns a reference to the feedback as an InstanceOfFeedback object."
        },
        {
          "name": "AsNamedAccess",
          "parameters": [],
          "return_type": "NamedAccessFeedback const&",
          "logic": "Returns a reference to the feedback as a NamedAccessFeedback object."
        },
        {
          "name": "AsMegaDOMPropertyAccess",
          "parameters": [],
          "return_type": "MegaDOMPropertyAccessFeedback const&",
          "logic": "Returns a reference to the feedback as a MegaDOMPropertyAccessFeedback object."
        },
        {
          "name": "AsLiteral",
          "parameters": [],
          "return_type": "LiteralFeedback const&",
          "logic": "Returns a reference to the feedback as a LiteralFeedback object."
        },
        {
          "name": "AsRegExpLiteral",
          "parameters": [],
          "return_type": "RegExpLiteralFeedback const&",
          "logic": "Returns a reference to the feedback as a RegExpLiteralFeedback object."
        },
        {
          "name": "AsTemplateObject",
          "parameters": [],
          "return_type": "TemplateObjectFeedback const&",
          "logic": "Returns a reference to the feedback as a TemplateObjectFeedback object."
        },
        {
          "name": "ProcessedFeedback",
          "parameters": [
            "Kind kind",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for ProcessedFeedback."
        }
      ]
    },
    {
      "name": "InsufficientFeedback",
      "properties": [],
      "methods": [
        {
          "name": "InsufficientFeedback",
          "parameters": [
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for InsufficientFeedback."
        }
      ]
    },
    {
      "name": "GlobalAccessFeedback",
      "properties": [
        "cell_or_context_",
        "index_and_immutable_"
      ],
      "methods": [
        {
          "name": "GlobalAccessFeedback",
          "parameters": [
            "PropertyCellRef cell",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for GlobalAccessFeedback when the access is to a PropertyCell."
        },
        {
          "name": "GlobalAccessFeedback",
          "parameters": [
            "ContextRef script_context",
            "int slot_index",
            "bool immutable",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for GlobalAccessFeedback when the access is to a script context slot."
        },
        {
          "name": "GlobalAccessFeedback",
          "parameters": [
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for megamorphic case."
        },
        {
          "name": "IsMegamorphic",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the feedback is megamorphic (no specific cell or context known)."
        },
        {
          "name": "IsPropertyCell",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the feedback refers to a PropertyCell."
        },
        {
          "name": "property_cell",
          "parameters": [],
          "return_type": "PropertyCellRef",
          "logic": "Returns the PropertyCellRef if the feedback refers to a PropertyCell."
        },
        {
          "name": "IsScriptContextSlot",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the feedback refers to a script context slot."
        },
        {
          "name": "script_context",
          "parameters": [],
          "return_type": "ContextRef",
          "logic": "Returns the ContextRef if the feedback refers to a script context slot."
        },
        {
          "name": "slot_index",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the slot index if the feedback refers to a script context slot."
        },
        {
          "name": "immutable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if the slot is immutable, false otherwise."
        },
        {
          "name": "GetConstantHint",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "OptionalObjectRef",
          "logic": "Retrieves a constant hint based on feedback."
        }
      ]
    },
    {
      "name": "KeyedAccessMode",
      "properties": [
        "access_mode_",
        "load_store_mode_"
      ],
      "methods": [
        {
          "name": "FromNexus",
          "parameters": [
            "FeedbackNexus const& nexus"
          ],
          "return_type": "KeyedAccessMode",
          "logic": "Creates a KeyedAccessMode from a FeedbackNexus."
        },
        {
          "name": "access_mode",
          "parameters": [],
          "return_type": "AccessMode",
          "logic": "Returns the AccessMode."
        },
        {
          "name": "IsLoad",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the access mode is a load operation."
        },
        {
          "name": "IsStore",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the access mode is a store operation."
        },
        {
          "name": "load_mode",
          "parameters": [],
          "return_type": "KeyedAccessLoadMode",
          "logic": "Returns the KeyedAccessLoadMode."
        },
        {
          "name": "store_mode",
          "parameters": [],
          "return_type": "KeyedAccessStoreMode",
          "logic": "Returns the KeyedAccessStoreMode."
        }
      ]
    },
    {
      "name": "ElementAccessFeedback",
      "properties": [
        "keyed_mode_",
        "transition_groups_"
      ],
      "methods": [
        {
          "name": "ElementAccessFeedback",
          "parameters": [
            "Zone* zone",
            "KeyedAccessMode const& keyed_mode",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for ElementAccessFeedback."
        },
        {
          "name": "keyed_mode",
          "parameters": [],
          "return_type": "KeyedAccessMode",
          "logic": "Returns the KeyedAccessMode."
        },
        {
          "name": "transition_groups",
          "parameters": [],
          "return_type": "ZoneVector<TransitionGroup> const&",
          "logic": "Returns the transition groups."
        },
        {
          "name": "HasOnlyStringMaps",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "bool",
          "logic": "Checks if all maps in the transition groups are string maps."
        },
        {
          "name": "AddGroup",
          "parameters": [
            "TransitionGroup&& group"
          ],
          "return_type": "void",
          "logic": "Adds a transition group."
        },
        {
          "name": "Refine",
          "parameters": [
            "JSHeapBroker* broker",
            "ZoneVector<MapRef> const& inferred_maps"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Refines the feedback based on inferred maps."
        },
        {
          "name": "Refine",
          "parameters": [
            "JSHeapBroker* broker",
            "ZoneRefSet<Map> const& inferred_maps",
            "bool always_keep_group_target"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Refines the feedback based on inferred maps."
        },
        {
          "name": "Refine",
          "parameters": [
            "JSHeapBroker* broker",
            "NameRef name"
          ],
          "return_type": "NamedAccessFeedback const&",
          "logic": "Refines the element access feedback into named access feedback."
        }
      ]
    },
    {
      "name": "NamedAccessFeedback",
      "properties": [
        "name_",
        "maps_",
        "has_deprecated_map_without_migration_target_"
      ],
      "methods": [
        {
          "name": "NamedAccessFeedback",
          "parameters": [
            "NameRef name",
            "ZoneVector<MapRef> const& maps",
            "FeedbackSlotKind slot_kind",
            "bool has_deprecated_map_without_migration_target"
          ],
          "return_type": "",
          "logic": "Constructor for NamedAccessFeedback."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "NameRef",
          "logic": "Returns the name."
        },
        {
          "name": "maps",
          "parameters": [],
          "return_type": "ZoneVector<MapRef> const&",
          "logic": "Returns the maps."
        },
        {
          "name": "has_deprecated_map_without_migration_target",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if there's a deprecated map without a migration target."
        }
      ]
    },
    {
      "name": "MegaDOMPropertyAccessFeedback",
      "properties": [
        "info_"
      ],
      "methods": [
        {
          "name": "MegaDOMPropertyAccessFeedback",
          "parameters": [
            "FunctionTemplateInfoRef info_ref",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for MegaDOMPropertyAccessFeedback."
        },
        {
          "name": "info",
          "parameters": [],
          "return_type": "FunctionTemplateInfoRef",
          "logic": "Returns the FunctionTemplateInfoRef."
        }
      ]
    },
    {
      "name": "CallFeedback",
      "properties": [
        "target_",
        "frequency_",
        "mode_",
        "content_"
      ],
      "methods": [
        {
          "name": "CallFeedback",
          "parameters": [
            "OptionalHeapObjectRef target",
            "float frequency",
            "SpeculationMode mode",
            "CallFeedbackContent call_feedback_content",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for CallFeedback."
        },
        {
          "name": "target",
          "parameters": [],
          "return_type": "OptionalHeapObjectRef",
          "logic": "Returns the target HeapObjectRef."
        },
        {
          "name": "frequency",
          "parameters": [],
          "return_type": "float",
          "logic": "Returns the frequency."
        },
        {
          "name": "speculation_mode",
          "parameters": [],
          "return_type": "SpeculationMode",
          "logic": "Returns the speculation mode."
        },
        {
          "name": "call_feedback_content",
          "parameters": [],
          "return_type": "CallFeedbackContent",
          "logic": "Returns the call feedback content."
        }
      ]
    },
    {
      "name": "SingleValueFeedback",
      "properties": [
        "value_"
      ],
      "methods": [
        {
          "name": "SingleValueFeedback",
          "parameters": [
            "T value",
            "FeedbackSlotKind slot_kind"
          ],
          "return_type": "",
          "logic": "Constructor for SingleValueFeedback."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "T",
          "logic": "Returns the stored value."
        }
      ]
    },
    {
      "name": "InstanceOfFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "TypeOfOpFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "LiteralFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "RegExpLiteralFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "TemplateObjectFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "BinaryOperationFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "CompareOperationFeedback",
      "properties": [],
      "methods": []
    },
    {
      "name": "ForInFeedback",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "Kind",
      "values": [
        "kInsufficient",
        "kBinaryOperation",
        "kCall",
        "kCompareOperation",
        "kElementAccess",
        "kForIn",
        "kGlobalAccess",
        "kInstanceOf",
        "kTypeOf",
        "kLiteral",
        "kMegaDOMPropertyAccess",
        "kNamedAccess",
        "kRegExpLiteral",
        "kTemplateObject"
      ]
    }
  ]
}