{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/operations.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/operations.cc\",\n  \"imports\": [\n    \"src/compiler/turboshaft/operations.h\",\n    \"atomic\",\n    \"iomanip\",\n    \"optional\",\n    \"sstream\",\n    \"src/base/logging.h\",\n    \"src/base/platform/mutex.h\",\n    \"src/codegen/bailout-reason.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/common/globals.h\",\n    \"src/compiler/backend/instruction-selector.h\",\n    \"src/compiler/frame-states.h\",\n    \"src/compiler/js-heap-broker.h\",\n    \"src/compiler/machine-operator.h\",\n    \"src/compiler/turbofan-graph-visualizer.h\",\n    \"src/compiler/turboshaft/deopt-data.h\",\n    \"src/compiler/turboshaft/graph.h\",\n    \"src/handles/handles-inl.h\",\n    \"src/handles/maybe-handles-inl.h\",\n    \"src/objects/code-inl.h\",\n    \"src/objects/objects-inl.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Operation\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Print\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the operation to standard output.\"\n        },\n        {\n          \"name\": \"PrintInputs\",\n          \"parameters\": [\n            \"std::ostream& os\",\n            \"const std::string& op_index_prefix\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the inputs of the operation to the given output stream. Uses a switch statement to call the correct PrintInputs function for each Opcode. \"\n        },\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the options of the operation to the given output stream. Uses a switch statement to call the correct PrintOptions function for each Opcode.\"\n        },\n        {\n          \"name\": \"ToString\",\n          \"parameters\": [],\n          \"return_type\": \"std::string\",\n          \"logic\": \"Converts the operation to a string representation.\"\n        },\n        {\n          \"name\": \"IsOnlyUserOf\",\n          \"parameters\": [\n            \"const Operation& value\",\n            \"const Graph& graph\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the current operation is the only user of the given value within the graph. Checks the saturated use count.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CallOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"IsStackCheck\",\n          \"parameters\": [\n            \"const Graph& graph\",\n            \"JSHeapBroker* broker\",\n            \"StackCheckKind kind\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Determines whether this call is a stack check of the specified kind based on the called builtin.\"\n        },\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the descriptor of the call operation.\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [\n            \"HashingStrategy strategy\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the CallOp based on hashing strategy.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TailCallOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the descriptor of the tail call operation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConstantOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the value of the constant based on its kind.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ParameterOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the parameter index and debug name, if present.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LoadOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"machine_type\",\n          \"parameters\": [],\n          \"return_type\": \"MachineType\",\n          \"logic\": \"Returns the MachineType of the loaded value.\"\n        },\n        {\n          \"name\": \"PrintInputs\",\n          \"parameters\": [\n            \"std::ostream& os\",\n            \"const std::string& op_index_prefix\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the base, offset, and index (if any) of the memory location being loaded from.\"\n        },\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about the load operation, such as whether the base is tagged, if it's unaligned, and the loaded representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AtomicRMWOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintInputs\",\n          \"parameters\": [\n            \"std::ostream& os\",\n            \"const std::string& op_index_prefix\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the base, index, and value operands of the atomic read-modify-write operation.\"\n        },\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the binary operation and the input/output representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AtomicWord32PairOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintInputs\",\n          \"parameters\": [\n            \"std::ostream& os\",\n            \"const std::string& op_index_prefix\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the inputs of the atomic word32 pair operation, including base, index and values.\"\n        },\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the kind of atomic word32 pair operation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MemoryBarrierOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the memory order of the memory barrier.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StoreOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintInputs\",\n          \"parameters\": [\n            \"std::ostream& os\",\n            \"const std::string& op_index_prefix\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the base, offset, index (if any) and the value being stored to memory.\"\n        },\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about the store operation, such as whether the base is tagged, if it's unaligned, the stored representation, and write barrier.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AllocateOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the type of allocation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DecodeExternalPointerOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the tag range.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FrameStateOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints whether the frame state is inlined, the frame state info, and the state values.\"\n        },\n        {\n          \"name\": \"Validate\",\n          \"parameters\": [\n            \"const Graph& graph\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Validates the frame state operation by checking the inputs against the frame state data.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DeoptimizeIfOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints whether the deoptimization is negated and the parameters.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DidntThrowOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Validate\",\n          \"parameters\": [\n            \"const Graph& graph\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Validates the DidntThrow operation to ensure it follows the correct throwing operation and is correctly positioned in the graph.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WordBinopOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the kind of word binary operation and the representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FloatBinopOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the kind of float binary operation and the representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Word32PairBinopOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the kind of word32 pair binary operation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WordBinopDeoptOnOverflowOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the kind, representation and mode of the operation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OverflowCheckedBinopOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the kind of overflow checked binary operation and the representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SwitchOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the cases and default case of the switch operation.\"\n        },\n        {\n          \"name\": \"Validate\",\n          \"parameters\": [\n            \"const Graph& graph\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Validates the switch operation by checking for duplicated cases.\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [\n            \"HashingStrategy strategy\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the SwitchOp based on hashing strategy.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CompareMapsOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the set of maps being compared.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckMapsOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the set of maps being checked, flags, and feedback.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AssumeMapOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the set of maps being assumed.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JSStackCheckOp\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"Simd128ConstantOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the SIMD128 constant value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simd128ExtractLaneOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the type and lane number being extracted from the SIMD128 value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simd128ReplaceLaneOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the type and lane number being replaced in the SIMD128 value.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simd128LaneMemoryOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about the load/store operation, lane size and lane number.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simd128LoadTransformOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints information about the SIMD128 load transform operation, if it's unaligned or protected, its transform kind, and its offset.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Simd128ShuffleOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints the shuffle mask.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WasmAllocateArrayOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints array type for wasm allocate array operation\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ArrayGetOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PrintOptions\",\n          \"parameters\": [\n            \"std::ostream& os\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prints array element type for array get operation\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CheckExceptionOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Validate\",\n          \"parameters\": [\n            \"const Graph& graph\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Validates the CheckException operation to ensure that it follows right after the throwing operation.\"\n        },\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [\n            \"HashingStrategy strategy\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the CheckExceptionOp based on hashing strategy.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GotoOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [\n            \"HashingStrategy strategy\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the GotoOp based on hashing strategy.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchOp\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"hash_value\",\n          \"parameters\": [\n            \"HashingStrategy strategy\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Calculates the hash value of the BranchOp based on hashing strategy.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SupportedOperations\",\n      \"properties\": [\n        \"mutex_\",\n        \"instance_\",\n        \"initialized_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"Initialize\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Initializes the SupportedOperations singleton, setting flags based on the supported machine operations.\"\n        },\n        {\n          \"name\": \"IsUnalignedLoadSupported\",\n          \"parameters\": [\n            \"MemoryRepresentation repr\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if unaligned load is supported for a given memory representation.\"\n        },\n        {\n          \"name\": \"IsUnalignedStoreSupported\",\n          \"parameters\": [\n            \"MemoryRepresentation repr\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if unaligned store is supported for a given memory representation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"InputsRepFactoryCheck\",\n      \"properties\": [],\n      \"methods\": []\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"get_zone\",\n      \"parameters\": [\n        \"Graph* graph\"\n      ],\n      \"return_type\": \"Zone*\",\n      \"logic\": \"Returns the graph's zone.\"\n    },\n    {\n      \"name\": \"TryGetBuiltinId\",\n      \"parameters\": [\n        \"const ConstantOp* target\",\n        \"JSHeapBroker* broker\"\n      ],\n      \"return_type\": \"std::optional<Builtin>\",\n      \"logic\": \"Attempts to get the builtin ID from a ConstantOp, returning std::nullopt if it's not a builtin call.\"\n    },\n    {\n      \"name\": \"OpcodeName\",\n      \"parameters\": [\n        \"Opcode opcode\"\n      ],\n      \"return_type\": \"const char*\",\n      \"logic\": \"Returns the name of the given opcode.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"OperationPrintStyle styled_op\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print an operation with a specified style. Calls PrintInputs and PrintOptions methods on the operation.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"RootIndex index\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print a root index.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"GenericBinopOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of GenericBinopOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"GenericUnopOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of GenericUnopOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"Word32SignHintOp::Sign sign\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the sign of Word32SignHintOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"WordUnaryOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of WordUnaryOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"OverflowCheckedUnaryOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of OverflowCheckedUnaryOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"FloatUnaryOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of FloatUnaryOp.\"\n    },\n    {\n      \"name\": \"FloatUnaryOp::IsSupported\",\n      \"parameters\": [\n        \"Kind kind\",\n        \"FloatRepresentation rep\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks whether given FloatUnaryOp kind is supported for provided float representation.\"\n    },\n    {\n      \"name\": \"WordUnaryOp::IsSupported\",\n      \"parameters\": [\n        \"Kind kind\",\n        \"WordRepresentation rep\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Checks whether given WordUnaryOp kind is supported for provided word representation.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ShiftOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of ShiftOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ComparisonOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of ComparisonOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ChangeOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of ChangeOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ChangeOrDeoptOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of ChangeOrDeoptOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"TryChangeOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of TryChangeOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"TaggedBitcastOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of TaggedBitcastOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ChangeOp::Assumption assumption\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the assumption of ChangeOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"SelectOp::Implementation kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the implementation kind of the SelectOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"AtomicRMWOp::BinOp bin_op\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the binary operation of the AtomicRMWOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"AtomicWord32PairOp::Kind bin_op\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the binary operation of the AtomicWord32PairOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"FrameConstantOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of FrameConstantOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"OpIndex idx\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print OpIndex.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"BlockIndex b\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print BlockIndex.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"const Block* b\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print Block.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"OpEffects effects\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print OpEffects.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ObjectIsOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print ObjectIsOp::Kind.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ObjectIsOp::InputAssumptions input_assumptions\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print ObjectIsOp::InputAssumptions.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"NumericKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the given NumericKind.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertOp::Kind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the kind of ConvertOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertUntaggedToJSPrimitiveOp::JSPrimitiveKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the JSPrimitiveKind of ConvertUntaggedToJSPrimitiveOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertUntaggedToJSPrimitiveOp::InputInterpretation input_interpretation\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the input interpretation of ConvertUntaggedToJSPrimitiveOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertUntaggedToJSPrimitiveOrDeoptOp::JSPrimitiveKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the ConvertUntaggedToJSPrimitiveOrDeoptOp's JSPrimitiveKind.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertUntaggedToJSPrimitiveOrDeoptOp::InputInterpretation input_interpretation\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the ConvertUntaggedToJSPrimitiveOrDeoptOp's InputInterpretation.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertJSPrimitiveToUntaggedOp::UntaggedKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the UntaggedKind of ConvertJSPrimitiveToUntaggedOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertJSPrimitiveToUntaggedOp::InputAssumptions input_assumptions\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the InputAssumptions of ConvertJSPrimitiveToUntaggedOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertJSPrimitiveToUntaggedOrDeoptOp::UntaggedKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the UntaggedKind of ConvertJSPrimitiveToUntaggedOrDeoptOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConvertJSPrimitiveToUntaggedOrDeoptOp::JSPrimitiveKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the JSPrimitiveKind of ConvertJSPrimitiveToUntaggedOrDeoptOp.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"TruncateJSPrimitiveToUntaggedOp::UntaggedKind kind\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print the UntaggedKind of TruncateJS"
}