{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/x64/code-generator-x64.cc",
  "imports": [
    "<limits>",
    "<optional>",
    "src/base/logging.h",
    "src/base/overflowing-math.h",
    "src/builtins/builtins.h",
    "src/codegen/assembler.h",
    "src/codegen/cpu-features.h",
    "src/codegen/external-reference.h",
    "src/codegen/interface-descriptors-inl.h",
    "src/codegen/macro-assembler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/codegen/x64/assembler-x64.h",
    "src/codegen/x64/register-x64.h",
    "src/common/globals.h",
    "src/common/ptr-compr-inl.h",
    "src/compiler/backend/code-generator-impl.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/gap-resolver.h",
    "src/compiler/backend/instruction-codes.h",
    "src/compiler/node-matchers.h",
    "src/compiler/osr.h",
    "src/execution/frame-constants.h",
    "src/heap/mutable-page-metadata.h",
    "src/objects/code-kind.h",
    "src/objects/smi.h",
    "src/wasm/wasm-linkage.h",
    "src/wasm/wasm-objects.h"
  ],
  "classes": [
    {
      "name": "X64OperandConverter",
      "properties": [],
      "methods": [
        {
          "name": "X64OperandConverter",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for the X64OperandConverter class. Initializes the base class."
        },
        {
          "name": "InputImmediate",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Immediate",
          "logic": "Returns the immediate value of the input at the given index."
        },
        {
          "name": "InputOperand",
          "parameters": [
            "size_t index",
            "int extra = 0"
          ],
          "return_type": "Operand",
          "logic": "Returns the operand of the input at the given index."
        },
        {
          "name": "OutputOperand",
          "parameters": [],
          "return_type": "Operand",
          "logic": "Returns the operand of the output."
        },
        {
          "name": "ToImmediate",
          "parameters": [
            "InstructionOperand* operand"
          ],
          "return_type": "Immediate",
          "logic": "Converts an InstructionOperand to an Immediate value."
        },
        {
          "name": "ToOperand",
          "parameters": [
            "InstructionOperand* op",
            "int extra = 0"
          ],
          "return_type": "Operand",
          "logic": "Converts an InstructionOperand to an Operand."
        },
        {
          "name": "SlotToOperand",
          "parameters": [
            "int slot_index",
            "int extra = 0"
          ],
          "return_type": "Operand",
          "logic": "Converts a stack slot index to an Operand."
        },
        {
          "name": "NextOffset",
          "parameters": [
            "size_t* offset"
          ],
          "return_type": "size_t",
          "logic": "Increments the offset and returns the previous value."
        },
        {
          "name": "ScaleFor",
          "parameters": [
            "AddressingMode one",
            "AddressingMode mode"
          ],
          "return_type": "ScaleFactor",
          "logic": "Calculates the scale factor for addressing modes."
        },
        {
          "name": "MemoryOperand",
          "parameters": [
            "size_t* offset"
          ],
          "return_type": "Operand",
          "logic": "Constructs a memory operand based on the addressing mode encoded in the instruction's opcode."
        },
        {
          "name": "MemoryOperand",
          "parameters": [
            "size_t first_input = 0"
          ],
          "return_type": "Operand",
          "logic": "Constructs a memory operand. Overloaded function."
        }
      ]
    },
    {
      "name": "OutOfLineLoadFloat32NaN",
      "properties": [
        "XMMRegister const result_"
      ],
      "methods": [
        {
          "name": "OutOfLineLoadFloat32NaN",
          "parameters": [
            "CodeGenerator* gen",
            "XMMRegister result"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineLoadFloat32NaN class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates code to load a Float32 NaN into the specified XMM register."
        }
      ]
    },
    {
      "name": "OutOfLineLoadFloat64NaN",
      "properties": [
        "XMMRegister const result_"
      ],
      "methods": [
        {
          "name": "OutOfLineLoadFloat64NaN",
          "parameters": [
            "CodeGenerator* gen",
            "XMMRegister result"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineLoadFloat64NaN class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates code to load a Float64 NaN into the specified XMM register."
        }
      ]
    },
    {
      "name": "OutOfLineTruncateDoubleToI",
      "properties": [
        "Register const result_",
        "XMMRegister const input_",
        "UnwindingInfoWriter* const unwinding_info_writer_",
        "Isolate* isolate_",
        "Zone* zone_"
      ],
      "methods": [
        {
          "name": "OutOfLineTruncateDoubleToI",
          "parameters": [
            "CodeGenerator* gen",
            "Register result",
            "XMMRegister input",
            "StubCallMode stub_mode",
            "UnwindingInfoWriter* unwinding_info_writer"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineTruncateDoubleToI class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates out-of-line code to truncate a double to an integer."
        }
      ]
    },
    {
      "name": "OutOfLineRecordWrite",
      "properties": [
        "Register const object_",
        "Operand const operand_",
        "Register const value_",
        "Register const scratch0_",
        "Register const scratch1_",
        "RecordWriteMode const mode_",
        "Zone* zone_"
      ],
      "methods": [
        {
          "name": "OutOfLineRecordWrite",
          "parameters": [
            "CodeGenerator* gen",
            "Register object",
            "Operand operand",
            "Register value",
            "Register scratch0",
            "Register scratch1",
            "RecordWriteMode mode",
            "StubCallMode stub_mode",
            "IndirectPointerTag indirect_pointer_tag = kIndirectPointerNullTag"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineRecordWrite class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates out-of-line code to perform a record write with a write barrier."
        }
      ]
    },
    {
      "name": "WasmOutOfLineTrap",
      "properties": [
        "CodeGenerator* gen_",
        "Instruction* instr_"
      ],
      "methods": [
        {
          "name": "WasmOutOfLineTrap",
          "parameters": [
            "CodeGenerator* gen",
            "Instruction* instr"
          ],
          "return_type": "void",
          "logic": "Constructor for the WasmOutOfLineTrap class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates code for a wasm trap."
        },
        {
          "name": "GenerateWithTrapId",
          "parameters": [
            "TrapId trap_id"
          ],
          "return_type": "void",
          "logic": "Generates code for a wasm trap with the given trap ID."
        }
      ]
    },
    {
      "name": "OutOfLineTSANStore",
      "properties": [
        "Operand const operand_",
        "Register const value_",
        "Register const scratch0_",
        "int size_",
        "const std::memory_order memory_order_",
        "Zone* zone_"
      ],
      "methods": [
        {
          "name": "OutOfLineTSANStore",
          "parameters": [
            "CodeGenerator* gen",
            "Operand operand",
            "Register value",
            "Register scratch0",
            "StubCallMode stub_mode",
            "int size",
            "std::memory_order order"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineTSANStore class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates out-of-line code to call TSAN store stub."
        }
      ]
    },
    {
      "name": "OutOfLineTSANRelaxedLoad",
      "properties": [
        "Operand const operand_",
        "Register const scratch0_",
        "int size_",
        "Zone* zone_"
      ],
      "methods": [
        {
          "name": "OutOfLineTSANRelaxedLoad",
          "parameters": [
            "CodeGenerator* gen",
            "Operand operand",
            "Register scratch0",
            "StubCallMode stub_mode",
            "int size"
          ],
          "return_type": "void",
          "logic": "Constructor for the OutOfLineTSANRelaxedLoad class."
        },
        {
          "name": "Generate",
          "parameters": [],
          "return_type": "void",
          "logic": "Generates out-of-line code to call TSAN relaxed load stub."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "IsMacroFused",
      "parameters": [
        "FirstMacroFusionInstKind first_kind",
        "SecondMacroFusionInstKind second_kind"
      ],
      "return_type": "bool",
      "logic": "Checks if two instruction kinds can be macro-fused."
    },
    {
      "name": "GetSecondMacroFusionInstKind",
      "parameters": [
        "FlagsCondition condition"
      ],
      "return_type": "SecondMacroFusionInstKind",
      "logic": "Returns the second macro fusion instruction kind based on the flags condition."
    },
    {
      "name": "ShouldAlignForJCCErratum",
      "parameters": [
        "Instruction* instr",
        "FirstMacroFusionInstKind first_kind"
      ],
      "return_type": "bool",
      "logic": "Determines whether instruction needs alignment to mitigate JCC erratum."
    },
    {
      "name": "HasAddressingMode",
      "parameters": [
        "Instruction* instr"
      ],
      "return_type": "bool",
      "logic": "Checks if an instruction has an addressing mode."
    },
    {
      "name": "HasImmediateInput",
      "parameters": [
        "Instruction* instr",
        "size_t index"
      ],
      "return_type": "bool",
      "logic": "Checks if an instruction has an immediate input at the given index."
    },
    {
      "name": "HasRegisterInput",
      "parameters": [
        "Instruction* instr",
        "size_t index"
      ],
      "return_type": "bool",
      "logic": "Checks if an instruction has a register input at the given index."
    },
    {
      "name": "EmitStore",
      "parameters": [
        "MacroAssembler* masm",
        "Operand operand",
        "Register value",
        "MachineRepresentation rep"
      ],
      "return_type": "int",
      "logic": "Emits a store instruction with given parameters."
    },
    {
      "name": "RecordTrapInfoIfNeeded",
      "parameters": [
        "Zone* zone",
        "CodeGenerator* codegen",
        "InstructionCode opcode",
        "Instruction* instr",
        "int pc"
      ],
      "return_type": "void",
      "logic": "Records trap info based on memory access mode and enables trap handling."
    },
    {
      "name": "EmitMemoryProbeForTrapHandlerIfNeeded",
      "parameters": [
        "MacroAssembler* masm",
        "Register scratch",
        "Operand operand",
        "StubCallMode mode",
        "int size"
      ],
      "return_type": "void",
      "logic": "Emits a memory probe to handle out-of-bounds access in trap handler."
    },
    {
      "name": "EmitTSANStoreOOL",
      "parameters": [
        "Zone* zone",
        "CodeGenerator* codegen",
        "MacroAssembler* masm",
        "Operand operand",
        "Register value_reg",
        "X64OperandConverter& i",
        "StubCallMode mode",
        "int size",
        "std::memory_order order"
      ],
      "return_type": "void",
      "logic": "Emits out-of-line code to call TSAN store stub."
    },
    {
      "name": "GetTSANValueRegister",
      "parameters": [
        "MacroAssembler* masm",
        "Register value",
        "X64OperandConverter& i",
        "MachineRepresentation rep"
      ],
      "return_type": "Register",
      "logic": "Gets the correct register for TSAN based on machine representation."
    },
    {
      "name": "EmitTSANAwareStore",
      "parameters": [
        "Zone* zone",
        "CodeGenerator* codegen",
        "MacroAssembler* masm",
        "Operand operand",
        "ValueT value",
        "X64OperandConverter& i",
        "StubCallMode stub_call_mode",
        "MachineRepresentation rep",
        "Instruction* instr"
      ],
      "return_type": "void",
      "logic": "Emits a store instruction that's aware of ThreadSanitizer (TSAN)."
    },
    {
      "name": "EmitTSANRelaxedLoadOOLIfNeeded",
      "parameters": [
        "Zone* zone",
        "CodeGenerator* codegen",
        "MacroAssembler* masm",
        "Operand operand",
        "X64OperandConverter& i",
        "StubCallMode mode",
        "int size"
      ],
      "return_type": "void",
      "logic": "Emits relaxed load OOL if needed for TSAN."
    },
    {
      "name": "AdjustStackPointerForTailCall",
      "parameters": [
        "Instruction* instr",
        "MacroAssembler* assembler",
        "Linkage* linkage",
        "OptimizedCompilationInfo* info",
        "FrameAccessState* state",
        "int new_slot_above_sp",
        "bool allow_shrinkage = true"
      ],
      "return_type": "void",
      "logic": "Adjusts stack pointer for tail calls."
    },
    {
      "name": "SetupSimdImmediateInRegister",
      "parameters": [
        "MacroAssembler* assembler",
        "uint32_t* imms",
        "XMMRegister reg"
      ],
      "return_type": "void",
      "logic": "Sets up a SIMD immediate value in the given register."
    },
    {
      "name": "SetupSimd256ImmediateInRegister",
      "parameters": [
        "MacroAssembler* assembler",
        "uint32_t* imms",
        "YMMRegister reg",
        "XMMRegister scratch"
      ],
      "return_type": "void",
      "logic": "Sets up a SIMD256 immediate value in the given register."
    },
    {
      "name": "ShouldClearOutputRegisterBeforeInstruction",
      "parameters": [
        "CodeGenerator* g",
        "Instruction* instr"
      ],
      "return_type": "bool",
      "logic": "Determines if the output register should be cleared before the instruction is executed."
    }
  ]
}