{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/map-inference.h",
  "imports": [
    "src/compiler/graph-reducer.h",
    "src/objects/instance-type.h",
    "src/objects/map.h"
  ],
  "classes": [
    {
      "name": "MapInference",
      "properties": [
        "broker_",
        "object_",
        "maps_",
        "maps_state_"
      ],
      "methods": [
        {
          "name": "MapInference",
          "parameters": [
            "JSHeapBroker* broker",
            "Node* object",
            "Effect effect"
          ],
          "return_type": "void",
          "logic": "Constructor for the MapInference class. Initializes the broker, object, and other internal state related to map inference."
        },
        {
          "name": "~MapInference",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the MapInference class. Checks if the map information has been made reliable, and crashes if not, ensuring that map inference results are properly handled before object destruction."
        },
        {
          "name": "HaveMaps",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there is any map information available for the object."
        },
        {
          "name": "AllOfInstanceTypesAreJSReceiver",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if all possible instance types of the object are JSReceivers."
        },
        {
          "name": "AllOfInstanceTypesAre",
          "parameters": [
            "InstanceType type"
          ],
          "return_type": "bool",
          "logic": "Checks if all possible instance types of the object match the given InstanceType."
        },
        {
          "name": "AnyOfInstanceTypesAre",
          "parameters": [
            "InstanceType type"
          ],
          "return_type": "bool",
          "logic": "Checks if any of the possible instance types of the object match the given InstanceType."
        },
        {
          "name": "GetMaps",
          "parameters": [],
          "return_type": "ZoneRefSet<Map> const&",
          "logic": "Returns the set of inferred maps for the object.  A guard is generally needed to ensure reliability."
        },
        {
          "name": "AllOfInstanceTypes",
          "parameters": [
            "std::function<bool(InstanceType)> f"
          ],
          "return_type": "bool",
          "logic": "Checks if all possible instance types satisfy a given predicate function. A guard is generally needed to ensure reliability."
        },
        {
          "name": "Is",
          "parameters": [
            "MapRef expected_map"
          ],
          "return_type": "bool",
          "logic": "Checks if the object's inferred map is the given expected map. A guard is generally needed to ensure reliability."
        },
        {
          "name": "RelyOnMapsViaStability",
          "parameters": [
            "CompilationDependencies* dependencies"
          ],
          "return_type": "bool",
          "logic": "Attempts to make the map information reliable by recording stability dependencies. Returns true if successful or if the information was already reliable."
        },
        {
          "name": "RelyOnMapsPreferStability",
          "parameters": [
            "CompilationDependencies* dependencies",
            "JSGraph* jsgraph",
            "Effect* effect",
            "Control control",
            "const FeedbackSource& feedback"
          ],
          "return_type": "bool",
          "logic": "Attempts to make the map information reliable by recording stability dependencies if possible. If stability dependencies can't be recorded, it inserts map checks. Returns true if dependencies were taken."
        },
        {
          "name": "InsertMapChecks",
          "parameters": [
            "JSGraph* jsgraph",
            "Effect* effect",
            "Control control",
            "const FeedbackSource& feedback"
          ],
          "return_type": "void",
          "logic": "Inserts map checks into the graph to ensure that the object has one of the inferred maps at runtime, making the map information reliable."
        },
        {
          "name": "NoChange",
          "parameters": [],
          "return_type": "Reduction",
          "logic": "Marks the maps as reliable internally and returns a NoChange reduction, indicating that no further optimization is needed."
        },
        {
          "name": "Safe",
          "parameters": [],
          "return_type": "bool",
          "logic": "Internal method to check if the current state is safe (e.g., if maps are reliable or have been guarded)."
        },
        {
          "name": "SetNeedGuardIfUnreliable",
          "parameters": [],
          "return_type": "void",
          "logic": "Internal method to set the state to 'need guard' if the maps are unreliable."
        },
        {
          "name": "SetGuarded",
          "parameters": [],
          "return_type": "void",
          "logic": "Internal method to mark the maps as guarded."
        },
        {
          "name": "AllOfInstanceTypesUnsafe",
          "parameters": [
            "std::function<bool(InstanceType)> f"
          ],
          "return_type": "bool",
          "logic": "Internal method, unsafe version of AllOfInstanceTypes.  It does not perform any guarding and should only be called in a very controlled context."
        },
        {
          "name": "AnyOfInstanceTypesUnsafe",
          "parameters": [
            "std::function<bool(InstanceType)> f"
          ],
          "return_type": "bool",
          "logic": "Internal method, unsafe version of AnyOfInstanceTypes. It does not perform any guarding and should only be called in a very controlled context."
        },
        {
          "name": "RelyOnMapsHelper",
          "parameters": [
            "CompilationDependencies* dependencies",
            "JSGraph* jsgraph",
            "Effect* effect",
            "Control control",
            "const FeedbackSource& feedback"
          ],
          "return_type": "bool",
          "logic": "Helper function for RelyOnMapsPreferStability. Implements the core logic of relying on maps, either by recording dependencies or inserting map checks."
        }
      ]
    }
  ],
  "functions": []
}