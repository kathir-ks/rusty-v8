{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/x64/unwinding-info-writer-x64.h",
  "imports": [
    "src/diagnostics/eh-frame.h",
    "src/flags/flags.h"
  ],
  "classes": [
    {
      "name": "UnwindingInfoWriter",
      "properties": [
        "zone_",
        "eh_frame_writer_",
        "tracking_fp_",
        "block_will_exit_",
        "block_initial_states_"
      ],
      "methods": [
        {
          "name": "UnwindingInfoWriter",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the writer with a zone, an eh-frame writer, sets tracking_fp_ and block_will_exit_ to false, and initializes the block initial states. It initializes the eh_frame_writer if unwinding info is enabled."
        },
        {
          "name": "MaybeIncreaseBaseOffsetAt",
          "parameters": [
            "int pc_offset",
            "int base_delta"
          ],
          "return_type": "void",
          "logic": "Conditionally advances the location in the eh-frame writer and increases the base address offset if unwinding info is enabled and frame pointer tracking is not enabled."
        },
        {
          "name": "SetNumberOfInstructionBlocks",
          "parameters": [
            "int number"
          ],
          "return_type": "void",
          "logic": "Resizes the vector of block initial states if unwinding info is enabled."
        },
        {
          "name": "BeginInstructionBlock",
          "parameters": [
            "int pc_offset",
            "const InstructionBlock* block"
          ],
          "return_type": "void",
          "logic": "Placeholder for beginning an instruction block. Implementation likely exists in .cc file."
        },
        {
          "name": "EndInstructionBlock",
          "parameters": [
            "const InstructionBlock* block"
          ],
          "return_type": "void",
          "logic": "Placeholder for ending an instruction block. Implementation likely exists in .cc file."
        },
        {
          "name": "MarkFrameConstructed",
          "parameters": [
            "int pc_base"
          ],
          "return_type": "void",
          "logic": "Placeholder for marking that a frame has been constructed. Implementation likely exists in .cc file."
        },
        {
          "name": "MarkFrameDeconstructed",
          "parameters": [
            "int pc_base"
          ],
          "return_type": "void",
          "logic": "Placeholder for marking that a frame has been deconstructed. Implementation likely exists in .cc file."
        },
        {
          "name": "MarkBlockWillExit",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the block_will_exit_ flag to true."
        },
        {
          "name": "Finish",
          "parameters": [
            "int code_size"
          ],
          "return_type": "void",
          "logic": "Finishes writing the eh-frame if unwinding info is enabled."
        },
        {
          "name": "eh_frame_writer",
          "parameters": [],
          "return_type": "EhFrameWriter*",
          "logic": "Returns a pointer to the eh_frame_writer_ if unwinding info is enabled, otherwise returns a nullptr."
        },
        {
          "name": "enabled",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if unwinding information generation is enabled via a flag."
        }
      ]
    },
    {
      "name": "UnwindingInfoWriter::BlockInitialState",
      "properties": [
        "register_",
        "offset_",
        "tracking_fp_"
      ],
      "methods": [
        {
          "name": "BlockInitialState",
          "parameters": [
            "Register reg",
            "int offset",
            "bool tracking_fp"
          ],
          "return_type": "void",
          "logic": "Constructor that initializes the register, offset and tracking_fp_ of this state."
        }
      ]
    }
  ],
  "functions": []
}