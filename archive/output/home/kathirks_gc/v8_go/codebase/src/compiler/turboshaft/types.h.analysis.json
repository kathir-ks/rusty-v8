{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/types.h",
  "imports": [
    "<cmath>",
    "<limits>",
    "<optional>",
    "src/base/container-utils.h",
    "src/base/export-template.h",
    "src/base/logging.h",
    "src/base/small-vector.h",
    "src/common/globals.h",
    "src/compiler/turboshaft/fast-hash.h",
    "src/numbers/conversions.h",
    "src/objects/turboshaft-types.h",
    "src/utils/ostreams.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "Type",
      "properties": [
        "Kind kind_",
        "uint8_t sub_kind_",
        "uint8_t set_size_",
        "uint8_t reserved_",
        "uint32_t bitfield_",
        "uint64_t header_",
        "uint64_t payload_[2]"
      ],
      "methods": [
        {
          "name": "Type",
          "parameters": [],
          "return_type": "Type",
          "logic": "Default constructor, initializes to Invalid."
        },
        {
          "name": "Invalid",
          "parameters": [],
          "return_type": "Type",
          "logic": "Static method returning an Invalid type."
        },
        {
          "name": "None",
          "parameters": [],
          "return_type": "Type",
          "logic": "Static method returning a None type."
        },
        {
          "name": "Any",
          "parameters": [],
          "return_type": "Type",
          "logic": "Static method returning an Any type."
        },
        {
          "name": "kind",
          "parameters": [],
          "return_type": "Kind",
          "logic": "Returns the kind of the type."
        },
        {
          "name": "IsInvalid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Invalid."
        },
        {
          "name": "IsNone",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is None."
        },
        {
          "name": "IsWord32",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Word32."
        },
        {
          "name": "IsWord64",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Word64."
        },
        {
          "name": "IsFloat32",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Float32."
        },
        {
          "name": "IsFloat64",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Float64."
        },
        {
          "name": "IsTuple",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Tuple."
        },
        {
          "name": "IsAny",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the type is Any."
        },
        {
          "name": "IsWord",
          "parameters": [],
          "return_type": "bool",
          "logic": "Template method to check if the type is Word32 or Word64 based on the template argument."
        },
        {
          "name": "IsFloat",
          "parameters": [],
          "return_type": "bool",
          "logic": "Template method to check if the type is Float32 or Float64 based on the template argument."
        },
        {
          "name": "AsWord32",
          "parameters": [],
          "return_type": "const Word32Type&",
          "logic": "Casts the type to Word32Type. Asserts that the type is Word32."
        },
        {
          "name": "AsWord64",
          "parameters": [],
          "return_type": "const Word64Type&",
          "logic": "Casts the type to Word64Type. Asserts that the type is Word64."
        },
        {
          "name": "AsFloat32",
          "parameters": [],
          "return_type": "const Float32Type&",
          "logic": "Casts the type to Float32Type. Asserts that the type is Float32."
        },
        {
          "name": "AsFloat64",
          "parameters": [],
          "return_type": "const Float64Type&",
          "logic": "Casts the type to Float64Type. Asserts that the type is Float64."
        },
        {
          "name": "AsTuple",
          "parameters": [],
          "return_type": "const TupleType&",
          "logic": "Casts the type to TupleType. Asserts that the type is Tuple."
        },
        {
          "name": "AsWord",
          "parameters": [],
          "return_type": "const auto&",
          "logic": "Template method to cast to Word32Type or Word64Type based on the template argument. Asserts the type."
        },
        {
          "name": "AsFloat",
          "parameters": [],
          "return_type": "const auto&",
          "logic": "Template method to cast to Float32Type or Float64Type based on the template argument. Asserts the type."
        },
        {
          "name": "Equals",
          "parameters": [
            "const Type& other"
          ],
          "return_type": "bool",
          "logic": "Compares this type to another type for equality."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const Type& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this type is a subtype of another type."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the type to an output stream."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the type to standard output."
        },
        {
          "name": "ToString",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Converts the type to a string representation."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the least upper bound of two types."
        },
        {
          "name": "ParseFromString",
          "parameters": [
            "const std::string_view& str",
            "Zone* zone"
          ],
          "return_type": "std::optional<Type>",
          "logic": "Parses a type from a string representation."
        },
        {
          "name": "AllocateOnHeap",
          "parameters": [
            "Factory* factory"
          ],
          "return_type": "Handle<TurboshaftType>",
          "logic": "Allocates the type on the heap."
        }
      ]
    },
    {
      "name": "WordType",
      "properties": [],
      "methods": [
        {
          "name": "Any",
          "parameters": [],
          "return_type": "WordType",
          "logic": "Static method to create WordType representing any word."
        },
        {
          "name": "Range",
          "parameters": [
            "word_t from",
            "word_t to",
            "Zone* zone"
          ],
          "return_type": "WordType",
          "logic": "Static method to create a WordType representing a range of values."
        },
        {
          "name": "Set",
          "parameters": [
            "const base::SmallVector<word_t, N>& elements",
            "Zone* zone"
          ],
          "return_type": "WordType",
          "logic": "Static method to create a WordType representing a set of values. (SmallVector overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "const std::vector<word_t>& elements",
            "Zone* zone"
          ],
          "return_type": "WordType",
          "logic": "Static method to create a WordType representing a set of values. (vector overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "const std::initializer_list<word_t>& elements",
            "Zone* zone"
          ],
          "return_type": "WordType",
          "logic": "Static method to create a WordType representing a set of values. (initializer_list overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "base::Vector<const word_t> elements",
            "Zone* zone"
          ],
          "return_type": "WordType",
          "logic": "Static method to create a WordType representing a set of values."
        },
        {
          "name": "Constant",
          "parameters": [
            "word_t constant"
          ],
          "return_type": "WordType",
          "logic": "Static method to create a WordType representing a constant value."
        },
        {
          "name": "is_range",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the word type represents a range."
        },
        {
          "name": "is_set",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the word type represents a set."
        },
        {
          "name": "is_any",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the word type represents any value."
        },
        {
          "name": "is_constant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the word type represents a constant."
        },
        {
          "name": "is_wrapping",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the word type represents a wrapping range."
        },
        {
          "name": "range_from",
          "parameters": [],
          "return_type": "word_t",
          "logic": "Returns the minimum value of the range."
        },
        {
          "name": "range_to",
          "parameters": [],
          "return_type": "word_t",
          "logic": "Returns the maximum value of the range."
        },
        {
          "name": "range",
          "parameters": [],
          "return_type": "std::pair<word_t, word_t>",
          "logic": "Returns a pair containing the minimum and maximum values of the range."
        },
        {
          "name": "set_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of the set."
        },
        {
          "name": "set_element",
          "parameters": [
            "int index"
          ],
          "return_type": "word_t",
          "logic": "Returns the element at the given index in the set."
        },
        {
          "name": "set_elements",
          "parameters": [],
          "return_type": "base::Vector<const word_t>",
          "logic": "Returns a vector containing all elements of the set."
        },
        {
          "name": "try_get_constant",
          "parameters": [],
          "return_type": "std::optional<word_t>",
          "logic": "Returns the constant value if the WordType represents a constant, otherwise returns std::nullopt."
        },
        {
          "name": "is_constant",
          "parameters": [
            "word_t value"
          ],
          "return_type": "bool",
          "logic": "Checks if the WordType represents the given constant value."
        },
        {
          "name": "unsigned_min",
          "parameters": [],
          "return_type": "word_t",
          "logic": "Returns the unsigned minimum value represented by the type."
        },
        {
          "name": "unsigned_max",
          "parameters": [],
          "return_type": "word_t",
          "logic": "Returns the unsigned maximum value represented by the type."
        },
        {
          "name": "Contains",
          "parameters": [
            "word_t value"
          ],
          "return_type": "bool",
          "logic": "Checks if the given value is contained in the type."
        },
        {
          "name": "Equals",
          "parameters": [
            "const WordType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this word type is equal to another word type."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const WordType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this word type is a subtype of another word type."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const WordType& lhs",
            "const WordType& rhs",
            "Zone* zone"
          ],
          "return_type": "WordType",
          "logic": "Computes the least upper bound of two word types."
        },
        {
          "name": "Intersect",
          "parameters": [
            "const WordType& lhs",
            "const WordType& rhs",
            "ResolutionMode resolution_mode",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the intersection of two word types."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the word type to an output stream."
        },
        {
          "name": "AllocateOnHeap",
          "parameters": [
            "Factory* factory"
          ],
          "return_type": "Handle<TurboshaftType>",
          "logic": "Allocates the word type on the heap."
        }
      ]
    },
    {
      "name": "FloatType",
      "properties": [],
      "methods": [
        {
          "name": "OnlySpecialValues",
          "parameters": [
            "uint32_t special_values"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType that only contains special values (NaN, MinusZero)."
        },
        {
          "name": "NaN",
          "parameters": [],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType that only contains NaN."
        },
        {
          "name": "MinusZero",
          "parameters": [],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType that only contains MinusZero."
        },
        {
          "name": "Any",
          "parameters": [
            "uint32_t special_values"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType that represents any floating-point value."
        },
        {
          "name": "Range",
          "parameters": [
            "float_t min",
            "float_t max",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a range of floating-point values, without special values."
        },
        {
          "name": "Range",
          "parameters": [
            "float_t min",
            "float_t max",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a range of floating-point values, with optional special values."
        },
        {
          "name": "Set",
          "parameters": [
            "const base::SmallVector<const float_t, N>& elements",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a set of floating-point values, without special values.(SmallVector const float_t overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "const base::SmallVector<float_t, N>& elements",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a set of floating-point values, with optional special values. (SmallVector float_t overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "const std::initializer_list<float_t>& elements",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a set of floating-point values, with optional special values. (initializer_list overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "const std::vector<float_t>& elements",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a set of floating-point values, without special values. (vector overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "const std::vector<float_t>& elements",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a set of floating-point values, with optional special values. (vector overload)"
        },
        {
          "name": "Set",
          "parameters": [
            "base::Vector<const float_t> elements",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a set of floating-point values, with optional special values."
        },
        {
          "name": "Constant",
          "parameters": [
            "float_t constant"
          ],
          "return_type": "FloatType",
          "logic": "Static method to create a FloatType representing a constant floating-point value."
        },
        {
          "name": "is_only_special_values",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType only contains special values."
        },
        {
          "name": "is_only_nan",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType only contains NaN."
        },
        {
          "name": "is_only_minus_zero",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType only contains minus zero."
        },
        {
          "name": "is_range",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType represents a range."
        },
        {
          "name": "is_set",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType represents a set."
        },
        {
          "name": "is_any",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType represents any floating-point value."
        },
        {
          "name": "is_constant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType represents a constant."
        },
        {
          "name": "special_values",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the special values flags."
        },
        {
          "name": "has_special_values",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType has special values."
        },
        {
          "name": "has_nan",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType has NaN."
        },
        {
          "name": "has_minus_zero",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the FloatType has minus zero."
        },
        {
          "name": "range_min",
          "parameters": [],
          "return_type": "float_t",
          "logic": "Returns the minimum value of the range."
        },
        {
          "name": "range_max",
          "parameters": [],
          "return_type": "float_t",
          "logic": "Returns the maximum value of the range."
        },
        {
          "name": "range",
          "parameters": [],
          "return_type": "std::pair<float_t, float_t>",
          "logic": "Returns a pair containing the minimum and maximum values of the range."
        },
        {
          "name": "set_size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the size of the set."
        },
        {
          "name": "set_element",
          "parameters": [
            "int index"
          ],
          "return_type": "float_t",
          "logic": "Returns the element at the given index in the set."
        },
        {
          "name": "set_elements",
          "parameters": [],
          "return_type": "base::Vector<const float_t>",
          "logic": "Returns a vector containing all elements of the set."
        },
        {
          "name": "min",
          "parameters": [],
          "return_type": "float_t",
          "logic": "Returns the minimum value of the type, considering special values like -0."
        },
        {
          "name": "max",
          "parameters": [],
          "return_type": "float_t",
          "logic": "Returns the maximum value of the type, considering special values like -0."
        },
        {
          "name": "minmax",
          "parameters": [],
          "return_type": "std::pair<float_t, float_t>",
          "logic": "Returns a pair containing the minimum and maximum values of the type."
        },
        {
          "name": "try_get_constant",
          "parameters": [],
          "return_type": "std::optional<float_t>",
          "logic": "Returns the constant value if the FloatType represents a constant, otherwise returns std::nullopt."
        },
        {
          "name": "is_constant",
          "parameters": [
            "float_t value"
          ],
          "return_type": "bool",
          "logic": "Checks if the FloatType represents the given constant value."
        },
        {
          "name": "range_or_set_min",
          "parameters": [],
          "return_type": "float_t",
          "logic": "Returns the minimum value of a range or set, ignoring any special values."
        },
        {
          "name": "range_or_set_max",
          "parameters": [],
          "return_type": "float_t",
          "logic": "Returns the maximum value of a range or set, ignoring any special values."
        },
        {
          "name": "range_or_set_minmax",
          "parameters": [],
          "return_type": "std::pair<float_t, float_t>",
          "logic": "Returns a pair containing the minimum and maximum values of the range or set, ignoring special values."
        },
        {
          "name": "Contains",
          "parameters": [
            "float_t value"
          ],
          "return_type": "bool",
          "logic": "Checks if the given value is contained in the type."
        },
        {
          "name": "Equals",
          "parameters": [
            "const FloatType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this FloatType is equal to another FloatType."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const FloatType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this FloatType is a subtype of another FloatType."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const FloatType& lhs",
            "const FloatType& rhs",
            "Zone* zone"
          ],
          "return_type": "FloatType",
          "logic": "Computes the least upper bound of two FloatTypes."
        },
        {
          "name": "Intersect",
          "parameters": [
            "const FloatType& lhs",
            "const FloatType& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the intersection of two FloatTypes."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the FloatType to an output stream."
        },
        {
          "name": "AllocateOnHeap",
          "parameters": [
            "Factory* factory"
          ],
          "return_type": "Handle<TurboshaftType>",
          "logic": "Allocates the FloatType on the heap."
        }
      ]
    },
    {
      "name": "TupleType",
      "properties": [],
      "methods": [
        {
          "name": "Tuple",
          "parameters": [
            "const Type& element0",
            "const Type& element1",
            "Zone* zone"
          ],
          "return_type": "TupleType",
          "logic": "Static method to create a TupleType with two elements."
        },
        {
          "name": "Tuple",
          "parameters": [
            "base::Vector<Type> elements",
            "Zone* zone"
          ],
          "return_type": "TupleType",
          "logic": "Static method to create a TupleType with a variable number of elements."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of elements in the tuple."
        },
        {
          "name": "element",
          "parameters": [
            "int index"
          ],
          "return_type": "const Type&",
          "logic": "Returns the element at the given index in the tuple."
        },
        {
          "name": "elements",
          "parameters": [],
          "return_type": "base::Vector<Type>",
          "logic": "Returns a vector containing all elements of the tuple."
        },
        {
          "name": "Equals",
          "parameters": [
            "const TupleType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this TupleType is equal to another TupleType."
        },
        {
          "name": "IsSubtypeOf",
          "parameters": [
            "const TupleType& other"
          ],
          "return_type": "bool",
          "logic": "Checks if this TupleType is a subtype of another TupleType."
        },
        {
          "name": "LeastUpperBound",
          "parameters": [
            "const TupleType& lhs",
            "const TupleType& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the least upper bound of two TupleTypes."
        },
        {
          "name": "PrintTo",
          "parameters": [
            "std::ostream& stream"
          ],
          "return_type": "void",
          "logic": "Prints the TupleType to an output stream."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_unique_and_sorted",
      "parameters": [
        "const T& container"
      ],
      "return_type": "bool",
      "logic": "Checks if a container's elements are unique and sorted in ascending order."
    },
    {
      "name": "is_minus_zero",
      "parameters": [
        "T value"
      ],
      "return_type": "bool",
      "logic": "Checks if a value is minus zero."
    },
    {
      "name": "is_float_special_value",
      "parameters": [
        "T value"
      ],
      "return_type": "bool",
      "logic": "Checks if a floating-point value is NaN or minus zero."
    },
    {
      "name": "next_smaller",
      "parameters": [
        "T v"
      ],
      "return_type": "T",
      "logic": "Returns the next representable value smaller than v."
    },
    {
      "name": "next_larger",
      "parameters": [
        "T v"
      ],
      "return_type": "T",
      "logic": "Returns the next representable value larger than v."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& stream",
        "Type::Kind kind"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the Type::Kind enum to print its string representation."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& stream",
        "const Type& type"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the Type class to print its representation using PrintTo."
    },
    {
      "name": "operator==",
      "parameters": [
        "const Type& lhs",
        "const Type& rhs"
      ],
      "return_type": "bool",
      "logic": "Overloads the == operator for the Type class to compare for equality using the Equals method."
    },
    {
      "name": "operator!=",
      "parameters": [
        "const Type& lhs",
        "const Type& rhs"
      ],
      "return_type": "bool",
      "logic": "Overloads the != operator for the Type class to compare for inequality."
    }
  ]
}