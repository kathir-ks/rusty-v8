{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/node-matchers.h",
  "imports": [
    "<cmath>",
    "<limits>",
    "src/base/bounds.h",
    "src/base/compiler-specific.h",
    "src/base/numbers/double.h",
    "src/codegen/external-reference.h",
    "src/common/globals.h",
    "src/compiler/common-operator.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node.h",
    "src/compiler/opcodes.h",
    "src/compiler/operator.h",
    "src/objects/heap-object.h"
  ],
  "classes": [
    {
      "name": "NodeMatcher",
      "properties": [
        "node_"
      ],
      "methods": [
        {
          "name": "NodeMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the NodeMatcher with a given node."
        },
        {
          "name": "node",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the node being matched."
        },
        {
          "name": "op",
          "parameters": [],
          "return_type": "const Operator*",
          "logic": "Returns the operator associated with the node."
        },
        {
          "name": "opcode",
          "parameters": [],
          "return_type": "IrOpcode::Value",
          "logic": "Returns the opcode of the node."
        },
        {
          "name": "HasProperty",
          "parameters": [
            "Operator::Property property"
          ],
          "return_type": "bool",
          "logic": "Checks if the operator has a specific property."
        },
        {
          "name": "InputAt",
          "parameters": [
            "int index"
          ],
          "return_type": "Node*",
          "logic": "Returns the input node at the specified index."
        },
        {
          "name": "Equals",
          "parameters": [
            "const Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if the current node is equal to the given node."
        },
        {
          "name": "IsComparison",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the node is a comparison operation."
        },
        {
          "name": "IsOpcode",
          "parameters": [],
          "return_type": "bool",
          "logic": "Multiple methods generated by macro to check if the node's opcode matches a specific opcode."
        }
      ]
    },
    {
      "name": "ValueMatcher",
      "properties": [
        "resolved_value_",
        "has_resolved_value_"
      ],
      "methods": [
        {
          "name": "ValueMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the ValueMatcher, skips value identities, and attempts to resolve the value from the node."
        },
        {
          "name": "HasResolvedValue",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the value has been successfully resolved."
        },
        {
          "name": "ResolvedValue",
          "parameters": [],
          "return_type": "const T&",
          "logic": "Returns the resolved value, asserts that it has been resolved."
        }
      ]
    },
    {
      "name": "IntMatcher",
      "properties": [],
      "methods": [
        {
          "name": "IntMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the IntMatcher."
        },
        {
          "name": "Is",
          "parameters": [
            "const T& value"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is equal to the given value."
        },
        {
          "name": "IsInRange",
          "parameters": [
            "const T& low",
            "const T& high"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is within the given range."
        },
        {
          "name": "IsMultipleOf",
          "parameters": [
            "T n"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is a multiple of the given number."
        },
        {
          "name": "IsPowerOf2",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is a power of 2."
        },
        {
          "name": "IsNegativePowerOf2",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is a negative power of 2."
        },
        {
          "name": "IsNegative",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is negative."
        }
      ]
    },
    {
      "name": "FloatMatcher",
      "properties": [],
      "methods": [
        {
          "name": "FloatMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the FloatMatcher."
        },
        {
          "name": "Is",
          "parameters": [
            "const T& value"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is equal to the given value."
        },
        {
          "name": "IsInRange",
          "parameters": [
            "const T& low",
            "const T& high"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is within the given range."
        },
        {
          "name": "IsMinusZero",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is minus zero."
        },
        {
          "name": "IsNegative",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is negative."
        },
        {
          "name": "IsNaN",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is NaN."
        },
        {
          "name": "IsZero",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is zero (positive zero)."
        },
        {
          "name": "IsNormal",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is a normal number."
        },
        {
          "name": "IsInteger",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is an integer."
        },
        {
          "name": "IsPositiveOrNegativePowerOf2",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the resolved value is a power of two."
        }
      ]
    },
    {
      "name": "HeapObjectMatcherImpl",
      "properties": [],
      "methods": [
        {
          "name": "HeapObjectMatcherImpl",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the HeapObjectMatcherImpl."
        },
        {
          "name": "Is",
          "parameters": [
            "IndirectHandle<HeapObject> const& value"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is equal to the given value (compares addresses)."
        },
        {
          "name": "Ref",
          "parameters": [
            "JSHeapBroker* broker"
          ],
          "return_type": "HeapObjectRef",
          "logic": "Creates a HeapObjectRef from the resolved value using the provided broker.  Assumes a memory fence."
        }
      ]
    },
    {
      "name": "ExternalReferenceMatcher",
      "properties": [],
      "methods": [
        {
          "name": "ExternalReferenceMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the ExternalReferenceMatcher."
        },
        {
          "name": "Is",
          "parameters": [
            "const ExternalReference& value"
          ],
          "return_type": "bool",
          "logic": "Checks if the resolved value is equal to the given value."
        }
      ]
    },
    {
      "name": "LoadMatcher",
      "properties": [
        "object_",
        "index_"
      ],
      "methods": [
        {
          "name": "LoadMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the LoadMatcher, extracting the object and index inputs."
        },
        {
          "name": "object",
          "parameters": [],
          "return_type": "Object const&",
          "logic": "Returns the object input."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "IntPtrMatcher const&",
          "logic": "Returns the index input."
        }
      ]
    },
    {
      "name": "BinopMatcher",
      "properties": [
        "left_",
        "right_"
      ],
      "methods": [
        {
          "name": "BinopMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the BinopMatcher, extracting the left and right inputs and optionally swapping them to put a constant on the right."
        },
        {
          "name": "BinopMatcher",
          "parameters": [
            "Node* node",
            "bool allow_input_swap"
          ],
          "return_type": "constructor",
          "logic": "Initializes the BinopMatcher, extracting the left and right inputs and optionally swapping them to put a constant on the right based on allow_input_swap."
        },
        {
          "name": "left",
          "parameters": [],
          "return_type": "const Left&",
          "logic": "Returns the left input."
        },
        {
          "name": "right",
          "parameters": [],
          "return_type": "const Right&",
          "logic": "Returns the right input."
        },
        {
          "name": "IsFoldable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if both left and right inputs have resolved values, meaning the operation can be folded."
        },
        {
          "name": "LeftEqualsRight",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the left and right inputs are the same node."
        },
        {
          "name": "OwnsInput",
          "parameters": [
            "Node* input"
          ],
          "return_type": "bool",
          "logic": "Checks if all uses of input are this BinopMatcher's node"
        }
      ]
    },
    {
      "name": "ScaleMatcher",
      "properties": [
        "scale_",
        "power_of_two_plus_one_"
      ],
      "methods": [
        {
          "name": "ScaleMatcher",
          "parameters": [
            "Node* node",
            "bool allow_power_of_two_plus_one"
          ],
          "return_type": "constructor",
          "logic": "Initializes the ScaleMatcher, attempting to identify a scale factor from a multiplication or shift operation."
        },
        {
          "name": "matches",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a scale factor was successfully matched."
        },
        {
          "name": "scale",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the identified scale factor."
        },
        {
          "name": "power_of_two_plus_one",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns if the scale represents a power of two plus one."
        }
      ]
    },
    {
      "name": "AddMatcher",
      "properties": [
        "scale_",
        "power_of_two_plus_one_"
      ],
      "methods": [
        {
          "name": "AddMatcher",
          "parameters": [
            "Node* node",
            "bool allow_input_swap"
          ],
          "return_type": "constructor",
          "logic": "Initializes the AddMatcher, attempting to identify a scaled index within an addition."
        },
        {
          "name": "AddMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the AddMatcher, attempting to identify a scaled index within an addition."
        },
        {
          "name": "HasIndexInput",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if an index input with a scale was found."
        },
        {
          "name": "IndexInput",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the index input node."
        },
        {
          "name": "scale",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the scale factor."
        },
        {
          "name": "power_of_two_plus_one",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates if the index scale represents a power of two plus one."
        }
      ]
    },
    {
      "name": "BaseWithIndexAndDisplacementMatcher",
      "properties": [
        "matches_",
        "index_",
        "scale_",
        "base_",
        "displacement_",
        "displacement_mode_"
      ],
      "methods": [
        {
          "name": "BaseWithIndexAndDisplacementMatcher",
          "parameters": [
            "Node* node",
            "AddressOptions options"
          ],
          "return_type": "constructor",
          "logic": "Initializes the BaseWithIndexAndDisplacementMatcher, identifying a base, index, and displacement for addressing."
        },
        {
          "name": "BaseWithIndexAndDisplacementMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the BaseWithIndexAndDisplacementMatcher, identifying a base, index, and displacement for addressing with default options."
        },
        {
          "name": "matches",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether a valid base, index, and displacement were found."
        },
        {
          "name": "index",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the index node."
        },
        {
          "name": "scale",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the scale factor for the index."
        },
        {
          "name": "base",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the base node."
        },
        {
          "name": "displacement",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the displacement node."
        },
        {
          "name": "displacement_mode",
          "parameters": [],
          "return_type": "DisplacementMode",
          "logic": "Returns the displacement mode (positive or negative)."
        }
      ]
    },
    {
      "name": "BranchMatcher",
      "properties": [
        "if_true_",
        "if_false_"
      ],
      "methods": [
        {
          "name": "BranchMatcher",
          "parameters": [
            "Node* branch"
          ],
          "return_type": "constructor",
          "logic": "Initializes the BranchMatcher."
        },
        {
          "name": "Matched",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if both IfTrue and IfFalse projections are matched."
        },
        {
          "name": "Branch",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the branch node."
        },
        {
          "name": "IfTrue",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the if_true projection node."
        },
        {
          "name": "IfFalse",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the if_false projection node."
        }
      ]
    },
    {
      "name": "DiamondMatcher",
      "properties": [
        "branch_",
        "if_true_",
        "if_false_"
      ],
      "methods": [
        {
          "name": "DiamondMatcher",
          "parameters": [
            "Node* merge"
          ],
          "return_type": "constructor",
          "logic": "Initializes the DiamondMatcher to identify a diamond control flow structure."
        },
        {
          "name": "Matched",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether a diamond pattern has been successfully matched."
        },
        {
          "name": "IfProjectionsAreOwned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether the if_true and if_false projections are owned by the merge node."
        },
        {
          "name": "Branch",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the branch node."
        },
        {
          "name": "IfTrue",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the if_true projection node."
        },
        {
          "name": "IfFalse",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the if_false projection node."
        },
        {
          "name": "Merge",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the merge node."
        },
        {
          "name": "TrueInputOf",
          "parameters": [
            "Node* phi"
          ],
          "return_type": "Node*",
          "logic": "Returns the input of the phi node corresponding to the true branch."
        },
        {
          "name": "FalseInputOf",
          "parameters": [
            "Node* phi"
          ],
          "return_type": "Node*",
          "logic": "Returns the input of the phi node corresponding to the false branch."
        }
      ]
    },
    {
      "name": "LoadTransformMatcher",
      "properties": [],
      "methods": [
        {
          "name": "LoadTransformMatcher",
          "parameters": [
            "Node* node"
          ],
          "return_type": "constructor",
          "logic": "Initializes the LoadTransformMatcher."
        },
        {
          "name": "Is",
          "parameters": [
            "LoadTransformation t"
          ],
          "return_type": "bool",
          "logic": "Check if the LoadTransformParameters have the specific load transformation type."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "SkipValueIdentities",
      "parameters": [
        "Node* node"
      ],
      "return_type": "Node*",
      "logic": "Skips ValueIdentity nodes to find the underlying value."
    }
  ]
}