{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/bytecode-analysis.cc",
  "imports": [
    "src/compiler/bytecode-analysis.h",
    "utility",
    "src/compiler/bytecode-liveness-map.h",
    "src/interpreter/bytecode-array-iterator.h",
    "src/interpreter/bytecode-array-random-iterator.h",
    "src/interpreter/bytecodes.h",
    "src/objects/objects-inl.h",
    "src/utils/ostreams.h"
  ],
  "classes": [
    {
      "name": "BytecodeLoopAssignments",
      "properties": [
        "parameter_count_",
        "bit_vector_"
      ],
      "methods": [
        {
          "name": "BytecodeLoopAssignments",
          "parameters": [
            "int parameter_count",
            "int register_count",
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for BytecodeLoopAssignments. Initializes the bit vector with the specified parameter and register counts."
        },
        {
          "name": "Add",
          "parameters": [
            "interpreter::Register r"
          ],
          "return_type": "void",
          "logic": "Adds a register to the bit vector, representing its assignment in a loop. Differentiates between parameter and local registers."
        },
        {
          "name": "AddList",
          "parameters": [
            "interpreter::Register r",
            "uint32_t count"
          ],
          "return_type": "void",
          "logic": "Adds a list of registers to the bit vector, representing their assignment in a loop.  Differentiates between parameter and local registers."
        },
        {
          "name": "Union",
          "parameters": [
            "const BytecodeLoopAssignments& other"
          ],
          "return_type": "void",
          "logic": "Performs a union of the current bit vector with another BytecodeLoopAssignments object's bit vector."
        },
        {
          "name": "ContainsParameter",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Checks if a parameter with the given index is contained in the bit vector."
        },
        {
          "name": "ContainsLocal",
          "parameters": [
            "int index"
          ],
          "return_type": "bool",
          "logic": "Checks if a local register with the given index is contained in the bit vector."
        }
      ]
    },
    {
      "name": "ResumeJumpTarget",
      "properties": [
        "suspend_id_",
        "target_offset_",
        "final_target_offset_"
      ],
      "methods": [
        {
          "name": "ResumeJumpTarget",
          "parameters": [
            "int suspend_id",
            "int target_offset",
            "int final_target_offset"
          ],
          "return_type": "constructor",
          "logic": "Constructor for ResumeJumpTarget. Initializes the suspend ID and target offsets."
        },
        {
          "name": "Leaf",
          "parameters": [
            "int suspend_id",
            "int target_offset"
          ],
          "return_type": "ResumeJumpTarget",
          "logic": "Creates a leaf ResumeJumpTarget, where the target and final target are the same."
        },
        {
          "name": "AtLoopHeader",
          "parameters": [
            "int loop_header_offset",
            "const ResumeJumpTarget& next"
          ],
          "return_type": "ResumeJumpTarget",
          "logic": "Creates a ResumeJumpTarget associated with a loop header, inheriting the suspend ID and target from another ResumeJumpTarget but updating the target offset to the loop header offset."
        }
      ]
    },
    {
      "name": "BytecodeAnalysis",
      "properties": [
        "osr_bailout_id_",
        "analyze_liveness_",
        "resume_jump_targets_",
        "end_to_header_",
        "header_to_info_",
        "osr_entry_point_",
        "bytecode_count_",
        "liveness_map_"
      ],
      "methods": [
        {
          "name": "BytecodeAnalysis",
          "parameters": [
            "Handle<BytecodeArray> bytecode_array",
            "Zone* zone",
            "BytecodeOffset osr_bailout_id",
            "bool analyze_liveness"
          ],
          "return_type": "constructor",
          "logic": "Constructor for BytecodeAnalysis. Initializes the analysis and performs the main analysis logic through the internal implementation class."
        },
        {
          "name": "IsLoopHeader",
          "parameters": [
            "int offset"
          ],
          "return_type": "bool",
          "logic": "Checks if a given offset is the header of a loop."
        },
        {
          "name": "GetLoopOffsetFor",
          "parameters": [
            "int offset"
          ],
          "return_type": "int",
          "logic": "Gets the offset of the loop header for a given offset, returns -1 if the offset is not in a loop."
        },
        {
          "name": "GetLoopEndOffsetForInnermost",
          "parameters": [
            "int header_offset"
          ],
          "return_type": "int",
          "logic": "Gets the end offset for the innermost loop with a given header offset."
        },
        {
          "name": "GetLoopInfoFor",
          "parameters": [
            "int header_offset"
          ],
          "return_type": "const LoopInfo&",
          "logic": "Gets the LoopInfo object for a given loop header offset."
        },
        {
          "name": "TryGetLoopInfoFor",
          "parameters": [
            "int header_offset"
          ],
          "return_type": "const LoopInfo*",
          "logic": "Tries to get the LoopInfo object for a given loop header offset, returning nullptr if not found."
        },
        {
          "name": "GetInLivenessFor",
          "parameters": [
            "int offset"
          ],
          "return_type": "const BytecodeLivenessState*",
          "logic": "Gets the in-liveness state for a given offset, returns nullptr if liveness analysis is disabled."
        },
        {
          "name": "GetOutLivenessFor",
          "parameters": [
            "int offset"
          ],
          "return_type": "const BytecodeLivenessState*",
          "logic": "Gets the out-liveness state for a given offset, returns nullptr if liveness analysis is disabled."
        }
      ]
    },
    {
      "name": "BytecodeAnalysis::BytecodeAnalysisImpl",
      "properties": [
        "res_",
        "zone_",
        "bytecode_array_",
        "loop_stack_",
        "loop_end_index_queue_",
        "iterator_"
      ],
      "methods": [
        {
          "name": "BytecodeAnalysisImpl",
          "parameters": [
            "BytecodeAnalysis& res",
            "Handle<BytecodeArray> bytecode_array",
            "Zone* zone"
          ],
          "return_type": "constructor",
          "logic": "Constructor for BytecodeAnalysisImpl. Initializes the analysis context, including the zone, bytecode array, loop stack, and iterator."
        },
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs the main bytecode analysis, including loop detection, liveness analysis, and resume target handling."
        },
        {
          "name": "PrintLivenessTo",
          "parameters": [
            "std::ostream& os"
          ],
          "return_type": "std::ostream&",
          "logic": "Prints the liveness information to the provided output stream."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "UpdateInLivenessForOutOperand",
      "parameters": [
        "BytecodeLivenessState* in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator"
      ],
      "return_type": "void",
      "logic": "Updates the in-liveness state based on the output operand of a bytecode, marking the corresponding registers as dead (not live)."
    },
    {
      "name": "UpdateInLivenessForInOperand",
      "parameters": [
        "BytecodeLivenessState* in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator"
      ],
      "return_type": "void",
      "logic": "Updates the in-liveness state based on the input operand of a bytecode, marking the corresponding registers as live."
    },
    {
      "name": "UpdateInLiveness",
      "parameters": [
        "BytecodeLivenessState* in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator",
        "std::index_sequence<operand_index...>"
      ],
      "return_type": "void",
      "logic": "Updates the in-liveness state based on both accumulator and register reads/writes according to the bytecode's operands and implicit register usage. Handles special cases like Suspend and Resume generator bytecodes.  Uses template metaprogramming to iterate over the operands."
    },
    {
      "name": "UpdateInLiveness",
      "parameters": [
        "BytecodeLivenessState* in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator"
      ],
      "return_type": "void",
      "logic": "Helper function to initiate UpdateInLiveness by creating an index sequence to unpack the operand types into the variadic template."
    },
    {
      "name": "UpdateInLiveness (DEBUG)",
      "parameters": [
        "Bytecode bytecode",
        "BytecodeLivenessState* in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator"
      ],
      "return_type": "void",
      "logic": "Debug version of UpdateInLiveness using a switch statement over bytecodes to call the correct specialized function."
    },
    {
      "name": "EnsureOutLivenessIsNotAlias",
      "parameters": [
        "BytecodeLiveness& liveness",
        "BytecodeLivenessState* next_bytecode_in_liveness",
        "Zone* zone"
      ],
      "return_type": "void",
      "logic": "Ensures that the out-liveness state is not an alias of the next bytecode's in-liveness state, reallocating and copying if necessary."
    },
    {
      "name": "UpdateOutLiveness",
      "parameters": [
        "BytecodeLiveness& liveness",
        "BytecodeLivenessState* next_bytecode_in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator",
        "DirectHandle<BytecodeArray> bytecode_array",
        "const BytecodeLivenessMap& liveness_map",
        "Zone* zone"
      ],
      "return_type": "void",
      "logic": "Updates the out-liveness state based on the next bytecode's in-liveness, jump targets, and exception handlers. Special handling for SuspendGenerator, ResumeGenerator and SwitchOnGeneratorState."
    },
    {
      "name": "UpdateOutLiveness (switch version)",
      "parameters": [
        "Bytecode bytecode",
        "BytecodeLiveness& liveness",
        "BytecodeLivenessState* next_bytecode_in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator",
        "DirectHandle<BytecodeArray> bytecode_array",
        "const BytecodeLivenessMap& liveness_map",
        "Zone* zone"
      ],
      "return_type": "void",
      "logic": "Switch version of UpdateOutLiveness calling the template specialization by bytecode."
    },
    {
      "name": "UpdateLiveness",
      "parameters": [
        "BytecodeLiveness& liveness",
        "BytecodeLivenessState** next_bytecode_in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator",
        "DirectHandle<BytecodeArray> bytecode_array",
        "const BytecodeLivenessMap& liveness_map",
        "Zone* zone"
      ],
      "return_type": "void",
      "logic": "Updates both in and out liveness states. First, updates out liveness based on the next instruction and jumps. Then copies the out liveness to the in liveness and marks the registers live that are read by this instruction."
    },
    {
      "name": "UpdateLiveness (switch version)",
      "parameters": [
        "Bytecode bytecode",
        "BytecodeLiveness& liveness",
        "BytecodeLivenessState** next_bytecode_in_liveness",
        "const interpreter::BytecodeArrayIterator& iterator",
        "DirectHandle<BytecodeArray> bytecode_array",
        "const BytecodeLivenessMap& liveness_map",
        "Zone* zone"
      ],
      "return_type": "void",
      "logic": "Switch version of UpdateLiveness calling the template specialization by bytecode."
    },
    {
      "name": "UpdateAssignments",
      "parameters": [
        "Bytecode bytecode",
        "BytecodeLoopAssignments* assignments",
        "const interpreter::BytecodeArrayIterator& iterator"
      ],
      "return_type": "void",
      "logic": "Updates the BytecodeLoopAssignments object based on the output registers used by the bytecode. Adds registers to the assignment set if they are written to within a loop."
    }
  ]
}