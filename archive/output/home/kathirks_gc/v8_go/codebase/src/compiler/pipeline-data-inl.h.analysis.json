{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/pipeline-data-inl.h",
  "imports": [
    "<optional>",
    "src/builtins/profile-data-reader.h",
    "src/codegen/assembler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/common/globals.h",
    "src/compiler/backend/code-generator.h",
    "src/compiler/backend/instruction-selector.h",
    "src/compiler/backend/instruction.h",
    "src/compiler/backend/register-allocator.h",
    "src/compiler/common-operator.h",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/js-context-specialization.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/js-inlining.h",
    "src/compiler/js-operator.h",
    "src/compiler/machine-graph.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-observer.h",
    "src/compiler/node-origin-table.h",
    "src/compiler/phase.h",
    "src/compiler/pipeline-statistics.h",
    "src/compiler/schedule.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/turbofan-typer.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/zone-with-name.h",
    "src/compiler/zone-stats.h",
    "src/execution/isolate.h",
    "src/handles/handles-inl.h",
    "src/objects/objects-inl.h",
    "src/wasm/wasm-engine.h"
  ],
  "classes": [
    {
      "name": "TFPipelineData",
      "properties": [
        "isolate_",
        "allocator_",
        "info_",
        "debug_name_",
        "may_have_unverifiable_graph_",
        "zone_stats_",
        "pipeline_statistics_",
        "verify_graph_",
        "start_source_position_",
        "osr_helper_",
        "code_",
        "code_generator_",
        "typer_",
        "typer_flags_",
        "graph_zone_",
        "graph_",
        "source_positions_",
        "node_origins_",
        "simplified_",
        "machine_",
        "common_",
        "javascript_",
        "jsgraph_",
        "mcgraph_",
        "schedule_",
        "observe_node_manager_",
        "ts_data_",
        "instruction_zone_scope_",
        "instruction_zone_",
        "sequence_",
        "codegen_zone_scope_",
        "codegen_zone_",
        "dependencies_",
        "broker_",
        "frame_",
        "register_allocation_zone_scope_",
        "register_allocation_zone_",
        "register_allocation_data_",
        "source_position_output_",
        "jump_optimization_info_",
        "assembler_options_",
        "specialization_context_",
        "max_unoptimized_frame_height_",
        "max_pushed_argument_count_",
        "runtime_call_stats_",
        "profile_data_",
        "wasm_module_for_inlining_",
        "js_wasm_calls_sidetable_"
      ],
      "methods": [
        {
          "name": "TFPipelineData",
          "parameters": [
            "ZoneStats* zone_stats",
            "Isolate* isolate",
            "OptimizedCompilationInfo* info",
            "TurbofanPipelineStatistics* pipeline_statistics"
          ],
          "return_type": "void",
          "logic": "Constructor for the main entry point of the Turbofan pipeline. Initializes various data structures and zones needed for compilation."
        },
        {
          "name": "TFPipelineData",
          "parameters": [
            "ZoneStats* zone_stats",
            "wasm::WasmEngine* wasm_engine",
            "OptimizedCompilationInfo* info",
            "MachineGraph* mcgraph",
            "TurbofanPipelineStatistics* pipeline_statistics",
            "SourcePositionTable* source_positions",
            "NodeOriginTable* node_origins",
            "const AssemblerOptions& assembler_options"
          ],
          "return_type": "void",
          "logic": "Constructor for the WebAssembly compile entry point.  Initializes data structures for Wasm compilation."
        },
        {
          "name": "TFPipelineData",
          "parameters": [
            "ZoneStats* zone_stats",
            "OptimizedCompilationInfo* info",
            "Isolate* isolate",
            "AccountingAllocator* allocator",
            "TFGraph* graph",
            "JSGraph* jsgraph",
            "Schedule* schedule",
            "SourcePositionTable* source_positions",
            "NodeOriginTable* node_origins",
            "JumpOptimizationInfo* jump_opt",
            "const AssemblerOptions& assembler_options",
            "const ProfileDataFromFile* profile_data"
          ],
          "return_type": "void",
          "logic": "Constructor for CodeStubAssembler and machine graph testing. Initializes data structures with provided graph and schedule, and other related information"
        },
        {
          "name": "TFPipelineData",
          "parameters": [
            "ZoneStats* zone_stats",
            "OptimizedCompilationInfo* info",
            "Isolate* isolate",
            "InstructionSequence* sequence"
          ],
          "return_type": "void",
          "logic": "Constructor for register allocation testing. Initializes data structures for register allocation testing."
        },
        {
          "name": "~TFPipelineData",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor. Deallocates memory and releases resources used during the compilation pipeline."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate."
        },
        {
          "name": "allocator",
          "parameters": [],
          "return_type": "AccountingAllocator*",
          "logic": "Returns the allocator."
        },
        {
          "name": "info",
          "parameters": [],
          "return_type": "OptimizedCompilationInfo*",
          "logic": "Returns the compilation info."
        },
        {
          "name": "zone_stats",
          "parameters": [],
          "return_type": "ZoneStats*",
          "logic": "Returns the zone stats."
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the compilation dependencies."
        },
        {
          "name": "pipeline_statistics",
          "parameters": [],
          "return_type": "TurbofanPipelineStatistics*",
          "logic": "Returns the pipeline statistics."
        },
        {
          "name": "osr_helper",
          "parameters": [],
          "return_type": "OsrHelper*",
          "logic": "Returns the on-stack replacement helper."
        },
        {
          "name": "osr_helper_ptr",
          "parameters": [],
          "return_type": "std::shared_ptr<OsrHelper>",
          "logic": "Returns shared pointer to the on-stack replacement helper."
        },
        {
          "name": "verify_graph",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether graph verification is enabled."
        },
        {
          "name": "set_verify_graph",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets whether graph verification is enabled."
        },
        {
          "name": "code",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<Code>",
          "logic": "Returns the compiled code."
        },
        {
          "name": "set_code",
          "parameters": [
            "MaybeIndirectHandle<Code> code"
          ],
          "return_type": "void",
          "logic": "Sets the compiled code."
        },
        {
          "name": "code_generator",
          "parameters": [],
          "return_type": "CodeGenerator*",
          "logic": "Returns the code generator."
        },
        {
          "name": "MayHaveUnverifiableGraph",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns if the graph may not be verifiable."
        },
        {
          "name": "graph_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the graph zone."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the graph."
        },
        {
          "name": "set_graph",
          "parameters": [
            "TFGraph* graph"
          ],
          "return_type": "void",
          "logic": "Sets the graph."
        },
        {
          "name": "InitializeWithGraphZone",
          "parameters": [
            "turboshaft::ZoneWithName<kGraphZoneName> graph_zone",
            "GraphZonePointer<SourcePositionTable> source_positions",
            "GraphZonePointer<NodeOriginTable> node_origins",
            "size_t node_count_hint"
          ],
          "return_type": "void",
          "logic": "Initializes the pipeline data with a new graph zone."
        },
        {
          "name": "ReleaseGraphZone",
          "parameters": [],
          "return_type": "turboshaft::ZoneWithName<kGraphZoneName>",
          "logic": "Releases and returns the graph zone."
        },
        {
          "name": "source_positions",
          "parameters": [],
          "return_type": "SourcePositionTable*",
          "logic": "Returns the source position table."
        },
        {
          "name": "set_source_positions",
          "parameters": [
            "SourcePositionTable* source_positions"
          ],
          "return_type": "void",
          "logic": "Sets the source position table."
        },
        {
          "name": "node_origins",
          "parameters": [],
          "return_type": "NodeOriginTable*",
          "logic": "Returns the node origin table."
        },
        {
          "name": "set_node_origins",
          "parameters": [
            "NodeOriginTable* node_origins"
          ],
          "return_type": "void",
          "logic": "Sets the node origin table."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the machine operator builder."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the simplified operator builder."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the common operator builder."
        },
        {
          "name": "javascript",
          "parameters": [],
          "return_type": "JSOperatorBuilder*",
          "logic": "Returns the javascript operator builder."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph."
        },
        {
          "name": "mcgraph",
          "parameters": [],
          "return_type": "MachineGraph*",
          "logic": "Returns the MachineGraph."
        },
        {
          "name": "native_context",
          "parameters": [],
          "return_type": "DirectHandle<NativeContext>",
          "logic": "Returns the native context."
        },
        {
          "name": "global_object",
          "parameters": [],
          "return_type": "DirectHandle<JSGlobalObject>",
          "logic": "Returns the global object."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Returns the JS heap broker."
        },
        {
          "name": "broker_ptr",
          "parameters": [],
          "return_type": "std::shared_ptr<JSHeapBroker>",
          "logic": "Returns the JS heap broker smart pointer."
        },
        {
          "name": "schedule",
          "parameters": [],
          "return_type": "Schedule*",
          "logic": "Returns the schedule."
        },
        {
          "name": "set_schedule",
          "parameters": [
            "Schedule* schedule"
          ],
          "return_type": "void",
          "logic": "Sets the schedule."
        },
        {
          "name": "reset_schedule",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets schedule_ to nullptr."
        },
        {
          "name": "observe_node_manager",
          "parameters": [],
          "return_type": "ObserveNodeManager*",
          "logic": "Returns the observe node manager."
        },
        {
          "name": "instruction_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the instruction zone."
        },
        {
          "name": "codegen_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the codegen zone."
        },
        {
          "name": "sequence",
          "parameters": [],
          "return_type": "InstructionSequence*",
          "logic": "Returns the instruction sequence."
        },
        {
          "name": "frame",
          "parameters": [],
          "return_type": "Frame*",
          "logic": "Returns the frame."
        },
        {
          "name": "register_allocation_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the register allocation zone."
        },
        {
          "name": "register_allocation_data",
          "parameters": [],
          "return_type": "RegisterAllocationData*",
          "logic": "Returns the register allocation data."
        },
        {
          "name": "source_position_output",
          "parameters": [],
          "return_type": "std::string const&",
          "logic": "Returns the source position output string."
        },
        {
          "name": "set_source_position_output",
          "parameters": [
            "std::string const& source_position_output"
          ],
          "return_type": "void",
          "logic": "Sets the source position output string."
        },
        {
          "name": "jump_optimization_info",
          "parameters": [],
          "return_type": "JumpOptimizationInfo*",
          "logic": "Returns jump optimization info."
        },
        {
          "name": "assembler_options",
          "parameters": [],
          "return_type": "const AssemblerOptions&",
          "logic": "Returns the assembler options."
        },
        {
          "name": "ChooseSpecializationContext",
          "parameters": [],
          "return_type": "void",
          "logic": "Chooses the context for specialization (function or module)."
        },
        {
          "name": "specialization_context",
          "parameters": [],
          "return_type": "Maybe<OuterContext>",
          "logic": "Returns the specialization context."
        },
        {
          "name": "address_of_max_unoptimized_frame_height",
          "parameters": [],
          "return_type": "size_t*",
          "logic": "Returns address of max_unoptimized_frame_height_."
        },
        {
          "name": "max_unoptimized_frame_height",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns max_unoptimized_frame_height_."
        },
        {
          "name": "address_of_max_pushed_argument_count",
          "parameters": [],
          "return_type": "size_t*",
          "logic": "Returns address of max_pushed_argument_count_."
        },
        {
          "name": "max_pushed_argument_count",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns max_pushed_argument_count_."
        },
        {
          "name": "GetCodeTracer",
          "parameters": [],
          "return_type": "CodeTracer*",
          "logic": "Returns the code tracer based on whether it is webassembly compilation."
        },
        {
          "name": "CreateTyper",
          "parameters": [],
          "return_type": "Typer*",
          "logic": "Creates the Typer object."
        },
        {
          "name": "AddTyperFlag",
          "parameters": [
            "Typer::Flag flag"
          ],
          "return_type": "void",
          "logic": "Adds flag to the Typer object."
        },
        {
          "name": "DeleteTyper",
          "parameters": [],
          "return_type": "void",
          "logic": "Deletes the Typer object."
        },
        {
          "name": "DeleteGraphZone",
          "parameters": [],
          "return_type": "void",
          "logic": "Destroys the graph zone and resets its pointers."
        },
        {
          "name": "DeleteInstructionZone",
          "parameters": [],
          "return_type": "void",
          "logic": "Destroys the instruction zone and resets its pointers."
        },
        {
          "name": "DeleteCodegenZone",
          "parameters": [],
          "return_type": "void",
          "logic": "Destroys the codegen zone and resets its pointers."
        },
        {
          "name": "DeleteRegisterAllocationZone",
          "parameters": [],
          "return_type": "void",
          "logic": "Destroys the register allocation zone and resets its pointers."
        },
        {
          "name": "InitializeInstructionSequence",
          "parameters": [
            "const CallDescriptor* call_descriptor"
          ],
          "return_type": "void",
          "logic": "Initializes the instruction sequence."
        },
        {
          "name": "InitializeFrameData",
          "parameters": [
            "CallDescriptor* call_descriptor"
          ],
          "return_type": "void",
          "logic": "Initializes the frame data."
        },
        {
          "name": "InitializeRegisterAllocationData",
          "parameters": [
            "const RegisterConfiguration* config",
            "CallDescriptor* call_descriptor"
          ],
          "return_type": "void",
          "logic": "Initializes register allocation data."
        },
        {
          "name": "InitializeOsrHelper",
          "parameters": [],
          "return_type": "void",
          "logic": "Initializes the On-Stack Replacement (OSR) helper."
        },
        {
          "name": "set_start_source_position",
          "parameters": [
            "int position"
          ],
          "return_type": "void",
          "logic": "Sets the start source position."
        },
        {
          "name": "start_source_position",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the start source position."
        },
        {
          "name": "InitializeCodeGenerator",
          "parameters": [
            "Linkage* linkage"
          ],
          "return_type": "void",
          "logic": "Initializes the code generator."
        },
        {
          "name": "BeginPhaseKind",
          "parameters": [
            "const char* phase_kind_name"
          ],
          "return_type": "void",
          "logic": "Begins a phase kind for profiling."
        },
        {
          "name": "EndPhaseKind",
          "parameters": [],
          "return_type": "void",
          "logic": "Ends the current phase kind."
        },
        {
          "name": "debug_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the debug name."
        },
        {
          "name": "profile_data",
          "parameters": [],
          "return_type": "const ProfileDataFromFile*",
          "logic": "Returns the profile data."
        },
        {
          "name": "set_profile_data",
          "parameters": [
            "const ProfileDataFromFile* profile_data"
          ],
          "return_type": "void",
          "logic": "Sets the profile data."
        },
        {
          "name": "runtime_call_stats",
          "parameters": [],
          "return_type": "RuntimeCallStats*",
          "logic": "Returns the runtime call stats."
        },
        {
          "name": "set_runtime_call_stats",
          "parameters": [
            "RuntimeCallStats* stats"
          ],
          "return_type": "void",
          "logic": "Sets the runtime call stats."
        },
        {
          "name": "has_js_wasm_calls",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if there are calls to Wasm from JS."
        },
        {
          "name": "wasm_module_for_inlining",
          "parameters": [],
          "return_type": "const wasm::WasmModule*",
          "logic": "Returns the wasm module for inlining."
        },
        {
          "name": "set_wasm_module_for_inlining",
          "parameters": [
            "const wasm::WasmModule* module"
          ],
          "return_type": "void",
          "logic": "Sets the wasm module for inlining."
        },
        {
          "name": "js_wasm_calls_sidetable",
          "parameters": [],
          "return_type": "JsWasmCallsSidetable*",
          "logic": "Returns the sidetable for JS-to-Wasm calls."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetModuleContext",
      "parameters": [
        "OptimizedCompilationInfo* info"
      ],
      "return_type": "Maybe<OuterContext>",
      "logic": "Finds the module context associated with a compilation info object."
    }
  ]
}