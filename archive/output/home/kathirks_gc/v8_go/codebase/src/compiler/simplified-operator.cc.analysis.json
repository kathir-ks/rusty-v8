{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/simplified-operator.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/simplified-operator.cc\",\n  \"imports\": [\n    \"src/compiler/simplified-operator.h\",\n    \"include/v8-fast-api-calls.h\",\n    \"src/base/lazy-instance.h\",\n    \"src/base/logging.h\",\n    \"src/compiler/linkage.h\",\n    \"src/compiler/opcodes.h\",\n    \"src/compiler/operator.h\",\n    \"src/compiler/turbofan-types.h\",\n    \"src/handles/handles-inl.h\",\n    \"src/objects/feedback-cell.h\",\n    \"src/objects/map.h\",\n    \"src/objects/name.h\",\n    \"src/compiler/wasm-compiler-definitions.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"TransitionAndStoreElementParameters\",\n      \"properties\": [\n        \"double_map_\",\n        \"fast_map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TransitionAndStoreElementParameters\",\n          \"parameters\": [\n            \"MapRef double_map\",\n            \"MapRef fast_map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the double_map_ and fast_map_ members.\"\n        },\n        {\n          \"name\": \"double_map\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the double_map_ member.\"\n        },\n        {\n          \"name\": \"fast_map\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the fast_map_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TransitionAndStoreNonNumberElementParameters\",\n      \"properties\": [\n        \"fast_map_\",\n        \"value_type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TransitionAndStoreNonNumberElementParameters\",\n          \"parameters\": [\n            \"MapRef fast_map\",\n            \"Type value_type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the fast_map_ and value_type_ members.\"\n        },\n        {\n          \"name\": \"fast_map\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the fast_map_ member.\"\n        },\n        {\n          \"name\": \"value_type\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns the value_type_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TransitionAndStoreNumberElementParameters\",\n      \"properties\": [\n        \"double_map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TransitionAndStoreNumberElementParameters\",\n          \"parameters\": [\n            \"MapRef double_map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the double_map_ member.\"\n        },\n        {\n          \"name\": \"double_map\",\n          \"parameters\": [],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Returns the double_map_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimplifiedOperatorGlobalCache\",\n      \"properties\": [\n        \"kBooleanNot\",\n        \"kNumberEqual\",\n        \"kNumberLessThan\",\n        \"kNumberLessThanOrEqual\",\n        \"kNumberAdd\",\n        \"kNumberSubtract\",\n        \"kNumberMultiply\",\n        \"kNumberDivide\",\n        \"kNumberModulus\",\n        \"kNumberBitwiseOr\",\n        \"kNumberBitwiseXor\",\n        \"kNumberBitwiseAnd\",\n        \"kNumberShiftLeft\",\n        \"kNumberShiftRight\",\n        \"kNumberShiftRightLogical\",\n        \"kNumberImul\",\n        \"kNumberAbs\",\n        \"kNumberClz32\",\n        \"kNumberCeil\",\n        \"kNumberFloor\",\n        \"kNumberFround\",\n        \"kNumberAcos\",\n        \"kNumberAcosh\",\n        \"kNumberAsin\",\n        \"kNumberAsinh\",\n        \"kNumberAtan\",\n        \"kNumberAtan2\",\n        \"kNumberAtanh\",\n        \"kNumberCbrt\",\n        \"kNumberCos\",\n        \"kNumberCosh\",\n        \"kNumberExp\",\n        \"kNumberExpm1\",\n        \"kNumberLog\",\n        \"kNumberLog1p\",\n        \"kNumberLog10\",\n        \"kNumberLog2\",\n        \"kNumberMax\",\n        \"kNumberMin\",\n        \"kNumberPow\",\n        \"kNumberRound\",\n        \"kNumberSign\",\n        \"kNumberSin\",\n        \"kNumberSinh\",\n        \"kNumberSqrt\",\n        \"kNumberTan\",\n        \"kNumberTanh\",\n        \"kNumberTrunc\",\n        \"kNumberToBoolean\",\n        \"kNumberToInt32\",\n        \"kNumberToString\",\n        \"kNumberToUint32\",\n        \"kNumberToUint8Clamped\",\n        \"kIntegral32OrMinusZeroToBigInt\",\n        \"kNumberSilenceNaN\",\n        \"kBigIntEqual\",\n        \"kBigIntLessThan\",\n        \"kBigIntLessThanOrEqual\",\n        \"kBigIntNegate\",\n        \"kStringConcat\",\n        \"kStringToNumber\",\n        \"kStringFromSingleCharCode\",\n        \"kStringFromSingleCodePoint\",\n        \"kStringIndexOf\",\n        \"kStringLength\",\n        \"kStringWrapperLength\",\n        \"kStringToLowerCaseIntl\",\n        \"kStringToUpperCaseIntl\",\n        \"kTypeOf\",\n        \"kPlainPrimitiveToNumber\",\n        \"kPlainPrimitiveToWord32\",\n        \"kPlainPrimitiveToFloat64\",\n        \"kChangeTaggedSignedToInt32\",\n        \"kChangeTaggedSignedToInt64\",\n        \"kChangeTaggedToInt32\",\n        \"kChangeTaggedToInt64\",\n        \"kChangeTaggedToUint32\",\n        \"kChangeTaggedToFloat64\",\n        \"kChangeTaggedToTaggedSigned\",\n        \"kChangeFloat64ToTaggedPointer\",\n        \"kChangeFloat64HoleToTagged\",\n        \"kChangeInt31ToTaggedSigned\",\n        \"kChangeInt32ToTagged\",\n        \"kChangeInt64ToTagged\",\n        \"kChangeUint32ToTagged\",\n        \"kChangeUint64ToTagged\",\n        \"kChangeTaggedToBit\",\n        \"kChangeBitToTagged\",\n        \"kTruncateBigIntToWord64\",\n        \"kChangeInt64ToBigInt\",\n        \"kChangeUint64ToBigInt\",\n        \"kTruncateTaggedToBit\",\n        \"kTruncateTaggedPointerToBit\",\n        \"kTruncateTaggedToWord32\",\n        \"kTruncateTaggedToFloat64\",\n        \"kObjectIsArrayBufferView\",\n        \"kObjectIsBigInt\",\n        \"kObjectIsCallable\",\n        \"kObjectIsConstructor\",\n        \"kObjectIsDetectableCallable\",\n        \"kObjectIsMinusZero\",\n        \"kNumberIsMinusZero\",\n        \"kObjectIsNaN\",\n        \"kNumberIsNaN\",\n        \"kObjectIsNonCallable\",\n        \"kObjectIsNumber\",\n        \"kObjectIsReceiver\",\n        \"kObjectIsSmi\",\n        \"kObjectIsString\",\n        \"kObjectIsSymbol\",\n        \"kObjectIsUndetectable\",\n        \"kNumberIsFloat64Hole\",\n        \"kNumberIsFinite\",\n        \"kObjectIsFiniteNumber\",\n        \"kNumberIsInteger\",\n        \"kObjectIsSafeInteger\",\n        \"kNumberIsSafeInteger\",\n        \"kObjectIsInteger\",\n        \"kConvertTaggedHoleToUndefined\",\n        \"kSameValue\",\n        \"kSameValueNumbersOnly\",\n        \"kNumberSameValue\",\n        \"kReferenceEqual\",\n        \"kStringEqual\",\n        \"kStringLessThan\",\n        \"kStringLessThanOrEqual\",\n        \"kToBoolean\",\n        \"kNewConsString\",\n        \"kUnsigned32Divide\",\n        \"kBigIntAdd\",\n        \"kBigIntSubtract\",\n        \"kBigIntMultiply\",\n        \"kBigIntDivide\",\n        \"kBigIntModulus\",\n        \"kBigIntBitwiseAnd\",\n        \"kBigIntBitwiseOr\",\n        \"kBigIntBitwiseXor\",\n        \"kBigIntShiftLeft\",\n        \"kBigIntShiftRight\",\n        \"kStringCharCodeAt\",\n        \"kStringCodePointAt\",\n        \"kStringFromCodePointAt\",\n        \"kStringSubstring\",\n        \"kDateNow\",\n        \"kDoubleArrayMax\",\n        \"kDoubleArrayMin\",\n        \"kCheckEqualsInternalizedString\",\n        \"kCheckEqualsSymbol\",\n        \"kCheckHeapObject\",\n        \"kCheckInternalizedString\",\n        \"kCheckNotTaggedHole\",\n        \"kCheckReceiver\",\n        \"kCheckReceiverOrNullOrUndefined\",\n        \"kCheckSymbol\",\n        \"kCheckedInt32Add\",\n        \"kCheckedInt32Div\",\n        \"kCheckedInt32Mod\",\n        \"kCheckedInt32Sub\",\n        \"kCheckedUint32Div\",\n        \"kCheckedUint32Mod\",\n        \"kCheckedAdditiveSafeIntegerAdd\",\n        \"kCheckedAdditiveSafeIntegerSub\",\n        \"kCheckedInt64Add\",\n        \"kCheckedInt64Sub\",\n        \"kCheckedInt64Mul\",\n        \"kCheckedInt64Div\",\n        \"kCheckedInt64Mod\",\n        \"kCheckNumber\",\n        \"kCheckNumberFitsInt32\",\n        \"kCheckSmi\",\n        \"kCheckString\",\n        \"kCheckStringOrStringWrapper\",\n        \"kCheckBigInt\",\n        \"kCheckedBigIntToBigInt64\",\n        \"kCheckedInt32ToTaggedSigned\",\n        \"kCheckedInt64ToInt32\",\n        \"kCheckedInt64ToTaggedSigned\",\n        \"kCheckedTaggedToArrayIndex\",\n        \"kCheckedTaggedSignedToInt32\",\n        \"kCheckedTaggedToTaggedPointer\",\n        \"kCheckedTaggedToTaggedSigned\",\n        \"kCheckedUint32ToInt32\",\n        \"kCheckedUint32ToTaggedSigned\",\n        \"kCheckedUint64ToInt32\",\n        \"kCheckedUint64ToInt64\",\n        \"kCheckedUint64ToTaggedSigned\",\n        \"kCheckedUint32Bounds\",\n        \"kCheckedUint64Bounds\",\n        \"kCheckBounds\",\n        \"kCheckBoundsAborting\",\n        \"kCheckIfName\",\n        \"kFindOrderedHashMapEntry\",\n        \"kFindOrderedHashMapEntryForInt32Key\",\n        \"kFindOrderedHashSetEntry\",\n        \"kChangeFloat64ToTaggedCheckForMinusZeroOperator\",\n        \"kChangeFloat64ToTaggedDontCheckForMinusZeroOperator\",\n        \"kCheckedInt32MulCheckForMinusZeroOperator\",\n        \"kCheckedInt32MulDontCheckForMinusZeroOperator\",\n        \"kCheckedFloat64ToInt32CheckForMinusZeroOperator\",\n        \"kCheckedFloat64ToInt32DontCheckForMinusZeroOperator\",\n        \"kCheckedFloat64ToAddSafeIntCheckForMinusZeroOperator\",\n        \"kCheckedFloat64ToAddSafeIntDontCheckForMinusZeroOperator\",\n        \"kCheckedFloat64ToInt64CheckForMinusZeroOperator\",\n        \"kCheckedFloat64ToInt64DontCheckForMinusZeroOperator\",\n        \"kCheckedTaggedToInt32CheckForMinusZeroOperator\",\n        \"kCheckedTaggedToInt32DontCheckForMinusZeroOperator\",\n        \"kCheckedTaggedToAddSafeIntCheckForMinusZeroOperator\",\n        \"kCheckedTaggedToAddSafeIntDontCheckForMinusZeroOperator\",\n        \"kCheckedTaggedToInt64CheckForMinusZeroOperator\",\n        \"kCheckedTaggedToInt64DontCheckForMinusZeroOperator\",\n        \"kCheckedTaggedToFloat64NumberOperator\",\n        \"kCheckedTaggedToFloat64NumberOrBooleanOperator\",\n        \"kCheckedTaggedToFloat64NumberOrOddballOperator\",\n        \"kCheckedTruncateTaggedToWord32AdditiveSafeIntegerOperator\",\n        \"kCheckedTruncateTaggedToWord32NumberOperator\",\n        \"kCheckedTruncateTaggedToWord32NumberOrOddballOperator\",\n        \"kConvertReceiverAnyOperator\",\n        \"kConvertReceiverNullOrUndefinedOperator\",\n        \"kConvertReceiverNotNullOrUndefinedOperator\",\n        \"kCheckFloat64HoleAllowReturnHoleOperator\",\n        \"kCheckFloat64HoleNeverReturnHoleOperator\",\n        \"kEnsureWritableFastElements\",\n        \"kGrowFastElementsOperatorDoubleElements\",\n        \"kGrowFastElementsOperatorSmiOrObjectElements\",\n        \"kLoadFieldByIndex\",\n        \"kLoadStackArgument\",\n        \"kSpeculativeNumberAddSignedSmallOperator\",\n        \"kSpeculativeNumberAddSignedSmallInputsOperator\",\n        \"kSpeculativeNumberAddSafeIntOperator\",\n        \"kSpeculativeNumberAddNumberOperator\",\n        \"kSpeculativeNumberAddNumberOrOddballOperator\",\n        \"kSpeculativeNumberSubtractSignedSmallOperator\",\n        \"kSpeculativeNumberSubtractSignedSmallInputsOperator\",\n        \"kSpeculativeNumberSubtractSafeIntOperator\",\n        \"kSpeculativeNumberSubtractNumberOperator\",\n        \"kSpeculativeNumberSubtractNumberOrOddballOperator\",\n        \"kSpeculativeNumberMultiplySignedSmallOperator\",\n        \"kSpeculativeNumberMultiplySignedSmallInputsOperator\",\n        \"kSpeculativeNumberMultiplySafeIntOperator\",\n        \"kSpeculativeNumberMultiplyNumberOperator\",\n        \"kSpeculativeNumberMultiplyNumberOrOddballOperator\",\n        \"kSpeculativeNumberPowSignedSmallOperator\",\n        \"kSpeculativeNumberPowSignedSmallInputsOperator\",\n        \"kSpeculativeNumberPowSafeIntOperator\",\n        \"kSpeculativeNumberPowNumberOperator\",\n        \"kSpeculativeNumberPowNumberOrOddballOperator\",\n        \"kSpeculativeNumberDivideSignedSmallOperator\",\n        \"kSpeculativeNumberDivideSignedSmallInputsOperator\",\n        \"kSpeculativeNumberDivideSafeIntOperator\",\n        \"kSpeculativeNumberDivideNumberOperator\",\n        \"kSpeculativeNumberDivideNumberOrOddballOperator\",\n        \"kSpeculativeNumberModulusSignedSmallOperator\",\n        \"kSpeculativeNumberModulusSignedSmallInputsOperator\",\n        \"kSpeculativeNumberModulusSafeIntOperator\",\n        \"kSpeculativeNumberModulusNumberOperator\",\n        \"kSpeculativeNumberModulusNumberOrOddballOperator\",\n        \"kSpeculativeNumberShiftLeftSignedSmallOperator\",\n        \"kSpeculativeNumberShiftLeftSignedSmallInputsOperator\",\n        \"kSpeculativeNumberShiftLeftSafeIntOperator\",\n        \"kSpeculativeNumberShiftLeftNumberOperator\",\n        \"kSpeculativeNumberShiftLeftNumberOrOddballOperator\",\n        \"kSpeculativeNumberShiftRightSignedSmallOperator\",\n        \"kSpeculativeNumberShiftRightSignedSmallInputsOperator\",\n        \"kSpeculativeNumberShiftRightSafeIntOperator\",\n        \"kSpeculativeNumberShiftRightNumberOperator\",\n        \"kSpeculativeNumberShiftRightNumberOrOddballOperator\",\n        \"kSpeculativeNumberShiftRightLogicalSignedSmallOperator\",\n        \"kSpeculativeNumberShiftRightLogicalSignedSmallInputsOperator\",\n        \"kSpeculativeNumberShiftRightLogicalSafeIntOperator\",\n        \"kSpeculativeNumberShiftRightLogicalNumberOperator\",\n        \"kSpeculativeNumberShiftRightLogicalNumberOrOddballOperator\",\n        \"kSpeculativeNumberBitwiseAndSignedSmallOperator\",\n        \"kSpeculativeNumberBitwiseAndSignedSmallInputsOperator\",\n        \"kSpeculativeNumberBitwiseAndSafeIntOperator\",\n        \"kSpeculativeNumberBitwiseAndNumberOperator\",\n        \"kSpeculativeNumberBitwiseAndNumberOrOddballOperator\",\n        \"kSpeculativeNumberBitwiseOrSignedSmallOperator\",\n        \"kSpeculativeNumberBitwiseOrSignedSmallInputsOperator\",\n        \"kSpeculativeNumberBitwiseOrSafeIntOperator\",\n        \"kSpeculativeNumberBitwiseOrNumberOperator\",\n        \"kSpeculativeNumberBitwiseOrNumberOrOddballOperator\",\n        \"kSpeculativeNumberBitwiseXorSignedSmallOperator\",\n        \"kSpeculativeNumberBitwiseXorSignedSmallInputsOperator\",\n        \"kSpeculativeNumberBitwiseXorSafeIntOperator\",\n        \"kSpeculativeNumberBitwiseXorNumberOperator\",\n        \"kSpeculativeNumberBitwiseXorNumberOrOddballOperator\",\n        \"kSpeculativeNumberEqualSignedSmallOperator\",\n        \"kSpeculativeNumberEqualSignedSmallInputsOperator\",\n        \"kSpeculativeNumberEqualSafeIntOperator\",\n        \"kSpeculativeNumberEqualNumberOperator\",\n        \"kSpeculativeNumberEqualNumberOrBooleanOperator\",\n        \"kSpeculativeNumberEqualNumberOrOddballOperator\",\n        \"kSpeculativeNumberLessThanSignedSmallOperator\",\n        \"kSpeculativeNumberLessThanSignedSmallInputsOperator\",\n        \"kSpeculativeNumberLessThanSafeIntOperator\",\n        \"kSpeculativeNumberLessThanNumberOperator\",\n        \"kSpeculativeNumberLessThanNumberOrOddballOperator\",\n        \"kSpeculativeNumberLessThanOrEqualSignedSmallOperator\",\n        \"kSpeculativeNumberLessThanOrEqualSignedSmallInputsOperator\",\n        \"kSpeculativeNumberLessThanOrEqualSafeIntOperator\",\n        \"kSpeculativeNumberLessThanOrEqualNumberOperator\",\n        \"kSpeculativeNumberLessThanOrEqualNumberOrOddballOperator\",\n        \"kSpeculativeToNumberSignedSmallOperator\",\n        \"kSpeculativeToNumberNumberOperator\",\n        \"kSpeculativeToNumberNumberOrOddballOperator\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"SimplifiedOperatorBuilder\",\n      \"properties\": [\n        \"cache_\",\n        \"zone_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SimplifiedOperatorBuilder\",\n          \"parameters\": [\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for the SimplifiedOperatorBuilder, initializes the cache_ and zone_ members.\"\n        },\n        {\n          \"name\": \"NumberSameValue\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the NumberSameValue operator from the cache.\"\n        },\n                {\n          \"name\": \"FindOrderedCollectionEntry\",\n          \"parameters\": [\n            \"CollectionKind collection_kind\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns either kFindOrderedHashMapEntry or kFindOrderedHashSetEntry depending on the collection_kind.\"\n        },\n        {\n          \"name\": \"RuntimeAbort\",\n          \"parameters\": [\n            \"AbortReason reason\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new RuntimeAbort operator with the given AbortReason.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntAsIntN\",\n          \"parameters\": [\n            \"int bits\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new SpeculativeBigIntAsIntN operator with the given number of bits and feedback source.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntAsUintN\",\n          \"parameters\": [\n            \"int bits\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new SpeculativeBigIntAsUintN operator with the given number of bits and feedback source.\"\n        },\n        {\n          \"name\": \"AssertType\",\n          \"parameters\": [\n            \"Type type\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new AssertType operator with the given type.\"\n        },\n        {\n          \"name\": \"VerifyType\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new VerifyType operator.\"\n        },\n        {\n          \"name\": \"CheckTurboshaftTypeOf\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new CheckTurboshaftTypeOf operator.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToTagged\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a ChangeFloat64ToTagged operator with the specified mode.\"\n        },\n        {\n          \"name\": \"CheckedInt32Mul\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedInt32Mul operator with the specified mode.\"\n        },\n        {\n          \"name\": \"CheckedFloat64ToInt32\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedFloat64ToInt32 operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedFloat64ToAdditiveSafeInteger\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedFloat64ToAdditiveSafeInteger operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedFloat64ToInt64\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedFloat64ToInt64 operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedTaggedToInt32\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedTaggedToInt32 operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedTaggedToAdditiveSafeInteger\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedTaggedToAdditiveSafeInteger operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedTaggedToInt64\",\n          \"parameters\": [\n            \"CheckForMinusZeroMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedTaggedToInt64 operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedTaggedToFloat64\",\n          \"parameters\": [\n            \"CheckTaggedInputMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedTaggedToFloat64 operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckedTruncateTaggedToWord32\",\n          \"parameters\": [\n            \"CheckTaggedInputMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckedTruncateTaggedToWord32 operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"CheckMaps\",\n          \"parameters\": [\n            \"CheckMapsFlags flags\",\n            \"ZoneRefSet<Map> maps\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new CheckMaps operator with the specified flags, maps, and feedback source.\"\n        },\n        {\n          \"name\": \"MapGuard\",\n          \"parameters\": [\n            \"ZoneRefSet<Map> maps\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new MapGuard operator with the given set of maps.\"\n        },\n        {\n          \"name\": \"CompareMaps\",\n          \"parameters\": [\n            \"ZoneRefSet<Map> maps\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new CompareMaps operator with the given set of maps.\"\n        },\n        {\n          \"name\": \"ConvertReceiver\",\n          \"parameters\": [\n            \"ConvertReceiverMode mode\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a ConvertReceiver operator with the specified mode.\"\n        },\n        {\n          \"name\": \"CheckFloat64Hole\",\n          \"parameters\": [\n            \"CheckFloat64HoleMode mode\",\n            \"FeedbackSource const& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckFloat64Hole operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntAdd\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntAdd operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntSubtract\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntSubtract operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntMultiply\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntMultiply operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntDivide\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntDivide operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntModulus\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntModulus operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntBitwiseAnd\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntBitwiseAnd operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntBitwiseOr\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntBitwiseOr operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntBitwiseXor\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntBitwiseXor operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntShiftLeft\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntShiftLeft operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntShiftRight\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntShiftRight operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntEqual\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntEqual operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntLessThan\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntLessThan operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntLessThanOrEqual\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeBigIntLessThanOrEqual operator with the given hint.\"\n        },\n        {\n          \"name\": \"SpeculativeBigIntNegate\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new SpeculativeBigIntNegate operator.\"\n        },\n        {\n          \"name\": \"CheckClosure\",\n          \"parameters\": [\n            \"const Handle<FeedbackCell>& feedback_cell\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a CheckClosure operator.\"\n        },\n        {\n          \"name\": \"SpeculativeToNumber\",\n          \"parameters\": [\n            \"NumberOperationHint hint\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a SpeculativeToNumber operator with the specified hint and feedback.\"\n        },\n        {\n          \"name\": \"EnsureWritableFastElements\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the EnsureWritableFastElements operator.\"\n        },\n        {\n          \"name\": \"MaybeGrowFastElements\",\n          \"parameters\": [\n            \"GrowFastElementsMode mode\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a MaybeGrowFastElements operator with the specified mode and feedback source.\"\n        },\n        {\n          \"name\": \"TransitionElementsKind\",\n          \"parameters\": [\n            \"ElementsTransition transition\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a TransitionElementsKind operator with the specified transition.\"\n        },\n        {\n          \"name\": \"TransitionElementsKindOrCheckMap\",\n          \"parameters\": [\n            \"ElementsTransitionWithMultipleSources transition\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a TransitionElementsKindOrCheckMap operator with the specified transition.\"\n        },\n        {\n          \"name\": \"ArgumentsLength\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new ArgumentsLength operator.\"\n        },\n        {\n          \"name\": \"RestLength\",\n          \"parameters\": [\n            \"int formal_parameter_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a RestLength operator.\"\n        },\n        {\n          \"name\": \"TypedArrayLength\",\n          \"parameters\": [\n            \"ElementsKind elements_kind\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a TypedArrayLength operator.\"\n        },\n        {\n          \"name\": \"NewDoubleElements\",\n          \"parameters\": [\n            \"AllocationType allocation\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new NewDoubleElements operator.\"\n        },\n        {\n          \"name\": \"NewSmiOrObjectElements\",\n          \"parameters\": [\n            \"AllocationType allocation\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new NewSmiOrObjectElements operator.\"\n        },\n        {\n          \"name\": \"NewArgumentsElements\",\n          \"parameters\": [\n            \"CreateArgumentsType type\",\n            \"int formal_parameter_count\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new NewArgumentsElements operator.\"\n        },\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"Type type\",\n            \"AllocationType allocation\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new Allocate operator.\"\n        },\n        {\n          \"name\": \"AllocateRaw\",\n          \"parameters\": [\n            \"Type type\",\n            \"AllocationType allocation\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a new AllocateRaw operator.\"\n        },\n         {\n          \"name\": \"SpeculativeToBigInt\",\n          \"parameters\": [\n            \"BigIntOperationHint hint\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the speculativeToBigInt opcode\"\n        },\n                {\n          \"name\": \"CheckIf\",\n          \"parameters\": [\n            \"DeoptimizeReason reason\",\n            \"const FeedbackSource& feedback\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the CheckIf op code.\"\n        }\n      ]\n    },\n{\n      \"name\": \"CheckIfOperator\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n        \"name\": \"LoadStackArgumentOperator\",\n        \"properties\": [],\n        \"methods\": []\n    },\n    {\n        \"name\": \"LoadFieldByIndexOperator\",\n        \"properties\": [],\n        \"methods\": []\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"hash_value\",\n      \"parameters\": [\n        \"BaseTaggedness base_taggedness\"\n      ],\n      \"return_type\": \"size_t\",\n      \"logic\": \"Calculates the hash value of a BaseTaggedness enum value.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"BaseTaggedness base_taggedness\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print a BaseTaggedness enum value to an output stream.\"\n    },\n    {\n      \"name\": \"operator<<\",\n      \"parameters\": [\n        \"std::ostream& os\",\n        \"ConstFieldInfo const& const_field_info\"\n      ],\n      \"return_type\": \"std::ostream&\",\n      \"logic\": \"Overloads the << operator to print ConstFieldInfo to an output stream.\"\n    },\n    {\n      \"name\": \"operator==\",\n      \"parameters\": [\n        \"ConstFieldInfo const& lhs\",\n        \"ConstFieldInfo const& rhs\"\n      ],\n      \"return_type\": \"bool\",\n      \"logic\": \"Overloads the =="
}