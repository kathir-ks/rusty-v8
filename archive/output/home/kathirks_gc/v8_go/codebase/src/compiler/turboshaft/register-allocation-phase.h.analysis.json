{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/register-allocation-phase.h",
  "imports": [
    "src/compiler/backend/frame-elider.h",
    "src/compiler/backend/jump-threading.h",
    "src/compiler/backend/move-optimizer.h",
    "src/compiler/backend/register-allocator.h",
    "src/compiler/turboshaft/block-instrumentation-reducer.h",
    "src/compiler/turboshaft/copying-phase.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/value-numbering-reducer.h"
  ],
  "classes": [
    {
      "name": "MeetRegisterConstraintsPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a ConstraintBuilder and calls MeetRegisterConstraints to meet the register constraints for the current phase."
        }
      ]
    },
    {
      "name": "ResolvePhisPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a ConstraintBuilder and calls ResolvePhis to resolve phi nodes for the current phase."
        }
      ]
    },
    {
      "name": "BuildLiveRangesPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a LiveRangeBuilder and calls BuildLiveRanges to build the live ranges for the current phase."
        }
      ]
    },
    {
      "name": "BuildLiveRangeBundlesPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a BundleBuilder and calls BuildBundles to build the live range bundles for the current phase."
        }
      ]
    },
    {
      "name": "AllocateGeneralRegistersPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a register allocator and calls AllocateRegisters to allocate general purpose registers."
        }
      ]
    },
    {
      "name": "AllocateFPRegistersPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a register allocator and calls AllocateRegisters to allocate floating point registers."
        }
      ]
    },
    {
      "name": "AllocateSimd128RegistersPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a register allocator and calls AllocateRegisters to allocate SIMD128 registers."
        }
      ]
    },
    {
      "name": "DecideSpillingModePhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates an OperandAssigner and calls DecideSpillingMode to decide which operands need to be spilled."
        }
      ]
    },
    {
      "name": "AssignSpillSlotsPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates an OperandAssigner and calls AssignSpillSlots to assign stack slots for spilled operands."
        }
      ]
    },
    {
      "name": "CommitAssignmentPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates an OperandAssigner and calls CommitAssignment to commit the register and spill slot assignments."
        }
      ]
    },
    {
      "name": "PopulateReferenceMapsPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a ReferenceMapPopulator and calls PopulateReferenceMaps to populate the reference maps for garbage collection."
        }
      ]
    },
    {
      "name": "ConnectRangesPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a LiveRangeConnector and calls ConnectRanges to connect live ranges after register allocation."
        }
      ]
    },
    {
      "name": "ResolveControlFlowPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a LiveRangeConnector and calls ResolveControlFlow to resolve control flow after register allocation."
        }
      ]
    },
    {
      "name": "OptimizeMovesPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a MoveOptimizer and calls Run to optimize move instructions."
        }
      ]
    },
    {
      "name": "FrameElisionPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Instantiates a FrameElider and calls Run to perform frame elision to avoid creating stack frames where possible."
        }
      ]
    },
    {
      "name": "JumpThreadingPhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone",
            "bool frame_at_start"
          ],
          "return_type": "void",
          "logic": "Performs jump threading to eliminate unnecessary jumps.  Computes forwarding and then applies it."
        }
      ]
    },
    {
      "name": "AssembleCodePhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Gets the CodeGenerator from PipelineData and calls AssembleCode to generate machine code."
        }
      ]
    },
    {
      "name": "FinalizeCodePhase",
      "properties": [
        "kOutputIsTraceableGraph"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Gets the CodeGenerator from PipelineData and calls FinalizeCode to finalize the generated code, storing the resulting Code object in PipelineData."
        }
      ]
    }
  ],
  "functions": []
}