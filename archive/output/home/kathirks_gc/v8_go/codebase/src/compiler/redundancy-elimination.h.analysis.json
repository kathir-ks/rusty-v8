{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/redundancy-elimination.h",
  "imports": [
    "src/compiler/graph-reducer.h",
    "src/compiler/machine-operator.h"
  ],
  "classes": [
    {
      "name": "RedundancyElimination",
      "properties": [
        "node_checks_",
        "jsgraph_",
        "zone_"
      ],
      "methods": [
        {
          "name": "RedundancyElimination",
          "parameters": [
            "Editor* editor",
            "JSGraph* jsgraph",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the RedundancyElimination class. Initializes the reducer with an editor, JSGraph, and zone."
        },
        {
          "name": "~RedundancyElimination",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the RedundancyElimination class."
        },
        {
          "name": "operator=",
          "parameters": [
            "const RedundancyElimination&"
          ],
          "return_type": "RedundancyElimination&",
          "logic": "Deleted copy assignment operator."
        },
        {
          "name": "RedundancyElimination",
          "parameters": [
            "const RedundancyElimination&"
          ],
          "return_type": "RedundancyElimination",
          "logic": "Deleted copy constructor."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer, which is \"RedundancyElimination\"."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "The main reduction method. It attempts to eliminate redundancy in the given node."
        },
        {
          "name": "ReduceCheckNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces check nodes."
        },
        {
          "name": "ReduceEffectPhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces effect phi nodes."
        },
        {
          "name": "ReduceSpeculativeNumberComparison",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces speculative number comparison nodes."
        },
        {
          "name": "ReduceSpeculativeNumberOperation",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces speculative number operation nodes."
        },
        {
          "name": "ReduceStart",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces start node."
        },
        {
          "name": "ReduceOtherNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces other nodes."
        },
        {
          "name": "TakeChecksFromFirstEffect",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Takes the check information from the first effect of a node."
        },
        {
          "name": "UpdateChecks",
          "parameters": [
            "Node* node",
            "EffectPathChecks const* checks"
          ],
          "return_type": "Reduction",
          "logic": "Updates the effect checks for a node."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the Zone associated with this instance."
        }
      ]
    },
    {
      "name": "EffectPathChecks",
      "properties": [
        "head_",
        "size_"
      ],
      "methods": [
        {
          "name": "Copy",
          "parameters": [
            "Zone* zone",
            "EffectPathChecks const* checks"
          ],
          "return_type": "EffectPathChecks*",
          "logic": "Creates a copy of EffectPathChecks on a given zone."
        },
        {
          "name": "Empty",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "EffectPathChecks const*",
          "logic": "Creates an empty EffectPathChecks object on the given zone."
        },
        {
          "name": "Equals",
          "parameters": [
            "EffectPathChecks const* that"
          ],
          "return_type": "bool",
          "logic": "Checks if two EffectPathChecks objects are equal."
        },
        {
          "name": "Merge",
          "parameters": [
            "EffectPathChecks const* that"
          ],
          "return_type": "void",
          "logic": "Merges another EffectPathChecks object into this one."
        },
        {
          "name": "AddCheck",
          "parameters": [
            "Zone* zone",
            "Node* node"
          ],
          "return_type": "EffectPathChecks const*",
          "logic": "Adds a check node to the EffectPathChecks."
        },
        {
          "name": "LookupCheck",
          "parameters": [
            "Node* node",
            "JSGraph* jsgraph"
          ],
          "return_type": "Node*",
          "logic": "Looks up a check node in the EffectPathChecks."
        },
        {
          "name": "LookupBoundsCheckFor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Looks up bounds check for a node in the EffectPathChecks."
        }
      ]
    },
    {
      "name": "PathChecksForEffectNodes",
      "properties": [
        "info_for_node_"
      ],
      "methods": [
        {
          "name": "PathChecksForEffectNodes",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for PathChecksForEffectNodes."
        },
        {
          "name": "Get",
          "parameters": [
            "Node* node"
          ],
          "return_type": "EffectPathChecks const*",
          "logic": "Retrieves the EffectPathChecks associated with a given node."
        },
        {
          "name": "Set",
          "parameters": [
            "Node* node",
            "EffectPathChecks const* checks"
          ],
          "return_type": "void",
          "logic": "Sets the EffectPathChecks for a given node."
        }
      ]
    }
  ],
  "functions": []
}