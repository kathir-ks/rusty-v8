{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/instruction-selection-phase.cc",
  "imports": [
    "src/compiler/turboshaft/instruction-selection-phase.h",
    "<optional>",
    "src/builtins/profile-data-reader.h",
    "src/codegen/optimized-compilation-info.h",
    "src/compiler/backend/instruction-selector-impl.h",
    "src/compiler/backend/instruction-selector.h",
    "src/compiler/js-heap-broker.h",
    "src/compiler/pipeline.h",
    "src/compiler/turbofan-graph-visualizer.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/phase.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/diagnostics/code-tracer.h",
    "src/utils/sparse-bit-vector.h"
  ],
  "classes": [
    {
      "name": "TurboshaftSpecialRPONumberer",
      "properties": [
        "graph_",
        "zone_",
        "block_data_",
        "loops_"
      ],
      "methods": [
        {
          "name": "TurboshaftSpecialRPONumberer",
          "parameters": [
            "Graph& graph",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for TurboshaftSpecialRPONumberer, initializes the graph, zone, and block data."
        },
        {
          "name": "ComputeSpecialRPO",
          "parameters": [],
          "return_type": "ZoneVector<uint32_t>",
          "logic": "Computes a special reverse post-order (RPO) traversal of the graph, taking into account loop structures to improve scheduling. Returns a vector representing the block permutation."
        },
        {
          "name": "ComputeLoopInfo",
          "parameters": [
            "size_t num_loops",
            "ZoneVector<Backedge>& backedges"
          ],
          "return_type": "void",
          "logic": "Computes loop membership information based on backedges in the control flow graph, identifies loop headers and members."
        },
        {
          "name": "ComputeBlockPermutation",
          "parameters": [
            "const Block* entry"
          ],
          "return_type": "ZoneVector<uint32_t>",
          "logic": "Computes the block permutation based on the calculated RPO, mapping block indices to their new positions."
        }
      ]
    },
    {
      "name": "ProfileApplicationPhase",
      "properties": [],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone",
            "const ProfileDataFromFile* profile"
          ],
          "return_type": "void",
          "logic": "Applies branch prediction hints from a profile to BranchOp operations in the graph."
        }
      ]
    },
    {
      "name": "SpecialRPOSchedulingPhase",
      "properties": [],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone"
          ],
          "return_type": "void",
          "logic": "Computes a special RPO order for blocks in the graph and then propagates deferred block information."
        }
      ]
    },
    {
      "name": "InstructionSelectionPhase",
      "properties": [],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "PipelineData* data",
            "Zone* temp_zone",
            "const CallDescriptor* call_descriptor",
            "Linkage* linkage",
            "CodeTracer* code_tracer"
          ],
          "return_type": "std::optional<BailoutReason>",
          "logic": "Performs instruction selection on the graph to generate an instruction sequence. Returns a BailoutReason if instruction selection fails."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "TraceSequence",
      "parameters": [
        "OptimizedCompilationInfo* info",
        "InstructionSequence* sequence",
        "JSHeapBroker* broker",
        "CodeTracer* code_tracer",
        "const char* phase_name"
      ],
      "return_type": "void",
      "logic": "Traces the instruction sequence for debugging purposes, outputting JSON and graph representations if tracing is enabled."
    },
    {
      "name": "PropagateDeferred",
      "parameters": [
        "Graph& graph"
      ],
      "return_type": "void",
      "logic": "Propagates information about deferred blocks through the graph, marking blocks that should be scheduled later."
    }
  ]
}