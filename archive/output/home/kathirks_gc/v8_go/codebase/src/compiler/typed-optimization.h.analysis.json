{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/typed-optimization.h",
  "imports": [
    "src/base/compiler-specific.h",
    "src/compiler/graph-reducer.h"
  ],
  "classes": [
    {
      "name": "TypedOptimization",
      "properties": [
        "dependencies_",
        "jsgraph_",
        "broker_",
        "true_type_",
        "false_type_",
        "type_cache_"
      ],
      "methods": [
        {
          "name": "TypedOptimization",
          "parameters": [
            "Editor* editor",
            "CompilationDependencies* dependencies",
            "JSGraph* jsgraph",
            "JSHeapBroker* broker"
          ],
          "return_type": "void",
          "logic": "Constructor for the TypedOptimization class, initializes the reducer with the provided dependencies, graph, and broker."
        },
        {
          "name": "~TypedOptimization",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the TypedOptimization class."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer, which is \"TypedOptimization\"."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "The main reduction function that attempts to simplify the given node based on its type information."
        },
        {
          "name": "ReduceConvertReceiver",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a ConvertReceiver node, likely involving type conversions on the 'this' object."
        },
        {
          "name": "ReduceMaybeGrowFastElements",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a MaybeGrowFastElements node, which may trigger the resizing of an array-like object's backing store based on type feedback."
        },
        {
          "name": "ReduceCheckBounds",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckBounds node, potentially removing bounds checks if the index is known to be within the valid range based on type information."
        },
        {
          "name": "ReduceCheckHeapObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckHeapObject node, used to verify that a value is a heap object, often used for type refinement."
        },
        {
          "name": "ReduceCheckMaps",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckMaps node, which verifies the map (layout) of an object, refining type information and enabling optimizations."
        },
        {
          "name": "ReduceCheckNumber",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckNumber node, ensuring a value is a number."
        },
        {
          "name": "ReduceCheckNumberFitsInt32",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckNumberFitsInt32 node, verifying that a number fits within the range of a 32-bit integer."
        },
        {
          "name": "ReduceCheckString",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckString node, ensuring a value is a string."
        },
        {
          "name": "ReduceCheckStringOrStringWrapper",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckStringOrStringWrapper node, checking if a value is either a primitive string or a String wrapper object."
        },
        {
          "name": "ReduceCheckEqualsInternalizedString",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckEqualsInternalizedString node, checking if a value is an internalized string."
        },
        {
          "name": "ReduceCheckEqualsSymbol",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckEqualsSymbol node, verifying that a value is a Symbol."
        },
        {
          "name": "ReduceLoadField",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a LoadField node, loading a field from an object, potentially optimizing based on type information about the object's layout."
        },
        {
          "name": "ReduceNumberFloor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberFloor operation, potentially using optimized instructions if the input is known to be within a certain range."
        },
        {
          "name": "ReduceNumberRoundop",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Number Round operation (e.g. round, ceil, trunc), potentially using optimized instructions if the input is known to be within a certain range."
        },
        {
          "name": "ReduceNumberSilenceNaN",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberSilenceNaN operation, which converts NaN to 0, potentially optimized if NaN is unlikely."
        },
        {
          "name": "ReduceNumberToUint8Clamped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a NumberToUint8Clamped operation, clamping a number to the range [0, 255] and converting it to an unsigned 8-bit integer."
        },
        {
          "name": "ReducePhi",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Phi node, which represents a merge point in the control flow, potentially simplifying it based on type information from different branches."
        },
        {
          "name": "ReduceReferenceEqual",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a ReferenceEqual node, which performs a strict equality check (===) on references."
        },
        {
          "name": "ReduceStringComparison",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StringComparison node, optimizing string comparisons based on type information and string length."
        },
        {
          "name": "ReduceStringLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a StringLength node, fetching the length of a string."
        },
        {
          "name": "ReduceSameValue",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a SameValue operation, comparing two values for equality as defined by the SameValue algorithm."
        },
        {
          "name": "ReduceSelect",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a Select node (ternary operator), potentially simplifying it based on the type of the condition and the operands."
        },
        {
          "name": "ReduceSpeculativeToNumber",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a SpeculativeToNumber node, attempting to convert a value to a number, with speculative type feedback."
        },
        {
          "name": "ReduceCheckNotTaggedHole",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a CheckNotTaggedHole node, ensuring a value is not the 'hole' value (used to indicate uninitialized array elements)."
        },
        {
          "name": "ReduceTypedArrayLength",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TypedArrayLength node, fetching the length of a TypedArray."
        },
        {
          "name": "ReduceTypeOf",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a TypeOf node, determining the type of a value as a string (e.g., \"number\", \"string\")."
        },
        {
          "name": "ReduceToBoolean",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a ToBoolean node, converting a value to a boolean based on JavaScript's truthiness rules."
        },
        {
          "name": "ReduceSpeculativeNumberAdd",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative Number Add operation, optimizing arithmetic operation if the inputs are likely to be numbers."
        },
        {
          "name": "ReduceSpeculativeNumberMultiply",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative Number Multiply operation, optimizing arithmetic operation if the inputs are likely to be numbers."
        },
        {
          "name": "ReduceSpeculativeNumberPow",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative Number Pow operation, optimizing arithmetic operation if the inputs are likely to be numbers."
        },
        {
          "name": "ReduceSpeculativeNumberBinop",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative Number Binop operation (general binary operation), optimizing arithmetic operation if the inputs are likely to be numbers."
        },
        {
          "name": "ReduceSpeculativeNumberComparison",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a speculative Number Comparison operation, optimizing comparison operation if the inputs are likely to be numbers."
        },
        {
          "name": "ReduceTransitionElementsKindOrCheckMap",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces TransitionElementsKindOrCheckMap operation. Possibly transitions elements kind or checks map of an object."
        },
        {
          "name": "TryReduceStringComparisonOfStringFromSingleCharCode",
          "parameters": [
            "Node* comparison",
            "Node* from_char_code",
            "Type constant_type",
            "bool inverted"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to reduce a string comparison if one of the strings is created using String.fromCharCode."
        },
        {
          "name": "TryReduceStringComparisonOfStringFromSingleCharCodeToConstant",
          "parameters": [
            "Node* comparison",
            "StringRef string",
            "bool inverted"
          ],
          "return_type": "Reduction",
          "logic": "Helper function to reduce a string comparison to a constant value if one of the strings is created using String.fromCharCode and is compared to a constant."
        },
        {
          "name": "NumberComparisonFor",
          "parameters": [
            "const Operator* op"
          ],
          "return_type": "const Operator*",
          "logic": "Returns the appropriate operator for a number comparison based on the given operator."
        },
        {
          "name": "ConvertPlainPrimitiveToNumber",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Node*",
          "logic": "Converts a plain primitive value (like a string or boolean) to a number."
        },
        {
          "name": "ReduceJSToNumberInput",
          "parameters": [
            "Node* input"
          ],
          "return_type": "Reduction",
          "logic": "Reduces the input to a JSToNumber node by potentially converting to number."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns a pointer to the SimplifiedOperatorBuilder."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns a pointer to the Factory object, which is used for creating objects in the V8 heap."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns a pointer to the TFGraph (TurboFan Graph)."
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the CompilationDependencies."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Returns the JSHeapBroker."
        }
      ]
    }
  ],
  "functions": []
}