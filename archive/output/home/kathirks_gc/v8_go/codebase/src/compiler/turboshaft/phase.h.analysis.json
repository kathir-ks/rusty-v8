{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/phase.h",
  "imports": [
    "<optional>",
    "<type_traits>",
    "src/base/contextual.h",
    "src/base/template-meta-programming/functional.h",
    "src/codegen/assembler.h",
    "src/codegen/optimized-compilation-info.h",
    "src/common/globals.h",
    "src/compiler/access-info.h",
    "src/compiler/backend/instruction.h",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/compiler-source-position-table.h",
    "src/compiler/node-origin-table.h",
    "src/compiler/osr.h",
    "src/compiler/phase.h",
    "src/compiler/turboshaft/builtin-compiler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/zone-with-name.h",
    "src/logging/runtime-call-stats.h",
    "src/zone/accounting-allocator.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "PipelineData",
      "properties": [
        "zone_stats_",
        "compilation_zone_",
        "pipeline_kind_",
        "isolate_",
        "info_",
        "debug_name_",
        "broker_",
        "pipeline_statistics_",
        "dependencies_",
        "start_source_position_",
        "assembler_options_",
        "code_",
        "source_position_output_",
        "runtime_call_stats_",
        "builtin_component_",
        "graph_component_",
        "codegen_component_",
        "instruction_component_",
        "register_component_",
        "wasm_module_sig_",
        "wasm_canonical_sig_",
        "wasm_module_",
        "wasm_shared_",
        "wasm_shuffle_analyzer_",
        "wasm_revec_analyzer_"
      ],
      "methods": [
        {
          "name": "PipelineData",
          "parameters": [
            "ZoneStats* zone_stats",
            "TurboshaftPipelineKind pipeline_kind",
            "Isolate* isolate",
            "OptimizedCompilationInfo* info",
            "const AssemblerOptions& assembler_options",
            "int start_source_position = kNoSourcePosition"
          ],
          "return_type": "void",
          "logic": "Constructor for PipelineData, initializes member variables related to zones, pipeline kind, isolate, compilation info, assembler options, and source position."
        },
        {
          "name": "InitializeBrokerAndDependencies",
          "parameters": [
            "std::shared_ptr<JSHeapBroker> broker",
            "CompilationDependencies* dependencies"
          ],
          "return_type": "void",
          "logic": "Initializes the JSHeapBroker and CompilationDependencies for the pipeline."
        },
        {
          "name": "InitializeBuiltinComponent",
          "parameters": [
            "const CallDescriptor* call_descriptor",
            "std::optional<BytecodeHandlerData> bytecode_handler_data = {}"
          ],
          "return_type": "void",
          "logic": "Initializes the BuiltinComponent with the provided CallDescriptor and optional BytecodeHandlerData."
        },
        {
          "name": "InitializeGraphComponent",
          "parameters": [
            "SourcePositionTable* source_positions"
          ],
          "return_type": "void",
          "logic": "Initializes the GraphComponent, creating a graph, and assigning the source positions."
        },
        {
          "name": "InitializeGraphComponentWithGraphZone",
          "parameters": [
            "ZoneWithName<kGraphZoneName> graph_zone",
            "ZoneWithNamePointer<SourcePositionTable, kGraphZoneName> source_positions",
            "ZoneWithNamePointer<NodeOriginTable, kGraphZoneName> node_origins"
          ],
          "return_type": "void",
          "logic": "Initializes the GraphComponent, using existing GraphZone and pointers to SourcePositionTable and NodeOriginTable"
        },
        {
          "name": "ClearGraphComponent",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the graph component, freeing associated resources."
        },
        {
          "name": "InitializeCodegenComponent",
          "parameters": [
            "std::shared_ptr<OsrHelper> osr_helper",
            "JumpOptimizationInfo* jump_optimization_info = nullptr"
          ],
          "return_type": "void",
          "logic": "Initializes the CodegenComponent, setting up OSR helper and jump optimization info."
        },
        {
          "name": "ClearCodegenComponent",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the codegen component, freeing associated resources."
        },
        {
          "name": "InitializeCodeGenerator",
          "parameters": [
            "Linkage* linkage"
          ],
          "return_type": "void",
          "logic": "Initializes the CodeGenerator, creating a new instance of the CodeGenerator class."
        },
        {
          "name": "InitializeInstructionComponent",
          "parameters": [
            "const CallDescriptor* call_descriptor"
          ],
          "return_type": "void",
          "logic": "Initializes the InstructionComponent, creating an instruction sequence."
        },
        {
          "name": "InitializeInstructionComponentWithSequence",
          "parameters": [
            "InstructionSequence* sequence"
          ],
          "return_type": "void",
          "logic": "Initializes InstructionComponent with a pre-existing InstructionSequence."
        },
        {
          "name": "ClearInstructionComponent",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the instruction component, freeing associated resources."
        },
        {
          "name": "InitializeRegisterComponent",
          "parameters": [
            "const RegisterConfiguration* config",
            "CallDescriptor* call_descriptor"
          ],
          "return_type": "void",
          "logic": "Initializes the RegisterComponent with the given register configuration and call descriptor.  Definition not in header."
        },
        {
          "name": "ClearRegisterComponent",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets the register component, freeing associated resources."
        },
        {
          "name": "allocator",
          "parameters": [],
          "return_type": "AccountingAllocator*",
          "logic": "Returns the accounting allocator associated with the pipeline data. Definition not in header."
        },
        {
          "name": "zone_stats",
          "parameters": [],
          "return_type": "ZoneStats*",
          "logic": "Returns the ZoneStats object."
        },
        {
          "name": "pipeline_kind",
          "parameters": [],
          "return_type": "TurboshaftPipelineKind",
          "logic": "Returns the pipeline kind."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate object."
        },
        {
          "name": "info",
          "parameters": [],
          "return_type": "OptimizedCompilationInfo*",
          "logic": "Returns the OptimizedCompilationInfo object."
        },
        {
          "name": "debug_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the debug name of the compilation info."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Returns the JSHeapBroker object."
        },
        {
          "name": "depedencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the CompilationDependencies object."
        },
        {
          "name": "assembler_options",
          "parameters": [],
          "return_type": "const AssemblerOptions&",
          "logic": "Returns the assembler options."
        },
        {
          "name": "jump_optimization_info",
          "parameters": [],
          "return_type": "JumpOptimizationInfo*",
          "logic": "Returns the jump optimization info."
        },
        {
          "name": "builtin_call_descriptor",
          "parameters": [],
          "return_type": "const CallDescriptor*",
          "logic": "Returns the builtin call descriptor."
        },
        {
          "name": "bytecode_handler_data",
          "parameters": [],
          "return_type": "std::optional<BytecodeHandlerData>&",
          "logic": "Returns a reference to the optional bytecode handler data."
        },
        {
          "name": "has_graph",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the pipeline data has a graph."
        },
        {
          "name": "graph_zone",
          "parameters": [],
          "return_type": "ZoneWithName<kGraphZoneName>&",
          "logic": "Returns the graph zone."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "turboshaft::Graph&",
          "logic": "Returns the graph."
        },
        {
          "name": "source_positions",
          "parameters": [],
          "return_type": "GraphComponent::Pointer<SourcePositionTable>",
          "logic": "Returns the source position table."
        },
        {
          "name": "node_origins",
          "parameters": [],
          "return_type": "GraphComponent::Pointer<NodeOriginTable>",
          "logic": "Returns the node origins table."
        },
        {
          "name": "register_allocation_data",
          "parameters": [],
          "return_type": "RegisterAllocationData*",
          "logic": "Returns the register allocation data."
        },
        {
          "name": "register_allocation_zone",
          "parameters": [],
          "return_type": "ZoneWithName<kRegisterAllocationZoneName>&",
          "logic": "Returns the register allocation zone."
        },
        {
          "name": "code_generator",
          "parameters": [],
          "return_type": "CodeGenerator*",
          "logic": "Returns the code generator."
        },
        {
          "name": "set_code",
          "parameters": [
            "MaybeIndirectHandle<Code> code"
          ],
          "return_type": "void",
          "logic": "Sets the generated code."
        },
        {
          "name": "code",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<Code>",
          "logic": "Returns the generated code."
        },
        {
          "name": "sequence",
          "parameters": [],
          "return_type": "InstructionSequence*",
          "logic": "Returns the instruction sequence."
        },
        {
          "name": "frame",
          "parameters": [],
          "return_type": "Frame*",
          "logic": "Returns the frame."
        },
        {
          "name": "GetCodeTracer",
          "parameters": [],
          "return_type": "CodeTracer*",
          "logic": "Returns the CodeTracer. Definition not in header."
        },
        {
          "name": "max_unoptimized_frame_height",
          "parameters": [],
          "return_type": "size_t&",
          "logic": "Returns a reference to the maximum unoptimized frame height."
        },
        {
          "name": "max_pushed_argument_count",
          "parameters": [],
          "return_type": "size_t&",
          "logic": "Returns a reference to the maximum pushed argument count."
        },
        {
          "name": "runtime_call_stats",
          "parameters": [],
          "return_type": "RuntimeCallStats*",
          "logic": "Returns the runtime call stats."
        },
        {
          "name": "set_runtime_call_stats",
          "parameters": [
            "RuntimeCallStats* stats"
          ],
          "return_type": "void",
          "logic": "Sets the runtime call stats."
        },
        {
          "name": "compilation_zone",
          "parameters": [],
          "return_type": "ZoneWithName<kCompilationZoneName>&",
          "logic": "Returns the compilation zone."
        },
        {
          "name": "pipeline_statistics",
          "parameters": [],
          "return_type": "TurbofanPipelineStatistics*",
          "logic": "Returns the pipeline statistics."
        },
        {
          "name": "set_pipeline_statistics",
          "parameters": [
            "TurbofanPipelineStatistics* pipeline_statistics"
          ],
          "return_type": "void",
          "logic": "Sets the pipeline statistics."
        },
        {
          "name": "wasm_module_sig",
          "parameters": [],
          "return_type": "const wasm::FunctionSig*",
          "logic": "Returns the WebAssembly module signature.  Only valid when compiling WebAssembly."
        },
        {
          "name": "wasm_canonical_sig",
          "parameters": [],
          "return_type": "const wasm::CanonicalSig*",
          "logic": "Returns the canonicalized WebAssembly signature.  Only valid when compiling WebAssembly."
        },
        {
          "name": "wasm_module",
          "parameters": [],
          "return_type": "const wasm::WasmModule*",
          "logic": "Returns the WebAssembly module. Only valid when compiling WebAssembly."
        },
        {
          "name": "wasm_shared",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the WebAssembly compilation is shared."
        },
        {
          "name": "SetIsWasmFunction",
          "parameters": [
            "const wasm::WasmModule* module",
            "const wasm::FunctionSig* sig",
            "bool shared"
          ],
          "return_type": "void",
          "logic": "Sets the function as a WebAssembly function with the provided module, signature, and shared flag."
        },
        {
          "name": "SetIsWasmWrapper",
          "parameters": [
            "const wasm::CanonicalSig* sig"
          ],
          "return_type": "void",
          "logic": "Sets the compilation as a WebAssembly wrapper."
        },
        {
          "name": "wasm_revec_analyzer",
          "parameters": [],
          "return_type": "WasmRevecAnalyzer*",
          "logic": "Returns the WebAssembly Revec Analyzer."
        },
        {
          "name": "set_wasm_revec_analyzer",
          "parameters": [
            "WasmRevecAnalyzer* wasm_revec_analyzer"
          ],
          "return_type": "void",
          "logic": "Sets the WebAssembly Revec Analyzer."
        },
        {
          "name": "clear_wasm_revec_analyzer",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the WebAssembly Revec Analyzer."
        },
        {
          "name": "wasm_shuffle_analyzer",
          "parameters": [],
          "return_type": "WasmShuffleAnalyzer*",
          "logic": "Returns the WebAssembly Shuffle Analyzer."
        },
        {
          "name": "set_wasm_shuffle_analyzer",
          "parameters": [
            "WasmShuffleAnalyzer* wasm_shuffle_analyzer"
          ],
          "return_type": "void",
          "logic": "Sets the WebAssembly Shuffle Analyzer."
        },
        {
          "name": "clear_wasm_shuffle_analyzer",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the WebAssembly Shuffle Analyzer."
        },
        {
          "name": "is_wasm",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the pipeline is compiling WebAssembly."
        },
        {
          "name": "is_js_to_wasm",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the pipeline is for compiling JavaScript to WebAssembly."
        },
        {
          "name": "InitializeFrameData",
          "parameters": [
            "CallDescriptor* call_descriptor"
          ],
          "return_type": "void",
          "logic": "Initializes frame related data. Creates a new frame based on the provided CallDescriptor."
        },
        {
          "name": "set_source_position_output",
          "parameters": [
            "std::string source_position_output"
          ],
          "return_type": "void",
          "logic": "Sets the source position output string."
        },
        {
          "name": "source_position_output",
          "parameters": [],
          "return_type": "std::string",
          "logic": "Returns the source position output string."
        },
        {
          "name": "graph_has_special_rpo",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the graph has a special RPO (Reverse Postorder) traversal."
        },
        {
          "name": "set_graph_has_special_rpo",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the flag indicating that the graph has a special RPO traversal."
        },
        {
          "name": "graph_has_lowered_fast_api_calls",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the graph has lowered fast api calls."
        },
        {
          "name": "set_graph_has_lowered_fast_api_calls",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the flag indicating that the graph has lowered fast api calls."
        }
      ]
    },
    {
      "name": "HasProperRunMethod",
      "properties": [],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "PrintTurboshaftGraph",
      "parameters": [
        "PipelineData* data",
        "Zone* temp_zone",
        "CodeTracer* code_tracer",
        "const char* phase_name"
      ],
      "return_type": "void",
      "logic": "Prints the Turboshaft graph to the CodeTracer for debugging purposes."
    },
    {
      "name": "PrintTurboshaftGraphForTurbolizer",
      "parameters": [
        "std::ofstream& stream",
        "const Graph& graph",
        "const char* phase_name",
        "NodeOriginTable* node_origins",
        "Zone* temp_zone"
      ],
      "return_type": "void",
      "logic": "Prints the Turboshaft graph to a stream in a format suitable for the Turbolizer visualization tool."
    }
  ]
}