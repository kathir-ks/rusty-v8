{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/store-store-elimination-reducer-inl.h",
  "imports": [
    "<optional>",
    "src/compiler/turboshaft/assembler.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/sidetable.h",
    "src/compiler/turboshaft/snapshot-table.h",
    "src/compiler/turboshaft/uniform-reducer-adapter.h",
    "src/heap/heap-layout-inl.h",
    "src/objects/heap-object-inl.h",
    "src/compiler/turboshaft/define-assembler-macros.inc",
    "src/compiler/turboshaft/undef-assembler-macros.inc"
  ],
  "classes": [
    {
      "name": "MaybeRedundantStoresTable",
      "properties": [
        "graph_",
        "block_to_snapshot_mapping_",
        "key_mapping_",
        "active_keys_",
        "current_block_",
        "successor_snapshots_"
      ],
      "methods": [
        {
          "name": "MaybeRedundantStoresTable",
          "parameters": [
            "const Graph& graph",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the MaybeRedundantStoresTable. Initializes the sidetable, graph, and other internal data structures."
        },
        {
          "name": "OnNewKey",
          "parameters": [
            "Key key",
            "StoreObservability value"
          ],
          "return_type": "void",
          "logic": "Called when a new key is added to the table, marking it as observable."
        },
        {
          "name": "OnValueChange",
          "parameters": [
            "Key key",
            "StoreObservability old_value",
            "StoreObservability new_value"
          ],
          "return_type": "void",
          "logic": "Called when the value associated with a key changes in the table. Updates the active_keys set based on observability."
        },
        {
          "name": "BeginBlock",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "void",
          "logic": "Begins processing a new block, merging information from successor blocks into a new snapshot."
        },
        {
          "name": "GetObservability",
          "parameters": [
            "OpIndex base",
            "int32_t offset",
            "uint8_t size"
          ],
          "return_type": "StoreObservability",
          "logic": "Retrieves the observability status of a store based on its base, offset, and size."
        },
        {
          "name": "MarkStoreAsUnobservable",
          "parameters": [
            "OpIndex base",
            "int32_t offset",
            "uint8_t size"
          ],
          "return_type": "void",
          "logic": "Marks a store as unobservable in the table."
        },
        {
          "name": "MarkPotentiallyAliasingStoresAsObservable",
          "parameters": [
            "OpIndex base",
            "int32_t offset"
          ],
          "return_type": "void",
          "logic": "Marks all stores with a matching offset as observable, as they might alias."
        },
        {
          "name": "MarkAllStoresAsObservable",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks all stores in the table as observable."
        },
        {
          "name": "MarkAllStoresAsGCObservable",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks all unobservable stores as GC observable."
        },
        {
          "name": "Seal",
          "parameters": [
            "bool* snapshot_has_changed = nullptr"
          ],
          "return_type": "void",
          "logic": "Seals the current snapshot, finalizing the block's state and merging with the previous snapshot for loop headers."
        },
        {
          "name": "Print",
          "parameters": [
            "std::ostream& os",
            "const char* sep = \"\\n\""
          ],
          "return_type": "void",
          "logic": "Prints the contents of the active keys in the table for debugging purposes."
        }
      ]
    },
    {
      "name": "RedundantStoreAnalysis",
      "properties": [
        "graph_",
        "table_",
        "eliminable_stores_",
        "mergeable_store_pairs_",
        "last_field_initialization_store_"
      ],
      "methods": [
        {
          "name": "RedundantStoreAnalysis",
          "parameters": [
            "const Graph& graph",
            "Zone* phase_zone"
          ],
          "return_type": "RedundantStoreAnalysis",
          "logic": "Constructor for the RedundantStoreAnalysis class. Initializes the graph and store table."
        },
        {
          "name": "Run",
          "parameters": [
            "ZoneSet<OpIndex>& eliminable_stores",
            "ZoneMap<OpIndex, uint64_t>& mergeable_store_pairs"
          ],
          "return_type": "void",
          "logic": "Runs the redundant store analysis, identifying and marking eliminable stores and potential mergeable store pairs."
        },
        {
          "name": "ProcessBlock",
          "parameters": [
            "const Block& block"
          ],
          "return_type": "void",
          "logic": "Processes a single block, iterating through the operations and updating the store observability table."
        }
      ]
    },
    {
      "name": "StoreStoreEliminationReducer",
      "properties": [
        "analysis_",
        "eliminable_stores_",
        "mergeable_store_pairs_"
      ],
      "methods": [
        {
          "name": "Analyze",
          "parameters": [],
          "return_type": "void",
          "logic": "Runs the redundant store analysis and then calls the base class's Analyze method."
        },
        {
          "name": "REDUCE_INPUT_GRAPH(Store)",
          "parameters": [
            "OpIndex ig_index",
            "const StoreOp& store"
          ],
          "return_type": "OpIndex",
          "logic": "Reduces the input graph by eliminating redundant stores and merging consecutive 32-bit stores into a 64-bit store when possible."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "StoreObservability observability"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for StoreObservability enum to print the enum value as a string."
    }
  ]
}