{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/control-equivalence.cc",
  "imports": [
    "src/compiler/control-equivalence.h",
    "src/compiler/node-properties.h"
  ],
  "classes": [
    {
      "name": "ControlEquivalence",
      "properties": [
        "kInvalidClass"
      ],
      "methods": [
        {
          "name": "Run",
          "parameters": [
            "Node* exit"
          ],
          "return_type": "void",
          "logic": "Starts the control equivalence analysis from a given exit node. It checks if the exit node participates and belongs to a valid class. If not, it determines participation and runs an undirected DFS traversal to assign equivalence classes."
        },
        {
          "name": "VisitPre",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Visits a node before processing its inputs and uses (pre-order DFS). It currently only traces the visit."
        },
        {
          "name": "VisitMid",
          "parameters": [
            "Node* node",
            "DFSDirection direction"
          ],
          "return_type": "void",
          "logic": "Visits a node after processing its inputs but before processing its uses.  Removes brackets pointing to this node. If the bracket list is empty, it introduces an artificial dependency. It potentially starts a new equivalence class and assigns an equivalence class to the node."
        },
        {
          "name": "VisitPost",
          "parameters": [
            "Node* node",
            "Node* parent_node",
            "DFSDirection direction"
          ],
          "return_type": "void",
          "logic": "Visits a node after processing all its inputs and uses (post-order DFS). Removes brackets pointing to this node. Propagates the bracket list up the DFS tree to the parent node."
        },
        {
          "name": "VisitBackedge",
          "parameters": [
            "Node* from",
            "Node* to",
            "DFSDirection direction"
          ],
          "return_type": "void",
          "logic": "Handles backedges in the control flow graph. It pushes the backedge onto the bracket list of the 'from' node."
        },
        {
          "name": "RunUndirectedDFS",
          "parameters": [
            "Node* exit"
          ],
          "return_type": "void",
          "logic": "Performs an undirected depth-first search (DFS) traversal of the control flow graph, starting from the given exit node. It uses a stack to keep track of nodes to visit and determines the equivalence classes of control nodes."
        },
        {
          "name": "DetermineParticipationEnqueue",
          "parameters": [
            "ZoneQueue<Node*>& queue",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Enqueues a node into the participation queue if the node does not already participate."
        },
        {
          "name": "DetermineParticipation",
          "parameters": [
            "Node* exit"
          ],
          "return_type": "void",
          "logic": "Determines the participation of control nodes in the control equivalence analysis using a breadth-first search (BFS) traversal, starting from the given exit node."
        },
        {
          "name": "DFSPush",
          "parameters": [
            "DFSStack& stack",
            "Node* node",
            "Node* from",
            "DFSDirection dir"
          ],
          "return_type": "void",
          "logic": "Pushes a node onto the DFS stack, marking it as being on the stack and initializing its input and use edge iterators."
        },
        {
          "name": "DFSPop",
          "parameters": [
            "DFSStack& stack",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Pops a node from the DFS stack, marking it as visited and no longer on the stack."
        },
        {
          "name": "BracketListDelete",
          "parameters": [
            "BracketList& blist",
            "Node* to",
            "DFSDirection direction"
          ],
          "return_type": "void",
          "logic": "Deletes brackets from the bracket list that point to the given node with an opposite direction."
        },
        {
          "name": "BracketListTRACE",
          "parameters": [
            "BracketList& blist"
          ],
          "return_type": "void",
          "logic": "Traces the contents of the bracket list for debugging purposes (if the trace flag is enabled)."
        }
      ]
    }
  ],
  "functions": []
}