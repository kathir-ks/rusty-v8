{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/access-info.cc",
  "imports": [
    "src/compiler/access-info.h",
    "<optional>",
    "<ostream>",
    "src/builtins/accessors.h",
    "src/compiler/compilation-dependencies.h",
    "src/compiler/heap-refs.h",
    "src/compiler/js-heap-broker-inl.h",
    "src/compiler/simplified-operator.h",
    "src/compiler/type-cache.h",
    "src/ic/call-optimization.h",
    "src/objects/cell-inl.h",
    "src/objects/elements-kind.h",
    "src/objects/field-index-inl.h",
    "src/objects/field-type.h",
    "src/objects/instance-type-inl.h",
    "src/objects/objects-inl.h",
    "src/objects/property-details.h",
    "src/objects/struct-inl.h",
    "src/objects/templates.h"
  ],
  "classes": [
    {
      "name": "ElementAccessInfo",
      "properties": [
        "elements_kind_",
        "lookup_start_object_maps_",
        "transition_sources_"
      ],
      "methods": [
        {
          "name": "ElementAccessInfo",
          "parameters": [
            "ZoneVector<MapRef>&& lookup_start_object_maps",
            "ElementsKind elements_kind",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for ElementAccessInfo. Initializes the object with the provided lookup start maps, elements kind, and zone."
        },
        {
          "name": "AddTransitionSource",
          "parameters": [
            "MapRef map"
          ],
          "return_type": "void",
          "logic": "Adds a map to the transition sources vector."
        }
      ]
    },
    {
      "name": "PropertyAccessInfo",
      "properties": [
        "kind_",
        "lookup_start_object_maps_",
        "holder_",
        "constant_",
        "api_holder_",
        "unrecorded_dependencies_",
        "transition_map_",
        "field_index_",
        "field_representation_",
        "field_type_",
        "field_owner_map_",
        "field_map_",
        "dictionary_index_",
        "name_",
        "elements_kind_"
      ],
      "methods": [
        {
          "name": "Invalid",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns an invalid PropertyAccessInfo object."
        },
        {
          "name": "NotFound",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map",
            "OptionalJSObjectRef holder"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo indicating that the property was not found."
        },
        {
          "name": "DataField",
          "parameters": [
            "JSHeapBroker* broker",
            "Zone* zone",
            "MapRef receiver_map",
            "ZoneVector<CompilationDependency const*>&& dependencies",
            "FieldIndex field_index",
            "Representation field_representation",
            "Type field_type",
            "MapRef field_owner_map",
            "OptionalMapRef field_map",
            "OptionalJSObjectRef holder",
            "OptionalMapRef transition_map"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing access to a data field."
        },
        {
          "name": "FastDataConstant",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map",
            "ZoneVector<CompilationDependency const*>&& dependencies",
            "FieldIndex field_index",
            "Representation field_representation",
            "Type field_type",
            "MapRef field_owner_map",
            "OptionalMapRef field_map",
            "OptionalJSObjectRef holder",
            "OptionalMapRef transition_map"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing access to a fast data constant."
        },
        {
          "name": "FastAccessorConstant",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map",
            "OptionalJSObjectRef holder",
            "OptionalObjectRef constant",
            "OptionalJSObjectRef api_holder"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing access to a fast accessor constant."
        },
        {
          "name": "ModuleExport",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map",
            "CellRef cell"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing a module export."
        },
        {
          "name": "StringLength",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing the string length property."
        },
        {
          "name": "StringWrapperLength",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing the string wrapper length property."
        },
        {
          "name": "TypedArrayLength",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing the typed array length property."
        },
        {
          "name": "DictionaryProtoDataConstant",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map",
            "JSObjectRef holder",
            "InternalIndex dictionary_index",
            "NameRef name"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing a dictionary prototype data constant."
        },
        {
          "name": "DictionaryProtoAccessorConstant",
          "parameters": [
            "Zone* zone",
            "MapRef receiver_map",
            "OptionalJSObjectRef holder",
            "ObjectRef constant",
            "OptionalJSObjectRef api_holder",
            "NameRef property_name"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Returns a PropertyAccessInfo representing a dictionary prototype accessor constant."
        },
        {
          "name": "PropertyAccessInfo",
          "parameters": [
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Default constructor for PropertyAccessInfo. Initializes to an invalid state."
        },
        {
          "name": "PropertyAccessInfo",
          "parameters": [
            "Zone* zone",
            "Kind kind",
            "OptionalJSObjectRef holder",
            "ZoneVector<MapRef>&& lookup_start_object_maps"
          ],
          "return_type": "void",
          "logic": "Constructor for PropertyAccessInfo. Initializes the object with the provided kind, holder, and lookup start maps."
        },
        {
          "name": "PropertyAccessInfo",
          "parameters": [
            "Zone* zone",
            "Kind kind",
            "OptionalJSObjectRef holder",
            "OptionalObjectRef constant",
            "OptionalJSObjectRef api_holder",
            "OptionalNameRef name",
            "ZoneVector<MapRef>&& lookup_start_object_maps"
          ],
          "return_type": "void",
          "logic": "Constructor for PropertyAccessInfo. Initializes the object with the provided kind, holder, constant, api_holder, name, and lookup start maps."
        },
        {
          "name": "PropertyAccessInfo",
          "parameters": [
            "Kind kind",
            "OptionalJSObjectRef holder",
            "OptionalMapRef transition_map",
            "FieldIndex field_index",
            "Representation field_representation",
            "Type field_type",
            "MapRef field_owner_map",
            "OptionalMapRef field_map",
            "ZoneVector<MapRef>&& lookup_start_object_maps",
            "ZoneVector<CompilationDependency const*>&& unrecorded_dependencies"
          ],
          "return_type": "void",
          "logic": "Constructor for PropertyAccessInfo. Initializes the object with the provided kind, holder, transition map, field index, field representation, field type, field owner map, field map, lookup start maps, and unrecorded dependencies."
        },
        {
          "name": "PropertyAccessInfo",
          "parameters": [
            "Zone* zone",
            "Kind kind",
            "OptionalJSObjectRef holder",
            "ZoneVector<MapRef>&& lookup_start_object_maps",
            "InternalIndex dictionary_index",
            "NameRef name"
          ],
          "return_type": "void",
          "logic": "Constructor for PropertyAccessInfo. Initializes the object with the provided kind, holder, lookup start maps, dictionary index, and name."
        },
        {
          "name": "Merge",
          "parameters": [
            "PropertyAccessInfo const* that",
            "AccessMode access_mode",
            "Zone* zone"
          ],
          "return_type": "bool",
          "logic": "Merges the current PropertyAccessInfo with another PropertyAccessInfo if they are compatible, based on the access mode. Returns true if merged, false otherwise."
        },
        {
          "name": "GetConstFieldInfo",
          "parameters": [],
          "return_type": "ConstFieldInfo",
          "logic": "Returns a ConstFieldInfo object if the PropertyAccessInfo represents a fast data constant, otherwise returns ConstFieldInfo::None()."
        },
        {
          "name": "RecordDependencies",
          "parameters": [
            "CompilationDependencies* dependencies"
          ],
          "return_type": "void",
          "logic": "Records the unrecorded dependencies in the compilation dependencies object and clears the unrecorded dependencies."
        },
        {
          "name": "set_elements_kind",
          "parameters": [
            "ElementsKind elements_kind"
          ],
          "return_type": "void",
          "logic": "Sets the elements_kind_ property."
        },
        {
          "name": "IsInvalid",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if kind_ == kInvalid"
        },
        {
          "name": "IsFastDataConstant",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if kind_ == kFastDataConstant"
        }
      ]
    },
    {
      "name": "AccessInfoFactory",
      "properties": [
        "broker_",
        "type_cache_",
        "zone_"
      ],
      "methods": [
        {
          "name": "AccessInfoFactory",
          "parameters": [
            "JSHeapBroker* broker",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Constructor for AccessInfoFactory. Initializes the object with the provided JSHeapBroker and zone."
        },
        {
          "name": "ComputeElementAccessInfo",
          "parameters": [
            "MapRef map",
            "AccessMode access_mode"
          ],
          "return_type": "std::optional<ElementAccessInfo>",
          "logic": "Computes element access info for a given map and access mode. Returns an optional ElementAccessInfo."
        },
        {
          "name": "ComputeElementAccessInfos",
          "parameters": [
            "ElementAccessFeedback const& feedback",
            "ZoneVector<ElementAccessInfo>* access_infos"
          ],
          "return_type": "bool",
          "logic": "Computes element access infos based on feedback. Returns true if successful, false otherwise."
        },
        {
          "name": "ComputeDataFieldAccessInfo",
          "parameters": [
            "MapRef receiver_map",
            "MapRef map",
            "NameRef name",
            "OptionalJSObjectRef holder",
            "InternalIndex descriptor",
            "AccessMode access_mode"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Computes property access info for accessing a data field."
        },
        {
          "name": "ComputeAccessorDescriptorAccessInfo",
          "parameters": [
            "MapRef receiver_map",
            "NameRef name",
            "MapRef holder_map",
            "OptionalJSObjectRef holder",
            "InternalIndex descriptor",
            "AccessMode access_mode"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Computes property access info for accessing an accessor descriptor."
        },
        {
          "name": "ComputeDictionaryProtoAccessInfo",
          "parameters": [
            "MapRef receiver_map",
            "NameRef name",
            "JSObjectRef holder",
            "InternalIndex dictionary_index",
            "AccessMode access_mode",
            "PropertyDetails details"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Computes property access info for accessing a dictionary prototype property."
        },
        {
          "name": "TryLoadPropertyDetails",
          "parameters": [
            "MapRef map",
            "OptionalJSObjectRef maybe_holder",
            "NameRef name",
            "InternalIndex* index_out",
            "PropertyDetails* details_out"
          ],
          "return_type": "bool",
          "logic": "Tries to load the property details for a given map, name, and holder. Returns true if successful, false otherwise."
        },
        {
          "name": "ComputePropertyAccessInfo",
          "parameters": [
            "MapRef map",
            "NameRef name",
            "AccessMode access_mode"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Computes property access info for a given map, name, and access mode."
        },
        {
          "name": "FinalizePropertyAccessInfosAsOne",
          "parameters": [
            "ZoneVector<PropertyAccessInfo> access_infos",
            "AccessMode access_mode"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Finalizes the given vector of PropertyAccessInfo, merging compatible infos and recording dependencies"
        },
        {
          "name": "FinalizePropertyAccessInfos",
          "parameters": [
            "ZoneVector<PropertyAccessInfo> access_infos",
            "AccessMode access_mode",
            "ZoneVector<PropertyAccessInfo>* result"
          ],
          "return_type": "bool",
          "logic": "Finalizes the given vector of PropertyAccessInfo, merging compatible infos and recording dependencies"
        },
        {
          "name": "MergePropertyAccessInfos",
          "parameters": [
            "ZoneVector<PropertyAccessInfo> infos",
            "AccessMode access_mode",
            "ZoneVector<PropertyAccessInfo>* result"
          ],
          "return_type": "void",
          "logic": "Merges compatible PropertyAccessInfo objects in the given input vector into a single result vector"
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the CompilationDependencies object from the JSHeapBroker."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate object from the JSHeapBroker."
        },
        {
          "name": "ConsolidateElementLoad",
          "parameters": [
            "ElementAccessFeedback const& feedback"
          ],
          "return_type": "std::optional<ElementAccessInfo>",
          "logic": "Consolidates element load operations based on the provided feedback."
        },
        {
          "name": "LookupSpecialFieldAccessor",
          "parameters": [
            "MapRef map",
            "NameRef name"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Looks up special field accessors like String::length or JSArray::length."
        },
        {
          "name": "LookupTransition",
          "parameters": [
            "MapRef map",
            "NameRef name",
            "OptionalJSObjectRef holder",
            "PropertyAttributes attrs"
          ],
          "return_type": "PropertyAccessInfo",
          "logic": "Looks up a transition for a given map and name."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "CanInlinePropertyAccess",
      "parameters": [
        "MapRef map",
        "AccessMode access_mode"
      ],
      "return_type": "bool",
      "logic": "Determines if property access can be inlined for a given map and access mode."
    },
    {
      "name": "HasFieldRepresentationDependenciesOnMap",
      "parameters": [
        "ZoneVector<CompilationDependency const*>& dependencies",
        "Handle<Map> const& field_owner_map"
      ],
      "return_type": "bool",
      "logic": "Checks if there are any field representation dependencies on the specified map in the given dependency list."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "AccessMode access_mode"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for AccessMode to provide a string representation."
    },
    {
      "name": "OptionalRefEquals",
      "parameters": [
        "OptionalRef<RefT> lhs",
        "OptionalRef<RefT> rhs"
      ],
      "return_type": "bool",
      "logic": "Compares two optional references for equality."
    },
    {
      "name": "AppendVector",
      "parameters": [
        "ZoneVector<T>* dst",
        "const ZoneVector<T>& src"
      ],
      "return_type": "void",
      "logic": "Appends the elements of src to dst"
    },
    {
      "name": "AccessorAccessInfoHelper",
      "parameters": [
        "Isolate* isolate",
        "Zone* zone",
        "JSHeapBroker* broker",
        "const AccessInfoFactory* ai_factory",
        "MapRef receiver_map",
        "NameRef name",
        "MapRef holder_map",
        "OptionalJSObjectRef holder",
        "AccessMode access_mode",
        "AccessorsObjectGetter get_accessors"
      ],
      "return_type": "PropertyAccessInfo",
      "logic": "Helper function to compute accessor access information."
    },
    {
      "name": "GeneralizeElementsKind",
      "parameters": [
        "ElementsKind this_kind",
        "ElementsKind that_kind"
      ],
      "return_type": "Maybe<ElementsKind>",
      "logic": "Attempts to find a more general elements kind for two given kinds."
    }
  ]
}