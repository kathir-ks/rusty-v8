{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/schedule.cc",
  "imports": [
    "src/compiler/schedule.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/utils/ostreams.h"
  ],
  "classes": [
    {
      "name": "BasicBlock",
      "properties": [
        "loop_number_",
        "rpo_number_",
        "deferred_",
        "dominator_depth_",
        "dominator_",
        "rpo_next_",
        "loop_header_",
        "loop_end_",
        "loop_depth_",
        "control_",
        "control_input_",
        "nodes_",
        "successors_",
        "predecessors_",
        "debug_info_",
        "pgo_execution_count_",
        "id_"
      ],
      "methods": [
        {
          "name": "BasicBlock",
          "parameters": [
            "Zone* zone",
            "Id id"
          ],
          "return_type": "void",
          "logic": "Constructor for the BasicBlock class. Initializes various properties, including loop number, RPO number, deferred status, dominator information, control flow information, node lists, and ID."
        },
        {
          "name": "LoopContains",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "bool",
          "logic": "Checks if a given block is contained within the loop represented by this basic block.  Uses RPO numbering to determine containment."
        },
        {
          "name": "AddSuccessor",
          "parameters": [
            "BasicBlock* successor"
          ],
          "return_type": "void",
          "logic": "Adds a successor block to the current block's successor list."
        },
        {
          "name": "AddPredecessor",
          "parameters": [
            "BasicBlock* predecessor"
          ],
          "return_type": "void",
          "logic": "Adds a predecessor block to the current block's predecessor list."
        },
        {
          "name": "RemovePredecessor",
          "parameters": [
            "size_t index"
          ],
          "return_type": "void",
          "logic": "Removes a predecessor at a specific index from the predecessor list."
        },
        {
          "name": "AddNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the current block's list of nodes."
        },
        {
          "name": "set_control",
          "parameters": [
            "Control control"
          ],
          "return_type": "void",
          "logic": "Sets the control type of the block (e.g., kGoto, kBranch)."
        },
        {
          "name": "set_control_input",
          "parameters": [
            "Node* control_input"
          ],
          "return_type": "void",
          "logic": "Sets the control input node of the block.  If the control input is the last node in the block, removes it from the node list."
        },
        {
          "name": "set_loop_depth",
          "parameters": [
            "int32_t loop_depth"
          ],
          "return_type": "void",
          "logic": "Sets the loop depth of the block."
        },
        {
          "name": "set_rpo_number",
          "parameters": [
            "int32_t rpo_number"
          ],
          "return_type": "void",
          "logic": "Sets the reverse postorder (RPO) number of the block."
        },
        {
          "name": "set_loop_end",
          "parameters": [
            "BasicBlock* loop_end"
          ],
          "return_type": "void",
          "logic": "Sets the loop end block for the current block, indicating the end of a loop."
        },
        {
          "name": "set_loop_header",
          "parameters": [
            "BasicBlock* loop_header"
          ],
          "return_type": "void",
          "logic": "Sets the loop header block for the current block, indicating the start of a loop."
        },
        {
          "name": "TrimNodes",
          "parameters": [
            "iterator new_end"
          ],
          "return_type": "void",
          "logic": "Erases nodes from the end of the node list up to the given iterator."
        },
        {
          "name": "ResetRPOInfo",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets all RPO-related information (loop number, RPO number, dominator depth, dominator, etc.) to their initial states."
        },
        {
          "name": "GetCommonDominator",
          "parameters": [
            "BasicBlock* b1",
            "BasicBlock* b2"
          ],
          "return_type": "BasicBlock*",
          "logic": "A static method to find the common dominator between two basic blocks by traversing their dominator trees upward until they converge."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the basic block's information to the standard output stream using the overloaded operator<<."
        }
      ]
    },
    {
      "name": "Schedule",
      "properties": [
        "zone_",
        "all_blocks_",
        "nodeid_to_block_",
        "rpo_order_",
        "start_",
        "end_"
      ],
      "methods": [
        {
          "name": "Schedule",
          "parameters": [
            "Zone* zone",
            "size_t node_count_hint"
          ],
          "return_type": "void",
          "logic": "Constructor for the Schedule class. Allocates the starting and ending basic blocks."
        },
        {
          "name": "block",
          "parameters": [
            "Node* node"
          ],
          "return_type": "BasicBlock*",
          "logic": "Returns the BasicBlock associated with a given Node, based on the node's ID."
        },
        {
          "name": "IsScheduled",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node has already been assigned to a basic block in the schedule."
        },
        {
          "name": "GetBlockById",
          "parameters": [
            "BasicBlock::Id block_id"
          ],
          "return_type": "BasicBlock*",
          "logic": "Retrieves a BasicBlock from the list of all blocks, using its ID."
        },
        {
          "name": "ClearBlockById",
          "parameters": [
            "BasicBlock::Id block_id"
          ],
          "return_type": "void",
          "logic": "Clears a BasicBlock from the list of all blocks, using its ID. Effectively removes the block."
        },
        {
          "name": "SameBasicBlock",
          "parameters": [
            "Node* a",
            "Node* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two nodes are in the same basic block."
        },
        {
          "name": "NewBasicBlock",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Creates a new BasicBlock and adds it to the list of all blocks."
        },
        {
          "name": "PlanNode",
          "parameters": [
            "BasicBlock* block",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Plans where to place a node without immediately adding it to the block."
        },
        {
          "name": "AddNode",
          "parameters": [
            "BasicBlock* block",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to a basic block and updates the node-to-block mapping."
        },
        {
          "name": "AddGoto",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* succ"
          ],
          "return_type": "void",
          "logic": "Adds a GOTO control flow edge between two basic blocks."
        },
        {
          "name": "AddCall",
          "parameters": [
            "BasicBlock* block",
            "Node* call",
            "BasicBlock* success_block",
            "BasicBlock* exception_block"
          ],
          "return_type": "void",
          "logic": "Adds a CALL control flow edge with potential exception handling."
        },
        {
          "name": "AddBranch",
          "parameters": [
            "BasicBlock* block",
            "Node* branch",
            "BasicBlock* tblock",
            "BasicBlock* fblock"
          ],
          "return_type": "void",
          "logic": "Adds a BRANCH control flow edge based on a boolean condition."
        },
        {
          "name": "AddSwitch",
          "parameters": [
            "BasicBlock* block",
            "Node* sw",
            "BasicBlock** succ_blocks",
            "size_t succ_count"
          ],
          "return_type": "void",
          "logic": "Adds a SWITCH control flow edge to multiple successor blocks."
        },
        {
          "name": "AddTailCall",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a TAILCALL control flow edge."
        },
        {
          "name": "AddReturn",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a RETURN control flow edge."
        },
        {
          "name": "AddDeoptimize",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a DEOPTIMIZE control flow edge."
        },
        {
          "name": "AddThrow",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a THROW control flow edge."
        },
        {
          "name": "InsertBranch",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* end",
            "Node* branch",
            "BasicBlock* tblock",
            "BasicBlock* fblock"
          ],
          "return_type": "void",
          "logic": "Inserts a branch instruction into existing control flow."
        },
        {
          "name": "InsertSwitch",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* end",
            "Node* sw",
            "BasicBlock** succ_blocks",
            "size_t succ_count"
          ],
          "return_type": "void",
          "logic": "Inserts a switch instruction into existing control flow."
        },
        {
          "name": "EnsureCFGWellFormedness",
          "parameters": [],
          "return_type": "void",
          "logic": "Ensures that the control flow graph (CFG) is well-formed by splitting critical edges and eliminating redundant phi nodes."
        },
        {
          "name": "EliminateRedundantPhiNodes",
          "parameters": [],
          "return_type": "void",
          "logic": "Removes phi nodes from the basic blocks when they are useless or redundant."
        },
        {
          "name": "EnsureSplitEdgeForm",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Splits edges in the control flow graph to ensure a well-formed structure. Called to remove critical edges."
        },
        {
          "name": "MovePhis",
          "parameters": [
            "BasicBlock* from",
            "BasicBlock* to"
          ],
          "return_type": "void",
          "logic": "Moves Phi nodes from one basic block to another. Used during CFG manipulation."
        },
        {
          "name": "PropagateDeferredMark",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks basic blocks as 'deferred' based on predecessors and RPO numbers."
        },
        {
          "name": "AddSuccessor",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* succ"
          ],
          "return_type": "void",
          "logic": "Adds a successor to a basic block, updating both the successor and predecessor lists."
        },
        {
          "name": "MoveSuccessors",
          "parameters": [
            "BasicBlock* from",
            "BasicBlock* to"
          ],
          "return_type": "void",
          "logic": "Moves all successors from one basic block to another."
        },
        {
          "name": "SetControlInput",
          "parameters": [
            "BasicBlock* block",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Sets the control input node for a basic block and updates the node-to-block mapping."
        },
        {
          "name": "SetBlockForNode",
          "parameters": [
            "BasicBlock* block",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Sets the basic block associated with a node, used to track the scheduling of nodes."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const BasicBlock& block"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for BasicBlock to allow printing of block information to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const BasicBlock::Control& c"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for BasicBlock::Control enum to allow printing of control types to an output stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "const BasicBlock::Id& id"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for BasicBlock::Id to allow printing of block IDs to an output stream."
    },
    {
      "name": "IsPotentiallyThrowingCall",
      "parameters": [
        "IrOpcode::Value opcode"
      ],
      "return_type": "bool",
      "logic": "Checks if a given IrOpcode is a JS call operation that could potentially throw an exception."
    }
  ]
}