{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/loop-finder.h",
  "imports": [
    "src/base/logging.h",
    "src/compiler/turboshaft/graph.h",
    "src/compiler/turboshaft/index.h",
    "src/compiler/turboshaft/operations.h"
  ],
  "classes": [
    {
      "name": "LoopFinder",
      "properties": [
        "phase_zone_",
        "input_graph_",
        "loop_headers_",
        "loop_header_info_",
        "queue_"
      ],
      "methods": [
        {
          "name": "LoopFinder",
          "parameters": [
            "Zone* phase_zone",
            "const Graph* input_graph"
          ],
          "return_type": "void",
          "logic": "Constructor for the LoopFinder class. It initializes the member variables and calls the Run() method to perform the loop analysis."
        },
        {
          "name": "LoopHeaders",
          "parameters": [],
          "return_type": "const ZoneUnorderedMap<const Block*, LoopInfo>&",
          "logic": "Returns the map of loop headers to their LoopInfo."
        },
        {
          "name": "GetLoopHeader",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "const Block*",
          "logic": "Returns the loop header of the closest enclosing loop for the given block. Returns nullptr if the block is not within a loop or the block is an outer loop."
        },
        {
          "name": "GetLoopInfo",
          "parameters": [
            "const Block* block"
          ],
          "return_type": "LoopInfo",
          "logic": "Returns the LoopInfo for a loop, given its loop header block. Asserts if the block is not a loop header or if the LoopInfo is not found."
        },
        {
          "name": "GetLoopBody",
          "parameters": [
            "const Block* loop_header"
          ],
          "return_type": "ZoneSet<const Block*, BlockCmp>",
          "logic": "Returns a set of blocks that are part of the loop defined by loop_header. The actual implementation is not in this header."
        },
        {
          "name": "Run",
          "parameters": [],
          "return_type": "void",
          "logic": "Performs the loop analysis by walking the graph backwards and calling VisitLoop for each loop header encountered."
        },
        {
          "name": "VisitLoop",
          "parameters": [
            "const Block* header"
          ],
          "return_type": "LoopInfo",
          "logic": "Visits all blocks within the given loop, marking them as part of the loop and updating the loop's LoopInfo."
        }
      ]
    },
    {
      "name": "LoopFinder::LoopInfo",
      "properties": [
        "start",
        "end",
        "has_inner_loops",
        "block_count",
        "op_count"
      ],
      "methods": []
    },
    {
      "name": "LoopFinder::BlockCmp",
      "properties": [],
      "methods": [
        {
          "name": "operator()",
          "parameters": [
            "const Block* a",
            "const Block* b"
          ],
          "return_type": "bool",
          "logic": "Compares two Block pointers based on their index. This comparator is used to create an ordered set of blocks."
        }
      ]
    }
  ],
  "functions": []
}