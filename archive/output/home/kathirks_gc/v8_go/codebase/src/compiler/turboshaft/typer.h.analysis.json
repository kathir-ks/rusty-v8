{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/typer.h",
  "imports": [
    "<limits>",
    "src/base/logging.h",
    "src/base/vector.h",
    "src/compiler/turboshaft/operations.h",
    "src/compiler/turboshaft/representations.h",
    "src/compiler/turboshaft/types.h"
  ],
  "classes": [
    {
      "name": "WordOperationTyper",
      "properties": [
        "word_t",
        "type_t",
        "ElementsVector",
        "max"
      ],
      "methods": [
        {
          "name": "FromElements",
          "parameters": [
            "ElementsVector elements",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Constructs a WordType from a vector of unique, sorted elements. If the number of elements is small enough, it creates a 'Set' type, otherwise it creates a 'Range' type, attempting to find the most reasonable range to represent the set."
        },
        {
          "name": "MakeRange",
          "parameters": [
            "const type_t& t"
          ],
          "return_type": "std::pair<word_t, word_t>",
          "logic": "Extracts the range (min, max) from a WordType. If it's a range type, it returns the range directly. If it's a set type, it computes a range that includes all elements in the set."
        },
        {
          "name": "MakeRange",
          "parameters": [
            "base::Vector<const word_t> elements"
          ],
          "return_type": "std::pair<word_t, word_t>",
          "logic": "Determines a range (min, max) for a set of sorted and unique elements. If the elements span more than half the range, it creates a wrapping range to capture gaps in the middle. It seeks to find a range which encapsulates all set elements using a heuristics that determines if wrapping would be more beneficial."
        },
        {
          "name": "distance",
          "parameters": [
            "const std::pair<word_t, word_t>& range"
          ],
          "return_type": "word_t",
          "logic": "Calculates the distance between two word_t values.  Handles wrapping ranges correctly."
        },
        {
          "name": "distance",
          "parameters": [
            "word_t from",
            "word_t to"
          ],
          "return_type": "word_t",
          "logic": "Calculates the distance between two word_t values.  Handles wrapping ranges correctly."
        },
        {
          "name": "is_wrapping",
          "parameters": [
            "const std::pair<word_t, word_t>& range"
          ],
          "return_type": "bool",
          "logic": "Checks if a range is wrapping (i.e., from > to)."
        },
        {
          "name": "is_wrapping",
          "parameters": [
            "word_t from",
            "word_t to"
          ],
          "return_type": "bool",
          "logic": "Checks if a range is wrapping (i.e., from > to)."
        },
        {
          "name": "Add",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Computes the type resulting from adding two WordTypes. If both inputs are small sets, it produces a set of all possible sums. Otherwise, it creates a range representing the sum of the ranges."
        },
        {
          "name": "Subtract",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Computes the type resulting from subtracting two WordTypes. If both inputs are small sets, it produces a set of all possible differences. Otherwise, it creates a range representing the subtraction of the ranges."
        },
        {
          "name": "UnsignedLessThan",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "Word32Type",
          "logic": "Determines the possible values (0 or 1) of an unsigned less-than comparison between two WordTypes."
        },
        {
          "name": "UnsignedLessThanOrEqual",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "Word32Type",
          "logic": "Determines the possible values (0 or 1) of an unsigned less-than-or-equal comparison between two WordTypes."
        },
        {
          "name": "RestrictionForUnsignedLessThan_True",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types (ranges) for lhs and rhs when the result of (lhs < rhs) is known to be true. It generates new ranges that reflect this information by restricting the values lhs and rhs can have to satisfy the condition."
        },
        {
          "name": "RestrictionForUnsignedLessThan_False",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types (ranges) for lhs and rhs when the result of (lhs < rhs) is known to be false. It generates new ranges that reflect this information by restricting the values lhs and rhs can have to satisfy the condition."
        },
        {
          "name": "RestrictionForUnsignedLessThanOrEqual_True",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types (ranges) for lhs and rhs when the result of (lhs <= rhs) is known to be true. It generates new ranges that reflect this information by restricting the values lhs and rhs can have to satisfy the condition."
        },
        {
          "name": "RestrictionForUnsignedLessThanOrEqual_False",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types (ranges) for lhs and rhs when the result of (lhs <= rhs) is known to be false. It generates new ranges that reflect this information by restricting the values lhs and rhs can have to satisfy the condition."
        },
        {
          "name": "WidenMaximal",
          "parameters": [
            "const type_t& old_type",
            "const type_t& new_type",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Widens a type by either setting the lower bound to 0 or the upper bound to max. Used during loop unrolling."
        },
        {
          "name": "WidenExponential",
          "parameters": [
            "const type_t& old_type",
            "type_t new_type",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Performs exponential widening to ensure the new type encompasses at least twice as many values as the old type.  Used to stabilize loop types."
        }
      ]
    },
    {
      "name": "FloatOperationTyper",
      "properties": [
        "float_t",
        "type_t",
        "inf",
        "kSetThreshold"
      ],
      "methods": [
        {
          "name": "Range",
          "parameters": [
            "float_t min",
            "float_t max",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Creates a FloatType representing a range of values between min and max, including specified special values (NaN, -0)."
        },
        {
          "name": "Set",
          "parameters": [
            "std::vector<float_t> elements",
            "uint32_t special_values",
            "Zone* zone"
          ],
          "return_type": "type_t",
          "logic": "Creates a FloatType representing a set of distinct float values and special values."
        },
        {
          "name": "IsIntegerSet",
          "parameters": [
            "const type_t& t"
          ],
          "return_type": "bool",
          "logic": "Checks whether all numerical values in a set-based FloatType are integers."
        },
        {
          "name": "IsZeroish",
          "parameters": [
            "const type_t& l"
          ],
          "return_type": "bool",
          "logic": "Checks if a FloatType contains zero, minus zero, or NaN."
        },
        {
          "name": "ProductSet",
          "parameters": [
            "const type_t& l",
            "const type_t& r",
            "uint32_t special_values",
            "Zone* zone",
            "std::function<float_t(float_t, float_t)> combine"
          ],
          "return_type": "Type",
          "logic": "Generates the 'product' set of two FloatTypes by applying a combine function to each element in both sets, returning a new FloatType. Returns Type::Invalid() if the resulting set is too large."
        },
        {
          "name": "Add",
          "parameters": [
            "type_t l",
            "type_t r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from adding two FloatTypes. Handles NaN and -0 correctly. If both inputs are sets, it uses `ProductSet`, otherwise it computes a range from the min/max values."
        },
        {
          "name": "Subtract",
          "parameters": [
            "type_t l",
            "type_t r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from subtracting two FloatTypes. Handles NaN and -0 correctly. If both inputs are sets, it uses `ProductSet`, otherwise it computes a range from the min/max values."
        },
        {
          "name": "Multiply",
          "parameters": [
            "type_t l",
            "type_t r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from multiplying two FloatTypes. Handles NaN, -0, and Infinity correctly. If both inputs are sets, it uses `ProductSet`, otherwise it computes a range from the min/max values."
        },
        {
          "name": "Divide",
          "parameters": [
            "const type_t& l",
            "const type_t& r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from dividing two FloatTypes. Handles NaN, -0, Infinity, and division by zero correctly. If both inputs are sets, it uses `ProductSet`, otherwise it attempts to compute a precise range based on the inputs' signs."
        },
        {
          "name": "Modulus",
          "parameters": [
            "type_t l",
            "type_t r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from modulus (%) operation on two FloatTypes. Special handling for NaN, -0, and integer inputs."
        },
        {
          "name": "Min",
          "parameters": [
            "type_t l",
            "type_t r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from the minimum of two FloatTypes. Handles NaN and -0 correctly."
        },
        {
          "name": "Max",
          "parameters": [
            "type_t l",
            "type_t r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from the maximum of two FloatTypes. Handles NaN and -0 correctly."
        },
        {
          "name": "Power",
          "parameters": [
            "const type_t& l",
            "const type_t& r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from exponentiation (l to the power of r). Handles NaN, 0, and integer exponents correctly."
        },
        {
          "name": "Atan2",
          "parameters": [
            "const type_t& l",
            "const type_t& r",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Computes the type resulting from the atan2 function. The current implementation is imprecise and returns Type::Any()."
        },
        {
          "name": "LessThan",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the possible values (0 or 1) of a less-than comparison between two FloatTypes, considering NaN."
        },
        {
          "name": "LessThanOrEqual",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the possible values (0 or 1) of a less-than-or-equal comparison between two FloatTypes, considering NaN."
        },
        {
          "name": "UnsignedLessThanOrEqual",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "Word32Type",
          "logic": "Determines the possible values (0 or 1) of an unsigned less-than-or-equal comparison between two FloatTypes."
        },
        {
          "name": "RestrictionForLessThan_True",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types for lhs and rhs after a less-than comparison is known to be true."
        },
        {
          "name": "RestrictionForLessThan_False",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types for lhs and rhs after a less-than comparison is known to be false."
        },
        {
          "name": "RestrictionForLessThanOrEqual_True",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types for lhs and rhs after a less-than-or-equal comparison is known to be true."
        },
        {
          "name": "RestrictionForLessThanOrEqual_False",
          "parameters": [
            "const type_t& lhs",
            "const type_t& rhs",
            "Zone* zone"
          ],
          "return_type": "std::pair<Type, Type>",
          "logic": "Computes the refined types for lhs and rhs after a less-than-or-equal comparison is known to be false."
        }
      ]
    },
    {
      "name": "Typer",
      "properties": [],
      "methods": [
        {
          "name": "TypeForRepresentation",
          "parameters": [
            "RegisterRepresentation rep"
          ],
          "return_type": "Type",
          "logic": "Determines the initial type for a given RegisterRepresentation."
        },
        {
          "name": "TypeForRepresentation",
          "parameters": [
            "base::Vector<const RegisterRepresentation> reps",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the initial type for a vector of RegisterRepresentations, returning a TupleType if there are multiple reps."
        },
        {
          "name": "TypeConstant",
          "parameters": [
            "ConstantOp::Kind kind",
            "ConstantOp::Storage value"
          ],
          "return_type": "Type",
          "logic": "Determines the type of a constant value based on its kind (Float32, Float64, Word32, Word64)."
        },
        {
          "name": "TypeProjection",
          "parameters": [
            "const Type& input",
            "uint16_t idx"
          ],
          "return_type": "Type",
          "logic": "Extracts the type of a specific element (projection) from a TupleType."
        },
        {
          "name": "TypeWordBinop",
          "parameters": [
            "Type left_type",
            "Type right_type",
            "WordBinopOp::Kind kind",
            "WordRepresentation rep",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a word-based binary operation (Add, Sub) based on the types of the operands, the kind of operation, and the word representation (Word32, Word64)."
        },
        {
          "name": "TypeWord32Add",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit word addition."
        },
        {
          "name": "TypeWord32Sub",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit word subtraction."
        },
        {
          "name": "TypeWord64Add",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit word addition."
        },
        {
          "name": "TypeWord64Sub",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit word subtraction."
        },
        {
          "name": "TypeFloatBinop",
          "parameters": [
            "Type left_type",
            "Type right_type",
            "FloatBinopOp::Kind kind",
            "FloatRepresentation rep",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a float-based binary operation based on the types of the operands, the kind of operation, and the float representation (Float32, Float64)."
        },
        {
          "name": "TypeFloat32Add",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float addition."
        },
        {
          "name": "TypeFloat32Sub",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float subtraction."
        },
        {
          "name": "TypeFloat32Mul",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float multiplication."
        },
        {
          "name": "TypeFloat32Div",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float division."
        },
        {
          "name": "TypeFloat32Mod",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float modulus."
        },
        {
          "name": "TypeFloat32Min",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float minimum."
        },
        {
          "name": "TypeFloat32Max",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float maximum."
        },
        {
          "name": "TypeFloat32Power",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float power."
        },
        {
          "name": "TypeFloat32Atan2",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float atan2."
        },
        {
          "name": "TypeFloat64Add",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float addition."
        },
        {
          "name": "TypeFloat64Sub",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float subtraction."
        },
        {
          "name": "TypeFloat64Mul",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float multiplication."
        },
        {
          "name": "TypeFloat64Div",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float division."
        },
        {
          "name": "TypeFloat64Mod",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float modulus."
        },
        {
          "name": "TypeFloat64Min",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float minimum."
        },
        {
          "name": "TypeFloat64Max",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float maximum."
        },
        {
          "name": "TypeFloat64Power",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float power."
        },
        {
          "name": "TypeFloat64Atan2",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float atan2."
        },
        {
          "name": "TypeOverflowCheckedBinop",
          "parameters": [
            "const Type& left_type",
            "const Type& right_type",
            "OverflowCheckedBinopOp::Kind kind",
            "WordRepresentation rep",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type of an overflow-checked binary operation."
        },
        {
          "name": "TypeWord32OverflowCheckedAdd",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit overflow-checked addition. Returns a tuple with the result and an overflow flag."
        },
        {
          "name": "TypeComparison",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "RegisterRepresentation rep",
            "ComparisonOp::Kind kind",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a comparison operation (==, <, <=) based on the operand types, the RegisterRepresentation, and comparison kind."
        },
        {
          "name": "TypeWord32Comparison",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "ComparisonOp::Kind kind",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit word comparison operation."
        },
        {
          "name": "TypeWord64Comparison",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "ComparisonOp::Kind kind",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit word comparison operation."
        },
        {
          "name": "TypeFloat32Comparison",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "ComparisonOp::Kind kind",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 32-bit float comparison operation."
        },
        {
          "name": "TypeFloat64Comparison",
          "parameters": [
            "const Type& lhs",
            "const Type& rhs",
            "ComparisonOp::Kind kind",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Determines the type resulting from a 64-bit float comparison operation."
        },
        {
          "name": "ExtendWord32ToWord64",
          "parameters": [
            "const Word32Type& t",
            "Zone* zone"
          ],
          "return_type": "Word64Type",
          "logic": "Extends a Word32Type to a Word64Type, preserving its lower bound."
        },
        {
          "name": "TruncateWord32Input",
          "parameters": [
            "const Type& input",
            "bool implicit_word64_narrowing",
            "Zone* zone"
          ],
          "return_type": "Word32Type",
          "logic": "Truncates a type to a Word32Type, handling implicit narrowing from Word64 if enabled."
        },
        {
          "name": "InputIs",
          "parameters": [
            "const Type& input",
            "Type::Kind expected"
          ],
          "return_type": "bool",
          "logic": "Checks if the given type is of the expected kind and causes a fatal error if not. May return false if invalid types are allowed and encountered."
        },
        {
          "name": "allow_invalid_inputs",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines if invalid type inputs are allowed (currently enabled for development)."
        }
      ]
    },
    {
      "name": "Typer::BranchRefinements",
      "properties": [],
      "methods": [
        {
          "name": "RefineTypes",
          "parameters": [
            "const Operation& condition",
            "bool then_branch",
            "Zone* zone"
          ],
          "return_type": "void",
          "logic": "Refines types based on a branch condition.  This allows for better type information within each branch of a conditional statement."
        },
        {
          "name": "RefineWord32Type",
          "parameters": [
            "const Type& type",
            "const Type& refinement",
            "Zone* zone"
          ],
          "return_type": "Type",
          "logic": "Refines a word32 type using the new type refinement and accounts for implicit truncation of word64 types to word32 types."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "array_min",
      "parameters": [
        "const std::array<T, N>& a"
      ],
      "return_type": "T",
      "logic": "Finds the minimum element in an array, ignoring NaN values. Returns +0 if only -0 values are present."
    },
    {
      "name": "array_max",
      "parameters": [
        "const std::array<T, N>& a"
      ],
      "return_type": "T",
      "logic": "Finds the maximum element in an array, ignoring NaN values. Returns +0 if only -0 values are present."
    }
  ]
}