{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/schedule.h",
  "imports": [
    "<iosfwd>",
    "src/base/compiler-specific.h",
    "src/common/globals.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "BasicBlock",
      "properties": [
        "loop_number_",
        "rpo_number_",
        "deferred_",
        "dominator_depth_",
        "dominator_",
        "rpo_next_",
        "loop_header_",
        "loop_end_",
        "loop_depth_",
        "control_",
        "control_input_",
        "nodes_",
        "successors_",
        "predecessors_",
        "debug_info_",
        "pgo_execution_count_",
        "id_"
      ],
      "methods": [
        {
          "name": "BasicBlock",
          "parameters": [
            "Zone* zone",
            "Id id"
          ],
          "return_type": "BasicBlock",
          "logic": "Constructor for the BasicBlock class."
        },
        {
          "name": "id",
          "parameters": [],
          "return_type": "Id",
          "logic": "Returns the ID of the basic block."
        },
        {
          "name": "set_debug_info",
          "parameters": [
            "AssemblerDebugInfo debug_info"
          ],
          "return_type": "void",
          "logic": "Sets debug information for the assembler (DEBUG mode only)."
        },
        {
          "name": "debug_info",
          "parameters": [],
          "return_type": "AssemblerDebugInfo",
          "logic": "Returns the debug information for the assembler (DEBUG mode only)."
        },
        {
          "name": "Print",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints information about the basic block, presumably for debugging."
        },
        {
          "name": "predecessors",
          "parameters": [],
          "return_type": "BasicBlockVector&",
          "logic": "Returns the vector of predecessor basic blocks."
        },
        {
          "name": "predecessors",
          "parameters": [],
          "return_type": "const BasicBlockVector&",
          "logic": "Returns the const vector of predecessor basic blocks."
        },
        {
          "name": "PredecessorCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of predecessor basic blocks."
        },
        {
          "name": "PredecessorAt",
          "parameters": [
            "size_t index"
          ],
          "return_type": "BasicBlock*",
          "logic": "Returns the predecessor basic block at the given index."
        },
        {
          "name": "ClearPredecessors",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the list of predecessors."
        },
        {
          "name": "AddPredecessor",
          "parameters": [
            "BasicBlock* predecessor"
          ],
          "return_type": "void",
          "logic": "Adds a predecessor to the basic block."
        },
        {
          "name": "RemovePredecessor",
          "parameters": [
            "size_t index"
          ],
          "return_type": "void",
          "logic": "Removes a predecessor at the given index from the basic block."
        },
        {
          "name": "successors",
          "parameters": [],
          "return_type": "BasicBlockVector&",
          "logic": "Returns the vector of successor basic blocks."
        },
        {
          "name": "successors",
          "parameters": [],
          "return_type": "const BasicBlockVector&",
          "logic": "Returns the const vector of successor basic blocks."
        },
        {
          "name": "SuccessorCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of successor basic blocks."
        },
        {
          "name": "SuccessorAt",
          "parameters": [
            "size_t index"
          ],
          "return_type": "BasicBlock*",
          "logic": "Returns the successor basic block at the given index."
        },
        {
          "name": "ClearSuccessors",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears the list of successors."
        },
        {
          "name": "AddSuccessor",
          "parameters": [
            "BasicBlock* successor"
          ],
          "return_type": "void",
          "logic": "Adds a successor to the basic block."
        },
        {
          "name": "empty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the block is empty (contains no nodes)."
        },
        {
          "name": "size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of nodes in the block."
        },
        {
          "name": "NodeAt",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Node*",
          "logic": "Returns the node at the given index."
        },
        {
          "name": "NodeCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of nodes."
        },
        {
          "name": "front",
          "parameters": [],
          "return_type": "value_type&",
          "logic": "Returns a reference to the first node in the block."
        },
        {
          "name": "front",
          "parameters": [],
          "return_type": "value_type const&",
          "logic": "Returns a const reference to the first node in the block."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the beginning of the node list."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "iterator",
          "logic": "Returns an iterator to the end of the node list."
        },
        {
          "name": "RemoveNode",
          "parameters": [
            "iterator it"
          ],
          "return_type": "void",
          "logic": "Removes the node pointed to by iterator `it`."
        },
        {
          "name": "begin",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const iterator to the beginning of the node list."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "const_iterator",
          "logic": "Returns a const iterator to the end of the node list."
        },
        {
          "name": "rbegin",
          "parameters": [],
          "return_type": "reverse_iterator",
          "logic": "Returns a reverse iterator to the beginning of the node list."
        },
        {
          "name": "rend",
          "parameters": [],
          "return_type": "reverse_iterator",
          "logic": "Returns a reverse iterator to the end of the node list."
        },
        {
          "name": "AddNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the end of the block."
        },
        {
          "name": "InsertNodes",
          "parameters": [
            "iterator insertion_point",
            "InputIterator insertion_start",
            "InputIterator insertion_end"
          ],
          "return_type": "void",
          "logic": "Inserts a range of nodes into the block at the given insertion point."
        },
        {
          "name": "TrimNodes",
          "parameters": [
            "iterator new_end"
          ],
          "return_type": "void",
          "logic": "Trims the basic block to end at {new_end}."
        },
        {
          "name": "ResetRPOInfo",
          "parameters": [],
          "return_type": "void",
          "logic": "Resets RPO (Reverse Postorder) information for the block."
        },
        {
          "name": "control",
          "parameters": [],
          "return_type": "Control",
          "logic": "Returns the control node type at the end of the block."
        },
        {
          "name": "set_control",
          "parameters": [
            "Control control"
          ],
          "return_type": "void",
          "logic": "Sets the control node type at the end of the block."
        },
        {
          "name": "control_input",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the input node for the control node."
        },
        {
          "name": "set_control_input",
          "parameters": [
            "Node* control_input"
          ],
          "return_type": "void",
          "logic": "Sets the input node for the control node."
        },
        {
          "name": "deferred",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the block contains deferred code."
        },
        {
          "name": "set_deferred",
          "parameters": [
            "bool deferred"
          ],
          "return_type": "void",
          "logic": "Sets whether the block contains deferred code."
        },
        {
          "name": "dominator_depth",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the depth of the block in the dominator tree."
        },
        {
          "name": "set_dominator_depth",
          "parameters": [
            "int32_t depth"
          ],
          "return_type": "void",
          "logic": "Sets the depth of the block in the dominator tree."
        },
        {
          "name": "dominator",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the immediate dominator of the block."
        },
        {
          "name": "set_dominator",
          "parameters": [
            "BasicBlock* dominator"
          ],
          "return_type": "void",
          "logic": "Sets the immediate dominator of the block."
        },
        {
          "name": "rpo_next",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the next block in reverse postorder (RPO)."
        },
        {
          "name": "set_rpo_next",
          "parameters": [
            "BasicBlock* rpo_next"
          ],
          "return_type": "void",
          "logic": "Sets the next block in reverse postorder (RPO)."
        },
        {
          "name": "loop_header",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the dominating loop header block."
        },
        {
          "name": "set_loop_header",
          "parameters": [
            "BasicBlock* loop_header"
          ],
          "return_type": "void",
          "logic": "Sets the dominating loop header basic block."
        },
        {
          "name": "loop_end",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the end of the loop if this block is a loop header."
        },
        {
          "name": "set_loop_end",
          "parameters": [
            "BasicBlock* loop_end"
          ],
          "return_type": "void",
          "logic": "Sets the end of the loop if this block is a loop header."
        },
        {
          "name": "loop_depth",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the loop nesting depth."
        },
        {
          "name": "set_loop_depth",
          "parameters": [
            "int32_t loop_depth"
          ],
          "return_type": "void",
          "logic": "Sets the loop nesting depth."
        },
        {
          "name": "loop_number",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the loop number of the block."
        },
        {
          "name": "set_loop_number",
          "parameters": [
            "int32_t loop_number"
          ],
          "return_type": "void",
          "logic": "Sets the loop number of the block."
        },
        {
          "name": "rpo_number",
          "parameters": [],
          "return_type": "int32_t",
          "logic": "Returns the RPO number of the block."
        },
        {
          "name": "set_rpo_number",
          "parameters": [
            "int32_t rpo_number"
          ],
          "return_type": "void",
          "logic": "Sets the RPO number of the block."
        },
        {
          "name": "nodes",
          "parameters": [],
          "return_type": "NodeVector*",
          "logic": "Returns a pointer to the vector of nodes in the block."
        },
        {
          "name": "pgo_execution_count",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the PGO execution count of the basic block. (LOG_BUILTIN_BLOCK_COUNT mode only)."
        },
        {
          "name": "set_pgo_execution_count",
          "parameters": [
            "uint64_t count"
          ],
          "return_type": "void",
          "logic": "Sets the PGO execution count of the basic block. (LOG_BUILTIN_BLOCK_COUNT mode only)."
        },
        {
          "name": "IsLoopHeader",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if this block is a loop header."
        },
        {
          "name": "LoopContains",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "bool",
          "logic": "Checks if this loop contains the given block."
        },
        {
          "name": "GetCommonDominator",
          "parameters": [
            "BasicBlock* b1",
            "BasicBlock* b2"
          ],
          "return_type": "BasicBlock*",
          "logic": "Computes the immediate common dominator of {b1} and {b2}."
        }
      ]
    },
    {
      "name": "BasicBlock::Id",
      "properties": [
        "index_"
      ],
      "methods": [
        {
          "name": "ToInt",
          "parameters": [],
          "return_type": "int",
          "logic": "Converts the ID to an integer."
        },
        {
          "name": "ToSize",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Converts the ID to a size_t."
        },
        {
          "name": "FromSize",
          "parameters": [
            "size_t index"
          ],
          "return_type": "Id",
          "logic": "Creates an ID from a size_t."
        },
        {
          "name": "FromInt",
          "parameters": [
            "int index"
          ],
          "return_type": "Id",
          "logic": "Creates an ID from an int."
        }
      ]
    },
    {
      "name": "Schedule",
      "properties": [
        "zone_",
        "all_blocks_",
        "nodeid_to_block_",
        "rpo_order_",
        "start_",
        "end_"
      ],
      "methods": [
        {
          "name": "Schedule",
          "parameters": [
            "Zone* zone",
            "size_t node_count_hint"
          ],
          "return_type": "Schedule",
          "logic": "Constructor for the Schedule class."
        },
        {
          "name": "block",
          "parameters": [
            "Node* node"
          ],
          "return_type": "BasicBlock*",
          "logic": "Returns the basic block containing the given node."
        },
        {
          "name": "IsScheduled",
          "parameters": [
            "Node* node"
          ],
          "return_type": "bool",
          "logic": "Checks if a node is scheduled in any basic block."
        },
        {
          "name": "GetBlockById",
          "parameters": [
            "BasicBlock::Id block_id"
          ],
          "return_type": "BasicBlock*",
          "logic": "Retrieves a block from all_blocks_ given its ID."
        },
        {
          "name": "ClearBlockById",
          "parameters": [
            "BasicBlock::Id block_id"
          ],
          "return_type": "void",
          "logic": "Clears a block using its id. Purpose unclear (likely for incomplete schedule building or testing)."
        },
        {
          "name": "BasicBlockCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total number of basic blocks."
        },
        {
          "name": "RpoBlockCount",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of basic blocks in RPO order."
        },
        {
          "name": "SameBasicBlock",
          "parameters": [
            "Node* a",
            "Node* b"
          ],
          "return_type": "bool",
          "logic": "Checks if two nodes are in the same basic block."
        },
        {
          "name": "NewBasicBlock",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Creates and returns a new basic block."
        },
        {
          "name": "PlanNode",
          "parameters": [
            "BasicBlock* block",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Records that a node will be added to a block later."
        },
        {
          "name": "AddNode",
          "parameters": [
            "BasicBlock* block",
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Adds a node to the end of a basic block."
        },
        {
          "name": "AddGoto",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* succ"
          ],
          "return_type": "void",
          "logic": "Adds a goto control node to a block, directing control flow to a successor block."
        },
        {
          "name": "AddCall",
          "parameters": [
            "BasicBlock* block",
            "Node* call",
            "BasicBlock* success_block",
            "BasicBlock* exception_block"
          ],
          "return_type": "void",
          "logic": "Adds a call control node to a block, specifying success and exception handler blocks."
        },
        {
          "name": "AddBranch",
          "parameters": [
            "BasicBlock* block",
            "Node* branch",
            "BasicBlock* tblock",
            "BasicBlock* fblock"
          ],
          "return_type": "void",
          "logic": "Adds a branch control node to a block, specifying true and false successor blocks."
        },
        {
          "name": "AddSwitch",
          "parameters": [
            "BasicBlock* block",
            "Node* sw",
            "BasicBlock** succ_blocks",
            "size_t succ_count"
          ],
          "return_type": "void",
          "logic": "Adds a switch control node to a block, specifying multiple successor blocks."
        },
        {
          "name": "AddDeoptimize",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a deoptimize control node to a block."
        },
        {
          "name": "AddTailCall",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a tail call control node to a block."
        },
        {
          "name": "AddReturn",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a return control node to a block."
        },
        {
          "name": "AddThrow",
          "parameters": [
            "BasicBlock* block",
            "Node* input"
          ],
          "return_type": "void",
          "logic": "Adds a throw control node to a block."
        },
        {
          "name": "InsertBranch",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* end",
            "Node* branch",
            "BasicBlock* tblock",
            "BasicBlock* fblock"
          ],
          "return_type": "void",
          "logic": "Inserts a branch into the end of a basic block."
        },
        {
          "name": "InsertSwitch",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* end",
            "Node* sw",
            "BasicBlock** succ_blocks",
            "size_t succ_count"
          ],
          "return_type": "void",
          "logic": "Inserts a switch into the end of a basic block."
        },
        {
          "name": "AddSuccessorForTesting",
          "parameters": [
            "BasicBlock* block",
            "BasicBlock* succ"
          ],
          "return_type": "void",
          "logic": "Exposed publicly for testing. Adds a successor to block."
        },
        {
          "name": "all_blocks",
          "parameters": [],
          "return_type": "const BasicBlockVector*",
          "logic": "Returns the vector of all basic blocks."
        },
        {
          "name": "rpo_order",
          "parameters": [],
          "return_type": "BasicBlockVector*",
          "logic": "Returns a pointer to the RPO order vector (mutable)."
        },
        {
          "name": "rpo_order",
          "parameters": [],
          "return_type": "const BasicBlockVector*",
          "logic": "Returns a pointer to the RPO order vector (const)."
        },
        {
          "name": "start",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the start block of the schedule."
        },
        {
          "name": "end",
          "parameters": [],
          "return_type": "BasicBlock*",
          "logic": "Returns the end block of the schedule."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone used for memory allocation."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const BasicBlock&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for BasicBlock objects."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const BasicBlock::Control&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for BasicBlock::Control enum."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const BasicBlock::Id&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for BasicBlock::Id objects."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "const Schedule&"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the output stream operator for Schedule objects."
    }
  ]
}