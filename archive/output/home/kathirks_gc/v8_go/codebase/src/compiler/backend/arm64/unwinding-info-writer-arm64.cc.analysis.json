{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/arm64/unwinding-info-writer-arm64.cc",
  "imports": [
    "src/compiler/backend/arm64/unwinding-info-writer-arm64.h",
    "src/compiler/backend/instruction.h"
  ],
  "classes": [
    {
      "name": "UnwindingInfoWriter",
      "properties": [
        "eh_frame_writer_",
        "saved_lr_",
        "block_initial_states_",
        "zone_",
        "block_will_exit_"
      ],
      "methods": [
        {
          "name": "BeginInstructionBlock",
          "parameters": [
            "int pc_offset",
            "const InstructionBlock* block"
          ],
          "return_type": "void",
          "logic": "Records the initial state of a basic block, specifically whether the link register (LR) was saved, at the given program counter offset. This information is used for unwinding the stack during exception handling. It avoids unnecessary state recording if unwinding info is disabled or if the initial state for the block is already known and the same as the current state."
        },
        {
          "name": "EndInstructionBlock",
          "parameters": [
            "const InstructionBlock* block"
          ],
          "return_type": "void",
          "logic": "Saves the current saved_lr_ state for all successor blocks.  It checks if the successor already has an initial state recorded, and if so, asserts that it matches the current state.  If not, it creates a new BlockInitialState entry for the successor block."
        },
        {
          "name": "MarkFrameConstructed",
          "parameters": [
            "int at_pc"
          ],
          "return_type": "void",
          "logic": "Records the fact that a stack frame has been constructed.  It advances the eh_frame writer to the specified program counter (at_pc) and records that the link register (LR) and frame pointer (FP) have been saved to the stack. It also sets the saved_lr_ flag to true."
        },
        {
          "name": "MarkFrameDeconstructed",
          "parameters": [
            "int at_pc"
          ],
          "return_type": "void",
          "logic": "Records the fact that a stack frame has been deconstructed. It advances the eh_frame writer to the specified program counter (at_pc) and records that the link register (LR) now follows the initial rule (i.e., is not saved on the stack). It also sets the saved_lr_ flag to false."
        },
        {
          "name": "MarkLinkRegisterOnTopOfStack",
          "parameters": [
            "int pc_offset",
            "const Register& sp"
          ],
          "return_type": "void",
          "logic": "Records that the link register (LR) is located on top of the stack (SP).  It advances the eh_frame writer to the given PC offset, sets the base address register to the stack pointer (SP) with an offset of 0, and records that the LR is saved at the top of the stack."
        },
        {
          "name": "MarkPopLinkRegisterFromTopOfStack",
          "parameters": [
            "int pc_offset"
          ],
          "return_type": "void",
          "logic": "Records that the link register (LR) is being popped from the stack. It advances the eh_frame writer to the given PC offset, sets the base address register to the frame pointer (FP) with an offset of 0, and records that the LR now follows the initial rule."
        }
      ]
    }
  ],
  "functions": []
}