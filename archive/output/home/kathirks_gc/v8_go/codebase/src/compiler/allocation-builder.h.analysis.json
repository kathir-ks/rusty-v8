{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/allocation-builder.h",
  "imports": [
    "src/compiler/js-graph.h",
    "src/compiler/node.h",
    "src/compiler/simplified-operator.h"
  ],
  "classes": [
    {
      "name": "AllocationBuilder",
      "properties": [
        "jsgraph_",
        "broker_",
        "allocation_",
        "effect_",
        "control_"
      ],
      "methods": [
        {
          "name": "AllocationBuilder",
          "parameters": [
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "Node* effect",
            "Node* control"
          ],
          "return_type": "void",
          "logic": "Constructor for the AllocationBuilder class. Initializes the jsgraph_, broker_, allocation_, effect_, and control_ members."
        },
        {
          "name": "Allocate",
          "parameters": [
            "int size",
            "AllocationType allocation = AllocationType::kYoung",
            "Type type = Type::Any()"
          ],
          "return_type": "void",
          "logic": "Performs a primitive allocation of a static size. The actual allocation logic is likely implemented elsewhere (probably within JSGraph or a helper function it calls)."
        },
        {
          "name": "Store",
          "parameters": [
            "const FieldAccess& access",
            "Node* value"
          ],
          "return_type": "void",
          "logic": "Performs a primitive store into a field. Creates a new StoreField node in the graph and updates the effect chain."
        },
        {
          "name": "Store",
          "parameters": [
            "ElementAccess const& access",
            "Node* index",
            "Node* value"
          ],
          "return_type": "void",
          "logic": "Performs a primitive store into an element. Creates a new StoreElement node in the graph and updates the effect chain."
        },
        {
          "name": "AllocateContext",
          "parameters": [
            "int variadic_part_length",
            "MapRef map"
          ],
          "return_type": "void",
          "logic": "Performs a compound allocation of a context object. The actual allocation logic is likely implemented elsewhere."
        },
        {
          "name": "CanAllocateArray",
          "parameters": [
            "int length",
            "MapRef map",
            "AllocationType allocation = AllocationType::kYoung"
          ],
          "return_type": "bool",
          "logic": "Checks if it's possible to allocate an array of the given length and map. Likely performs size checks or other preconditions."
        },
        {
          "name": "AllocateArray",
          "parameters": [
            "int length",
            "MapRef map",
            "AllocationType allocation = AllocationType::kYoung"
          ],
          "return_type": "void",
          "logic": "Performs a compound allocation of a FixedArray object. The actual allocation logic is likely implemented elsewhere."
        },
        {
          "name": "CanAllocateSloppyArgumentElements",
          "parameters": [
            "int length",
            "MapRef map",
            "AllocationType allocation = AllocationType::kYoung"
          ],
          "return_type": "bool",
          "logic": "Checks if it is possible to allocate SloppyArgumentsElements of the given length and map. Likely performs size checks or other preconditions."
        },
        {
          "name": "AllocateSloppyArgumentElements",
          "parameters": [
            "int length",
            "MapRef map",
            "AllocationType allocation = AllocationType::kYoung"
          ],
          "return_type": "void",
          "logic": "Performs a compound allocation of a SloppyArgumentsElements object. The actual allocation logic is likely implemented elsewhere."
        },
        {
          "name": "Store",
          "parameters": [
            "const FieldAccess& access",
            "ObjectRef value"
          ],
          "return_type": "void",
          "logic": "Stores a constant value into a field. Handles both direct pointers and HeapObjects using TrustedHeapConstant and ConstantNoHole operators."
        },
        {
          "name": "FinishAndChange",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Finishes the allocation and changes the provided node to a FinishRegion node, replacing its inputs with the allocation and effect chains."
        },
        {
          "name": "Finish",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Finishes the allocation and creates a FinishRegion node to represent the completed allocation and its effects."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Getter method for the jsgraph_ member."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Getter method for the isolate from the jsgraph."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Getter method for the TFGraph from the jsgraph."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Getter method for the CommonOperatorBuilder from the jsgraph."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Getter method for the SimplifiedOperatorBuilder from the jsgraph."
        }
      ]
    }
  ],
  "functions": []
}