{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/graph-trimmer.h",
  "imports": [
    "src/compiler/node-marker.h"
  ],
  "classes": [
    {
      "name": "GraphTrimmer",
      "properties": [
        "graph_",
        "is_live_",
        "live_"
      ],
      "methods": [
        {
          "name": "GraphTrimmer",
          "parameters": [
            "Zone* zone",
            "TFGraph* graph"
          ],
          "return_type": "void",
          "logic": "Constructor for the GraphTrimmer class. Initializes the graph trimmer with the given zone and graph."
        },
        {
          "name": "~GraphTrimmer",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the GraphTrimmer class.  (No implementation shown, likely does nothing.)"
        },
        {
          "name": "GraphTrimmer",
          "parameters": [
            "const GraphTrimmer&"
          ],
          "return_type": "deleted",
          "logic": "Deleted copy constructor to prevent copying."
        },
        {
          "name": "operator=",
          "parameters": [
            "const GraphTrimmer&"
          ],
          "return_type": "GraphTrimmer& (deleted)",
          "logic": "Deleted assignment operator to prevent copying."
        },
        {
          "name": "TrimGraph",
          "parameters": [],
          "return_type": "void",
          "logic": "Trims dead nodes from the graph that are not reachable from the graph's end node."
        },
        {
          "name": "TrimGraph",
          "parameters": [
            "ForwardIterator begin",
            "ForwardIterator end"
          ],
          "return_type": "void",
          "logic": "Trims dead nodes from the graph that are not reachable from the graph's end node or any of the nodes in the range [begin, end). First, it marks the nodes within the range as live, then calls the default TrimGraph() to perform the trimming."
        },
        {
          "name": "IsLive",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "bool",
          "logic": "Checks if a given node is marked as live."
        },
        {
          "name": "MarkAsLive",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "void",
          "logic": "Marks a given node as live and adds it to the list of live nodes if it's not already marked as live."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns a pointer to the graph being trimmed."
        }
      ]
    }
  ],
  "functions": []
}