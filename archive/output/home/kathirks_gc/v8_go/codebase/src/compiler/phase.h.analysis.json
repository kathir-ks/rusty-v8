{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/phase.h",
  "imports": [
    "src/compiler/backend/code-generator.h",
    "src/logging/runtime-call-stats.h"
  ],
  "classes": [
    {
      "name": "InstructionStartsAsJSON",
      "properties": [
        "const ZoneVector<TurbolizerInstructionStartInfo>* instr_starts"
      ],
      "methods": [
        {
          "name": "operator<<",
          "parameters": [
            "std::ostream& out",
            "InstructionStartsAsJSON s"
          ],
          "return_type": "std::ostream&",
          "logic": "Overloads the output stream operator to format the instruction start offsets into a JSON string. Iterates through the `instr_starts` vector, creating a JSON object mapping instruction index to its gap, arch, and condition offsets."
        }
      ]
    },
    {
      "name": "TurbolizerCodeOffsetsInfoAsJSON",
      "properties": [
        "const TurbolizerCodeOffsetsInfo* offsets_info"
      ],
      "methods": [
        {
          "name": "operator<<",
          "parameters": [
            "std::ostream& out",
            "TurbolizerCodeOffsetsInfoAsJSON s"
          ],
          "return_type": "std::ostream&",
          "logic": "Overloads the output stream operator to format Turbolizer code offset information into a JSON string. Accesses fields from `offsets_info` and writes them as key-value pairs in a JSON object."
        }
      ]
    },
    {
      "name": "BlockStartsAsJSON",
      "properties": [
        "const ZoneVector<int>* block_starts"
      ],
      "methods": [
        {
          "name": "operator<<",
          "parameters": [
            "std::ostream& out",
            "BlockStartsAsJSON s"
          ],
          "return_type": "std::ostream&",
          "logic": "Overloads the output stream operator to format block start offsets into a JSON string. Iterates through the `block_starts` vector and creates a JSON object mapping block index to its starting offset."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "PrintCode",
      "parameters": [
        "Isolate* isolate",
        "DirectHandle<Code> code",
        "OptimizedCompilationInfo* info"
      ],
      "return_type": "void",
      "logic": "Prints the generated code to the output (likely for debugging or logging). The `Isolate` provides context for the V8 engine, `DirectHandle<Code>` refers to the generated machine code, and `OptimizedCompilationInfo` contains metadata about the compilation process."
    },
    {
      "name": "TraceSchedule",
      "parameters": [
        "OptimizedCompilationInfo* info",
        "TFPipelineData* data",
        "Schedule* schedule",
        "const char* phase_name"
      ],
      "return_type": "void",
      "logic": "Traces the scheduling of the compiled code.  Used for debugging or performance analysis. `OptimizedCompilationInfo` contains compilation details, `TFPipelineData` holds pipeline specific data, `Schedule` represents the order of instructions, and `phase_name` indicates which compilation phase is being traced."
    }
  ]
}