{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/instruction-selector-riscv32.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n    \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/backend/riscv/instruction-selector-riscv32.cc\",\n    \"imports\": [\n        \"src/base/bits.h\",\n        \"src/codegen/assembler-inl.h\",\n        \"src/codegen/machine-type.h\",\n        \"src/compiler/backend/instruction-selector-impl.h\",\n        \"src/compiler/backend/riscv/instruction-selector-riscv.h\",\n        \"src/compiler/node-matchers.h\",\n        \"src/compiler/node-properties.h\",\n        \"src/compiler/turboshaft/operations.h\",\n        \"src/compiler/turboshaft/opmasks.h\"\n    ],\n    \"classes\": [],\n    \"functions\": [\n        {\n            \"name\": \"RiscvOperandGeneratorT::CanBeImmediate\",\n            \"parameters\": [\n                \"int64_t value\",\n                \"InstructionCode opcode\"\n            ],\n            \"return_type\": \"bool\",\n            \"logic\": \"Determines if a given value can be represented as an immediate operand for a specific RISC-V instruction opcode. The function checks the opcode and then determines if the value is within the valid range for that opcode's immediate field.\"\n        },\n        {\n            \"name\": \"EmitLoad\",\n            \"parameters\": [\n                \"InstructionSelectorT* selector\",\n                \"OpIndex node\",\n                \"InstructionCode opcode\",\n                \"OpIndex output\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Emits a load instruction. It handles different addressing modes, including relative to the root register and immediate offsets.  It selects the appropriate load instruction based on the provided opcode, handles root register addressing, and emits the final instruction.\"\n        },\n        {\n            \"name\": \"EmitS128Load\",\n            \"parameters\": [\n                \"InstructionSelectorT* selector\",\n                \"OpIndex node\",\n                \"InstructionCode opcode\",\n                \"VSew sew\",\n                \"Vlmul lmul\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Emits a SIMD 128-bit load instruction. It handles immediate offsets and register-based addressing.  It selects the appropriate load instruction based on the provided opcode, handles register and immediate operands for base, index, sew and lmul, and emits the final instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitStoreLane\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a StoreLane operation, generating the appropriate store instruction for a specific lane of a SIMD 128-bit vector. It calculates the address, constructs the instruction operands, and emits the store instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitLoadLane\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a LoadLane operation, generating the appropriate load instruction for a specific lane of a SIMD 128-bit vector. It calculates the address, constructs the instruction operands, and emits the load instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitLoad\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Load operation, generating the appropriate load instruction based on the loaded representation (e.g., float32, float64, word8, word16, word32). It determines the correct opcode based on the representation and then calls EmitLoad.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitStorePair\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This is UNREACHABLE on RISC-V 32 bit architecture.  It's expected that pair stores are lowered during other compilation stages, thus making the function unreachable\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitStore\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Store operation, generating the appropriate store instruction based on the stored representation. It handles write barriers, root register stores, and immediate offsets. It emits the appropriate store instruction (e.g., float32, float64, word8, word16, word32).\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitProtectedLoad\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitProtectedStore\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32And\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32And operation, generating the corresponding AND instruction. It uses the VisitBinop helper to handle the binary operation and immediate operands.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32Or\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32Or operation, generating the corresponding OR instruction. It uses the VisitBinop helper to handle the binary operation and immediate operands.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32Xor\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32Xor operation, generating the corresponding XOR instruction. It uses the VisitBinop helper to handle the binary operation and immediate operands.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32Rol\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32Ror\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32Ror operation, generating the corresponding ROR (rotate right) instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32ReverseBits\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord64ReverseBytes\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32ReverseBytes\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32ReverseBytes operation, generating the corresponding instruction to reverse the byte order within a 32-bit word.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitSimd128ReverseBytes\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32Popcnt\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32Popcnt operation, generating the corresponding instruction to count the number of set bits in a 32-bit word.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32Add\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32Add operation, generating the corresponding ADD instruction. It uses the VisitBinop helper to handle the binary operation and immediate operands.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32Sub\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32Sub operation, generating the corresponding SUB instruction. It uses the VisitBinop helper to handle the binary operation and immediate operands.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32Mul\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32Mul operation, generating the corresponding MUL instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32MulHigh\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32MulHigh operation, generating the corresponding instruction to multiply two 32-bit integers and obtain the high 32 bits of the result (signed).\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUint32MulHigh\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Uint32MulHigh operation, generating the corresponding instruction to multiply two 32-bit integers and obtain the high 32 bits of the result (unsigned).\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32Div\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32Div operation, generating the corresponding DIV instruction for signed integer division.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUint32Div\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Uint32Div operation, generating the corresponding DIV instruction for unsigned integer division.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32Mod\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32Mod operation, generating the corresponding MOD instruction for signed integer modulo operation.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUint32Mod\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Uint32Mod operation, generating the corresponding MOD instruction for unsigned integer modulo operation.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitChangeFloat32ToFloat64\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a ChangeFloat32ToFloat64 operation, generating the corresponding instruction to convert a 32-bit float to a 64-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitRoundInt32ToFloat32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a RoundInt32ToFloat32 operation, generating the corresponding instruction to convert a 32-bit integer to a 32-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitRoundUint32ToFloat32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a RoundUint32ToFloat32 operation, generating the corresponding instruction to convert a 32-bit unsigned integer to a 32-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitChangeInt32ToFloat64\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a ChangeInt32ToFloat64 operation, generating the corresponding instruction to convert a 32-bit integer to a 64-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitChangeUint32ToFloat64\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a ChangeUint32ToFloat64 operation, generating the corresponding instruction to convert a 32-bit unsigned integer to a 64-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitTruncateFloat32ToInt32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a TruncateFloat32ToInt32 operation, generating the corresponding instruction to truncate a 32-bit float to a 32-bit integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitTruncateFloat32ToUint32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a TruncateFloat32ToUint32 operation, generating the corresponding instruction to truncate a 32-bit float to a 32-bit unsigned integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitChangeFloat64ToInt32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a ChangeFloat64ToInt32 operation, generating the corresponding instruction to truncate a 64-bit float to a 32-bit integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitChangeFloat64ToUint32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a ChangeFloat64ToUint32 operation, generating the corresponding instruction to truncate a 64-bit float to a 32-bit unsigned integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitTruncateFloat64ToUint32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a TruncateFloat64ToUint32 operation, generating the corresponding instruction to truncate a 64-bit float to a 32-bit unsigned integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitBitcastFloat32ToInt32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a BitcastFloat32ToInt32 operation, generating the corresponding instruction to reinterpret the bits of a 32-bit float as a 32-bit integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitBitcastInt32ToFloat32\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a BitcastInt32ToFloat32 operation, generating the corresponding instruction to reinterpret the bits of a 32-bit integer as a 32-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64RoundDown\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat32RoundUp\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float32RoundUp operation, generating the corresponding instruction to round a 32-bit float towards positive infinity.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64RoundUp\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat32RoundTruncate\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float32RoundTruncate operation, generating the corresponding instruction to round a 32-bit float towards zero.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64RoundTruncate\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64RoundTiesAway\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat32RoundTiesEven\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float32RoundTiesEven operation, generating the corresponding instruction to round a 32-bit float to the nearest integer, with ties rounded to the even integer.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64RoundTiesEven\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat32Neg\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float32Neg operation, generating the corresponding instruction to negate a 32-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64Neg\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float64Neg operation, generating the corresponding instruction to negate a 64-bit float.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64Ieee754Binop\",\n            \"parameters\": [\n                \"OpIndex node\",\n                \"InstructionCode opcode\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float64Ieee754Binop operation, generating the corresponding binary operation instruction for 64-bit floats.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitFloat64Ieee754Unop\",\n            \"parameters\": [\n                \"OpIndex node\",\n                \"InstructionCode opcode\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Float64Ieee754Unop operation, generating the corresponding unary operation instruction for 64-bit floats.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::EmitPrepareArguments\",\n            \"parameters\": [\n                \"ZoneVector<PushParameter>* arguments\",\n                \"const CallDescriptor* call_descriptor\",\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prepares arguments for a function call, either a C function call or a standard V8 call. It handles stack argument passing and argument slot allocation.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUnalignedLoad\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUnalignedStore\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNIMPLEMENTED().\"\n        },\n        {\n            \"name\": \"VisitWordCompare\",\n            \"parameters\": [\n                \"InstructionSelectorT* selector\",\n                \"OpIndex node\",\n                \"FlagsContinuationT* cont\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"A shared routine for word comparisons.\"\n        },\n         {\n            \"name\": \"VisitAtomicLoad\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"OpIndex node\",\n              \"ArchOpcode opcode\",\n              \"AtomicWidth width\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Shared routine for atomic loads.\"\n          },\n          {\n            \"name\": \"VisitAtomicStore\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"OpIndex node\",\n              \"ArchOpcode opcode\",\n              \"AtomicWidth width\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Shared routine for atomic stores.\"\n          },\n          {\n            \"name\": \"VisitAtomicBinop\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"OpIndex node\",\n              \"ArchOpcode opcode\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Shared routine for atomic binary operations.\"\n          },\n        {\n            \"name\": \"InstructionSelectorT::VisitStackPointerGreaterThan\",\n            \"parameters\": [\n                \"OpIndex node\",\n                \"FlagsContinuationT* cont\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a StackPointerGreaterThan operation, generating the appropriate stack check instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWordCompareZero\",\n            \"parameters\": [\n                \"OpIndex user\",\n                \"OpIndex value\",\n                \"FlagsContinuation* cont\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Shared routine for word comparisons against zero.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32Equal\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32Equal operation, generating the corresponding equality comparison instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32LessThan\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32LessThan operation, generating the corresponding signed less-than comparison instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32LessThanOrEqual\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32LessThanOrEqual operation, generating the corresponding signed less-than-or-equal comparison instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUint32LessThan\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Uint32LessThan operation, generating the corresponding unsigned less-than comparison instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitUint32LessThanOrEqual\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Uint32LessThanOrEqual operation, generating the corresponding unsigned less-than-or-equal comparison instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32AddWithOverflow\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32AddWithOverflow operation, generating the corresponding addition with overflow check instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32SubWithOverflow\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32SubWithOverflow operation, generating the corresponding subtraction with overflow check instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitInt32MulWithOverflow\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32MulWithOverflow operation, generating the corresponding multiplication with overflow check instruction.\"\n        },\n         {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicLoad\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicLoad operation, generating the corresponding atomic load instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicStore\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicStore operation, generating the corresponding atomic store instruction.\"\n          },\n           {\n            \"name\": \"VisitAtomicExchange\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"OpIndex node\",\n              \"ArchOpcode opcode\",\n              \"AtomicWidth width\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"A shared routine for atomic exchange.\"\n          },\n          {\n            \"name\": \"VisitAtomicCompareExchange\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"OpIndex node\",\n              \"ArchOpcode opcode\",\n              \"AtomicWidth width\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"A shared routine for atomic compare and exchange.\"\n          },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicExchange\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicExchange operation, generating the corresponding atomic exchange instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicCompareExchange\",\n            \"parameters\": [\n                \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicCompareExchange operation, generating the corresponding atomic compare and exchange instruction.\"\n        },\n        {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicBinaryOperation\",\n            \"parameters\": [\n                \"OpIndex node\",\n                \"ArchOpcode int8_op\",\n                \"ArchOpcode uint8_op\",\n                \"ArchOpcode int16_op\",\n                \"ArchOpcode uint16_op\",\n                \"ArchOpcode word32_op\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicBinaryOperation operation, generating the corresponding atomic binary operation instruction.\"\n        },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicAdd\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicAdd operation, generating the corresponding atomic add instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicSub\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicSub operation, generating the corresponding atomic subtract instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicAnd\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicAnd operation, generating the corresponding atomic and instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicOr\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicOr operation, generating the corresponding atomic or instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicXor\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicXor operation, generating the corresponding atomic xor instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitInt32AbsWithOverflow\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitInt64AbsWithOverflow\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n          },\n           {\n            \"name\": \"VisitInt32PairBinop\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"InstructionCode pair_opcode\",\n              \"InstructionCode single_opcode\",\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Shared routine for integer pair binary operations.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitInt32PairAdd\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32PairAdd operation, generating the corresponding pair add instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitInt32PairSub\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32PairSub operation, generating the corresponding pair subtract instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitInt32PairMul\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an Int32PairMul operation, generating the corresponding pair multiply instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitI64x2SplatI32Pair\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits an I64x2SplatI32Pair operation, generating the corresponding splat pair instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitI64x2ReplaceLaneI32Pair\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"This function is currently marked as UNREACHABLE().\"\n          },\n          {\n            \"name\": \"VisitWord32PairShift\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"InstructionCode opcode\",\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Shared routine for word32 pair shift operations.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32PairShl\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32PairShl operation, generating the corresponding pair shift left instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32PairShr\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32PairShr operation, generating the corresponding pair shift right logical instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32PairSar\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32PairSar operation, generating the corresponding pair shift right arithmetic instruction.\"\n          },\n           {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicPairLoad\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicPairLoad operation, generating the corresponding pair atomic load instruction.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicPairStore\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicPairStore operation, generating the corresponding pair atomic store instruction.\"\n          },\n          {\n            \"name\": \"VisitPairAtomicBinop\",\n            \"parameters\": [\n              \"InstructionSelectorT* selector\",\n              \"OpIndex node\",\n              \"ArchOpcode opcode\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"A shared routine for pair atomic binary operations.\"\n          },\n          {\n            \"name\": \"InstructionSelectorT::VisitWord32AtomicPairAdd\",\n            \"parameters\": [\n              \"OpIndex node\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Visits a Word32AtomicPairAdd operation, generating"
}