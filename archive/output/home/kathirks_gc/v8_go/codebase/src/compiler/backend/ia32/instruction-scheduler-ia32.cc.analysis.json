{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/backend/ia32/instruction-scheduler-ia32.cc",
  "imports": [
    "src/base/logging.h",
    "src/compiler/backend/instruction-codes.h",
    "src/compiler/backend/instruction-scheduler.h",
    "src/compiler/backend/instruction.h"
  ],
  "classes": [
    {
      "name": "InstructionScheduler",
      "properties": [],
      "methods": [
        {
          "name": "SchedulerSupported",
          "parameters": [],
          "return_type": "bool",
          "logic": "Indicates whether the instruction scheduler is supported for the IA32 architecture. Always returns true in this case."
        },
        {
          "name": "GetTargetInstructionFlags",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "int",
          "logic": "Determines instruction-specific flags based on the instruction's opcode. These flags indicate properties like whether the instruction is a load operation, has side effects, or might need a deoptimization or trap check. The function contains a large switch statement covering various IA32 opcodes to determine appropriate flags, especially dealing with loads, stores, and atomic operations."
        },
        {
          "name": "GetInstructionLatency",
          "parameters": [
            "const Instruction* instr"
          ],
          "return_type": "int",
          "logic": "Returns the latency (execution time) of the given instruction. The latency is based on the IA32 instruction's opcode and is empirically determined. Contains a switch statement to map opcodes to latency values."
        }
      ]
    }
  ],
  "functions": []
}