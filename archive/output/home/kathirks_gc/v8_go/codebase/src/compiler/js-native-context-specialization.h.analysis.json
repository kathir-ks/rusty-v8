{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/js-native-context-specialization.h",
  "imports": [
    "<optional>",
    "src/base/flags.h",
    "src/compiler/graph-assembler.h",
    "src/compiler/graph-reducer.h",
    "src/compiler/js-heap-broker.h",
    "src/deoptimizer/deoptimize-reason.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "JSNativeContextSpecialization",
      "properties": [
        "jsgraph_",
        "broker_",
        "flags_",
        "global_object_",
        "global_proxy_",
        "zone_",
        "shared_zone_",
        "type_cache_",
        "created_strings_"
      ],
      "methods": [
        {
          "name": "JSNativeContextSpecialization",
          "parameters": [
            "Editor* editor",
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "Flags flags",
            "Zone* zone",
            "Zone* shared_zone"
          ],
          "return_type": "void",
          "logic": "Constructor for the JSNativeContextSpecialization class. Initializes the reducer with provided JSGraph, broker, flags, and zones."
        },
        {
          "name": "reducer_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the reducer (JSNativeContextSpecialization)."
        },
        {
          "name": "Reduce",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "The main reduction function. It dispatches to specific reduction methods based on the node's type."
        },
        {
          "name": "GetMaxStringLength",
          "parameters": [
            "JSHeapBroker* broker",
            "Node* node"
          ],
          "return_type": "std::optional<size_t>",
          "logic": "Utility for folding string constant concatenation. Supports JSAdd nodes and nodes typed as string or number."
        },
        {
          "name": "ReduceJSAdd",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSAdd node. Likely performs constant folding or strength reduction based on the operands."
        },
        {
          "name": "ReduceJSAsyncFunctionEnter",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSAsyncFunctionEnter node.  Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSAsyncFunctionReject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSAsyncFunctionReject node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSAsyncFunctionResolve",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSAsyncFunctionResolve node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSGetSuperConstructor",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSGetSuperConstructor node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSFindNonDefaultConstructorOrConstruct",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSFindNonDefaultConstructorOrConstruct node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSInstanceOf",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSInstanceOf node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSHasInPrototypeChain",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSHasInPrototypeChain node. Likely specializes the node based on the context and prototype chain information."
        },
        {
          "name": "ReduceJSOrdinaryHasInstance",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSOrdinaryHasInstance node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSPromiseResolve",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSPromiseResolve node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSResolvePromise",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSResolvePromise node. Likely specializes the node based on context."
        },
        {
          "name": "ReduceJSLoadGlobal",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSLoadGlobal node.  Potentially constant folds the load if the global is known at compile time."
        },
        {
          "name": "ReduceJSStoreGlobal",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSStoreGlobal node.  Potentially strength reduces the store."
        },
        {
          "name": "ReduceJSLoadNamed",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSLoadNamed node. Specializes the load based on type feedback."
        },
        {
          "name": "ReduceJSLoadNamedFromSuper",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSLoadNamedFromSuper node. Specializes the load based on type feedback."
        },
        {
          "name": "ReduceJSGetIterator",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSGetIterator node. Specializes the call based on type feedback."
        },
        {
          "name": "ReduceJSSetNamedProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSSetNamedProperty node. Specializes the store based on type feedback."
        },
        {
          "name": "ReduceJSHasProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSHasProperty node. Specializes based on feedback."
        },
        {
          "name": "ReduceJSLoadProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSLoadProperty node."
        },
        {
          "name": "ReduceJSSetKeyedProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSSetKeyedProperty node."
        },
        {
          "name": "ReduceJSDefineKeyedOwnProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSDefineKeyedOwnProperty node."
        },
        {
          "name": "ReduceJSDefineNamedOwnProperty",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSDefineNamedOwnProperty node."
        },
        {
          "name": "ReduceJSDefineKeyedOwnPropertyInLiteral",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSDefineKeyedOwnPropertyInLiteral node."
        },
        {
          "name": "ReduceJSStoreInArrayLiteral",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSStoreInArrayLiteral node."
        },
        {
          "name": "ReduceJSToObject",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSToObject node."
        },
        {
          "name": "ReduceElementAccess",
          "parameters": [
            "Node* node",
            "Node* index",
            "Node* value",
            "ElementAccessFeedback const& feedback"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an element access (e.g., array access) based on feedback."
        },
        {
          "name": "ReducePropertyAccess",
          "parameters": [
            "Node* node",
            "Node* key",
            "OptionalNameRef static_name",
            "Node* value",
            "FeedbackSource const& source",
            "AccessMode access_mode"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a property access based on feedback."
        },
        {
          "name": "ReduceNamedAccess",
          "parameters": [
            "Node* node",
            "Node* value",
            "NamedAccessFeedback const& feedback",
            "AccessMode access_mode",
            "Node* key"
          ],
          "return_type": "Reduction",
          "logic": "Reduces named property access based on feedback."
        },
        {
          "name": "ReduceMegaDOMPropertyAccess",
          "parameters": [
            "Node* node",
            "Node* value",
            "MegaDOMPropertyAccessFeedback const& feedback",
            "FeedbackSource const& source"
          ],
          "return_type": "Reduction",
          "logic": "Reduces mega DOM property access based on feedback."
        },
        {
          "name": "ReduceGlobalAccess",
          "parameters": [
            "Node* node",
            "Node* lookup_start_object",
            "Node* receiver",
            "Node* value",
            "NameRef name",
            "AccessMode access_mode",
            "Node* key",
            "PropertyCellRef property_cell",
            "Node* effect"
          ],
          "return_type": "Reduction",
          "logic": "Reduces global access based on feedback."
        },
        {
          "name": "ReduceElementLoadFromHeapConstant",
          "parameters": [
            "Node* node",
            "Node* key",
            "AccessMode access_mode",
            "KeyedAccessLoadMode load_mode"
          ],
          "return_type": "Reduction",
          "logic": "Reduces element load from heap constant."
        },
        {
          "name": "ReduceElementAccessOnString",
          "parameters": [
            "Node* node",
            "Node* index",
            "Node* value",
            "KeyedAccessMode const& keyed_mode"
          ],
          "return_type": "Reduction",
          "logic": "Reduces element access on string."
        },
        {
          "name": "ReduceEagerDeoptimize",
          "parameters": [
            "Node* node",
            "DeoptimizeReason reason"
          ],
          "return_type": "Reduction",
          "logic": "Reduces an eager deoptimization node."
        },
        {
          "name": "ReduceJSToString",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSToString node."
        },
        {
          "name": "ReduceJSLoadPropertyWithEnumeratedKey",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Reduction",
          "logic": "Reduces a JSLoadPropertyWithEnumeratedKey node."
        },
        {
          "name": "CreateStringConstant",
          "parameters": [
            "Node* node"
          ],
          "return_type": "Handle<String>",
          "logic": "Creates a string constant handle from a node."
        },
        {
          "name": "BuildPropertyAccess",
          "parameters": [
            "Node* lookup_start_object",
            "Node* receiver",
            "Node* value",
            "Node* context",
            "Node* frame_state",
            "Node* effect",
            "Node* control",
            "NameRef name",
            "ZoneVector<Node*>* if_exceptions",
            "PropertyAccessInfo const& access_info",
            "AccessMode access_mode"
          ],
          "return_type": "std::optional<ValueEffectControl>",
          "logic": "Constructs a subgraph for property access."
        },
        {
          "name": "BuildPropertyLoad",
          "parameters": [
            "Node* lookup_start_object",
            "Node* receiver",
            "Node* context",
            "Node* frame_state",
            "Node* effect",
            "Node* control",
            "NameRef name",
            "ZoneVector<Node*>* if_exceptions",
            "PropertyAccessInfo const& access_info"
          ],
          "return_type": "std::optional<ValueEffectControl>",
          "logic": "Constructs a subgraph for property load."
        },
        {
          "name": "BuildPropertyStore",
          "parameters": [
            "Node* receiver",
            "Node* value",
            "Node* context",
            "Node* frame_state",
            "Node* effect",
            "Node* control",
            "NameRef name",
            "ZoneVector<Node*>* if_exceptions",
            "PropertyAccessInfo const& access_info",
            "AccessMode access_mode"
          ],
          "return_type": "ValueEffectControl",
          "logic": "Constructs a subgraph for property store."
        },
        {
          "name": "BuildPropertyTest",
          "parameters": [
            "Node* effect",
            "Node* control",
            "PropertyAccessInfo const& access_info"
          ],
          "return_type": "ValueEffectControl",
          "logic": "Constructs a subgraph for property test."
        },
        {
          "name": "InlinePropertyGetterCall",
          "parameters": [
            "Node* receiver",
            "ConvertReceiverMode receiver_mode",
            "Node* lookup_start_object",
            "Node* context",
            "Node* frame_state",
            "Node** effect",
            "Node** control",
            "ZoneVector<Node*>* if_exceptions",
            "PropertyAccessInfo const& access_info"
          ],
          "return_type": "Node*",
          "logic": "Inlines a property getter call."
        },
        {
          "name": "InlinePropertySetterCall",
          "parameters": [
            "Node* receiver",
            "Node* value",
            "Node* context",
            "Node* frame_state",
            "Node** effect",
            "Node** control",
            "ZoneVector<Node*>* if_exceptions",
            "PropertyAccessInfo const& access_info"
          ],
          "return_type": "void",
          "logic": "Inlines a property setter call."
        },
        {
          "name": "InlineApiCall",
          "parameters": [
            "Node* receiver",
            "Node* frame_state",
            "Node* value",
            "Node** effect",
            "Node** control",
            "FunctionTemplateInfoRef function_template_info",
            "const FeedbackSource& feedback"
          ],
          "return_type": "Node*",
          "logic": "Inlines an API call."
        },
        {
          "name": "BuildElementAccess",
          "parameters": [
            "Node* receiver",
            "Node* index",
            "Node* value",
            "Node* effect",
            "Node* control",
            "Node* context",
            "ElementAccessInfo const& access_info",
            "KeyedAccessMode const& keyed_mode"
          ],
          "return_type": "ValueEffectControl",
          "logic": "Constructs a subgraph for element access."
        },
        {
          "name": "BuildElementAccessForTypedArrayOrRabGsabTypedArray",
          "parameters": [
            "Node* receiver",
            "Node* index",
            "Node* value",
            "Node* effect",
            "Node* control",
            "Node* context",
            "ElementsKind elements_kind",
            "KeyedAccessMode const& keyed_mode"
          ],
          "return_type": "ValueEffectControl",
          "logic": "Constructs a subgraph for element access for typed arrays."
        },
        {
          "name": "BuildIndexedStringLoad",
          "parameters": [
            "Node* receiver",
            "Node* index",
            "Node* length",
            "Node** effect",
            "Node** control",
            "KeyedAccessLoadMode load_mode"
          ],
          "return_type": "Node*",
          "logic": "Construct appropriate subgraph to load from a String."
        },
        {
          "name": "BuildExtendPropertiesBackingStore",
          "parameters": [
            "MapRef map",
            "Node* properties",
            "Node* effect",
            "Node* control"
          ],
          "return_type": "Node*",
          "logic": "Construct appropriate subgraph to extend properties backing store."
        },
        {
          "name": "BuildCheckEqualsName",
          "parameters": [
            "NameRef name",
            "Node* value",
            "Node* effect",
            "Node* control"
          ],
          "return_type": "Node*",
          "logic": "Construct appropriate subgraph to check that the {value} matches the previously recorded {name} feedback."
        },
        {
          "name": "Concatenate",
          "parameters": [
            "Handle<String> left",
            "Handle<String> right"
          ],
          "return_type": "Handle<String>",
          "logic": "Concatenates {left} and {right}."
        },
        {
          "name": "StringCanSafelyBeRead",
          "parameters": [
            "Node* const node",
            "Handle<String> str"
          ],
          "return_type": "bool",
          "logic": "Returns true if {str} can safely be read."
        },
        {
          "name": "CanTreatHoleAsUndefined",
          "parameters": [
            "ZoneVector<MapRef> const& receiver_maps"
          ],
          "return_type": "bool",
          "logic": "Checks if we can turn the hole into undefined when loading an element from an object with one of the {receiver_maps}; sets up appropriate code dependencies and might use the array protector cell."
        },
        {
          "name": "RemoveImpossibleMaps",
          "parameters": [
            "Node* object",
            "ZoneVector<MapRef>* maps"
          ],
          "return_type": "void",
          "logic": "Removes impossible maps for the given {object} at the current {effect}."
        },
        {
          "name": "TryRefineElementAccessFeedback",
          "parameters": [
            "ElementAccessFeedback const& feedback",
            "Node* receiver",
            "Effect effect"
          ],
          "return_type": "ElementAccessFeedback const&",
          "logic": "Try to refine element access feedback"
        },
        {
          "name": "InferMaps",
          "parameters": [
            "Node* object",
            "Effect effect",
            "ZoneVector<MapRef>* maps"
          ],
          "return_type": "bool",
          "logic": "Try to infer maps for the given {object} at the current {effect}."
        },
        {
          "name": "InferRootMap",
          "parameters": [
            "Node* object"
          ],
          "return_type": "OptionalMapRef",
          "logic": "Try to infer a root map for the {object} independent of the current program location."
        },
        {
          "name": "InferHasInPrototypeChain",
          "parameters": [
            "Node* receiver",
            "Effect effect",
            "HeapObjectRef prototype"
          ],
          "return_type": "InferHasInPrototypeChainResult",
          "logic": "Checks if we know at compile time that the {receiver} either definitely has the {prototype} in it's prototype chain, or the {receiver} definitely doesn't have the {prototype} in it's prototype chain."
        },
        {
          "name": "BuildLoadPrototypeFromObject",
          "parameters": [
            "Node* object",
            "Node* effect",
            "Node* control"
          ],
          "return_type": "Node*",
          "logic": "Builds graph to load the prototype from an object."
        },
        {
          "name": "ReleaseEffectAndControlFromAssembler",
          "parameters": [
            "JSGraphAssembler* assembler"
          ],
          "return_type": "std::pair<Node*, Node*>",
          "logic": "Releases the effect and control nodes from a JSGraphAssembler."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "JSHeapBroker*",
          "logic": "Returns the JSHeapBroker."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the Isolate."
        },
        {
          "name": "factory",
          "parameters": [],
          "return_type": "Factory*",
          "logic": "Returns the Factory."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder."
        },
        {
          "name": "javascript",
          "parameters": [],
          "return_type": "JSOperatorBuilder*",
          "logic": "Returns the JSOperatorBuilder."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder."
        },
        {
          "name": "flags",
          "parameters": [],
          "return_type": "Flags",
          "logic": "Returns the flags."
        },
        {
          "name": "global_object",
          "parameters": [],
          "return_type": "DirectHandle<JSGlobalObject>",
          "logic": "Returns the global object."
        },
        {
          "name": "global_proxy",
          "parameters": [],
          "return_type": "DirectHandle<JSGlobalProxy>",
          "logic": "Returns the global proxy."
        },
        {
          "name": "native_context",
          "parameters": [],
          "return_type": "NativeContextRef",
          "logic": "Returns the native context."
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "CompilationDependencies*",
          "logic": "Returns the compilation dependencies."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone."
        },
        {
          "name": "shared_zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the shared zone."
        }
      ]
    },
    {
      "name": "ValueEffectControl",
      "properties": [
        "value_",
        "effect_",
        "control_"
      ],
      "methods": [
        {
          "name": "ValueEffectControl",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor, initializes all nodes to nullptr"
        },
        {
          "name": "ValueEffectControl",
          "parameters": [
            "Node* value",
            "Node* effect",
            "Node* control"
          ],
          "return_type": "void",
          "logic": "Constructor, initializes value, effect, and control nodes."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the value node."
        },
        {
          "name": "effect",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the effect node."
        },
        {
          "name": "control",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Returns the control node."
        }
      ]
    }
  ],
  "functions": []
}