{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/wasm-compiler-definitions.h",
  "imports": [
    "<ostream>",
    "src/base/hashing.h",
    "src/base/vector.h",
    "src/codegen/linkage-location.h",
    "src/codegen/register.h",
    "src/codegen/signature.h",
    "src/wasm/signature-hashing.h",
    "src/wasm/value-type.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "WasmTypeCheckConfig",
      "properties": [
        "wasm::ValueType from",
        "const wasm::ValueType to"
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "WasmTypeCheckConfig const& p"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for WasmTypeCheckConfig to allow printing the struct to an ostream.  It outputs the names of the 'from' and 'to' ValueTypes."
    },
    {
      "name": "hash_value",
      "parameters": [
        "WasmTypeCheckConfig const& p"
      ],
      "return_type": "size_t",
      "logic": "Calculates a hash value for a WasmTypeCheckConfig object. It combines the raw bit fields of the 'from' and 'to' ValueTypes using base::hash_combine."
    },
    {
      "name": "operator==",
      "parameters": [
        "const WasmTypeCheckConfig& p1",
        "const WasmTypeCheckConfig& p2"
      ],
      "return_type": "bool",
      "logic": "Overloads the == operator for WasmTypeCheckConfig to allow comparing two struct instances for equality based on their 'from' and 'to' ValueType fields."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "CheckForNull null_check"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for CheckForNull enum to allow printing the enum to an ostream.  The implementation of the actual stream insertion is probably elsewhere."
    },
    {
      "name": "GetDebugName",
      "parameters": [
        "Zone* zone",
        "const wasm::WasmModule* module",
        "const wasm::WireBytesStorage* wire_bytes",
        "int index"
      ],
      "return_type": "base::Vector<const char>",
      "logic": "Retrieves a debug name for a given Wasm element based on the module, wire bytes, and index. It allocates the name within the provided zone."
    },
    {
      "name": "GetWasmCallDescriptor",
      "parameters": [
        "Zone* zone",
        "const Signature<T>* signature",
        "WasmCallKind kind",
        "bool need_frame_state"
      ],
      "return_type": "CallDescriptor*",
      "logic": "Creates and returns a CallDescriptor for a Wasm call based on the provided signature, call kind, and frame state requirements.  This function is templated."
    },
    {
      "name": "GetWasmCallDescriptor",
      "parameters": [
        "Zone*",
        "const Signature<wasm::ValueType>*",
        "WasmCallKind",
        "bool"
      ],
      "return_type": "CallDescriptor*",
      "logic": "Explicit template instantiation declaration for GetWasmCallDescriptor with ValueType."
    },
    {
      "name": "BuildLocations",
      "parameters": [
        "Zone* zone",
        "const Signature<T>* sig",
        "bool extra_callable_param",
        "int* parameter_slots",
        "int* return_slots"
      ],
      "return_type": "LocationSignature*",
      "logic": "Builds a LocationSignature based on the provided signature and other parameters. This appears to iterate through the signature and populate location information which is important for calling conventions and register allocation."
    }
  ]
}