{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/globals.h",
  "imports": [
    "src/common/globals.h",
    "src/flags/flags.h",
    "src/objects/js-objects.h",
    "src/runtime/runtime.h",
    "<ostream>"
  ],
  "classes": [],
  "functions": [
    {
      "name": "CollectFeedbackInGenericLowering",
      "parameters": [],
      "return_type": "bool",
      "logic": "Determines whether to collect feedback in generic lowering based on the v8_flags.turbo_collect_feedback_in_generic_lowering flag. It's used for experimenting with feedback collection in optimized code produced by generic lowering."
    },
    {
      "name": "GetBuiltinForStackCheckKind",
      "parameters": [
        "StackCheckKind kind"
      ],
      "return_type": "Runtime::FunctionId",
      "logic": "Returns the appropriate Runtime::FunctionId for a given StackCheckKind.  It maps the stack check kind to a runtime function for stack guarding."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "LazyDeoptOnThrow lazy_deopt_on_throw"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the LazyDeoptOnThrow enum. It provides a string representation of the enum value for output to a stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "StackCheckKind kind"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the StackCheckKind enum. It provides a string representation of the enum value for output to a stream."
    },
    {
      "name": "hash_value",
      "parameters": [
        "StackCheckKind kind"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value for the StackCheckKind enum by casting it to size_t."
    },
    {
      "name": "hash_value",
      "parameters": [
        "CheckForMinusZeroMode mode"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value for the CheckForMinusZeroMode enum by casting it to size_t."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "CheckForMinusZeroMode mode"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the CheckForMinusZeroMode enum. It provides a string representation of the enum value for output to a stream."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "CallFeedbackRelation call_feedback_relation"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for the CallFeedbackRelation enum. It provides a string representation of the enum value for output to a stream."
    },
    {
      "name": "hash_value",
      "parameters": [
        "MemoryAccessKind"
      ],
      "return_type": "size_t",
      "logic": "Declaration of hash_value for MemoryAccessKind, definition is likely elsewhere."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream&",
        "MemoryAccessKind"
      ],
      "return_type": "std::ostream&",
      "logic": "Declaration of overloaded operator<< for MemoryAccessKind, definition is likely elsewhere."
    },
    {
      "name": "GetArrayTypeFromElementsKind",
      "parameters": [
        "ElementsKind kind"
      ],
      "return_type": "ExternalArrayType",
      "logic": "Maps an ElementsKind to the corresponding ExternalArrayType. This is used to determine the type of external array based on the elements it contains."
    },
    {
      "name": "ExternalArrayElementSize",
      "parameters": [
        "const ExternalArrayType element_type"
      ],
      "return_type": "int",
      "logic": "Returns the size (in bytes) of an element in an external array, based on its ExternalArrayType."
    }
  ]
}