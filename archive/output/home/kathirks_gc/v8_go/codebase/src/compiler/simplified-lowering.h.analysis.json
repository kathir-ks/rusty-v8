{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/simplified-lowering.h",
  "imports": [
    "src/compiler/js-graph.h",
    "src/compiler/machine-operator.h",
    "src/compiler/node-properties.h",
    "src/compiler/node.h",
    "src/compiler/simplified-operator.h"
  ],
  "classes": [
    {
      "name": "SimplifiedLowering",
      "properties": [
        "jsgraph_",
        "broker_",
        "zone_",
        "type_cache_",
        "to_number_code_",
        "to_number_convert_big_int_code_",
        "to_numeric_code_",
        "to_number_operator_",
        "to_number_convert_big_int_operator_",
        "to_numeric_operator_",
        "source_positions_",
        "node_origins_",
        "tick_counter_",
        "linkage_",
        "info_",
        "observe_node_manager_"
      ],
      "methods": [
        {
          "name": "SimplifiedLowering",
          "parameters": [
            "JSGraph* jsgraph",
            "JSHeapBroker* broker",
            "Zone* zone",
            "SourcePositionTable* source_position",
            "NodeOriginTable* node_origins",
            "TickCounter* tick_counter",
            "Linkage* linkage",
            "OptimizedCompilationInfo* info",
            "ObserveNodeManager* observe_node_manager"
          ],
          "return_type": "void",
          "logic": "Constructor for the SimplifiedLowering class, initializes its members."
        },
        {
          "name": "~SimplifiedLowering",
          "parameters": [],
          "return_type": "void",
          "logic": "Default destructor for the SimplifiedLowering class."
        },
        {
          "name": "LowerAllNodes",
          "parameters": [],
          "return_type": "void",
          "logic": "The main entry point for the lowering process, it iterates through all nodes and performs lowering transformations."
        },
        {
          "name": "DoMax",
          "parameters": [
            "Node* node",
            "Operator const* op",
            "MachineRepresentation rep"
          ],
          "return_type": "void",
          "logic": "Lowers a Max operation for a specific machine representation."
        },
        {
          "name": "DoMin",
          "parameters": [
            "Node* node",
            "Operator const* op",
            "MachineRepresentation rep"
          ],
          "return_type": "void",
          "logic": "Lowers a Min operation for a specific machine representation."
        },
        {
          "name": "DoJSToNumberOrNumericTruncatesToFloat64",
          "parameters": [
            "Node* node",
            "RepresentationSelector* selector"
          ],
          "return_type": "void",
          "logic": "Lowers a JSToNumberOrNumeric operation that truncates to a Float64 representation."
        },
        {
          "name": "DoJSToNumberOrNumericTruncatesToWord32",
          "parameters": [
            "Node* node",
            "RepresentationSelector* selector"
          ],
          "return_type": "void",
          "logic": "Lowers a JSToNumberOrNumeric operation that truncates to a Word32 representation."
        },
        {
          "name": "DoIntegral32ToBit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers an Integral32ToBit operation."
        },
        {
          "name": "DoOrderedNumberToBit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers an OrderedNumberToBit operation."
        },
        {
          "name": "DoNumberToBit",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers a NumberToBit operation."
        },
        {
          "name": "DoIntegerToUint8Clamped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers an IntegerToUint8Clamped operation."
        },
        {
          "name": "DoNumberToUint8Clamped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers a NumberToUint8Clamped operation."
        },
        {
          "name": "DoSigned32ToUint8Clamped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers a Signed32ToUint8Clamped operation."
        },
        {
          "name": "DoUnsigned32ToUint8Clamped",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Lowers an Unsigned32ToUint8Clamped operation."
        },
        {
          "name": "ChangeOp",
          "parameters": [
            "Node* node",
            "const Operator* new_op"
          ],
          "return_type": "void",
          "logic": "Changes the operator of a node and notifies the ObserveNodeManager."
        },
        {
          "name": "Float64Round",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that rounds a Float64 node."
        },
        {
          "name": "Float64Sign",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that gets the sign of a Float64 node."
        },
        {
          "name": "Int32Abs",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that gets the absolute value of an Int32 node."
        },
        {
          "name": "Int32Div",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that divides an Int32 node."
        },
        {
          "name": "Int32Mod",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that mods an Int32 node."
        },
        {
          "name": "Int32Sign",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that gets the sign of an Int32 node."
        },
        {
          "name": "Uint32Div",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that divides a Uint32 node."
        },
        {
          "name": "Uint32Mod",
          "parameters": [
            "Node* const node"
          ],
          "return_type": "Node*",
          "logic": "Lowering helper that mods a Uint32 node."
        },
        {
          "name": "ToNumberCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Retrieves the ToNumber code object, potentially creating it if it doesn't exist."
        },
        {
          "name": "ToNumberConvertBigIntCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Retrieves the ToNumberConvertBigInt code object, potentially creating it if it doesn't exist."
        },
        {
          "name": "ToNumericCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Retrieves the ToNumeric code object, potentially creating it if it doesn't exist."
        },
        {
          "name": "Ieee754Fp64ToFp16RawBitsCode",
          "parameters": [],
          "return_type": "Node*",
          "logic": "Retrieves the Ieee754Fp64ToFp16RawBits code object, potentially creating it if it doesn't exist."
        },
        {
          "name": "ToNumberOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Retrieves the ToNumber operator, potentially creating it if it doesn't exist."
        },
        {
          "name": "ToNumberConvertBigIntOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Retrieves the ToNumberConvertBigInt operator, potentially creating it if it doesn't exist."
        },
        {
          "name": "ToNumericOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Retrieves the ToNumeric operator, potentially creating it if it doesn't exist."
        },
        {
          "name": "Ieee754Fp64ToFp16RawBitsOperator",
          "parameters": [],
          "return_type": "Operator const*",
          "logic": "Retrieves the Ieee754Fp64ToFp16RawBits operator, potentially creating it if it doesn't exist."
        },
        {
          "name": "isolate",
          "parameters": [],
          "return_type": "Isolate*",
          "logic": "Returns the isolate associated with the JSGraph."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with the JSGraph."
        },
        {
          "name": "jsgraph",
          "parameters": [],
          "return_type": "JSGraph*",
          "logic": "Returns the JSGraph."
        },
        {
          "name": "graph",
          "parameters": [],
          "return_type": "TFGraph*",
          "logic": "Returns the TFGraph associated with the JSGraph."
        },
        {
          "name": "common",
          "parameters": [],
          "return_type": "CommonOperatorBuilder*",
          "logic": "Returns the CommonOperatorBuilder associated with the JSGraph."
        },
        {
          "name": "machine",
          "parameters": [],
          "return_type": "MachineOperatorBuilder*",
          "logic": "Returns the MachineOperatorBuilder associated with the JSGraph."
        },
        {
          "name": "simplified",
          "parameters": [],
          "return_type": "SimplifiedOperatorBuilder*",
          "logic": "Returns the SimplifiedOperatorBuilder associated with the JSGraph."
        },
        {
          "name": "linkage",
          "parameters": [],
          "return_type": "Linkage*",
          "logic": "Returns the Linkage."
        }
      ]
    },
    {
      "name": "NodeProperties",
      "properties": [],
      "methods": [
        {
          "name": "ChangeOp",
          "parameters": [
            "Node* node",
            "const Operator* new_op"
          ],
          "return_type": "void",
          "logic": "This method is overridden to prevent direct calls to the base class's ChangeOp, enforcing use of SimplifiedLowering::ChangeOp."
        }
      ]
    }
  ],
  "functions": []
}