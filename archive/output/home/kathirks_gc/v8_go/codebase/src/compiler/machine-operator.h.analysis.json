{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/machine-operator.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/machine-operator.h\",\n  \"imports\": [\n    \"<optional>\",\n    \"src/base/compiler-specific.h\",\n    \"src/base/enum-set.h\",\n    \"src/base/flags.h\",\n    \"src/codegen/atomic-memory-order.h\",\n    \"src/codegen/machine-type.h\",\n    \"src/compiler/globals.h\",\n    \"src/compiler/write-barrier-kind.h\",\n    \"src/zone/zone.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"OptionalOperator\",\n      \"properties\": [\n        \"supported_\",\n        \"op_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OptionalOperator\",\n          \"parameters\": [\n            \"bool supported\",\n            \"const Operator* op\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the supported_ and op_ members.\"\n        },\n        {\n          \"name\": \"IsSupported\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns the value of the supported_ member, indicating whether the operator is supported.\"\n        },\n        {\n          \"name\": \"op\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns the operator pointer if it's supported, otherwise asserts.\"\n        },\n        {\n          \"name\": \"placeholder\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Always returns the operator pointer, even if it's not supported. Useful for placeholder operators.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AtomicLoadParameters\",\n      \"properties\": [\n        \"representation_\",\n        \"order_\",\n        \"kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AtomicLoadParameters\",\n          \"parameters\": [\n            \"LoadRepresentation representation\",\n            \"AtomicMemoryOrder order\",\n            \"MemoryAccessKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the representation_, order_, and kind_ members.\"\n        },\n        {\n          \"name\": \"representation\",\n          \"parameters\": [],\n          \"return_type\": \"LoadRepresentation\",\n          \"logic\": \"Returns the representation_ member.\"\n        },\n        {\n          \"name\": \"order\",\n          \"parameters\": [],\n          \"return_type\": \"AtomicMemoryOrder\",\n          \"logic\": \"Returns the order_ member.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"MemoryAccessKind\",\n          \"logic\": \"Returns the kind_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AtomicOpParameters\",\n      \"properties\": [\n        \"type_\",\n        \"kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AtomicOpParameters\",\n          \"parameters\": [\n            \"MachineType type\",\n            \"MemoryAccessKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the type_ and kind_ members.\"\n        },\n        {\n          \"name\": \"type\",\n          \"parameters\": [],\n          \"return_type\": \"MachineType\",\n          \"logic\": \"Returns the type_ member.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"MemoryAccessKind\",\n          \"logic\": \"Returns the kind_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LoadTransformParameters\",\n      \"properties\": [\n        \"kind\",\n        \"transformation\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"LoadLaneParameters\",\n      \"properties\": [\n        \"kind\",\n        \"rep\",\n        \"laneidx\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"StoreRepresentation\",\n      \"properties\": [\n        \"representation_\",\n        \"write_barrier_kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StoreRepresentation\",\n          \"parameters\": [\n            \"MachineRepresentation representation\",\n            \"WriteBarrierKind write_barrier_kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the representation_ and write_barrier_kind_ members.\"\n        },\n        {\n          \"name\": \"representation\",\n          \"parameters\": [],\n          \"return_type\": \"MachineRepresentation\",\n          \"logic\": \"Returns the representation_ member.\"\n        },\n        {\n          \"name\": \"write_barrier_kind\",\n          \"parameters\": [],\n          \"return_type\": \"WriteBarrierKind\",\n          \"logic\": \"Returns the write_barrier_kind_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StorePairRepresentation\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"StorePairRepresentation\",\n          \"parameters\": [\n            \"StoreRepresentation first\",\n            \"StoreRepresentation second\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the pair with first and second StoreRepresentations.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AtomicStoreParameters\",\n      \"properties\": [\n        \"store_representation_\",\n        \"order_\",\n        \"kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"AtomicStoreParameters\",\n          \"parameters\": [\n            \"MachineRepresentation representation\",\n            \"WriteBarrierKind write_barrier_kind\",\n            \"AtomicMemoryOrder order\",\n            \"MemoryAccessKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the store_representation_, order_, and kind_ members.\"\n        },\n        {\n          \"name\": \"representation\",\n          \"parameters\": [],\n          \"return_type\": \"MachineRepresentation\",\n          \"logic\": \"Returns the representation from the store_representation_ member.\"\n        },\n        {\n          \"name\": \"write_barrier_kind\",\n          \"parameters\": [],\n          \"return_type\": \"WriteBarrierKind\",\n          \"logic\": \"Returns the write_barrier_kind from the store_representation_ member.\"\n        },\n        {\n          \"name\": \"order\",\n          \"parameters\": [],\n          \"return_type\": \"AtomicMemoryOrder\",\n          \"logic\": \"Returns the order_ member.\"\n        },\n        {\n          \"name\": \"kind\",\n          \"parameters\": [],\n          \"return_type\": \"MemoryAccessKind\",\n          \"logic\": \"Returns the kind_ member.\"\n        },\n        {\n          \"name\": \"store_representation\",\n          \"parameters\": [],\n          \"return_type\": \"StoreRepresentation\",\n          \"logic\": \"Returns the store_representation_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StoreLaneParameters\",\n      \"properties\": [\n        \"kind\",\n        \"rep\",\n        \"laneidx\"\n      ],\n      \"methods\": []\n    },\n    {\n      \"name\": \"StackSlotRepresentation\",\n      \"properties\": [\n        \"size_\",\n        \"alignment_\",\n        \"is_tagged_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StackSlotRepresentation\",\n          \"parameters\": [\n            \"int size\",\n            \"int alignment\",\n            \"bool is_tagged\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the size_, alignment_, and is_tagged_ members.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the size_ member.\"\n        },\n        {\n          \"name\": \"alignment\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the alignment_ member.\"\n        },\n        {\n          \"name\": \"is_tagged\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns the is_tagged_ member.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SimdImmediateParameter\",\n      \"properties\": [\n        \"immediate_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SimdImmediateParameter\",\n          \"parameters\": [\n            \"const uint8_t immediate[simd_size]\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the immediate_ array by copying data from the provided immediate array.\"\n        },\n        {\n          \"name\": \"immediate\",\n          \"parameters\": [],\n          \"return_type\": \"const std::array<uint8_t, simd_size>&\",\n          \"logic\": \"Returns the immediate_ array.\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"const uint8_t*\",\n          \"logic\": \"Returns a pointer to the beginning of the immediate_ array.\"\n        },\n        {\n          \"name\": \"operator[]\",\n          \"parameters\": [\n            \"int x\"\n          ],\n          \"return_type\": \"uint8_t\",\n          \"logic\": \"Returns the element at index x in the immediate_ array.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AlignmentRequirements\",\n      \"properties\": [\n        \"unalignedSupport_\",\n        \"unalignedLoadUnsupportedTypes_\",\n        \"unalignedStoreUnsupportedTypes_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"IsUnalignedLoadSupported\",\n          \"parameters\": [\n            \"MachineRepresentation rep\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if unaligned load is supported for a given MachineRepresentation.\"\n        },\n        {\n          \"name\": \"IsUnalignedStoreSupported\",\n          \"parameters\": [\n            \"MachineRepresentation rep\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if unaligned store is supported for a given MachineRepresentation.\"\n        },\n        {\n          \"name\": \"FullUnalignedAccessSupport\",\n          \"parameters\": [],\n          \"return_type\": \"AlignmentRequirements\",\n          \"logic\": \"Returns an AlignmentRequirements object that enables full unaligned access support.\"\n        },\n        {\n          \"name\": \"NoUnalignedAccessSupport\",\n          \"parameters\": [],\n          \"return_type\": \"AlignmentRequirements\",\n          \"logic\": \"Returns an AlignmentRequirements object that disables unaligned access support.\"\n        },\n        {\n          \"name\": \"SomeUnalignedAccessUnsupported\",\n          \"parameters\": [\n            \"base::EnumSet<MachineRepresentation> unalignedLoadUnsupportedTypes\",\n            \"base::EnumSet<MachineRepresentation> unalignedStoreUnsupportedTypes\"\n          ],\n          \"return_type\": \"AlignmentRequirements\",\n          \"logic\": \"Returns an AlignmentRequirements object that selectively disables unaligned access for certain MachineRepresentations.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MachineOperatorBuilder\",\n      \"properties\": [\n        \"zone_\",\n        \"cache_\",\n        \"word_\",\n        \"flags_\",\n        \"alignment_requirements_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"MachineOperatorBuilder\",\n          \"parameters\": [\n            \"Zone* zone\",\n            \"MachineRepresentation word\",\n            \"Flags supportedOperators\",\n            \"AlignmentRequirements alignmentRequirements\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor. Initializes the member variables with the provided arguments.\"\n        },\n        {\n          \"name\": \"Comment\",\n          \"parameters\": [\n            \"const char* msg\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that represents a comment in the graph.\"\n        },\n        {\n          \"name\": \"AbortCSADcheck\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that represents an abort CSA check.\"\n        },\n        {\n          \"name\": \"DebugBreak\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that represents a debug break.\"\n        },\n        {\n          \"name\": \"Word32And\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit bitwise AND operation.\"\n        },\n        {\n          \"name\": \"Word32Or\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit bitwise OR operation.\"\n        },\n        {\n          \"name\": \"Word32Xor\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit bitwise XOR operation.\"\n        },\n        {\n          \"name\": \"Word32Shl\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit left shift operation.\"\n        },\n        {\n          \"name\": \"Word32Shr\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit logical right shift operation.\"\n        },\n        {\n          \"name\": \"Word32Sar\",\n          \"parameters\": [\n            \"ShiftKind kind\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit arithmetic right shift operation.\"\n        },\n        {\n          \"name\": \"Word32Rol\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that performs a 32-bit rotate left operation.\"\n        },\n        {\n          \"name\": \"Word32Ror\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit rotate right operation.\"\n        },\n        {\n          \"name\": \"Word32Equal\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit equality comparison.\"\n        },\n        {\n          \"name\": \"Word32Clz\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that counts the leading zeros in a 32-bit word.\"\n        },\n        {\n          \"name\": \"Word32Ctz\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that counts the trailing zeros in a 32-bit word.\"\n        },\n        {\n          \"name\": \"Word32Popcnt\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that counts the number of set bits in a 32-bit word.\"\n        },\n        {\n          \"name\": \"Word64Popcnt\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that counts the number of set bits in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Word32ReverseBits\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that reverses the bits in a 32-bit word.\"\n        },\n        {\n          \"name\": \"Word64ReverseBits\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that reverses the bits in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Word32ReverseBytes\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reverses the bytes in a 32-bit word.\"\n        },\n        {\n          \"name\": \"Word64ReverseBytes\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reverses the bytes in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Simd128ReverseBytes\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reverses the bytes in a 128-bit SIMD value.\"\n        },\n        {\n          \"name\": \"Int32AbsWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that computes the absolute value of a 32-bit integer, with overflow check.\"\n        },\n        {\n          \"name\": \"Int64AbsWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that computes the absolute value of a 64-bit integer, with overflow check.\"\n        },\n        {\n          \"name\": \"Word32ShiftIsSafe\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the target's Word32 shift implementation is directly compatible with JavaScript's specification.\"\n        },\n        {\n          \"name\": \"SatConversionIsSafe\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the target's implementation of float-to-int-conversions is a saturating conversion rounding towards 0.\"\n        },\n        {\n          \"name\": \"SupportsLoadStorePairs\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the target supports performing a pair of loads/stores in a single operation.\"\n        },\n        {\n          \"name\": \"Word64And\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit bitwise AND operation.\"\n        },\n        {\n          \"name\": \"Word64Or\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit bitwise OR operation.\"\n        },\n        {\n          \"name\": \"Word64Xor\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit bitwise XOR operation.\"\n        },\n        {\n          \"name\": \"Word64Shl\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit left shift operation.\"\n        },\n        {\n          \"name\": \"Word64Shr\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit logical right shift operation.\"\n        },\n        {\n          \"name\": \"Word64Sar\",\n          \"parameters\": [\n            \"ShiftKind kind\"\n          ],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit arithmetic right shift operation.\"\n        },\n        {\n          \"name\": \"Word64Rol\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that performs a 64-bit rotate left operation.\"\n        },\n        {\n          \"name\": \"Word64Ror\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit rotate right operation.\"\n        },\n        {\n          \"name\": \"Word64Clz\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that counts the leading zeros in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Word64Ctz\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns an operator that counts the trailing zeros in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Word64RolLowerable\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns a lowerable operator that performs a 64-bit rotate left operation.\"\n        },\n        {\n          \"name\": \"Word64RorLowerable\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a lowerable operator that performs a 64-bit rotate right operation.\"\n        },\n        {\n          \"name\": \"Word64ClzLowerable\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns a lowerable operator that counts the leading zeros in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Word64CtzLowerable\",\n          \"parameters\": [],\n          \"return_type\": \"OptionalOperator\",\n          \"logic\": \"Returns a lowerable operator that counts the trailing zeros in a 64-bit word.\"\n        },\n        {\n          \"name\": \"Word64Equal\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit equality comparison.\"\n        },\n        {\n          \"name\": \"Int32PairAdd\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs an addition of two pairs of 32-bit integers.\"\n        },\n        {\n          \"name\": \"Int32PairSub\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a subtraction of two pairs of 32-bit integers.\"\n        },\n        {\n          \"name\": \"Int32PairMul\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a multiplication of two pairs of 32-bit integers.\"\n        },\n        {\n          \"name\": \"Word32PairShl\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a left shift on a pair of 32-bit integers.\"\n        },\n        {\n          \"name\": \"Word32PairShr\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a logical right shift on a pair of 32-bit integers.\"\n        },\n        {\n          \"name\": \"Word32PairSar\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs an arithmetic right shift on a pair of 32-bit integers.\"\n        },\n        {\n          \"name\": \"Int32Add\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer addition.\"\n        },\n        {\n          \"name\": \"Int32AddWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer addition with overflow check.\"\n        },\n        {\n          \"name\": \"Int32Sub\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer subtraction.\"\n        },\n        {\n          \"name\": \"Int32SubWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer subtraction with overflow check.\"\n        },\n        {\n          \"name\": \"Int32Mul\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"Int32MulWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer multiplication with overflow check.\"\n        },\n        {\n          \"name\": \"Int32MulHigh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer multiplication and returns the high 32 bits of the result.\"\n        },\n        {\n          \"name\": \"Int32Div\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer division.\"\n        },\n        {\n          \"name\": \"Int32Mod\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit integer modulo operation.\"\n        },\n        {\n          \"name\": \"Int32LessThan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit signed less-than comparison.\"\n        },\n        {\n          \"name\": \"Int32LessThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit signed less-than-or-equal comparison.\"\n        },\n        {\n          \"name\": \"Uint32Div\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit unsigned integer division.\"\n        },\n        {\n          \"name\": \"Uint32LessThan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit unsigned less-than comparison.\"\n        },\n        {\n          \"name\": \"Uint32LessThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit unsigned less-than-or-equal comparison.\"\n        },\n        {\n          \"name\": \"Uint32Mod\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit unsigned integer modulo operation.\"\n        },\n        {\n          \"name\": \"Uint32MulHigh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 32-bit unsigned integer multiplication and returns the high 32 bits of the result.\"\n        },\n        {\n          \"name\": \"Int32DivIsSafe\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns a boolean indicating whether Int32 division is safe.\"\n        },\n        {\n          \"name\": \"Uint32DivIsSafe\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns a boolean indicating whether Uint32 division is safe.\"\n        },\n        {\n          \"name\": \"Int64Add\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer addition.\"\n        },\n        {\n          \"name\": \"Int64AddWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer addition with overflow check.\"\n        },\n        {\n          \"name\": \"Int64Sub\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer subtraction.\"\n        },\n        {\n          \"name\": \"Int64SubWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer subtraction with overflow check.\"\n        },\n        {\n          \"name\": \"Int64Mul\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer multiplication.\"\n        },\n        {\n          \"name\": \"Int64MulHigh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer multiplication and returns the high 64 bits of the result.\"\n        },\n        {\n          \"name\": \"Int64MulWithOverflow\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer multiplication with overflow check.\"\n        },\n        {\n          \"name\": \"Int64Div\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer division.\"\n        },\n        {\n          \"name\": \"Int64Mod\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit integer modulo operation.\"\n        },\n        {\n          \"name\": \"Int64LessThan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit signed less-than comparison.\"\n        },\n        {\n          \"name\": \"Int64LessThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit signed less-than-or-equal comparison.\"\n        },\n        {\n          \"name\": \"Uint64Div\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit unsigned integer division.\"\n        },\n        {\n          \"name\": \"Uint64LessThan\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit unsigned less-than comparison.\"\n        },\n        {\n          \"name\": \"Uint64LessThanOrEqual\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit unsigned less-than-or-equal comparison.\"\n        },\n        {\n          \"name\": \"Uint64Mod\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit unsigned integer modulo operation.\"\n        },\n        {\n          \"name\": \"Uint64MulHigh\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that performs a 64-bit unsigned integer multiplication and returns the high 64 bits of the result.\"\n        },\n        {\n          \"name\": \"BitcastTaggedToWord\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reinterprets the bits of a tagged pointer as a word.\"\n        },\n        {\n          \"name\": \"BitcastTaggedToWordForTagAndSmiBits\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reinterprets the bits of a tagged value as a word preserving non-pointer bits.\"\n        },\n        {\n          \"name\": \"BitcastMaybeObjectToWord\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reinterprets the bits of a tagged MaybeObject pointer as word.\"\n        },\n        {\n          \"name\": \"BitcastWordToTagged\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reinterprets the bits of a word as tagged pointer.\"\n        },\n        {\n          \"name\": \"BitcastWordToTaggedSigned\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that reinterprets the bits of a word as a Smi.\"\n        },\n        {\n          \"name\": \"TruncateFloat64ToWord32\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that truncates a JavaScript float64 to int32/uint32.\"\n        },\n        {\n          \"name\": \"ChangeFloat32ToFloat64\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that changes a float32 to a float64.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToInt32\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that changes a float64 to an int32 (narrowing).\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToInt64\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that changes a float64 to an int64.\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToUint32\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that changes a float64 to a uint32 (narrowing).\"\n        },\n        {\n          \"name\": \"ChangeFloat64ToUint64\",\n          \"parameters\": [],\n          \"return_type\": \"const Operator*\",\n          \"logic\": \"Returns an operator that changes a float64 to a uint64.\"\n        },\n        {\n          \"name\": \"TruncateFloat64ToInt64\",\n          \"parameters\": [\n            \"TruncateKind kind\"\n          ],\n          \"return_"
}