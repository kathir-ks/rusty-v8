{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/turboshaft/representations.h",
  "imports": [
    "<cstdint>",
    "include/v8-internal.h",
    "src/base/hashing.h",
    "src/base/logging.h",
    "src/codegen/machine-type.h",
    "src/compiler/turboshaft/utils.h"
  ],
  "classes": [
    {
      "name": "MaybeRegisterRepresentation",
      "properties": [
        "value_"
      ],
      "methods": [
        {
          "name": "MaybeRegisterRepresentation",
          "parameters": [
            "Enum value"
          ],
          "return_type": "constexpr MaybeRegisterRepresentation",
          "logic": "Constructor that initializes the value_ member with the given Enum value."
        },
        {
          "name": "MaybeRegisterRepresentation",
          "parameters": [],
          "return_type": "constexpr MaybeRegisterRepresentation",
          "logic": "Default constructor that initializes the value_ member to kInvalid."
        },
        {
          "name": "is_valid",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if the representation is valid (not kInvalid)."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Returns the Enum value of the representation. Asserts that the representation is valid."
        },
        {
          "name": "operator Enum",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Conversion operator to the Enum type, returns the Enum value of the representation."
        },
        {
          "name": "Word32",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a 32-bit word."
        },
        {
          "name": "Word64",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a 64-bit word."
        },
        {
          "name": "WordPtr",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a word-sized pointer, based on the system's pointer size."
        },
        {
          "name": "Float32",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a 32-bit float."
        },
        {
          "name": "Float64",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a 64-bit float."
        },
        {
          "name": "Tagged",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a tagged pointer."
        },
        {
          "name": "Compressed",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a compressed tagged pointer."
        },
        {
          "name": "Simd128",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a 128-bit SIMD value."
        },
        {
          "name": "Simd256",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing a 256-bit SIMD value."
        },
        {
          "name": "None",
          "parameters": [],
          "return_type": "static constexpr MaybeRegisterRepresentation",
          "logic": "Returns a MaybeRegisterRepresentation representing no register representation."
        },
        {
          "name": "IsWord",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if the representation is a word (Word32 or Word64)."
        },
        {
          "name": "IsFloat",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if the representation is a float (Float32 or Float64)."
        },
        {
          "name": "IsTaggedOrCompressed",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if the representation is Tagged or Compressed."
        },
        {
          "name": "MaxUnsignedValue",
          "parameters": [],
          "return_type": "uint64_t",
          "logic": "Returns the maximum unsigned value for Word32 and Word64 representations."
        },
        {
          "name": "machine_representation",
          "parameters": [],
          "return_type": "MachineRepresentation",
          "logic": "Returns the MachineRepresentation enum value corresponding to this representation."
        },
        {
          "name": "bit_width",
          "parameters": [],
          "return_type": "constexpr uint16_t",
          "logic": "Returns the bit width of the representation."
        }
      ]
    },
    {
      "name": "RegisterRepresentation",
      "properties": [],
      "methods": [
        {
          "name": "RegisterRepresentation",
          "parameters": [
            "Enum value"
          ],
          "return_type": "constexpr RegisterRepresentation",
          "logic": "Constructor that initializes the MaybeRegisterRepresentation base class with the given Enum value."
        },
        {
          "name": "RegisterRepresentation",
          "parameters": [],
          "return_type": "RegisterRepresentation",
          "logic": "Default constructor."
        },
        {
          "name": "RegisterRepresentation",
          "parameters": [
            "MaybeRegisterRepresentation rep"
          ],
          "return_type": "constexpr RegisterRepresentation",
          "logic": "Constructor that initializes the RegisterRepresentation from MaybeRegisterRepresentation."
        },
        {
          "name": "operator Enum",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Conversion operator to the Enum type, returns the Enum value of the representation."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Returns the Enum value of the representation."
        },
        {
          "name": "Word32",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a 32-bit word."
        },
        {
          "name": "Word64",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a 64-bit word."
        },
        {
          "name": "WordPtr",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a word-sized pointer, based on the system's pointer size."
        },
        {
          "name": "Float32",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a 32-bit float."
        },
        {
          "name": "Float64",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a 64-bit float."
        },
        {
          "name": "Tagged",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a tagged pointer."
        },
        {
          "name": "Compressed",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a compressed tagged pointer."
        },
        {
          "name": "Simd128",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a 128-bit SIMD value."
        },
        {
          "name": "Simd256",
          "parameters": [],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation representing a 256-bit SIMD value."
        },
        {
          "name": "FromMachineRepresentation",
          "parameters": [
            "MachineRepresentation rep"
          ],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation based on the given MachineRepresentation."
        },
        {
          "name": "FromMachineType",
          "parameters": [
            "MachineType type"
          ],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation based on the given MachineType."
        },
        {
          "name": "FromCTypeInfo",
          "parameters": [
            "CTypeInfo t",
            "CFunctionInfo::Int64Representation int64_repr"
          ],
          "return_type": "static constexpr RegisterRepresentation",
          "logic": "Returns a RegisterRepresentation based on the given CTypeInfo and Int64Representation."
        },
        {
          "name": "AllowImplicitRepresentationChangeTo",
          "parameters": [
            "RegisterRepresentation dst_rep",
            "bool graph_created_from_turbofan"
          ],
          "return_type": "constexpr bool",
          "logic": "Determines if implicit conversion to the destination representation is allowed."
        },
        {
          "name": "MapTaggedToWord",
          "parameters": [],
          "return_type": "constexpr RegisterRepresentation",
          "logic": "Maps Tagged representation to Word32/WordPtr depending on pointer compression settings."
        }
      ]
    },
    {
      "name": "WordRepresentation",
      "properties": [],
      "methods": [
        {
          "name": "WordRepresentation",
          "parameters": [
            "Enum value"
          ],
          "return_type": "constexpr WordRepresentation",
          "logic": "Constructor that initializes the RegisterRepresentation base class with the given Enum value."
        },
        {
          "name": "WordRepresentation",
          "parameters": [],
          "return_type": "WordRepresentation",
          "logic": "Default constructor."
        },
        {
          "name": "WordRepresentation",
          "parameters": [
            "RegisterRepresentation rep"
          ],
          "return_type": "constexpr WordRepresentation",
          "logic": "Constructor that initializes the WordRepresentation from RegisterRepresentation. Asserts that rep is Word."
        },
        {
          "name": "Word32",
          "parameters": [],
          "return_type": "static constexpr WordRepresentation",
          "logic": "Returns a WordRepresentation representing a 32-bit word."
        },
        {
          "name": "Word64",
          "parameters": [],
          "return_type": "static constexpr WordRepresentation",
          "logic": "Returns a WordRepresentation representing a 64-bit word."
        },
        {
          "name": "WordPtr",
          "parameters": [],
          "return_type": "static constexpr WordRepresentation",
          "logic": "Returns a WordRepresentation representing a word-sized pointer, based on the system's pointer size."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Returns the Enum value of the representation."
        },
        {
          "name": "operator Enum",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Conversion operator to the Enum type, returns the Enum value of the representation."
        },
        {
          "name": "MaxUnsignedValue",
          "parameters": [],
          "return_type": "constexpr uint64_t",
          "logic": "Returns the maximum unsigned value for Word32 and Word64 representations."
        },
        {
          "name": "MinSignedValue",
          "parameters": [],
          "return_type": "constexpr int64_t",
          "logic": "Returns the minimum signed value for Word32 and Word64 representations."
        },
        {
          "name": "MaxSignedValue",
          "parameters": [],
          "return_type": "constexpr int64_t",
          "logic": "Returns the maximum signed value for Word32 and Word64 representations."
        }
      ]
    },
    {
      "name": "FloatRepresentation",
      "properties": [],
      "methods": [
        {
          "name": "Float32",
          "parameters": [],
          "return_type": "static constexpr FloatRepresentation",
          "logic": "Returns a FloatRepresentation representing a 32-bit float."
        },
        {
          "name": "Float64",
          "parameters": [],
          "return_type": "static constexpr FloatRepresentation",
          "logic": "Returns a FloatRepresentation representing a 64-bit float."
        },
        {
          "name": "FloatRepresentation",
          "parameters": [
            "Enum value"
          ],
          "return_type": "constexpr FloatRepresentation",
          "logic": "Constructor that initializes the RegisterRepresentation base class with the given Enum value."
        },
        {
          "name": "FloatRepresentation",
          "parameters": [
            "RegisterRepresentation rep"
          ],
          "return_type": "constexpr FloatRepresentation",
          "logic": "Constructor that initializes the FloatRepresentation from RegisterRepresentation. Asserts that rep is Float."
        },
        {
          "name": "FloatRepresentation",
          "parameters": [],
          "return_type": "FloatRepresentation",
          "logic": "Default constructor."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Returns the Enum value of the representation."
        },
        {
          "name": "operator Enum",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Conversion operator to the Enum type, returns the Enum value of the representation."
        }
      ]
    },
    {
      "name": "MemoryRepresentation",
      "properties": [
        "value_"
      ],
      "methods": [
        {
          "name": "MemoryRepresentation",
          "parameters": [
            "Enum value"
          ],
          "return_type": "constexpr MemoryRepresentation",
          "logic": "Constructor that initializes the value_ member with the given Enum value."
        },
        {
          "name": "MemoryRepresentation",
          "parameters": [],
          "return_type": "constexpr MemoryRepresentation",
          "logic": "Default constructor that initializes the value_ member to kInvalid."
        },
        {
          "name": "is_valid",
          "parameters": [],
          "return_type": "constexpr bool",
          "logic": "Checks if the representation is valid (not kInvalid)."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Returns the Enum value of the representation. Asserts that the representation is valid."
        },
        {
          "name": "operator Enum",
          "parameters": [],
          "return_type": "constexpr Enum",
          "logic": "Conversion operator to the Enum type, returns the Enum value of the representation."
        },
        {
          "name": "Int8",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a signed 8-bit integer."
        },
        {
          "name": "Uint8",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an unsigned 8-bit integer."
        },
        {
          "name": "Int16",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a signed 16-bit integer."
        },
        {
          "name": "Uint16",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an unsigned 16-bit integer."
        },
        {
          "name": "Int32",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a signed 32-bit integer."
        },
        {
          "name": "Uint32",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an unsigned 32-bit integer."
        },
        {
          "name": "Int64",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a signed 64-bit integer."
        },
        {
          "name": "Uint64",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an unsigned 64-bit integer."
        },
        {
          "name": "UintPtr",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an unsigned pointer-sized integer."
        },
        {
          "name": "Float16",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a 16-bit float."
        },
        {
          "name": "Float32",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a 32-bit float."
        },
        {
          "name": "Float64",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a 64-bit float."
        },
        {
          "name": "AnyTagged",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing any tagged pointer."
        },
        {
          "name": "TaggedPointer",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a tagged pointer."
        },
        {
          "name": "TaggedSigned",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a tagged signed value."
        },
        {
          "name": "AnyUncompressedTagged",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing any uncompressed tagged pointer."
        },
        {
          "name": "UncompressedTaggedPointer",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an uncompressed tagged pointer."
        },
        {
          "name": "UncompressedTaggedSigned",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an uncompressed tagged signed value."
        },
        {
          "name": "ProtectedPointer",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a protected pointer."
        },
        {
          "name": "IndirectPointer",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing an indirect pointer."
        },
        {
          "name": "SandboxedPointer",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a sandboxed pointer."
        },
        {
          "name": "Simd128",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a 128-bit SIMD value."
        },
        {
          "name": "Simd256",
          "parameters": [],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation representing a 256-bit SIMD value."
        },
        {
          "name": "IsSigned",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the representation is a signed integer."
        },
        {
          "name": "IsCompressibleTagged",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the representation is a compressible tagged pointer."
        },
        {
          "name": "ToRegisterRepresentation",
          "parameters": [],
          "return_type": "RegisterRepresentation",
          "logic": "Returns the corresponding RegisterRepresentation."
        },
        {
          "name": "FromRegisterRepresentation",
          "parameters": [
            "RegisterRepresentation repr",
            "bool is_signed"
          ],
          "return_type": "static MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation based on the given RegisterRepresentation and sign."
        },
        {
          "name": "ToRegisterRepresentationForStore",
          "parameters": [],
          "return_type": "RegisterRepresentation",
          "logic": "Returns the RegisterRepresentation required for storing the value (considering pointer compression)."
        },
        {
          "name": "ToMachineType",
          "parameters": [],
          "return_type": "MachineType",
          "logic": "Returns the MachineType equivalent of the MemoryRepresentation."
        },
        {
          "name": "FromMachineType",
          "parameters": [
            "MachineType type"
          ],
          "return_type": "static MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation from a given MachineType."
        },
        {
          "name": "FromMachineRepresentation",
          "parameters": [
            "MachineRepresentation rep"
          ],
          "return_type": "static constexpr MemoryRepresentation",
          "logic": "Returns a MemoryRepresentation corresponding to the given MachineRepresentation."
        },
        {
          "name": "SizeInBytes",
          "parameters": [],
          "return_type": "constexpr uint8_t",
          "logic": "Returns the size in bytes of the memory representation."
        },
        {
          "name": "SizeInBytesLog2",
          "parameters": [],
          "return_type": "constexpr uint8_t",
          "logic": "Returns the base-2 logarithm of the size in bytes of the memory representation."
        }
      ]
    },
    {
      "name": "MultiSwitch",
      "properties": [],
      "methods": [
        {
          "name": "encode",
          "parameters": [
            "T rep"
          ],
          "return_type": "static constexpr uint64_t",
          "logic": "Encodes a representation to a uint64_t value."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "operator==",
      "parameters": [
        "MaybeRegisterRepresentation a",
        "MaybeRegisterRepresentation b"
      ],
      "return_type": "constexpr bool",
      "logic": "Compares two MaybeRegisterRepresentations for equality."
    },
    {
      "name": "operator!=",
      "parameters": [
        "MaybeRegisterRepresentation a",
        "MaybeRegisterRepresentation b"
      ],
      "return_type": "constexpr bool",
      "logic": "Compares two MaybeRegisterRepresentations for inequality."
    },
    {
      "name": "hash_value",
      "parameters": [
        "MaybeRegisterRepresentation rep"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value of a MaybeRegisterRepresentation."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "MaybeRegisterRepresentation rep"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for printing a MaybeRegisterRepresentation to an output stream."
    },
    {
      "name": "operator==",
      "parameters": [
        "MemoryRepresentation a",
        "MemoryRepresentation b"
      ],
      "return_type": "constexpr bool",
      "logic": "Compares two MemoryRepresentations for equality."
    },
    {
      "name": "operator!=",
      "parameters": [
        "MemoryRepresentation a",
        "MemoryRepresentation b"
      ],
      "return_type": "constexpr bool",
      "logic": "Compares two MemoryRepresentations for inequality."
    },
    {
      "name": "hash_value",
      "parameters": [
        "MemoryRepresentation rep"
      ],
      "return_type": "size_t",
      "logic": "Calculates the hash value of a MemoryRepresentation."
    },
    {
      "name": "operator<<",
      "parameters": [
        "std::ostream& os",
        "MemoryRepresentation rep"
      ],
      "return_type": "std::ostream&",
      "logic": "Overloads the << operator for printing a MemoryRepresentation to an output stream."
    }
  ]
}