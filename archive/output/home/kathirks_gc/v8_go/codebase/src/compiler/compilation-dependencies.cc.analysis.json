{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/compiler/compilation-dependencies.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/compiler/compilation-dependencies.cc\",\n  \"imports\": [\n    \"src/compiler/compilation-dependencies.h\",\n    \"optional\",\n    \"src/base/hashmap.h\",\n    \"src/common/assert-scope.h\",\n    \"src/execution/protectors.h\",\n    \"src/handles/handles-inl.h\",\n    \"src/heap/heap-layout-inl.h\",\n    \"src/objects/allocation-site-inl.h\",\n    \"src/objects/internal-index.h\",\n    \"src/objects/js-array-inl.h\",\n    \"src/objects/js-function-inl.h\",\n    \"src/objects/objects-inl.h\",\n    \"src/objects/property-cell.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CompilationDependency\",\n      \"properties\": [\n        \"const CompilationDependencyKind kind\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CompilationDependency\",\n          \"parameters\": [\n            \"CompilationDependencyKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the kind of dependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Abstract method to check if the dependency is still valid given the current state of the heap. Must be overridden by subclasses.\"\n        },\n        {\n          \"name\": \"PrepareInstall\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Virtual method to prepare for installing the dependency.  May involve creating the object on which the dependency will be installed. Defaults to no-op.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Abstract method to install the dependency.  Must be overridden by subclasses.\"\n        },\n        {\n          \"name\": \"Is##Name\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the dependency is of a specific type (e.g., IsInitialMap).\"\n        },\n        {\n          \"name\": \"As##Name\",\n          \"parameters\": [],\n          \"return_type\": \"const Name##Dependency*\",\n          \"logic\": \"Casts the dependency to a specific type (e.g., AsInitialMap).\"\n        },\n        {\n          \"name\": \"ToString\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns a string representation of the dependency kind.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CompilationDependencies::CompilationDependencyHash\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"operator()\",\n          \"parameters\": [\n            \"const CompilationDependency* dep\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Hash function for CompilationDependency objects.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CompilationDependencies::CompilationDependencyEqual\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"operator()\",\n          \"parameters\": [\n            \"const CompilationDependency* lhs\",\n            \"const CompilationDependency* rhs\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Equality function for CompilationDependency objects.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PendingDependencies\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PendingDependencies\",\n          \"parameters\": [\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the dependency map.\"\n        },\n        {\n          \"name\": \"Register\",\n          \"parameters\": [\n            \"Handle<HeapObject> object\",\n            \"DependentCode::DependencyGroup group\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers a dependency for a specific object and dependency group.\"\n        },\n        {\n          \"name\": \"InstallAll\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Handle<Code> code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Installs all registered dependencies on the provided code object.\"\n        },\n        {\n          \"name\": \"InstallAllPredictable\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Handle<Code> code\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Installs all registered dependencies on the provided code object in a predictable order.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"InitialMapDependency\",\n      \"properties\": [\n        \"const JSFunctionRef function_\",\n        \"const MapRef initial_map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"InitialMapDependency\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"JSFunctionRef function\",\n            \"MapRef initial_map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for InitialMapDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the initial map of the function is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the initial map as a dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PrototypePropertyDependency\",\n      \"properties\": [\n        \"const JSFunctionRef function_\",\n        \"const ObjectRef prototype_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PrototypePropertyDependency\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"JSFunctionRef function\",\n            \"ObjectRef prototype\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for PrototypePropertyDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the prototype property of the function is still the expected one.\"\n        },\n        {\n          \"name\": \"PrepareInstall\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Ensures that the function has an initial map.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the initial map of the function as a dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"StableMapDependency\",\n      \"properties\": [\n        \"const MapRef map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"StableMapDependency\",\n          \"parameters\": [\n            \"MapRef map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for StableMapDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the map is still stable (not a dictionary map and is_stable() returns true).\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the map as a prototype check dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConstantInDictionaryPrototypeChainDependency\",\n      \"properties\": [\n        \"const MapRef receiver_map_\",\n        \"const NameRef property_name_\",\n        \"const ObjectRef constant_\",\n        \"const PropertyKind kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ConstantInDictionaryPrototypeChainDependency\",\n          \"parameters\": [\n            \"const MapRef receiver_map\",\n            \"const NameRef property_name\",\n            \"const ObjectRef constant\",\n            \"PropertyKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ConstantInDictionaryPrototypeChainDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks that constant_ is still the value of property_name_ starting at receiver_map_.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers prototype maps on the chain as prototype check dependencies.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OwnConstantDataPropertyDependency\",\n      \"properties\": [\n        \"JSHeapBroker* const broker_\",\n        \"JSObjectRef const holder_\",\n        \"MapRef const map_\",\n        \"FieldIndex const index_\",\n        \"ObjectRef const value_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OwnConstantDataPropertyDependency\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"JSObjectRef holder\",\n            \"MapRef map\",\n            \"FieldIndex index\",\n            \"ObjectRef value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for OwnConstantDataPropertyDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the object's map and the value at the specified field index are still the expected ones.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty Install since this dependency does not require explicit invalidation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OwnConstantDoublePropertyDependency\",\n      \"properties\": [\n        \"JSHeapBroker* const broker_\",\n        \"JSObjectRef const holder_\",\n        \"MapRef const map_\",\n        \"FieldIndex const index_\",\n        \"Float64 const value_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OwnConstantDoublePropertyDependency\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"JSObjectRef holder\",\n            \"MapRef map\",\n            \"FieldIndex index\",\n            \"Float64 value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for OwnConstantDoublePropertyDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the object's map and the double value at the specified field index are still the expected ones.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty Install since this dependency does not require explicit invalidation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OwnConstantDictionaryPropertyDependency\",\n      \"properties\": [\n        \"JSObjectRef const holder_\",\n        \"MapRef const map_\",\n        \"InternalIndex const index_\",\n        \"ObjectRef const value_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OwnConstantDictionaryPropertyDependency\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"JSObjectRef holder\",\n            \"InternalIndex index\",\n            \"ObjectRef value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for OwnConstantDictionaryPropertyDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the object's map and the value at the specified dictionary index are still the expected ones.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty Install since this dependency does not require explicit invalidation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConsistentJSFunctionViewDependency\",\n      \"properties\": [\n        \"const JSFunctionRef function_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ConsistentJSFunctionViewDependency\",\n          \"parameters\": [\n            \"JSFunctionRef function\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ConsistentJSFunctionViewDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the view of the JSFunction is consistent with the heap state.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty Install since this dependency does not require explicit invalidation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TransitionDependency\",\n      \"properties\": [\n        \"const MapRef map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"TransitionDependency\",\n          \"parameters\": [\n            \"MapRef map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for TransitionDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the map is deprecated or not.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the map as a transition dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PretenureModeDependency\",\n      \"properties\": [\n        \"const AllocationSiteRef site_\",\n        \"const AllocationType allocation_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"PretenureModeDependency\",\n          \"parameters\": [\n            \"AllocationSiteRef site\",\n            \"AllocationType allocation\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for PretenureModeDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the allocation type of the allocation site is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the allocation site as a tenuring changed dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FieldRepresentationDependency\",\n      \"properties\": [\n        \"const MapRef map_\",\n        \"const MapRef owner_\",\n        \"const InternalIndex descriptor_\",\n        \"const Representation representation_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FieldRepresentationDependency\",\n          \"parameters\": [\n            \"MapRef map\",\n            \"MapRef owner\",\n            \"InternalIndex descriptor\",\n            \"Representation representation\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for FieldRepresentationDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the field representation in the map descriptor is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the owner map as a field representation dependency.\"\n        },\n        {\n          \"name\": \"DependsOn\",\n          \"parameters\": [\n            \"const Handle<Map>& receiver_map\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the current dependency depends on the given receiver map\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FieldTypeDependency\",\n      \"properties\": [\n        \"const MapRef map_\",\n        \"const MapRef owner_\",\n        \"const InternalIndex descriptor_\",\n        \"const ObjectRef type_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FieldTypeDependency\",\n          \"parameters\": [\n            \"MapRef map\",\n            \"MapRef owner\",\n            \"InternalIndex descriptor\",\n            \"ObjectRef type\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for FieldTypeDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the field type in the map descriptor is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the owner map as a field type dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FieldConstnessDependency\",\n      \"properties\": [\n        \"const MapRef map_\",\n        \"const MapRef owner_\",\n        \"const InternalIndex descriptor_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"FieldConstnessDependency\",\n          \"parameters\": [\n            \"MapRef map\",\n            \"MapRef owner\",\n            \"InternalIndex descriptor\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for FieldConstnessDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the field constness in the map descriptor is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the owner map as a field constness dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GlobalPropertyDependency\",\n      \"properties\": [\n        \"const PropertyCellRef cell_\",\n        \"const PropertyCellType type_\",\n        \"const bool read_only_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GlobalPropertyDependency\",\n          \"parameters\": [\n            \"PropertyCellRef cell\",\n            \"PropertyCellType type\",\n            \"bool read_only\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for GlobalPropertyDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the property cell's type and read-only status are still the expected ones.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the property cell as a property cell changed dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ScriptContextSlotPropertyDependency\",\n      \"properties\": [\n        \"const ContextRef script_context_\",\n        \"size_t index_\",\n        \"ContextSidePropertyCell::Property property_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ScriptContextSlotPropertyDependency\",\n          \"parameters\": [\n            \"ContextRef script_context\",\n            \"size_t index\",\n            \"ContextSidePropertyCell::Property property\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ScriptContextSlotPropertyDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the script context slot property is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the context side property cell as a script context slot property changed dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EmptyContextExtensionDependency\",\n      \"properties\": [\n        \"const ScopeInfoRef scope_info_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"EmptyContextExtensionDependency\",\n          \"parameters\": [\n            \"ScopeInfoRef scope_info\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for EmptyContextExtensionDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if no context has extension for the given scope info.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the scope info as an empty context extension dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ProtectorDependency\",\n      \"properties\": [\n        \"const PropertyCellRef cell_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ProtectorDependency\",\n          \"parameters\": [\n            \"PropertyCellRef cell\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ProtectorDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the property cell's value is still Protector::kProtectorValid.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the property cell as a property cell changed dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ObjectSlotValueDependency\",\n      \"properties\": [\n        \"Handle<HeapObject> object_\",\n        \"int offset_\",\n        \"Handle<Object> value_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ObjectSlotValueDependency\",\n          \"parameters\": [\n            \"HeapObjectRef object\",\n            \"int offset\",\n            \"ObjectRef value\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ObjectSlotValueDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the value at the specified object slot is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty Install since this dependency does not require explicit invalidation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ElementsKindDependency\",\n      \"properties\": [\n        \"const AllocationSiteRef site_\",\n        \"const ElementsKind kind_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"ElementsKindDependency\",\n          \"parameters\": [\n            \"AllocationSiteRef site\",\n            \"ElementsKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for ElementsKindDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the elements kind of the allocation site is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Registers the allocation site as an allocation site transition changed dependency.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OwnConstantElementDependency\",\n      \"properties\": [\n        \"const JSObjectRef holder_\",\n        \"const uint32_t index_\",\n        \"const ObjectRef element_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"OwnConstantElementDependency\",\n          \"parameters\": [\n            \"JSObjectRef holder\",\n            \"uint32_t index\",\n            \"ObjectRef element\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for OwnConstantElementDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the element at the specified index in the object is still the expected one.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Empty Install since this dependency does not require explicit invalidation.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NoSlackTrackingChangeDependency\",\n      \"properties\": [\n        \"const MapRef map_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"NoSlackTrackingChangeDependency\",\n          \"parameters\": [\n            \"MapRef map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for NoSlackTrackingChangeDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the slack tracking parameters of the map haven't changed\"\n        },\n        {\n          \"name\": \"PrepareInstall\",\n          \"parameters\": [\n            \"JSHeapBroker*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Does nothing since no preparing is needed.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker*\",\n            \"PendingDependencies*\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Does nothing since no installation is needed.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"InitialMapInstanceSizePredictionDependency\",\n      \"properties\": [\n        \"const JSFunctionRef function_\",\n        \"const int instance_size_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"InitialMapInstanceSizePredictionDependency\",\n          \"parameters\": [\n            \"JSFunctionRef function\",\n            \"int instance_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor for InitialMapInstanceSizePredictionDependency.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Checks if the initial map instance size prediction is still valid.\"\n        },\n        {\n          \"name\": \"PrepareInstall\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Completes inobject slack tracking if active.\"\n        },\n        {\n          \"name\": \"Install\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"PendingDependencies* deps\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Does nothing\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SlackTrackingPrediction\",\n      \"properties\": [\n        \"int instance_size_\",\n        \"int inobject_property_count_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"SlackTrackingPrediction\",\n          \"parameters\": [\n            \"MapRef initial_map\",\n            \"int instance_size\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Construct a SlackTrackingPrediction instance.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CompilationDependencies\",\n      \"properties\": [\n        \"Zone* zone_\",\n        \"JSHeapBroker* broker_\",\n        \"ZoneSet<CompilationDependency const*> dependencies_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CompilationDependencies\",\n          \"parameters\": [\n            \"JSHeapBroker* broker\",\n            \"Zone* zone\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Constructor that initializes the zone and broker.\"\n        },\n        {\n          \"name\": \"RecordDependency\",\n          \"parameters\": [\n            \"CompilationDependency const* dependency\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records a dependency in the set of dependencies.\"\n        },\n        {\n          \"name\": \"DependOnInitialMap\",\n          \"parameters\": [\n            \"JSFunctionRef function\"\n          ],\n          \"return_type\": \"MapRef\",\n          \"logic\": \"Records a dependency on the initial map of a JSFunction.\"\n        },\n        {\n          \"name\": \"DependOnPrototypeProperty\",\n          \"parameters\": [\n            \"JSFunctionRef function\"\n          ],\n          \"return_type\": \"HeapObjectRef\",\n          \"logic\": \"Records a dependency on the prototype property of a JSFunction.\"\n        },\n        {\n          \"name\": \"DependOnStableMap\",\n          \"parameters\": [\n            \"MapRef map\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records a dependency on a stable map.\"\n        },\n        {\n          \"name\": \"DependOnConstantInDictionaryPrototypeChain\",\n          \"parameters\": [\n            \"MapRef receiver_map\",\n            \"NameRef property_name\",\n            \"ObjectRef constant\",\n            \"PropertyKind kind\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records a dependency on a constant property in a dictionary prototype chain.\"\n        },\n        {\n          \"name\": \"DependOnPretenureMode\",\n          \"parameters\": [\n            \"AllocationSiteRef site\"\n          ],\n          \"return_type\": \"AllocationType\",\n          \"logic\": \"Records a dependency on the pretenure mode of an allocation site.\"\n        },\n        {\n          \"name\": \"DependOnFieldConstness\",\n          \"parameters\": [\n            \"MapRef map\",\n            \"MapRef owner\",\n            \"InternalIndex descriptor\"\n          ],\n          \"return_type\": \"PropertyConstness\",\n          \"logic\": \"Records a dependency on the constness of a field.\"\n        },\n        {\n          \"name\": \"FieldConstnessDependencyOffTheRecord\",\n          \"parameters\": [\n            \"MapRef map\",\n            \"MapRef owner\",\n            \"InternalIndex descriptor\"\n          ],\n          \"return_type\": \"CompilationDependency const*\",\n          \"logic\": \"Creates a field constness dependency off the record.\"\n        },\n        {\n          \"name\": \"DependOnGlobalProperty\",\n          \"parameters\": [\n            \"PropertyCellRef cell\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Records a dependency on a global property.\"\n        },\n        {\n          \"name\": \"DependOnScriptContextSlotProperty\",\n          \"parameters\": [\n            \"ContextRef script_context\",\n            \"size_t index\",\n            \"ContextSidePropertyCell::Property property\",\n            \"JSHeapBroker* broker\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Records a dependency on a script context slot property.\"\n        },\n        {\n          \"name\": \"DependOnEmptyContextExtension\",\n          \"parameters\": [\n            \"ScopeInfoRef scope_info\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Records a dependency on an empty context extension.\"\n        },\n        {\n          \"name\": \"DependOnProtector\",\n          \"parameters\": [\n            \"PropertyCellRef cell\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Records a dependency on a protector cell.\"\n        },\n        {\n          \"name\": \"DependOnMegaDOMProtector\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Records a dependency on the"
}