{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/date/dateparser.cc",
  "imports": [
    "src/date/dateparser.h",
    "src/objects/objects-inl.h",
    "src/strings/char-predicates-inl.h"
  ],
  "classes": [
    {
      "name": "DateParser::DayComposer",
      "properties": [
        "index_",
        "comp_",
        "named_month_",
        "is_iso_date_"
      ],
      "methods": [
        {
          "name": "Write",
          "parameters": [
            "double* output"
          ],
          "return_type": "bool",
          "logic": "Composes the date components (year, month, day) from the parsed input. It handles different date formats (YMD, MDY, DMY, etc.) and sets default values if necessary.  It also adjusts the year based on the two-digit year convention (0-49 -> 2000s, 50-99 -> 1900s). Finally, it validates the date components before writing to the output."
        }
      ]
    },
    {
      "name": "DateParser::TimeComposer",
      "properties": [
        "index_",
        "comp_",
        "hour_offset_"
      ],
      "methods": [
        {
          "name": "Write",
          "parameters": [
            "double* output"
          ],
          "return_type": "bool",
          "logic": "Composes the time components (hour, minute, second, millisecond) from the parsed input. It handles AM/PM adjustments (hour_offset_) and validates the time components before writing to the output. It also allows for hour 24 in case of 24:00:00:000 to handle time intervals"
        }
      ]
    },
    {
      "name": "DateParser::TimeZoneComposer",
      "properties": [
        "sign_",
        "hour_",
        "minute_"
      ],
      "methods": [
        {
          "name": "Write",
          "parameters": [
            "double* output"
          ],
          "return_type": "bool",
          "logic": "Composes the timezone offset from the parsed input (sign, hour, minute). It converts the offset to seconds and writes it to the output. If no timezone information is available, it writes NaN to the output."
        }
      ]
    },
    {
      "name": "DateParser::KeywordTable",
      "properties": [
        "array"
      ],
      "methods": [
        {
          "name": "Lookup",
          "parameters": [
            "const uint32_t* pre",
            "int len"
          ],
          "return_type": "int",
          "logic": "Looks up a keyword (e.g., month name, timezone abbreviation) in the keyword table based on a prefix and length. Returns the index of the matching keyword in the table or the table's end index if no match is found."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "DateParser::ReadMilliseconds",
      "parameters": [
        "DateToken token"
      ],
      "return_type": "int",
      "logic": "Extracts the milliseconds from a DateToken, handling different lengths of the numeral and inferring leading zeros. It returns the first three significant digits of the milliseconds value."
    }
  ]
}