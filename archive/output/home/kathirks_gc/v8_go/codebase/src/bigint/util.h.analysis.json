{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/bigint/util.h",
  "imports": [
    "<stdint.h>",
    "<type_traits>",
    "<intrin.h>"
  ],
  "classes": [],
  "functions": [
    {
      "name": "RoundUp",
      "parameters": [
        "int x",
        "int y"
      ],
      "return_type": "int",
      "logic": "Rounds the integer 'x' up to the nearest multiple of 'y'."
    },
    {
      "name": "CountLeadingZeros",
      "parameters": [
        "T value"
      ],
      "return_type": "int",
      "logic": "Counts the number of leading zero bits in an unsigned 64-bit integer 'value'. Uses compiler intrinsics for efficiency. Handles different compilers (GCC/Clang, MSVC)."
    },
    {
      "name": "CountLeadingZeros",
      "parameters": [
        "uint32_t value"
      ],
      "return_type": "int",
      "logic": "Counts the number of leading zero bits in an unsigned 32-bit integer 'value'. Uses compiler intrinsics for efficiency. Handles different compilers (GCC/Clang, MSVC)."
    },
    {
      "name": "CountTrailingZeros",
      "parameters": [
        "uint32_t value"
      ],
      "return_type": "int",
      "logic": "Counts the number of trailing zero bits in an unsigned 32-bit integer 'value'. Uses compiler intrinsics for efficiency. Handles different compilers (GCC/Clang, MSVC)."
    },
    {
      "name": "BitLength",
      "parameters": [
        "int n"
      ],
      "return_type": "int",
      "logic": "Calculates the number of bits required to represent the integer 'n' (i.e., the bit length). It achieves this by subtracting the leading zeros from the total number of bits (32 in this case)."
    },
    {
      "name": "IsPowerOfTwo",
      "parameters": [
        "int value"
      ],
      "return_type": "bool",
      "logic": "Checks if the integer 'value' is a power of two. Returns true if it is, false otherwise.  It does this efficiently using a bitwise AND operation."
    }
  ]
}