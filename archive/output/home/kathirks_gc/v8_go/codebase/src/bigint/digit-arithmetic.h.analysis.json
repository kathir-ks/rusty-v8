{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/bigint/digit-arithmetic.h",
  "imports": [
    "src/bigint/bigint.h",
    "src/bigint/util.h"
  ],
  "classes": [],
  "functions": [
    {
      "name": "digit_ismax",
      "parameters": [
        "digit_t x"
      ],
      "return_type": "bool",
      "logic": "Checks if a digit is the maximum possible value for its type (all bits set to 1)."
    },
    {
      "name": "digit_add2",
      "parameters": [
        "digit_t a",
        "digit_t b",
        "digit_t* carry"
      ],
      "return_type": "digit_t",
      "logic": "Adds two digits and calculates the carry. Uses a larger integer type (`twodigit_t`) if available to avoid overflow and simplify carry calculation. Otherwise, uses standard integer addition and checks for overflow by comparing the result to the first operand."
    },
    {
      "name": "digit_add3",
      "parameters": [
        "digit_t a",
        "digit_t b",
        "digit_t c",
        "digit_t* carry"
      ],
      "return_type": "digit_t",
      "logic": "Adds three digits and calculates the carry. Uses a larger integer type (`twodigit_t`) if available to avoid overflow and simplify carry calculation. Otherwise, uses standard integer addition and checks for overflow by comparing the result to the first operand."
    },
    {
      "name": "digit_sub",
      "parameters": [
        "digit_t a",
        "digit_t b",
        "digit_t* borrow"
      ],
      "return_type": "digit_t",
      "logic": "Subtracts one digit from another and calculates the borrow. Uses a larger integer type (`twodigit_t`) if available to avoid underflow and simplify borrow calculation. Otherwise, uses standard integer subtraction and checks for underflow by comparing the result to the first operand."
    },
    {
      "name": "digit_sub2",
      "parameters": [
        "digit_t a",
        "digit_t b",
        "digit_t borrow_in",
        "digit_t* borrow_out"
      ],
      "return_type": "digit_t",
      "logic": "Subtracts one digit from another, considering an incoming borrow, and calculates the outgoing borrow.  Uses a larger integer type (`twodigit_t`) if available to avoid underflow and simplify borrow calculation. Otherwise, uses standard integer subtraction and checks for underflow by comparing the result to the first operand."
    },
    {
      "name": "digit_mul",
      "parameters": [
        "digit_t a",
        "digit_t b",
        "digit_t* high"
      ],
      "return_type": "digit_t",
      "logic": "Multiplies two digits and returns the low part of the result, storing the high part in the provided pointer. If a larger integer type (`twodigit_t`) is available, it's used for multiplication. Otherwise, the digits are split into halves, and the multiplication is performed using the 'schoolbook' method, handling carries manually."
    },
    {
      "name": "digit_div",
      "parameters": [
        "digit_t high",
        "digit_t low",
        "digit_t divisor",
        "digit_t* remainder"
      ],
      "return_type": "digit_t",
      "logic": "Divides a two-digit number (formed by `high` and `low` digits) by a single-digit divisor. It returns the quotient and stores the remainder in the provided pointer. It optimizes the division by using assembly instructions on x86 architectures where available. If not, a software implementation adapted from Hacker's Delight is used, performing long division by shifting and subtracting."
    }
  ]
}