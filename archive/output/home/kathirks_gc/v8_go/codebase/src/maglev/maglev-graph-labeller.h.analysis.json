{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-graph-labeller.h",
  "imports": [
    "<map>",
    "src/maglev/maglev-graph.h",
    "src/maglev/maglev-ir.h",
    "src/utils/utils.h"
  ],
  "classes": [
    {
      "name": "MaglevGraphLabeller",
      "properties": [
        "block_ids_",
        "nodes_",
        "next_block_label_",
        "next_node_label_"
      ],
      "methods": [
        {
          "name": "RegisterNode",
          "parameters": [
            "const NodeBase* node",
            "const MaglevCompilationUnit* unit",
            "BytecodeOffset bytecode_offset",
            "SourcePosition position"
          ],
          "return_type": "void",
          "logic": "Registers a node with the labeller, assigning it a unique label and storing its provenance information (compilation unit, bytecode offset, and source position).  If the node is already registered, it does nothing."
        },
        {
          "name": "RegisterNode",
          "parameters": [
            "const NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Registers a node with the labeller, assigning it a unique label.  Uses default values for compilation unit, bytecode offset, and source position.  Delegates to the other RegisterNode overload."
        },
        {
          "name": "RegisterBasicBlock",
          "parameters": [
            "const BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Registers a basic block with the labeller, assigning it a unique ID."
        },
        {
          "name": "BlockId",
          "parameters": [
            "const BasicBlock* block"
          ],
          "return_type": "int",
          "logic": "Returns the ID of a given basic block."
        },
        {
          "name": "NodeId",
          "parameters": [
            "const NodeBase* node"
          ],
          "return_type": "int",
          "logic": "Returns the label (ID) of a given node."
        },
        {
          "name": "GetNodeProvenance",
          "parameters": [
            "const NodeBase* node"
          ],
          "return_type": "const Provenance&",
          "logic": "Returns the provenance information (compilation unit, bytecode offset, and source position) associated with a given node."
        },
        {
          "name": "max_node_id",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the maximum node ID that has been assigned."
        },
        {
          "name": "PrintNodeLabel",
          "parameters": [
            "std::ostream& os",
            "const NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Prints the label of a node to the given output stream.  Handles VirtualObjects specially by printing the VirtualObject's ID and then the label of its allocation.  If the node is not registered, it prints an error message."
        },
        {
          "name": "PrintInput",
          "parameters": [
            "std::ostream& os",
            "const Input& input"
          ],
          "return_type": "void",
          "logic": "Prints the node label of the input's node and its operand to the given output stream."
        }
      ]
    }
  ],
  "functions": []
}