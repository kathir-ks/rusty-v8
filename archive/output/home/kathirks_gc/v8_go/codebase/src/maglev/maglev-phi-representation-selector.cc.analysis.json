{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-phi-representation-selector.cc",
  "imports": [
    "src/maglev/maglev-phi-representation-selector.h",
    "<optional>",
    "src/base/enum-set.h",
    "src/base/logging.h",
    "src/base/small-vector.h",
    "src/compiler/turboshaft/utils.h",
    "src/flags/flags.h",
    "src/handles/handles-inl.h",
    "src/maglev/maglev-graph-processor.h",
    "src/maglev/maglev-ir-inl.h",
    "src/maglev/maglev-ir.h"
  ],
  "classes": [
    {
      "name": "MaglevPhiRepresentationSelector",
      "properties": [
        "builder_",
        "current_block_",
        "phi_taggings_",
        "new_nodes_at_start_",
        "new_nodes_",
        "predecessors_"
      ],
      "methods": [
        {
          "name": "PreProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "BlockProcessResult",
          "logic": "Pre-processes a basic block to determine phi tagging strategies. This function iterates through all phis in the block and calls ProcessPhi for each one. It also handles retries for phis whose processing depends on other phis."
        },
        {
          "name": "CanHoistUntaggingTo",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "bool",
          "logic": "Determines if untagging can be hoisted to a given basic block. This checks if the block has only one successor and if that successor is not a resumable loop."
        },
        {
          "name": "ProcessPhi",
          "parameters": [
            "Phi* node"
          ],
          "return_type": "MaglevPhiRepresentationSelector::ProcessPhiResult",
          "logic": "Processes a Phi node to determine its value representation. This function analyzes the input and use representations of the Phi node to decide if it can be untagged and what type it should be untagged to (Int32, Float64, or HoleyFloat64). It also handles cases where untagging can be hoisted out of loops."
        },
        {
          "name": "EnsurePhiInputsTagged",
          "parameters": [
            "Phi* phi"
          ],
          "return_type": "void",
          "logic": "Ensures that all inputs to a Phi node are tagged. This function inserts tagging operations on any untagged Phi inputs of the given Phi node."
        },
        {
          "name": "ConvertTaggedPhiTo",
          "parameters": [
            "Phi* phi",
            "ValueRepresentation repr",
            "const HoistTypeList& hoist_untagging"
          ],
          "return_type": "void",
          "logic": "Converts a tagged Phi node to a given value representation. This involves changing the Phi's representation and updating its inputs to match the new representation. It also handles cases where constants need to be converted and where conversions can be bypassed or replaced."
        },
        {
          "name": "GetReplacementForPhiInputConversion",
          "parameters": [
            "ValueNode* input",
            "Phi* phi",
            "uint32_t input_index"
          ],
          "return_type": "ValueNode*",
          "logic": "Helper function to get a replacement node for phi input conversion when the phi has been untagged."
        },
        {
          "name": "IsUntagging",
          "parameters": [
            "Opcode op"
          ],
          "return_type": "bool",
          "logic": "Checks if a given opcode represents an untagging operation."
        },
        {
          "name": "UpdateUntaggingOfPhi",
          "parameters": [
            "Phi* phi",
            "ValueNode* old_untagging"
          ],
          "return_type": "void",
          "logic": "Updates the untagging operation of a Phi node. This function adjusts the conversion based on the new value representation of the Phi node."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "CheckSmi* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the input of a CheckSmi node when the input is a Phi node. This adjusts the CheckSmi operation based on the value representation of the Phi node, potentially removing it or replacing it with a different check."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "CheckNumber* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the input of a CheckNumber node when the input is a Phi node. Similar to UpdateNodePhiInput for CheckSmi, this adapts the check based on the Phi's representation."
        },
        {
          "name": "PostProcessBasicBlock",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Post-processes a basic block after representation selection. This function adds any new nodes that were inserted at the beginning of the block during the process."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "StoreTaggedFieldNoWriteBarrier* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the input of a StoreTaggedFieldNoWriteBarrier node when the input is a Phi node. If the Phi has been untagged, this function retags it and potentially replaces the store with a write-barrier version."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "StoreFixedArrayElementNoWriteBarrier* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the input of a StoreFixedArrayElementNoWriteBarrier node when the input is a Phi node. Similar to StoreTaggedFieldNoWriteBarrier, this handles retagging and write barriers."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "BranchIfToBooleanTrue* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Updates the input of a BranchIfToBooleanTrue node when the input is a Phi node. This function specializes the branch based on the value representation of the Phi node (Int32 or Float64)."
        },
        {
          "name": "UpdateNodePhiInput",
          "parameters": [
            "NodeBase* node",
            "Phi* phi",
            "int input_index",
            "const ProcessingState* state"
          ],
          "return_type": "ProcessResult",
          "logic": "Generic update for a Node's phi input.  If a Phi was untagged, but this node still needs a tagged input, this function adds the conversion to tag the phi."
        },
        {
          "name": "EnsurePhiTagged",
          "parameters": [
            "Phi* phi",
            "BasicBlock* block",
            "NewNodePosition pos",
            "const ProcessingState* state",
            "std::optional<int> predecessor_index"
          ],
          "return_type": "ValueNode*",
          "logic": "Ensures that a Phi node is tagged. This function creates a tagging operation if the Phi is not already tagged and returns the tagged value node."
        },
        {
          "name": "FixLoopPhisBackedge",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Fixes the backedge of loop Phis to ensure that the backedge has the correct representation. If the loop Phi is tagged then it tags the backedge if the backedge is untagged. If the loop phi is untagged then it removes any Identity nodes."
        },
        {
          "name": "AddNodeAtBlockEnd",
          "parameters": [
            "ValueNode* node",
            "BasicBlock* block",
            "DeoptFrame* deopt_frame"
          ],
          "return_type": "ValueNode*",
          "logic": "Adds a node to the end of a block, optionally setting deoptimization info."
        },
        {
          "name": "AddNode",
          "parameters": [
            "ValueNode* node",
            "BasicBlock* block",
            "NewNodePosition pos",
            "const ProcessingState* state",
            "DeoptFrame* deopt_frame"
          ],
          "return_type": "ValueNode*",
          "logic": "Adds a new node to the beginning or end of a block. Registers and tracks new nodes for labelling and debugging."
        },
        {
          "name": "RegisterNewNode",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Registers a new node for graph labelling and debugging purposes."
        },
        {
          "name": "PreparePhiTaggings",
          "parameters": [
            "BasicBlock* old_block",
            "const BasicBlock* new_block"
          ],
          "return_type": "void",
          "logic": "Prepares the phi taggings for a new basic block. This function seals and saves the current snapshot, and sets up a new snapshot based on the predecessors of the new block. It also merges taggings from multiple predecessors if the new block is a merge block."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "GetOpcodeForConversion",
      "parameters": [
        "ValueRepresentation from",
        "ValueRepresentation to",
        "bool truncating"
      ],
      "return_type": "Opcode",
      "logic": "Returns the appropriate opcode for converting between two value representations.  If truncating is true, then the opcode returns a truncating conversion. This is used to determine the correct conversion node when untagging phis."
    }
  ]
}