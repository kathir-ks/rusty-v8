{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-regalloc.h",
  "imports": [
    "src/codegen/reglist.h",
    "src/compiler/backend/instruction.h",
    "src/maglev/maglev-compilation-info.h",
    "src/maglev/maglev-graph.h",
    "src/maglev/maglev-ir.h",
    "src/maglev/maglev-regalloc-data.h",
    "src/zone/zone-containers.h"
  ],
  "classes": [
    {
      "name": "RegisterFrameState",
      "properties": [
        "values_[RegisterT::kNumRegisters]",
        "free_",
        "blocked_"
      ],
      "methods": [
        {
          "name": "empty",
          "parameters": [],
          "return_type": "RegTList",
          "logic": "Returns an empty register list."
        },
        {
          "name": "free",
          "parameters": [],
          "return_type": "RegTList",
          "logic": "Returns the list of free registers."
        },
        {
          "name": "unblocked_free",
          "parameters": [],
          "return_type": "RegTList",
          "logic": "Returns the list of free and unblocked registers."
        },
        {
          "name": "used",
          "parameters": [],
          "return_type": "RegTList",
          "logic": "Returns the list of used registers (allocatable registers - free registers)."
        },
        {
          "name": "UnblockedFreeIsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the list of unblocked free registers is empty."
        },
        {
          "name": "ForEachUsedRegister",
          "parameters": [
            "Function&& f"
          ],
          "return_type": "void",
          "logic": "Iterates through used registers and applies the provided function to each register and its corresponding ValueNode."
        },
        {
          "name": "RemoveFromFree",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "void",
          "logic": "Removes a register from the free list."
        },
        {
          "name": "AddToFree",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "void",
          "logic": "Adds a register to the free list."
        },
        {
          "name": "AddToFree",
          "parameters": [
            "RegTList list"
          ],
          "return_type": "void",
          "logic": "Adds a register list to the free list."
        },
        {
          "name": "FreeRegistersUsedBy",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Frees the registers used by the given ValueNode. It clears the registers associated with the node and adds them to the free list."
        },
        {
          "name": "SetValue",
          "parameters": [
            "RegisterT reg",
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Sets a ValueNode to a register, marking the register as used and blocked. Also adds the register to the node's register list."
        },
        {
          "name": "SetValueWithoutBlocking",
          "parameters": [
            "RegisterT reg",
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Sets a ValueNode to a register without blocking the register. Also adds the register to the node's register list."
        },
        {
          "name": "GetValue",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "ValueNode*",
          "logic": "Gets the ValueNode associated with the given register."
        },
        {
          "name": "GetValueMaybeFreeButBlocked",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "ValueNode*",
          "logic": "Gets the ValueNode associated with the register, allows reading freed registers as long as they were blocked. Debug only"
        },
        {
          "name": "blocked",
          "parameters": [],
          "return_type": "RegTList",
          "logic": "Returns the list of blocked registers."
        },
        {
          "name": "block",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "void",
          "logic": "Blocks a register, preventing it from being allocated."
        },
        {
          "name": "unblock",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "void",
          "logic": "Unblocks a register, allowing it to be allocated."
        },
        {
          "name": "is_blocked",
          "parameters": [
            "RegisterT reg"
          ],
          "return_type": "bool",
          "logic": "Checks if a register is blocked."
        },
        {
          "name": "clear_blocked",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears all blocked registers."
        },
        {
          "name": "TryChooseInputRegister",
          "parameters": [
            "ValueNode* node",
            "const compiler::InstructionOperand& hint"
          ],
          "return_type": "compiler::InstructionOperand",
          "logic": "Attempts to choose an input register for a given ValueNode based on a provided hint."
        },
        {
          "name": "TryChooseUnblockedInputRegister",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "compiler::InstructionOperand",
          "logic": "Attempts to choose an unblocked input register for a given ValueNode."
        },
        {
          "name": "AllocateRegister",
          "parameters": [
            "ValueNode* node",
            "const compiler::InstructionOperand& hint"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Allocates a register for a ValueNode, potentially using a hint."
        }
      ]
    },
    {
      "name": "StraightForwardRegisterAllocator",
      "properties": [
        "general_registers_",
        "double_registers_",
        "untagged_",
        "tagged_",
        "patches_",
        "block_it_",
        "node_it_",
        "current_node_",
        "compilation_info_",
        "printing_visitor_",
        "graph_"
      ],
      "methods": [
        {
          "name": "StraightForwardRegisterAllocator",
          "parameters": [
            "MaglevCompilationInfo* compilation_info",
            "Graph* graph"
          ],
          "return_type": null,
          "logic": "Constructor for the register allocator, initializing the internal state."
        },
        {
          "name": "~StraightForwardRegisterAllocator",
          "parameters": [],
          "return_type": null,
          "logic": "Destructor for the register allocator."
        },
        {
          "name": "ComputePostDominatingHoles",
          "parameters": [],
          "return_type": "void",
          "logic": "Computes the post-dominating holes in the graph."
        },
        {
          "name": "AllocateRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "The main function to allocate registers for the Maglev graph."
        },
        {
          "name": "PrintLiveRegs",
          "parameters": [],
          "return_type": "void",
          "logic": "Prints the live registers for debugging."
        },
        {
          "name": "UpdateUse",
          "parameters": [
            "Input* input"
          ],
          "return_type": "void",
          "logic": "Updates the usage of a register based on the input."
        },
        {
          "name": "UpdateUse",
          "parameters": [
            "ValueNode* node",
            "InputLocation* input_location"
          ],
          "return_type": "void",
          "logic": "Updates the use of a register based on the ValueNode and input location."
        },
        {
          "name": "MarkAsClobbered",
          "parameters": [
            "ValueNode* node",
            "const compiler::AllocatedOperand& location"
          ],
          "return_type": "void",
          "logic": "Marks a node as clobbered, meaning its register is no longer valid after an instruction."
        },
        {
          "name": "AllocateControlNode",
          "parameters": [
            "ControlNode* node",
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Allocates registers for control nodes."
        },
        {
          "name": "AllocateNode",
          "parameters": [
            "Node* node"
          ],
          "return_type": "void",
          "logic": "Allocates registers for a general node."
        },
        {
          "name": "AllocateNodeResult",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Allocates registers for the result of a ValueNode."
        },
        {
          "name": "AllocateEagerDeopt",
          "parameters": [
            "const EagerDeoptInfo& deopt_info"
          ],
          "return_type": "void",
          "logic": "Allocates registers for eager deoptimization information."
        },
        {
          "name": "AllocateLazyDeopt",
          "parameters": [
            "const LazyDeoptInfo& deopt_info"
          ],
          "return_type": "void",
          "logic": "Allocates registers for lazy deoptimization information."
        },
        {
          "name": "AssignFixedInput",
          "parameters": [
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Assigns a fixed register to an input."
        },
        {
          "name": "AssignArbitraryRegisterInput",
          "parameters": [
            "NodeBase* result_node",
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Assigns an arbitrary register to an input."
        },
        {
          "name": "AssignAnyInput",
          "parameters": [
            "Input& input"
          ],
          "return_type": "void",
          "logic": "Assigns any available input register."
        },
        {
          "name": "AssignInputs",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns registers to the inputs of a node."
        },
        {
          "name": "AssignFixedTemporaries",
          "parameters": [
            "RegisterFrameState<RegisterT>& registers",
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns fixed temporary registers to a node (templated version)."
        },
        {
          "name": "AssignFixedTemporaries",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns fixed temporary registers to a node."
        },
        {
          "name": "AssignArbitraryTemporaries",
          "parameters": [
            "RegisterFrameState<RegisterT>& registers",
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns arbitrary temporary registers to a node (templated version)."
        },
        {
          "name": "AssignArbitraryTemporaries",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Assigns arbitrary temporary registers to a node."
        },
        {
          "name": "SetLoopPhiRegisterHint",
          "parameters": [
            "Phi* phi",
            "RegisterT reg"
          ],
          "return_type": "void",
          "logic": "Sets a register hint for a Phi node inside a loop (templated)."
        },
        {
          "name": "TryAllocateToInput",
          "parameters": [
            "Phi* phi"
          ],
          "return_type": "void",
          "logic": "Tries to allocate an input register for a Phi node."
        },
        {
          "name": "VerifyInputs",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Verifies the register assignments for the inputs of a node (debug only)."
        },
        {
          "name": "VerifyRegisterState",
          "parameters": [],
          "return_type": "void",
          "logic": "Verifies the register state (debug only)."
        },
        {
          "name": "AddMoveBeforeCurrentNode",
          "parameters": [
            "ValueNode* node",
            "compiler::InstructionOperand source",
            "compiler::AllocatedOperand target"
          ],
          "return_type": "void",
          "logic": "Adds a move instruction before the current node to transfer a value between registers or memory."
        },
        {
          "name": "AllocateSpillSlot",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Allocates a spill slot for a ValueNode."
        },
        {
          "name": "Spill",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Spills a ValueNode's register to memory."
        },
        {
          "name": "SpillRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Spills registers when there is register pressure."
        },
        {
          "name": "SpillAndClearRegisters",
          "parameters": [
            "RegisterFrameState<RegisterT>& registers"
          ],
          "return_type": "void",
          "logic": "Spills the registers in the register frame and clears them."
        },
        {
          "name": "SpillAndClearRegisters",
          "parameters": [],
          "return_type": "void",
          "logic": "Spills registers and clears them."
        },
        {
          "name": "SaveRegisterSnapshot",
          "parameters": [
            "NodeBase* node"
          ],
          "return_type": "void",
          "logic": "Saves a snapshot of the register state."
        },
        {
          "name": "FreeRegistersUsedBy",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "void",
          "logic": "Frees the registers used by a ValueNode."
        },
        {
          "name": "FreeUnblockedRegister",
          "parameters": [
            "RegListBase<RegisterT> reserved"
          ],
          "return_type": "RegisterT",
          "logic": "Frees an unblocked register of a specific type."
        },
        {
          "name": "PickRegisterToFree",
          "parameters": [
            "RegListBase<RegisterT> reserved"
          ],
          "return_type": "RegisterT",
          "logic": "Picks a register to free, considering reserved registers."
        },
        {
          "name": "GetRegisterFrameState",
          "parameters": [],
          "return_type": "RegisterFrameState<RegisterT>&",
          "logic": "Returns the register frame state for a specific register type (Register or DoubleRegister)."
        },
        {
          "name": "DropRegisterValueAtEnd",
          "parameters": [
            "RegisterT reg",
            "bool force_spill"
          ],
          "return_type": "void",
          "logic": "Drops the value of a register at the end of a block, potentially spilling it."
        },
        {
          "name": "IsCurrentNodeLastUseOf",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "bool",
          "logic": "Checks if the current node is the last use of a ValueNode."
        },
        {
          "name": "EnsureFreeRegisterAtEnd",
          "parameters": [
            "const compiler::InstructionOperand& hint"
          ],
          "return_type": "void",
          "logic": "Ensures that there is a free register at the end of a block, potentially using a hint."
        },
        {
          "name": "AllocateRegisterAtEnd",
          "parameters": [
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Allocates a register for a node at the end of a block."
        },
        {
          "name": "DropRegisterValue",
          "parameters": [
            "RegisterFrameState<RegisterT>& registers",
            "RegisterT reg",
            "bool force_spill"
          ],
          "return_type": "void",
          "logic": "Drops a register value and spills if necessary."
        },
        {
          "name": "DropRegisterValue",
          "parameters": [
            "Register reg"
          ],
          "return_type": "void",
          "logic": "Drops a register value and spills if necessary."
        },
        {
          "name": "DropRegisterValue",
          "parameters": [
            "DoubleRegister reg"
          ],
          "return_type": "void",
          "logic": "Drops a register value and spills if necessary."
        },
        {
          "name": "AllocateRegister",
          "parameters": [
            "ValueNode* node",
            "const compiler::InstructionOperand& hint"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Allocates a register for a node with optional hint."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "RegisterFrameState<RegisterT>& registers",
            "RegisterT reg",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Forcefully allocates a specific register."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "Register reg",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Forcefully allocates a specific register."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "DoubleRegister reg",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Forcefully allocates a specific double register."
        },
        {
          "name": "ForceAllocate",
          "parameters": [
            "const Input& input",
            "ValueNode* node"
          ],
          "return_type": "compiler::AllocatedOperand",
          "logic": "Forcefully allocates a specific register for an input."
        },
        {
          "name": "ForEachMergePointRegisterState",
          "parameters": [
            "MergePointRegisterState& merge_point_state",
            "Function&& f"
          ],
          "return_type": "void",
          "logic": "Applies a function to each register in a merge point's register state."
        },
        {
          "name": "ClearRegisterValues",
          "parameters": [],
          "return_type": "void",
          "logic": "Clears all register values."
        },
        {
          "name": "InitializeRegisterValues",
          "parameters": [
            "MergePointRegisterState& target_state"
          ],
          "return_type": "void",
          "logic": "Initializes register values from a merge point state."
        },
        {
          "name": "IsInRegister",
          "parameters": [
            "MergePointRegisterState& target_state",
            "ValueNode* incoming"
          ],
          "return_type": "bool",
          "logic": "Checks if a value node is in a register at a merge point (debug only)."
        },
        {
          "name": "IsForwardReachable",
          "parameters": [
            "BasicBlock* start_block",
            "NodeIdT first_id",
            "NodeIdT last_id"
          ],
          "return_type": "bool",
          "logic": "Checks if a block of code is forward reachable (debug only)."
        },
        {
          "name": "AllUsedRegistersLiveAt",
          "parameters": [
            "ConditionalControlNode* control_node",
            "BasicBlock* target"
          ],
          "return_type": "bool",
          "logic": "Checks if all used registers are live at a conditional control node's target block (debug only)."
        },
        {
          "name": "AllUsedRegistersLiveAt",
          "parameters": [
            "BasicBlock* target"
          ],
          "return_type": "bool",
          "logic": "Checks if all used registers are live at a target block (debug only)."
        },
        {
          "name": "HoistLoopReloads",
          "parameters": [
            "BasicBlock* target",
            "RegisterFrameState<RegisterT>& registers"
          ],
          "return_type": "void",
          "logic": "Hoists loop reloads for a target block."
        },
        {
          "name": "HoistLoopSpills",
          "parameters": [
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Hoists loop spills for a target block."
        },
        {
          "name": "InitializeBranchTargetRegisterValues",
          "parameters": [
            "ControlNode* source",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes register values for a branch target block."
        },
        {
          "name": "InitializeEmptyBlockRegisterValues",
          "parameters": [
            "ControlNode* source",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes register values for an empty block."
        },
        {
          "name": "InitializeBranchTargetPhis",
          "parameters": [
            "int predecessor_id",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes Phi nodes for a branch target."
        },
        {
          "name": "InitializeConditionalBranchTarget",
          "parameters": [
            "ConditionalControlNode* source",
            "BasicBlock* target"
          ],
          "return_type": "void",
          "logic": "Initializes a conditional branch target."
        },
        {
          "name": "MergeRegisterValues",
          "parameters": [
            "ControlNode* control",
            "BasicBlock* target",
            "int predecessor_id"
          ],
          "return_type": "void",
          "logic": "Merges register values from predecessors into a target block."
        },
        {
          "name": "ApplyPatches",
          "parameters": [
            "BasicBlock* block"
          ],
          "return_type": "void",
          "logic": "Applies patches to a basic block."
        },
        {
          "name": "graph_labeller",
          "parameters": [],
          "return_type": "MaglevGraphLabeller*",
          "logic": "Returns a pointer to the graph labeller."
        }
      ]
    }
  ],
  "functions": []
}