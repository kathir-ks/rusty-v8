{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-compilation-info.h",
  "imports": [
    "<memory>",
    "<optional>",
    "src/handles/handles.h",
    "src/handles/maybe-handles.h",
    "src/utils/utils.h",
    "src/zone/zone.h"
  ],
  "classes": [
    {
      "name": "MaglevCompilationInfo",
      "properties": [
        "zone_",
        "broker_",
        "toplevel_compilation_unit_",
        "toplevel_function_",
        "code_",
        "osr_offset_",
        "owns_broker_",
        "is_turbolev_",
        "could_not_inline_all_candidates_",
        "graph_labeller_",
        "code_generator_",
        "code_comments_",
        "maglev_",
        "print_maglev_code_",
        "print_maglev_graph_",
        "trace_maglev_regalloc_",
        "collect_source_positions_",
        "specialize_to_function_context_",
        "ph_",
        "canonical_handles_"
      ],
      "methods": [
        {
          "name": "NewForTurboshaft",
          "parameters": [
            "Isolate* isolate",
            "compiler::JSHeapBroker* broker",
            "IndirectHandle<JSFunction> function",
            "BytecodeOffset osr_offset",
            "bool specialize_to_function_context"
          ],
          "return_type": "std::unique_ptr<MaglevCompilationInfo>",
          "logic": "Creates a new MaglevCompilationInfo object specifically for use with the Turboshaft frontend."
        },
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "IndirectHandle<JSFunction> function",
            "BytecodeOffset osr_offset"
          ],
          "return_type": "std::unique_ptr<MaglevCompilationInfo>",
          "logic": "Creates a new MaglevCompilationInfo object."
        },
        {
          "name": "~MaglevCompilationInfo",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the MaglevCompilationInfo class."
        },
        {
          "name": "zone",
          "parameters": [],
          "return_type": "Zone*",
          "logic": "Returns the zone associated with the compilation info."
        },
        {
          "name": "broker",
          "parameters": [],
          "return_type": "compiler::JSHeapBroker*",
          "logic": "Returns the JSHeapBroker associated with the compilation info."
        },
        {
          "name": "toplevel_compilation_unit",
          "parameters": [],
          "return_type": "MaglevCompilationUnit*",
          "logic": "Returns the top-level compilation unit."
        },
        {
          "name": "toplevel_function",
          "parameters": [],
          "return_type": "IndirectHandle<JSFunction>",
          "logic": "Returns the top-level JSFunction."
        },
        {
          "name": "toplevel_osr_offset",
          "parameters": [],
          "return_type": "BytecodeOffset",
          "logic": "Returns the bytecode offset for on-stack replacement (OSR)."
        },
        {
          "name": "toplevel_is_osr",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if this compilation is for an on-stack replacement (OSR)."
        },
        {
          "name": "set_code",
          "parameters": [
            "IndirectHandle<Code> code"
          ],
          "return_type": "void",
          "logic": "Sets the generated Code object."
        },
        {
          "name": "get_code",
          "parameters": [],
          "return_type": "MaybeIndirectHandle<Code>",
          "logic": "Returns the generated Code object."
        },
        {
          "name": "is_turbolev",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether this MaglevCompilationInfo is used in Turboshaft's frontend."
        },
        {
          "name": "has_graph_labeller",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if a graph labeller is present."
        },
        {
          "name": "set_graph_labeller",
          "parameters": [
            "MaglevGraphLabeller* graph_labeller"
          ],
          "return_type": "void",
          "logic": "Sets the graph labeller."
        },
        {
          "name": "graph_labeller",
          "parameters": [],
          "return_type": "MaglevGraphLabeller*",
          "logic": "Returns the graph labeller."
        },
        {
          "name": "set_code_generator",
          "parameters": [
            "std::unique_ptr<MaglevCodeGenerator> code_generator"
          ],
          "return_type": "void",
          "logic": "Sets the code generator."
        },
        {
          "name": "code_generator",
          "parameters": [],
          "return_type": "MaglevCodeGenerator*",
          "logic": "Returns the code generator."
        },
        {
          "name": "code_comments",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the value of the 'code_comments' flag."
        },
        {
          "name": "maglev",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the value of the 'maglev' flag."
        },
        {
          "name": "print_maglev_code",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the value of the 'print_maglev_code' flag."
        },
        {
          "name": "print_maglev_graph",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the value of the 'print_maglev_graph' flag."
        },
        {
          "name": "trace_maglev_regalloc",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns the value of the 'trace_maglev_regalloc' flag."
        },
        {
          "name": "collect_source_positions",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether source positions should be collected."
        },
        {
          "name": "specialize_to_function_context",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the generated code should be specialized to the function context."
        },
        {
          "name": "ReopenAndCanonicalizeHandlesInNewScope",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "void",
          "logic": "Reopens and canonicalizes handles in a new compilation handle scope."
        },
        {
          "name": "set_persistent_handles",
          "parameters": [
            "std::unique_ptr<PersistentHandles>&& persistent_handles"
          ],
          "return_type": "void",
          "logic": "Sets the persistent handles."
        },
        {
          "name": "DetachPersistentHandles",
          "parameters": [],
          "return_type": "std::unique_ptr<PersistentHandles>",
          "logic": "Detaches the persistent handles."
        },
        {
          "name": "set_canonical_handles",
          "parameters": [
            "std::unique_ptr<CanonicalHandlesMap>&& canonical_handles"
          ],
          "return_type": "void",
          "logic": "Sets the canonical handles."
        },
        {
          "name": "DetachCanonicalHandles",
          "parameters": [],
          "return_type": "std::unique_ptr<CanonicalHandlesMap>",
          "logic": "Detaches the canonical handles."
        },
        {
          "name": "is_detached",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the handles are detached."
        },
        {
          "name": "could_not_inline_all_candidates",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns true if not all inline candidates could be inlined due to size constraints."
        },
        {
          "name": "set_could_not_inline_all_candidates",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the flag indicating that not all inline candidates could be inlined."
        }
      ]
    }
  ],
  "functions": [],
  "enums": []
}