{
  "file_path": "/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-graph-printer.cc",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n    \"file_path\": \"/home/kathirks_gc/v8_go/codebase/src/maglev/maglev-graph-printer.cc\",\n    \"imports\": [\n        \"src/maglev/maglev-graph-printer.h\",\n        \"initializer_list\",\n        \"iomanip\",\n        \"ostream\",\n        \"type_traits\",\n        \"vector\",\n        \"src/base/logging.h\",\n        \"src/common/assert-scope.h\",\n        \"src/interpreter/bytecode-array-iterator.h\",\n        \"src/interpreter/bytecode-decoder.h\",\n        \"src/maglev/maglev-basic-block.h\",\n        \"src/maglev/maglev-graph-labeller.h\",\n        \"src/maglev/maglev-graph-processor.h\",\n        \"src/maglev/maglev-graph.h\",\n        \"src/maglev/maglev-ir-inl.h\",\n        \"src/objects/script-inl.h\",\n        \"src/objects/shared-function-info-inl.h\",\n        \"src/utils/utils.h\"\n    ],\n    \"classes\": [\n        {\n            \"name\": \"Connection\",\n            \"properties\": [\n                \"uint8_t connected = 0\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"Connect\",\n                    \"parameters\": [\n                        \"ConnectionLocation loc\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the 'connected' flags based on the provided location.\"\n                },\n                {\n                    \"name\": \"AddHorizontal\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Connects the left and right sides of the connection.\"\n                },\n                {\n                    \"name\": \"AddVertical\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Connects the top and bottom sides of the connection.\"\n                },\n                {\n                    \"name\": \"ToString\",\n                    \"parameters\": [],\n                    \"return_type\": \"const char*\",\n                    \"logic\": \"Returns a character representation of the connection based on the 'connected' flags using unicode characters to draw line connections.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"MaglevPrintingVisitorOstream\",\n            \"properties\": [\n                \"std::ostream& os_\",\n                \"std::vector<BasicBlock*>* targets_\",\n                \"int padding_size_\",\n                \"bool previous_was_new_line_ = true\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"MaglevPrintingVisitorOstream\",\n                    \"parameters\": [\n                        \"std::ostream& os\",\n                        \"std::vector<BasicBlock*>* targets\"\n                    ],\n                    \"return_type\": \"MaglevPrintingVisitorOstream\",\n                    \"logic\": \"Constructor, initializes the ostream and targets.\"\n                },\n                {\n                    \"name\": \"~MaglevPrintingVisitorOstream\",\n                    \"parameters\": [],\n                    \"return_type\": \"override\",\n                    \"logic\": \"Destructor, uses default implementation\"\n                },\n                {\n                    \"name\": \"cast\",\n                    \"parameters\": [\n                        \"const std::unique_ptr<std::ostream>& os\"\n                    ],\n                    \"return_type\": \"MaglevPrintingVisitorOstream*\",\n                    \"logic\": \"Casts a unique pointer to an ostream to a MaglevPrintingVisitorOstream*.\"\n                },\n                {\n                    \"name\": \"set_padding\",\n                    \"parameters\": [\n                        \"int padding_size\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the padding size.\"\n                },\n                {\n                    \"name\": \"overflow\",\n                    \"parameters\": [\n                        \"int c\"\n                    ],\n                    \"return_type\": \"int\",\n                    \"logic\": \"Overrides the ostream overflow function to insert vertical arrows and padding before each line and then call the base class output.  This is the core mechanism of the printer to add connection lines.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"MaglevPrintingVisitor\",\n            \"properties\": [\n                \"MaglevGraphLabeller* graph_labeller_\",\n                \"std::ostream& os_\",\n                \"std::unique_ptr<std::ostream> os_for_additional_info_\",\n                \"std::vector<BasicBlock*> targets_\",\n                \"std::set<BasicBlock*> loop_headers_\",\n                \"NodeIdT max_node_id_ = kInvalidNodeId\",\n                \"MaglevGraphLabeller::Provenance existing_provenance_ = {}\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"MaglevPrintingVisitor\",\n                    \"parameters\": [\n                        \"MaglevGraphLabeller* graph_labeller\",\n                        \"std::ostream& os\"\n                    ],\n                    \"return_type\": \"MaglevPrintingVisitor\",\n                    \"logic\": \"Constructor, initializes the graph labeller and output stream.\"\n                },\n                {\n                    \"name\": \"PreProcessGraph\",\n                    \"parameters\": [\n                        \"Graph* graph\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Pre-processes the graph to find loop headers and the maximum node ID.  Also walks the blocks to calculate the maximum number of connection lines that may be needed.\"\n                },\n                {\n                    \"name\": \"PreProcessBasicBlock\",\n                    \"parameters\": [\n                        \"BasicBlock* block\"\n                    ],\n                    \"return_type\": \"BlockProcessResult\",\n                    \"logic\": \"Pre-processes a basic block to draw connection arrows to blocks that will connect to it and print some initial block information. Also removes processed blocks from the set of loop headers.\"\n                },\n                {\n                    \"name\": \"Process\",\n                    \"parameters\": [\n                        \"Phi* phi\",\n                        \"const ProcessingState& state\"\n                    ],\n                    \"return_type\": \"ProcessResult\",\n                    \"logic\": \"Processes a Phi node and prints its information.\"\n                },\n                {\n                    \"name\": \"Process\",\n                    \"parameters\": [\n                        \"Node* node\",\n                        \"const ProcessingState& state\"\n                    ],\n                    \"return_type\": \"ProcessResult\",\n                    \"logic\": \"Processes a Node and prints its information.\"\n                },\n                {\n                    \"name\": \"Process\",\n                    \"parameters\": [\n                        \"ControlNode* control_node\",\n                        \"const ProcessingState& state\"\n                    ],\n                    \"return_type\": \"ProcessResult\",\n                    \"logic\": \"Processes a ControlNode and prints its information.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"PrintNode\",\n            \"properties\": [\n                \"NodeBase* node_\",\n                \"MaglevGraphLabeller* graph_labeller_\",\n                \"bool skip_targets_\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"Print\",\n                    \"parameters\": [\n                        \"std::ostream& os\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Prints the node's details to the output stream using the provided graph labeller.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"PrintNodeLabel\",\n            \"properties\": [\n                \"NodeBase* node_\",\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"Print\",\n                    \"parameters\": [\n                        \"std::ostream& os\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Prints the node's label using the provided graph labeller.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"BasicBlock\",\n            \"properties\": [],\n            \"methods\": [\n                {\n                    \"name\": \"Print\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Prints a basic block's content to standard output, used for debugging.\"\n                }\n            ]\n        }\n    ],\n    \"functions\": [\n        {\n            \"name\": \"IntWidth\",\n            \"parameters\": [\n                \"int val\"\n            ],\n            \"return_type\": \"int\",\n            \"logic\": \"Calculates the width (number of digits) of an integer.\"\n        },\n        {\n            \"name\": \"MaxIdWidth\",\n            \"parameters\": [\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"NodeIdT max_node_id\",\n                \"int padding_adjustement = 0\"\n            ],\n            \"return_type\": \"int\",\n            \"logic\": \"Calculates the maximum width required to print node IDs.\"\n        },\n        {\n            \"name\": \"PrintPaddedId\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"NodeIdT max_node_id\",\n                \"NodeBase* node\",\n                \"std::string padding = \\\" \\\"\",\n                \"int padding_adjustement = 0\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints a node ID with padding to align output.\"\n        },\n        {\n            \"name\": \"PrintPadding\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"int size\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints padding (spaces) to the specified output stream with a given size.\"\n        },\n        {\n            \"name\": \"PrintPadding\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"NodeIdT max_node_id\",\n                \"int padding_adjustement\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints padding to the output stream based on the maximum ID width, computed via MaxIdWidth.\"\n        },\n        {\n            \"name\": \"operator<<\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"const Connection& c\"\n            ],\n            \"return_type\": \"std::ostream&\",\n            \"logic\": \"Overloads the << operator to print a Connection object to an output stream.  Calls the Connection's ToString() method.\"\n        },\n        {\n            \"name\": \"PrintVerticalArrows\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"const std::vector<BasicBlock*>& targets\",\n                \"std::set<size_t> arrows_starting_here = {}\",\n                \"std::set<BasicBlock*> targets_starting_here = {}\",\n                \"bool is_loop = false\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints vertical arrows representing control flow connections between basic blocks in the graph. It uses unicode characters to draw lines and arrows.  It takes into account loop connections.\"\n        },\n        {\n            \"name\": \"AddTarget\",\n            \"parameters\": [\n                \"std::vector<BasicBlock*>& targets\",\n                \"BasicBlock* target\"\n            ],\n            \"return_type\": \"size_t\",\n            \"logic\": \"Adds a target basic block to a vector of targets, efficiently managing the list by adding to the first available empty slot or extending the list.\"\n        },\n        {\n            \"name\": \"AddTargetIfNotNext\",\n            \"parameters\": [\n                \"std::vector<BasicBlock*>& targets\",\n                \"BasicBlock* target\",\n                \"BasicBlock* next_block\",\n                \"std::set<size_t>* arrows_starting_here = nullptr\"\n            ],\n            \"return_type\": \"bool\",\n            \"logic\": \"Adds a target basic block to a vector of targets only if it's not the next sequential block (fallthrough).  Can be used to signal that an arrow is starting here and add it to a set.\"\n        },\n        {\n            \"name\": \"PrintInputLocationAndAdvance\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"ValueNode* node\",\n                \"InputLocation*& input_location\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints the operand of the current input location and increments the pointer.\"\n        },\n        {\n            \"name\": \"PrintSingleDeoptFrame\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"const DeoptFrame& frame\",\n                \"InputLocation*& current_input_location\",\n                \"LazyDeoptInfo* lazy_deopt_info_if_top_frame = nullptr\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints information about a single deoptimization frame, including its type and the values of live variables.\"\n        },\n        {\n            \"name\": \"PrintVirtualObjects\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"const DeoptFrame& frame\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints information about virtual objects in a deoptimization frame.\"\n        },\n        {\n            \"name\": \"PrintDeoptInfoInputLocation\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"DeoptInfo* deopt_info\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints debug information about the input locations of a deoptimization.\"\n        },\n        {\n            \"name\": \"RecursivePrintEagerDeopt\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"const DeoptFrame& frame\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\",\n                \"InputLocation*& current_input_location\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Recursively prints information about eager deoptimization frames.\"\n        },\n        {\n            \"name\": \"PrintEagerDeopt\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"NodeBase* node\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints information about an eager deoptimization, including the stack frames.\"\n        },\n        {\n            \"name\": \"MaybePrintEagerDeopt\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"NodeBase* node\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Conditionally prints information about an eager deoptimization if the node can eagerly deoptimize.\"\n        },\n        {\n            \"name\": \"RecursivePrintLazyDeopt\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"const DeoptFrame& frame\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\",\n                \"InputLocation*& current_input_location\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Recursively prints lazy deopt information of a deopt frame.\"\n        },\n        {\n            \"name\": \"PrintLazyDeopt\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"NodeT* node\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints information about a lazy deoptimization, including the stack frames.\"\n        },\n        {\n            \"name\": \"PrintExceptionHandlerPoint\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"NodeT* node\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints information about the exception handler point.\"\n        },\n        {\n            \"name\": \"MaybePrintLazyDeoptOrExceptionHandler\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"NodeBase* node\",\n                \"MaglevGraphLabeller* graph_labeller\",\n                \"int max_node_id\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Conditionally prints information about a lazy deoptimization or exception handler based on the node's opcode.\"\n        },\n        {\n            \"name\": \"MaybePrintProvenance\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"std::vector<BasicBlock*> targets\",\n                \"MaglevGraphLabeller::Provenance provenance\",\n                \"MaglevGraphLabeller::Provenance existing_provenance\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints the provenance information (source code location, bytecode offset) for a node, if it has changed since the last node.\"\n        },\n        {\n            \"name\": \"PrintGraph\",\n            \"parameters\": [\n                \"std::ostream& os\",\n                \"MaglevCompilationInfo* compilation_info\",\n                \"Graph* const graph\"\n            ],\n            \"return_type\": \"void\",\n            \"logic\": \"Prints the entire Maglev graph to the given output stream.\"\n        }\n    ]\n}\n```"
}