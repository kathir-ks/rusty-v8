{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/type-traits.h",
  "imports": [
    "<cstddef>",
    "<type_traits>",
    "<utility>"
  ],
  "classes": [
    {
      "name": "Visitor",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::BasicMember",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::DijkstraWriteBarrierPolicy",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::NoWriteBarrierPolicy",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::StrongMemberTag",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::UntracedMemberTag",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::WeakMemberTag",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsWeak",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsTraceMethodConst",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsTraceable",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::HasGarbageCollectedMixinTypeMarker",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::HasGarbageCollectedTypeMarker",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsGarbageCollectedMixinType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsGarbageCollectedType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsGarbageCollectedOrMixinType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsGarbageCollectedWithMixinType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsSubclassOfBasicMemberTemplate",
      "properties": [],
      "methods": [
        {
          "name": "SubclassCheck",
          "parameters": [
            "const BasicMember<T, WeaknessTag, WriteBarrierPolicy, CheckingPolicy, StorageType>*"
          ],
          "return_type": "std::true_type",
          "logic": "Helper function to check if a given type is a subclass of BasicMember. Returns std::true_type if it is."
        },
        {
          "name": "SubclassCheck",
          "parameters": [
            "..."
          ],
          "return_type": "std::false_type",
          "logic": "Overload of SubclassCheck.  Returns std::false_type if the first overload doesn't match."
        }
      ]
    },
    {
      "name": "internal::IsMemberType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsWeakMemberType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsUntracedMemberType",
      "properties": [],
      "methods": []
    },
    {
      "name": "internal::IsComplete",
      "properties": [],
      "methods": [
        {
          "name": "IsSizeOfKnown",
          "parameters": [
            "U*"
          ],
          "return_type": "std::true_type",
          "logic": "Helper to check if the size of a type is known. Returns std::true_type if known."
        },
        {
          "name": "IsSizeOfKnown",
          "parameters": [
            "..."
          ],
          "return_type": "std::false_type",
          "logic": "Overload of IsSizeOfKnown. Returns std::false_type if the first overload doesn't match."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "internal::IsTraceMethodConst<T, std::void_t<decltype(std::declval<const T>().Trace(std::declval<Visitor*>()))>>::operator()",
      "parameters": [],
      "return_type": "bool",
      "logic": "Determines if the Trace method of a type is const."
    },
    {
      "name": "cppgc::IsGarbageCollectedMixinTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type inherits from `GarbageCollectedMixin` but not `GarbageCollected<T>`."
    },
    {
      "name": "cppgc::IsGarbageCollectedTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type inherits from `GarbageCollected<T>`."
    },
    {
      "name": "cppgc::IsGarbageCollectedOrMixinTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type inherits from `GarbageCollected<T>` or `GarbageCollectedMixin`."
    },
    {
      "name": "cppgc::IsGarbageCollectedWithMixinTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type inherits from both `GarbageCollected<T>` and `GarbageCollectedMixin`."
    },
    {
      "name": "cppgc::IsMemberTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type is `Member<T>`."
    },
    {
      "name": "cppgc::IsUntracedMemberTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type is `UntracedMember<T>`."
    },
    {
      "name": "cppgc::IsWeakMemberTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type is `WeakMember<T>`."
    },
    {
      "name": "cppgc::IsWeakV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type is a weak reference."
    },
    {
      "name": "cppgc::IsCompleteV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that holds the result of checking if a type is complete."
    },
    {
      "name": "cppgc::IsMemberOrWeakMemberTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that checks if a type is either a `Member<T>` or a `WeakMember<T>`."
    },
    {
      "name": "cppgc::IsAnyMemberTypeV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that checks if a type is any member type."
    },
    {
      "name": "internal::IsDecayedSameV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that checks if two types are the same after decay."
    },
    {
      "name": "internal::IsStrictlyBaseOfV",
      "parameters": [],
      "return_type": "bool",
      "logic": "A constexpr variable that checks if one type is a strict base of another."
    }
  ]
}