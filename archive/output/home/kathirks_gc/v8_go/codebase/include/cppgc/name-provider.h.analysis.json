{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/name-provider.h",
  "imports": [
    "v8config.h"
  ],
  "classes": [
    {
      "name": "NameProvider",
      "properties": [
        "kHiddenName",
        "kNoNameDeducible"
      ],
      "methods": [
        {
          "name": "SupportsCppClassNamesAsObjectNames",
          "parameters": [],
          "return_type": "bool",
          "logic": "Determines whether the build supports extracting C++ class names as object names for garbage collection. Returns true if C++ names are supported, false otherwise. This is determined by the CPPGC_SUPPORTS_OBJECT_NAMES preprocessor definition."
        },
        {
          "name": "~NameProvider",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual destructor for the NameProvider class. Allows for proper cleanup of derived classes."
        },
        {
          "name": "GetHumanReadableName",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Abstract method that must be implemented by derived classes to provide a human-readable name for a garbage-collected object.  The returned string must stay alive as long as needed by the heap profiler. Implementations must not allocate memory on the cppgc heap."
        }
      ]
    }
  ],
  "functions": [],
  "constants": [
    {
      "name": "kHiddenName",
      "type": "const char[]",
      "value": "\"InternalNode\"",
      "description": "Name used when hiding internal object names for security or optimization purposes."
    },
    {
      "name": "kNoNameDeducible",
      "type": "const char[]",
      "value": "\"<No name>\"",
      "description": "Name used when the compiler or runtime environment cannot deduce a name from the C++ type of the object."
    }
  ]
}