{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/cppgc/internal/member-storage.h",
  "imports": [
    "<atomic>",
    "<cstddef>",
    "<type_traits>",
    "cppgc/internal/api-constants.h",
    "cppgc/internal/caged-heap.h",
    "cppgc/internal/logging.h",
    "cppgc/sentinel-pointer.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "CageBaseGlobal",
      "properties": [
        "static constexpr uintptr_t kLowerHalfWordMask",
        "static union alignas(api_constants::kCachelineSize) Base g_base_"
      ],
      "methods": [
        {
          "name": "Get",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the base address of the cage. Asserts that the base is consistent."
        },
        {
          "name": "IsSet",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the base address is set. Asserts that the base is consistent."
        },
        {
          "name": "IsBaseConsistent",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the lower halfword of g_base_.base matches kLowerHalfWordMask."
        }
      ]
    },
    {
      "name": "CompressedPointer",
      "properties": [
        "using IntegralType = uint32_t;",
        "static constexpr auto kWriteBarrierSlotType = WriteBarrierSlotType::kCompressed;",
        "IntegralType value_"
      ],
      "methods": [
        {
          "name": "CompressedPointer",
          "parameters": [],
          "return_type": "CompressedPointer",
          "logic": "Default constructor. Initializes value_ to 0u."
        },
        {
          "name": "CompressedPointer",
          "parameters": [
            "const void* value",
            "AtomicInitializerTag"
          ],
          "return_type": "CompressedPointer",
          "logic": "Constructor for atomic initialization. Stores the compressed pointer atomically."
        },
        {
          "name": "CompressedPointer",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "CompressedPointer",
          "logic": "Constructor. Compresses the given pointer and stores it."
        },
        {
          "name": "CompressedPointer",
          "parameters": [
            "std::nullptr_t"
          ],
          "return_type": "CompressedPointer",
          "logic": "Constructor that sets the compressed pointer to null (0u)."
        },
        {
          "name": "CompressedPointer",
          "parameters": [
            "SentinelPointer"
          ],
          "return_type": "CompressedPointer",
          "logic": "Constructor that sets the compressed pointer to a sentinel value."
        },
        {
          "name": "Load",
          "parameters": [],
          "return_type": "const void*",
          "logic": "Decompresses the stored compressed pointer and returns the raw pointer."
        },
        {
          "name": "LoadAtomic",
          "parameters": [],
          "return_type": "const void*",
          "logic": "Atomically loads the compressed pointer, decompresses it, and returns the raw pointer."
        },
        {
          "name": "Store",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "void",
          "logic": "Compresses the given pointer and stores it."
        },
        {
          "name": "StoreAtomic",
          "parameters": [
            "const void* value"
          ],
          "return_type": "void",
          "logic": "Atomically compresses the given pointer and stores it."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the compressed pointer to null (0u)."
        },
        {
          "name": "IsCleared",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compressed pointer is null (0u)."
        },
        {
          "name": "IsSentinel",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the compressed pointer is a sentinel value."
        },
        {
          "name": "GetAsInteger",
          "parameters": [],
          "return_type": "uint32_t",
          "logic": "Returns the underlying integer representation of the compressed pointer."
        },
        {
          "name": "Compress",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "IntegralType",
          "logic": "Compresses a given pointer by shifting it and truncating it to fit into IntegralType. Requires that CageBaseGlobal::IsSet() is true."
        },
        {
          "name": "Decompress",
          "parameters": [
            "IntegralType ptr"
          ],
          "return_type": "void*",
          "logic": "Decompresses a compressed pointer by shifting it back and combining it with the base address. Requires that CageBaseGlobal::IsSet() is true."
        },
        {
          "name": "Decompress",
          "parameters": [
            "IntegralType ptr",
            "uintptr_t base"
          ],
          "return_type": "void*",
          "logic": "Decompresses a compressed pointer by shifting it back and combining it with the given base address. Requires that CageBaseGlobal::IsSet() is true."
        },
        {
          "name": "VisitPossiblePointers",
          "parameters": [
            "const void* address",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Iterates all possible pointers that can be reasonably recovered from the given `address` and calls the `callback` for each."
        }
      ]
    },
    {
      "name": "RawPointer",
      "properties": [
        "using IntegralType = uintptr_t;",
        "static constexpr auto kWriteBarrierSlotType = WriteBarrierSlotType::kUncompressed;",
        "const void* ptr_"
      ],
      "methods": [
        {
          "name": "RawPointer",
          "parameters": [],
          "return_type": "RawPointer",
          "logic": "Default constructor. Initializes ptr_ to nullptr."
        },
        {
          "name": "RawPointer",
          "parameters": [
            "const void* ptr",
            "AtomicInitializerTag"
          ],
          "return_type": "RawPointer",
          "logic": "Constructor for atomic initialization. Stores the pointer atomically."
        },
        {
          "name": "RawPointer",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "RawPointer",
          "logic": "Constructor. Stores the given pointer."
        },
        {
          "name": "Load",
          "parameters": [],
          "return_type": "const void*",
          "logic": "Returns the stored raw pointer."
        },
        {
          "name": "LoadAtomic",
          "parameters": [],
          "return_type": "const void*",
          "logic": "Atomically loads the stored raw pointer."
        },
        {
          "name": "Store",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "void",
          "logic": "Stores the given pointer."
        },
        {
          "name": "StoreAtomic",
          "parameters": [
            "const void* ptr"
          ],
          "return_type": "void",
          "logic": "Atomically stores the given pointer."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the pointer to nullptr."
        },
        {
          "name": "IsCleared",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the pointer is nullptr."
        },
        {
          "name": "IsSentinel",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the pointer is a sentinel value."
        },
        {
          "name": "GetAsInteger",
          "parameters": [],
          "return_type": "uintptr_t",
          "logic": "Returns the pointer as an integer (uintptr_t)."
        },
        {
          "name": "VisitPossiblePointers",
          "parameters": [
            "const void* address",
            "Callback callback"
          ],
          "return_type": "void",
          "logic": "Calls the `callback` with the address given."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "WriteBarrierSlotType",
      "values": [
        "kCompressed",
        "kUncompressed"
      ]
    }
  ],
  "typedefs": [
    {
      "name": "DefaultMemberStorage",
      "type": "CompressedPointer or RawPointer depending on CPPGC_POINTER_COMPRESSION"
    }
  ]
}