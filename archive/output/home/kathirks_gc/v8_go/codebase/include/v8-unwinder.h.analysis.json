{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-unwinder.h",
  "imports": [
    "<memory>",
    "v8-embedder-state-scope.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "RegisterState",
      "properties": [
        "pc",
        "sp",
        "fp",
        "lr",
        "callee_saved"
      ],
      "methods": [
        {
          "name": "RegisterState",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor for the RegisterState struct."
        },
        {
          "name": "~RegisterState",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the RegisterState struct."
        },
        {
          "name": "RegisterState",
          "parameters": [
            "const RegisterState& other"
          ],
          "return_type": "RegisterState",
          "logic": "Copy constructor for the RegisterState struct."
        },
        {
          "name": "operator=",
          "parameters": [
            "const RegisterState& other"
          ],
          "return_type": "RegisterState&",
          "logic": "Assignment operator for the RegisterState struct."
        }
      ]
    },
    {
      "name": "Unwinder",
      "properties": [],
      "methods": [
        {
          "name": "TryUnwindV8Frames",
          "parameters": [
            "const JSEntryStubs& entry_stubs",
            "size_t code_pages_length",
            "const MemoryRange* code_pages",
            "RegisterState* register_state",
            "const void* stack_base"
          ],
          "return_type": "bool",
          "logic": "Attempts to unwind the stack to the most recent C++ frame. It takes code pages, register state and stack base as input to perform the stack unwinding. Returns true on success, false on failure."
        },
        {
          "name": "PCIsInV8",
          "parameters": [
            "size_t code_pages_length",
            "const MemoryRange* code_pages",
            "void* pc"
          ],
          "return_type": "bool",
          "logic": "Checks if the provided PC is within the V8 code range specified by the code pages. Returns true if the PC is in V8 code range, false otherwise."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "StateTag",
      "values": [
        "JS",
        "GC",
        "PARSER",
        "BYTECODE_COMPILER",
        "COMPILER",
        "OTHER",
        "EXTERNAL",
        "ATOMICS_WAIT",
        "IDLE",
        "LOGGING"
      ]
    }
  ],
  "structs": [
    {
      "name": "CalleeSavedRegisters",
      "comment": "Holds callee saved registers needed for stack unwinder."
    },
    {
      "name": "SampleInfo",
      "properties": [
        "frames_count",
        "external_callback_entry",
        "context",
        "embedder_context",
        "vm_state",
        "embedder_state"
      ],
      "comment": "The output structure filled up by GetStackSample API function."
    },
    {
      "name": "MemoryRange",
      "properties": [
        "start",
        "length_in_bytes"
      ],
      "comment": "Represents a range of memory."
    },
    {
      "name": "JSEntryStub",
      "properties": [
        "code"
      ],
      "comment": "Represents a JS Entry Stub with a memory range."
    },
    {
      "name": "JSEntryStubs",
      "properties": [
        "js_entry_stub",
        "js_construct_entry_stub",
        "js_run_microtasks_entry_stub"
      ],
      "comment": "Holds the JS entry stubs."
    }
  ]
}