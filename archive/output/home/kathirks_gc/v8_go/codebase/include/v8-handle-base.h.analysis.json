{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-handle-base.h",
  "imports": [
    "v8-internal.h"
  ],
  "classes": [
    {
      "name": "StackAllocated<check_statically_enabled>",
      "properties": [],
      "methods": [
        {
          "name": "StackAllocated",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "StackAllocated",
          "parameters": [
            "no_checking_tag"
          ],
          "return_type": "void",
          "logic": "Constructor that takes a no_checking_tag.  Bypasses stack checks."
        },
        {
          "name": "StackAllocated",
          "parameters": [
            "const StackAllocated& other",
            "no_checking_tag"
          ],
          "return_type": "void",
          "logic": "Copy constructor that takes a no_checking_tag.  Bypasses stack checks."
        },
        {
          "name": "VerifyOnStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Empty virtual method, meant to be overridden to verify object is on the stack."
        }
      ]
    },
    {
      "name": "StackAllocated<true>",
      "properties": [],
      "methods": [
        {
          "name": "StackAllocated",
          "parameters": [],
          "return_type": "void",
          "logic": "Constructor which calls VerifyOnStack to check if object is allocated on stack."
        },
        {
          "name": "StackAllocated",
          "parameters": [
            "const StackAllocated& other"
          ],
          "return_type": "void",
          "logic": "Copy constructor which calls VerifyOnStack to check if the copied object is allocated on the stack."
        },
        {
          "name": "operator=",
          "parameters": [
            "const StackAllocated&"
          ],
          "return_type": "StackAllocated&",
          "logic": "Default assignment operator."
        },
        {
          "name": "StackAllocated",
          "parameters": [
            "no_checking_tag tag"
          ],
          "return_type": "void",
          "logic": "Constructor that takes a no_checking_tag.  Bypasses stack checks by calling the base class constructor."
        },
        {
          "name": "StackAllocated",
          "parameters": [
            "const StackAllocated& other",
            "no_checking_tag tag"
          ],
          "return_type": "void",
          "logic": "Copy constructor that takes a no_checking_tag.  Bypasses stack checks by calling the base class constructor."
        },
        {
          "name": "VerifyOnStack",
          "parameters": [],
          "return_type": "void",
          "logic": "Verifies if the object is on the stack. Actual implementation might differ based on ENABLE_SLOW_DCHECKS."
        }
      ]
    },
    {
      "name": "IndirectHandleBase",
      "properties": [
        "internal::Address* location_"
      ],
      "methods": [
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the handle is empty (location_ is nullptr)."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the handle to be empty by setting location_ to nullptr."
        },
        {
          "name": "IndirectHandleBase",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "IndirectHandleBase",
          "parameters": [
            "const IndirectHandleBase& other"
          ],
          "return_type": "void",
          "logic": "Default copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const IndirectHandleBase& that"
          ],
          "return_type": "IndirectHandleBase&",
          "logic": "Default assignment operator."
        },
        {
          "name": "IndirectHandleBase",
          "parameters": [
            "internal::Address* location"
          ],
          "return_type": "void",
          "logic": "Constructor that takes an Address. Sets the location_ to the provided address."
        },
        {
          "name": "ptr",
          "parameters": [],
          "return_type": "internal::Address",
          "logic": "Returns the address of the heap object pointed to by location_."
        },
        {
          "name": "slot",
          "parameters": [],
          "return_type": "internal::Address* const&",
          "logic": "Returns a constant reference to the location_ pointer."
        },
        {
          "name": "slot",
          "parameters": [],
          "return_type": "internal::Address*&",
          "logic": "Returns a reference to the location_ pointer."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "T*",
          "logic": "Returns the value at the address pointed to by location_ as type T*."
        },
        {
          "name": "repr",
          "parameters": [],
          "return_type": "internal::ValueHelper::InternalRepresentationType",
          "logic": "Returns the internal representation of the handle which depends on V8_ENABLE_DIRECT_HANDLE flag."
        }
      ]
    },
    {
      "name": "DirectHandleBase",
      "properties": [
        "internal::Address ptr_"
      ],
      "methods": [
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the handle is empty (ptr_ is equal to ValueHelper::kEmpty)."
        },
        {
          "name": "Clear",
          "parameters": [],
          "return_type": "void",
          "logic": "Sets the handle to be empty by setting ptr_ to ValueHelper::kEmpty."
        },
        {
          "name": "DirectHandleBase",
          "parameters": [],
          "return_type": "void",
          "logic": "Default constructor."
        },
        {
          "name": "DirectHandleBase",
          "parameters": [
            "const DirectHandleBase& other"
          ],
          "return_type": "void",
          "logic": "Default copy constructor."
        },
        {
          "name": "operator=",
          "parameters": [
            "const DirectHandleBase& that"
          ],
          "return_type": "DirectHandleBase&",
          "logic": "Default assignment operator."
        },
        {
          "name": "DirectHandleBase",
          "parameters": [
            "internal::Address ptr"
          ],
          "return_type": "void",
          "logic": "Constructor that takes an address as parameter, setting the internal ptr_ member."
        },
        {
          "name": "ptr",
          "parameters": [],
          "return_type": "internal::Address",
          "logic": "Returns the address stored in the ptr_ member."
        },
        {
          "name": "value",
          "parameters": [],
          "return_type": "T*",
          "logic": "Returns the internal address represented by ptr_ interpreted as type T*."
        },
        {
          "name": "repr",
          "parameters": [],
          "return_type": "internal::ValueHelper::InternalRepresentationType",
          "logic": "Returns the direct pointer ptr_."
        }
      ]
    }
  ],
  "functions": []
}