{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-embedder-heap.h",
  "imports": [
    "v8-traced-handle.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "EmbedderRootsHandler",
      "properties": [],
      "methods": [
        {
          "name": "~EmbedderRootsHandler",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the class. Allows for proper cleanup of derived classes."
        },
        {
          "name": "EmbedderRootsHandler",
          "parameters": [],
          "return_type": "",
          "logic": "Default constructor for the class."
        },
        {
          "name": "ResetRoot",
          "parameters": [
            "const v8::TracedReference<v8::Value>& handle"
          ],
          "return_type": "virtual void",
          "logic": "Abstract method called when an object backed by a handle is reclaimed during non-tracing garbage collection. The embedder must reset the original handle associated with the object being reclaimed."
        },
        {
          "name": "TryResetRoot",
          "parameters": [
            "const v8::TracedReference<v8::Value>& handle"
          ],
          "return_type": "virtual bool",
          "logic": "An opportunistic version of ResetRoot that is called in parallel for different handles. Must be thread-safe. If it returns false, ResetRoot will be called for the same handle later."
        }
      ]
    }
  ],
  "functions": [],
  "enums": []
}