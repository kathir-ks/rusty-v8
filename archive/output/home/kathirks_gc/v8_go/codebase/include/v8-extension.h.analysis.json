{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-extension.h",
  "imports": [
    "memory",
    "v8-local-handle.h",
    "v8-primitive.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Extension",
      "properties": [
        "name_",
        "source_length_",
        "source_",
        "dep_count_",
        "deps_",
        "auto_enable_"
      ],
      "methods": [
        {
          "name": "Extension",
          "parameters": [
            "const char* name",
            "const char* source = nullptr",
            "int dep_count = 0",
            "const char** deps = nullptr",
            "int source_length = -1"
          ],
          "return_type": "Extension",
          "logic": "Constructor for the Extension class. It initializes the name, source code, dependencies, and source length of the extension.  The source code needs to exist as long as the extension itself."
        },
        {
          "name": "~Extension",
          "parameters": [],
          "return_type": "void",
          "logic": "Destructor for the Extension class. Deallocates the memory used by the source code string."
        },
        {
          "name": "GetNativeFunctionTemplate",
          "parameters": [
            "Isolate* isolate",
            "Local<String> name"
          ],
          "return_type": "Local<FunctionTemplate>",
          "logic": "Returns a function template for a native function.  The default implementation returns an empty Local<FunctionTemplate>."
        },
        {
          "name": "name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the extension."
        },
        {
          "name": "source_length",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the length of the extension source code."
        },
        {
          "name": "source",
          "parameters": [],
          "return_type": "const String::ExternalOneByteStringResource*",
          "logic": "Returns the extension source code."
        },
        {
          "name": "dependency_count",
          "parameters": [],
          "return_type": "int",
          "logic": "Returns the number of dependencies of the extension."
        },
        {
          "name": "dependencies",
          "parameters": [],
          "return_type": "const char**",
          "logic": "Returns the array of dependencies of the extension."
        },
        {
          "name": "set_auto_enable",
          "parameters": [
            "bool value"
          ],
          "return_type": "void",
          "logic": "Sets whether the extension should be automatically enabled."
        },
        {
          "name": "auto_enable",
          "parameters": [],
          "return_type": "bool",
          "logic": "Returns whether the extension is automatically enabled."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "RegisterExtension",
      "parameters": [
        "std::unique_ptr<Extension>"
      ],
      "return_type": "void",
      "logic": "Registers an extension with the V8 engine."
    }
  ]
}