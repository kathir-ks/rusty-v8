{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-microtask-queue.h",
  "imports": [
    "<stddef.h>",
    "<memory>",
    "v8-local-handle.h",
    "v8-microtask.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "MicrotaskQueue",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Isolate* isolate",
            "MicrotasksPolicy policy = MicrotasksPolicy::kAuto"
          ],
          "return_type": "std::unique_ptr<MicrotaskQueue>",
          "logic": "Creates an empty MicrotaskQueue instance."
        },
        {
          "name": "~MicrotaskQueue",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for MicrotaskQueue."
        },
        {
          "name": "EnqueueMicrotask",
          "parameters": [
            "Isolate* isolate",
            "Local<Function> microtask"
          ],
          "return_type": "virtual void",
          "logic": "Enqueues a V8 Function callback to the queue."
        },
        {
          "name": "EnqueueMicrotask",
          "parameters": [
            "v8::Isolate* isolate",
            "MicrotaskCallback callback",
            "void* data = nullptr"
          ],
          "return_type": "virtual void",
          "logic": "Enqueues a MicrotaskCallback to the queue."
        },
        {
          "name": "AddMicrotasksCompletedCallback",
          "parameters": [
            "MicrotasksCompletedCallbackWithData callback",
            "void* data = nullptr"
          ],
          "return_type": "virtual void",
          "logic": "Adds a callback to be notified after microtasks were run."
        },
        {
          "name": "RemoveMicrotasksCompletedCallback",
          "parameters": [
            "MicrotasksCompletedCallbackWithData callback",
            "void* data = nullptr"
          ],
          "return_type": "virtual void",
          "logic": "Removes a callback previously installed by AddMicrotasksCompletedCallback."
        },
        {
          "name": "PerformCheckpoint",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "virtual void",
          "logic": "Runs microtasks if no microtask is running on this MicrotaskQueue instance."
        },
        {
          "name": "IsRunningMicrotasks",
          "parameters": [],
          "return_type": "virtual bool",
          "logic": "Returns true if a microtask is running on this MicrotaskQueue instance."
        },
        {
          "name": "GetMicrotasksScopeDepth",
          "parameters": [],
          "return_type": "virtual int",
          "logic": "Returns the current depth of nested MicrotasksScope that has kRunMicrotasks."
        }
      ]
    },
    {
      "name": "MicrotasksScope",
      "properties": [
        "internal::Isolate* const i_isolate_",
        "internal::MicrotaskQueue* const microtask_queue_",
        "bool run_"
      ],
      "methods": [
        {
          "name": "MicrotasksScope",
          "parameters": [
            "Local<Context> context",
            "Type type"
          ],
          "return_type": "",
          "logic": "Constructor for MicrotasksScope taking a Local<Context>."
        },
        {
          "name": "MicrotasksScope",
          "parameters": [
            "Isolate* isolate",
            "MicrotaskQueue* microtask_queue",
            "Type type"
          ],
          "return_type": "",
          "logic": "Constructor for MicrotasksScope taking an Isolate and MicrotaskQueue."
        },
        {
          "name": "~MicrotasksScope",
          "parameters": [],
          "return_type": "",
          "logic": "Destructor for MicrotasksScope.  It runs microtasks if a scope with kRunMicrotasks exits."
        },
        {
          "name": "PerformCheckpoint",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "static void",
          "logic": "Runs microtasks if no kRunMicrotasks scope is currently active."
        },
        {
          "name": "GetCurrentDepth",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "static int",
          "logic": "Returns current depth of nested kRunMicrotasks scopes."
        },
        {
          "name": "IsRunningMicrotasks",
          "parameters": [
            "Isolate* isolate"
          ],
          "return_type": "static bool",
          "logic": "Returns true while microtasks are being executed."
        }
      ]
    }
  ],
  "functions": []
}