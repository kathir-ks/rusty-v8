{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-promise.h",
  "imports": [
    "v8-local-handle.h",
    "v8-object.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Promise",
      "properties": [
        "kEmbedderFieldCount"
      ],
      "methods": [
        {
          "name": "Catch",
          "parameters": [
            "Local<Context> context",
            "Local<Function> handler"
          ],
          "return_type": "MaybeLocal<Promise>",
          "logic": "Registers a rejection handler with the promise. The handler is invoked with the rejection value."
        },
        {
          "name": "Then",
          "parameters": [
            "Local<Context> context",
            "Local<Function> handler"
          ],
          "return_type": "MaybeLocal<Promise>",
          "logic": "Registers a resolution handler with the promise. The handler is invoked with the resolution value."
        },
        {
          "name": "Then",
          "parameters": [
            "Local<Context> context",
            "Local<Function> on_fulfilled",
            "Local<Function> on_rejected"
          ],
          "return_type": "MaybeLocal<Promise>",
          "logic": "Registers both a resolution and rejection handler with the promise."
        },
        {
          "name": "HasHandler",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the promise has any attached handlers."
        },
        {
          "name": "Result",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Returns the result of the promise. Only valid if the promise is not pending."
        },
        {
          "name": "State",
          "parameters": [],
          "return_type": "PromiseState",
          "logic": "Returns the current state of the promise (pending, fulfilled, rejected)."
        },
        {
          "name": "MarkAsHandled",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the promise as handled to avoid reporting unhandled rejections."
        },
        {
          "name": "MarkAsSilent",
          "parameters": [],
          "return_type": "void",
          "logic": "Marks the promise as silent to prevent debugger pausing on rejections."
        },
        {
          "name": "Cast",
          "parameters": [
            "Value* value"
          ],
          "return_type": "Promise*",
          "logic": "Casts a Value pointer to a Promise pointer after a check."
        }
      ]
    },
    {
      "name": "Promise::Resolver",
      "properties": [],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Resolver>",
          "logic": "Creates a new resolver and its associated pending promise."
        },
        {
          "name": "GetPromise",
          "parameters": [],
          "return_type": "Local<Promise>",
          "logic": "Returns the promise associated with the resolver."
        },
        {
          "name": "Resolve",
          "parameters": [
            "Local<Context> context",
            "Local<Value> value"
          ],
          "return_type": "Maybe<bool>",
          "logic": "Resolves the associated promise with the given value."
        },
        {
          "name": "Reject",
          "parameters": [
            "Local<Context> context",
            "Local<Value> value"
          ],
          "return_type": "Maybe<bool>",
          "logic": "Rejects the associated promise with the given value."
        },
        {
          "name": "Cast",
          "parameters": [
            "Value* value"
          ],
          "return_type": "Resolver*",
          "logic": "Casts a Value pointer to a Resolver pointer after a check."
        }
      ]
    },
    {
      "name": "PromiseRejectMessage",
      "properties": [
        "promise_",
        "event_",
        "value_"
      ],
      "methods": [
        {
          "name": "GetPromise",
          "parameters": [],
          "return_type": "Local<Promise>",
          "logic": "Returns the associated promise"
        },
        {
          "name": "GetEvent",
          "parameters": [],
          "return_type": "PromiseRejectEvent",
          "logic": "Returns the rejection event type"
        },
        {
          "name": "GetValue",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Returns the rejection value"
        }
      ]
    }
  ],
  "functions": []
}