{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-metrics.h",
  "imports": [
    "<stddef.h>",
    "<stdint.h>",
    "<optional>",
    "<vector>",
    "\"v8-internal.h\"",
    "\"v8-isolate.h\"",
    "\"v8-local-handle.h\"",
    "\"v8config.h\""
  ],
  "classes": [
    {
      "name": "v8::metrics::GarbageCollectionPhases",
      "properties": [
        "total_wall_clock_duration_in_us",
        "compact_wall_clock_duration_in_us",
        "mark_wall_clock_duration_in_us",
        "sweep_wall_clock_duration_in_us",
        "weak_wall_clock_duration_in_us"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::GarbageCollectionSizes",
      "properties": [
        "bytes_before",
        "bytes_after",
        "bytes_freed"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::GarbageCollectionFullCycle",
      "properties": [
        "reason",
        "priority",
        "total",
        "total_cpp",
        "main_thread",
        "main_thread_cpp",
        "main_thread_atomic",
        "main_thread_atomic_cpp",
        "main_thread_incremental",
        "main_thread_incremental_cpp",
        "objects",
        "objects_cpp",
        "memory",
        "memory_cpp",
        "collection_rate_in_percent",
        "collection_rate_cpp_in_percent",
        "efficiency_in_bytes_per_us",
        "efficiency_cpp_in_bytes_per_us",
        "main_thread_efficiency_in_bytes_per_us",
        "main_thread_efficiency_cpp_in_bytes_per_us",
        "collection_weight_in_percent",
        "collection_weight_cpp_in_percent",
        "main_thread_collection_weight_in_percent",
        "main_thread_collection_weight_cpp_in_percent",
        "incremental_marking_start_stop_wall_clock_duration_in_us"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::GarbageCollectionFullMainThreadIncrementalMark",
      "properties": [
        "wall_clock_duration_in_us",
        "cpp_wall_clock_duration_in_us"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::GarbageCollectionFullMainThreadIncrementalSweep",
      "properties": [
        "wall_clock_duration_in_us",
        "cpp_wall_clock_duration_in_us"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::GarbageCollectionBatchedEvents",
      "properties": [
        "events"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::GarbageCollectionYoungCycle",
      "properties": [
        "reason",
        "priority",
        "total_wall_clock_duration_in_us",
        "main_thread_wall_clock_duration_in_us",
        "collection_rate_in_percent",
        "efficiency_in_bytes_per_us",
        "main_thread_efficiency_in_bytes_per_us",
        "total_cpp",
        "objects_cpp",
        "memory_cpp",
        "collection_rate_cpp_in_percent",
        "efficiency_cpp_in_bytes_per_us",
        "main_thread_efficiency_cpp_in_bytes_per_us"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::WasmModuleDecoded",
      "properties": [
        "async",
        "streamed",
        "success",
        "module_size_in_bytes",
        "function_count",
        "wall_clock_duration_in_us"
      ],
      "methods": [
        {
          "name": "WasmModuleDecoded",
          "parameters": [],
          "return_type": "WasmModuleDecoded",
          "logic": "Default constructor."
        },
        {
          "name": "WasmModuleDecoded",
          "parameters": [
            "async",
            "streamed",
            "success",
            "module_size_in_bytes",
            "function_count",
            "wall_clock_duration_in_us"
          ],
          "return_type": "WasmModuleDecoded",
          "logic": "Constructor to initialize the struct with given values."
        }
      ]
    },
    {
      "name": "v8::metrics::WasmModuleCompiled",
      "properties": [
        "async",
        "streamed",
        "cached",
        "deserialized",
        "lazy",
        "success",
        "code_size_in_bytes",
        "liftoff_bailout_count",
        "wall_clock_duration_in_us"
      ],
      "methods": [
        {
          "name": "WasmModuleCompiled",
          "parameters": [],
          "return_type": "WasmModuleCompiled",
          "logic": "Default constructor."
        },
        {
          "name": "WasmModuleCompiled",
          "parameters": [
            "async",
            "streamed",
            "cached",
            "deserialized",
            "lazy",
            "success",
            "code_size_in_bytes",
            "liftoff_bailout_count",
            "wall_clock_duration_in_us"
          ],
          "return_type": "WasmModuleCompiled",
          "logic": "Constructor to initialize the struct with given values."
        }
      ]
    },
    {
      "name": "v8::metrics::WasmModuleInstantiated",
      "properties": [
        "async",
        "success",
        "imported_function_count",
        "wall_clock_duration_in_us"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::WasmModulesPerIsolate",
      "properties": [
        "count"
      ],
      "methods": []
    },
    {
      "name": "v8::metrics::Recorder::ContextId",
      "properties": [
        "id_"
      ],
      "methods": [
        {
          "name": "ContextId",
          "parameters": [],
          "return_type": "ContextId",
          "logic": "Default constructor, sets the id to kEmptyId."
        },
        {
          "name": "IsEmpty",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the id is equal to kEmptyId."
        },
        {
          "name": "Empty",
          "parameters": [],
          "return_type": "const ContextId",
          "logic": "Returns a ContextId object with the id set to kEmptyId."
        },
        {
          "name": "operator==",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Checks if this ContextId is equal to another ContextId."
        },
        {
          "name": "operator!=",
          "parameters": [
            "other"
          ],
          "return_type": "bool",
          "logic": "Checks if this ContextId is not equal to another ContextId."
        },
        {
          "name": "ContextId",
          "parameters": [
            "id"
          ],
          "return_type": "ContextId",
          "logic": "Private explicit constructor used internally to create a ContextId with a given id."
        }
      ]
    },
    {
      "name": "v8::metrics::Recorder",
      "properties": [],
      "methods": [
        {
          "name": "~Recorder",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual destructor."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const GarbageCollectionFullCycle&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a GarbageCollectionFullCycle event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const GarbageCollectionFullMainThreadIncrementalMark&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a GarbageCollectionFullMainThreadIncrementalMark event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const GarbageCollectionFullMainThreadBatchedIncrementalMark&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a GarbageCollectionFullMainThreadBatchedIncrementalMark event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const GarbageCollectionFullMainThreadIncrementalSweep&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a GarbageCollectionFullMainThreadIncrementalSweep event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const GarbageCollectionFullMainThreadBatchedIncrementalSweep&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a GarbageCollectionFullMainThreadBatchedIncrementalSweep event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const GarbageCollectionYoungCycle&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a GarbageCollectionYoungCycle event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const WasmModuleDecoded&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a WasmModuleDecoded event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const WasmModuleCompiled&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a WasmModuleCompiled event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddMainThreadEvent",
          "parameters": [
            "const WasmModuleInstantiated&",
            "ContextId"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a WasmModuleInstantiated event on the main thread. Default implementation does nothing."
        },
        {
          "name": "AddThreadSafeEvent",
          "parameters": [
            "const WasmModulesPerIsolate&"
          ],
          "return_type": "void",
          "logic": "Virtual method to add a WasmModulesPerIsolate event, thread-safe. Default implementation does nothing."
        },
        {
          "name": "NotifyIsolateDisposal",
          "parameters": [],
          "return_type": "void",
          "logic": "Virtual method to notify about Isolate disposal. Default implementation does nothing."
        },
        {
          "name": "GetContext",
          "parameters": [
            "Isolate*",
            "ContextId"
          ],
          "return_type": "MaybeLocal<Context>",
          "logic": "Returns the context with the given id or an empty handle if the context was already garbage collected."
        },
        {
          "name": "GetContextId",
          "parameters": [
            "Local<Context>"
          ],
          "return_type": "ContextId",
          "logic": "Returns the unique id corresponding to the given context."
        }
      ]
    },
    {
      "name": "v8::metrics::LongTaskStats",
      "properties": [
        "gc_full_atomic_wall_clock_duration_us",
        "gc_full_incremental_wall_clock_duration_us",
        "gc_young_wall_clock_duration_us",
        "v8_execute_us"
      ],
      "methods": [
        {
          "name": "Reset",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "void",
          "logic": "Resets durations of V8 work for the new task."
        },
        {
          "name": "Get",
          "parameters": [
            "Isolate*"
          ],
          "return_type": "LongTaskStats",
          "logic": "Returns durations of V8 work that happened since the last Reset()."
        }
      ]
    }
  ],
  "functions": []
}