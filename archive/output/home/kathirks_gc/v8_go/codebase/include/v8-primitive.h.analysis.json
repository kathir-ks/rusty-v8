{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-primitive.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/include/v8-primitive.h\",\n  \"imports\": [\n    \"v8-data.h\",\n    \"v8-internal.h\",\n    \"v8-local-handle.h\",\n    \"v8-value.h\",\n    \"v8config.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Primitive\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"Boolean\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Value\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns the boolean value.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"v8::Data* data\"\n          ],\n          \"return_type\": \"Boolean*\",\n          \"logic\": \"Casts a v8::Data pointer to a Boolean pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"bool value\"\n          ],\n          \"return_type\": \"Local<Boolean>\",\n          \"logic\": \"Creates a new Boolean object.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"v8::Data* that\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"PrimitiveArray\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int length\"\n          ],\n          \"return_type\": \"Local<PrimitiveArray>\",\n          \"logic\": \"Creates a new PrimitiveArray object.\"\n        },\n        {\n          \"name\": \"Length\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the length of the array.\"\n        },\n        {\n          \"name\": \"Set\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int index\",\n            \"Local<Primitive> item\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets the element at the given index to the given Primitive.\"\n        },\n        {\n          \"name\": \"Get\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int index\"\n          ],\n          \"return_type\": \"Local<Primitive>\",\n          \"logic\": \"Gets the element at the given index.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"Data* data\"\n          ],\n          \"return_type\": \"PrimitiveArray*\",\n          \"logic\": \"Casts a Data pointer to a PrimitiveArray pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"Data* obj\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Name\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetIdentityHash\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the identity hash for this object.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"Data* data\"\n          ],\n          \"return_type\": \"Name*\",\n          \"logic\": \"Casts a Data pointer to a Name pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"Data* that\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Length\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of characters (UTF-16 code units) in this string.\"\n        },\n        {\n          \"name\": \"Utf8Length\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of bytes in the UTF-8 encoded representation of this string. (Deprecated)\"\n        },\n        {\n          \"name\": \"Utf8LengthV2\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the number of bytes needed for the Utf8 encoding of this string.\"\n        },\n        {\n          \"name\": \"IsOneByte\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether this string is known to contain only one byte data.\"\n        },\n        {\n          \"name\": \"ContainsOnlyOneByte\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether this string contain only one byte data. Will read the entire string in some cases.\"\n        },\n        {\n          \"name\": \"Write\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"uint16_t* buffer\",\n            \"int start\",\n            \"int length\",\n            \"int options\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Write the contents of the string to an external buffer. (Deprecated)\"\n        },\n        {\n          \"name\": \"WriteOneByte\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"uint8_t* buffer\",\n            \"int start\",\n            \"int length\",\n            \"int options\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Write the contents of the string to an external buffer. (Deprecated)\"\n        },\n        {\n          \"name\": \"WriteUtf8\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"char* buffer\",\n            \"int length\",\n            \"int* nchars_ref\",\n            \"int options\"\n          ],\n          \"return_type\": \"int\",\n          \"logic\": \"Write the contents of the string to an external buffer as UTF-8. (Deprecated)\"\n        },\n        {\n          \"name\": \"WriteV2\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"uint32_t offset\",\n            \"uint32_t length\",\n            \"uint16_t* buffer\",\n            \"int flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Write the contents of the string to an external buffer.\"\n        },\n        {\n          \"name\": \"WriteOneByteV2\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"uint32_t offset\",\n            \"uint32_t length\",\n            \"uint8_t* buffer\",\n            \"int flags\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Write the contents of the string (one-byte characters) to an external buffer.\"\n        },\n        {\n          \"name\": \"WriteUtf8V2\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"char* buffer\",\n            \"size_t capacity\",\n            \"int flags\",\n            \"size_t* processed_characters_return\"\n          ],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Encode the contents of the string as Utf8 into an external buffer.\"\n        },\n        {\n          \"name\": \"Empty\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Returns a zero length string.\"\n        },\n        {\n          \"name\": \"IsExternal\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the string is external.\"\n        },\n        {\n          \"name\": \"IsExternalTwoByte\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the string is both external and two-byte.\"\n        },\n        {\n          \"name\": \"IsExternalOneByte\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the string is both external and one-byte.\"\n        },\n        {\n          \"name\": \"InternalizeString\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Returns the internalized string.\"\n        },\n        {\n          \"name\": \"GetExternalStringResourceBase\",\n          \"parameters\": [\n            \"v8::Isolate* isolate\",\n            \"Encoding* encoding_out\"\n          ],\n          \"return_type\": \"ExternalStringResourceBase*\",\n          \"logic\": \"If the string is an external string, return the ExternalStringResourceBase regardless of the encoding, otherwise return NULL. The encoding of the string is returned in encoding_out.\"\n        },\n        {\n          \"name\": \"GetExternalStringResourceBase\",\n          \"parameters\": [\n            \"Encoding* encoding_out\"\n          ],\n          \"return_type\": \"ExternalStringResourceBase*\",\n          \"logic\": \"If the string is an external string, return the ExternalStringResourceBase regardless of the encoding, otherwise return NULL. The encoding of the string is returned in encoding_out.\"\n        },\n        {\n          \"name\": \"GetExternalStringResource\",\n          \"parameters\": [],\n          \"return_type\": \"ExternalStringResource*\",\n          \"logic\": \"Get the ExternalStringResource for an external string. Returns NULL if IsExternal() doesn't return true.\"\n        },\n        {\n          \"name\": \"GetExternalOneByteStringResource\",\n          \"parameters\": [],\n          \"return_type\": \"const ExternalOneByteStringResource*\",\n          \"logic\": \"Get the ExternalOneByteStringResource for an external one-byte string. Returns NULL if IsExternalOneByte() doesn't return true.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"v8::Data* data\"\n          ],\n          \"return_type\": \"String*\",\n          \"logic\": \"Casts a v8::Data pointer to a String pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"NewFromUtf8Literal\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char (&literal)[N]\",\n            \"NewStringType type\"\n          ],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Allocates a new string from a UTF-8 literal.\"\n        },\n        {\n          \"name\": \"NewFromUtf8\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const char* data\",\n            \"NewStringType type\",\n            \"int length\"\n          ],\n          \"return_type\": \"MaybeLocal<String>\",\n          \"logic\": \"Allocates a new string from UTF-8 data.\"\n        },\n        {\n          \"name\": \"NewFromOneByte\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const uint8_t* data\",\n            \"NewStringType type\",\n            \"int length\"\n          ],\n          \"return_type\": \"MaybeLocal<String>\",\n          \"logic\": \"Allocates a new string from Latin-1 data.\"\n        },\n        {\n          \"name\": \"NewFromTwoByte\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const uint16_t* data\",\n            \"NewStringType type\",\n            \"int length\"\n          ],\n          \"return_type\": \"MaybeLocal<String>\",\n          \"logic\": \"Allocates a new string from UTF-16 data.\"\n        },\n        {\n          \"name\": \"Concat\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<String> left\",\n            \"Local<String> right\"\n          ],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Creates a new string by concatenating the left and the right strings.\"\n        },\n        {\n          \"name\": \"NewExternalTwoByte\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ExternalStringResource* resource\"\n          ],\n          \"return_type\": \"MaybeLocal<String>\",\n          \"logic\": \"Creates a new external string using the data defined in the given resource.\"\n        },\n        {\n          \"name\": \"MakeExternal\",\n          \"parameters\": [\n            \"ExternalStringResource* resource\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Associate an external string resource with this string by transforming it in place so that existing references to this string in the JavaScript heap will use the external string resource. (Deprecated)\"\n        },\n        {\n          \"name\": \"MakeExternal\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ExternalStringResource* resource\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Associate an external string resource with this string by transforming it in place so that existing references to this string in the JavaScript heap will use the external string resource.\"\n        },\n        {\n          \"name\": \"NewExternalOneByte\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ExternalOneByteStringResource* resource\"\n          ],\n          \"return_type\": \"MaybeLocal<String>\",\n          \"logic\": \"Creates a new external string using the one-byte data defined in the given resource.\"\n        },\n        {\n          \"name\": \"MakeExternal\",\n          \"parameters\": [\n            \"ExternalOneByteStringResource* resource\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Associate an external string resource with this string by transforming it in place so that existing references to this string in the JavaScript heap will use the external string resource. (Deprecated)\"\n        },\n        {\n          \"name\": \"MakeExternal\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"ExternalOneByteStringResource* resource\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Associate an external string resource with this string by transforming it in place so that existing references to this string in the JavaScript heap will use the external string resource.\"\n        },\n        {\n          \"name\": \"CanMakeExternal\",\n          \"parameters\": [\n            \"Encoding encoding\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if this string can be made external, given the encoding for the external string resource.\"\n        },\n        {\n          \"name\": \"StringEquals\",\n          \"parameters\": [\n            \"Local<String> str\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the strings values are equal. Same as JS ==/===.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::ExternalStringResourceBase\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~ExternalStringResourceBase\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"IsCacheable\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"If a string is cacheable, the value returned by ExternalStringResource::data() may be cached, otherwise it is not expected to be stable beyond the current top-level task.\"\n        },\n        {\n          \"name\": \"Unaccount\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Internally V8 will call this Unaccount method when the external string resource should be unaccounted for. This method can be overridden in subclasses to control how allocated external bytes are accounted.\"\n        },\n        {\n          \"name\": \"EstimateMemoryUsage\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns an estimate of the memory occupied by this external string, to be used by V8 when producing a heap snapshot.\"\n        },\n        {\n          \"name\": \"EstimateSharedMemoryUsage\",\n          \"parameters\": [\n            \"SharedMemoryUsageRecorder* recorder\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Estimates memory that this string resource may share with other string resources, to be used by V8 when producing a heap snapshot.\"\n        },\n        {\n          \"name\": \"Dispose\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Internally V8 will call this Dispose method when the external string resource is no longer needed. The default implementation will use the delete operator. This method can be overridden in subclasses to control how allocated external string resources are disposed.\"\n        },\n        {\n          \"name\": \"Lock\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Locks the string resource, making its data stable.\"\n        },\n        {\n          \"name\": \"Unlock\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Unlocks the string resource.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::ExternalStringResourceBase::SharedMemoryUsageRecorder\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"RecordSharedMemoryUsage\",\n          \"parameters\": [\n            \"const void* location\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Record that a shared allocation at the given location has the given size.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::ExternalStringResource\",\n      \"properties\": [\n          \"cached_data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"~ExternalStringResource\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"virtual const uint16_t*\",\n          \"logic\": \"The string data from the underlying buffer. If the resource is cacheable then data() must return the same value for all invocations.\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"virtual size_t\",\n          \"logic\": \"The length of the string. That is, the number of two-byte characters.\"\n        },\n        {\n          \"name\": \"cached_data\",\n          \"parameters\": [],\n          \"return_type\": \"const uint16_t*\",\n          \"logic\": \"Returns the cached data from the underlying buffer. This method can be called only for cacheable resources (i.e. IsCacheable() == true) and only after UpdateDataCache() was called.\"\n        },\n        {\n          \"name\": \"UpdateDataCache\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Update {cached_data_} with the data from the underlying buffer. This can be called only for cacheable resources.\"\n        },\n        {\n          \"name\": \"CheckCachedDataInvariants\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks the invariants for cached data.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::ExternalOneByteStringResource\",\n      \"properties\": [\n          \"cached_data_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"~ExternalOneByteStringResource\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"data\",\n          \"parameters\": [],\n          \"return_type\": \"virtual const char*\",\n          \"logic\": \"The string data from the underlying buffer. If the resource is cacheable then data() must return the same value for all invocations.\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"virtual size_t\",\n          \"logic\": \"The number of Latin-1 characters in the string.\"\n        },\n        {\n          \"name\": \"cached_data\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the cached data from the underlying buffer. If the resource is uncacheable or if UpdateDataCache() was not called before, it has undefined behaviour.\"\n        },\n        {\n          \"name\": \"UpdateDataCache\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Update {cached_data_} with the data from the underlying buffer. This can be called only for cacheable resources.\"\n        },\n        {\n          \"name\": \"CheckCachedDataInvariants\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks the invariants for cached data.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::Utf8Value\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Utf8Value\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<v8::Value> obj\",\n            \"WriteOptions options\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructs a Utf8Value object, converting a v8::Value to a UTF-8 encoded character array.\"\n        },\n        {\n          \"name\": \"~Utf8Value\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor.\"\n        },\n        {\n          \"name\": \"operator*\",\n          \"parameters\": [],\n          \"return_type\": \"char*\",\n          \"logic\": \"Returns the underlying char array.\"\n        },\n        {\n          \"name\": \"operator*\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns the underlying char array (const version).\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the length of the UTF-8 string.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::Value\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Value\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<v8::Value> obj\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructs a Value object, converting a v8::Value to a two-byte (UTF-16-encoded) string.\"\n        },\n        {\n          \"name\": \"~Value\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor.\"\n        },\n        {\n          \"name\": \"operator*\",\n          \"parameters\": [],\n          \"return_type\": \"uint16_t*\",\n          \"logic\": \"Returns the underlying uint16_t array.\"\n        },\n        {\n          \"name\": \"operator*\",\n          \"parameters\": [],\n          \"return_type\": \"const uint16_t*\",\n          \"logic\": \"Returns the underlying uint16_t array (const version).\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the length of the string.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"String::ValueView\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ValueView\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<v8::String> str\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructs a ValueView object, providing a view onto a string's contents.\"\n        },\n        {\n          \"name\": \"~ValueView\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Destructor.\"\n        },\n        {\n          \"name\": \"data8\",\n          \"parameters\": [],\n          \"return_type\": \"const uint8_t*\",\n          \"logic\": \"Returns a pointer to the string's data as an 8-bit array.\"\n        },\n        {\n          \"name\": \"data16\",\n          \"parameters\": [],\n          \"return_type\": \"const uint16_t*\",\n          \"logic\": \"Returns a pointer to the string's data as a 16-bit array.\"\n        },\n        {\n          \"name\": \"length\",\n          \"parameters\": [],\n          \"return_type\": \"uint32_t\",\n          \"logic\": \"Returns the length of the string.\"\n        },\n        {\n          \"name\": \"is_one_byte\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns true if the string is encoded as one-byte characters.\"\n        },\n        {\n          \"name\": \"CheckOneByte\",\n          \"parameters\": [\n            \"bool is_one_byte\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the one byte flag matches the string's actual encoding (debug only).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ExternalResourceVisitor\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~ExternalResourceVisitor\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"VisitExternalString\",\n          \"parameters\": [\n            \"Local<String> string\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Visits an external string.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Symbol\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Description\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Value>\",\n          \"logic\": \"Returns the description string of the symbol, or undefined if none.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<String> description\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Create a symbol. If description is not empty, it will be used as the description.\"\n        },\n        {\n          \"name\": \"For\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<String> description\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Access global symbol registry.\"\n        },\n        {\n          \"name\": \"ForApi\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"Local<String> description\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Retrieve a global symbol. Similar to |For|, but using a separate registry that is not accessible by (and cannot clash with) JavaScript code.\"\n        },\n        {\n          \"name\": \"GetAsyncIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol AsyncIterator.\"\n        },\n        {\n          \"name\": \"GetHasInstance\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol hasInstance.\"\n        },\n        {\n          \"name\": \"GetIsConcatSpreadable\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol isConcatSpreadable.\"\n        },\n        {\n          \"name\": \"GetIterator\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol iterator.\"\n        },\n        {\n          \"name\": \"GetMatch\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol match.\"\n        },\n        {\n          \"name\": \"GetReplace\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol replace.\"\n        },\n        {\n          \"name\": \"GetSearch\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol search.\"\n        },\n        {\n          \"name\": \"GetSplit\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol split.\"\n        },\n        {\n          \"name\": \"GetToPrimitive\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol toPrimitive.\"\n        },\n        {\n          \"name\": \"GetToStringTag\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol toStringTag.\"\n        },\n        {\n          \"name\": \"GetUnscopables\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"Local<Symbol>\",\n          \"logic\": \"Returns the well-known symbol unscopables.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"Data* data\"\n          ],\n          \"return_type\": \"Symbol*\",\n          \"logic\": \"Casts a Data pointer to a Symbol pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"Data* that\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Numeric\",\n      \"properties\": [],\n      \"methods\": []\n    },\n    {\n      \"name\": \"Number\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Value\",\n          \"parameters\": [],\n          \"return_type\": \"double\",\n          \"logic\": \"Returns the double value.\"\n        },\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"double value\"\n          ],\n          \"return_type\": \"Local<Number>\",\n          \"logic\": \"Creates a new Number object.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"v8::Data* data\"\n          ],\n          \"return_type\": \"Number*\",\n          \"logic\": \"Casts a v8::Data pointer to a Number pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"v8::Data* that\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Integer\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"int32_t value\"\n          ],\n          \"return_type\": \"Local<Integer>\",\n          \"logic\": \"Creates a new Integer object.\"\n        },\n        {\n          \"name\": \"NewFromUnsigned\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"uint32_t value\"\n          ],\n          \"return_type\": \"Local<Integer>\",\n          \"logic\": \"Creates a new Integer object from an unsigned integer.\"\n        },\n        {\n          \"name\": \"Value\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the integer value.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"v8::Data* data\"\n          ],\n          \"return_type\": \"Integer*\",\n          \"logic\": \"Casts a v8::Data pointer to an Integer pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"v8::Data* that\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Int32\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Value\",\n          \"parameters\": [],\n          \"return_type\": \"int32_t\",\n          \"logic\": \"Returns the 32-bit integer value.\"\n        },\n        {\n          \"name\": \"Cast\",\n          \"parameters\": [\n            \"v8::Data* data\"\n          ],\n          \"return_type\": \"Int32*\",\n          \"logic\": \"Casts a v8::Data pointer to an Int32 pointer. Includes a check in debug builds.\"\n        },\n        {\n          \"name\": \"CheckCast\",\n          \"parameters\": [\n            \"v8::Data* that\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Checks if the cast is valid in debug mode.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Uint32\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"Value\","
}