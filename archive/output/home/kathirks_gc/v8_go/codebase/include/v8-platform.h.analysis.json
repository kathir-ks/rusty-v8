{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-platform.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/include/v8-platform.h\",\n  \"imports\": [\n    \"<math.h>\",\n    \"<stddef.h>\",\n    \"<stdint.h>\",\n    \"<stdlib.h>\",\n    \"<memory>\",\n    \"<string>\",\n    \"v8-source-location.h\",\n    \"v8config.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"Task\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~Task\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor to allow for proper cleanup of derived classes.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function that represents the unit of work to be performed.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"IdleTask\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~IdleTask\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor to allow for proper cleanup of derived classes.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"double deadline_in_seconds\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function that represents the unit of work to be performed in idle time.  Takes a deadline as input.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TaskRunner\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"PostTask\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a task to be invoked by this TaskRunner. Calls PostTaskImpl with the given task and location.\"\n        },\n        {\n          \"name\": \"PostNonNestableTask\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a non-nestable task to be invoked by this TaskRunner. Calls PostNonNestableTaskImpl with the given task and location. Requires NonNestableTasksEnabled() to be true.\"\n        },\n        {\n          \"name\": \"PostDelayedTask\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"double delay_in_seconds\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a delayed task to be invoked by this TaskRunner after a specified delay. Calls PostDelayedTaskImpl with the given task, delay, and location.\"\n        },\n        {\n          \"name\": \"PostNonNestableDelayedTask\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"double delay_in_seconds\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a non-nestable delayed task to be invoked by this TaskRunner after a specified delay. Calls PostNonNestableDelayedTaskImpl with the given task, delay, and location.  Requires NonNestableDelayedTasksEnabled() to be true.\"\n        },\n        {\n          \"name\": \"PostIdleTask\",\n          \"parameters\": [\n            \"std::unique_ptr<IdleTask> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules an idle task to be invoked by this TaskRunner when the embedder is idle.  Calls PostIdleTaskImpl with the given task and location. Requires IdleTasksEnabled() to be true.\"\n        },\n        {\n          \"name\": \"IdleTasksEnabled\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Pure virtual function indicating whether idle tasks are enabled for this TaskRunner.\"\n        },\n        {\n          \"name\": \"NonNestableTasksEnabled\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Virtual function returning true if non-nestable tasks are enabled for this TaskRunner. Defaults to false.\"\n        },\n        {\n          \"name\": \"NonNestableDelayedTasksEnabled\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Virtual function returning true if non-nestable delayed tasks are enabled for this TaskRunner. Defaults to false.\"\n        },\n        {\n          \"name\": \"~TaskRunner\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"PostTaskImpl\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Implementation hook for PostTask. Default implementation does nothing.\"\n        },\n        {\n          \"name\": \"PostNonNestableTaskImpl\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Implementation hook for PostNonNestableTask. Default implementation does nothing.\"\n        },\n        {\n          \"name\": \"PostDelayedTaskImpl\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"double delay_in_seconds\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Implementation hook for PostDelayedTask. Default implementation does nothing.\"\n        },\n        {\n          \"name\": \"PostNonNestableDelayedTaskImpl\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"double delay_in_seconds\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Implementation hook for PostNonNestableDelayedTask. Default implementation does nothing.\"\n        },\n        {\n          \"name\": \"PostIdleTaskImpl\",\n          \"parameters\": [\n            \"std::unique_ptr<IdleTask> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Implementation hook for PostIdleTask. Default implementation does nothing.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JobDelegate\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"ShouldYield\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Pure virtual function that indicates whether the current thread should yield execution of the worker task.\"\n        },\n        {\n          \"name\": \"NotifyConcurrencyIncrease\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to notify the scheduler about max concurrency increase.\"\n        },\n        {\n          \"name\": \"GetTaskId\",\n          \"parameters\": [],\n          \"return_type\": \"virtual uint8_t\",\n          \"logic\": \"Pure virtual function that returns a task_id unique among threads currently running this job.\"\n        },\n        {\n          \"name\": \"IsJoiningThread\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Pure virtual function that returns true if the current task is called from the thread currently running JobHandle::Join().\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JobHandle\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~JobHandle\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"NotifyConcurrencyIncrease\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to notify the scheduler about max concurrency increase.\"\n        },\n        {\n          \"name\": \"Join\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to contribute to the job on this thread, doesn't return until all tasks are completed and max concurrency becomes 0.\"\n        },\n        {\n          \"name\": \"Cancel\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to force all existing workers to yield ASAP. Waits until they have all returned.\"\n        },\n        {\n          \"name\": \"CancelAndDetach\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to force all existing workers to yield ASAP, but doesn't wait for them to return. Dangerous if state may be deleted after this call.\"\n        },\n        {\n          \"name\": \"IsActive\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Pure virtual function to return true if there's any work pending or any worker running.\"\n        },\n        {\n          \"name\": \"IsValid\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Pure virtual function to return true if associated with a Job and other methods may be called. Returns false after Join() or Cancel() was called.\"\n        },\n        {\n          \"name\": \"UpdatePriorityEnabled\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Virtual function returning true if job priority can be changed. Defaults to false.\"\n        },\n        {\n          \"name\": \"UpdatePriority\",\n          \"parameters\": [\n            \"TaskPriority new_priority\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Virtual function to update this Job's priority.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"JobTask\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~JobTask\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"Run\",\n          \"parameters\": [\n            \"JobDelegate* delegate\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to represent the work to run in parallel.\"\n        },\n        {\n          \"name\": \"GetMaxConcurrency\",\n          \"parameters\": [\n            \"size_t worker_count\"\n          ],\n          \"return_type\": \"virtual size_t\",\n          \"logic\": \"Pure virtual function to control the maximum number of threads calling Run() concurrently. Returns latest number of incomplete work items.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ScopedBlockingCall\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~ScopedBlockingCall\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ConvertableToTraceFormat\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~ConvertableToTraceFormat\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"AppendAsTraceFormat\",\n          \"parameters\": [\n            \"std::string* out\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Pure virtual function to append the class info to the provided string as a JSON object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"TracingController\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~TracingController\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n#if !defined(V8_USE_PERFETTO)\n        {\n          \"name\": \"GetCategoryGroupEnabled\",\n          \"parameters\": [\n            \"const char* name\"\n          ],\n          \"return_type\": \"virtual const uint8_t*\",\n          \"logic\": \"Returns a pointer to a value with zero or more of the bits defined in CategoryGroupEnabledFlags.\"\n        },\n        {\n          \"name\": \"AddTraceEvent\",\n          \"parameters\": [\n            \"char phase\",\n            \"const uint8_t* category_enabled_flag\",\n            \"const char* name\",\n            \"const char* scope\",\n            \"uint64_t id\",\n            \"uint64_t bind_id\",\n            \"int32_t num_args\",\n            \"const char** arg_names\",\n            \"const uint8_t* arg_types\",\n            \"const uint64_t* arg_values\",\n            \"std::unique_ptr<ConvertableToTraceFormat>* arg_convertables\",\n            \"unsigned int flags\"\n          ],\n          \"return_type\": \"virtual uint64_t\",\n          \"logic\": \"Adds a trace event to the platform tracing system.\"\n        },\n        {\n          \"name\": \"AddTraceEventWithTimestamp\",\n          \"parameters\": [\n            \"char phase\",\n            \"const uint8_t* category_enabled_flag\",\n            \"const char* name\",\n            \"const char* scope\",\n            \"uint64_t id\",\n            \"uint64_t bind_id\",\n            \"int32_t num_args\",\n            \"const char** arg_names\",\n            \"const uint8_t* arg_types\",\n            \"const uint64_t* arg_values\",\n            \"std::unique_ptr<ConvertableToTraceFormat>* arg_convertables\",\n            \"unsigned int flags\",\n            \"int64_t timestamp\"\n          ],\n          \"return_type\": \"virtual uint64_t\",\n          \"logic\": \"Adds a trace event to the platform tracing system with a timestamp.\"\n        },\n        {\n          \"name\": \"UpdateTraceEventDuration\",\n          \"parameters\": [\n            \"const uint8_t* category_enabled_flag\",\n            \"const char* name\",\n            \"uint64_t handle\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Sets the duration field of a COMPLETE trace event.\"\n        },\n#endif // !defined(V8_USE_PERFETTO)\n        {\n          \"name\": \"AddTraceStateObserver\",\n          \"parameters\": [\n            \"TraceStateObserver*\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Adds tracing state change observer.\"\n        },\n        {\n          \"name\": \"RemoveTraceStateObserver\",\n          \"parameters\": [\n            \"TraceStateObserver*\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Removes tracing state change observer.\"\n        },\n          {\n            \"name\": \"TraceStateObserver\",\n            \"properties\": [],\n            \"methods\": [\n              {\n                \"name\": \"~TraceStateObserver\",\n                \"parameters\": [],\n                \"return_type\": \"virtual\",\n                \"logic\": \"Virtual Destructor\"\n              },\n              {\n                \"name\": \"OnTraceEnabled\",\n                \"parameters\": [],\n                \"return_type\": \"virtual void\",\n                \"logic\": \"Called when tracing is enabled\"\n              },\n              {\n                \"name\": \"OnTraceDisabled\",\n                \"parameters\": [],\n                \"return_type\": \"virtual void\",\n                \"logic\": \"Called when tracing is disabled\"\n              }\n            ]\n        }\n      ]\n    },\n    {\n      \"name\": \"PageAllocator\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~PageAllocator\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"AllocatePageSize\",\n          \"parameters\": [],\n          \"return_type\": \"virtual size_t\",\n          \"logic\": \"Gets the page granularity for AllocatePages and FreePages.\"\n        },\n        {\n          \"name\": \"CommitPageSize\",\n          \"parameters\": [],\n          \"return_type\": \"virtual size_t\",\n          \"logic\": \"Gets the page granularity for SetPermissions and ReleasePages.\"\n        },\n        {\n          \"name\": \"SetRandomMmapSeed\",\n          \"parameters\": [\n            \"int64_t seed\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Sets the random seed so that GetRandomMmapAddr() will generate repeatable sequences of random mmap addresses.\"\n        },\n        {\n          \"name\": \"GetRandomMmapAddr\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void*\",\n          \"logic\": \"Returns a randomized address, suitable for memory allocation under ASLR.\"\n        },\n        {\n          \"name\": \"AllocatePages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t length\",\n            \"size_t alignment\",\n            \"Permission permissions\"\n          ],\n          \"return_type\": \"virtual void*\",\n          \"logic\": \"Allocates memory in range with the given alignment and permission.\"\n        },\n        {\n          \"name\": \"FreePages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Frees memory in a range that was allocated by a call to AllocatePages.\"\n        },\n        {\n          \"name\": \"ReleasePages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t length\",\n            \"size_t new_length\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Releases memory in a range that was allocated by a call to AllocatePages.\"\n        },\n        {\n          \"name\": \"SetPermissions\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t length\",\n            \"Permission permissions\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Sets permissions on pages in an allocated range.\"\n        },\n        {\n          \"name\": \"RecommitPages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t length\",\n            \"Permission permissions\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Recommits discarded pages in the given range with given permissions.\"\n        },\n        {\n          \"name\": \"DiscardSystemPages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Frees memory in the given range, treating this as a hint to the OS that the pages are no longer needed.\"\n        },\n        {\n          \"name\": \"DecommitPages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Decommits any wired memory pages in the given range, allowing the OS to reclaim them, and marks the region as inaccessible (kNoAccess).\"\n        },\n        {\n          \"name\": \"SealPages\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t length\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Blocks any modifications to the given mapping such as changing permissions or unmapping the pages on supported platforms.\"\n        },\n        {\n          \"name\": \"ReserveForSharedMemoryMapping\",\n          \"parameters\": [\n            \"void* address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Reserve pages at a fixed address returning whether the reservation is possible.\"\n        },\n        {\n          \"name\": \"AllocateSharedPages\",\n          \"parameters\": [\n            \"size_t length\",\n            \"const void* original_address\"\n          ],\n          \"return_type\": \"virtual std::unique_ptr<SharedMemory>\",\n          \"logic\": \"Allocates shared memory pages\"\n        },\n        {\n          \"name\": \"CanAllocateSharedPages\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"If not overridden and changed to return true, V8 will not attempt to call AllocateSharedPages or RemapSharedPages. \"\n        },\n        {\n          \"name\": \"SharedMemoryMapping\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"~SharedMemoryMapping\",\n              \"parameters\": [],\n              \"return_type\": \"virtual\",\n              \"logic\": \"Destructor. Implementations are expected to free the shared memory mapping.\"\n            },\n            {\n              \"name\": \"GetMemory\",\n              \"parameters\": [],\n              \"return_type\": \"virtual void*\",\n              \"logic\": \"Returns the memory associated with the mapping.\"\n            }\n          ]\n        },\n        {\n          \"name\": \"SharedMemory\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"~SharedMemory\",\n              \"parameters\": [],\n              \"return_type\": \"virtual\",\n              \"logic\": \"Destructor. Implementations are expected to free the shared memory.\"\n            },\n            {\n              \"name\": \"RemapTo\",\n              \"parameters\": [\n                \"void* new_address\"\n              ],\n              \"return_type\": \"virtual std::unique_ptr<SharedMemoryMapping>\",\n              \"logic\": \"Remaps the shared memory to a new address.\"\n            },\n            {\n              \"name\": \"GetMemory\",\n              \"parameters\": [],\n              \"return_type\": \"virtual void*\",\n              \"logic\": \"Returns the memory associated with the shared memory region.\"\n            },\n            {\n              \"name\": \"GetSize\",\n              \"parameters\": [],\n              \"return_type\": \"virtual size_t\",\n              \"logic\": \"Returns the size of the shared memory region.\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"ThreadIsolatedAllocator\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~ThreadIsolatedAllocator\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"Allocate\",\n          \"parameters\": [\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual void*\",\n          \"logic\": \"Allocates memory of a given size.\"\n        },\n        {\n          \"name\": \"Free\",\n          \"parameters\": [\n            \"void* object\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Frees memory pointed to by the given object.\"\n        },\n        {\n          \"name\": \"Type\",\n          \"parameters\": [],\n          \"return_type\": \"virtual Type\",\n          \"logic\": \"Returns the type of the ThreadIsolatedAllocator.\"\n        },\n        {\n          \"name\": \"Pkey\",\n          \"parameters\": [],\n          \"return_type\": \"virtual int\",\n          \"logic\": \"Return the pkey used to implement the thread isolation if Type == kPkey.\"\n        },\n        {\n          \"name\": \"SetDefaultPermissionsForSignalHandler\",\n          \"parameters\": [],\n          \"return_type\": \"static void\",\n          \"logic\": \"Per-thread permissions can be reset on signal handler entry. Call this function on signal handler entry to ensure that read permissions are restored.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"VirtualAddressSpace\",\n      \"properties\": [\n        \"page_size_\",\n        \"allocation_granularity_\",\n        \"base_\",\n        \"size_\",\n        \"max_page_permissions_\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"VirtualAddressSpace\",\n          \"parameters\": [\n            \"size_t page_size\",\n            \"size_t allocation_granularity\",\n            \"Address base\",\n            \"size_t size\",\n            \"PagePermissions max_page_permissions\"\n          ],\n          \"return_type\": \"N/A\",\n          \"logic\": \"Constructor for VirtualAddressSpace.\"\n        },\n        {\n          \"name\": \"~VirtualAddressSpace\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual Destructor.\"\n        },\n        {\n          \"name\": \"page_size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the page size used inside this space.\"\n        },\n        {\n          \"name\": \"allocation_granularity\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the granularity of page allocations and, by extension, of subspace allocations.\"\n        },\n        {\n          \"name\": \"base\",\n          \"parameters\": [],\n          \"return_type\": \"Address\",\n          \"logic\": \"Returns the base address of the address space managed by this instance.\"\n        },\n        {\n          \"name\": \"size\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns the size of the address space managed by this instance.\"\n        },\n        {\n          \"name\": \"max_page_permissions\",\n          \"parameters\": [],\n          \"return_type\": \"PagePermissions\",\n          \"logic\": \"Returns the maximum page permissions that pages allocated inside this space can obtain.\"\n        },\n        {\n          \"name\": \"Contains\",\n          \"parameters\": [\n            \"Address address\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Whether the address is inside the address space managed by this instance.\"\n        },\n        {\n          \"name\": \"SetRandomSeed\",\n          \"parameters\": [\n            \"int64_t seed\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Sets the random seed so that GetRandomPageAddress() will generate repeatable sequences of random addresses.\"\n        },\n        {\n          \"name\": \"RandomPageAddress\",\n          \"parameters\": [],\n          \"return_type\": \"virtual Address\",\n          \"logic\": \"Returns a random address inside this address space, suitable for page allocations hints.\"\n        },\n        {\n          \"name\": \"AllocatePages\",\n          \"parameters\": [\n            \"Address hint\",\n            \"size_t size\",\n            \"size_t alignment\",\n            \"PagePermissions permissions\"\n          ],\n          \"return_type\": \"virtual Address\",\n          \"logic\": \"Allocates private memory pages with the given alignment and permissions.\"\n        },\n        {\n          \"name\": \"FreePages\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Frees previously allocated pages.\"\n        },\n        {\n          \"name\": \"SetPagePermissions\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\",\n            \"PagePermissions permissions\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Sets permissions of all allocated pages in the given range.\"\n        },\n        {\n          \"name\": \"AllocateGuardRegion\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Creates a guard region at the specified address.\"\n        },\n        {\n          \"name\": \"FreeGuardRegion\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Frees an existing guard region.\"\n        },\n        {\n          \"name\": \"AllocateSharedPages\",\n          \"parameters\": [\n            \"Address hint\",\n            \"size_t size\",\n            \"PagePermissions permissions\",\n            \"PlatformSharedMemoryHandle handle\",\n            \"uint64_t offset\"\n          ],\n          \"return_type\": \"virtual Address\",\n          \"logic\": \"Allocates shared memory pages with the given permissions.\"\n        },\n        {\n          \"name\": \"FreeSharedPages\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Frees previously allocated shared pages.\"\n        },\n        {\n          \"name\": \"CanAllocateSubspaces\",\n          \"parameters\": [],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Whether this instance can allocate subspaces or not.\"\n        },\n        {\n          \"name\": \"AllocateSubspace\",\n          \"parameters\": [\n            \"Address hint\",\n            \"size_t size\",\n            \"size_t alignment\",\n            \"PagePermissions max_page_permissions\"\n          ],\n          \"return_type\": \"virtual std::unique_ptr<VirtualAddressSpace>\",\n          \"logic\": \"Allocate a subspace.\"\n        },\n        {\n          \"name\": \"RecommitPages\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\",\n            \"PagePermissions permissions\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Recommits discarded pages in the given range with given permissions.\"\n        },\n        {\n          \"name\": \"DiscardSystemPages\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Frees memory in the given range. This should be treated as a hint to the OS that the pages are no longer needed.\"\n        },\n        {\n          \"name\": \"DecommitPages\",\n          \"parameters\": [\n            \"Address address\",\n            \"size_t size\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Decommits any wired memory pages in the given range, allowing the OS to reclaim them.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HighAllocationThroughputObserver\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"EnterSection\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Indicates entering a section with high allocation throughput.\"\n        },\n        {\n          \"name\": \"LeaveSection\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Indicates leaving a section with high allocation throughput.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Platform\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~Platform\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"GetPageAllocator\",\n          \"parameters\": [],\n          \"return_type\": \"virtual PageAllocator*\",\n          \"logic\": \"Allows the embedder to manage memory page allocations.\"\n        },\n        {\n          \"name\": \"GetThreadIsolatedAllocator\",\n          \"parameters\": [],\n          \"return_type\": \"virtual ThreadIsolatedAllocator*\",\n          \"logic\": \"Allows the embedder to provide an allocator that uses per-thread memory permissions to protect allocations.\"\n        },\n        {\n          \"name\": \"OnCriticalMemoryPressure\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Enables the embedder to respond in cases where V8 can't allocate large blocks of memory.\"\n        },\n        {\n          \"name\": \"NumberOfWorkerThreads\",\n          \"parameters\": [],\n          \"return_type\": \"virtual int\",\n          \"logic\": \"Gets the max number of worker threads that may be used to execute concurrent work scheduled.\"\n        },\n        {\n          \"name\": \"GetForegroundTaskRunner\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"std::shared_ptr<v8::TaskRunner>\",\n          \"logic\": \"Returns a TaskRunner which can be used to post a task on the foreground with TaskPriority::kUserBlocking.\"\n        },\n        {\n          \"name\": \"GetForegroundTaskRunner\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"TaskPriority priority\"\n          ],\n          \"return_type\": \"virtual std::shared_ptr<v8::TaskRunner>\",\n          \"logic\": \"Returns a TaskRunner with a specific |priority| which can be used to post a task on the foreground thread.\"\n        },\n        {\n          \"name\": \"CallOnWorkerThread\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a task to be invoked on a worker thread. Deprecated, use PostTaskOnWorkerThread instead.\"\n        },\n        {\n          \"name\": \"CallBlockingTaskOnWorkerThread\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a task that blocks the main thread to be invoked with high-priority on a worker thread. Deprecated, use PostTaskOnWorkerThread instead.\"\n        },\n        {\n          \"name\": \"CallLowPriorityTaskOnWorkerThread\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a task to be invoked with low-priority on a worker thread. Deprecated, use PostTaskOnWorkerThread instead.\"\n        },\n        {\n          \"name\": \"CallDelayedOnWorkerThread\",\n          \"parameters\": [\n            \"std::unique_ptr<Task> task\",\n            \"double delay_in_seconds\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a task to be invoked on a worker thread after |delay_in_seconds| expires. Deprecated, use PostDelayedTaskOnWorkerThread instead.\"\n        },\n        {\n          \"name\": \"PostTaskOnWorkerThread\",\n          \"parameters\": [\n            \"TaskPriority priority\",\n            \"std::unique_ptr<Task> task\",\n            \"const SourceLocation& location\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Schedules a task to be invoked on a worker thread.\"\n        "
}