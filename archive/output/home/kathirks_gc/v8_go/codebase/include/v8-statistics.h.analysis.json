{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-statistics.h",
  "imports": [
    "<stddef.h>",
    "<stdint.h>",
    "<memory>",
    "<utility>",
    "<vector>",
    "v8-local-handle.h",
    "v8-memory-span.h",
    "v8-promise.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "MeasureMemoryDelegate",
      "properties": [],
      "methods": [
        {
          "name": "~MeasureMemoryDelegate",
          "parameters": [],
          "return_type": "virtual",
          "logic": "Virtual destructor for the MeasureMemoryDelegate class."
        },
        {
          "name": "ShouldMeasure",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "virtual bool",
          "logic": "Abstract method to determine if the size of a given context should be measured."
        },
        {
          "name": "MeasurementComplete",
          "parameters": [
            "Result result"
          ],
          "return_type": "virtual void",
          "logic": "Virtual method called when the memory measurement finishes, reporting the results."
        },
        {
          "name": "Default",
          "parameters": [
            "Isolate* isolate",
            "Local<Context> context",
            "Local<Promise::Resolver> promise_resolver",
            "MeasureMemoryMode mode"
          ],
          "return_type": "static std::unique_ptr<MeasureMemoryDelegate>",
          "logic": "Static method that returns a default delegate that resolves the given promise when the memory measurement completes."
        }
      ]
    },
    {
      "name": "MeasureMemoryDelegate::Result",
      "properties": [
        "const MemorySpan<const Local<Context>>& contexts",
        "const MemorySpan<const size_t>& sizes_in_bytes",
        "size_t unattributed_size_in_bytes",
        "size_t wasm_code_size_in_bytes",
        "size_t wasm_metadata_size_in_bytes"
      ],
      "methods": []
    },
    {
      "name": "SharedMemoryStatistics",
      "properties": [
        "size_t read_only_space_size_",
        "size_t read_only_space_used_size_",
        "size_t read_only_space_physical_size_"
      ],
      "methods": [
        {
          "name": "SharedMemoryStatistics",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for SharedMemoryStatistics."
        },
        {
          "name": "read_only_space_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the read-only space."
        },
        {
          "name": "read_only_space_used_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the used size of the read-only space."
        },
        {
          "name": "read_only_space_physical_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the physical size of the read-only space."
        }
      ]
    },
    {
      "name": "HeapStatistics",
      "properties": [
        "size_t total_heap_size_",
        "size_t total_heap_size_executable_",
        "size_t total_physical_size_",
        "size_t total_available_size_",
        "size_t used_heap_size_",
        "size_t heap_size_limit_",
        "size_t malloced_memory_",
        "size_t external_memory_",
        "size_t peak_malloced_memory_",
        "bool does_zap_garbage_",
        "size_t number_of_native_contexts_",
        "size_t number_of_detached_contexts_",
        "size_t total_global_handles_size_",
        "size_t used_global_handles_size_"
      ],
      "methods": [
        {
          "name": "HeapStatistics",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for HeapStatistics."
        },
        {
          "name": "total_heap_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total heap size."
        },
        {
          "name": "total_heap_size_executable",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total executable heap size."
        },
        {
          "name": "total_physical_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total physical size."
        },
        {
          "name": "total_available_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total available size."
        },
        {
          "name": "total_global_handles_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the total size of global handles."
        },
        {
          "name": "used_global_handles_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the used size of global handles."
        },
        {
          "name": "used_heap_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the used heap size."
        },
        {
          "name": "heap_size_limit",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the heap size limit."
        },
        {
          "name": "malloced_memory",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the malloced memory."
        },
        {
          "name": "external_memory",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the external memory."
        },
        {
          "name": "peak_malloced_memory",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the peak malloced memory."
        },
        {
          "name": "number_of_native_contexts",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of native contexts."
        },
        {
          "name": "number_of_detached_contexts",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the number of detached contexts."
        },
        {
          "name": "does_zap_garbage",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns a 0/1 boolean indicating if the V8 overwrite heap garbage with a bit pattern."
        }
      ]
    },
    {
      "name": "HeapSpaceStatistics",
      "properties": [
        "const char* space_name_",
        "size_t space_size_",
        "size_t space_used_size_",
        "size_t space_available_size_",
        "size_t physical_space_size_"
      ],
      "methods": [
        {
          "name": "HeapSpaceStatistics",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for HeapSpaceStatistics."
        },
        {
          "name": "space_name",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the name of the heap space."
        },
        {
          "name": "space_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the heap space."
        },
        {
          "name": "space_used_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the used size of the heap space."
        },
        {
          "name": "space_available_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the available size of the heap space."
        },
        {
          "name": "physical_space_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the physical size of the heap space."
        }
      ]
    },
    {
      "name": "HeapObjectStatistics",
      "properties": [
        "const char* object_type_",
        "const char* object_sub_type_",
        "size_t object_count_",
        "size_t object_size_"
      ],
      "methods": [
        {
          "name": "HeapObjectStatistics",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for HeapObjectStatistics."
        },
        {
          "name": "object_type",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the type of the heap object."
        },
        {
          "name": "object_sub_type",
          "parameters": [],
          "return_type": "const char*",
          "logic": "Returns the sub-type of the heap object."
        },
        {
          "name": "object_count",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the count of the heap object."
        },
        {
          "name": "object_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of the heap object."
        }
      ]
    },
    {
      "name": "HeapCodeStatistics",
      "properties": [
        "size_t code_and_metadata_size_",
        "size_t bytecode_and_metadata_size_",
        "size_t external_script_source_size_",
        "size_t cpu_profiler_metadata_size_"
      ],
      "methods": [
        {
          "name": "HeapCodeStatistics",
          "parameters": [],
          "return_type": "",
          "logic": "Constructor for HeapCodeStatistics."
        },
        {
          "name": "code_and_metadata_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of code and metadata."
        },
        {
          "name": "bytecode_and_metadata_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of bytecode and metadata."
        },
        {
          "name": "external_script_source_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of external script source."
        },
        {
          "name": "cpu_profiler_metadata_size",
          "parameters": [],
          "return_type": "size_t",
          "logic": "Returns the size of CPU profiler metadata."
        }
      ]
    }
  ],
  "functions": [],
  "enums": [
    {
      "name": "MeasureMemoryMode",
      "values": [
        "kSummary",
        "kDetailed"
      ],
      "logic": "Controls how the MeasureMemoryDelegate reports memory measurement results to JS."
    },
    {
      "name": "MeasureMemoryExecution",
      "values": [
        "kDefault",
        "kEager",
        "kLazy"
      ],
      "logic": "Controls how promptly a memory measurement request is executed."
    }
  ]
}