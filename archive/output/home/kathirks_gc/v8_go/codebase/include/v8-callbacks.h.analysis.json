{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-callbacks.h",
  "imports": [
    "<stddef.h>",
    "<functional>",
    "<string>",
    "cppgc/common.h",
    "v8-data.h",
    "v8-local-handle.h",
    "v8-promise.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "JitCodeEvent",
      "properties": [
        "type",
        "code_type",
        "code_start",
        "code_len",
        "script",
        "user_data",
        "wasm_source_info",
        "name",
        "line_info",
        "new_code_start",
        "isolate"
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "JitCodeEventHandler",
      "parameters": [
        "const JitCodeEvent* event"
      ],
      "return_type": "void",
      "logic": "Callback function for handling JIT code events (add, move, removal)."
    },
    {
      "name": "GCCallback",
      "parameters": [
        "GCType type",
        "GCCallbackFlags flags"
      ],
      "return_type": "void",
      "logic": "Callback function for garbage collection events."
    },
    {
      "name": "InterruptCallback",
      "parameters": [
        "Isolate* isolate",
        "void* data"
      ],
      "return_type": "void",
      "logic": "Callback function to handle interrupts in the isolate."
    },
    {
      "name": "PrintCurrentStackTraceFilterCallback",
      "parameters": [
        "Isolate* isolate",
        "Local<String> script_name"
      ],
      "return_type": "bool",
      "logic": "Callback function to filter which stack traces are printed."
    },
    {
      "name": "NearHeapLimitCallback",
      "parameters": [
        "void* data",
        "size_t current_heap_limit",
        "size_t initial_heap_limit"
      ],
      "return_type": "size_t",
      "logic": "Callback function to extend the heap limit when it's near exhaustion."
    },
    {
      "name": "UnhandledExceptionCallback",
      "parameters": [
        "_EXCEPTION_POINTERS* exception_pointers"
      ],
      "return_type": "int",
      "logic": "Callback function to handle unhandled exceptions (Windows only)."
    },
    {
      "name": "CounterLookupCallback",
      "parameters": [
        "const char* name"
      ],
      "return_type": "int*",
      "logic": "Callback function to look up a counter by name."
    },
    {
      "name": "CreateHistogramCallback",
      "parameters": [
        "const char* name",
        "int min",
        "int max",
        "size_t buckets"
      ],
      "return_type": "void*",
      "logic": "Callback function to create a histogram."
    },
    {
      "name": "AddHistogramSampleCallback",
      "parameters": [
        "void* histogram",
        "int sample"
      ],
      "return_type": "void",
      "logic": "Callback function to add a sample to a histogram."
    },
    {
      "name": "FatalErrorCallback",
      "parameters": [
        "const char* location",
        "const char* message"
      ],
      "return_type": "void",
      "logic": "Callback function to handle fatal errors."
    },
    {
      "name": "OOMErrorCallback",
      "parameters": [
        "const char* location",
        "const OOMDetails& details"
      ],
      "return_type": "void",
      "logic": "Callback function to handle out-of-memory errors."
    },
    {
      "name": "MessageCallback",
      "parameters": [
        "Local<Message> message",
        "Local<Value> data"
      ],
      "return_type": "void",
      "logic": "Callback function to handle messages (e.g., errors, warnings)."
    },
    {
      "name": "LogEventCallback",
      "parameters": [
        "const char* name",
        "int /* LogEventStatus */ status"
      ],
      "return_type": "void",
      "logic": "Callback function to log events."
    },
    {
      "name": "AddCrashKeyCallback",
      "parameters": [
        "CrashKeyId id",
        "const std::string& value"
      ],
      "return_type": "void",
      "logic": "Callback function to add a crash key value pair"
    },
    {
      "name": "BeforeCallEnteredCallback",
      "parameters": [
        "Isolate*"
      ],
      "return_type": "void",
      "logic": "Callback that is executed before a function is entered."
    },
    {
      "name": "CallCompletedCallback",
      "parameters": [
        "Isolate*"
      ],
      "return_type": "void",
      "logic": "Callback that is executed after a function has completed."
    },
    {
      "name": "ModifyCodeGenerationFromStringsCallback",
      "parameters": [
        "Local<Context> context",
        "Local<Value> source"
      ],
      "return_type": "ModifyCodeGenerationFromStringsResult",
      "logic": "Callback function to modify code generation from strings."
    },
    {
      "name": "ModifyCodeGenerationFromStringsCallback2",
      "parameters": [
        "Local<Context> context",
        "Local<Value> source",
        "bool is_code_like"
      ],
      "return_type": "ModifyCodeGenerationFromStringsResult",
      "logic": "Callback function to modify code generation from strings."
    },
    {
      "name": "FailedAccessCheckCallback",
      "parameters": [
        "Local<Object> target",
        "AccessType type",
        "Local<Value> data"
      ],
      "return_type": "void",
      "logic": "Callback function called when an access check fails."
    },
    {
      "name": "ExtensionCallback",
      "parameters": [
        "const FunctionCallbackInfo<Value>&"
      ],
      "return_type": "bool",
      "logic": "Callback for custom extensions."
    },
    {
      "name": "AllowWasmCodeGenerationCallback",
      "parameters": [
        "Local<Context> context",
        "Local<String> source"
      ],
      "return_type": "bool",
      "logic": "Callback to determine whether WASM code generation is allowed."
    },
    {
      "name": "ApiImplementationCallback",
      "parameters": [
        "const FunctionCallbackInfo<Value>&"
      ],
      "return_type": "void",
      "logic": "Callback for APIs implemented by the embedder."
    },
    {
      "name": "WasmStreamingCallback",
      "parameters": [
        "const FunctionCallbackInfo<Value>&"
      ],
      "return_type": "void",
      "logic": "Callback function for WebAssembly compileStreaming."
    },
    {
      "name": "WasmAsyncResolvePromiseCallback",
      "parameters": [
        "Isolate* isolate",
        "Local<Context> context",
        "Local<Promise::Resolver> resolver",
        "Local<Value> result",
        "WasmAsyncSuccess success"
      ],
      "return_type": "void",
      "logic": "Callback called when async WebAssembly operations finish."
    },
    {
      "name": "WasmLoadSourceMapCallback",
      "parameters": [
        "Isolate* isolate",
        "const char* name"
      ],
      "return_type": "Local<String>",
      "logic": "Callback for loading source map file for WASM profiling."
    },
    {
      "name": "WasmImportedStringsEnabledCallback",
      "parameters": [
        "Local<Context> context"
      ],
      "return_type": "bool",
      "logic": "Callback for checking if WebAssembly imported strings are enabled."
    },
    {
      "name": "SharedArrayBufferConstructorEnabledCallback",
      "parameters": [
        "Local<Context> context"
      ],
      "return_type": "bool",
      "logic": "Callback for checking if the SharedArrayBuffer constructor is enabled."
    },
    {
      "name": "JavaScriptCompileHintsMagicEnabledCallback",
      "parameters": [
        "Local<Context> context"
      ],
      "return_type": "bool",
      "logic": "Callback for checking if the compile hints magic comments are enabled."
    },
    {
      "name": "WasmJSPIEnabledCallback",
      "parameters": [
        "Local<Context> context"
      ],
      "return_type": "bool",
      "logic": "Callback for checking if WebAssembly JSPI is enabled."
    },
    {
      "name": "HostImportModuleDynamicallyCallback",
      "parameters": [
        "Local<Context> context",
        "Local<Data> host_defined_options",
        "Local<Value> resource_name",
        "Local<String> specifier",
        "Local<FixedArray> import_attributes"
      ],
      "return_type": "MaybeLocal<Promise>",
      "logic": "Callback function called to dynamically import a module."
    },
    {
      "name": "HostImportModuleWithPhaseDynamicallyCallback",
      "parameters": [
        "Local<Context> context",
        "Local<Data> host_defined_options",
        "Local<Value> resource_name",
        "Local<String> specifier",
        "ModuleImportPhase phase",
        "Local<FixedArray> import_attributes"
      ],
      "return_type": "MaybeLocal<Promise>",
      "logic": "Callback function called to dynamically import a module with specified phase."
    },
    {
      "name": "CompileHintCallback",
      "parameters": [
        "int",
        "void*"
      ],
      "return_type": "bool",
      "logic": "Callback for requesting a compile hint for a function from the embedder."
    },
    {
      "name": "HostInitializeImportMetaObjectCallback",
      "parameters": [
        "Local<Context> context",
        "Local<Module> module",
        "Local<Object> meta"
      ],
      "return_type": "void",
      "logic": "Callback function called the first time import.meta is accessed for a module."
    },
    {
      "name": "HostCreateShadowRealmContextCallback",
      "parameters": [
        "Local<Context> initiator_context"
      ],
      "return_type": "MaybeLocal<Context>",
      "logic": "Callback function called each time a ShadowRealm is being constructed."
    },
    {
      "name": "IsJSApiWrapperNativeErrorCallback",
      "parameters": [
        "Isolate* isolate",
        "Local<Object> obj"
      ],
      "return_type": "bool",
      "logic": "Callback to determine if Error.isError should return true or false on an JSApiWrapper object."
    },
    {
      "name": "PrepareStackTraceCallback",
      "parameters": [
        "Local<Context> context",
        "Local<Value> error",
        "Local<Array> sites"
      ],
      "return_type": "MaybeLocal<Value>",
      "logic": "Callback called when the stack property of an error is first accessed."
    },
    {
      "name": "FilterETWSessionByURLCallback",
      "parameters": [
        "Local<Context> context",
        "const std::string& etw_filter_payload"
      ],
      "return_type": "bool",
      "logic": "Callback to selectively enable ETW tracing based on the document URL (Windows only)."
    },
    {
      "name": "FilterETWSessionByURL2Callback",
      "parameters": [
        "Local<Context> context",
        "const std::string& etw_filter_payload"
      ],
      "return_type": "FilterETWSessionByURLResult",
      "logic": "Callback to selectively enable ETW tracing based on the document URL, returning a struct for the ETW enabled flag and interpreter frame tracing flag (Windows only)."
    }
  ]
}