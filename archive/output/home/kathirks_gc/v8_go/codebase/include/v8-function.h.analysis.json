{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-function.h",
  "imports": [
    "<stddef.h>",
    "<stdint.h>",
    "v8-function-callback.h",
    "v8-local-handle.h",
    "v8-message.h",
    "v8-object.h",
    "v8-template.h",
    "v8config.h"
  ],
  "classes": [
    {
      "name": "Function",
      "properties": [
        "kLineOffsetNotFound"
      ],
      "methods": [
        {
          "name": "New",
          "parameters": [
            "Local<Context> context",
            "FunctionCallback callback",
            "Local<Value> data",
            "int length",
            "ConstructorBehavior behavior",
            "SideEffectType side_effect_type"
          ],
          "return_type": "MaybeLocal<Function>",
          "logic": "Creates a new JavaScript function object within the given context, using the provided callback function and other optional parameters such as data, length, constructor behavior, and side effect type."
        },
        {
          "name": "NewInstance",
          "parameters": [
            "Local<Context> context",
            "int argc",
            "Local<Value> argv[]"
          ],
          "return_type": "MaybeLocal<Object>",
          "logic": "Creates a new instance of the function, acting as a constructor, within the given context, using the provided arguments."
        },
        {
          "name": "NewInstance",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<Object>",
          "logic": "Overload of NewInstance, creating a new instance of the function with no arguments."
        },
        {
          "name": "NewInstanceWithSideEffectType",
          "parameters": [
            "Local<Context> context",
            "int argc",
            "Local<Value> argv[]",
            "SideEffectType side_effect_type"
          ],
          "return_type": "MaybeLocal<Object>",
          "logic": "Creates a new instance of the function, acting as a constructor, with a specific side effect type."
        },
        {
          "name": "Call",
          "parameters": [
            "v8::Isolate* isolate",
            "Local<Context> context",
            "Local<Value> recv",
            "int argc",
            "Local<Value> argv[]"
          ],
          "return_type": "MaybeLocal<Value>",
          "logic": "Calls the function with the given receiver ('this') and arguments within the provided context and isolate."
        },
        {
          "name": "Call",
          "parameters": [
            "Local<Context> context",
            "Local<Value> recv",
            "int argc",
            "Local<Value> argv[]"
          ],
          "return_type": "MaybeLocal<Value>",
          "logic": "Calls the function with the given receiver ('this') and arguments within the provided context."
        },
        {
          "name": "SetName",
          "parameters": [
            "Local<String> name"
          ],
          "return_type": "void",
          "logic": "Sets the name of the function."
        },
        {
          "name": "GetName",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Gets the name of the function."
        },
        {
          "name": "GetInferredName",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Gets the inferred name of the function, based on how it was assigned (e.g., to a variable or property)."
        },
        {
          "name": "GetDebugName",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "Gets the debug name of the function, prioritizing display name, name, function name, and finally inferred name."
        },
        {
          "name": "GetScriptLineNumber",
          "parameters": [],
          "return_type": "int",
          "logic": "Gets the line number of the function's source code within its script."
        },
        {
          "name": "GetScriptColumnNumber",
          "parameters": [],
          "return_type": "int",
          "logic": "Gets the column number of the function's source code within its script."
        },
        {
          "name": "GetScriptLocation",
          "parameters": [],
          "return_type": "Location",
          "logic": "Gets the line and column number of the function's source code within its script."
        },
        {
          "name": "GetScriptStartPosition",
          "parameters": [],
          "return_type": "int",
          "logic": "Gets the starting character offset of the function's source code within its script."
        },
        {
          "name": "ScriptId",
          "parameters": [],
          "return_type": "int",
          "logic": "Gets the script ID of the script that contains this function."
        },
        {
          "name": "GetBoundFunction",
          "parameters": [],
          "return_type": "Local<Value>",
          "logic": "If the function is bound, returns the original function that was bound; otherwise, returns undefined."
        },
        {
          "name": "FunctionProtoToString",
          "parameters": [
            "Local<Context> context"
          ],
          "return_type": "MaybeLocal<String>",
          "logic": "Calls the built-in Function.prototype.toString method on this function."
        },
        {
          "name": "Experimental_IsNopFunction",
          "parameters": [],
          "return_type": "bool",
          "logic": "Checks if the function is a no-op function (i.e., it does nothing)."
        },
        {
          "name": "GetScriptOrigin",
          "parameters": [],
          "return_type": "ScriptOrigin",
          "logic": "Gets information about the origin of the script where this function is defined."
        },
        {
          "name": "Cast",
          "parameters": [
            "Value* value"
          ],
          "return_type": "Function*",
          "logic": "Casts a v8::Value to a v8::Function, with checks enabled in debug mode."
        }
      ]
    }
  ],
  "functions": []
}