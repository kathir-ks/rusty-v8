{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-profiler.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n  \"file_path\": \"/home/kathirks_gc/v8_go/codebase/include/v8-profiler.h\",\n  \"imports\": [\n    \"<limits.h>\",\n    \"<memory>\",\n    \"<unordered_set>\",\n    \"<vector>\",\n    \"cppgc/common.h\",\n    \"v8-local-handle.h\",\n    \"v8-message.h\",\n    \"v8-persistent-handle.h\"\n  ],\n  \"classes\": [\n    {\n      \"name\": \"CpuProfileNode\",\n      \"properties\": [\n        \"static const int kNoLineNumberInfo\",\n        \"static const int kNoColumnNumberInfo\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetFunctionName\",\n          \"parameters\": [],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Returns function name (empty string for anonymous functions.)\"\n        },\n        {\n          \"name\": \"GetFunctionNameStr\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns function name as a C-style string. The string ownership is *not* passed to the caller. It stays valid until profile is deleted. Thread safe.\"\n        },\n        {\n          \"name\": \"GetScriptId\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns id of the script where function is located.\"\n        },\n        {\n          \"name\": \"GetScriptResourceName\",\n          \"parameters\": [],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Returns resource name for script from where the function originates.\"\n        },\n        {\n          \"name\": \"GetScriptResourceNameStr\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns resource name for script from where the function originates. The string ownership is *not* passed to the caller. It stays valid until profile is deleted. Thread safe.\"\n        },\n        {\n          \"name\": \"IsScriptSharedCrossOrigin\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Return true if the script from where the function originates is flagged as being shared cross-origin.\"\n        },\n        {\n          \"name\": \"GetLineNumber\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number, 1-based, of the line where the function originates. kNoLineNumberInfo if no line number information is available.\"\n        },\n        {\n          \"name\": \"GetColumnNumber\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns 1-based number of the column where the function originates. kNoColumnNumberInfo if no column number information is available.\"\n        },\n        {\n          \"name\": \"GetHitLineCount\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned int\",\n          \"logic\": \"Returns the number of the function's source lines that collect the samples.\"\n        },\n        {\n          \"name\": \"GetLineTicks\",\n          \"parameters\": [\n            \"LineTick* entries\",\n            \"unsigned int length\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns the set of source lines that collect the samples. The caller allocates buffer and responsible for releasing it. True if all available entries are copied, otherwise false. The function copies nothing if buffer is not large enough.\"\n        },\n        {\n          \"name\": \"GetBailoutReason\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Returns bailout reason for the function if the optimization was disabled for it.\"\n        },\n        {\n          \"name\": \"GetHitCount\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned\",\n          \"logic\": \"Returns the count of samples where the function was currently executing.\"\n        },\n        {\n          \"name\": \"GetNodeId\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned\",\n          \"logic\": \"Returns id of the node. The id is unique within the tree\"\n        },\n        {\n          \"name\": \"GetSourceType\",\n          \"parameters\": [],\n          \"return_type\": \"SourceType\",\n          \"logic\": \"Gets the type of the source which the node was captured from.\"\n        },\n        {\n          \"name\": \"GetChildrenCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns child nodes count of the node.\"\n        },\n        {\n          \"name\": \"GetChild\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"const CpuProfileNode*\",\n          \"logic\": \"Retrieves a child node by index.\"\n        },\n        {\n          \"name\": \"GetParent\",\n          \"parameters\": [],\n          \"return_type\": \"const CpuProfileNode*\",\n          \"logic\": \"Retrieves the ancestor node, or null if the root.\"\n        },\n        {\n          \"name\": \"GetDeoptInfos\",\n          \"parameters\": [],\n          \"return_type\": \"const std::vector<CpuProfileDeoptInfo>&\",\n          \"logic\": \"Retrieves deopt infos for the node.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OutputStream\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~OutputStream\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"EndOfStream\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Notify about the end of stream.\"\n        },\n        {\n          \"name\": \"GetChunkSize\",\n          \"parameters\": [],\n          \"return_type\": \"virtual int\",\n          \"logic\": \"Get preferred output chunk size. Called only once.\"\n        },\n        {\n          \"name\": \"WriteAsciiChunk\",\n          \"parameters\": [\n            \"char* data\",\n            \"int size\"\n          ],\n          \"return_type\": \"virtual WriteResult\",\n          \"logic\": \"Writes the next chunk of snapshot data into the stream. Writing can be stopped by returning kAbort as function result. EndOfStream will not be called in case writing was aborted.\"\n        },\n        {\n          \"name\": \"WriteHeapStatsChunk\",\n          \"parameters\": [\n            \"HeapStatsUpdate* data\",\n            \"int count\"\n          ],\n          \"return_type\": \"virtual WriteResult\",\n          \"logic\": \"Writes the next chunk of heap stats data into the stream. Writing can be stopped by returning kAbort as function result. EndOfStream will not be called in case writing was aborted.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CpuProfile\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetTitle\",\n          \"parameters\": [],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Returns CPU profile title.\"\n        },\n        {\n          \"name\": \"GetTopDownRoot\",\n          \"parameters\": [],\n          \"return_type\": \"const CpuProfileNode*\",\n          \"logic\": \"Returns the root node of the top down call tree.\"\n        },\n        {\n          \"name\": \"GetSamplesCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns number of samples recorded. The samples are not recorded unless |record_samples| parameter of CpuProfiler::StartCpuProfiling is true.\"\n        },\n        {\n          \"name\": \"GetSample\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"const CpuProfileNode*\",\n          \"logic\": \"Returns profile node corresponding to the top frame the sample at the given index.\"\n        },\n        {\n          \"name\": \"GetSampleTimestamp\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns the timestamp of the sample. The timestamp is the number of microseconds since some unspecified starting point. The point is equal to the starting point used by GetStartTime.\"\n        },\n        {\n          \"name\": \"GetStartTime\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns time when the profile recording was started (in microseconds) since some unspecified starting point.\"\n        },\n        {\n          \"name\": \"GetSampleState\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"StateTag\",\n          \"logic\": \"Returns state of the vm when sample was captured.\"\n        },\n        {\n          \"name\": \"GetSampleEmbedderState\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"EmbedderStateTag\",\n          \"logic\": \"Returns state of the embedder when sample was captured.\"\n        },\n        {\n          \"name\": \"GetEndTime\",\n          \"parameters\": [],\n          \"return_type\": \"int64_t\",\n          \"logic\": \"Returns time when the profile recording was stopped (in microseconds) since some unspecified starting point. The point is equal to the starting point used by GetStartTime.\"\n        },\n        {\n          \"name\": \"Delete\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes the profile and removes it from CpuProfiler's list. All pointers to nodes previously returned become invalid.\"\n        },\n        {\n          \"name\": \"Serialize\",\n          \"parameters\": [\n            \"OutputStream* stream\",\n            \"SerializationFormat format\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepare a serialized representation of the profile. The result is written into the stream provided in chunks of specified size.  Format is JSON.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DiscardedSamplesDelegate\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"DiscardedSamplesDelegate\",\n          \"parameters\": [],\n          \"return_type\": null,\n          \"logic\": \"Default constructor\"\n        },\n        {\n          \"name\": \"~DiscardedSamplesDelegate\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"Notify\",\n          \"parameters\": [],\n          \"return_type\": \"virtual void\",\n          \"logic\": \"Notifies about discarded samples\"\n        },\n        {\n          \"name\": \"GetId\",\n          \"parameters\": [],\n          \"return_type\": \"ProfilerId\",\n          \"logic\": \"Returns the profiler id.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CpuProfilingOptions\",\n      \"properties\": [\n        \"static const unsigned kNoSampleLimit\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"CpuProfilingOptions\",\n          \"parameters\": [\n            \"CpuProfilingMode mode\",\n            \"unsigned max_samples\",\n            \"int sampling_interval_us\",\n            \"MaybeLocal<Context> filter_context\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Constructor for CpuProfilingOptions, allows specifying mode, max_samples, sampling_interval_us and filter_context.\"\n        },\n        {\n          \"name\": \"mode\",\n          \"parameters\": [],\n          \"return_type\": \"CpuProfilingMode\",\n          \"logic\": \"Returns the profiling mode.\"\n        },\n        {\n          \"name\": \"max_samples\",\n          \"parameters\": [],\n          \"return_type\": \"unsigned\",\n          \"logic\": \"Returns the maximum number of samples to collect.\"\n        },\n        {\n          \"name\": \"sampling_interval_us\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the sampling interval in microseconds.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CpuProfiler\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"New\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"CpuProfilingNamingMode\",\n            \"CpuProfilingLoggingMode\"\n          ],\n          \"return_type\": \"CpuProfiler*\",\n          \"logic\": \"Creates a new CPU profiler for the |isolate|.\"\n        },\n        {\n          \"name\": \"CollectSample\",\n          \"parameters\": [\n            \"Isolate* isolate\",\n            \"const std::optional<uint64_t> trace_id\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Synchronously collect current stack sample in all profilers attached to the |isolate|.\"\n        },\n        {\n          \"name\": \"Dispose\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Disposes the CPU profiler object.\"\n        },\n        {\n          \"name\": \"SetSamplingInterval\",\n          \"parameters\": [\n            \"int us\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Changes default CPU profiler sampling interval to the specified number of microseconds.\"\n        },\n        {\n          \"name\": \"SetUsePreciseSampling\",\n          \"parameters\": [\n            \"bool\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets whether or not the profiler should prioritize consistency of sample periodicity on Windows.\"\n        },\n       {\n          \"name\": \"Start\",\n          \"parameters\": [\n            \"CpuProfilingOptions options\",\n            \"std::unique_ptr<DiscardedSamplesDelegate> delegate\"\n          ],\n          \"return_type\": \"CpuProfilingResult\",\n          \"logic\": \"Starts collecting a CPU profile. Generates an anonymous profiler, without a String identifier.\"\n        },\n        {\n          \"name\": \"Start\",\n          \"parameters\": [\n            \"Local<String> title\",\n            \"CpuProfilingOptions options\",\n            \"std::unique_ptr<DiscardedSamplesDelegate> delegate\"\n          ],\n          \"return_type\": \"CpuProfilingResult\",\n          \"logic\": \"Starts collecting a CPU profile. Title may be an empty string. Several profiles may be collected at once.\"\n        },\n       {\n          \"name\": \"Start\",\n          \"parameters\": [\n            \"Local<String> title\",\n            \"CpuProfilingMode mode\",\n            \"bool record_samples\",\n            \"unsigned max_samples\"\n          ],\n          \"return_type\": \"CpuProfilingResult\",\n          \"logic\": \"Starts collecting a CPU profile with expanded parameters.\"\n        },\n        {\n          \"name\": \"Start\",\n          \"parameters\": [\n            \"Local<String> title\",\n            \"bool record_samples\"\n          ],\n          \"return_type\": \"CpuProfilingResult\",\n          \"logic\": \"Starts collecting a CPU profile with default CpuProfilingMode.\"\n        },\n        {\n          \"name\": \"StartProfiling\",\n          \"parameters\": [\n            \"Local<String> title\",\n            \"CpuProfilingOptions options\",\n            \"std::unique_ptr<DiscardedSamplesDelegate> delegate\"\n          ],\n          \"return_type\": \"CpuProfilingStatus\",\n          \"logic\": \"Starts collecting a CPU profile. Title may be an empty string. Several profiles may be collected at once.\"\n        },\n        {\n          \"name\": \"StartProfiling\",\n          \"parameters\": [\n            \"Local<String> title\",\n            \"CpuProfilingMode mode\",\n            \"bool record_samples\",\n            \"unsigned max_samples\"\n          ],\n          \"return_type\": \"CpuProfilingStatus\",\n          \"logic\": \"Starts profiling with the same semantics as above, except with expanded parameters.\"\n        },\n        {\n          \"name\": \"StartProfiling\",\n          \"parameters\": [\n            \"Local<String> title\",\n            \"bool record_samples\"\n          ],\n          \"return_type\": \"CpuProfilingStatus\",\n          \"logic\": \"The same as StartProfiling above, but the CpuProfilingMode defaults to kLeafNodeLineNumbers mode, which was the previous default behavior of the profiler.\"\n        },\n        {\n          \"name\": \"Stop\",\n          \"parameters\": [\n            \"ProfilerId id\"\n          ],\n          \"return_type\": \"CpuProfile*\",\n          \"logic\": \"Stops collecting CPU profile with a given id and returns it.\"\n        },\n        {\n          \"name\": \"StopProfiling\",\n          \"parameters\": [\n            \"Local<String> title\"\n          ],\n          \"return_type\": \"CpuProfile*\",\n          \"logic\": \"Stops collecting CPU profile with a given title and returns it. If the title given is empty, finishes the last profile started.\"\n        },\n        {\n          \"name\": \"UseDetailedSourcePositionsForProfiling\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": \"static void\",\n          \"logic\": \"Generate more detailed source positions to code objects.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HeapGraphEdge\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetType\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns edge type.\"\n        },\n        {\n          \"name\": \"GetName\",\n          \"parameters\": [],\n          \"return_type\": \"Local<Value>\",\n          \"logic\": \"Returns edge name. This can be a variable name, an element index, or a property name.\"\n        },\n        {\n          \"name\": \"GetFromNode\",\n          \"parameters\": [],\n          \"return_type\": \"const HeapGraphNode*\",\n          \"logic\": \"Returns origin node.\"\n        },\n        {\n          \"name\": \"GetToNode\",\n          \"parameters\": [],\n          \"return_type\": \"const HeapGraphNode*\",\n          \"logic\": \"Returns destination node.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HeapGraphNode\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetType\",\n          \"parameters\": [],\n          \"return_type\": \"Type\",\n          \"logic\": \"Returns node type.\"\n        },\n        {\n          \"name\": \"GetName\",\n          \"parameters\": [],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Returns node name. Depending on node's type this can be the name of the constructor (for objects), the name of the function (for closures), string value, or an empty string (for compiled code).\"\n        },\n        {\n          \"name\": \"GetId\",\n          \"parameters\": [],\n          \"return_type\": \"SnapshotObjectId\",\n          \"logic\": \"Returns node id. For the same heap object, the id remains the same across all snapshots.\"\n        },\n        {\n          \"name\": \"GetShallowSize\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Returns node's own size, in bytes.\"\n        },\n        {\n          \"name\": \"GetChildrenCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns child nodes count of the node.\"\n        },\n        {\n          \"name\": \"GetChild\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"const HeapGraphEdge*\",\n          \"logic\": \"Retrieves a child by index.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HeapSnapshot\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetRoot\",\n          \"parameters\": [],\n          \"return_type\": \"const HeapGraphNode*\",\n          \"logic\": \"Returns the root node of the heap graph.\"\n        },\n        {\n          \"name\": \"GetNodeById\",\n          \"parameters\": [\n            \"SnapshotObjectId id\"\n          ],\n          \"return_type\": \"const HeapGraphNode*\",\n          \"logic\": \"Returns a node by its id.\"\n        },\n        {\n          \"name\": \"GetNodesCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns total nodes count in the snapshot.\"\n        },\n        {\n          \"name\": \"GetNode\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"const HeapGraphNode*\",\n          \"logic\": \"Returns a node by index.\"\n        },\n        {\n          \"name\": \"GetMaxSnapshotJSObjectId\",\n          \"parameters\": [],\n          \"return_type\": \"SnapshotObjectId\",\n          \"logic\": \"Returns a max seen JS object Id.\"\n        },\n        {\n          \"name\": \"Delete\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes the snapshot and removes it from HeapProfiler's list.\"\n        },\n        {\n          \"name\": \"Serialize\",\n          \"parameters\": [\n            \"OutputStream* stream\",\n            \"SerializationFormat format\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Prepare a serialized representation of the snapshot.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ActivityControl\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~ActivityControl\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"ReportProgressValue\",\n          \"parameters\": [\n            \"uint32_t done\",\n            \"uint32_t total\"\n          ],\n          \"return_type\": \"virtual ControlOption\",\n          \"logic\": \"Notify about current progress. The activity can be stopped by returning kAbort as the callback result.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"AllocationProfile\",\n      \"properties\": [\n        \"static const int kNoLineNumberInfo\",\n        \"static const int kNoColumnNumberInfo\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"GetRootNode\",\n          \"parameters\": [],\n          \"return_type\": \"virtual Node*\",\n          \"logic\": \"Returns the root node of the call-graph.\"\n        },\n        {\n          \"name\": \"GetSamples\",\n          \"parameters\": [],\n          \"return_type\": \"virtual const std::vector<Sample>&\",\n          \"logic\": \"Returns the samples.\"\n        },\n        {\n          \"name\": \"~AllocationProfile\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EmbedderGraph\",\n      \"properties\": [],\n      \"methods\": [],\n      \"nested_classes\": [\n        {\n          \"name\": \"Node\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"Name\",\n              \"parameters\": [],\n              \"return_type\": \"virtual const char*\",\n              \"logic\": \"Gets the name of the node.\"\n            },\n            {\n              \"name\": \"SizeInBytes\",\n              \"parameters\": [],\n              \"return_type\": \"virtual size_t\",\n              \"logic\": \"Gets the size of the node in bytes.\"\n            },\n            {\n              \"name\": \"WrapperNode\",\n              \"parameters\": [],\n              \"return_type\": \"virtual Node*\",\n              \"logic\": \"The corresponding V8 wrapper node if not null. During heap snapshot generation the embedder node and the V8 wrapper node will be merged into one node to simplify retaining paths.\"\n            },\n            {\n              \"name\": \"IsRootNode\",\n              \"parameters\": [],\n              \"return_type\": \"virtual bool\",\n              \"logic\": \"Gets whether the node is a root node.\"\n            },\n            {\n              \"name\": \"IsEmbedderNode\",\n              \"parameters\": [],\n              \"return_type\": \"virtual bool\",\n              \"logic\": \"Returns true for non-V8 nodes\"\n            },\n            {\n              \"name\": \"NamePrefix\",\n              \"parameters\": [],\n              \"return_type\": \"virtual const char*\",\n              \"logic\": \"Optional name prefix.\"\n            },\n            {\n              \"name\": \"GetNativeObject\",\n              \"parameters\": [],\n              \"return_type\": \"virtual NativeObject\",\n              \"logic\": \"Returns the NativeObject that can be used for querying the |HeapSnapshot|.\"\n            },\n            {\n              \"name\": \"GetDetachedness\",\n              \"parameters\": [],\n              \"return_type\": \"virtual Detachedness\",\n              \"logic\": \"Returns the detachedness state of a given object.\"\n            },\n            {\n              \"name\": \"GetAddress\",\n              \"parameters\": [],\n              \"return_type\": \"virtual const void*\",\n              \"logic\": \"Returns the address of the object in the embedder heap.\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"QueryObjectPredicate\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"~QueryObjectPredicate\",\n          \"parameters\": [],\n          \"return_type\": \"virtual\",\n          \"logic\": \"Virtual destructor.\"\n        },\n        {\n          \"name\": \"Filter\",\n          \"parameters\": [\n            \"v8::Local<v8::Object> object\"\n          ],\n          \"return_type\": \"virtual bool\",\n          \"logic\": \"Filters an object.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HeapProfiler\",\n      \"properties\": [\n        \"static const SnapshotObjectId kUnknownObjectId\"\n      ],\n      \"methods\": [\n        {\n          \"name\": \"QueryObjects\",\n          \"parameters\": [\n            \"v8::Local<v8::Context> context\",\n            \"QueryObjectPredicate* predicate\",\n            \"std::vector<v8::Global<v8::Object>>* objects\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Queries objects based on a predicate.\"\n        },\n        {\n          \"name\": \"GetSnapshotCount\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Returns the number of snapshots taken.\"\n        },\n        {\n          \"name\": \"GetHeapSnapshot\",\n          \"parameters\": [\n            \"int index\"\n          ],\n          \"return_type\": \"const HeapSnapshot*\",\n          \"logic\": \"Returns a snapshot by index.\"\n        },\n        {\n          \"name\": \"GetObjectId\",\n          \"parameters\": [\n            \"Local<Value> value\"\n          ],\n          \"return_type\": \"SnapshotObjectId\",\n          \"logic\": \"Returns SnapshotObjectId for a heap object referenced by |value| if it has been seen by the heap profiler, kUnknownObjectId otherwise.\"\n        },\n        {\n          \"name\": \"GetObjectId\",\n          \"parameters\": [\n            \"NativeObject value\"\n          ],\n          \"return_type\": \"SnapshotObjectId\",\n          \"logic\": \"Returns SnapshotObjectId for a native object referenced by |value| if it has been seen by the heap profiler, kUnknownObjectId otherwise.\"\n        },\n        {\n          \"name\": \"FindObjectById\",\n          \"parameters\": [\n            \"SnapshotObjectId id\"\n          ],\n          \"return_type\": \"Local<Value>\",\n          \"logic\": \"Returns heap object with given SnapshotObjectId if the object is alive, otherwise empty handle is returned.\"\n        },\n        {\n          \"name\": \"ClearObjectIds\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Clears internal map from SnapshotObjectId to heap object. The new objects will not be added into it unless a heap snapshot is taken or heap object tracking is kicked off.\"\n        },\n        {\n          \"name\": \"TakeHeapSnapshot\",\n          \"parameters\": [\n            \"const HeapSnapshotOptions& options\"\n          ],\n          \"return_type\": \"const HeapSnapshot*\",\n          \"logic\": \"Takes a heap snapshot.\"\n        },\n        {\n          \"name\": \"TakeHeapSnapshot\",\n          \"parameters\": [\n            \"ActivityControl* control\",\n            \"ObjectNameResolver* global_object_name_resolver\",\n            \"bool hide_internals\",\n            \"bool capture_numeric_value\"\n          ],\n          \"return_type\": \"const HeapSnapshot*\",\n          \"logic\": \"Takes a heap snapshot. See `HeapSnapshotOptions` for details on the parameters.\"\n        },\n        {\n          \"name\": \"GetDetachedJSWrapperObjects\",\n          \"parameters\": [],\n          \"return_type\": \"std::vector<v8::Local<v8::Value>>\",\n          \"logic\": \"Obtains list of Detached JS Wrapper Objects.\"\n        },\n        {\n          \"name\": \"StartTrackingHeapObjects\",\n          \"parameters\": [\n            \"bool track_allocations\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Starts tracking of heap objects population statistics.\"\n        },\n        {\n          \"name\": \"GetHeapStats\",\n          \"parameters\": [\n            \"OutputStream* stream\",\n            \"int64_t* timestamp_us\"\n          ],\n          \"return_type\": \"SnapshotObjectId\",\n          \"logic\": \"Adds a new time interval entry to the aggregated statistics array.\"\n        },\n        {\n          \"name\": \"StopTrackingHeapObjects\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops tracking of heap objects population statistics, cleans up all collected data.\"\n        },\n        {\n          \"name\": \"StartSamplingHeapProfiler\",\n          \"parameters\": [\n            \"uint64_t sample_interval\",\n            \"int stack_depth\",\n            \"SamplingFlags flags\"\n          ],\n          \"return_type\": \"bool\",\n          \"logic\": \"Starts gathering a sampling heap profile.\"\n        },\n        {\n          \"name\": \"StopSamplingHeapProfiler\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Stops the sampling heap profile and discards the current profile.\"\n        },\n        {\n          \"name\": \"GetAllocationProfile\",\n          \"parameters\": [],\n          \"return_type\": \"AllocationProfile*\",\n          \"logic\": \"Returns the sampled profile of allocations allocated.\"\n        },\n        {\n          \"name\": \"DeleteAllHeapSnapshots\",\n          \"parameters\": [],\n          \"return_type\": \"void\",\n          \"logic\": \"Deletes all snapshots taken.\"\n        },\n        {\n          \"name\": \"AddBuildEmbedderGraphCallback\",\n          \"parameters\": [\n            \"BuildEmbedderGraphCallback callback\",\n            \"void* data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Adds a callback to build the embedder graph.\"\n        },\n        {\n          \"name\": \"RemoveBuildEmbedderGraphCallback\",\n          \"parameters\": [\n            \"BuildEmbedderGraphCallback callback\",\n            \"void* data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Removes a callback to build the embedder graph.\"\n        },\n        {\n          \"name\": \"SetGetDetachednessCallback\",\n          \"parameters\": [\n            \"GetDetachednessCallback callback\",\n            \"void* data\"\n          ],\n          \"return_type\": \"void\",\n          \"logic\": \"Sets a callback to get the detachedness of an object.\"\n        },\n        {\n          \"name\": \"IsTakingSnapshot\",\n          \"parameters\": [],\n          \"return_type\": \"bool\",\n          \"logic\": \"Returns whether the heap profiler is currently taking a snapshot.\"\n        },\n        {\n          \"name\": \"CopyNameForHeapSnapshot\",\n          \"parameters\": [\n            \"const char* name\"\n          ],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Allocates a copy of the provided string within the heap snapshot generator and returns a pointer to the copy.\"\n        }\n      ],\n      \"nested_classes\": [\n        {\n          \"name\": \"ObjectNameResolver\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"GetName\",\n              \"parameters\": [\n                \"Local<Object> object\"\n              ],\n              \"return_type\": \"virtual const char*\",\n              \"logic\": \"Returns name to be used in the heap snapshot for given node. Returned string must stay alive until snapshot collection is completed.\"\n            },\n             {\n              \"name\": \"~ObjectNameResolver\",\n              \"parameters\": [],\n              \"return_type\": \"virtual\",\n              \"logic\": \"Virtual destructor.\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"CodeEvent\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"GetCodeStartAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Gets the code start address.\"\n        },\n        {\n          \"name\": \"GetCodeSize\",\n          \"parameters\": [],\n          \"return_type\": \"size_t\",\n          \"logic\": \"Gets the code size.\"\n        },\n        {\n          \"name\": \"GetFunctionName\",\n          \"parameters\": [],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Gets the function name.\"\n        },\n        {\n          \"name\": \"GetScriptName\",\n          \"parameters\": [],\n          \"return_type\": \"Local<String>\",\n          \"logic\": \"Gets the script name.\"\n        },\n        {\n          \"name\": \"GetScriptLine\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Gets the script line.\"\n        },\n        {\n          \"name\": \"GetScriptColumn\",\n          \"parameters\": [],\n          \"return_type\": \"int\",\n          \"logic\": \"Gets the script column.\"\n        },\n        {\n          \"name\": \"GetCodeType\",\n          \"parameters\": [],\n          \"return_type\": \"CodeEventType\",\n          \"logic\": \"Gets the code type.\"\n        },\n        {\n          \"name\": \"GetComment\",\n          \"parameters\": [],\n          \"return_type\": \"const char*\",\n          \"logic\": \"Gets the comment.\"\n        },\n        {\n          \"name\": \"GetCodeEventTypeName\",\n          \"parameters\": [\n            \"CodeEventType code_event_type\"\n          ],\n          \"return_type\": \"static const char*\",\n          \"logic\": \"Gets the code event type name.\"\n        },\n        {\n          \"name\": \"GetPreviousCodeStartAddress\",\n          \"parameters\": [],\n          \"return_type\": \"uintptr_t\",\n          \"logic\": \"Gets the previous code start address.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CodeEventHandler\",\n      \"properties\": [],\n      \"methods\": [\n        {\n          \"name\": \"CodeEventHandler\",\n          \"parameters\": [\n            \"Isolate* isolate\"\n          ],\n          \"return_type\": null,\n          \"logic\": \"Creates a new listener for the |isolate|.\""
}