{
  "file_path": "/home/kathirks_gc/v8_go/codebase/include/v8-isolate.h",
  "error": "JSON parsing error",
  "raw_response": "```json\n{\n    \"file_path\": \"/home/kathirks_gc/v8_go/codebase/include/v8-isolate.h\",\n    \"imports\": [\n        \"<stddef.h>\",\n        \"<stdint.h>\",\n        \"<memory>\",\n        \"<string>\",\n        \"<utility>\",\n        \"cppgc/common.h\",\n        \"v8-array-buffer.h\",\n        \"v8-callbacks.h\",\n        \"v8-data.h\",\n        \"v8-debug.h\",\n        \"v8-embedder-heap.h\",\n        \"v8-exception.h\",\n        \"v8-function-callback.h\",\n        \"v8-internal.h\",\n        \"v8-local-handle.h\",\n        \"v8-microtask.h\",\n        \"v8-persistent-handle.h\",\n        \"v8-primitive.h\",\n        \"v8-statistics.h\",\n        \"v8-unwinder.h\",\n        \"v8config.h\"\n    ],\n    \"classes\": [\n        {\n            \"name\": \"ResourceConstraints\",\n            \"properties\": [\n                \"code_range_size_\",\n                \"max_old_generation_size_\",\n                \"max_young_generation_size_\",\n                \"initial_old_generation_size_\",\n                \"initial_young_generation_size_\",\n                \"stack_limit_\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"ConfigureDefaultsFromHeapSize\",\n                    \"parameters\": [\n                        \"size_t initial_heap_size_in_bytes\",\n                        \"size_t maximum_heap_size_in_bytes\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Configures the constraints with reasonable default values based on the provided heap size limit.\"\n                },\n                {\n                    \"name\": \"ConfigureDefaults\",\n                    \"parameters\": [\n                        \"uint64_t physical_memory\",\n                        \"uint64_t virtual_memory_limit\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Configures the constraints with reasonable default values based on the capabilities of the current device.\"\n                },\n                {\n                    \"name\": \"stack_limit\",\n                    \"parameters\": [],\n                    \"return_type\": \"uint32_t*\",\n                    \"logic\": \"Returns the address beyond which the VM's stack may not grow.\"\n                },\n                {\n                    \"name\": \"set_stack_limit\",\n                    \"parameters\": [\n                        \"uint32_t* value\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the address beyond which the VM's stack may not grow.\"\n                },\n                {\n                    \"name\": \"code_range_size_in_bytes\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the amount of virtual memory reserved for generated code.\"\n                },\n                {\n                    \"name\": \"set_code_range_size_in_bytes\",\n                    \"parameters\": [\n                        \"size_t limit\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the amount of virtual memory reserved for generated code.\"\n                },\n                {\n                    \"name\": \"max_old_generation_size_in_bytes\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the maximum size of the old generation.\"\n                },\n                {\n                    \"name\": \"set_max_old_generation_size_in_bytes\",\n                    \"parameters\": [\n                        \"size_t limit\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the maximum size of the old generation.\"\n                },\n                {\n                    \"name\": \"max_young_generation_size_in_bytes\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the maximum size of the young generation.\"\n                },\n                {\n                    \"name\": \"set_max_young_generation_size_in_bytes\",\n                    \"parameters\": [\n                        \"size_t limit\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the maximum size of the young generation.\"\n                },\n                {\n                    \"name\": \"initial_old_generation_size_in_bytes\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the initial size of the old generation.\"\n                },\n                {\n                    \"name\": \"set_initial_old_generation_size_in_bytes\",\n                    \"parameters\": [\n                        \"size_t initial_size\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the initial size of the old generation.\"\n                },\n                {\n                    \"name\": \"initial_young_generation_size_in_bytes\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the initial size of the young generation.\"\n                },\n                {\n                    \"name\": \"set_initial_young_generation_size_in_bytes\",\n                    \"parameters\": [\n                        \"size_t initial_size\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the initial size of the young generation.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"IsolateGroup\",\n            \"properties\": [\n                \"isolate_group_\"\n            ],\n            \"methods\": [\n                {\n                    \"name\": \"GetDefault\",\n                    \"parameters\": [],\n                    \"return_type\": \"IsolateGroup\",\n                    \"logic\": \"Gets the default isolate group.\"\n                },\n                {\n                    \"name\": \"CanCreateNewGroups\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if new isolate groups can be created at run-time.\"\n                },\n                {\n                    \"name\": \"Create\",\n                    \"parameters\": [],\n                    \"return_type\": \"IsolateGroup\",\n                    \"logic\": \"Creates a new isolate group.\"\n                },\n                {\n                    \"name\": \"IsolateGroup\",\n                    \"parameters\": [\n                        \"IsolateGroup&& other\"\n                    ],\n                    \"return_type\": \"IsolateGroup&\",\n                    \"logic\": \"Move constructor.\"\n                },\n                {\n                    \"name\": \"operator=\",\n                    \"parameters\": [\n                        \"IsolateGroup&& other\"\n                    ],\n                    \"return_type\": \"IsolateGroup&\",\n                    \"logic\": \"Move assignment operator.\"\n                },\n                {\n                    \"name\": \"~IsolateGroup\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Destructor.\"\n                },\n                {\n                    \"name\": \"operator==\",\n                    \"parameters\": [\n                        \"const IsolateGroup& other\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Equality operator.\"\n                },\n                {\n                    \"name\": \"operator!=\",\n                    \"parameters\": [\n                        \"const IsolateGroup& other\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Inequality operator.\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Isolate\",\n            \"properties\": [],\n            \"methods\": [\n                {\n                    \"name\": \"Allocate\",\n                    \"parameters\": [],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Allocates a new isolate but does not initialize it.\"\n                },\n                {\n                    \"name\": \"Allocate\",\n                    \"parameters\": [\n                        \"const IsolateGroup& group\"\n                    ],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Allocates a new isolate in the given group but does not initialize it.\"\n                },\n                 {\n                    \"name\": \"GetGroup\",\n                    \"parameters\": [],\n                    \"return_type\": \"IsolateGroup\",\n                    \"logic\": \"Return the group for this isolate.\"\n                },\n                {\n                    \"name\": \"Initialize\",\n                    \"parameters\": [\n                        \"Isolate* isolate\",\n                        \"const CreateParams& params\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Initialize an Isolate previously allocated by Isolate::Allocate().\"\n                },\n                {\n                    \"name\": \"New\",\n                    \"parameters\": [\n                        \"const CreateParams& params\"\n                    ],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Creates a new isolate.\"\n                },\n                {\n                    \"name\": \"New\",\n                    \"parameters\": [\n                        \"const IsolateGroup& group\",\n                        \"const CreateParams& params\"\n                    ],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Creates a new isolate in the given group.\"\n                },\n                {\n                    \"name\": \"GetCurrent\",\n                    \"parameters\": [],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Returns the entered isolate for the current thread.\"\n                },\n                {\n                    \"name\": \"TryGetCurrent\",\n                    \"parameters\": [],\n                    \"return_type\": \"Isolate*\",\n                    \"logic\": \"Returns the entered isolate for the current thread without checks.\"\n                },\n                {\n                    \"name\": \"IsCurrent\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Return true if this isolate is currently active.\"\n                },\n                {\n                    \"name\": \"ClearKeptObjects\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Clears the set of objects held strongly by the heap. This set of objects are originally built when a WeakRef is created or successfully dereferenced.\"\n                },\n                {\n                    \"name\": \"SetAbortOnUncaughtExceptionCallback\",\n                    \"parameters\": [\n                        \"AbortOnUncaughtExceptionCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback called when an uncaught exception occurs.\"\n                },\n                {\n                    \"name\": \"SetHostImportModuleDynamicallyCallback\",\n                    \"parameters\": [\n                        \"HostImportModuleDynamicallyCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback for dynamic import() language feature.\"\n                },\n                {\n                    \"name\": \"SetHostImportModuleWithPhaseDynamicallyCallback\",\n                    \"parameters\": [\n                        \"HostImportModuleWithPhaseDynamicallyCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback for dynamic import() language feature with phase.\"\n                },\n                {\n                    \"name\": \"SetHostInitializeImportMetaObjectCallback\",\n                    \"parameters\": [\n                        \"HostInitializeImportMetaObjectCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback for the import.meta language feature.\"\n                },\n                {\n                    \"name\": \"SetHostCreateShadowRealmContextCallback\",\n                    \"parameters\": [\n                        \"HostCreateShadowRealmContextCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback for the ShadowRealm construction language feature to retrieve host created globals.\"\n                },\n                {\n                    \"name\": \"SetIsJSApiWrapperNativeErrorCallback\",\n                    \"parameters\": [\n                        \"IsJSApiWrapperNativeErrorCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Set the callback that checks whether a Error.isError should return true for a JSApiWrapper object.\"\n                },\n                {\n                    \"name\": \"SetPrepareStackTraceCallback\",\n                    \"parameters\": [\n                        \"PrepareStackTraceCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback called when the stack property of Error is accessed.\"\n                },\n                {\n                    \"name\": \"GetStackTraceLimit\",\n                    \"parameters\": [],\n                    \"return_type\": \"int\",\n                    \"logic\": \"Get the stackTraceLimit property of Error.\"\n                },\n                {\n                    \"name\": \"SetFilterETWSessionByURLCallback\",\n                    \"parameters\": [\n                        \"FilterETWSessionByURLCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback called when an ETW tracing session starts (deprecated).\"\n                },\n                {\n                    \"name\": \"SetFilterETWSessionByURL2Callback\",\n                    \"parameters\": [\n                        \"FilterETWSessionByURL2Callback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets the callback called when an ETW tracing session starts.\"\n                },\n                {\n                    \"name\": \"MemoryPressureNotification\",\n                    \"parameters\": [\n                        \"MemoryPressureLevel level\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Optional notification that the system is running low on memory.\"\n                },\n                {\n                    \"name\": \"SetBatterySaverMode\",\n                    \"parameters\": [\n                        \"bool battery_saver_mode_enabled\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Optional request from the embedder to tune v8 towards energy efficiency.\"\n                },\n                {\n                    \"name\": \"SetMemorySaverMode\",\n                    \"parameters\": [\n                        \"bool memory_saver_mode_enabled\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Optional request from the embedder to tune v8 towards memory efficiency.\"\n                },\n                {\n                    \"name\": \"ClearCachesForTesting\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Drop non-essential caches. Should only be called from testing code.\"\n                },\n                {\n                    \"name\": \"Enter\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets this isolate as the entered one for the current thread.\"\n                },\n                {\n                    \"name\": \"Exit\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Exits this isolate by restoring the previously entered one in the current thread.\"\n                },\n                {\n                    \"name\": \"Dispose\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Disposes the isolate.  The isolate must not be entered by any thread to be disposable.\"\n                },\n                {\n                    \"name\": \"DumpAndResetStats\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Dumps activated low-level V8 internal stats. This can be used instead of performing a full isolate disposal.\"\n                },\n                {\n                    \"name\": \"DiscardThreadSpecificMetadata\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Discards all V8 thread-specific data for the Isolate.\"\n                },\n                {\n                    \"name\": \"SetData\",\n                    \"parameters\": [\n                        \"uint32_t slot\",\n                        \"void* data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Associate embedder-specific data with the isolate.\"\n                },\n                {\n                    \"name\": \"GetData\",\n                    \"parameters\": [\n                        \"uint32_t slot\"\n                    ],\n                    \"return_type\": \"void*\",\n                    \"logic\": \"Retrieve embedder-specific data from the isolate.\"\n                },\n                {\n                    \"name\": \"GetNumberOfDataSlots\",\n                    \"parameters\": [],\n                    \"return_type\": \"uint32_t\",\n                    \"logic\": \"Returns the maximum number of available embedder data slots.\"\n                },\n                {\n                    \"name\": \"GetDataFromSnapshotOnce\",\n                    \"parameters\": [\n                        \"size_t index\"\n                    ],\n                    \"return_type\": \"MaybeLocal<T>\",\n                    \"logic\": \"Return data that was previously attached to the isolate snapshot via SnapshotCreator, and removes the reference to it.\"\n                },\n                {\n                    \"name\": \"GetContinuationPreservedEmbedderData\",\n                    \"parameters\": [],\n                    \"return_type\": \"Local<Value>\",\n                    \"logic\": \"Returns the value that was set or restored by SetContinuationPreservedEmbedderData(), if any.\"\n                },\n                {\n                    \"name\": \"SetContinuationPreservedEmbedderData\",\n                    \"parameters\": [\n                        \"Local<Value> data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets a value that will be stored on continuations and reset while the continuation runs.\"\n                },\n                {\n                    \"name\": \"GetHeapStatistics\",\n                    \"parameters\": [\n                        \"HeapStatistics* heap_statistics\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Get statistics about the heap memory usage.\"\n                },\n                {\n                    \"name\": \"NumberOfHeapSpaces\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the number of spaces in the heap.\"\n                },\n                {\n                    \"name\": \"GetHeapSpaceStatistics\",\n                    \"parameters\": [\n                        \"HeapSpaceStatistics* space_statistics\",\n                        \"size_t index\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Get the memory usage of a space in the heap.\"\n                },\n                {\n                    \"name\": \"NumberOfTrackedHeapObjectTypes\",\n                    \"parameters\": [],\n                    \"return_type\": \"size_t\",\n                    \"logic\": \"Returns the number of types of objects tracked in the heap at GC.\"\n                },\n                {\n                    \"name\": \"GetHeapObjectStatisticsAtLastGC\",\n                    \"parameters\": [\n                        \"HeapObjectStatistics* object_statistics\",\n                        \"size_t type_index\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Get statistics about objects in the heap.\"\n                },\n                {\n                    \"name\": \"GetHeapCodeAndMetadataStatistics\",\n                    \"parameters\": [\n                        \"HeapCodeStatistics* object_statistics\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Get statistics about code and its metadata in the heap.\"\n                },\n                {\n                    \"name\": \"MeasureMemory\",\n                    \"parameters\": [\n                        \"std::unique_ptr<MeasureMemoryDelegate> delegate\",\n                        \"MeasureMemoryExecution execution\"\n                    ],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Enqueues a memory measurement request and invokes the delegate with the results.\"\n                },\n                {\n                    \"name\": \"GetStackSample\",\n                    \"parameters\": [\n                        \"const RegisterState& state\",\n                        \"void** frames\",\n                        \"size_t frames_limit\",\n                        \"SampleInfo* sample_info\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Get a call stack sample from the isolate.\"\n                },\n                {\n                    \"name\": \"AdjustAmountOfExternalAllocatedMemory\",\n                    \"parameters\": [\n                        \"int64_t change_in_bytes\"\n                    ],\n                    \"return_type\": \"int64_t\",\n                    \"logic\": \"Adjusts the amount of registered external memory (deprecated).\"\n                },\n                {\n                    \"name\": \"GetHeapProfiler\",\n                    \"parameters\": [],\n                    \"return_type\": \"HeapProfiler*\",\n                    \"logic\": \"Returns heap profiler for this isolate.\"\n                },\n                {\n                    \"name\": \"SetIdle\",\n                    \"parameters\": [\n                        \"bool is_idle\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Tells the VM whether the embedder is idle or not.\"\n                },\n                {\n                    \"name\": \"GetArrayBufferAllocator\",\n                    \"parameters\": [],\n                    \"return_type\": \"ArrayBuffer::Allocator*\",\n                    \"logic\": \"Returns the ArrayBuffer::Allocator used in this isolate.\"\n                },\n                {\n                    \"name\": \"InContext\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if this isolate has a current context.\"\n                },\n                {\n                    \"name\": \"GetCurrentContext\",\n                    \"parameters\": [],\n                    \"return_type\": \"Local<Context>\",\n                    \"logic\": \"Returns the context of the currently running JavaScript.\"\n                },\n                {\n                    \"name\": \"GetEnteredOrMicrotaskContext\",\n                    \"parameters\": [],\n                    \"return_type\": \"Local<Context>\",\n                    \"logic\": \"Returns either the last context entered through V8's C++ API, or the context of the currently running microtask.\"\n                },\n                {\n                    \"name\": \"GetIncumbentContext\",\n                    \"parameters\": [],\n                    \"return_type\": \"Local<Context>\",\n                    \"logic\": \"Returns the Context that corresponds to the Incumbent realm in HTML spec.\"\n                },\n                {\n                    \"name\": \"GetCurrentHostDefinedOptions\",\n                    \"parameters\": [],\n                    \"return_type\": \"MaybeLocal<Data>\",\n                    \"logic\": \"Returns the host defined options set for currently running script or module, if available.\"\n                },\n                {\n                    \"name\": \"ThrowError\",\n                    \"parameters\": [\n                      \"const char (&message)[N]\"\n                    ],\n                    \"return_type\": \"Local<Value>\",\n                    \"logic\": \"Schedules a v8::Exception::Error with the given message.\"\n                },\n                {\n                  \"name\": \"ThrowError\",\n                  \"parameters\": [\n                    \"Local<String> message\"\n                  ],\n                  \"return_type\": \"Local<Value>\",\n                  \"logic\": \"Schedules a v8::Exception::Error with the given message.\"\n                },\n                {\n                    \"name\": \"ThrowException\",\n                    \"parameters\": [\n                        \"Local<Value> exception\"\n                    ],\n                    \"return_type\": \"Local<Value>\",\n                    \"logic\": \"Schedules an exception to be thrown when returning to JavaScript.\"\n                },\n                {\n                    \"name\": \"HasPendingException\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if an exception was thrown but not processed yet.\"\n                },\n                {\n                    \"name\": \"AddGCPrologueCallback\",\n                    \"parameters\": [\n                        \"GCCallback callback\",\n                        \"GCType gc_type_filter\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to receive a notification before a garbage collection.\"\n                },\n                {\n                    \"name\": \"AddGCPrologueCallback\",\n                    \"parameters\": [\n                        \"GCCallbackWithData callback\",\n                        \"void* data\",\n                        \"GCType gc_type_filter\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to receive a notification before a garbage collection with user data.\"\n                },\n                {\n                    \"name\": \"RemoveGCPrologueCallback\",\n                    \"parameters\": [\n                        \"GCCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"This function removes a callback which was added by `AddGCPrologueCallback`.\"\n                },\n                                {\n                    \"name\": \"RemoveGCPrologueCallback\",\n                    \"parameters\": [\n                        \"GCCallbackWithData callback\",\n                         \"void* data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"This function removes a callback which was added by `AddGCPrologueCallback` with data.\"\n                },\n                {\n                    \"name\": \"AddGCEpilogueCallback\",\n                    \"parameters\": [\n                        \"GCCallback callback\",\n                        \"GCType gc_type_filter\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to receive a notification after a garbage collection.\"\n                },\n                 {\n                    \"name\": \"AddGCEpilogueCallback\",\n                    \"parameters\": [\n                        \"GCCallbackWithData callback\",\n                         \"void* data\",\n                        \"GCType gc_type_filter\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to receive a notification after a garbage collection with user data.\"\n                },\n                {\n                    \"name\": \"RemoveGCEpilogueCallback\",\n                    \"parameters\": [\n                        \"GCCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"This function removes a callback which was added by `AddGCEpilogueCallback`.\"\n                },\n                {\n                    \"name\": \"RemoveGCEpilogueCallback\",\n                    \"parameters\": [\n                        \"GCCallbackWithData callback\",\n                        \"void* data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"This function removes a callback which was added by `AddGCEpilogueCallback` with data.\"\n                },\n                {\n                  \"name\": \"SetEmbedderRootsHandler\",\n                  \"parameters\": [\n                      \"EmbedderRootsHandler* handler\"\n                  ],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Sets an embedder roots handle that V8 should consider when performing non-unified heap garbage collections.\"\n                },\n                {\n                  \"name\": \"SetReleaseCppHeapCallbackForTesting\",\n                  \"parameters\": [\n                      \"ReleaseCppHeapCallback callback\"\n                  ],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Sets a callback on the isolate that gets called when the CppHeap gets detached. The callback can then either take ownership of the CppHeap, or the CppHeap gets deallocated.\"\n                },\n                {\n                  \"name\": \"GetCppHeap\",\n                  \"parameters\": [],\n                  \"return_type\": \"CppHeap*\",\n                  \"logic\": \"Returns the C++ heap managed by V8.\"\n                },\n                {\n                  \"name\": \"SetAtomicsWaitCallback\",\n                  \"parameters\": [\n                      \"AtomicsWaitCallback callback\",\n                      \"void* data\"\n                  ],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Set a new |AtomicsWaitCallback|. This overrides an earlier |AtomicsWaitCallback|, if there was any. If |callback| is nullptr, this unsets the callback. |data| will be passed to the callback as its last parameter.\"\n                },\n                {\n                  \"name\": \"SetGetExternallyAllocatedMemoryInBytesCallback\",\n                  \"parameters\": [\n                      \"GetExternallyAllocatedMemoryInBytesCallback callback\"\n                  ],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Set the callback that tells V8 how much memory is currently allocated externally of the V8 heap. Ideally this memory is somehow connected to V8 objects and may get freed-up when the corresponding V8 objects get collected by a V8 garbage collection.\"\n                },\n                {\n                    \"name\": \"TerminateExecution\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Forcefully terminate the current thread of JavaScript execution in the given isolate.\"\n                },\n                {\n                    \"name\": \"IsExecutionTerminating\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Is V8 terminating JavaScript execution.\"\n                },\n                {\n                    \"name\": \"CancelTerminateExecution\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Resume execution capability in the given isolate, whose execution was previously forcefully terminated using TerminateExecution().\"\n                },\n                {\n                    \"name\": \"RequestInterrupt\",\n                    \"parameters\": [\n                        \"InterruptCallback callback\",\n                        \"void* data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Request V8 to interrupt long running JavaScript code and invoke the given |callback|.\"\n                },\n                {\n                    \"name\": \"HasPendingBackgroundTasks\",\n                    \"parameters\": [],\n                    \"return_type\": \"bool\",\n                    \"logic\": \"Returns true if there is ongoing background work within V8 that will eventually post a foreground task, like asynchronous WebAssembly compilation.\"\n                },\n                {\n                    \"name\": \"RequestGarbageCollectionForTesting\",\n                    \"parameters\": [\n                        \"GarbageCollectionType type\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Request garbage collection in this Isolate. It is only valid to call this function if --expose_gc was specified.\"\n                },\n                {\n                    \"name\": \"RequestGarbageCollectionForTesting\",\n                    \"parameters\": [\n                      \"GarbageCollectionType type\",\n                      \"StackState stack_state\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Request garbage collection with a specific embedderstack state in this Isolate. It is only valid to call this function if --expose_gc was specified.\"\n                },\n                {\n                    \"name\": \"SetEventLogger\",\n                    \"parameters\": [\n                        \"LogEventCallback that\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Set the callback to invoke for logging event.\"\n                },\n                {\n                    \"name\": \"AddBeforeCallEnteredCallback\",\n                    \"parameters\": [\n                        \"BeforeCallEnteredCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Adds a callback to notify the host application right before a script is about to run.\"\n                },\n                {\n                    \"name\": \"RemoveBeforeCallEnteredCallback\",\n                    \"parameters\": [\n                        \"BeforeCallEnteredCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Removes callback that was installed by AddBeforeCallEnteredCallback.\"\n                },\n                {\n                    \"name\": \"AddCallCompletedCallback\",\n                    \"parameters\": [\n                        \"CallCompletedCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Adds a callback to notify the host application when a script finished running.\"\n                },\n                {\n                    \"name\": \"RemoveCallCompletedCallback\",\n                    \"parameters\": [\n                        \"CallCompletedCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Removes callback that was installed by AddCallCompletedCallback.\"\n                },\n                {\n                    \"name\": \"SetPromiseHook\",\n                    \"parameters\": [\n                        \"PromiseHook hook\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Set the PromiseHook callback for various promise lifecycle events.\"\n                },\n                {\n                    \"name\": \"SetPromiseRejectCallback\",\n                    \"parameters\": [\n                        \"PromiseRejectCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Set callback to notify about promise reject with no handler.\"\n                },\n                {\n                    \"name\": \"SetExceptionPropagationCallback\",\n                    \"parameters\": [\n                        \"ExceptionPropagationCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Set callback to notify about a new exception being thrown.\"\n                },\n                {\n                    \"name\": \"PerformMicrotaskCheckpoint\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Runs the default MicrotaskQueue until it gets empty.\"\n                },\n                {\n                    \"name\": \"EnqueueMicrotask\",\n                    \"parameters\": [\n                        \"Local<Function> microtask\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enqueues the callback to the default MicrotaskQueue.\"\n                },\n                {\n                  \"name\": \"EnqueueMicrotask\",\n                  \"parameters\": [\n                    \"MicrotaskCallback callback\",\n                    \"void* data\"\n                  ],\n                  \"return_type\": \"void\",\n                  \"logic\": \"Enqueues the callback to the default MicrotaskQueue.\"\n                },\n                {\n                    \"name\": \"SetMicrotasksPolicy\",\n                    \"parameters\": [\n                        \"MicrotasksPolicy policy\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Controls how Microtasks are invoked.\"\n                },\n                {\n                    \"name\": \"GetMicrotasksPolicy\",\n                    \"parameters\": [],\n                    \"return_type\": \"MicrotasksPolicy\",\n                    \"logic\": \"Returns the policy controlling how Microtasks are invoked.\"\n                },\n                {\n                    \"name\": \"AddMicrotasksCompletedCallback\",\n                    \"parameters\": [\n                        \"MicrotasksCompletedCallbackWithData callback\",\n                        \"void* data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Adds a callback to notify the host application after microtasks were run on the default MicrotaskQueue.\"\n                },\n                {\n                    \"name\": \"RemoveMicrotasksCompletedCallback\",\n                    \"parameters\": [\n                        \"MicrotasksCompletedCallbackWithData callback\",\n                        \"void* data\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Removes callback that was installed by AddMicrotasksCompletedCallback.\"\n                },\n                {\n                    \"name\": \"SetUseCounterCallback\",\n                    \"parameters\": [\n                        \"UseCounterCallback callback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Sets a callback for counting the number of times a feature of V8 is used.\"\n                },\n                {\n                    \"name\": \"SetCounterFunction\",\n                    \"parameters\": [\n                        \"CounterLookupCallback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to provide a mechanism for recording statistics counters.\"\n                },\n                {\n                    \"name\": \"SetCreateHistogramFunction\",\n                    \"parameters\": [\n                        \"CreateHistogramCallback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to provide a mechanism for recording histograms.\"\n                },\n                {\n                    \"name\": \"SetAddHistogramSampleFunction\",\n                    \"parameters\": [\n                        \"AddHistogramSampleCallback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to provide a mechanism for recording histograms.\"\n                },\n                {\n                    \"name\": \"SetMetricsRecorder\",\n                    \"parameters\": [\n                        \"const std::shared_ptr<metrics::Recorder>& metrics_recorder\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to provide a mechanism for recording event based metrics.\"\n                },\n                {\n                    \"name\": \"SetAddCrashKeyCallback\",\n                    \"parameters\": [\n                        \"AddCrashKeyCallback\"\n                    ],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Enables the host application to provide a mechanism for recording a predefined set of data as crash keys.\"\n                },\n                {\n                    \"name\": \"LowMemoryNotification\",\n                    \"parameters\": [],\n                    \"return_type\": \"void\",\n                    \"logic\": \"Optional notification that the system is running low on memory.\"\n                },\n                {\n                    \"name\": \"ContextDisposedNotification\",\n                    \"parameters\": [\n                        \"bool dependant_context\"\n                    ],\n                    \"return_type\": \"int\",\n                    \"logic\": \"Optional notification that a context has been disposed (deprecated).\"\n                },\n                {\n                    \"name\": \"ContextDisposedNotification\",\n                    \"parameters\": [\n                        \"ContextDependants"
}