// Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This Rust code is a conversion of the C++ header file
// `src/builtins/builtins-definitions.h` from the V8 JavaScript engine.

// The original C++ code defines macros for listing builtins, split into tiers,
// with different properties and compilation strategies.
// The Rust equivalent uses a combination of enums and structs to represent
// these builtins and their tiers, along with function definitions to represent
// the different compilation strategies.

// Note: The generated headers like bytecodes-builtins-list.h and
// torque-generated/builtin-definitions.h are assumed to have Rust equivalents
// generated by other means (e.g., a build script) and are included as modules.

mod bytecodes_builtins_list {
    // Placeholder for the contents of bytecodes-builtins-list.h
    // In a real implementation, this would be generated based on the
    // contents of that file.
}

mod builtin_definitions {
    // Placeholder for the contents of torque-generated/builtin-definitions.h
    // In a real implementation, this would be generated by Torque
    // and describe the signatures and descriptors of builtins.
}

//use std::convert::TryFrom;

//use crate::common::globals::*;
//
//#[cfg(V8_ENABLE_EXPERIMENTAL_TSA_BUILTINS)]
//macro_rules! if_tsa {
//    ($tsa_macro:ident, $csa_macro:ident, $($args:tt)*) => {
//        $tsa_macro!($($args)*)
//    };
//}
//
//#[cfg(not(V8_ENABLE_EXPERIMENTAL_TSA_BUILTINS))]
//macro_rules! if_tsa {
//    ($tsa_macro:ident, $csa_macro:ident, $($args:tt)*) => {
//        $csa_macro!($($args)*)
//    };
//}

//#[derive(Debug, Clone, Copy, PartialEq, Eq)]
//pub enum BuiltinDispatch {
//    CPP, // Builtin in C++. Entered via BUILTIN_EXIT frame.
//    TFJ, // Builtin in Turbofan, with JS linkage.
//    TSJ, // Builtin in Turboshaft, with JS linkage.
//    TFS, // Builtin in Turbofan, with CodeStub linkage.
//    TFC, // Builtin in Turbofan, with CodeStub linkage and custom descriptor.
//    TSC, // Builtin in Turboshaft, with CodeStub linkage and custom descriptor.
//    TFH, // Handlers in Turbofan, with CodeStub linkage.
//    BCH, // Bytecode Handlers, with bytecode dispatch linkage.
//    ASM, // Builtin in platform-dependent assembly.
//}

//#[derive(Debug, Clone, PartialEq, Eq)]
//pub enum OperandScale {
//   Byte,
//   Short,
//   Long,
//}

//#[derive(Debug, Clone, PartialEq, Eq)]
//pub enum BuiltinTier {
//    T0,
//    T1,
//}

//#[derive(Debug, Clone, PartialEq)]
//pub struct Builtin {
//    pub name: String,
//    pub dispatch: BuiltinDispatch,
//    pub tier: BuiltinTier,
//    pub args: Vec<String>,
//}

//const K_DONT_ADAPT_ARGUMENTS_SENTINEL: i32 = -1;

//#[macro_export]
//macro_rules! builtin_list_base_tier0 {
//    ($cpp:ident, $tfj:ident, $tfc:ident, $tfs:ident, $tfh:ident, $asm:ident) => {
//        $asm!(DeoptimizationEntry_Eager, DeoptimizationEntry);
//        $asm!(DeoptimizationEntry_Lazy, DeoptimizationEntry);
//        $tfc!(RecordWriteSaveFP, WriteBarrier);
//        $tfc!(RecordWriteIgnoreFP, WriteBarrier);
//        $tfc!(EphemeronKeyBarrierSaveFP, WriteBarrier);
//        $tfc!(EphemeronKeyBarrierIgnoreFP, WriteBarrier);
//        $cpp!(DummyBuiltin, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//    };
//}

//#[macro_export]
//macro_rules! builtin_list_base_tiering_turbofan {
//    ($tfc:ident) => {
//        $tfc!(StartTurbofanOptimizeJob, JSTrampoline);
//        $tfc!(OptimizeTurbofanEager, JSTrampoline);
//    };
//}

//#[macro_export]
//macro_rules! builtin_list_base_tiering_maglev {
//    ($tfc:ident) => {
//        $tfc!(StartMaglevOptimizeJob, JSTrampoline);
//        $tfc!(OptimizeMaglevEager, JSTrampoline);
//    };
//}

//#[macro_export]
//macro_rules! builtin_list_base_tiering {
//    ($tfc:ident) => {
//        crate::builtins::builtin_list_base_tiering_maglev!($tfc);
//        crate::builtins::builtin_list_base_tiering_turbofan!($tfc);
//        $tfc!(FunctionLogNextExecution, JSTrampoline);
//        $tfc!(MarkReoptimizeLazyDeoptimized, JSTrampoline);
//        $tfc!(MarkLazyDeoptimized, JSTrampoline);
//    };
//}

//#[cfg(not(V8_ENABLE_LEAPTIERING))]
//#[macro_export]
//macro_rules! builtin_list_base_tiering {
//    ($tfc:ident) => {
//        $tfc!(CompileLazyDeoptimizedCode, JSTrampoline);
//    };
//}

//#[macro_export]
//macro_rules! builtin_list_base_tier1 {
//    ($cpp:ident, $tsj:ident, $tfj:ident, $tsc:ident, $tfc:ident, $tfs:ident, $tfh:ident, $asm:ident) => {
//        $tfc!(IndirectPointerBarrierSaveFP, IndirectPointerWriteBarrier);
//        $tfc!(IndirectPointerBarrierIgnoreFP, IndirectPointerWriteBarrier);
//        $tfc!(AdaptorWithBuiltinExitFrame0, CppBuiltinAdaptor);
//        $tfc!(AdaptorWithBuiltinExitFrame1, CppBuiltinAdaptor);
//        $tfc!(AdaptorWithBuiltinExitFrame2, CppBuiltinAdaptor);
//        $tfc!(AdaptorWithBuiltinExitFrame3, CppBuiltinAdaptor);
//        $tfc!(AdaptorWithBuiltinExitFrame4, CppBuiltinAdaptor);
//        $tfc!(AdaptorWithBuiltinExitFrame5, CppBuiltinAdaptor);

//        if_tsa!($tfc, TSANRelaxedStore8IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore8SaveFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore16IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore16SaveFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore32IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore32SaveFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore64IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANRelaxedStore64SaveFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore8IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore8SaveFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore16IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore16SaveFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore32IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore32SaveFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore64IgnoreFP, TSANStore);
//        if_tsa!($tfc, TSANSeqCstStore64SaveFP, TSANStore);

//        if_tsa!($tfc, TSANRelaxedLoad32IgnoreFP, TSANLoad);
//        if_tsa!($tfc, TSANRelaxedLoad32SaveFP, TSANLoad);
//        if_tsa!($tfc, TSANRelaxedLoad64IgnoreFP, TSANLoad);
//        if_tsa!($tfc, TSANRelaxedLoad64SaveFP, TSANLoad);

//        $asm!(CallFunction_ReceiverIsNullOrUndefined, CallTrampoline);
//        $asm!(CallFunction_ReceiverIsNotNullOrUndefined, CallTrampoline);
//        $asm!(CallFunction_ReceiverIsAny, CallTrampoline);
//        $asm!(CallBoundFunction, CallTrampoline);
//        $tfc!(CallWrappedFunction, CallTrampoline);
//        $asm!(Call_ReceiverIsNullOrUndefined, CallTrampoline);
//        $asm!(Call_ReceiverIsNotNullOrUndefined, CallTrampoline);
//        $asm!(Call_ReceiverIsAny, CallTrampoline);
//        $tfc!(Call_ReceiverIsNullOrUndefined_Baseline_Compact,
//            CallTrampoline_Baseline_Compact);
//        $tfc!(Call_ReceiverIsNullOrUndefined_Baseline, CallTrampoline_Baseline);
//        $tfc!(Call_ReceiverIsNotNullOrUndefined_Baseline_Compact,
//            CallTrampoline_Baseline_Compact);
//        $tfc!(Call_ReceiverIsNotNullOrUndefined_Baseline, CallTrampoline_Baseline);
//        $tfc!(Call_ReceiverIsAny_Baseline_Compact, CallTrampoline_Baseline_Compact);
//        $tfc!(Call_ReceiverIsAny_Baseline, CallTrampoline_Baseline);
//        $tfc!(Call_ReceiverIsNullOrUndefined_WithFeedback,
//            CallTrampoline_WithFeedback);
//        $tfc!(Call_ReceiverIsNotNullOrUndefined_WithFeedback,
//            CallTrampoline_WithFeedback);
//        $tfc!(Call_ReceiverIsAny_WithFeedback, CallTrampoline_WithFeedback);

//        $tfc!(CallProxy, CallTrampoline);
//        $asm!(CallVarargs, CallVarargs);
//        $tfc!(CallWithSpread, CallWithSpread);
//        $tfc!(CallWithSpread_Baseline, CallWithSpread_Baseline);
//        $tfc!(CallWithSpread_WithFeedback, CallWithSpread_WithFeedback);
//        $tfc!(CallWithArrayLike, CallWithArrayLike);
//        $tfc!(CallWithArrayLike_WithFeedback, CallWithArrayLike_WithFeedback);
//        $asm!(CallForwardVarargs, CallForwardVarargs);
//        $asm!(CallFunctionForwardVarargs, CallForwardVarargs);
//        $tfc!(CallFunctionTemplate_Generic, CallFunctionTemplateGeneric);
//        $tfc!(CallFunctionTemplate_CheckAccess, CallFunctionTemplate);
//        $tfc!(CallFunctionTemplate_CheckCompatibleReceiver, CallFunctionTemplate);
//        $tfc!(CallFunctionTemplate_CheckAccessAndCompatibleReceiver,
//            CallFunctionTemplate);

//        $asm!(ConstructFunction, JSTrampoline);
//        $asm!(ConstructBoundFunction, JSTrampoline);
//        $asm!(ConstructedNonConstructable, JSTrampoline);
//        $asm!(Construct, ConstructStub);
//        $asm!(ConstructVarargs, ConstructVarargs);
//        $tfc!(ConstructWithSpread, ConstructWithSpread);
//        $tfc!(ConstructWithSpread_Baseline, ConstructWithSpread_Baseline);
//        $tfc!(ConstructWithSpread_WithFeedback, ConstructWithSpread_WithFeedback);
//        $tfc!(ConstructWithArrayLike, ConstructWithArrayLike);
//        $asm!(ConstructForwardVarargs, ConstructForwardVarargs);
//        $asm!(ConstructForwardAllArgs, ConstructForwardAllArgs);
//        $tfc!(ConstructForwardAllArgs_Baseline, ConstructForwardAllArgs_Baseline);
//        $tfc!(ConstructForwardAllArgs_WithFeedback,
//            ConstructForwardAllArgs_WithFeedback);
//        $asm!(ConstructFunctionForwardVarargs, ConstructForwardVarargs);
//        $tfc!(Construct_Baseline, Construct_Baseline);
//        $tfc!(Construct_WithFeedback, Construct_WithFeedback);
//        $asm!(JSConstructStubGeneric, ConstructStub);
//        $asm!(JSBuiltinsConstructStub, ConstructStub);
//        $tfc!(FastNewObject, FastNewObject);
//        $tfs!(FastNewClosure, NeedsContext::kYes, kSharedFunctionInfo, kFeedbackCell);
//        $tfc!(ConstructProxy, JSTrampoline);

//        $asm!(JSEntry, JSEntry);
//        $asm!(JSConstructEntry, JSEntry);
//        $asm!(JSRunMicrotasksEntry, RunMicrotasksEntry);
//        $asm!(JSEntryTrampoline, JSEntry);
//        $asm!(JSConstructEntryTrampoline, JSEntry);
//        $asm!(ResumeGeneratorTrampoline, ResumeGenerator);

//        if_tsa!($tsc, $tfc, StringFromCodePointAt, StringAtAsString);
//        $tfc!(StringEqual, StringEqual);
//        $tfc!(StringGreaterThan, CompareNoContext);
//        $tfc!(StringGreaterThanOrEqual, CompareNoContext);
//        $tfc!(StringLessThan, CompareNoContext);
//        $tfc!(StringLessThanOrEqual, CompareNoContext);
//        $tfc!(StringCompare, CompareNoContext);
//        $tfc!(StringSubstring, StringSubstring);

//        $tfs!(OrderedHashTableHealIndex, NeedsContext::kYes, kTable, kIndex);

//        $asm!(InterpreterEntryTrampoline, JSTrampoline);
//        $asm!(InterpreterEntryTrampolineForProfiling, JSTrampoline);
//        $asm!(InterpreterForwardAllArgsThenConstruct, ConstructForwardAllArgs);
//        $asm!(InterpreterPushArgsThenCall, InterpreterPushArgsThenCall);
//        $asm!(InterpreterPushUndefinedAndArgsThenCall, InterpreterPushArgsThenCall);
//        $asm!(InterpreterPushArgsThenCallWithFinalSpread, InterpreterPushArgsThenCall);
//        $asm!(InterpreterPushArgsThenConstruct, InterpreterPushArgsThenConstruct);
//        $asm!(InterpreterPushArgsThenFastConstructFunction,
//            InterpreterPushArgsThenConstruct);
//        $asm!(InterpreterPushArgsThenConstructArrayFunction,
//            InterpreterPushArgsThenConstruct);
//        $asm!(InterpreterPushArgsThenConstructWithFinalSpread,
//            InterpreterPushArgsThenConstruct);
//        $asm!(InterpreterEnterAtBytecode, Void);
//        $asm!(InterpreterEnterAtNextBytecode, Void);
//        $asm!(InterpreterOnStackReplacement, OnStackReplacement);

//        $asm!(BaselineOutOfLinePrologue, BaselineOutOfLinePrologue);
//        $asm!(BaselineOutOfLinePrologueDeopt, Void);
//        $asm!(BaselineOnStackReplacement, OnStackReplacement);
//        $asm!(BaselineLeaveFrame, BaselineLeaveFrame);
//        $asm!(InterpreterOnStackReplacement_ToBaseline, Void);

//        $asm!(MaglevFunctionEntryStackCheck_WithoutNewTarget, Void);
//        $asm!(MaglevFunctionEntryStackCheck_WithNewTarget, Void);
//        $asm!(MaglevOptimizeCodeOrTailCallOptimizedCodeSlot,
//            MaglevOptimizeCodeOrTailCallOptimizedCodeSlot);

//        $tfc!(CompileLazy, JSTrampoline);
//        $tfc!(InstantiateAsmJs, JSTrampoline);
//        $asm!(NotifyDeoptimized, Void);

//        builtin_list_base_tiering!($tfc);

//        $asm!(ContinueToCodeStubBuiltin, ContinueToBuiltin);
//        $asm!(ContinueToCodeStubBuiltinWithResult, ContinueToBuiltin);
//        $asm!(ContinueToJavaScriptBuiltin, ContinueToBuiltin);
//        $asm!(ContinueToJavaScriptBuiltinWithResult, ContinueToBuiltin);

//        $asm!(CallApiCallbackGeneric, CallApiCallbackGeneric);
//        $asm!(CallApiCallbackOptimizedNoProfiling, CallApiCallbackOptimized);
//        $asm!(CallApiCallbackOptimized, CallApiCallbackOptimized);
//        $asm!(CallApiGetter, ApiGetter);
//        $tfc!(HandleApiCallOrConstruct, JSTrampoline);
//        $cpp!(HandleApiConstruct, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(HandleApiCallAsFunctionDelegate, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(HandleApiCallAsConstructorDelegate, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);

//        $tfc!(AllocateInYoungGeneration, Allocate);
//        $tfc!(AllocateInOldGeneration, Allocate);
//        //IF_WASM($tfc, WasmAllocateInYoungGeneration, Allocate);
//        //IF_WASM($tfc, WasmAllocateInOldGeneration, Allocate);

//        $tfc!(NewHeapNumber, NewHeapNumber);

//        $tfs!(CopyFastSmiOrObjectElements, NeedsContext::kNo, kObject);
//        $tfc!(GrowFastDoubleElements, GrowArrayElements);
//        $tfc!(GrowFastSmiOrObjectElements, GrowArrayElements);

//        $tfj!(DebugBreakTrampoline, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $asm!(RestartFrameTrampoline, RestartFrameTrampoline);

//        $tfc!(ToNumber, TypeConversion);
//        $tfc!(ToBigInt, TypeConversion);
//        $tfc!(ToNumber_Baseline, TypeConversion_Baseline);
//        $tfc!(ToNumeric_Baseline, TypeConversion_Baseline);
//        $tfc!(PlainPrimitiveToNumber, TypeConversionNoContext);
//        $tfc!(ToNumberConvertBigInt, TypeConversion);
//        $tfc!(ToBigIntConvertNumber, TypeConversion);
//        $tfc!(Typeof, Typeof);
//        $tfc!(Typeof_Baseline, UnaryOp_Baseline);
//        $tfc!(BigIntToI64, BigIntToI64);
//        $tfc!(BigIntToI32Pair, BigIntToI32Pair);
//        $tfc!(I64ToBigInt, I64ToBigInt);
//        $tfc!(I32PairToBigInt, I32PairToBigInt);

//        $tfc!(ToBooleanLazyDeoptContinuation, SingleParameterOnStack);
//        $tfc!(MathCeilContinuation, SingleParameterOnStack);
//        $tfc!(MathFloorContinuation, SingleParameterOnStack);
//        $tfc!(MathRoundContinuation, SingleParameterOnStack);

//        $tfh!(KeyedLoadIC_PolymorphicName, LoadWithVector);
//        $tfh!(KeyedStoreIC_Megamorphic, StoreWithVector);
//        $tfh!(DefineKeyedOwnIC_Megamorphic, StoreNoFeedback);
//        $tfh!(LoadGlobalIC_NoFeedback, LoadGlobalNoFeedback);
//        $tfh!(LoadIC_FunctionPrototype, LoadWithVector);
//        $tfh!(LoadIC_StringLength, LoadWithVector);
//        $tfh!(LoadIC_StringWrapperLength, LoadWithVector);
//        $tfh!(LoadIC_NoFeedback, LoadNoFeedback);
//        $tfh!(StoreGlobalIC_Slow, StoreWithVector);
//        $tfh!(StoreIC_NoFeedback, StoreNoFeedback);
//        $tfh!(DefineNamedOwnIC_NoFeedback, StoreNoFeedback);
//        $tfh!(KeyedLoadIC_SloppyArguments, LoadWithVector);
//        $tfh!(LoadIndexedInterceptorIC, LoadWithVector);
//        $tfh!(KeyedStoreIC_SloppyArguments_InBounds, StoreWithVector);
//        $tfh!(KeyedStoreIC_SloppyArguments_NoTransitionGrowAndHandleCOW,
//            StoreWithVector);
//        $tfh!(KeyedStoreIC_SloppyArguments_NoTransitionIgnoreTypedArrayOOB,
//            StoreWithVector);
//        $tfh!(KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW, StoreWithVector);
//        $tfh!(StoreFastElementIC_InBounds, StoreWithVector);
//        $tfh!(StoreFastElementIC_NoTransitionGrowAndHandleCOW, StoreWithVector);
//        $tfh!(StoreFastElementIC_NoTransitionIgnoreTypedArrayOOB, StoreWithVector);
//        $tfh!(StoreFastElementIC_NoTransitionHandleCOW, StoreWithVector);
//        $tfh!(ElementsTransitionAndStore_InBounds, StoreTransition);
//        $tfh!(ElementsTransitionAndStore_NoTransitionGrowAndHandleCOW,
//            StoreTransition);
//        $tfh!(ElementsTransitionAndStore_NoTransitionIgnoreTypedArrayOOB,
//            StoreTransition);
//        $tfh!(ElementsTransitionAndStore_NoTransitionHandleCOW, StoreTransition);
//        $tfh!(KeyedHasIC_PolymorphicName, LoadWithVector);
//        $tfh!(KeyedHasIC_SloppyArguments, LoadWithVector);
//        $tfh!(HasIndexedInterceptorIC, LoadWithVector);

//        $tfs!(EnqueueMicrotask, NeedsContext::kYes, kMicrotask);
//        $asm!(RunMicrotasksTrampoline, RunMicrotasksEntry);
//        $tfc!(RunMicrotasks, RunMicrotasks);

//        $tfs!(HasProperty, NeedsContext::kYes, kObject, kKey);
//        $tfs!(DeleteProperty, NeedsContext::kYes, kObject, kKey, kLanguageMode);
//        $tfs!(CopyDataProperties, NeedsContext::kYes, kTarget, kSource);
//        $tfs!(SetDataProperties, NeedsContext::kYes, kTarget, kSource);
//        $tfc!(CopyDataPropertiesWithExcludedPropertiesOnStack,
//            CopyDataPropertiesWithExcludedPropertiesOnStack);
//        $tfc!(CopyDataPropertiesWithExcludedProperties,
//            CopyDataPropertiesWithExcludedProperties);

//        $tfc!(Abort, Abort);
//        $tfc!(AbortCSADcheck, Abort);

//        $cpp!(EmptyFunction, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(EmptyFunction1, JSParameterCount(1));
//        $cpp!(Illegal, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(IllegalInvocationThrower, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(StrictPoisonPillThrower, JSParameterCount(0));
//        $cpp!(UnsupportedThrower, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $tfj!(ReturnReceiver, kJSArgcReceiverSlots, kReceiver);

//        $cpp!(AbstractModuleSourceToStringTag, JSParameterCount(0));

//        $tfc!(ArrayConstructor, JSTrampoline);
//        $tfc!(ArrayConstructorImpl, ArrayConstructor);
//        $tfc!(ArrayNoArgumentConstructor_PackedSmi_DontOverride,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_HoleySmi_DontOverride,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_Packed_DisableAllocationSites,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_Holey_DisableAllocationSites,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites,
//            ArrayNoArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_PackedSmi_DontOverride,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_HoleySmi_DontOverride,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_Packed_DisableAllocationSites,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_Holey_DisableAllocationSites,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites,
//            ArraySingleArgumentConstructor);
//        $tfc!(ArrayNArgumentsConstructor, ArrayNArgumentsConstructor);
//        $cpp!(ArrayConcat, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayPrototypeFill, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $tfs!(ArrayIncludesSmi, NeedsContext::kYes, kElements, kSearchElement,
//            kLength, kFromIndex);
//        $tfs!(ArrayIncludesSmiOrObject, NeedsContext::kYes, kElements, kSearchElement,
//            kLength, kFromIndex);
//        $tfs!(ArrayIncludesPackedDoubles, NeedsContext::kYes, kElements,
//            kSearchElement, kLength, kFromIndex);
//        $tfs!(ArrayIncludesHoleyDoubles, NeedsContext::kYes, kElements,
//            kSearchElement, kLength, kFromIndex);
//        $tfj!(ArrayIncludes, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $tfs!(ArrayIndexOfSmi, NeedsContext::kYes, kElements, kSearchElement, kLength,
//            kFromIndex);
//        $tfs!(ArrayIndexOfSmiOrObject, NeedsContext::kYes, kElements, kSearchElement,
//            kLength, kFromIndex);
//        $tfs!(ArrayIndexOfPackedDoubles, NeedsContext::kYes, kElements,
//            kSearchElement, kLength, kFromIndex);
//        $tfs!(ArrayIndexOfHoleyDoubles, NeedsContext::kYes, kElements, kSearchElement,
//            kLength, kFromIndex);
//        $tfj!(ArrayIndexOf, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayPop, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $tfj!(ArrayPrototypePop, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayPush, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $tfj!(ArrayPrototypePush, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayShift, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayUnshift, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $tfs!(CloneFastJSArray, NeedsContext::kYes, kSource);
//        $tfs!(CloneFastJSArrayFillingHoles, NeedsContext::kYes, kSource);
//        $tfs!(ExtractFastJSArray, NeedsContext::kYes, kSource, kBegin, kCount);
//        $tfs!(CreateArrayFromSlowBoilerplate, NeedsContext::kYes, kFeedbackVector,
//            kSlot, kBoilerplateDescriptor, kFlags);
//        $tfs!(CreateObjectFromSlowBoilerplate, NeedsContext::kYes, kFeedbackVector,
//            kSlot, kBoilerplateDescriptor, kFlags);
//        $tfc!(CreateArrayFromSlowBoilerplateHelper, CreateFromSlowBoilerplateHelper);
//        $tfc!(CreateObjectFromSlowBoilerplateHelper, CreateFromSlowBoilerplateHelper);
//        $tfj!(ArrayPrototypeEntries, kJSArgcReceiverSlots, kReceiver);
//        $tfj!(ArrayPrototypeKeys, kJSArgcReceiverSlots, kReceiver);
//        $tfj!(ArrayPrototypeValues, kJSArgcReceiverSlots, kReceiver);
//        $tfj!(ArrayIteratorPrototypeNext, kJSArgcReceiverSlots, kReceiver);

//        $cpp!(ArrayBufferConstructor, JSParameterCount(1));
//        $cpp!(ArrayBufferConstructor_DoNotInitialize, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayBufferPrototypeSlice, JSParameterCount(2));
//        $cpp!(ArrayBufferPrototypeResize, JSParameterCount(1));
//        $cpp!(ArrayBufferPrototypeTransfer, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ArrayBufferPrototypeTransferToFixedLength, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);

//        $tfs!(AsyncFunctionEnter, NeedsContext::kYes, kClosure, kReceiver);
//        $tfs!(AsyncFunctionReject, NeedsContext::kYes, kAsyncFunctionObject, kReason);
//        $tfs!(AsyncFunctionResolve, NeedsContext::kYes, kAsyncFunctionObject, kValue);
//        $tfc!(AsyncFunctionLazyDeoptContinuation, AsyncFunctionStackParameter);
//        $tfs!(AsyncFunctionAwait, NeedsContext::kYes, kAsyncFunctionObject, kValue);
//        $tfj!(AsyncFunctionAwaitRejectClosure, kJSArgcReceiverSlots + 1, kReceiver,
//            kSentError);
//        $tfj!(AsyncFunctionAwaitResolveClosure, kJSArgcReceiverSlots + 1, kReceiver,
//            kSentValue);

//        $cpp!(BigIntConstructor, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(BigIntAsUintN, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(BigIntAsIntN, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(BigIntPrototypeToLocaleString, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(BigIntPrototypeToString, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(BigIntPrototypeValueOf, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);

//        $cpp!(CallSitePrototypeGetColumnNumber, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetEnclosingColumnNumber, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetEnclosingLineNumber, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetEvalOrigin, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetFileName, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetFunction, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetFunctionName, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetLineNumber, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetMethodName, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetPosition, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetPromiseIndex, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetScriptHash, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetScriptNameOrSourceURL, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetThis, JSParameterCount(0));
//        $cpp!(CallSitePrototypeGetTypeName, JSParameterCount(0));
//        $cpp!(CallSitePrototypeIsAsync, JSParameterCount(0));
//        $cpp!(CallSitePrototypeIsConstructor, JSParameterCount(0));
//        $cpp!(CallSitePrototypeIsEval, JSParameterCount(0));
//        $cpp!(CallSitePrototypeIsNative, JSParameterCount(0));
//        $cpp!(CallSitePrototypeIsPromiseAll, JSParameterCount(0));
//        $cpp!(CallSitePrototypeIsToplevel, JSParameterCount(0));
//        $cpp!(CallSitePrototypeToString, JSParameterCount(0));

//        $cpp!(ConsoleDebug, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleError, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleInfo, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleLog, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleWarn, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleDir, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleDirXml, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleTable, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleTrace, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleGroup, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleGroupCollapsed, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleGroupEnd, crate::builtins::K_DONT_ADAPT_ARGUMENTS_SENTINEL);
//        $cpp!(ConsoleClear, crate::builtins::K