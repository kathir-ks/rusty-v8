// SSE/SSE2 instructions whose AVX version has two operands.
macro_rules! define_sse_unop_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal);*) => {
        $(
            pub const $name: (u8, u8) = ($byte1, $byte2);
        )*
    };
}

// SSE2 instructions
macro_rules! define_sse2_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal);*) => {
        $(
            pub const $name: (u8, u8, u8) = ($byte1, $byte2, $byte3);
        )*
    };
}

// SSE2 instructions dealing with scalar double-precision values.
macro_rules! define_sse2_sd_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal);*) => {
        $(
            pub const $name: (u8, u8, u8) = ($byte1, $byte2, $byte3);
        )*
    };
}

// SSSE3 instructions
macro_rules! define_ssse3_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal, $byte4:literal);*) => {
        $(
            pub const $name: (u8, u8, u8, u8) = ($byte1, $byte2, $byte3, $byte4);
        )*
    };
}

// SSSE3 instructions whose AVX version has two operands.
macro_rules! define_ssse3_unop_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal, $byte4:literal);*) => {
        $(
            pub const $name: (u8, u8, u8, u8) = ($byte1, $byte2, $byte3, $byte4);
        )*
    };
}

// SSE4 instructions
macro_rules! define_sse4_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal, $byte4:literal);*) => {
        $(
            pub const $name: (u8, u8, u8, u8) = ($byte1, $byte2, $byte3, $byte4);
        )*
    };
}

// SSE4 instructions with RM
macro_rules! define_sse4_rm_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal, $byte4:literal);*) => {
        $(
            pub const $name: (u8, u8, u8, u8) = ($byte1, $byte2, $byte3, $byte4);
        )*
    };
}

// AVX2 broadcast instructions
macro_rules! define_avx2_broadcast_instructions {
    ($($name:ident, $byte1:literal, $byte2:literal, $byte3:literal, $byte4:literal);*) => {
        $(
            pub const $name: (u8, u8, u8, u8) = ($byte1, $byte2, $byte3, $byte4);
        )*
    };
}

pub mod sse_instr {

    define_sse_unop_instructions! {
        sqrtps, 0x0F, 0x51;
        rsqrtps, 0x0F, 0x52;
        rcpps, 0x0F, 0x53;
        cvtps2pd, 0x0F, 0x5A;
        cvtdq2ps, 0x0F, 0x5B
    }

    define_sse2_instructions! {
        packsswb, 0x66, 0x0F, 0x63;
        packssdw, 0x66, 0x0F, 0x6B;
        packuswb, 0x66, 0x0F, 0x67;
        pmaddwd, 0x66, 0x0F, 0xF5;
        paddb, 0x66, 0x0F, 0xFC;
        paddw, 0x66, 0x0F, 0xFD;
        paddd, 0x66, 0x0F, 0xFE;
        paddq, 0x66, 0x0F, 0xD4;
        paddsb, 0x66, 0x0F, 0xEC;
        paddsw, 0x66, 0x0F, 0xED;
        paddusb, 0x66, 0x0F, 0xDC;
        paddusw, 0x66, 0x0F, 0xDD;
        pand, 0x66, 0x0F, 0xDB;
        pandn, 0x66, 0x0F, 0xDF;
        pcmpeqb, 0x66, 0x0F, 0x74;
        pcmpeqw, 0x66, 0x0F, 0x75;
        pcmpeqd, 0x66, 0x0F, 0x76;
        pcmpgtb, 0x66, 0x0F, 0x64;
        pcmpgtw, 0x66, 0x0F, 0x65;
        pcmpgtd, 0x66, 0x0F, 0x66;
        pmaxsw, 0x66, 0x0F, 0xEE;
        pmaxub, 0x66, 0x0F, 0xDE;
        pminsw, 0x66, 0x0F, 0xEA;
        pminub, 0x66, 0x0F, 0xDA;
        pmullw, 0x66, 0x0F, 0xD5;
        por, 0x66, 0x0F, 0xEB;
        psllw, 0x66, 0x0F, 0xF1;
        pslld, 0x66, 0x0F, 0xF2;
        psllq, 0x66, 0x0F, 0xF3;
        pmuludq, 0x66, 0x0F, 0xF4;
        pavgb, 0x66, 0x0F, 0xE0;
        psraw, 0x66, 0x0F, 0xE1;
        psrad, 0x66, 0x0F, 0xE2;
        pavgw, 0x66, 0x0F, 0xE3;
        pmulhuw, 0x66, 0x0F, 0xE4;
        pmulhw, 0x66, 0x0F, 0xE5;
        psrlw, 0x66, 0x0F, 0xD1;
        psrld, 0x66, 0x0F, 0xD2;
        psrlq, 0x66, 0x0F, 0xD3;
        psubb, 0x66, 0x0F, 0xF8;
        psubw, 0x66, 0x0F, 0xF9;
        psubd, 0x66, 0x0F, 0xFA;
        psubq, 0x66, 0x0F, 0xFB;
        psubsb, 0x66, 0x0F, 0xE8;
        psubsw, 0x66, 0x0F, 0xE9;
        psubusb, 0x66, 0x0F, 0xD8;
        psubusw, 0x66, 0x0F, 0xD9;
        punpcklbw, 0x66, 0x0F, 0x60;
        punpcklwd, 0x66, 0x0F, 0x61;
        punpckldq, 0x66, 0x0F, 0x62;
        punpcklqdq, 0x66, 0x0F, 0x6C;
        punpckhbw, 0x66, 0x0F, 0x68;
        punpckhwd, 0x66, 0x0F, 0x69;
        punpckhdq, 0x66, 0x0F, 0x6A;
        punpckhqdq, 0x66, 0x0F, 0x6D;
        pxor, 0x66, 0x0F, 0xEF
    }

    define_sse2_sd_instructions! {
        sqrtsd, 0xF2, 0x0F, 0x51;
        addsd, 0xF2, 0x0F, 0x58;
        mulsd, 0xF2, 0x0F, 0x59;
        cvtsd2ss, 0xF2, 0x0F, 0x5A;
        subsd, 0xF2, 0x0F, 0x5C;
        minsd, 0xF2, 0x0F, 0x5D;
        divsd, 0xF2, 0x0F, 0x5E;
        maxsd, 0xF2, 0x0F, 0x5F
    }

    define_ssse3_instructions! {
        pshufb, 0x66, 0x0F, 0x38, 0x00;
        phaddw, 0x66, 0x0F, 0x38, 0x01;
        phaddd, 0x66, 0x0F, 0x38, 0x02;
        pmaddubsw, 0x66, 0x0F, 0x38, 0x04;
        psignb, 0x66, 0x0F, 0x38, 0x08;
        psignw, 0x66, 0x0F, 0x38, 0x09;
        psignd, 0x66, 0x0F, 0x38, 0x0A;
        pmulhrsw, 0x66, 0x0F, 0x38, 0x0B
    }

    define_ssse3_unop_instructions! {
        pabsb, 0x66, 0x0F, 0x38, 0x1C;
        pabsw, 0x66, 0x0F, 0x38, 0x1D;
        pabsd, 0x66, 0x0F, 0x38, 0x1E
    }

    define_sse4_instructions! {
        pmuldq, 0x66, 0x0F, 0x38, 0x28;
        pcmpeqq, 0x66, 0x0F, 0x38, 0x29;
        packusdw, 0x66, 0x0F, 0x38, 0x2B;
        pminsb, 0x66, 0x0F, 0x38, 0x38;
        pminsd, 0x66, 0x0F, 0x38, 0x39;
        pminuw, 0x66, 0x0F, 0x38, 0x3A;
        pminud, 0x66, 0x0F, 0x38, 0x3B;
        pmaxsb, 0x66, 0x0F, 0x38, 0x3C;
        pmaxsd, 0x66, 0x0F, 0x38, 0x3D;
        pmaxuw, 0x66, 0x0F, 0x38, 0x3E;
        pmaxud, 0x66, 0x0F, 0x38, 0x3F;
        pmulld, 0x66, 0x0F, 0x38, 0x40
    }

    define_sse4_rm_instructions! {
        pmovsxbw, 0x66, 0x0F, 0x38, 0x20;
        pmovsxwd, 0x66, 0x0F, 0x38, 0x23;
        pmovsxdq, 0x66, 0x0F, 0x38, 0x25;
        pmovzxbw, 0x66, 0x0F, 0x38, 0x30;
        pmovzxbd, 0x66, 0x0F, 0x38, 0x31;
        pmovzxwd, 0x66, 0x0F, 0x38, 0x33;
        pmovzxdq, 0x66, 0x0F, 0x38, 0x35;
        ptest, 0x66, 0x0F, 0x38, 0x17
    }

    define_avx2_broadcast_instructions! {
        vpbroadcastd, 0x66, 0x0F, 0x38, 0x58;
        vpbroadcastb, 0x66, 0x0F, 0x38, 0x78;
        vpbroadcastw, 0x66, 0x0F, 0x38, 0x79
    }
}