// Copyright 2006-2008 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// src/flags/flags.h

use std::{
    marker::PhantomData,
    mem::align_of,
    sync::atomic::{AtomicBool, AtomicU32, Ordering},
};

#[cfg(feature = "v8_enable_webassembly")]
mod wasm {
    // Dummy module to represent src/wasm/wasm-limits.h
    pub const kMaxWasmMaximumInitialMemoryPages: usize = 16384;
    pub const kMaxWasmMaximumMemoryPages: usize = 32768;
}

pub mod internal {
    use super::*;
    use std::{
        any::Any,
        ffi::{CStr, CString},
        os::raw::c_char,
        sync::Mutex,
    };

    /// The value of a single flag (this is the type of all v8_flags.* fields).
    pub struct FlagValue<T> {
        value: T,
        _phantom: PhantomData<T>,
    }

    impl<T> FlagValue<T> {
        pub const fn new(value: T) -> Self {
            FlagValue {
                value,
                _phantom: PhantomData,
            }
        }

        pub fn value(&self) -> &T {
            &self.value
        }

        pub fn value_mut(&mut self) -> &mut T {
            &mut self.value
        }
    }

    impl<T> std::ops::Deref for FlagValue<T> {
        type Target = T;

        fn deref(&self) -> &Self::Target {
            &self.value
        }
    }

    impl<T> std::ops::DerefMut for FlagValue<T> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.value
        }
    }

    // Arithmetic types
    impl FlagValue<bool> {
        pub fn set(&mut self, new_value: bool) {
            if new_value != self.value {
                FlagList::reset_flag_hash();
                self.value = new_value;
            }
        }
    }
    impl FlagValue<i32> {
        pub fn set(&mut self, new_value: i32) {
            if new_value != self.value {
                FlagList::reset_flag_hash();
                self.value = new_value;
            }
        }
    }
    impl FlagValue<usize> {
        pub fn set(&mut self, new_value: usize) {
            if new_value != self.value {
                FlagList::reset_flag_hash();
                self.value = new_value;
            }
        }
    }
    impl FlagValue<f64> {
        pub fn set(&mut self, new_value: f64) {
            if new_value != self.value {
                FlagList::reset_flag_hash();
                self.value = new_value;
            }
        }
    }
    // std::optional<bool>
    impl FlagValue<Option<bool>> {
        pub fn set(&mut self, new_value: Option<bool>) {
            if new_value != self.value {
                FlagList::reset_flag_hash();
                self.value = new_value;
            }
        }
    }
    // const char*
    impl FlagValue<String> {
        pub fn set(&mut self, new_value: String) {
            if new_value != self.value {
                FlagList::reset_flag_hash();
                self.value = new_value;
            }
        }
    }

    #[repr(align(4096))] // kMinimumOSPageSize = 4096
    pub struct FlagValues {
        // Include flag declarations here.  The `FLAG_MODE_DECLARE` macro is replaced
        // by the contents of the `flag-definitions.h` file, with `FLAG_MODE_DECLARE`
        // defined to declare all the flags.
        pub trace_sim: FlagValue<bool>,
        pub abort_on_exception: FlagValue<bool>,
        pub always_opt: FlagValue<bool>,
        pub stress_opt: FlagValue<bool>,
        pub turbo_stress: FlagValue<bool>,
        pub trace_turbo: FlagValue<bool>,
        pub trace_wasm: FlagValue<bool>,
        pub wasm_tier_up: FlagValue<bool>,
        pub wasm_lazy_compilation: FlagValue<bool>,
        pub wasm_async_compilation: FlagValue<bool>,
        pub wasm_code_gc: FlagValue<bool>,
        pub wasm_max_mem_pages: FlagValue<usize>,
        pub test_small_wasm_memory: FlagValue<bool>,
        pub stress_compaction: FlagValue<bool>,
        pub gc_greedy: FlagValue<bool>,
        pub gc_global: FlagValue<bool>,
        pub compaction_always: FlagValue<bool>,
        pub flush_bytecode: FlagValue<bool>,
        pub use_ic: FlagValue<bool>,
        pub inline_new: FlagValue<bool>,
        pub use_osr: FlagValue<bool>,
        pub always_inline: FlagValue<bool>,
        pub trace_inlining: FlagValue<bool>,
        pub lazy_feedback_allocation: FlagValue<bool>,
        pub trace_feedback_relation: FlagValue<bool>,
        pub use_best_instruction_sequence: FlagValue<bool>,
        pub no_hashing_of_ic: FlagValue<bool>,
        pub trace_opt_verbose: FlagValue<bool>,
        pub optimize_for_size: FlagValue<bool>,
        pub use_inlining_weak_calls: FlagValue<bool>,
        pub collect_heap_garbage_on_report: FlagValue<bool>,
        pub trace_maps: FlagValue<bool>,
        pub trace_normalization: FlagValue<bool>,
        pub trace_concurrent_allocation: FlagValue<bool>,
        pub stress_incremental_marking: FlagValue<bool>,
        pub track_gc_object_stats: FlagValue<bool>,
        pub concurrent_marking: FlagValue<bool>,
        pub incremental_marking: FlagValue<bool>,
        pub stress_scavenge: FlagValue<bool>,
        pub async_sweeping: FlagValue<bool>,
        pub trace_gc: FlagValue<bool>,
        pub trace_gc_ignore_scavenger: FlagValue<bool>,
        pub trace_gc_verbose: FlagValue<bool>,
        pub never_compact: FlagValue<bool>,
        pub predictable: FlagValue<bool>,
        pub print_opt_code: FlagValue<bool>,
        pub print_unopt_code: FlagValue<bool>,
        pub print_builtin_code: FlagValue<bool>,
        pub print_code_verbose: FlagValue<bool>,
        pub code_comments: FlagValue<bool>,
        pub node_name_hashing: FlagValue<bool>,
        pub trace_serializer: FlagValue<bool>,
        pub use_verbose_serializer: FlagValue<bool>,
        pub always_eager: FlagValue<bool>,
        pub verify_heap: FlagValue<bool>,
        pub verify_predictable: FlagValue<bool>,
        pub trace_verify_heap: FlagValue<bool>,
        pub use_marking_progress_bar: FlagValue<bool>,
        pub max_old_space_size: FlagValue<usize>,
        pub initial_old_space_size: FlagValue<usize>,
        pub old_space_growth_factor: FlagValue<f64>,
        pub max_heap_size: FlagValue<usize>,
        pub heap_growing_percent: FlagValue<f64>,
        pub min_semi_space_size: FlagValue<usize>,
        pub max_semi_space_size: FlagValue<usize>,
        pub semi_space_growth_factor: FlagValue<f64>,
        pub target_space_shrinkage: FlagValue<usize>,
        pub max_transition_length: FlagValue<usize>,
        pub max_inobject_smi_property_length: FlagValue<usize>,
        pub max_inobject_double_property_length: FlagValue<usize>,
        pub max_mutable_heap_code_space_size: FlagValue<usize>,
        pub max_heap_code_space_size: FlagValue<usize>,
        pub optimize_for_size_threshold: FlagValue<i32>,
        pub turbo_instruction_scheduling: FlagValue<bool>,
        pub turbofan: FlagValue<bool>,
        pub turbo_verify: FlagValue<bool>,
        pub turboshaft: FlagValue<bool>,
        pub turboshaft_verify: FlagValue<bool>,
        pub turboshaft_early_bailout: FlagValue<bool>,
        pub turboshaft_number_representation_optimization: FlagValue<bool>,
        pub turboshaft_optimize_array_bounds_checks: FlagValue<bool>,
        pub turboshaft_array_bounds_checks_elimination: FlagValue<bool>,
        pub turboshaft_disable_loads_across_safepoints: FlagValue<bool>,
        pub turboshaft_assert_on_optimization: FlagValue<bool>,
        pub turboshaft_trace_heap_graph: FlagValue<bool>,
        pub turboshaft_trace_reductions: FlagValue<bool>,
        pub turboshaft_trace_schedule: FlagValue<bool>,
        pub turboshaft_trace_types: FlagValue<bool>,
        pub turboshaft_trace_allocation: FlagValue<bool>,
        pub turboshaft_trace_phase: FlagValue<String>,
        pub no_validate_asm: FlagValue<bool>,
        pub no_wasm_trap_handler: FlagValue<bool>,
        pub use_local_asm: FlagValue<bool>,
        pub enable_simulator_gdb_support: FlagValue<bool>,
        pub stress_gc_during_compilation: FlagValue<bool>,
        pub always_turbofan: FlagValue<bool>,
        pub verify_components: FlagValue<bool>,
        pub trace_concurrent_marking_scopes: FlagValue<bool>,
        pub stress_pointer_maps: FlagValue<bool>,
        pub flush_inline_cache_lines: FlagValue<bool>,
        pub deopt_every_n_times: FlagValue<i32>,
        pub deopt_now: FlagValue<bool>,
        pub trap_handler_support: FlagValue<bool>,
        pub use_custom_libc_allocator: FlagValue<bool>,
        pub experimental_async_stack_traces: FlagValue<bool>,
        pub extra_code_coverage: FlagValue<bool>,
        pub extra_code_coverage_live_reports: FlagValue<bool>,
        pub no_extra_code_coverage_upload: FlagValue<bool>,
        pub extra_code_coverage_dir: FlagValue<String>,
        pub extra_code_coverage_url: FlagValue<String>,
        pub no_enable_resource_monitoring: FlagValue<bool>,
        pub enable_profiling: FlagValue<bool>,
        pub profiler_sampling_interval: FlagValue<f64>,
        pub max_stack_size: FlagValue<usize>,
        pub debug_code: FlagValue<bool>,
        pub never_allow_codegen: FlagValue<bool>,
        pub no_heap_randomization: FlagValue<bool>,
        pub enable_third_party_heap: FlagValue<bool>,
        pub collect_garbage_interval: FlagValue<i32>,
        pub trace_codegen: FlagValue<bool>,
        pub trace_deopt: FlagValue<bool>,
        pub trace_rewrites: FlagValue<bool>,
        pub trace_file_normalization: FlagValue<bool>,
        pub no_validate_bytecode: FlagValue<bool>,
        pub verifiable_heap: FlagValue<bool>,
        pub deterministic_gc: FlagValue<bool>,
        pub force_slow_path: FlagValue<bool>,
        pub trace_tail_calls: FlagValue<bool>,
        pub trace_promises: FlagValue<bool>,
        pub trace_array_protectors: FlagValue<bool>,
        pub trace_property_protectors: FlagValue<bool>,
        pub trace_gc_scheduler: FlagValue<bool>,
        pub test_stress_compaction_random_seed: FlagValue<i32>,
        pub trace_field_types: FlagValue<bool>,
        pub trace_external_memory: FlagValue<bool>,
        pub verify_frame_pointers: FlagValue<bool>,
        pub test_serialization: FlagValue<bool>,
        pub test_deopt_optimization_id: FlagValue<i32>,
        pub test_deopt_recompile_reason: FlagValue<i32>,
        pub trace_js_proto: FlagValue<bool>,
        pub code_stats: FlagValue<String>,
        pub perf_basic_prof_only_functions: FlagValue<String>,
        pub perf_prof_process_name: FlagValue<String>,
        pub perf_basic_prof: FlagValue<bool>,
        pub perf_prof: FlagValue<bool>,
        pub perf_prof_unwinding_info: FlagValue<bool>,
        pub use_ic_based_optimizations: FlagValue<bool>,
        pub always_inline_fast_smi_only_add: FlagValue<bool>,
        pub trace_simd: FlagValue<bool>,
        pub simd_safeguard: FlagValue<bool>,
        pub trace_js_promise_timing: FlagValue<bool>,
        pub wasm_test_streaming: FlagValue<bool>,
        pub wasm_tiering: FlagValue<bool>,
        pub print_all_async_events: FlagValue<bool>,
        pub enable_inspector: FlagValue<bool>,
        pub inspect_brk: FlagValue<bool>,
        pub inspect: FlagValue<String>,
        pub break_on_start: FlagValue<bool>,
        pub trace_debug_json: FlagValue<bool>,
        pub stress_background_compile: FlagValue<bool>,
        pub trace_file_names: FlagValue<bool>,
        pub trace_zone_maps: FlagValue<bool>,
        pub max_async_compilation_tasks: FlagValue<i32>,
        pub trace_compiler: FlagValue<bool>,
        pub ignition_elide_none_checks: FlagValue<bool>,
        pub turbo_jt: FlagValue<bool>,
        pub stress_validate_early: FlagValue<bool>,
        pub no_flush_icache: FlagValue<bool>,
        pub concurrent_recompilation: FlagValue<bool>,
        pub always_sparkplug: FlagValue<bool>,
        pub always_turbofan_concurrently: FlagValue<bool>,
        pub always_sparkplug_concurrently: FlagValue<bool>,
        pub sparkplug_reuse_registers: FlagValue<bool>,
        pub sparkplug_trace_code: FlagValue<bool>,
        pub sparkplug_trace_allocation: FlagValue<bool>,
        pub trace_sparkplug: FlagValue<bool>,
        pub stress_sparkplug: FlagValue<bool>,
        pub trace_general_heap_compaction: FlagValue<bool>,
        pub general_heap_compaction: FlagValue<bool>,
        pub max_general_heap_compaction_memory_mb: FlagValue<i32>,
        pub max_general_heap_compaction_time_ms: FlagValue<i32>,
        pub isolate_stress_gc_percentage: FlagValue<i32>,
        pub trace_allocations: FlagValue<bool>,
        pub force_marking_deque_overflow: FlagValue<bool>,
        pub oob_disable_inlining: FlagValue<bool>,
        pub use_system_libc: FlagValue<bool>,
        pub disallow_code_generation_from_strings: FlagValue<bool>,
        pub stack_trace_limit: FlagValue<i32>,
        pub error_on_wasm_non_jsexternal_exception: FlagValue<bool>,
        pub max_new_space_size: FlagValue<usize>,
        pub new_space_elasticity: FlagValue<bool>,
        pub young_generation_epoch_frequency: FlagValue<i32>,
        pub sweep_weak_collections: FlagValue<bool>,
        pub track_retaining_path: FlagValue<bool>,
        pub trace_retaining_path: FlagValue<bool>,
        pub trace_contexts: FlagValue<bool>,
        pub collect_heap_garbage_on_context_disposal: FlagValue<bool>,
        pub trace_handles: FlagValue<bool>,
        pub enable_pointer_compression: FlagValue<bool>,
        pub enable_root_compression: FlagValue<bool>,
        pub use_large_pages: FlagValue<bool>,
        pub stress_incremental_subtyping: FlagValue<bool>,
        pub no_concurrent_scavenge: FlagValue<bool>,
        pub stress_scavenge_on_background_threads: FlagValue<bool>,
        pub trace_object_stats: FlagValue<bool>,
        pub force_slow_path_after: FlagValue<i32>,
        pub trace_unoptimized_migration: FlagValue<bool>,
        pub incremental_code_flushing: FlagValue<bool>,
        pub background_code_flushing: FlagValue<bool>,
        pub code_flush_idle_tasks: FlagValue<bool>,
        pub memory_reducer: FlagValue<bool>,
        pub memory_reducer_for_idle: FlagValue<bool>,
        pub memory_reducer_for_background: FlagValue<bool>,
        pub parallel_compilation: FlagValue<bool>,
        pub single_threaded: FlagValue<bool>,
        pub off_thread_extension_api: FlagValue<bool>,
        pub max_unoptimized_code_age: FlagValue<i32>,
        pub max_optimized_code_age: FlagValue<i32>,
        pub trace_migration: FlagValue<bool>,
        pub trace_serializer_stats: FlagValue<bool>,
        pub deserializer_serialize_delay: FlagValue<i32>,
        pub deserializer_serialize_delay_ms: FlagValue<i32>,
        pub trace_deserialization: FlagValue<bool>,
        pub deserialization_message_queue: FlagValue<bool>,
        pub trace_environment_creation: FlagValue<bool>,
        pub trace_process_scope: FlagValue<bool>,
        pub trace_atomics_wait: FlagValue<bool>,
        pub trace_shared_function_info: FlagValue<bool>,
        pub enable_lazy_script_compilation: FlagValue<bool>,
        pub trace_lazy_script_compilation: FlagValue<bool>,
        pub trace_script_loading: FlagValue<bool>,
        pub enable_bytecode_ownership: FlagValue<bool>,
        pub gc_experiment: FlagValue<String>,
        pub stress_concurrent_allocation: FlagValue<bool>,
        pub concurrent_array_buffer_sweeping: FlagValue<bool>,
        pub optimize_for_inlining: FlagValue<bool>,
        pub inline_tail_calls: FlagValue<bool>,
        pub dump_wasm_module: FlagValue<bool>,
        pub error_on_fuzzer_test_timeout: FlagValue<bool>,
        pub randomize_hashes: FlagValue<bool>,
        pub trace_parser: FlagValue<bool>,
        pub fuzzer_gc_analysis: FlagValue<bool>,
        pub no_validate_regexp: FlagValue<bool>,
        pub fuzzer_single_threaded: FlagValue<bool>,
        pub turboshaft_check_elimination: FlagValue<bool>,
        pub no_default_flags: FlagValue<bool>,
        pub stress_deopt_eager: FlagValue<bool>,
        pub stack_size: FlagValue<i32>,
        pub trace_object_fields: FlagValue<bool>,
        pub trace_accessors: FlagValue<bool>,
        pub debug_compile_on_interpreter_call: FlagValue<bool>,
        pub no_wasm_memory64: FlagValue<bool>,
        pub no_wasm_bulk_memory: FlagValue<bool>,
        pub wasm_disable_structured_clone: FlagValue<bool>,
        pub no_wasm_eh: FlagValue<bool>,
        pub no_wasm_mv: FlagValue<bool>,
        pub no_wasm_sat_f2i_trunc: FlagValue<bool>,
        pub no_wasm_extended_const: FlagValue<bool>,
        pub no_wasm_type_reflection: FlagValue<bool>,
        pub no_wasm_import_externref: FlagValue<bool>,
        pub no_wasm_mutable_global: FlagValue<bool>,
        pub no_wasm_threads: FlagValue<bool>,
        pub no_wasm_gc: FlagValue<bool>,
        pub no_wasm_reftypes: FlagValue<bool>,
        pub use_v8_contexts: FlagValue<bool>,
        pub stress_sampling_heap_profiler: FlagValue<bool>,
        pub dump_counters: FlagValue<bool>,
        pub dump_counters_interval: FlagValue<i32>,
        pub force_slow_path_for_context_disposal: FlagValue<bool>,
        pub trace_weak_wrappers: FlagValue<bool>,
        pub trace_template_calls: FlagValue<bool>,
        pub trace_internal_function_calls: FlagValue<bool>,
        pub trace_wasm_memory: FlagValue<bool>,
        pub trace_wasm_opcodes: FlagValue<bool>,
        pub trace_wasm_native_calls: FlagValue<bool>,
        pub trace_wasm_instances: FlagValue<bool>,
        pub trace_wasm_compiler: FlagValue<bool>,
        pub trace_wasm_streaming: FlagValue<bool>,
        pub trace_wasm_serialization: FlagValue<bool>,
        pub wasm_max_code_space_size: FlagValue<i32>,
        pub wasm_max_table_size: FlagValue<i32>,
        pub wasm_max_memory_size_mb: FlagValue<i32>,
        pub wasm_max_object_size_mb: FlagValue<i32>,
        pub wasm_num_simulated_reserved_low_memory: FlagValue<i32>,
        pub stress_wasm_code_gc: FlagValue<bool>,
        pub stress_wasm_tiering: FlagValue<bool>,
        pub wasm_loop_opts: FlagValue<bool>,
        pub wasm_inlining: FlagValue<bool>,
        pub wasm_opt: FlagValue<bool>,
        pub wasm_preload_hint: FlagValue<String>,
        pub wasm_tiering_use_compilation_cache: FlagValue<bool>,
        pub wasm_lazy_compilation_use_compilation_cache: FlagValue<bool>,
        pub wasm_test_compilation_cache: FlagValue<String>,
        pub no_wasm_validate: FlagValue<bool>,
        pub test_torque: FlagValue<bool>,
        pub print_torque_output: FlagValue<bool>,
        pub verify_torque_output: FlagValue<bool>,
        pub trace_torque: FlagValue<bool>,
        pub trace_promises_short: FlagValue<bool>,
        pub gc_sanitize: FlagValue<bool>,
        pub gc_analyze: FlagValue<bool>,
        pub gc_stress_marking: FlagValue<bool>,
        pub gc_stress_scavenge: FlagValue<bool>,
        pub gc_stress_code_gc: FlagValue<bool>,
        pub gc_stress_young_code_gc: FlagValue<bool>,
        pub gc_stress_full_code_gc: FlagValue<bool>,
        pub stress_number_conversions: FlagValue<bool>,
        pub stress_regress_conversion_algorithm: FlagValue<bool>,
        pub trace_number_conversions: FlagValue<bool>,
        pub trace_regress_conversion_algorithm: FlagValue<bool>,
        pub no_new_regexp_engine: FlagValue<bool>,
        pub stress_validate_heap: FlagValue<bool>,
        pub stress_concurrent_sweeping: FlagValue<bool>,
        pub stress_concurrent_marking: FlagValue<bool>,
        pub stress_concurrent_compilation: FlagValue<bool>,
        pub stress_concurrent_recompilation: FlagValue<bool>,
        pub stress_concurrent_code_flushing: FlagValue<bool>,
        pub stress_concurrent_gc: FlagValue<bool>,
        pub stress_concurrent_array_buffer_sweeping: FlagValue<bool>,
        pub stress_inline_asm: FlagValue<bool>,
        pub stress_sampling_heap_profiler_resample_interval_ms: FlagValue<i32>,
        pub no_optimize_closures: FlagValue<bool>,
        pub oob_enable_bytecode_inlining: FlagValue<bool>,
        pub oob_trace_bytecode_inlining: FlagValue<bool>,
        pub oob_enable_return_if_optimized: FlagValue<bool>,
        pub oob_trace_return_if_optimized: FlagValue<bool>,
        pub oob_trace_type_specialization: FlagValue<bool>,
        pub trace_wasm_value_flow: FlagValue<bool>,
        pub trace_wasm_stack_ir: FlagValue<bool>,
        pub trace_wasm_memory_in_wasm: FlagValue<bool>,
        pub enable_wasm_inlining_experiment: FlagValue<bool>,
        pub enable_c_heap_allocation: FlagValue<bool>,
        pub no_c_heap_allocation: FlagValue<bool>,
        pub gc_global_deterministic: FlagValue<bool>,
        pub stress_c_heap: FlagValue<bool>,
        pub trace_c_heap: FlagValue<bool>,
        pub min_number_of_executed_jsfunctions: FlagValue<i32>,
        pub min_number_of_executed_code_units_in_jsfunction: FlagValue<i32>,
        pub enable_c_heap_in_wasm_code: FlagValue<bool>,
        pub enable_c_heap_in_js_code: FlagValue<bool>,
        pub use_finalization_registry_sandbox: FlagValue<bool>,
        pub gc_destabilize: FlagValue<bool>,
        pub gc_destabilize_on_every_call: FlagValue<bool>,
        pub gc_always: FlagValue<bool>,
        pub gc_min_object_size_destabilize: FlagValue<i32>,
        pub gc_max_object_size_destabilize: FlagValue<i32>,
        pub trace_wasm_test_names: FlagValue<bool>,
        pub wasm_test_name_filter: FlagValue<String>,
        pub wasm_test_file_filter: FlagValue<String>,
        pub wasm_test_fail_fast: FlagValue<bool>,
        pub verify_invalid_regress_code: FlagValue<bool>,
        pub trace_regress_type_feedback_specialization: FlagValue<bool>,
        pub stress_regress_type_feedback_specialization: FlagValue<bool>,
        pub regress_type_feedback_specialization_mode: FlagValue<String>,
        pub trace_code_flushing: FlagValue<bool>,
        pub no_speculative_safe_integers: FlagValue<bool>,
        pub no_heap_sandbox: FlagValue<bool>,
        pub no_externalize_string: FlagValue<bool>,
        pub no_lazy_string_externalization: FlagValue<bool>,
        pub stress_code_creation_random: FlagValue<bool>,
        pub trace_code_creation: FlagValue<bool>,
        pub trace_allocation_sites: FlagValue<bool>,
        pub trace_environment_variables: FlagValue<bool>,
        pub wasm_max_number_of_compilation_tasks: FlagValue<i32>,
        pub wasm_max_number_of_recompilation_tasks: FlagValue<i32>,
        pub no_source_position_literals: FlagValue<bool>,
        pub trace_code_stub_cache: FlagValue<bool>,
        pub stress_inline_array_accessors: FlagValue<bool>,
        pub inline_array_accessors: FlagValue<bool>,
        pub trace_array_accessors: FlagValue<bool>,
        pub trace_typed_array_neutering: FlagValue<bool>,
        pub turbo_store_elimination: FlagValue<bool>,
        pub turboshaft_store_elimination: FlagValue<bool>,
        pub no_call_ic: FlagValue<bool>,
        pub trace_call_ic: FlagValue<bool>,
        pub trace_weak_refs: FlagValue<bool>,
        pub no_validate_unoptimized_code: FlagValue<bool>,
        pub wasm_experimental_async_stack_traces: FlagValue<bool>,
        pub trace_object_layout: FlagValue<bool>,
        pub no_maglev: FlagValue<bool>,
        pub maglev: FlagValue<bool>,
        pub trace_maglev: FlagValue<bool>,
        pub trace_maglev_ir: FlagValue<bool>,
        pub trace_maglev_code: FlagValue<bool>,
        pub trace_maglev_frame_state: FlagValue<bool>,
        pub stress_maglev: FlagValue<bool>,
        pub trace_maglev_graph: FlagValue<bool>,
        pub trace_maglev_allocation: FlagValue<bool>,
        pub trace_maglev_type_feedback: FlagValue<bool>,
        pub trace_maglev_bailout: FlagValue<bool>,
        pub trace_maglev_verbose: FlagValue<bool>,
        pub maglev_experimental_deoptimization: FlagValue<bool>,
        pub maglev_early_bailout: FlagValue<bool>,
        pub maglev_can_use_on_stack_replacement: FlagValue<bool>,
        pub maglev_use_old_spills: FlagValue<bool>,
        pub maglev_use_new_spills: FlagValue<bool>,
        pub maglev_store_elimination: FlagValue<bool>,
        pub maglev_assert_on_optimization: FlagValue<bool>,
        pub maglev_instruction_scheduling: FlagValue<bool>,
        pub trace_js_return: FlagValue<bool>,
        pub trace_js_call: FlagValue<bool>,
        pub trace_js_construct: FlagValue<bool>,
        pub trace_function_calls: FlagValue<bool>,
        pub trace_function_entry: FlagValue<bool>,
        pub trace_js_native: FlagValue<bool>,
        pub debug_wasm_codegen: FlagValue<bool>,
        pub no_wasm_threads_feature: FlagValue<bool>,
        pub no_wasm_atomics_feature: FlagValue<bool>,
        pub trace_inline_c_calls: FlagValue<bool>,
        pub turbo_disable_optimizations: FlagValue<bool>,
        pub trace_turbo_number_representation: FlagValue<bool>,
        pub trace_access_stats: FlagValue<bool>,
        pub turbo_concurrent_allocation: FlagValue<bool>,
        pub turbo_disable_concurrent_allocation: FlagValue<bool>,
        pub turbo_trace_zone_maps: FlagValue<bool>,
        pub turbo_trace_allocation: FlagValue<bool>,
        pub turbo_trace_code_gen: FlagValue<bool>,
        pub turbo_trace_representation: FlagValue<bool>,
        pub turbo_trace_type_feedback: FlagValue<bool>,
        pub turbo_trace_types: FlagValue<bool>,
        pub turbo_trace_file_names: FlagValue<bool>,
        pub turbo_trace_reductions: FlagValue<bool>,
        pub turbo_trace_schedule: FlagValue<bool>,
        pub turbo_trace_graph: FlagValue<bool>,
        pub turbo_trace_rewrites: FlagValue<bool>,
        pub turbo_trace_inlining: FlagValue<bool>,
        pub turbo_trace_optimization: FlagValue<bool>,
        pub turbo_trace_optimizations: FlagValue<bool>,
        pub turbo_verify_graph: FlagValue<bool>,
        pub turbo_verify_heap: FlagValue<bool>,
        pub turbo_verify_code: FlagValue<bool>,
        pub turbo_rewrite_calls: FlagValue<bool>,
        pub turbo_rewrite_generic: FlagValue<bool>,
        pub turbo_store_check_optimization: FlagValue<bool>,
        pub turbo_load_elimination: FlagValue<bool>,
        pub turbo_inlining: FlagValue<bool>,
        pub turbo_eliminate_redundant_casts: FlagValue<bool>,
        pub turbo_loop_peeling: FlagValue<bool>,
        pub turbo_loop_rotation: FlagValue<bool>,
        pub turbo_loop_unrolling: FlagValue<bool>,
        pub turbo_vectorize_loops: FlagValue<bool>,
        pub turbo_escape_analysis: FlagValue<bool>,
        pub turbo_unreachable_code_elimination: FlagValue<bool>,
        pub turbo_trace_heap_graph: FlagValue<bool>,
        pub turbo_trace_environment: FlagValue<bool>,
        pub turbo_trace_constant_folding: FlagValue<bool>,
        pub turbo_trace_store_elimination: FlagValue<bool>,
        pub turbo_trace_load_elimination: FlagValue<bool>,
        pub turbo_trace_store_check_elimination: FlagValue<bool>,
        pub turbo_trace_access_stats: FlagValue<bool>,
        pub turbo_enable_optimizations: FlagValue<bool>,
        pub turbo_disable_instruction_scheduling: FlagValue<bool>,
        pub turbo_experimental_allocation_folding: FlagValue<bool>,
        pub turbo_eliminate_empty_basic_blocks: FlagValue<bool>,
        pub turbo_split_on_default: FlagValue<bool>,
        pub turbo_number_representation_optimization: FlagValue<bool>,
        pub turbo_rewrite_typed_arrays: FlagValue<bool>,
        pub turbo_rewrite_arrays: FlagValue<bool>,
        pub turbo_rewrite_numbers: FlagValue<bool>,
        pub turbo_rewrite_strings: FlagValue<bool>,
        pub turbo_rewrite_objects: FlagValue<bool>,
        pub turbo_rewrite_promises: FlagValue<bool>,
        pub turbo_rewrite_arrays_and_strings: FlagValue<bool>,
        pub turbo_eliminate_redundant_philippi: FlagValue<bool>,
        pub turbo_eliminate_redundant_phi: FlagValue<bool>,
        pub turbo_fold_constant_